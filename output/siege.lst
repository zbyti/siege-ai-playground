mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1040..$1087
   102
   103 				; ------------------------------------------------------------
   104
   105 1088			START
   106 1088 BA				tsx
   107 1089 8E B9 11			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 000D			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 11CA			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 108C A2 F3			ldx #256-VLEN
   120 108E A9 00			lda #$00
   121 1090 9D D7 10 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 1096 A9 D7 85 02 A9 11 + 	mwa #PROGRAMSTACK psptr
   127
   128 109E A2 00			ldx #$00
   129 10A0 86 10			stx bp						; BP = 0
   130
   131 10A2 CA				dex						; X = 255
   132
   133 10A3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: siege.a65]
Source: siege.a65
   134
   135 10A3			.local	MAIN						; PROCEDURE
   136
   137 10A3 4C 99 11			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10A6			.local	SYSTEM						; UNIT
   142
   143 10A6			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   148 				; as Pointer
   149 10A6 B5 18			lda :STACKORIGIN,x
   150 10A8 85 0C			sta VALUE
   151 10AA CA				dex
   152
   153 				; ------------------------------------------------------------
   154
   155 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   156 				; as Pointer
   157 10AB B5 18			lda :STACKORIGIN,x
   158 10AD 85 08			sta A
   159 10AF B5 28			lda :STACKORIGIN+STACKWIDTH,x
   160 10B1 85 09			sta A+1
   161 10B3 CA				dex
   162
   163 				; ---------------------  ASM Block 016  ---------------------
   164
   165 10B4 A0 00			ldy #0
   166 10B6 A5 0C 91 08			mva value (edx),y
   167
   168
   169 				; ------------------------------------------------------------
   170
   171 = 0008			A	= edx
   172 = 000C			VALUE	= ecx
   173 10BA			@exit
   174 					.ifdef @new
   175 					lda <@VarData
   176 					sta :ztmp
   177 					lda >@VarData
   178 					ldy #@VarDataSize-1
   179 					jmp @FreeMem
   180 					els
   181 10BA 60				rts						; ret
   182 					eif
   183 				.endl
   184
   185 10BB			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   186
   187 				; ------------------------------------------------------------
   188
   189 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   190 				; as Pointer
   191 10BB B5 18			lda :STACKORIGIN,x
   192 10BD 85 0C			sta VALUE
   193 10BF B5 28			lda :STACKORIGIN+STACKWIDTH,x
   194 10C1 85 0D			sta VALUE+1
   195 10C3 CA				dex
   196
   197 				; ------------------------------------------------------------
   198
   199 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   200 				; as Pointer
   201 10C4 B5 18			lda :STACKORIGIN,x
   202 10C6 85 08			sta A
   203 10C8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   204 10CA 85 09			sta A+1
   205 10CC CA				dex
   206
   207 				; ---------------------  ASM Block 017  ---------------------
   208
   209 10CD A0 00			ldy #0
   210 10CF A5 0C 91 08			mva value (edx),y
   211 10D3 C8				iny
   212 10D4 A5 0D 91 08			mva value+1 (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10D8			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10D8 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10D9			.local	FILLCHAR_004F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   232
   233 				; ---------------------  ASM Block 019  ---------------------
   234
   235 10D9 20 40 10			jsr @fill
   236
   237
   238 				; ------------------------------------------------------------
   239
   240 = 0008			A	= edx
   241 = 000C			COUNT	= ecx
   242 = 0004			VALUE	= eax
   243 10DC			@exit
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					els
   251 10DC 60				rts						; ret
   252 					eif
   253 				.endl
   254
   255 10DD			.local	PAUSE_0064					; PROCEDURE | ASSEMBLER | OVERLOAD
   256
   257 				; ---------------------  ASM Block 034  ---------------------
   258
   259 10DD A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   260
   261 10E3			@exit
   262 					.ifdef @new
   263 					lda <@VarData
   264 					sta :ztmp
   265 					lda >@VarData
   266 					ldy #@VarDataSize-1
   267 					jmp @FreeMem
   268 					els
   269 10E3 60				rts						; ret
   270 					eif
   271 				.endl
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0101			__PORTB_BANKS	= $0101
   276 = 0648			M_PI_2	= $0648
   277 = 0192			D_PI_2	= $0192
   278 = 0004			D_PI_180	= $04
   279 = 0000			MGTIA	= $00
   280 = 0080			MVBXE	= $80
   281 = 0000			VBXE_XDLADR	= $00
   282 = 0100			VBXE_BCBADR	= $0100
   283 = 1000			VBXE_MAPADR	= $1000
   284 = 5000			VBXE_OVRADR	= $5000
   285 = B000			VBXE_WINDOW	= $B000
   286 = 0000			IDLI	= $00
   287 = 0001			IVBL	= $01
   288 = 00FE			CH_DELCHR	= $FE
   289 = 009B			CH_ENTER	= $9B
   290 = 001B			CH_ESC	= $1B
   291 = 001C			CH_CURS_UP	= $1C
   292 = 001D			CH_CURS_DOWN	= $1D
   293 = 001E			CH_CURS_LEFT	= $1E
   294 = 001F			CH_CURS_RIGHT	= $1F
   295 = 007F			CH_TAB	= $7F
   296 = 009B			CH_EOL	= $9B
   297 = 007D			CH_CLR	= $7D
   298 = 00FD			CH_BELL	= $FD
   299 = 007E			CH_DEL	= $7E
   300 = 009C			CH_DELLINE	= $9C
   301 = 009D			CH_INSLINE	= $9D
   302 = 0000			COLOR_BLACK	= $00
   303 = 000E			COLOR_WHITE	= $0E
   304 = 0032			COLOR_RED	= $32
   305 = 0096			COLOR_CYAN	= $96
   306 = 0068			COLOR_VIOLET	= $68
   307 = 00C4			COLOR_GREEN	= $C4
   308 = 0074			COLOR_BLUE	= $74
   309 = 00EE			COLOR_YELLOW	= $EE
   310 = 0028			COLOR_ORANGE	= $28
   311 = 00E4			COLOR_BROWN	= $E4
   312 = 003C			COLOR_LIGHTRED	= $3C
   313 = 0004			COLOR_GRAY1	= $04
   314 = 0006			COLOR_GRAY2	= $06
   315 = 000A			COLOR_GRAY3	= $0A
   316 = 00CC			COLOR_LIGHTGREEN	= $CC
   317 = 007C			COLOR_LIGHTBLUE	= $7C
   318 = 0004			FMOPENREAD	= $04
   319 = 0008			FMOPENWRITE	= $08
   320 = 0009			FMOPENAPPEND	= $09
   321 = 000C			FMOPENREADWRITE	= $0C
   322 = 11C4			SCREENWIDTH	= DATAORIGIN+$0000
   323 = 11C6			SCREENHEIGHT	= DATAORIGIN+$0002
   324 = 11C8			DATESEPARATOR	= DATAORIGIN+$0004
   325 = D014			TVSYSTEM	= $D014
   326 = D20A			RND	= $D20A
   327 = 02C0			adr.PALETTE	= $02C0
   328 10E4			.var PALETTE	= adr.PALETTE .word
   329 = D012			adr.HPALETTE	= $D012
   330 10E4			.var HPALETTE	= adr.HPALETTE .word
   331 = 11C9			FILEMODE	= DATAORIGIN+$0005
   332 = 11CA			GRAPHMODE	= DATAORIGIN+$0006
   333 = 11CB			IORESULT	= DATAORIGIN+$0007
   334 = 11CC			EOLN	= DATAORIGIN+$0008
   335 = 11CD			RNDSEED	= DATAORIGIN+$0009
   336
   337 = 10E4 C0 02		PALETTE
   337 = 10E6 12 D0		HPALETTE
   337 				.endl							; UNIT SYSTEM
   338
   339 10E8			.local	INIT						; PROCEDURE
   340
   341 				; optimize OK (siege.pas), line = 40
   342
   343 10E8 A9 00			lda #$00
   344 10EA 8D 15 FF			sta BORDERCOLOR
   345 10ED 8D 19 FF			sta BGCOLOR
   346
   347 				; optimize OK (siege.pas), line = 41
   348
   349 10F0 A9 20			lda #$20
   350 10F2 85 04			sta SYSTEM.FILLCHAR_004F.VALUE
   351 10F4 A9 C0			lda #$C0
   352 10F6 85 0C			sta SYSTEM.FILLCHAR_004F.COUNT
   353 10F8 A9 03			lda #$03
   354 10FA 85 0D			sta SYSTEM.FILLCHAR_004F.COUNT+1
   355 10FC A9 00			lda #$00
   356 10FE 85 08			sta SYSTEM.FILLCHAR_004F.A
   357 1100 A9 0C			lda #$0C
   358 1102 85 09			sta SYSTEM.FILLCHAR_004F.A+1
   359 1104 20 D9 10			jsr SYSTEM.FILLCHAR_004F
   360
   361 				; optimize OK (siege.pas), line = 43
   362
   363 1107 A9 27			lda #$27
   364 1109 85 58			sta I0B
   365
   366 110B			l_007E
   367 				; --- ForToDoCondition
   368
   369 				; optimize OK (siege.pas), line = 44
   370
   371 110B A4 58			ldy I0B
   372 110D A9 A0			lda #$A0
   373 110F 99 00 0C			sta $0C00,y
   374
   375 				; optimize OK (siege.pas), line = 45
   376
   377 1112 99 C0 0F			sta $0FC0,y
   378
   379 				; optimize OK (siege.pas), line = 46
   380
   381 1115 A9 31			lda #$31
   382 1117 99 00 08			sta $0800,y
   383
   384 				; optimize OK (siege.pas), line = 47
   385
   386 111A 99 C0 0B			sta $0BC0,y
   387
   388 				; --- ForToDoEpilog
   389 111D C6 58			dec I0B
   390 111F 10 EA			jpl l_007E
   391 1121			l_008C
   392
   393 				; optimize OK (siege.pas), line = 50
   394
   395 1121 A9 18			lda #$18
   396 1123 85 58			sta I0B
   397
   398 1125			l_00BE
   399 				; --- ForToDoCondition
   400 1125 A5 58			lda I0B
   401 1127 C9 01			cmp #$01
   402 1129 90 3A			jcc l_00CC
   403
   404 				; optimize OK (siege.pas), line = 51
   405
   406 112B 0A				asl @
   407 112C A8				tay
   408 112D A9 FF			lda #$FF
   409 112F 18 79 0E 10			add adr.MUL40,y
   410 1133 85 12			sta :bp2
   411 1135 A9 0B			lda #$0B
   412 1137 79 0F 10			adc adr.MUL40+1,y
   413 113A 85 13			sta :bp2+1
   414 113C A0 00			ldy #$00
   415 113E A9 A0			lda #$A0
   416 1140 91 12			sta (:bp2),y
   417 1142 C8				iny
   418 1143 91 12			sta (:bp2),y
   419
   420 				; optimize OK (siege.pas), line = 52
   421
   422 1145 A5 58			lda I0B
   423 1147 0A				asl @
   424 1148 A8				tay
   425 1149 A9 FF			lda #$FF
   426 114B 18 79 0E 10			add adr.MUL40,y
   427 114F 85 12			sta :bp2
   428 1151 A9 07			lda #$07
   429 1153 79 0F 10			adc adr.MUL40+1,y
   430 1156 85 13			sta :bp2+1
   431 1158 A0 00			ldy #$00
   432 115A A9 31			lda #$31
   433 115C 91 12			sta (:bp2),y
   434 115E C8				iny
   435 115F 91 12			sta (:bp2),y
   436
   437 				; --- ForToDoEpilog
   438 1161 C6 58			dec I0B
   439 1163 10 C0			jpl l_00BE
   440 1165			l_00CC
   441
   442 				; optimize OK (siege.pas), line = 55
   443
   444 1165 A9 0A			lda #$0A
   445 1167 8D CF 11			sta PLAYER1.X
   446 116A 8D D0 11			sta PLAYER1.Y
   447
   448 				; ------------------------------------------------------------
   449
   450 = 0000			@FORTMP_007B	= $00
   451 = 0001			@FORTMP_00BB	= $01
   452 116D			@exit
   453 					.ifdef @new
   454 					lda <@VarData
   455 					sta :ztmp
   456 					lda >@VarData
   457 					ldy #@VarDataSize-1
   458 					jmp @FreeMem
   459 					els
   460 116D 60				rts						; ret
   461 					eif
   462 				.endl
   463
   464 116E			.local	PUTCHAR						; PROCEDURE
   465
   466 				; optimize OK (siege.pas), line = 60
   467
   468 116E AD D4 11			lda Y
   469 1171 0A				asl @
   470 1172 A8				tay
   471 1173 B9 0E 10			lda adr.MUL40,y
   472 1176 18 6D D3 11			add X
   473 117A 85 59			sta T0W
   474 117C B9 0F 10			lda adr.MUL40+1,y
   475 117F 69 08			adc #$08
   476 1181 85 5A			sta T0W+1
   477
   478 				; optimize OK (siege.pas), line = 61
   479
   480 1183 85 11			sta :bp+1
   481 1185 A4 59			ldy T0W
   482 1187 AD D6 11			lda C
   483 118A 91 10			sta (:bp),y
   484 118C A5 5A			lda T0W+1
   485 118E 18 69 04			add #$04
   486 1191 85 11			sta :bp+1
   487 1193 AD D5 11			lda V
   488 1196 91 10			sta (:bp),y
   489
   490 				; ------------------------------------------------------------
   491
   492 = 11D3			X	= DATAORIGIN+$000F
   493 = 11D4			Y	= DATAORIGIN+$0010
   494 = 11D5			V	= DATAORIGIN+$0011
   495 = 11D6			C	= DATAORIGIN+$0012
   496
   497 = 11D3			@VarData	= X
   498 = 0004			@VarDataSize	= 4
   499
   500 1198			@exit
   501 					.ifdef @new
   502 					lda <@VarData
   503 					sta :ztmp
   504 					lda >@VarData
   505 					ldy #@VarDataSize-1
   506 					jmp @FreeMem
   507 					els
   508 1198 60				rts						; ret
   509 					eif
   510 				.endl
   511 1199			l_0007
   512
   513 				; optimize FAIL ('INIT', siege.pas), line = 65
   514
   515 1199 20 E8 10			jsr INIT
   516
   517 				; optimize OK (siege.pas), line = 66
   518
   519 119C A9 7F			lda #$7F
   520 119E 8D D6 11			sta PUTCHAR.C
   521 11A1 A9 57			lda #$57
   522 11A3 8D D5 11			sta PUTCHAR.V
   523 11A6 AD CF 11			lda PLAYER1.X
   524 11A9 8D D4 11			sta PUTCHAR.Y
   525 11AC 8D D3 11			sta PUTCHAR.X
   526 11AF 20 6E 11			jsr PUTCHAR
   527
   528 				; --- RepeatUntilProlog
   529 11B2			l_0121
   530
   531 				; optimize FAIL ('SYSTEM.PAUSE_0064', siege.pas), line = 68
   532
   533 11B2 20 DD 10			jsr SYSTEM.PAUSE_0064
   534
   535 				; optimize OK (siege.pas), line = 69
   536
   537 11B5 4C B2 11			jmp l_0121
   538
   539 				; ------------------------------------------------------------
   540
   541 = 0800			ATTRIBUTE_ADDR	= $0800
   542 = 0C00			SCREEN_ADDR	= $0C00
   543 = 00A0			WALL	= $A0
   544 = 0031			WALL_COLOUR	= $31
   545 = 0020			EMPTY	= $20
   546 = 0057			PLY_HEAD	= $57
   547 = 00A0			PLY_TAIL	= $A0
   548 = 007F			PLY1_COLOUR	= $7F
   549 = 004E			PLY2_COLOUR	= $4E
   550 = 100E			adr.MUL40	= CODEORIGIN+$0000
   551 11B8			.var MUL40	= adr.MUL40 .word
   552 = FF15			BORDERCOLOR	= $FF15
   553 = FF19			BGCOLOR	= $FF19
   554 = 0058			I0B	= $58
   555 = 0059			T0W	= $59
   556 = 11CF			adr.PLAYER1	= [DATAORIGIN+$000B] .array [6]
   557 11B8			.var PLAYER1	= adr.PLAYER1 .word
   558 = 11CF			PLAYER1.X	= DATAORIGIN+$000B
   559 = 11D0			PLAYER1.Y	= DATAORIGIN+$000C
   560 = 11D1			adr.PLAYER2	= [DATAORIGIN+$000D] .array [6]
   561 11B8			.var PLAYER2	= adr.PLAYER2 .word
   562 = 11D1			PLAYER2.X	= DATAORIGIN+$000D
   563 = 11D2			PLAYER2.Y	= DATAORIGIN+$000E
   564 11B8			@exit
   565
   566 11B8 A2 00		@halt	ldx #$00
   567 11BA 9A				txs
   568
   569 11BB 60				rts
   570
   571 				; ------------------------------------------------------------
   572
   573 				; ------------------------------------------------------------
   574
   575 11BC			.local	@DEFINES
   576 11BC			C4P
   577 				.endl
   578
   579 11BC			.local	@RESOURCE
   580 				.endl
   581
   582 = 11BC 0E 10		MUL40
   582 = 11BE CF 11		PLAYER1
   582 = 11C0 D1 11		PLAYER2
   582 				.endl							; MAIN
   583
   584 				; ------------------------------------------------------------
   585 				; ------------------------------------------------------------
   586
   587 				.macro	UNITINITIALIZATION
   588 				
   589 					.ifdef MAIN.SYSTEM.@UnitInit
   590 					jsr MAIN.SYSTEM.@UnitInit
   591 					eif
   592 				.endm
   593
   594 				; ------------------------------------------------------------
   595
   596 					ift .SIZEOF(MAIN.SYSTEM) > 0
   597 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   597 				SYSTEM: $10A6..$10E7
   598 					eif
   599
   600 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   600 				CODE: $100E..$11BB
   601
   602 				; ------------------------------------------------------------
   603
   604 11C2				.align $04
   605
   606 11C4			DATAORIGIN
   607 11C4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   608
   609 = 0006			VARINITSIZE	= *-DATAORIGIN
   610 = 0013			VARDATASIZE	= 19
   611
   612 = 11D7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   613
   614 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   614 				DATA: $11C4..$11D7
   615
   616 				; ------------------------------------------------------------
   617
   618 				.macro	STATICDATA
   619 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
   620 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
   621 				.by  $C0 $03
   622 				.endm
   623
   624 					end
