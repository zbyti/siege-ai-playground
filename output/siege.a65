; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2021/02/09] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $02

psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------
	opt h-f+
	org $1001
	org [a($1001)],$1001				; BASIC start address

	basic_start(START)
	org $100E

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_c4p.asm'

.print 'ZPAGE: ',psptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 016  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 017  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_004F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 019  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_0064					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 034  ---------------------

 lda:cmp:req :c4p_time+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

.local	INIT						; PROCEDURE

; optimize OK (siege.pas), line = 40

	lda #$00
	sta BORDERCOLOR
	sta BGCOLOR

; optimize OK (siege.pas), line = 41

	lda #$20
	sta SYSTEM.FILLCHAR_004F.VALUE
	lda #$C0
	sta SYSTEM.FILLCHAR_004F.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_004F.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_004F.A
	lda #$0C
	sta SYSTEM.FILLCHAR_004F.A+1
	jsr SYSTEM.FILLCHAR_004F

; optimize OK (siege.pas), line = 43

	lda #$27
	sta I0B

l_007E
; --- ForToDoCondition

; optimize OK (siege.pas), line = 44

	ldy I0B
	lda #$A0
	sta $0C00,y

; optimize OK (siege.pas), line = 45

	sta $0FC0,y

; optimize OK (siege.pas), line = 46

	lda #$31
	sta $0800,y

; optimize OK (siege.pas), line = 47

	sta $0BC0,y

; --- ForToDoEpilog
	dec I0B
	jpl l_007E
l_008C

; optimize OK (siege.pas), line = 50

	lda #$18
	sta I0B

l_00BE
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_00CC

; optimize OK (siege.pas), line = 51

	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$0B
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$A0
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (siege.pas), line = 52

	lda I0B
	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$07
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$31
	sta (:bp2),y
	iny
	sta (:bp2),y

; --- ForToDoEpilog
	dec I0B
	jpl l_00BE
l_00CC

; optimize OK (siege.pas), line = 55

	lda #$0A
	sta PLAYER1.X
	sta PLAYER1.Y

; ------------------------------------------------------------

@FORTMP_007B	= $00
@FORTMP_00BB	= $01
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTCHAR						; PROCEDURE

; optimize OK (siege.pas), line = 60

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$08
	sta T0W+1

; optimize OK (siege.pas), line = 61

	sta :bp+1
	ldy T0W
	lda C
	sta (:bp),y
	lda T0W+1
	add #$04
	sta :bp+1
	lda V
	sta (:bp),y

; ------------------------------------------------------------

X	= DATAORIGIN+$000F
Y	= DATAORIGIN+$0010
V	= DATAORIGIN+$0011
C	= DATAORIGIN+$0012

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0007

; optimize FAIL ('INIT', siege.pas), line = 65

	jsr INIT

; optimize OK (siege.pas), line = 66

	lda #$7F
	sta PUTCHAR.C
	lda #$57
	sta PUTCHAR.V
	lda PLAYER1.X
	sta PUTCHAR.Y
	sta PUTCHAR.X
	jsr PUTCHAR

; --- RepeatUntilProlog
l_0121

; optimize FAIL ('SYSTEM.PAUSE_0064', siege.pas), line = 68

	jsr SYSTEM.PAUSE_0064

; optimize OK (siege.pas), line = 69

	jmp l_0121

; ------------------------------------------------------------

ATTRIBUTE_ADDR	= $0800
SCREEN_ADDR	= $0C00
WALL	= $A0
WALL_COLOUR	= $31
EMPTY	= $20
PLY_HEAD	= $57
PLY_TAIL	= $A0
PLY1_COLOUR	= $7F
PLY2_COLOUR	= $4E
adr.MUL40	= CODEORIGIN+$0000
.var MUL40	= adr.MUL40 .word
BORDERCOLOR	= $FF15
BGCOLOR	= $FF19
I0B	= $58
T0W	= $59
adr.PLAYER1	= [DATAORIGIN+$000B] .array [6]
.var PLAYER1	= adr.PLAYER1 .word
PLAYER1.X	= DATAORIGIN+$000B
PLAYER1.Y	= DATAORIGIN+$000C
adr.PLAYER2	= [DATAORIGIN+$000D] .array [6]
.var PLAYER2	= adr.PLAYER2 .word
PLAYER2.X	= DATAORIGIN+$000D
PLAYER2.Y	= DATAORIGIN+$000E
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
C4P
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 19

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
.by  $C0 $03
.endm

	end
