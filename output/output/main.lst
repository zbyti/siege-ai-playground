mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E 53 15			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 002D			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 156A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 D3			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D 97 14 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 97 85 02 A9 15 + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C E7 14			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D 6F 15		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD 6F 15 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 156F			RESULT	= DATAORIGIN+$000B
   182
   183 = 156F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 110C AD 70 15		loop  lda n
   307 110F 0D 71 15		  ora n+1
   308 1112 F0 14		  beq stop
   309
   310 1114 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 111A AD 70 15 D0 03 CE +   dew n
   313
   314 1125 4C 0C 11		  jmp loop
   315 1128			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1570			N	= DATAORIGIN+$000C
   321
   322 = 1570			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 1128			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 1128 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1129			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1129 8D 72 15			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 112C AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 112F 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1132 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 1135 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 1138 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 113B 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 113E A8			  tay
   350
   351 113F AD 72 15		  lda range
   352 1142 F0 08		  beq stop
   353
   354 1144 85 0C		  sta ecx
   355 1146 84 04		  sty eax
   356
   357 1148 20 8C 10		  jsr imulCL
   358 114B A8			  tay
   359
   360 114C 8C 73 15		stop  sty Result
   361
   362 114F			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 114F E8				inx
   370 1150 AD 73 15 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1572			RANGE	= DATAORIGIN+$000E
   383 = 1573			RESULT	= DATAORIGIN+$000F
   384
   385 = 1572			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 1155 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1564			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1566			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1568			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 1156			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 1156			.var HPALETTE	= adr.HPALETTE .word
   449 = 1569			FILEMODE	= DATAORIGIN+$0005
   450 = 156A			GRAPHMODE	= DATAORIGIN+$0006
   451 = 156B			IORESULT	= DATAORIGIN+$0007
   452 = 156C			EOLN	= DATAORIGIN+$0008
   453 = 156D			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 1156 C0 02		PALETTE
   455 = 1158 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 115A			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 71
   460
   461 115A A9 03			lda #$03
   462 115C 8D 76 15			sta ALIVE
   463
   464 				; optimize OK (main.pas), line = 73
   465
   466 115F A9 1F			lda #$1F
   467 1161 8D 15 FF			sta BORDERCOLOR
   468 1164 A9 00			lda #$00
   469 1166 8D 19 FF			sta BGCOLOR
   470
   471 				; optimize OK (main.pas), line = 74
   472
   473 1169 A9 20			lda #$20
   474 116B 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   475 116D A9 C0			lda #$C0
   476 116F 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   477 1171 A9 03			lda #$03
   478 1173 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   479 1175 A9 00			lda #$00
   480 1177 85 08			sta SYSTEM.FILLCHAR_0056.A
   481 1179 A9 0C			lda #$0C
   482 117B 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   483 117D 20 08 11			jsr SYSTEM.FILLCHAR_0056
   484
   485 				; optimize OK (main.pas), line = 76
   486
   487 1180 A9 27			lda #$27
   488 1182 85 58			sta T0B
   489
   490 1184			l_008D
   491 				; --- ForToDoCondition
   492
   493 				; optimize OK (main.pas), line = 77
   494
   495 1184 A4 58			ldy T0B
   496 1186 A9 A0			lda #$A0
   497 1188 99 00 0C			sta $0C00,y
   498
   499 				; optimize OK (main.pas), line = 78
   500
   501 118B 99 C0 0F			sta $0FC0,y
   502
   503 				; optimize OK (main.pas), line = 79
   504
   505 118E A9 41			lda #$41
   506 1190 99 00 08			sta $0800,y
   507
   508 				; optimize OK (main.pas), line = 80
   509
   510 1193 99 C0 0B			sta $0BC0,y
   511
   512 				; --- ForToDoEpilog
   513 1196 C6 58			dec T0B
   514 1198 10 EA			jpl l_008D
   515 119A			l_009B
   516
   517 				; optimize OK (main.pas), line = 83
   518
   519 119A A9 18			lda #$18
   520 119C 85 58			sta T0B
   521
   522 119E			l_00CD
   523 				; --- ForToDoCondition
   524 119E A5 58			lda T0B
   525 11A0 C9 01			cmp #$01
   526 11A2 90 3A			jcc l_00DB
   527
   528 				; optimize OK (main.pas), line = 84
   529
   530 11A4 0A				asl @
   531 11A5 A8				tay
   532 11A6 A9 FF			lda #$FF
   533 11A8 18 79 0E 10			add adr.MUL40,y
   534 11AC 85 12			sta :bp2
   535 11AE A9 0B			lda #$0B
   536 11B0 79 0F 10			adc adr.MUL40+1,y
   537 11B3 85 13			sta :bp2+1
   538 11B5 A0 00			ldy #$00
   539 11B7 A9 A0			lda #$A0
   540 11B9 91 12			sta (:bp2),y
   541 11BB C8				iny
   542 11BC 91 12			sta (:bp2),y
   543
   544 				; optimize OK (main.pas), line = 85
   545
   546 11BE A5 58			lda T0B
   547 11C0 0A				asl @
   548 11C1 A8				tay
   549 11C2 A9 FF			lda #$FF
   550 11C4 18 79 0E 10			add adr.MUL40,y
   551 11C8 85 12			sta :bp2
   552 11CA A9 07			lda #$07
   553 11CC 79 0F 10			adc adr.MUL40+1,y
   554 11CF 85 13			sta :bp2+1
   555 11D1 A0 00			ldy #$00
   556 11D3 A9 41			lda #$41
   557 11D5 91 12			sta (:bp2),y
   558 11D7 C8				iny
   559 11D8 91 12			sta (:bp2),y
   560
   561 				; --- ForToDoEpilog
   562 11DA C6 58			dec T0B
   563 11DC 10 C0			jpl l_00CD
   564 11DE			l_00DB
   565
   566 				; ------------------------------------------------------------
   567
   568 = 0000			@FORTMP_008A	= $00
   569 = 0001			@FORTMP_00CA	= $01
   570 11DE			@exit
   571 					.ifdef @new
   572 					lda <@VarData
   573 					sta :ztmp
   574 					lda >@VarData
   575 					ldy #@VarDataSize-1
   576 					jmp @FreeMem
   577 					els
   578 11DE 60				rts						; ret
   579 					eif
   580 				.endl
   581
   582 11DF			.local	INITPLAYERS					; PROCEDURE
   583
   584 				; optimize OK (main.pas), line = 91
   585
   586 11DF A9 0A			lda #$0A
   587 11E1 8D 77 15			sta PLAYER1.X
   588 11E4 8D 78 15			sta PLAYER1.Y
   589 11E7 A9 5F			lda #$5F
   590 11E9 8D 79 15			sta PLAYER1.COLOUR
   591 11EC A9 00			lda #$00
   592 11EE 8D 7B 15			sta PLAYER1.ISDEAD
   593 11F1 A9 08			lda #$08
   594 11F3 8D 7A 15			sta PLAYER1.DIR
   595
   596 				; optimize OK (main.pas), line = 92
   597
   598 11F6 A9 1E			lda #$1E
   599 11F8 8D 7C 15			sta PLAYER2.X
   600 11FB A9 0A			lda #$0A
   601 11FD 8D 7D 15			sta PLAYER2.Y
   602 1200 A9 5D			lda #$5D
   603 1202 8D 7E 15			sta PLAYER2.COLOUR
   604 1205 A9 00			lda #$00
   605 1207 8D 80 15			sta PLAYER2.ISDEAD
   606 120A A9 04			lda #$04
   607 120C 8D 7F 15			sta PLAYER2.DIR
   608
   609 				; optimize OK (main.pas), line = 93
   610
   611 120F A9 14			lda #$14
   612 1211 8D 81 15			sta PLAYER3.X
   613 1214 A9 06			lda #$06
   614 1216 8D 82 15			sta PLAYER3.Y
   615 1219 A9 71			lda #$71
   616 121B 8D 83 15			sta PLAYER3.COLOUR
   617 121E A9 00			lda #$00
   618 1220 8D 85 15			sta PLAYER3.ISDEAD
   619 1223 A9 02			lda #$02
   620 1225 8D 84 15			sta PLAYER3.DIR
   621
   622 				; optimize OK (main.pas), line = 94
   623
   624 1228 A9 14			lda #$14
   625 122A 8D 86 15			sta PLAYER4.X
   626 122D A9 12			lda #$12
   627 122F 8D 87 15			sta PLAYER4.Y
   628 1232 A9 55			lda #$55
   629 1234 8D 88 15			sta PLAYER4.COLOUR
   630 1237 A9 00			lda #$00
   631 1239 8D 8A 15			sta PLAYER4.ISDEAD
   632 123C A9 01			lda #$01
   633 123E 8D 89 15			sta PLAYER4.DIR
   634 1241			@exit
   635 					.ifdef @new
   636 					lda <@VarData
   637 					sta :ztmp
   638 					lda >@VarData
   639 					ldy #@VarDataSize-1
   640 					jmp @FreeMem
   641 					els
   642 1241 60				rts						; ret
   643 					eif
   644 				.endl
   645
   646 1242			.local	PUTCHAR						; PROCEDURE
   647
   648 				; optimize OK (main.pas), line = 101
   649
   650 1242 AD 8C 15			lda Y
   651 1245 0A				asl @
   652 1246 A8				tay
   653 1247 B9 0E 10			lda adr.MUL40,y
   654 124A 18 6D 8B 15			add X
   655 124E 85 5B			sta T0W
   656 1250 B9 0F 10			lda adr.MUL40+1,y
   657 1253 69 08			adc #$08
   658 1255 85 5C			sta T0W+1
   659
   660 				; optimize OK (main.pas), line = 102
   661
   662 1257 85 11			sta :bp+1
   663 1259 A4 5B			ldy T0W
   664 125B AD 8E 15			lda C
   665 125E 91 10			sta (:bp),y
   666 1260 A5 5C			lda T0W+1
   667 1262 18 69 04			add #$04
   668 1265 85 11			sta :bp+1
   669 1267 AD 8D 15			lda V
   670 126A 91 10			sta (:bp),y
   671
   672 				; ------------------------------------------------------------
   673
   674 = 158B			X	= DATAORIGIN+$0027
   675 = 158C			Y	= DATAORIGIN+$0028
   676 = 158D			V	= DATAORIGIN+$0029
   677 = 158E			C	= DATAORIGIN+$002A
   678
   679 = 158B			@VarData	= X
   680 = 0004			@VarDataSize	= 4
   681
   682 126C			@exit
   683 					.ifdef @new
   684 					lda <@VarData
   685 					sta :ztmp
   686 					lda >@VarData
   687 					ldy #@VarDataSize-1
   688 					jmp @FreeMem
   689 					els
   690 126C 60				rts						; ret
   691 					eif
   692 				.endl
   693
   694 126D			.local	CHECKAVAILDIR					; PROCEDURE
   695
   696 				; optimize OK (main.pas), line = 107
   697
   698 126D A9 00			lda #$00
   699 126F 8D 75 15			sta AVAILDIR
   700
   701 				; optimize OK (main.pas), line = 108
   702
   703 1272 AD 90 15			lda Y
   704 1275 0A				asl @
   705 1276 A8				tay
   706 1277 B9 0E 10			lda adr.MUL40,y
   707 127A 18 6D 8F 15			add X
   708 127E 85 5B			sta T0W
   709 1280 B9 0F 10			lda adr.MUL40+1,y
   710 1283 69 0C			adc #$0C
   711 1285 85 5C			sta T0W+1
   712
   713 				; optimize OK (main.pas), line = 110
   714
   715 1287 A5 5B			lda T0W
   716 1289 38 E9 28			sub #$28
   717 128C 85 21			sta :STACKORIGIN+9
   718 128E A5 5C			lda T0W+1
   719 1290 E9 00			sbc #$00
   720 1292 85 11			sta :bp+1
   721 1294 A4 21			ldy :STACKORIGIN+9
   722 1296 B1 10			lda (:bp),y
   723 1298 C9 20			cmp #$20
   724 129A D0 08			jne l_01A0
   725 129C AD 75 15			lda AVAILDIR
   726 129F 09 01			ora #$01
   727 12A1 8D 75 15			sta AVAILDIR
   728 12A4			l_01A0
   729
   730 				; optimize OK (main.pas), line = 111
   731
   732 12A4 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   733 12AC A0 28			ldy #$28
   734 12AE B1 12			lda (:bp2),y
   735 12B0 C9 20			cmp #$20
   736 12B2 D0 08			jne l_01C3
   737 12B4 AD 75 15			lda AVAILDIR
   738 12B7 09 02			ora #$02
   739 12B9 8D 75 15			sta AVAILDIR
   740 12BC			l_01C3
   741
   742 				; optimize OK (main.pas), line = 112
   743
   744 12BC A5 5B			lda T0W
   745 12BE 38 E9 01			sub #$01
   746 12C1 85 21			sta :STACKORIGIN+9
   747 12C3 A5 5C			lda T0W+1
   748 12C5 E9 00			sbc #$00
   749 12C7 85 11			sta :bp+1
   750 12C9 A4 21			ldy :STACKORIGIN+9
   751 12CB B1 10			lda (:bp),y
   752 12CD C9 20			cmp #$20
   753 12CF D0 08			jne l_01E6
   754 12D1 AD 75 15			lda AVAILDIR
   755 12D4 09 04			ora #$04
   756 12D6 8D 75 15			sta AVAILDIR
   757 12D9			l_01E6
   758
   759 				; optimize OK (main.pas), line = 113
   760
   761 12D9 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   762 12E1 A0 01			ldy #$01
   763 12E3 B1 12			lda (:bp2),y
   764 12E5 C9 20			cmp #$20
   765 12E7 D0 08			jne l_0209
   766 12E9 AD 75 15			lda AVAILDIR
   767 12EC 09 08			ora #$08
   768 12EE 8D 75 15			sta AVAILDIR
   769 12F1			l_0209
   770
   771 				; ------------------------------------------------------------
   772
   773 = 158F			X	= DATAORIGIN+$002B
   774 = 1590			Y	= DATAORIGIN+$002C
   775
   776 = 158F			@VarData	= X
   777 = 0002			@VarDataSize	= 2
   778
   779 12F1			@exit
   780 					.ifdef @new
   781 					lda <@VarData
   782 					sta :ztmp
   783 					lda >@VarData
   784 					ldy #@VarDataSize-1
   785 					jmp @FreeMem
   786 					els
   787 12F1 60				rts						; ret
   788 					eif
   789 				.endl
   790
   791 12F2			.local	AI_RANDOM					; FUNCTION
   792
   793 				; optimize OK (main.pas), line = 120
   794
   795 12F2 A9 00			lda #$00
   796 12F4 85 5A			sta T0N
   797
   798 				; --- RepeatUntilProlog
   799 12F6			l_021F
   800
   801 				; optimize FAIL (0, main.pas), line = 122
   802
   803 12F6 A9 04			lda #$04
   804 12F8 20 29 11			jsr SYSTEM.RANDOM_006C
   805 12FB B4 18			ldy :STACKORIGIN,x
   806 12FD B9 40 10			lda adr.DIRECTION,y
   807 1300 8D 91 15			sta RESULT
   808 1303 CA				dex
   809
   810 				; optimize OK (main.pas), line = 123
   811
   812 1304 AD 75 15			lda AVAILDIR
   813 1307 2D 91 15			and RESULT
   814 130A F0 04			jeq l_023F
   815 130C A9 01			lda #$01
   816 130E 85 5A			sta T0N
   817 1310			l_023F
   818
   819 				; optimize OK (main.pas), line = 124
   820
   821 1310 A5 5A			lda T0N
   822 1312 F0 E2			jeq l_021F
   823 1314			@exit
   824
   825 				; ------------------------------------------------------------
   826
   827 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   828 				; as Pointer
   829
   830 1314 E8				inx
   831 1315 AD 91 15 95 18		mva RESULT :STACKORIGIN,x
   832
   833 					.ifdef @new
   834 					lda <@VarData
   835 					sta :ztmp
   836 					lda >@VarData
   837 					ldy #@VarDataSize-1
   838 					jmp @FreeMem
   839 					eif
   840
   841 				; ------------------------------------------------------------
   842
   843 = 1591			RESULT	= DATAORIGIN+$002D
   844
   845 = 1591			@VarData	= RESULT
   846 = 0001			@VarDataSize	= 1
   847
   848 131A 60				rts						; ret
   849 				.endl
   850
   851 131B			.local	PLAYERMOVE					; PROCEDURE
   852
   853 				; optimize OK (main.pas), line = 133
   854
   855 131B AD 92 15			lda P
   856 131E 8D 94 15			sta PLY
   857 1321 85 12			sta :bp2
   858 1323 AD 93 15			lda P+1
   859 1326 8D 95 15			sta PLY+1
   860 1329 85 13			sta :bp2+1
   861 				; optimize OK (main.pas), line = 135
   862 132B A0 04			ldy #PLY.ISDEAD-DATAORIGIN
   863 132D B1 12			lda (:bp2),y
   864 132F F0 03 4C E6 14		jne l_0268
   865
   866 				; optimize OK (main.pas), line = 137
   867
   868 1334 A0 00			ldy #PLY.X-DATAORIGIN
   869 1336 B1 12			lda (:bp2),y
   870 1338 8D 8F 15			sta CHECKAVAILDIR.X
   871 133B A0 01			ldy #PLY.Y-DATAORIGIN
   872 133D B1 12			lda (:bp2),y
   873 133F 8D 90 15			sta CHECKAVAILDIR.Y
   874 1342 20 6D 12			jsr CHECKAVAILDIR
   875
   876 				; optimize OK (main.pas), line = 139
   877
   878 1345 AD 75 15			lda AVAILDIR
   879 1348 D0 36			jne l_0282
   880
   881 				; optimize OK (main.pas), line = 140
   882
   883 134A AC 94 15 84 12 AC + 	mwy PLY :bp2
   884 1354 A0 04			ldy #PLY.ISDEAD-DATAORIGIN
   885 1356 A9 01			lda #$01
   886 1358 91 12			sta (:bp2),y
   887 135A CE 76 15			dec ALIVE
   888
   889 				; optimize OK (main.pas), line = 141
   890
   891 135D A0 00			ldy #PLY.X-DATAORIGIN
   892 135F B1 12			lda (:bp2),y
   893 1361 8D 8B 15			sta PUTCHAR.X
   894 1364 A0 01			ldy #PLY.Y-DATAORIGIN
   895 1366 B1 12			lda (:bp2),y
   896 1368 8D 8C 15			sta PUTCHAR.Y
   897 136B A0 02			ldy #PLY.COLOUR-DATAORIGIN
   898 136D B1 12			lda (:bp2),y
   899 136F 18 69 80			add #$80
   900 1372 8D 8E 15			sta PUTCHAR.C
   901 1375 A9 57			lda #$57
   902 1377 8D 8D 15			sta PUTCHAR.V
   903 137A 20 42 12			jsr PUTCHAR
   904 137D 4C E6 14			jmp l_02A3
   905 1380			l_0282
   906
   907 				; optimize FAIL ('AI_RANDOM', main.pas), line = 144
   908
   909 1380 20 F2 12			jsr AI_RANDOM
   910 1383 B5 18			lda :STACKORIGIN,x
   911 1385 85 59			sta NEWDIR
   912 1387 CA				dex
   913
   914 				; optimize OK (main.pas), line = 146
   915
   916 1388 AC 94 15 84 12 AC + 	mwy PLY :bp2
   917 1392 A0 03			ldy #PLY.DIR-DATAORIGIN
   918 1394 B1 12			lda (:bp2),y
   919 1396 C5 59			cmp NEWDIR
   920 1398 D0 14			jne l_02BB
   921
   922 				; optimize OK (main.pas), line = 147
   923
   924 139A A5 59			lda NEWDIR
   925 139C 29 0C			and #$0C
   926 139E F0 07			jeq l_02D2
   927 13A0 A9 40			lda #$40
   928 13A2 85 58			sta T0B
   929 13A4 4C AB 13			jmp l_02E0
   930 13A7			l_02D2
   931 13A7 A9 42			lda #$42
   932 13A9 85 58			sta T0B
   933 13AB			l_02E0
   934 13AB 4C 1E 14			jmp l_02ED
   935 13AE			l_02BB
   936
   937 				; optimize OK (main.pas), line = 149
   938
   939 13AE AC 94 15 84 12 AC + 	mwy PLY :bp2
   940 13B8 A0 03			ldy #PLY.DIR-DATAORIGIN
   941 13BA B1 12			lda (:bp2),y
   942 13BC 29 0A			and #$0A
   943 13BE F0 0A			jeq l_0313
   944 13C0 A5 59			lda NEWDIR
   945 13C2 29 05			and #$05
   946 13C4 F0 04			jeq l_0313
   947 13C6 A9 7D			lda #$7D
   948 13C8 85 58			sta T0B
   949 13CA			l_0313
   950
   951 				; optimize OK (main.pas), line = 150
   952
   953 13CA AC 94 15 84 12 AC + 	mwy PLY :bp2
   954 13D4 A0 03			ldy #PLY.DIR-DATAORIGIN
   955 13D6 B1 12			lda (:bp2),y
   956 13D8 29 09			and #$09
   957 13DA F0 0A			jeq l_0340
   958 13DC A5 59			lda NEWDIR
   959 13DE 29 06			and #$06
   960 13E0 F0 04			jeq l_0340
   961 13E2 A9 6E			lda #$6E
   962 13E4 85 58			sta T0B
   963 13E6			l_0340
   964
   965 				; optimize OK (main.pas), line = 151
   966
   967 13E6 AC 94 15 84 12 AC + 	mwy PLY :bp2
   968 13F0 A0 03			ldy #PLY.DIR-DATAORIGIN
   969 13F2 B1 12			lda (:bp2),y
   970 13F4 29 06			and #$06
   971 13F6 F0 0A			jeq l_036D
   972 13F8 A5 59			lda NEWDIR
   973 13FA 29 09			and #$09
   974 13FC F0 04			jeq l_036D
   975 13FE A9 6D			lda #$6D
   976 1400 85 58			sta T0B
   977 1402			l_036D
   978
   979 				; optimize OK (main.pas), line = 152
   980
   981 1402 AC 94 15 84 12 AC + 	mwy PLY :bp2
   982 140C A0 03			ldy #PLY.DIR-DATAORIGIN
   983 140E B1 12			lda (:bp2),y
   984 1410 29 05			and #$05
   985 1412 F0 0A			jeq l_039A
   986 1414 A5 59			lda NEWDIR
   987 1416 29 0A			and #$0A
   988 1418 F0 04			jeq l_039A
   989 141A A9 70			lda #$70
   990 141C 85 58			sta T0B
   991 141E			l_039A
   992 141E			l_02ED
   993
   994 				; optimize OK (main.pas), line = 154
   995
   996 141E AC 94 15 84 12 AC + 	mwy PLY :bp2
   997 1428 A0 00			ldy #PLY.X-DATAORIGIN
   998 142A B1 12			lda (:bp2),y
   999 142C 8D 8B 15			sta PUTCHAR.X
  1000 142F A0 01			ldy #PLY.Y-DATAORIGIN
  1001 1431 B1 12			lda (:bp2),y
  1002 1433 8D 8C 15			sta PUTCHAR.Y
  1003 1436 A0 02			ldy #PLY.COLOUR-DATAORIGIN
  1004 1438 B1 12			lda (:bp2),y
  1005 143A 8D 8E 15			sta PUTCHAR.C
  1006 143D A5 58			lda T0B
  1007 143F 8D 8D 15			sta PUTCHAR.V
  1008 1442 20 42 12			jsr PUTCHAR
  1009
  1010 				; optimize OK (main.pas), line = 156
  1011
  1012 1445 AC 94 15 84 12 AC + 	mwy PLY :bp2
  1013 144F A0 03			ldy #PLY.DIR-DATAORIGIN
  1014 1451 A5 59			lda NEWDIR
  1015 1453 91 12			sta (:bp2),y
  1016
  1017 				; optimize OK (main.pas), line = 158
  1018
  1019 1455 A5 59			lda NEWDIR
  1020 1457 8D 96 15			sta @CASETMP_0003
  1021 145A C9 01			cmp #$01
  1022 145C D0 16			jne l_03BF
  1023 145E			@
  1024
  1025 				; optimize OK (main.pas), line = 159
  1026
  1027 145E AC 94 15 84 12 AC + 	mwy PLY :bp2
  1028 1468 A0 01			ldy #PLY.Y-DATAORIGIN
  1029 146A B1 12			lda (:bp2),y
  1030 146C 38 E9 01			sub #$01
  1031 146F 91 12			sta (:bp2),y
  1032
  1033 1471 4C BF 14			jmp a_0003
  1034 1474			l_03BF
  1035 1474 C9 02			cmp #$02
  1036 1476 D0 16			jne l_03C9
  1037 1478			@
  1038
  1039 				; optimize OK (main.pas), line = 160
  1040
  1041 1478 AC 94 15 84 12 AC + 	mwy PLY :bp2
  1042 1482 A0 01			ldy #PLY.Y-DATAORIGIN
  1043 1484 B1 12			lda (:bp2),y
  1044 1486 18 69 01			add #$01
  1045 1489 91 12			sta (:bp2),y
  1046
  1047 148B 4C BF 14			jmp a_0003
  1048 148E			l_03C9
  1049 148E C9 04			cmp #$04
  1050 1490 D0 16			jne l_03D3
  1051 1492			@
  1052
  1053 				; optimize OK (main.pas), line = 161
  1054
  1055 1492 AC 94 15 84 12 AC + 	mwy PLY :bp2
  1056 149C A0 00			ldy #PLY.X-DATAORIGIN
  1057 149E B1 12			lda (:bp2),y
  1058 14A0 38 E9 01			sub #$01
  1059 14A3 91 12			sta (:bp2),y
  1060
  1061 14A5 4C BF 14			jmp a_0003
  1062 14A8			l_03D3
  1063 14A8 C9 08			cmp #$08
  1064 14AA D0 13			jne l_03DD
  1065 14AC			@
  1066
  1067 				; optimize OK (main.pas), line = 162
  1068
  1069 14AC AC 94 15 84 12 AC + 	mwy PLY :bp2
  1070 14B6 A0 00			ldy #PLY.X-DATAORIGIN
  1071 14B8 B1 12			lda (:bp2),y
  1072 14BA 18 69 01			add #$01
  1073 14BD 91 12			sta (:bp2),y
  1074
  1075 14BF			l_03DD
  1076 14BF			a_0003
  1077
  1078 				; optimize OK (main.pas), line = 165
  1079
  1080 14BF AC 94 15 84 12 AC + 	mwy PLY :bp2
  1081 14C9 A0 00			ldy #PLY.X-DATAORIGIN
  1082 14CB B1 12			lda (:bp2),y
  1083 14CD 8D 8B 15			sta PUTCHAR.X
  1084 14D0 A0 01			ldy #PLY.Y-DATAORIGIN
  1085 14D2 B1 12			lda (:bp2),y
  1086 14D4 8D 8C 15			sta PUTCHAR.Y
  1087 14D7 A0 02			ldy #PLY.COLOUR-DATAORIGIN
  1088 14D9 B1 12			lda (:bp2),y
  1089 14DB 8D 8E 15			sta PUTCHAR.C
  1090 14DE A9 51			lda #$51
  1091 14E0 8D 8D 15			sta PUTCHAR.V
  1092 14E3 20 42 12			jsr PUTCHAR
  1093 14E6			l_02A3
  1094 14E6			l_0268
  1095
  1096 				; ------------------------------------------------------------
  1097
  1098 = 1592			P	= DATAORIGIN+$002E
  1099 = 1594			PLY	= DATAORIGIN+$0030
  1100 = 1564			PLY.X	= DATAORIGIN+$0000
  1101 = 1565			PLY.Y	= DATAORIGIN+$0001
  1102 = 1566			PLY.COLOUR	= DATAORIGIN+$0002
  1103 = 1567			PLY.DIR	= DATAORIGIN+$0003
  1104 = 1568			PLY.ISDEAD	= DATAORIGIN+$0004
  1105 = 1596			@CASETMP_0003	= DATAORIGIN+$0032
  1106
  1107 = 1592			@VarData	= P
  1108 = 000F			@VarDataSize	= 15
  1109
  1110 14E6			@exit
  1111 					.ifdef @new
  1112 					lda <@VarData
  1113 					sta :ztmp
  1114 					lda >@VarData
  1115 					ldy #@VarDataSize-1
  1116 					jmp @FreeMem
  1117 					els
  1118 14E6 60				rts						; ret
  1119 					eif
  1120 				.endl
  1121 14E7			l_0007
  1122
  1123 				; optimize OK (main.pas), line = 176
  1124
  1125 14E7 A9 00			lda #$00
  1126 14E9 8D 74 15			sta GAMEOVER
  1127
  1128 				; --- RepeatUntilProlog
  1129 14EC			l_03F9
  1130
  1131 				; optimize FAIL ('INITPLAYERS', main.pas), line = 179
  1132
  1133 14EC 20 DF 11			jsr INITPLAYERS
  1134
  1135 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 180
  1136
  1137 14EF 20 5A 11			jsr INITPLAYFIELD
  1138
  1139 				; --- RepeatUntilProlog
  1140 14F2			l_03FC
  1141
  1142 				; optimize OK (main.pas), line = 183
  1143
  1144 14F2 A9 0A			lda #$0A
  1145 14F4 8D 70 15			sta SYSTEM.PAUSE_006B.N
  1146 14F7 A9 00			lda #$00
  1147 14F9 8D 71 15			sta SYSTEM.PAUSE_006B.N+1
  1148 14FC 20 0C 11			jsr SYSTEM.PAUSE_006B
  1149
  1150 				; optimize OK (main.pas), line = 184
  1151
  1152 14FF AD 5A 15			lda PLAYER1
  1153 1502 8D 92 15			sta PLAYERMOVE.P
  1154 1505 AD 5B 15			lda PLAYER1+1
  1155 1508 8D 93 15			sta PLAYERMOVE.P+1
  1156 150B 20 1B 13			jsr PLAYERMOVE
  1157
  1158 				; optimize OK (main.pas), line = 185
  1159
  1160 150E AD 5C 15			lda PLAYER2
  1161 1511 8D 92 15			sta PLAYERMOVE.P
  1162 1514 AD 5D 15			lda PLAYER2+1
  1163 1517 8D 93 15			sta PLAYERMOVE.P+1
  1164 151A 20 1B 13			jsr PLAYERMOVE
  1165
  1166 				; optimize OK (main.pas), line = 186
  1167
  1168 151D AD 5E 15			lda PLAYER3
  1169 1520 8D 92 15			sta PLAYERMOVE.P
  1170 1523 AD 5F 15			lda PLAYER3+1
  1171 1526 8D 93 15			sta PLAYERMOVE.P+1
  1172 1529 20 1B 13			jsr PLAYERMOVE
  1173
  1174 				; optimize OK (main.pas), line = 187
  1175
  1176 152C AD 60 15			lda PLAYER4
  1177 152F 8D 92 15			sta PLAYERMOVE.P
  1178 1532 AD 61 15			lda PLAYER4+1
  1179 1535 8D 93 15			sta PLAYERMOVE.P+1
  1180 1538 20 1B 13			jsr PLAYERMOVE
  1181
  1182 				; optimize OK (main.pas), line = 188
  1183
  1184 153B AD 76 15			lda ALIVE
  1185 153E D0 B2			jne l_03FC
  1186
  1187 				; optimize OK (main.pas), line = 190
  1188
  1189 1540 A9 64			lda #$64
  1190 1542 8D 70 15			sta SYSTEM.PAUSE_006B.N
  1191 1545 A9 00			lda #$00
  1192 1547 8D 71 15			sta SYSTEM.PAUSE_006B.N+1
  1193 154A 20 0C 11			jsr SYSTEM.PAUSE_006B
  1194
  1195 				; optimize OK (main.pas), line = 191
  1196
  1197 154D AD 74 15			lda GAMEOVER
  1198 1550 F0 9A			jeq l_03F9
  1199
  1200 				; ------------------------------------------------------------
  1201
  1202 = 0800			ATTRIBUTE_ADDR	= $0800
  1203 = 0C00			SCREEN_ADDR	= $0C00
  1204 = 00A0			WALL	= $A0
  1205 = 0041			WALL_COLOUR	= $41
  1206 = 0020			EMPTY	= $20
  1207 = 0051			PLY_HEAD	= $51
  1208 = 0057			PLY_CRASH	= $57
  1209 = 0042			PLY_TAIL_UD	= $42
  1210 = 0040			PLY_TAIL_LR	= $40
  1211 = 007D			PLY_TAIL_RD	= $7D
  1212 = 006E			PLY_TAIL_RU	= $6E
  1213 = 006D			PLY_TAIL_LD	= $6D
  1214 = 0070			PLY_TAIL_LU	= $70
  1215 = 005F			PLY1_COLOUR	= $5F
  1216 = 005D			PLY2_COLOUR	= $5D
  1217 = 0071			PLY3_COLOUR	= $71
  1218 = 0055			PLY4_COLOUR	= $55
  1219 = 0001			JOY_UP	= $01
  1220 = 0002			JOY_DOWN	= $02
  1221 = 0004			JOY_LEFT	= $04
  1222 = 0008			JOY_RIGHT	= $08
  1223 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1224 1552			.var MUL40	= adr.MUL40 .word
  1225 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1226 1552			.var DIRECTION	= adr.DIRECTION .word
  1227 = FF15			BORDERCOLOR	= $FF15
  1228 = FF19			BGCOLOR	= $FF19
  1229 = 0058			T0B	= $58
  1230 = 0059			NEWDIR	= $59
  1231 = 005A			T0N	= $5A
  1232 = 005B			T0W	= $5B
  1233 = 1574			GAMEOVER	= DATAORIGIN+$0010
  1234 = 1575			AVAILDIR	= DATAORIGIN+$0011
  1235 = 1576			ALIVE	= DATAORIGIN+$0012
  1236 = 1577			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  1237 1552			.var PLAYER1	= adr.PLAYER1 .word
  1238 = 1577			PLAYER1.X	= DATAORIGIN+$0013
  1239 = 1578			PLAYER1.Y	= DATAORIGIN+$0014
  1240 = 1579			PLAYER1.COLOUR	= DATAORIGIN+$0015
  1241 = 157A			PLAYER1.DIR	= DATAORIGIN+$0016
  1242 = 157B			PLAYER1.ISDEAD	= DATAORIGIN+$0017
  1243 = 157C			adr.PLAYER2	= [DATAORIGIN+$0018] .array [6]
  1244 1552			.var PLAYER2	= adr.PLAYER2 .word
  1245 = 157C			PLAYER2.X	= DATAORIGIN+$0018
  1246 = 157D			PLAYER2.Y	= DATAORIGIN+$0019
  1247 = 157E			PLAYER2.COLOUR	= DATAORIGIN+$001A
  1248 = 157F			PLAYER2.DIR	= DATAORIGIN+$001B
  1249 = 1580			PLAYER2.ISDEAD	= DATAORIGIN+$001C
  1250 = 1581			adr.PLAYER3	= [DATAORIGIN+$001D] .array [6]
  1251 1552			.var PLAYER3	= adr.PLAYER3 .word
  1252 = 1581			PLAYER3.X	= DATAORIGIN+$001D
  1253 = 1582			PLAYER3.Y	= DATAORIGIN+$001E
  1254 = 1583			PLAYER3.COLOUR	= DATAORIGIN+$001F
  1255 = 1584			PLAYER3.DIR	= DATAORIGIN+$0020
  1256 = 1585			PLAYER3.ISDEAD	= DATAORIGIN+$0021
  1257 = 1586			adr.PLAYER4	= [DATAORIGIN+$0022] .array [6]
  1258 1552			.var PLAYER4	= adr.PLAYER4 .word
  1259 = 1586			PLAYER4.X	= DATAORIGIN+$0022
  1260 = 1587			PLAYER4.Y	= DATAORIGIN+$0023
  1261 = 1588			PLAYER4.COLOUR	= DATAORIGIN+$0024
  1262 = 1589			PLAYER4.DIR	= DATAORIGIN+$0025
  1263 = 158A			PLAYER4.ISDEAD	= DATAORIGIN+$0026
  1264 1552			@exit
  1265
  1266 1552 A2 00		@halt	ldx #$00
  1267 1554 9A				txs
  1268
  1269 1555 60				rts
  1270
  1271 				; ------------------------------------------------------------
  1272
  1273 				; ------------------------------------------------------------
  1274
  1275 1556			.local	@DEFINES
  1276 1556			C4P
  1277 				.endl
  1278
  1279 1556			.local	@RESOURCE
  1280 				.endl
  1281
  1282 = 1556 0E 10		MUL40
  1282 = 1558 40 10		DIRECTION
  1282 = 155A 77 15		PLAYER1
  1282 = 155C 7C 15		PLAYER2
  1282 = 155E 81 15		PLAYER3
  1282 = 1560 86 15		PLAYER4
  1282 				.endl							; MAIN
  1283
  1284 				; ------------------------------------------------------------
  1285 				; ------------------------------------------------------------
  1286
  1287 				.macro	UNITINITIALIZATION
  1288 				
  1289 					.ifdef MAIN.SYSTEM.@UnitInit
  1290 					jsr MAIN.SYSTEM.@UnitInit
  1291 					eif
  1292 				.endm
  1293
  1294 				; ------------------------------------------------------------
  1295
  1296 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1297 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1297 				SYSTEM: $10BE..$1159
  1298 					eif
  1299
  1300 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1300 				CODE: $100E..$1555
  1301
  1302 				; ------------------------------------------------------------
  1303
  1304 1562				.align $04
  1305
  1306 1564			DATAORIGIN
  1307 1564 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1308
  1309 = 0006			VARINITSIZE	= *-DATAORIGIN
  1310 = 0033			VARDATASIZE	= 51
  1311
  1312 = 1597			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1313
  1314 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1314 				DATA: $1564..$1597
  1315
  1316 				; ------------------------------------------------------------
  1317
  1318 				.macro	STATICDATA
  1319 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1320 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1321 				.by  $C0 $03 $01 $02 $04 $08
  1322 				.endm
  1323
  1324 					end
