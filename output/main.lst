mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10A6
   102
   103 				; ------------------------------------------------------------
   104
   105 10A7			START
   106 10A7 BA				tsx
   107 10A8 8E FE 16			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0036			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1716			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10AB A2 CA			ldx #256-VLEN
   120 10AD A9 00			lda #$00
   121 10AF 9D 4C 16 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10B5 A9 4C 85 02 A9 17 + 	mwa #PROGRAMSTACK psptr
   127
   128 10BD A2 00			ldx #$00
   129 10BF 86 10			stx bp						; BP = 0
   130
   131 10C1 CA				dex						; X = 255
   132
   133 10C2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10C2			.local	MAIN						; PROCEDURE
   136
   137 10C2 4C 54 16			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10C5			.local	SYSTEM						; UNIT
   142
   143 10C5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10C5 B5 18			lda :STACKORIGIN,x
   150 10C7 85 08			sta A
   151 10C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10CB 85 09			sta A+1
   153 10CD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10CE A0 00			ldy #0
   158 10D0 B1 08 8D 1B 17		mva (edx),y Result
   159
   160 10D5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10D5 E8				inx
   168 10D6 AD 1B 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 171B			RESULT	= DATAORIGIN+$000B
   182
   183 = 171B			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10DB 60				rts						; ret
   187 				.endl
   188
   189 10DC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10DC B5 18			lda :STACKORIGIN,x
   196 10DE 85 0C			sta VALUE
   197 10E0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10E1 B5 18			lda :STACKORIGIN,x
   204 10E3 85 08			sta A
   205 10E5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E7 85 09			sta A+1
   207 10E9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10EA A0 00			ldy #0
   212 10EC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10F0			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10F0 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10F1			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10F1 B5 18			lda :STACKORIGIN,x
   238 10F3 85 0C			sta VALUE
   239 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F7 85 0D			sta VALUE+1
   241 10F9 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10FA B5 18			lda :STACKORIGIN,x
   248 10FC 85 08			sta A
   249 10FE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1100 85 09			sta A+1
   251 1102 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1103 A0 00			ldy #0
   256 1105 A5 0C 91 08			mva value (edx),y
   257 1109 C8				iny
   258 110A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 110E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 110E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 110F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 110F 20 4B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1112			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1112 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1113			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1113 AD 1C 17		loop  lda n
   307 1116 0D 1D 17		  ora n+1
   308 1119 F0 14		  beq stop
   309
   310 111B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1121 AD 1C 17 D0 03 CE +   dew n
   313
   314 112C 4C 13 11		  jmp loop
   315 112F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 171C			N	= DATAORIGIN+$000C
   321
   322 = 171C			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 112F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 112F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1130			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1130 8D 1E 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1133 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1136 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1139 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 113C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 113F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1142 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1145 A8			  tay
   350
   351 1146 AD 1E 17		  lda range
   352 1149 F0 08		  beq stop
   353
   354 114B 85 0C		  sta ecx
   355 114D 84 04		  sty eax
   356
   357 114F 20 93 10		  jsr imulCL
   358 1152 A8			  tay
   359
   360 1153 8C 1F 17		stop  sty Result
   361
   362 1156			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1156 E8				inx
   370 1157 AD 1F 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 171E			RANGE	= DATAORIGIN+$000E
   383 = 171F			RESULT	= DATAORIGIN+$000F
   384
   385 = 171E			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 115C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1710			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1712			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1714			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 115D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 115D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1715			FILEMODE	= DATAORIGIN+$0005
   450 = 1716			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1717			IORESULT	= DATAORIGIN+$0007
   452 = 1718			EOLN	= DATAORIGIN+$0008
   453 = 1719			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 115D C0 02		PALETTE
   455 = 115F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1161			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 1161 A9 03			lda #$03
   462 1163 8D 22 17			sta ALIVE
   463
   464 				; optimize OK (main.pas), line = 67
   465
   466 1166 A9 1F			lda #$1F
   467 1168 8D 15 FF			sta BORDERCOLOR
   468 116B A9 00			lda #$00
   469 116D 8D 19 FF			sta BGCOLOR
   470
   471 				; optimize OK (main.pas), line = 68
   472
   473 1170 A9 20			lda #$20
   474 1172 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   475 1174 A9 C0			lda #$C0
   476 1176 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   477 1178 A9 03			lda #$03
   478 117A 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   479 117C A9 00			lda #$00
   480 117E 85 08			sta SYSTEM.FILLCHAR_0056.A
   481 1180 A9 0C			lda #$0C
   482 1182 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   483 1184 20 0F 11			jsr SYSTEM.FILLCHAR_0056
   484
   485 				; optimize OK (main.pas), line = 70
   486
   487 1187 A9 27			lda #$27
   488 1189 85 58			sta T0B
   489
   490 118B			l_008D
   491 				; --- ForToDoCondition
   492
   493 				; optimize OK (main.pas), line = 71
   494
   495 118B A4 58			ldy T0B
   496 118D A9 A0			lda #$A0
   497 118F 99 00 0C			sta $0C00,y
   498
   499 				; optimize OK (main.pas), line = 72
   500
   501 1192 99 C0 0F			sta $0FC0,y
   502
   503 				; optimize OK (main.pas), line = 73
   504
   505 1195 A9 41			lda #$41
   506 1197 99 00 08			sta $0800,y
   507
   508 				; optimize OK (main.pas), line = 74
   509
   510 119A 99 C0 0B			sta $0BC0,y
   511
   512 				; --- ForToDoEpilog
   513 119D C6 58			dec T0B
   514 119F 10 EA			jpl l_008D
   515 11A1			l_009B
   516
   517 				; optimize OK (main.pas), line = 77
   518
   519 11A1 A9 18			lda #$18
   520 11A3 85 58			sta T0B
   521
   522 11A5			l_00CD
   523 				; --- ForToDoCondition
   524 11A5 A5 58			lda T0B
   525 11A7 C9 01			cmp #$01
   526 11A9 90 3A			jcc l_00DB
   527
   528 				; optimize OK (main.pas), line = 78
   529
   530 11AB 0A				asl @
   531 11AC A8				tay
   532 11AD A9 FF			lda #$FF
   533 11AF 18 79 0E 10			add adr.MUL40,y
   534 11B3 85 12			sta :bp2
   535 11B5 A9 0B			lda #$0B
   536 11B7 79 0F 10			adc adr.MUL40+1,y
   537 11BA 85 13			sta :bp2+1
   538 11BC A0 00			ldy #$00
   539 11BE A9 A0			lda #$A0
   540 11C0 91 12			sta (:bp2),y
   541 11C2 C8				iny
   542 11C3 91 12			sta (:bp2),y
   543
   544 				; optimize OK (main.pas), line = 79
   545
   546 11C5 A5 58			lda T0B
   547 11C7 0A				asl @
   548 11C8 A8				tay
   549 11C9 A9 FF			lda #$FF
   550 11CB 18 79 0E 10			add adr.MUL40,y
   551 11CF 85 12			sta :bp2
   552 11D1 A9 07			lda #$07
   553 11D3 79 0F 10			adc adr.MUL40+1,y
   554 11D6 85 13			sta :bp2+1
   555 11D8 A0 00			ldy #$00
   556 11DA A9 41			lda #$41
   557 11DC 91 12			sta (:bp2),y
   558 11DE C8				iny
   559 11DF 91 12			sta (:bp2),y
   560
   561 				; --- ForToDoEpilog
   562 11E1 C6 58			dec T0B
   563 11E3 10 C0			jpl l_00CD
   564 11E5			l_00DB
   565
   566 				; ------------------------------------------------------------
   567
   568 = 0000			@FORTMP_008A	= $00
   569 = 0001			@FORTMP_00CA	= $01
   570 11E5			@exit
   571 					.ifdef @new
   572 					lda <@VarData
   573 					sta :ztmp
   574 					lda >@VarData
   575 					ldy #@VarDataSize-1
   576 					jmp @FreeMem
   577 					els
   578 11E5 60				rts						; ret
   579 					eif
   580 				.endl
   581
   582 11E6			.local	INITPLAYERS					; PROCEDURE
   583
   584 				; optimize OK (main.pas), line = 85
   585
   586 11E6 A9 01			lda #$01
   587 11E8 8D 2A 17			sta PLAYER1.BRAIN
   588 11EB A9 0A			lda #$0A
   589 11ED 8D 25 17			sta PLAYER1.X
   590 11F0 8D 26 17			sta PLAYER1.Y
   591 11F3 A9 51			lda #$51
   592 11F5 8D 27 17			sta PLAYER1.HEAD
   593
   594 				; optimize OK (main.pas), line = 86
   595
   596 11F8 A9 5F			lda #$5F
   597 11FA 8D 28 17			sta PLAYER1.COLOUR
   598 11FD A9 00			lda #$00
   599 11FF 8D 2B 17			sta PLAYER1.ISDEAD
   600 1202 A9 08			lda #$08
   601 1204 8D 29 17			sta PLAYER1.DIR
   602
   603 				; optimize OK (main.pas), line = 88
   604
   605 1207 A9 01			lda #$01
   606 1209 8D 31 17			sta PLAYER2.BRAIN
   607 120C A9 1E			lda #$1E
   608 120E 8D 2C 17			sta PLAYER2.X
   609 1211 A9 0A			lda #$0A
   610 1213 8D 2D 17			sta PLAYER2.Y
   611 1216 A9 51			lda #$51
   612 1218 8D 2E 17			sta PLAYER2.HEAD
   613
   614 				; optimize OK (main.pas), line = 89
   615
   616 121B A9 5D			lda #$5D
   617 121D 8D 2F 17			sta PLAYER2.COLOUR
   618 1220 A9 00			lda #$00
   619 1222 8D 32 17			sta PLAYER2.ISDEAD
   620 1225 A9 04			lda #$04
   621 1227 8D 30 17			sta PLAYER2.DIR
   622
   623 				; optimize OK (main.pas), line = 91
   624
   625 122A A9 01			lda #$01
   626 122C 8D 38 17			sta PLAYER3.BRAIN
   627 122F A9 14			lda #$14
   628 1231 8D 33 17			sta PLAYER3.X
   629 1234 A9 06			lda #$06
   630 1236 8D 34 17			sta PLAYER3.Y
   631 1239 A9 51			lda #$51
   632 123B 8D 35 17			sta PLAYER3.HEAD
   633
   634 				; optimize OK (main.pas), line = 92
   635
   636 123E A9 71			lda #$71
   637 1240 8D 36 17			sta PLAYER3.COLOUR
   638 1243 A9 00			lda #$00
   639 1245 8D 39 17			sta PLAYER3.ISDEAD
   640 1248 A9 02			lda #$02
   641 124A 8D 37 17			sta PLAYER3.DIR
   642
   643 				; optimize OK (main.pas), line = 94
   644
   645 124D A9 01			lda #$01
   646 124F 8D 3F 17			sta PLAYER4.BRAIN
   647 1252 A9 14			lda #$14
   648 1254 8D 3A 17			sta PLAYER4.X
   649 1257 A9 12			lda #$12
   650 1259 8D 3B 17			sta PLAYER4.Y
   651 125C A9 51			lda #$51
   652 125E 8D 3C 17			sta PLAYER4.HEAD
   653
   654 				; optimize OK (main.pas), line = 95
   655
   656 1261 A9 55			lda #$55
   657 1263 8D 3D 17			sta PLAYER4.COLOUR
   658 1266 A9 00			lda #$00
   659 1268 8D 40 17			sta PLAYER4.ISDEAD
   660 126B A9 01			lda #$01
   661 126D 8D 3E 17			sta PLAYER4.DIR
   662 1270			@exit
   663 					.ifdef @new
   664 					lda <@VarData
   665 					sta :ztmp
   666 					lda >@VarData
   667 					ldy #@VarDataSize-1
   668 					jmp @FreeMem
   669 					els
   670 1270 60				rts						; ret
   671 					eif
   672 				.endl
   673
   674 1271			.local	PUTCHAR						; PROCEDURE
   675
   676 				; optimize OK (main.pas), line = 102
   677
   678 1271 AD 42 17			lda Y
   679 1274 0A				asl @
   680 1275 A8				tay
   681 1276 B9 0E 10			lda adr.MUL40,y
   682 1279 18 6D 41 17			add X
   683 127D 85 5B			sta T0W
   684 127F B9 0F 10			lda adr.MUL40+1,y
   685 1282 69 08			adc #$08
   686 1284 85 5C			sta T0W+1
   687
   688 				; optimize OK (main.pas), line = 103
   689
   690 1286 85 11			sta :bp+1
   691 1288 A4 5B			ldy T0W
   692 128A AD 44 17			lda C
   693 128D 91 10			sta (:bp),y
   694 128F A5 5C			lda T0W+1
   695 1291 18 69 04			add #$04
   696 1294 85 11			sta :bp+1
   697 1296 AD 43 17			lda V
   698 1299 91 10			sta (:bp),y
   699
   700 				; ------------------------------------------------------------
   701
   702 = 1741			X	= DATAORIGIN+$0031
   703 = 1742			Y	= DATAORIGIN+$0032
   704 = 1743			V	= DATAORIGIN+$0033
   705 = 1744			C	= DATAORIGIN+$0034
   706
   707 = 1741			@VarData	= X
   708 = 0004			@VarDataSize	= 4
   709
   710 129B			@exit
   711 					.ifdef @new
   712 					lda <@VarData
   713 					sta :ztmp
   714 					lda >@VarData
   715 					ldy #@VarDataSize-1
   716 					jmp @FreeMem
   717 					els
   718 129B 60				rts						; ret
   719 					eif
   720 				.endl
   721
   722 129C			.local	CHECKAVAILDIR					; PROCEDURE
   723
   724 				; optimize OK (main.pas), line = 108
   725
   726 129C A9 00			lda #$00
   727 129E 8D 21 17			sta AVAILDIR
   728
   729 				; optimize OK (main.pas), line = 109
   730
   731 12A1 AD 46 17			lda Y
   732 12A4 0A				asl @
   733 12A5 A8				tay
   734 12A6 B9 0E 10			lda adr.MUL40,y
   735 12A9 18 6D 45 17			add X
   736 12AD 85 5B			sta T0W
   737 12AF B9 0F 10			lda adr.MUL40+1,y
   738 12B2 69 0C			adc #$0C
   739 12B4 85 5C			sta T0W+1
   740
   741 				; optimize OK (main.pas), line = 111
   742
   743 12B6 A5 5B			lda T0W
   744 12B8 38 E9 28			sub #$28
   745 12BB 85 21			sta :STACKORIGIN+9
   746 12BD A5 5C			lda T0W+1
   747 12BF E9 00			sbc #$00
   748 12C1 85 11			sta :bp+1
   749 12C3 A4 21			ldy :STACKORIGIN+9
   750 12C5 B1 10			lda (:bp),y
   751 12C7 C9 20			cmp #$20
   752 12C9 D0 08			jne l_01C0
   753 12CB AD 21 17			lda AVAILDIR
   754 12CE 09 01			ora #$01
   755 12D0 8D 21 17			sta AVAILDIR
   756 12D3			l_01C0
   757
   758 				; optimize OK (main.pas), line = 112
   759
   760 12D3 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   761 12DB A0 28			ldy #$28
   762 12DD B1 12			lda (:bp2),y
   763 12DF C9 20			cmp #$20
   764 12E1 D0 08			jne l_01E3
   765 12E3 AD 21 17			lda AVAILDIR
   766 12E6 09 02			ora #$02
   767 12E8 8D 21 17			sta AVAILDIR
   768 12EB			l_01E3
   769
   770 				; optimize OK (main.pas), line = 113
   771
   772 12EB A5 5B			lda T0W
   773 12ED 38 E9 01			sub #$01
   774 12F0 85 21			sta :STACKORIGIN+9
   775 12F2 A5 5C			lda T0W+1
   776 12F4 E9 00			sbc #$00
   777 12F6 85 11			sta :bp+1
   778 12F8 A4 21			ldy :STACKORIGIN+9
   779 12FA B1 10			lda (:bp),y
   780 12FC C9 20			cmp #$20
   781 12FE D0 08			jne l_0206
   782 1300 AD 21 17			lda AVAILDIR
   783 1303 09 04			ora #$04
   784 1305 8D 21 17			sta AVAILDIR
   785 1308			l_0206
   786
   787 				; optimize OK (main.pas), line = 114
   788
   789 1308 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   790 1310 A0 01			ldy #$01
   791 1312 B1 12			lda (:bp2),y
   792 1314 C9 20			cmp #$20
   793 1316 D0 08			jne l_0229
   794 1318 AD 21 17			lda AVAILDIR
   795 131B 09 08			ora #$08
   796 131D 8D 21 17			sta AVAILDIR
   797 1320			l_0229
   798
   799 				; ------------------------------------------------------------
   800
   801 = 1745			X	= DATAORIGIN+$0035
   802 = 1746			Y	= DATAORIGIN+$0036
   803
   804 = 1745			@VarData	= X
   805 = 0002			@VarDataSize	= 2
   806
   807 1320			@exit
   808 					.ifdef @new
   809 					lda <@VarData
   810 					sta :ztmp
   811 					lda >@VarData
   812 					ldy #@VarDataSize-1
   813 					jmp @FreeMem
   814 					els
   815 1320 60				rts						; ret
   816 					eif
   817 				.endl
   818
   819 1321			.local	HUMAN						; PROCEDURE
   820
   821 				; optimize OK (main.pas), line = 122
   822
   823 1321 AC 23 17 84 12 AC + 	mwy PLY :bp2
   824 132B A0 04			ldy #PLY.DIR-DATAORIGIN
   825 132D B1 12			lda (:bp2),y
   826 132F 85 59			sta NEWDIR
   827
   828 				; optimize OK (main.pas), line = 123
   829
   830 1331 A9 02			lda #$02
   831 1333 8D 08 FF			sta JOY
   832 1336 A9 FF			lda #$FF
   833 1338 8D 30 FD			sta KEY_PIO
   834 133B AD 08 FF			lda JOY
   835 133E 49 FF			eor #$FF
   836 1340 85 58			sta T0B
   837
   838 				; optimize OK (main.pas), line = 125
   839
   840 1342 8D 47 17			sta @CASETMP_0003
   841 1345 C9 01			cmp #$01
   842 1347 D0 07			jne l_025D
   843 1349			@
   844
   845 				; optimize OK (main.pas), line = 126
   846
   847 1349 A5 58			lda T0B
   848 134B 85 59			sta NEWDIR
   849
   850 134D 4C 6E 13			jmp a_0003
   851 1350			l_025D
   852 1350 C9 02			cmp #$02
   853 1352 D0 07			jne l_026C
   854 1354			@
   855
   856 				; optimize OK (main.pas), line = 127
   857
   858 1354 A5 58			lda T0B
   859 1356 85 59			sta NEWDIR
   860
   861 1358 4C 6E 13			jmp a_0003
   862 135B			l_026C
   863 135B C9 04			cmp #$04
   864 135D D0 07			jne l_027B
   865 135F			@
   866
   867 				; optimize OK (main.pas), line = 128
   868
   869 135F A5 58			lda T0B
   870 1361 85 59			sta NEWDIR
   871
   872 1363 4C 6E 13			jmp a_0003
   873 1366			l_027B
   874 1366 C9 08			cmp #$08
   875 1368 D0 04			jne l_028A
   876 136A			@
   877
   878 				; optimize OK (main.pas), line = 129
   879
   880 136A A5 58			lda T0B
   881 136C 85 59			sta NEWDIR
   882
   883 136E			l_028A
   884 136E			a_0003
   885
   886 				; optimize OK (main.pas), line = 132
   887
   888 136E A5 59			lda NEWDIR
   889 1370 2D 21 17			and AVAILDIR
   890 1373 D0 1B			jne l_02B0
   891
   892 				; optimize OK (main.pas), line = 133
   893
   894 1375 AC 23 17 84 12 AC + 	mwy PLY :bp2
   895 137F A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   896 1381 A9 01			lda #$01
   897 1383 91 12			sta (:bp2),y
   898 1385 A9 00			lda #$00
   899 1387 8D 22 17			sta ALIVE
   900 138A A0 02			ldy #PLY.HEAD-DATAORIGIN
   901 138C A9 57			lda #$57
   902 138E 91 12			sta (:bp2),y
   903 1390			l_02B0
   904
   905 				; ------------------------------------------------------------
   906
   907 = 1747			@CASETMP_0003	= DATAORIGIN+$0037
   908
   909 = 1747			@VarData	= @CASETMP_0003
   910 = 0001			@VarDataSize	= 1
   911
   912 1390			@exit
   913 					.ifdef @new
   914 					lda <@VarData
   915 					sta :ztmp
   916 					lda >@VarData
   917 					ldy #@VarDataSize-1
   918 					jmp @FreeMem
   919 					els
   920 1390 60				rts						; ret
   921 					eif
   922 				.endl
   923
   924 1391			.local	AI_SIMPLERANDOM					; PROCEDURE
   925
   926 				; optimize OK (main.pas), line = 140
   927
   928 1391 A9 00			lda #$00
   929 1393 85 5A			sta T0N
   930
   931 				; --- RepeatUntilProlog
   932 1395			l_02C8
   933
   934 				; optimize FAIL (0, main.pas), line = 142
   935
   936 1395 A9 04			lda #$04
   937 1397 20 30 11			jsr SYSTEM.RANDOM_006C
   938 139A B4 18			ldy :STACKORIGIN,x
   939 139C B9 40 10			lda adr.DIRECTION,y
   940 139F 85 59			sta NEWDIR
   941 13A1 CA				dex
   942
   943 				; optimize OK (main.pas), line = 143
   944
   945 13A2 AD 21 17			lda AVAILDIR
   946 13A5 25 59			and NEWDIR
   947 13A7 F0 04			jeq l_02E8
   948 13A9 A9 01			lda #$01
   949 13AB 85 5A			sta T0N
   950 13AD			l_02E8
   951
   952 				; optimize OK (main.pas), line = 144
   953
   954 13AD A5 5A			lda T0N
   955 13AF F0 E4			jeq l_02C8
   956 13B1			@exit
   957 					.ifdef @new
   958 					lda <@VarData
   959 					sta :ztmp
   960 					lda >@VarData
   961 					ldy #@VarDataSize-1
   962 					jmp @FreeMem
   963 					els
   964 13B1 60				rts						; ret
   965 					eif
   966 				.endl
   967
   968 13B2			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   969
   970 				; optimize OK (main.pas), line = 150
   971
   972 13B2 AC 23 17 84 12 AC + 	mwy PLY :bp2
   973 13BC A0 04			ldy #PLY.DIR-DATAORIGIN
   974 13BE B1 12			lda (:bp2),y
   975 13C0 2D 21 17			and AVAILDIR
   976 13C3 F0 07			jeq l_0312
   977 13C5 B1 12			lda (:bp2),y
   978 13C7 85 59			sta NEWDIR
   979 13C9 4C EC 13			jmp l_0322
   980 13CC			l_0312
   981
   982 				; optimize OK (main.pas), line = 152
   983
   984 13CC A9 00			lda #$00
   985 13CE 85 5A			sta T0N
   986
   987 				; --- RepeatUntilProlog
   988 13D0			l_0327
   989
   990 				; optimize FAIL (0, main.pas), line = 154
   991
   992 13D0 A9 04			lda #$04
   993 13D2 20 30 11			jsr SYSTEM.RANDOM_006C
   994 13D5 B4 18			ldy :STACKORIGIN,x
   995 13D7 B9 40 10			lda adr.DIRECTION,y
   996 13DA 85 59			sta NEWDIR
   997 13DC CA				dex
   998
   999 				; optimize OK (main.pas), line = 155
  1000
  1001 13DD AD 21 17			lda AVAILDIR
  1002 13E0 25 59			and NEWDIR
  1003 13E2 F0 04			jeq l_0347
  1004 13E4 A9 01			lda #$01
  1005 13E6 85 5A			sta T0N
  1006 13E8			l_0347
  1007
  1008 				; optimize OK (main.pas), line = 156
  1009
  1010 13E8 A5 5A			lda T0N
  1011 13EA F0 E4			jeq l_0327
  1012 13EC			l_0322
  1013 13EC			@exit
  1014 					.ifdef @new
  1015 					lda <@VarData
  1016 					sta :ztmp
  1017 					lda >@VarData
  1018 					ldy #@VarDataSize-1
  1019 					jmp @FreeMem
  1020 					els
  1021 13EC 60				rts						; ret
  1022 					eif
  1023 				.endl
  1024
  1025 13ED			.local	AI_SWINGER					; PROCEDURE
  1026
  1027 				; optimize FAIL (1, main.pas), line = 163
  1028
  1029 13ED E8				inx
  1030 13EE AD 21 17 95 18		mva AVAILDIR :STACKORIGIN,x
  1031 13F3 E8				inx
  1032 13F4 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1033 13FE A0 04			ldy #PLY.DIR-DATAORIGIN
  1034 1400 B1 12 95 18			mva (:bp2),y :STACKORIGIN,x
  1035 1404 20 44 10			jsr andAL_CL
  1036 1407 A0 01			ldy #1
  1037 1409 B5 17			lda :STACKORIGIN-1,x
  1038 140B D0 01			bne @+
  1039 140D 88				dey
  1040 140E			@
  1041 140E 94 17			sty :STACKORIGIN-1,x
  1042 1410 CA				dex
  1043 1411 A9 03			lda #$03
  1044 1413 20 30 11			jsr SYSTEM.RANDOM_006C
  1045 1416 CA				dex
  1046 1417 A0 01			ldy #1
  1047 1419 B5 19			lda :STACKORIGIN+1,x
  1048 141B F0 01			beq @+
  1049 141D 88				dey
  1050 141E			@
  1051 141E CA				dex
  1052 141F 98				tya
  1053 1420 35 19			and :STACKORIGIN+1,x
  1054 1422 F0 13			jeq l_037C
  1055 1424 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1056 142E A0 04			ldy #PLY.DIR-DATAORIGIN
  1057 1430 B1 12			lda (:bp2),y
  1058 1432 85 59			sta NEWDIR
  1059 1434 4C 57 14			jmp l_038C
  1060 1437			l_037C
  1061
  1062 				; optimize OK (main.pas), line = 165
  1063
  1064 1437 A9 00			lda #$00
  1065 1439 85 5A			sta T0N
  1066
  1067 				; --- RepeatUntilProlog
  1068 143B			l_0391
  1069
  1070 				; optimize FAIL (0, main.pas), line = 167
  1071
  1072 143B A9 04			lda #$04
  1073 143D 20 30 11			jsr SYSTEM.RANDOM_006C
  1074 1440 B4 18			ldy :STACKORIGIN,x
  1075 1442 B9 40 10			lda adr.DIRECTION,y
  1076 1445 85 59			sta NEWDIR
  1077 1447 CA				dex
  1078
  1079 				; optimize OK (main.pas), line = 168
  1080
  1081 1448 AD 21 17			lda AVAILDIR
  1082 144B 25 59			and NEWDIR
  1083 144D F0 04			jeq l_03B1
  1084 144F A9 01			lda #$01
  1085 1451 85 5A			sta T0N
  1086 1453			l_03B1
  1087
  1088 				; optimize OK (main.pas), line = 169
  1089
  1090 1453 A5 5A			lda T0N
  1091 1455 F0 E4			jeq l_0391
  1092 1457			l_038C
  1093 1457			@exit
  1094 					.ifdef @new
  1095 					lda <@VarData
  1096 					sta :ztmp
  1097 					lda >@VarData
  1098 					ldy #@VarDataSize-1
  1099 					jmp @FreeMem
  1100 					els
  1101 1457 60				rts						; ret
  1102 					eif
  1103 				.endl
  1104
  1105 1458			.local	PLAYERMOVE					; PROCEDURE
  1106
  1107 				; optimize OK (main.pas), line = 177
  1108
  1109 1458 AD 48 17			lda P
  1110 145B 8D 23 17			sta PLY
  1111 145E 85 12			sta :bp2
  1112 1460 AD 49 17			lda P+1
  1113 1463 8D 24 17			sta PLY+1
  1114 1466 85 13			sta :bp2+1
  1115 				; optimize OK (main.pas), line = 179
  1116 1468 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1117 146A B1 12			lda (:bp2),y
  1118 146C F0 03 4C 53 16		jne l_03D7
  1119
  1120 				; optimize OK (main.pas), line = 181
  1121
  1122 1471 A0 00			ldy #PLY.X-DATAORIGIN
  1123 1473 B1 12			lda (:bp2),y
  1124 1475 8D 45 17			sta CHECKAVAILDIR.X
  1125 1478 A0 01			ldy #PLY.Y-DATAORIGIN
  1126 147A B1 12			lda (:bp2),y
  1127 147C 8D 46 17			sta CHECKAVAILDIR.Y
  1128 147F 20 9C 12			jsr CHECKAVAILDIR
  1129
  1130 				; optimize OK (main.pas), line = 183
  1131
  1132 1482 AD 21 17			lda AVAILDIR
  1133 1485 D0 36			jne l_03F1
  1134
  1135 				; optimize OK (main.pas), line = 184
  1136
  1137 1487 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1138 1491 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1139 1493 A9 01			lda #$01
  1140 1495 91 12			sta (:bp2),y
  1141 1497 CE 22 17			dec ALIVE
  1142
  1143 				; optimize OK (main.pas), line = 185
  1144
  1145 149A A0 00			ldy #PLY.X-DATAORIGIN
  1146 149C B1 12			lda (:bp2),y
  1147 149E 8D 41 17			sta PUTCHAR.X
  1148 14A1 A0 01			ldy #PLY.Y-DATAORIGIN
  1149 14A3 B1 12			lda (:bp2),y
  1150 14A5 8D 42 17			sta PUTCHAR.Y
  1151 14A8 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1152 14AA B1 12			lda (:bp2),y
  1153 14AC 18 69 80			add #$80
  1154 14AF 8D 44 17			sta PUTCHAR.C
  1155 14B2 A9 57			lda #$57
  1156 14B4 8D 43 17			sta PUTCHAR.V
  1157 14B7 20 71 12			jsr PUTCHAR
  1158 14BA 4C 53 16			jmp l_0412
  1159 14BD			l_03F1
  1160
  1161 				; optimize OK (main.pas), line = 188
  1162
  1163 14BD AC 23 17 84 12 AC + 	mwy PLY :bp2
  1164 14C7 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1165 14C9 B1 12			lda (:bp2),y
  1166 14CB 8D 4A 17			sta @CASETMP_0004
  1167 14CE C9 00			cmp #$00
  1168 14D0 D0 06			jne l_041D
  1169 14D2			@
  1170
  1171 				; optimize FAIL ('HUMAN', main.pas), line = 189
  1172
  1173 14D2 20 21 13			jsr HUMAN
  1174 14D5 4C F3 14			jmp a_0004
  1175 14D8			l_041D
  1176 14D8 C9 01			cmp #$01
  1177 14DA D0 06			jne l_0427
  1178 14DC			@
  1179
  1180 				; optimize FAIL ('AI_SIMPLERANDOM', main.pas), line = 190
  1181
  1182 14DC 20 91 13			jsr AI_SIMPLERANDOM
  1183 14DF 4C F3 14			jmp a_0004
  1184 14E2			l_0427
  1185 14E2 C9 02			cmp #$02
  1186 14E4 D0 06			jne l_0431
  1187 14E6			@
  1188
  1189 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 191
  1190
  1191 14E6 20 B2 13			jsr AI_STRAIGHTFORWARD
  1192 14E9 4C F3 14			jmp a_0004
  1193 14EC			l_0431
  1194 14EC C9 03			cmp #$03
  1195 14EE D0 03			jne l_043B
  1196 14F0			@
  1197
  1198 				; optimize FAIL ('AI_SWINGER', main.pas), line = 192
  1199
  1200 14F0 20 ED 13			jsr AI_SWINGER
  1201 14F3			l_043B
  1202 14F3			a_0004
  1203
  1204 				; optimize OK (main.pas), line = 195
  1205
  1206 14F3 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1207 14FD A0 04			ldy #PLY.DIR-DATAORIGIN
  1208 14FF B1 12			lda (:bp2),y
  1209 1501 C5 59			cmp NEWDIR
  1210 1503 D0 14			jne l_0458
  1211
  1212 				; optimize OK (main.pas), line = 196
  1213
  1214 1505 A5 59			lda NEWDIR
  1215 1507 29 0C			and #$0C
  1216 1509 F0 07			jeq l_046F
  1217 150B A9 40			lda #$40
  1218 150D 85 58			sta T0B
  1219 150F 4C 16 15			jmp l_047D
  1220 1512			l_046F
  1221 1512 A9 42			lda #$42
  1222 1514 85 58			sta T0B
  1223 1516			l_047D
  1224 1516 4C 89 15			jmp l_048A
  1225 1519			l_0458
  1226
  1227 				; optimize OK (main.pas), line = 198
  1228
  1229 1519 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1230 1523 A0 04			ldy #PLY.DIR-DATAORIGIN
  1231 1525 B1 12			lda (:bp2),y
  1232 1527 29 0A			and #$0A
  1233 1529 F0 0A			jeq l_04B0
  1234 152B A5 59			lda NEWDIR
  1235 152D 29 05			and #$05
  1236 152F F0 04			jeq l_04B0
  1237 1531 A9 7D			lda #$7D
  1238 1533 85 58			sta T0B
  1239 1535			l_04B0
  1240
  1241 				; optimize OK (main.pas), line = 199
  1242
  1243 1535 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1244 153F A0 04			ldy #PLY.DIR-DATAORIGIN
  1245 1541 B1 12			lda (:bp2),y
  1246 1543 29 09			and #$09
  1247 1545 F0 0A			jeq l_04DD
  1248 1547 A5 59			lda NEWDIR
  1249 1549 29 06			and #$06
  1250 154B F0 04			jeq l_04DD
  1251 154D A9 6E			lda #$6E
  1252 154F 85 58			sta T0B
  1253 1551			l_04DD
  1254
  1255 				; optimize OK (main.pas), line = 200
  1256
  1257 1551 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1258 155B A0 04			ldy #PLY.DIR-DATAORIGIN
  1259 155D B1 12			lda (:bp2),y
  1260 155F 29 06			and #$06
  1261 1561 F0 0A			jeq l_050A
  1262 1563 A5 59			lda NEWDIR
  1263 1565 29 09			and #$09
  1264 1567 F0 04			jeq l_050A
  1265 1569 A9 6D			lda #$6D
  1266 156B 85 58			sta T0B
  1267 156D			l_050A
  1268
  1269 				; optimize OK (main.pas), line = 201
  1270
  1271 156D AC 23 17 84 12 AC + 	mwy PLY :bp2
  1272 1577 A0 04			ldy #PLY.DIR-DATAORIGIN
  1273 1579 B1 12			lda (:bp2),y
  1274 157B 29 05			and #$05
  1275 157D F0 0A			jeq l_0537
  1276 157F A5 59			lda NEWDIR
  1277 1581 29 0A			and #$0A
  1278 1583 F0 04			jeq l_0537
  1279 1585 A9 70			lda #$70
  1280 1587 85 58			sta T0B
  1281 1589			l_0537
  1282 1589			l_048A
  1283
  1284 				; optimize OK (main.pas), line = 203
  1285
  1286 1589 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1287 1593 A0 00			ldy #PLY.X-DATAORIGIN
  1288 1595 B1 12			lda (:bp2),y
  1289 1597 8D 41 17			sta PUTCHAR.X
  1290 159A A0 01			ldy #PLY.Y-DATAORIGIN
  1291 159C B1 12			lda (:bp2),y
  1292 159E 8D 42 17			sta PUTCHAR.Y
  1293 15A1 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1294 15A3 B1 12			lda (:bp2),y
  1295 15A5 8D 44 17			sta PUTCHAR.C
  1296 15A8 A5 58			lda T0B
  1297 15AA 8D 43 17			sta PUTCHAR.V
  1298 15AD 20 71 12			jsr PUTCHAR
  1299
  1300 				; optimize OK (main.pas), line = 205
  1301
  1302 15B0 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1303 15BA A0 04			ldy #PLY.DIR-DATAORIGIN
  1304 15BC A5 59			lda NEWDIR
  1305 15BE 91 12			sta (:bp2),y
  1306
  1307 				; optimize OK (main.pas), line = 207
  1308
  1309 15C0 A5 59			lda NEWDIR
  1310 15C2 8D 4B 17			sta @CASETMP_0005
  1311 15C5 C9 01			cmp #$01
  1312 15C7 D0 16			jne l_055C
  1313 15C9			@
  1314
  1315 				; optimize OK (main.pas), line = 208
  1316
  1317 15C9 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1318 15D3 A0 01			ldy #PLY.Y-DATAORIGIN
  1319 15D5 B1 12			lda (:bp2),y
  1320 15D7 38 E9 01			sub #$01
  1321 15DA 91 12			sta (:bp2),y
  1322
  1323 15DC 4C 2A 16			jmp a_0005
  1324 15DF			l_055C
  1325 15DF C9 02			cmp #$02
  1326 15E1 D0 16			jne l_0566
  1327 15E3			@
  1328
  1329 				; optimize OK (main.pas), line = 209
  1330
  1331 15E3 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1332 15ED A0 01			ldy #PLY.Y-DATAORIGIN
  1333 15EF B1 12			lda (:bp2),y
  1334 15F1 18 69 01			add #$01
  1335 15F4 91 12			sta (:bp2),y
  1336
  1337 15F6 4C 2A 16			jmp a_0005
  1338 15F9			l_0566
  1339 15F9 C9 04			cmp #$04
  1340 15FB D0 16			jne l_0570
  1341 15FD			@
  1342
  1343 				; optimize OK (main.pas), line = 210
  1344
  1345 15FD AC 23 17 84 12 AC + 	mwy PLY :bp2
  1346 1607 A0 00			ldy #PLY.X-DATAORIGIN
  1347 1609 B1 12			lda (:bp2),y
  1348 160B 38 E9 01			sub #$01
  1349 160E 91 12			sta (:bp2),y
  1350
  1351 1610 4C 2A 16			jmp a_0005
  1352 1613			l_0570
  1353 1613 C9 08			cmp #$08
  1354 1615 D0 13			jne l_057A
  1355 1617			@
  1356
  1357 				; optimize OK (main.pas), line = 211
  1358
  1359 1617 AC 23 17 84 12 AC + 	mwy PLY :bp2
  1360 1621 A0 00			ldy #PLY.X-DATAORIGIN
  1361 1623 B1 12			lda (:bp2),y
  1362 1625 18 69 01			add #$01
  1363 1628 91 12			sta (:bp2),y
  1364
  1365 162A			l_057A
  1366 162A			a_0005
  1367
  1368 				; optimize OK (main.pas), line = 214
  1369
  1370 162A AC 23 17 84 12 AC + 	mwy PLY :bp2
  1371 1634 A0 00			ldy #PLY.X-DATAORIGIN
  1372 1636 B1 12			lda (:bp2),y
  1373 1638 8D 41 17			sta PUTCHAR.X
  1374 163B A0 01			ldy #PLY.Y-DATAORIGIN
  1375 163D B1 12			lda (:bp2),y
  1376 163F 8D 42 17			sta PUTCHAR.Y
  1377 1642 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1378 1644 B1 12			lda (:bp2),y
  1379 1646 8D 43 17			sta PUTCHAR.V
  1380 1649 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1381 164B B1 12			lda (:bp2),y
  1382 164D 8D 44 17			sta PUTCHAR.C
  1383 1650 20 71 12			jsr PUTCHAR
  1384 1653			l_0412
  1385 1653			l_03D7
  1386
  1387 				; ------------------------------------------------------------
  1388
  1389 = 1748			P	= DATAORIGIN+$0038
  1390 = 174A			@CASETMP_0004	= DATAORIGIN+$003A
  1391 = 174B			@CASETMP_0005	= DATAORIGIN+$003B
  1392
  1393 = 1748			@VarData	= P
  1394 = 0004			@VarDataSize	= 4
  1395
  1396 1653			@exit
  1397 					.ifdef @new
  1398 					lda <@VarData
  1399 					sta :ztmp
  1400 					lda >@VarData
  1401 					ldy #@VarDataSize-1
  1402 					jmp @FreeMem
  1403 					els
  1404 1653 60				rts						; ret
  1405 					eif
  1406 				.endl
  1407 1654			l_0007
  1408
  1409 				; optimize OK (main.pas), line = 225
  1410
  1411 1654 A9 00			lda #$00
  1412 1656 8D 20 17			sta GAMEOVER
  1413
  1414 				; --- RepeatUntilProlog
  1415 1659			l_0598
  1416
  1417 				; optimize FAIL ('INITPLAYERS', main.pas), line = 228
  1418
  1419 1659 20 E6 11			jsr INITPLAYERS
  1420
  1421 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 229
  1422
  1423 165C 20 61 11			jsr INITPLAYFIELD
  1424
  1425 				; optimize OK (main.pas), line = 231
  1426
  1427 165F A9 03			lda #$03
  1428 1661 8D 2A 17			sta PLAYER1.BRAIN
  1429
  1430 				; optimize OK (main.pas), line = 232
  1431
  1432 1664 A9 01			lda #$01
  1433 1666 8D 31 17			sta PLAYER2.BRAIN
  1434
  1435 				; optimize OK (main.pas), line = 233
  1436
  1437 1669 A9 02			lda #$02
  1438 166B 8D 38 17			sta PLAYER3.BRAIN
  1439
  1440 				; optimize OK (main.pas), line = 234
  1441
  1442 166E A9 01			lda #$01
  1443 1670 8D 3F 17			sta PLAYER4.BRAIN
  1444
  1445 				; --- RepeatUntilProlog
  1446 1673			l_05AB
  1447
  1448 				; optimize OK (main.pas), line = 237
  1449
  1450 1673 A9 01			lda #$01
  1451 1675 8D 1C 17			sta SYSTEM.PAUSE_006B.N
  1452 1678 A9 00			lda #$00
  1453 167A 8D 1D 17			sta SYSTEM.PAUSE_006B.N+1
  1454 167D 20 13 11			jsr SYSTEM.PAUSE_006B
  1455 1680 AD 05 17			lda PLAYER1
  1456 1683 8D 48 17			sta PLAYERMOVE.P
  1457 1686 AD 06 17			lda PLAYER1+1
  1458 1689 8D 49 17			sta PLAYERMOVE.P+1
  1459 168C 20 58 14			jsr PLAYERMOVE
  1460
  1461 				; optimize OK (main.pas), line = 238
  1462
  1463 168F A9 01			lda #$01
  1464 1691 8D 1C 17			sta SYSTEM.PAUSE_006B.N
  1465 1694 A9 00			lda #$00
  1466 1696 8D 1D 17			sta SYSTEM.PAUSE_006B.N+1
  1467 1699 20 13 11			jsr SYSTEM.PAUSE_006B
  1468 169C AD 07 17			lda PLAYER2
  1469 169F 8D 48 17			sta PLAYERMOVE.P
  1470 16A2 AD 08 17			lda PLAYER2+1
  1471 16A5 8D 49 17			sta PLAYERMOVE.P+1
  1472 16A8 20 58 14			jsr PLAYERMOVE
  1473
  1474 				; optimize OK (main.pas), line = 239
  1475
  1476 16AB A9 01			lda #$01
  1477 16AD 8D 1C 17			sta SYSTEM.PAUSE_006B.N
  1478 16B0 A9 00			lda #$00
  1479 16B2 8D 1D 17			sta SYSTEM.PAUSE_006B.N+1
  1480 16B5 20 13 11			jsr SYSTEM.PAUSE_006B
  1481 16B8 AD 09 17			lda PLAYER3
  1482 16BB 8D 48 17			sta PLAYERMOVE.P
  1483 16BE AD 0A 17			lda PLAYER3+1
  1484 16C1 8D 49 17			sta PLAYERMOVE.P+1
  1485 16C4 20 58 14			jsr PLAYERMOVE
  1486
  1487 				; optimize OK (main.pas), line = 240
  1488
  1489 16C7 A9 01			lda #$01
  1490 16C9 8D 1C 17			sta SYSTEM.PAUSE_006B.N
  1491 16CC A9 00			lda #$00
  1492 16CE 8D 1D 17			sta SYSTEM.PAUSE_006B.N+1
  1493 16D1 20 13 11			jsr SYSTEM.PAUSE_006B
  1494 16D4 AD 0B 17			lda PLAYER4
  1495 16D7 8D 48 17			sta PLAYERMOVE.P
  1496 16DA AD 0C 17			lda PLAYER4+1
  1497 16DD 8D 49 17			sta PLAYERMOVE.P+1
  1498 16E0 20 58 14			jsr PLAYERMOVE
  1499
  1500 				; optimize OK (main.pas), line = 241
  1501
  1502 16E3 AD 22 17			lda ALIVE
  1503 16E6 D0 8B			jne l_05AB
  1504
  1505 				; optimize OK (main.pas), line = 243
  1506
  1507 16E8 A9 64			lda #$64
  1508 16EA 8D 1C 17			sta SYSTEM.PAUSE_006B.N
  1509 16ED A9 00			lda #$00
  1510 16EF 8D 1D 17			sta SYSTEM.PAUSE_006B.N+1
  1511 16F2 20 13 11			jsr SYSTEM.PAUSE_006B
  1512
  1513 				; optimize OK (main.pas), line = 244
  1514
  1515 16F5 AD 20 17			lda GAMEOVER
  1516 16F8 D0 03 4C 59 16		jeq l_0598
  1517
  1518 				; ------------------------------------------------------------
  1519
  1520 = 0800			ATTRIBUTE_ADDR	= $0800
  1521 = 0C00			SCREEN_ADDR	= $0C00
  1522 = 0020			EMPTY	= $20
  1523 = 00A0			WALL	= $A0
  1524 = 0041			WALL_COLOUR	= $41
  1525 = 0051			PLY_HEAD	= $51
  1526 = 0057			PLY_CRASH	= $57
  1527 = 0042			PLY_TAIL_UD	= $42
  1528 = 0040			PLY_TAIL_LR	= $40
  1529 = 007D			PLY_TAIL_RD	= $7D
  1530 = 006E			PLY_TAIL_RU	= $6E
  1531 = 006D			PLY_TAIL_LD	= $6D
  1532 = 0070			PLY_TAIL_LU	= $70
  1533 = 005F			PLY1_COLOUR	= $5F
  1534 = 005D			PLY2_COLOUR	= $5D
  1535 = 0071			PLY3_COLOUR	= $71
  1536 = 0055			PLY4_COLOUR	= $55
  1537 = 0001			JOY_UP	= $01
  1538 = 0002			JOY_DOWN	= $02
  1539 = 0004			JOY_LEFT	= $04
  1540 = 0008			JOY_RIGHT	= $08
  1541 = 0040			JOY_FIRE	= $40
  1542 = 0002			JOY_SELECT_1	= $02
  1543 = 0004			JOY_SELECT_2	= $04
  1544 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1545 16FD			.var MUL40	= adr.MUL40 .word
  1546 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1547 16FD			.var DIRECTION	= adr.DIRECTION .word
  1548 = FD30			KEY_PIO	= $FD30
  1549 = FF08			JOY	= $FF08
  1550 = FF15			BORDERCOLOR	= $FF15
  1551 = FF19			BGCOLOR	= $FF19
  1552 = 0058			T0B	= $58
  1553 = 0059			NEWDIR	= $59
  1554 = 005A			T0N	= $5A
  1555 = 005B			T0W	= $5B
  1556 = 1720			GAMEOVER	= DATAORIGIN+$0010
  1557 = 1721			AVAILDIR	= DATAORIGIN+$0011
  1558 = 1722			ALIVE	= DATAORIGIN+$0012
  1559 = 1723			PLY	= DATAORIGIN+$0013
  1560 = 1710			PLY.X	= DATAORIGIN+$0000
  1561 = 1711			PLY.Y	= DATAORIGIN+$0001
  1562 = 1712			PLY.HEAD	= DATAORIGIN+$0002
  1563 = 1713			PLY.COLOUR	= DATAORIGIN+$0003
  1564 = 1714			PLY.DIR	= DATAORIGIN+$0004
  1565 = 1715			PLY.BRAIN	= DATAORIGIN+$0005
  1566 = 1716			PLY.ISDEAD	= DATAORIGIN+$0006
  1567 = 1725			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1568 16FD			.var PLAYER1	= adr.PLAYER1 .word
  1569 = 1725			PLAYER1.X	= DATAORIGIN+$0015
  1570 = 1726			PLAYER1.Y	= DATAORIGIN+$0016
  1571 = 1727			PLAYER1.HEAD	= DATAORIGIN+$0017
  1572 = 1728			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1573 = 1729			PLAYER1.DIR	= DATAORIGIN+$0019
  1574 = 172A			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1575 = 172B			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1576 = 172C			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1577 16FD			.var PLAYER2	= adr.PLAYER2 .word
  1578 = 172C			PLAYER2.X	= DATAORIGIN+$001C
  1579 = 172D			PLAYER2.Y	= DATAORIGIN+$001D
  1580 = 172E			PLAYER2.HEAD	= DATAORIGIN+$001E
  1581 = 172F			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1582 = 1730			PLAYER2.DIR	= DATAORIGIN+$0020
  1583 = 1731			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1584 = 1732			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1585 = 1733			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1586 16FD			.var PLAYER3	= adr.PLAYER3 .word
  1587 = 1733			PLAYER3.X	= DATAORIGIN+$0023
  1588 = 1734			PLAYER3.Y	= DATAORIGIN+$0024
  1589 = 1735			PLAYER3.HEAD	= DATAORIGIN+$0025
  1590 = 1736			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1591 = 1737			PLAYER3.DIR	= DATAORIGIN+$0027
  1592 = 1738			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1593 = 1739			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1594 = 173A			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1595 16FD			.var PLAYER4	= adr.PLAYER4 .word
  1596 = 173A			PLAYER4.X	= DATAORIGIN+$002A
  1597 = 173B			PLAYER4.Y	= DATAORIGIN+$002B
  1598 = 173C			PLAYER4.HEAD	= DATAORIGIN+$002C
  1599 = 173D			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1600 = 173E			PLAYER4.DIR	= DATAORIGIN+$002E
  1601 = 173F			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1602 = 1740			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1603 16FD			@exit
  1604
  1605 16FD A2 00		@halt	ldx #$00
  1606 16FF 9A				txs
  1607
  1608 1700 60				rts
  1609
  1610 				; ------------------------------------------------------------
  1611
  1612 				; ------------------------------------------------------------
  1613
  1614 1701			.local	@DEFINES
  1615 1701			C4P
  1616 				.endl
  1617
  1618 1701			.local	@RESOURCE
  1619 				.endl
  1620
  1621 = 1701 0E 10		MUL40
  1621 = 1703 40 10		DIRECTION
  1621 = 1705 25 17		PLAYER1
  1621 = 1707 2C 17		PLAYER2
  1621 = 1709 33 17		PLAYER3
  1621 = 170B 3A 17		PLAYER4
  1621 				.endl							; MAIN
  1622
  1623 				; ------------------------------------------------------------
  1624 				; ------------------------------------------------------------
  1625
  1626 				.macro	UNITINITIALIZATION
  1627 				
  1628 					.ifdef MAIN.SYSTEM.@UnitInit
  1629 					jsr MAIN.SYSTEM.@UnitInit
  1630 					eif
  1631 				.endm
  1632
  1633 				; ------------------------------------------------------------
  1634
  1635 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1636 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1636 				SYSTEM: $10C5..$1160
  1637 					eif
  1638
  1639 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1639 				CODE: $100E..$1700
  1640
  1641 				; ------------------------------------------------------------
  1642
  1643 170D				.align $04
  1644
  1645 1710			DATAORIGIN
  1646 1710 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1647
  1648 = 0006			VARINITSIZE	= *-DATAORIGIN
  1649 = 003C			VARDATASIZE	= 60
  1650
  1651 = 174C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1652
  1653 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1653 				DATA: $1710..$174C
  1654
  1655 				; ------------------------------------------------------------
  1656
  1657 				.macro	STATICDATA
  1658 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1659 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1660 				.by  $C0 $03 $01 $02 $04 $08
  1661 				.endm
  1662
  1663 					end
