mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E B0 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0060			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2ACE			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A0			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 2E 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 2E 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 48 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D D3 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD D3 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AD3			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AD3			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD D4 2A		loop  lda n
   325 112D 0D D5 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD D4 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AD4			N	= DATAORIGIN+$000C
   339
   340 = 2AD4			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D D6 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD D6 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C D7 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD D7 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2AD6			RANGE	= DATAORIGIN+$000E
   401 = 2AD7			RESULT	= DATAORIGIN+$000F
   402
   403 = 2AD6			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2AC8			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2ACA			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2ACC			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2ACD			FILEMODE	= DATAORIGIN+$0005
   468 = 2ACE			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2ACF			IORESULT	= DATAORIGIN+$0007
   470 = 2AD0			EOLN	= DATAORIGIN+$0008
   471 = 2AD1			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 0B 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 0A 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 0C 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B0A			X	= DATAORIGIN+$0042
   497 = 2B0B			Y	= DATAORIGIN+$0043
   498 = 2B0C			V	= DATAORIGIN+$0044
   499
   500 = 2B0A			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 0E 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 0D 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 10 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 0F 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B0D			X	= DATAORIGIN+$0045
   544 = 2B0E			Y	= DATAORIGIN+$0046
   545 = 2B0F			V	= DATAORIGIN+$0047
   546 = 2B10			C	= DATAORIGIN+$0048
   547
   548 = 2B0D			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 12 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 11 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 13 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 13 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B11			X	= DATAORIGIN+$0049
   604 = 2B12			Y	= DATAORIGIN+$004A
   605 = 2B13			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B11			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD E1 2A			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD DD 2A			lda PLAYER1.COLOUR
   620 11F1 8D 10 2B			sta PUTCHAR_008E.C
   621 11F4 AD E0 2A			lda PLAYER1.SCORE
   622 11F7 8D 0F 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 0E 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 0D 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD E9 2A			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD E5 2A			lda PLAYER2.COLOUR
   635 120F 8D 10 2B			sta PUTCHAR_008E.C
   636 1212 AD E8 2A			lda PLAYER2.SCORE
   637 1215 8D 0F 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 0E 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 0D 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD F1 2A			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD ED 2A			lda PLAYER3.COLOUR
   650 122D 8D 10 2B			sta PUTCHAR_008E.C
   651 1230 AD F0 2A			lda PLAYER3.SCORE
   652 1233 8D 0F 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 0E 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 0D 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD F9 2A			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD F5 2A			lda PLAYER4.COLOUR
   665 124B 8D 10 2B			sta PUTCHAR_008E.C
   666 124E AD F8 2A			lda PLAYER4.SCORE
   667 1251 8D 0F 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 0E 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 0D 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	CHECKAVAILDIR					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 A9 00			lda #$00
   691 1264 85 5C			sta AVAILDIR
   692
   693 				; optimize OK (tools.inc), line = 39
   694
   695 1266 AC B7 2A 84 12 AC + 	mwy PLY :bp2
   696 1270 A0 01			ldy #PLY.Y-DATAORIGIN
   697 1272 B1 12			lda (:bp2),y
   698 1274 0A				asl @
   699 1275 A8				tay
   700 1276 A9 00			lda #$00
   701 1278 18 79 0E 10			add adr.MUL40,y
   702 127C 85 21			sta :STACKORIGIN+9
   703 127E A9 0C			lda #$0C
   704 1280 79 0F 10			adc adr.MUL40+1,y
   705 1283 85 31			sta :STACKORIGIN+STACKWIDTH+9
   706 1285 A0 00			ldy #PLY.X-DATAORIGIN
   707 1287 A5 21			lda :STACKORIGIN+9
   708 1289 18 71 12			add (:bp2),y
   709 128C 85 5D			sta T0W
   710 128E A5 31			lda :STACKORIGIN+STACKWIDTH+9
   711 1290 69 00			adc #$00
   712 1292 85 5E			sta T0W+1
   713
   714 				; optimize OK (tools.inc), line = 41
   715
   716 1294 A5 5D			lda T0W
   717 1296 38 E9 28			sub #$28
   718 1299 85 21			sta :STACKORIGIN+9
   719 129B A5 5E			lda T0W+1
   720 129D E9 00			sbc #$00
   721 129F 85 11			sta :bp+1
   722 12A1 A4 21			ldy :STACKORIGIN+9
   723 12A3 B1 10			lda (:bp),y
   724 12A5 C9 20			cmp #$20
   725 12A7 D0 06			jne l_0166
   726 12A9 A5 5C			lda AVAILDIR
   727 12AB 09 01			ora #$01
   728 12AD 85 5C			sta AVAILDIR
   729 12AF			l_0166
   730
   731 				; optimize OK (tools.inc), line = 42
   732
   733 12AF A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   734 12B7 A0 28			ldy #$28
   735 12B9 B1 12			lda (:bp2),y
   736 12BB C9 20			cmp #$20
   737 12BD D0 06			jne l_0189
   738 12BF A5 5C			lda AVAILDIR
   739 12C1 09 02			ora #$02
   740 12C3 85 5C			sta AVAILDIR
   741 12C5			l_0189
   742
   743 				; optimize OK (tools.inc), line = 43
   744
   745 12C5 A5 5D			lda T0W
   746 12C7 38 E9 01			sub #$01
   747 12CA 85 21			sta :STACKORIGIN+9
   748 12CC A5 5E			lda T0W+1
   749 12CE E9 00			sbc #$00
   750 12D0 85 11			sta :bp+1
   751 12D2 A4 21			ldy :STACKORIGIN+9
   752 12D4 B1 10			lda (:bp),y
   753 12D6 C9 20			cmp #$20
   754 12D8 D0 06			jne l_01AC
   755 12DA A5 5C			lda AVAILDIR
   756 12DC 09 04			ora #$04
   757 12DE 85 5C			sta AVAILDIR
   758 12E0			l_01AC
   759
   760 				; optimize OK (tools.inc), line = 44
   761
   762 12E0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   763 12E8 A0 01			ldy #$01
   764 12EA B1 12			lda (:bp2),y
   765 12EC C9 20			cmp #$20
   766 12EE D0 06			jne l_01CF
   767 12F0 A5 5C			lda AVAILDIR
   768 12F2 09 08			ora #$08
   769 12F4 85 5C			sta AVAILDIR
   770 12F6			l_01CF
   771 12F6			@exit
   772 					.ifdef @new
   773 					lda <@VarData
   774 					sta :ztmp
   775 					lda >@VarData
   776 					ldy #@VarDataSize-1
   777 					jmp @FreeMem
   778 					els
   779 12F6 60				rts						; ret
   780 					eif
   781 				.endl
   782
   783 12F7			.local	ANIMATEOBSTACLES				; PROCEDURE
   784
   785 				; optimize FAIL (0, tools.inc), line = 53
   786
   787 12F7 EE 14 2B			inc COUNTER
   788
   789 				; optimize OK (tools.inc), line = 54
   790
   791 12FA AD 14 2B			lda COUNTER
   792 12FD 29 01			and #$01
   793 12FF F0 08			jeq l_01FA
   794 1301 A9 56			lda #$56
   795 1303 8D 15 2B			sta OBST
   796 1306 4C 0E 13			jmp l_0208
   797 1309			l_01FA
   798 1309 A9 5B			lda #$5B
   799 130B 8D 15 2B			sta OBST
   800 130E			l_0208
   801
   802 				; optimize OK (tools.inc), line = 55
   803
   804 130E A9 07			lda #$07
   805 1310 85 59			sta I0B
   806
   807 1312			l_0215
   808 				; --- ForToDoCondition
   809 1312 A5 59			lda I0B
   810 1314 0A				asl @
   811 1315 A8				tay
   812 1316 B9 FA 2A			lda adr.OBSTACLES,y
   813 1319 85 21			sta :STACKORIGIN+9
   814 131B B9 FB 2A			lda adr.OBSTACLES+1,y
   815 131E 85 11			sta :bp+1
   816 1320 A4 21			ldy :STACKORIGIN+9
   817 1322 AD 15 2B			lda OBST
   818 1325 91 10			sta (:bp),y
   819 1327 C6 59			dec I0B
   820 1329 10 E7			jpl l_0215
   821 132B			l_0223
   822
   823 				; ------------------------------------------------------------
   824
   825 = 2B14			COUNTER	= DATAORIGIN+$004C
   826 = 2B15			OBST	= DATAORIGIN+$004D
   827 = 0000			@FORTMP_0212	= $00
   828
   829 = 2B14			@VarData	= COUNTER
   830 = 0002			@VarDataSize	= 2
   831
   832 132B			@exit
   833 					.ifdef @new
   834 					lda <@VarData
   835 					sta :ztmp
   836 					lda >@VarData
   837 					ldy #@VarDataSize-1
   838 					jmp @FreeMem
   839 					els
   840 132B 60				rts						; ret
   841 					eif
   842 				.endl
   843
   844 132C			.local	CALCOBSTACLEADDR				; FUNCTION
   845
   846 				; optimize OK (tools.inc), line = 62
   847
   848 132C AD 17 2B			lda Y
   849 132F 0A				asl @
   850 1330 A8				tay
   851 1331 AD 16 2B			lda X
   852 1334 18 79 0E 10			add adr.MUL40,y
   853 1338 8D 18 2B			sta RESULT
   854 133B A9 0C			lda #$0C
   855 133D 79 0F 10			adc adr.MUL40+1,y
   856 1340 8D 19 2B			sta RESULT+1
   857 1343			@exit
   858
   859 				; ------------------------------------------------------------
   860
   861 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   862 				; as Pointer
   863
   864 1343 E8				inx
   865 1344 AD 18 2B 95 18		mva RESULT :STACKORIGIN,x
   866 1349 AD 19 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   867
   868 					.ifdef @new
   869 					lda <@VarData
   870 					sta :ztmp
   871 					lda >@VarData
   872 					ldy #@VarDataSize-1
   873 					jmp @FreeMem
   874 					eif
   875
   876 				; ------------------------------------------------------------
   877
   878 = 2B16			X	= DATAORIGIN+$004E
   879 = 2B17			Y	= DATAORIGIN+$004F
   880 = 2B18			RESULT	= DATAORIGIN+$0050
   881
   882 = 2B16			@VarData	= X
   883 = 0004			@VarDataSize	= 4
   884
   885 134E 60				rts						; ret
   886 				.endl
   887
   888 134F			.local	SAVEOBSTACLES					; PROCEDURE
   889
   890 				; optimize OK (tools.inc), line = 69
   891
   892 134F A9 07			lda #$07
   893 1351 85 59			sta I0B
   894
   895 1353			l_0256
   896 				; --- ForToDoCondition
   897
   898 				; optimize OK (tools.inc), line = 70
   899
   900 1353 A5 59			lda I0B
   901 1355 0A				asl @
   902 1356 A8				tay
   903 1357 B9 FB 2A			lda adr.OBSTACLES+1,y
   904 135A C9 00			cmp #$00
   905 135C D0 05			bne @+
   906 135E B9 FA 2A			lda adr.OBSTACLES,y
   907 1361 C9 7E			cmp #$7E
   908 1363			@
   909 1363 F0 29			jeq l_0278
   910
   911 				; optimize OK (tools.inc), line = 71
   912
   913 1365 B9 FA 2A			lda adr.OBSTACLES,y
   914 1368 85 21			sta :STACKORIGIN+9
   915 136A B9 FB 2A			lda adr.OBSTACLES+1,y
   916 136D 85 11			sta :bp+1
   917 136F A4 21			ldy :STACKORIGIN+9
   918 1371 A9 56			lda #$56
   919 1373 91 10			sta (:bp),y
   920
   921 				; optimize OK (tools.inc), line = 72
   922
   923 1375 A5 59			lda I0B
   924 1377 0A				asl @
   925 1378 A8				tay
   926 1379 B9 FA 2A			lda adr.OBSTACLES,y
   927 137C 38 E9 00			sub #$00
   928 137F 85 21			sta :STACKORIGIN+9
   929 1381 B9 FB 2A			lda adr.OBSTACLES+1,y
   930 1384 E9 04			sbc #$04
   931 1386 85 11			sta :bp+1
   932 1388 A4 21			ldy :STACKORIGIN+9
   933 138A A9 35			lda #$35
   934 138C 91 10			sta (:bp),y
   935 138E			l_0278
   936
   937 				; --- ForToDoEpilog
   938 138E C6 59			dec I0B
   939 1390 10 C1			jpl l_0256
   940 1392			l_0264
   941
   942 				; ------------------------------------------------------------
   943
   944 = 0000			@FORTMP_0253	= $00
   945 1392			@exit
   946 					.ifdef @new
   947 					lda <@VarData
   948 					sta :ztmp
   949 					lda >@VarData
   950 					ldy #@VarDataSize-1
   951 					jmp @FreeMem
   952 					els
   953 1392 60				rts						; ret
   954 					eif
   955 				.endl
   956
   957 1393			.local	DRAWTAIL					; PROCEDURE
   958
   959 				; optimize OK (tools.inc), line = 81
   960
   961 1393 AC B7 2A 84 12 AC + 	mwy PLY :bp2
   962 139D A0 04			ldy #PLY.DIR-DATAORIGIN
   963 139F B1 12			lda (:bp2),y
   964 13A1 C5 5B			cmp NEWDIR
   965 13A3 D0 14			jne l_02AA
   966
   967 				; optimize OK (tools.inc), line = 82
   968
   969 13A5 A5 5B			lda NEWDIR
   970 13A7 29 0C			and #$0C
   971 13A9 F0 07			jeq l_02C1
   972 13AB A9 40			lda #$40
   973 13AD 85 58			sta T0B
   974 13AF 4C B6 13			jmp l_02CF
   975 13B2			l_02C1
   976 13B2 A9 42			lda #$42
   977 13B4 85 58			sta T0B
   978 13B6			l_02CF
   979 13B6 4C 29 14			jmp l_02DC
   980 13B9			l_02AA
   981
   982 				; optimize OK (tools.inc), line = 84
   983
   984 13B9 AC B7 2A 84 12 AC + 	mwy PLY :bp2
   985 13C3 A0 04			ldy #PLY.DIR-DATAORIGIN
   986 13C5 B1 12			lda (:bp2),y
   987 13C7 29 0A			and #$0A
   988 13C9 F0 0A			jeq l_0302
   989 13CB A5 5B			lda NEWDIR
   990 13CD 29 05			and #$05
   991 13CF F0 04			jeq l_0302
   992 13D1 A9 7D			lda #$7D
   993 13D3 85 58			sta T0B
   994 13D5			l_0302
   995
   996 				; optimize OK (tools.inc), line = 85
   997
   998 13D5 AC B7 2A 84 12 AC + 	mwy PLY :bp2
   999 13DF A0 04			ldy #PLY.DIR-DATAORIGIN
  1000 13E1 B1 12			lda (:bp2),y
  1001 13E3 29 09			and #$09
  1002 13E5 F0 0A			jeq l_032F
  1003 13E7 A5 5B			lda NEWDIR
  1004 13E9 29 06			and #$06
  1005 13EB F0 04			jeq l_032F
  1006 13ED A9 6E			lda #$6E
  1007 13EF 85 58			sta T0B
  1008 13F1			l_032F
  1009
  1010 				; optimize OK (tools.inc), line = 86
  1011
  1012 13F1 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1013 13FB A0 04			ldy #PLY.DIR-DATAORIGIN
  1014 13FD B1 12			lda (:bp2),y
  1015 13FF 29 06			and #$06
  1016 1401 F0 0A			jeq l_035C
  1017 1403 A5 5B			lda NEWDIR
  1018 1405 29 09			and #$09
  1019 1407 F0 04			jeq l_035C
  1020 1409 A9 6D			lda #$6D
  1021 140B 85 58			sta T0B
  1022 140D			l_035C
  1023
  1024 				; optimize OK (tools.inc), line = 87
  1025
  1026 140D AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1027 1417 A0 04			ldy #PLY.DIR-DATAORIGIN
  1028 1419 B1 12			lda (:bp2),y
  1029 141B 29 05			and #$05
  1030 141D F0 0A			jeq l_0389
  1031 141F A5 5B			lda NEWDIR
  1032 1421 29 0A			and #$0A
  1033 1423 F0 04			jeq l_0389
  1034 1425 A9 70			lda #$70
  1035 1427 85 58			sta T0B
  1036 1429			l_0389
  1037 1429			l_02DC
  1038
  1039 				; optimize OK (tools.inc), line = 90
  1040
  1041 1429 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1042 1433 A0 00			ldy #PLY.X-DATAORIGIN
  1043 1435 B1 12			lda (:bp2),y
  1044 1437 8D 11 2B			sta GETCHAR.X
  1045 143A A0 01			ldy #PLY.Y-DATAORIGIN
  1046 143C B1 12			lda (:bp2),y
  1047 143E 8D 12 2B			sta GETCHAR.Y
  1048 1441 20 C4 11			jsr GETCHAR
  1049 1444 CA				dex
  1050 1445 B5 19			lda :STACKORIGIN+1,x
  1051 1447 C9 2A			cmp #$2A
  1052 1449 F0 20			jeq l_03A6
  1053 144B			@
  1054 144B AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1055 1455 A0 00			ldy #PLY.X-DATAORIGIN
  1056 1457 B1 12			lda (:bp2),y
  1057 1459 8D 0A 2B			sta PUTCHAR_0072.X
  1058 145C A0 01			ldy #PLY.Y-DATAORIGIN
  1059 145E B1 12			lda (:bp2),y
  1060 1460 8D 0B 2B			sta PUTCHAR_0072.Y
  1061 1463 A5 58			lda T0B
  1062 1465 8D 0C 2B			sta PUTCHAR_0072.V
  1063 1468 20 78 11			jsr PUTCHAR_0072
  1064 146B			l_03A6
  1065 146B			@exit
  1066 					.ifdef @new
  1067 					lda <@VarData
  1068 					sta :ztmp
  1069 					lda >@VarData
  1070 					ldy #@VarDataSize-1
  1071 					jmp @FreeMem
  1072 					els
  1073 146B 60				rts						; ret
  1074 					eif
  1075 				.endl
  1076
  1077 146C			.local	CHECKJOYSTATUS					; PROCEDURE
  1078
  1079 				; optimize OK (tools.inc), line = 97
  1080
  1081 146C A9 02			lda #$02
  1082 146E 8D 08 FF			sta JOY
  1083 1471 A9 FF			lda #$FF
  1084 1473 8D 30 FD			sta KEYSCAN
  1085
  1086 				; optimize OK (tools.inc), line = 98
  1087
  1088 1476 AD 08 FF			lda JOY
  1089 1479 49 FF			eor #$FF
  1090 147B 85 63			sta JOYSTATUS
  1091 147D			@exit
  1092 					.ifdef @new
  1093 					lda <@VarData
  1094 					sta :ztmp
  1095 					lda >@VarData
  1096 					ldy #@VarDataSize-1
  1097 					jmp @FreeMem
  1098 					els
  1099 147D 60				rts						; ret
  1100 					eif
  1101 				.endl
  1102
  1103 147E			.local	SETPLAYER					; PROCEDURE
  1104
  1105 				; optimize OK (tools.inc), line = 105
  1106
  1107 147E AD 1A 2B			lda P
  1108 1481 8D B7 2A			sta PLY
  1109 1484 85 12			sta :bp2
  1110 1486 AD 1B 2B			lda P+1
  1111 1489 8D B8 2A			sta PLY+1
  1112 148C 85 13			sta :bp2+1
  1113 				; optimize OK (tools.inc), line = 106
  1114 148E A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1115 1490 AD 1F 2B			lda BRAIN
  1116 1493 91 12			sta (:bp2),y
  1117 1495 A0 00			ldy #PLY.X-DATAORIGIN
  1118 1497 AD 1C 2B			lda X
  1119 149A 91 12			sta (:bp2),y
  1120 149C A0 01			ldy #PLY.Y-DATAORIGIN
  1121 149E AD 1D 2B			lda Y
  1122 14A1 91 12			sta (:bp2),y
  1123 14A3 A0 04			ldy #PLY.DIR-DATAORIGIN
  1124 14A5 AD 1E 2B			lda DIR
  1125 14A8 91 12			sta (:bp2),y
  1126
  1127 				; optimize OK (tools.inc), line = 107
  1128
  1129 14AA A0 02			ldy #PLY.HEAD-DATAORIGIN
  1130 14AC AD 20 2B			lda HEAD
  1131 14AF 91 12			sta (:bp2),y
  1132 14B1 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1133 14B3 AD 21 2B			lda COLOUR
  1134 14B6 91 12			sta (:bp2),y
  1135 14B8 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1136 14BA AD 22 2B			lda ISALIVE
  1137 14BD 91 12			sta (:bp2),y
  1138
  1139 				; optimize OK (tools.inc), line = 108
  1140
  1141 14BF AD 22 2B			lda ISALIVE
  1142 14C2 F0 1D			jeq l_0408
  1143
  1144 				; optimize FAIL (0, tools.inc), line = 109
  1145
  1146 14C4 E6 5A			inc ALIVE
  1147 14C6 AD 21 2B			lda COLOUR
  1148 14C9 8D 10 2B			sta PUTCHAR_008E.C
  1149 14CC AD 20 2B			lda HEAD
  1150 14CF 8D 0F 2B			sta PUTCHAR_008E.V
  1151 14D2 AD 1D 2B			lda Y
  1152 14D5 8D 0E 2B			sta PUTCHAR_008E.Y
  1153 14D8 AD 1C 2B			lda X
  1154 14DB 8D 0D 2B			sta PUTCHAR_008E.X
  1155 14DE 20 99 11			jsr PUTCHAR_008E
  1156 14E1			l_0408
  1157
  1158 				; ------------------------------------------------------------
  1159
  1160 = 2B1A			P	= DATAORIGIN+$0052
  1161 = 2B1C			X	= DATAORIGIN+$0054
  1162 = 2B1D			Y	= DATAORIGIN+$0055
  1163 = 2B1E			DIR	= DATAORIGIN+$0056
  1164 = 2B1F			BRAIN	= DATAORIGIN+$0057
  1165 = 2B20			HEAD	= DATAORIGIN+$0058
  1166 = 2B21			COLOUR	= DATAORIGIN+$0059
  1167 = 2B22			ISALIVE	= DATAORIGIN+$005A
  1168
  1169 = 2B1A			@VarData	= P
  1170 = 0009			@VarDataSize	= 9
  1171
  1172 14E1			@exit
  1173 					.ifdef @new
  1174 					lda <@VarData
  1175 					sta :ztmp
  1176 					lda >@VarData
  1177 					ldy #@VarDataSize-1
  1178 					jmp @FreeMem
  1179 					els
  1180 14E1 60				rts						; ret
  1181 					eif
  1182 				.endl
  1183
  1184 14E2			.local	AISTRAIGHT					; PROCEDURE
  1185
  1186 				; optimize OK (ai.inc), line = 5
  1187
  1188 14E2 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1189 14EC A0 04			ldy #PLY.DIR-DATAORIGIN
  1190 14EE B1 12			lda (:bp2),y
  1191 14F0 25 5C			and AVAILDIR
  1192 14F2 F0 07			jeq l_0438
  1193 14F4 B1 12			lda (:bp2),y
  1194 14F6 85 5B			sta NEWDIR
  1195 14F8 4C 66 15			jmp l_0448
  1196 14FB			l_0438
  1197
  1198 				; optimize OK (ai.inc), line = 7
  1199
  1200 14FB A5 5C			lda AVAILDIR
  1201 14FD C9 03			cmp #$03
  1202 14FF D0 10			jne l_045A
  1203 1501 A9 02			lda #$02
  1204 1503 20 47 11			jsr SYSTEM.RANDOM_006D
  1205 1506 B4 18			ldy :STACKORIGIN,x
  1206 1508 B9 40 10			lda adr.DIRECTION,y
  1207 150B 85 5B			sta NEWDIR
  1208 150D CA				dex
  1209 150E 4C 29 15			jmp l_046C
  1210 1511			l_045A
  1211
  1212 				; optimize OK (ai.inc), line = 9
  1213
  1214 1511 A5 5C			lda AVAILDIR
  1215 1513 8D 23 2B			sta @CASETMP_0003
  1216 1516 C9 01			cmp #$01
  1217 1518 D0 07			jne l_0477
  1218 151A			@
  1219
  1220 				; optimize OK (ai.inc), line = 10
  1221
  1222 151A A9 01			lda #$01
  1223 151C 85 5B			sta NEWDIR
  1224
  1225 151E 4C 29 15			jmp a_0003
  1226 1521			l_0477
  1227 1521 C9 02			cmp #$02
  1228 1523 D0 04			jne l_0484
  1229 1525			@
  1230
  1231 				; optimize OK (ai.inc), line = 11
  1232
  1233 1525 A9 02			lda #$02
  1234 1527 85 5B			sta NEWDIR
  1235
  1236 1529			l_0484
  1237 1529			a_0003
  1238 1529			l_046C
  1239
  1240 				; optimize OK (ai.inc), line = 14
  1241
  1242 1529 A5 5C			lda AVAILDIR
  1243 152B C9 0C			cmp #$0C
  1244 152D D0 1F			jne l_04A0
  1245 152F A9 02			lda #$02
  1246 1531 20 47 11			jsr SYSTEM.RANDOM_006D
  1247 1534 E8				inx
  1248 1535 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1249 1539 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1250 153D 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1251 153F 20 44 10			jsr addAX_CX
  1252 1542 CA				dex
  1253 1543 B4 18			ldy :STACKORIGIN,x
  1254 1545 B9 40 10			lda adr.DIRECTION,y
  1255 1548 85 5B			sta NEWDIR
  1256 154A CA				dex
  1257 154B 4C 66 15			jmp l_04B6
  1258 154E			l_04A0
  1259
  1260 				; optimize OK (ai.inc), line = 16
  1261
  1262 154E A5 5C			lda AVAILDIR
  1263 1550 8D 24 2B			sta @CASETMP_0004
  1264 1553 C9 04			cmp #$04
  1265 1555 D0 07			jne l_04C1
  1266 1557			@
  1267
  1268 				; optimize OK (ai.inc), line = 17
  1269
  1270 1557 A9 04			lda #$04
  1271 1559 85 5B			sta NEWDIR
  1272
  1273 155B 4C 66 15			jmp a_0004
  1274 155E			l_04C1
  1275 155E C9 08			cmp #$08
  1276 1560 D0 04			jne l_04CE
  1277 1562			@
  1278
  1279 				; optimize OK (ai.inc), line = 18
  1280
  1281 1562 A9 08			lda #$08
  1282 1564 85 5B			sta NEWDIR
  1283
  1284 1566			l_04CE
  1285 1566			a_0004
  1286 1566			l_04B6
  1287 1566			l_0448
  1288
  1289 				; ------------------------------------------------------------
  1290
  1291 = 2B23			@CASETMP_0003	= DATAORIGIN+$005B
  1292 = 2B24			@CASETMP_0004	= DATAORIGIN+$005C
  1293
  1294 = 2B23			@VarData	= @CASETMP_0003
  1295 = 0002			@VarDataSize	= 2
  1296
  1297 1566			@exit
  1298 					.ifdef @new
  1299 					lda <@VarData
  1300 					sta :ztmp
  1301 					lda >@VarData
  1302 					ldy #@VarDataSize-1
  1303 					jmp @FreeMem
  1304 					els
  1305 1566 60				rts						; ret
  1306 					eif
  1307 				.endl
  1308
  1309 1567			.local	AISAPPER					; PROCEDURE
  1310
  1311 				; optimize OK (ai.inc), line = 31
  1312
  1313 1567 A9 00			lda #$00
  1314 1569 8D 25 2B			sta L
  1315 156C 8D 26 2B			sta R
  1316 156F 8D 27 2B			sta U
  1317 1572 8D 28 2B			sta D
  1318
  1319 				; optimize OK (ai.inc), line = 32
  1320
  1321 1575 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1322 157F A0 01			ldy #PLY.Y-DATAORIGIN
  1323 1581 B1 12			lda (:bp2),y
  1324 1583 0A				asl @
  1325 1584 A8				tay
  1326 1585 A9 00			lda #$00
  1327 1587 18 79 0E 10			add adr.MUL40,y
  1328 158B 85 21			sta :STACKORIGIN+9
  1329 158D A9 0C			lda #$0C
  1330 158F 79 0F 10			adc adr.MUL40+1,y
  1331 1592 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1332 1594 A0 00			ldy #PLY.X-DATAORIGIN
  1333 1596 A5 21			lda :STACKORIGIN+9
  1334 1598 18 71 12			add (:bp2),y
  1335 159B 85 5D			sta T0W
  1336 159D A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1337 159F 69 00			adc #$00
  1338 15A1 85 5E			sta T0W+1
  1339
  1340 				; optimize OK (ai.inc), line = 34
  1341
  1342 15A3 A5 5C			lda AVAILDIR
  1343 15A5 29 01			and #$01
  1344 15A7 F0 73			jeq l_0514
  1345
  1346 				; optimize OK (ai.inc), line = 35
  1347
  1348 15A9 A9 05			lda #$05
  1349 15AB 85 59			sta I0B
  1350
  1351 15AD			l_051E
  1352 				; --- ForToDoCondition
  1353 15AD A5 59			lda I0B
  1354 15AF C9 01			cmp #$01
  1355 15B1 90 69			jcc l_052C
  1356
  1357 				; optimize OK (ai.inc), line = 36
  1358
  1359 15B3 0A				asl @
  1360 15B4 A8				tay
  1361 15B5 A5 5D			lda T0W
  1362 15B7 38 F9 0E 10			sub adr.MUL40,y
  1363 15BB 85 21			sta :STACKORIGIN+9
  1364 15BD A5 5E			lda T0W+1
  1365 15BF F9 0F 10			sbc adr.MUL40+1,y
  1366 15C2 85 11			sta :bp+1
  1367 15C4 A4 21			ldy :STACKORIGIN+9
  1368 15C6 B1 10			lda (:bp),y
  1369 15C8 C9 20			cmp #$20
  1370 15CA D0 03			jne l_0546
  1371 15CC EE 27 2B			inc U
  1372 15CF			l_0546
  1373
  1374 				; optimize OK (ai.inc), line = 37
  1375
  1376 15CF A5 59			lda I0B
  1377 15D1 0A				asl @
  1378 15D2 A8				tay
  1379 15D3 A5 5D			lda T0W
  1380 15D5 38 F9 0E 10			sub adr.MUL40,y
  1381 15D9 85 21			sta :STACKORIGIN+9
  1382 15DB A5 5E			lda T0W+1
  1383 15DD F9 0F 10			sbc adr.MUL40+1,y
  1384 15E0 85 11			sta :bp+1
  1385 15E2 A5 21			lda :STACKORIGIN+9
  1386 15E4 18 69 01			add #$01
  1387 15E7 A8				tay
  1388 15E8 90 02			scc
  1389 15EA E6 11			inc :bp+1
  1390 15EC B1 10			lda (:bp),y
  1391 15EE C9 20			cmp #$20
  1392 15F0 D0 03			jne l_056B
  1393 15F2 EE 27 2B			inc U
  1394 15F5			l_056B
  1395
  1396 				; optimize OK (ai.inc), line = 38
  1397
  1398 15F5 A5 59			lda I0B
  1399 15F7 0A				asl @
  1400 15F8 A8				tay
  1401 15F9 A5 5D			lda T0W
  1402 15FB 38 F9 0E 10			sub adr.MUL40,y
  1403 15FF 85 21			sta :STACKORIGIN+9
  1404 1601 A5 5E			lda T0W+1
  1405 1603 F9 0F 10			sbc adr.MUL40+1,y
  1406 1606 85 11			sta :bp+1
  1407 1608 A4 21			ldy :STACKORIGIN+9
  1408 160A 88				dey
  1409 160B B0 02			scs
  1410 160D C6 11			dec :bp+1
  1411 160F B1 10			lda (:bp),y
  1412 1611 C9 20			cmp #$20
  1413 1613 D0 03			jne l_0590
  1414 1615 EE 27 2B			inc U
  1415 1618			l_0590
  1416
  1417 				; --- ForToDoEpilog
  1418 1618 C6 59			dec I0B
  1419 161A 10 91			jpl l_051E
  1420 161C			l_052C
  1421 161C			l_0514
  1422
  1423 				; optimize OK (ai.inc), line = 42
  1424
  1425 161C A5 5C			lda AVAILDIR
  1426 161E 29 02			and #$02
  1427 1620 F0 73			jeq l_05B4
  1428
  1429 				; optimize OK (ai.inc), line = 43
  1430
  1431 1622 A9 05			lda #$05
  1432 1624 85 59			sta I0B
  1433
  1434 1626			l_05BE
  1435 				; --- ForToDoCondition
  1436 1626 A5 59			lda I0B
  1437 1628 C9 01			cmp #$01
  1438 162A 90 69			jcc l_05CC
  1439
  1440 				; optimize OK (ai.inc), line = 44
  1441
  1442 162C 0A				asl @
  1443 162D A8				tay
  1444 162E A5 5D			lda T0W
  1445 1630 18 79 0E 10			add adr.MUL40,y
  1446 1634 85 21			sta :STACKORIGIN+9
  1447 1636 A5 5E			lda T0W+1
  1448 1638 79 0F 10			adc adr.MUL40+1,y
  1449 163B 85 11			sta :bp+1
  1450 163D A4 21			ldy :STACKORIGIN+9
  1451 163F B1 10			lda (:bp),y
  1452 1641 C9 20			cmp #$20
  1453 1643 D0 03			jne l_05E6
  1454 1645 EE 28 2B			inc D
  1455 1648			l_05E6
  1456
  1457 				; optimize OK (ai.inc), line = 45
  1458
  1459 1648 A5 59			lda I0B
  1460 164A 0A				asl @
  1461 164B A8				tay
  1462 164C A5 5D			lda T0W
  1463 164E 18 79 0E 10			add adr.MUL40,y
  1464 1652 85 21			sta :STACKORIGIN+9
  1465 1654 A5 5E			lda T0W+1
  1466 1656 79 0F 10			adc adr.MUL40+1,y
  1467 1659 85 11			sta :bp+1
  1468 165B A5 21			lda :STACKORIGIN+9
  1469 165D 18 69 01			add #$01
  1470 1660 A8				tay
  1471 1661 90 02			scc
  1472 1663 E6 11			inc :bp+1
  1473 1665 B1 10			lda (:bp),y
  1474 1667 C9 20			cmp #$20
  1475 1669 D0 03			jne l_060B
  1476 166B EE 28 2B			inc D
  1477 166E			l_060B
  1478
  1479 				; optimize OK (ai.inc), line = 46
  1480
  1481 166E A5 59			lda I0B
  1482 1670 0A				asl @
  1483 1671 A8				tay
  1484 1672 A5 5D			lda T0W
  1485 1674 18 79 0E 10			add adr.MUL40,y
  1486 1678 85 21			sta :STACKORIGIN+9
  1487 167A A5 5E			lda T0W+1
  1488 167C 79 0F 10			adc adr.MUL40+1,y
  1489 167F 85 11			sta :bp+1
  1490 1681 A4 21			ldy :STACKORIGIN+9
  1491 1683 88				dey
  1492 1684 B0 02			scs
  1493 1686 C6 11			dec :bp+1
  1494 1688 B1 10			lda (:bp),y
  1495 168A C9 20			cmp #$20
  1496 168C D0 03			jne l_0630
  1497 168E EE 28 2B			inc D
  1498 1691			l_0630
  1499
  1500 				; --- ForToDoEpilog
  1501 1691 C6 59			dec I0B
  1502 1693 10 91			jpl l_05BE
  1503 1695			l_05CC
  1504 1695			l_05B4
  1505
  1506 				; optimize OK (ai.inc), line = 50
  1507
  1508 1695 A5 5C			lda AVAILDIR
  1509 1697 29 04			and #$04
  1510 1699 F0 5F			jeq l_0654
  1511
  1512 				; optimize OK (ai.inc), line = 51
  1513
  1514 169B A9 05			lda #$05
  1515 169D 85 59			sta I0B
  1516
  1517 169F			l_065E
  1518 				; --- ForToDoCondition
  1519 169F A5 59			lda I0B
  1520 16A1 C9 01			cmp #$01
  1521 16A3 90 55			jcc l_066C
  1522
  1523 				; optimize OK (ai.inc), line = 52
  1524
  1525 16A5 A5 5D			lda T0W
  1526 16A7 38 E5 59			sub I0B
  1527 16AA A8				tay
  1528 16AB A5 5E			lda T0W+1
  1529 16AD E9 00			sbc #$00
  1530 16AF 85 11			sta :bp+1
  1531 16B1 B1 10			lda (:bp),y
  1532 16B3 C9 20			cmp #$20
  1533 16B5 D0 03			jne l_0684
  1534 16B7 EE 25 2B			inc L
  1535 16BA			l_0684
  1536
  1537 				; optimize OK (ai.inc), line = 53
  1538
  1539 16BA A5 5D			lda T0W
  1540 16BC 38 E5 59			sub I0B
  1541 16BF A8				tay
  1542 16C0 A5 5E			lda T0W+1
  1543 16C2 E9 00			sbc #$00
  1544 16C4 85 11			sta :bp+1
  1545 16C6 98				tya
  1546 16C7 18 69 28			add #$28
  1547 16CA A8				tay
  1548 16CB 90 02			scc
  1549 16CD E6 11			inc :bp+1
  1550 16CF B1 10			lda (:bp),y
  1551 16D1 C9 20			cmp #$20
  1552 16D3 D0 03			jne l_06A7
  1553 16D5 EE 25 2B			inc L
  1554 16D8			l_06A7
  1555
  1556 				; optimize OK (ai.inc), line = 54
  1557
  1558 16D8 A5 5D			lda T0W
  1559 16DA 38 E5 59			sub I0B
  1560 16DD A8				tay
  1561 16DE A5 5E			lda T0W+1
  1562 16E0 E9 00			sbc #$00
  1563 16E2 85 11			sta :bp+1
  1564 16E4 98				tya
  1565 16E5 38 E9 28			sub #$28
  1566 16E8 A8				tay
  1567 16E9 B0 02			scs
  1568 16EB C6 11			dec :bp+1
  1569 16ED B1 10			lda (:bp),y
  1570 16EF C9 20			cmp #$20
  1571 16F1 D0 03			jne l_06CA
  1572 16F3 EE 25 2B			inc L
  1573 16F6			l_06CA
  1574
  1575 				; --- ForToDoEpilog
  1576 16F6 C6 59			dec I0B
  1577 16F8 10 A5			jpl l_065E
  1578 16FA			l_066C
  1579 16FA			l_0654
  1580
  1581 				; optimize OK (ai.inc), line = 58
  1582
  1583 16FA A5 5C			lda AVAILDIR
  1584 16FC 29 08			and #$08
  1585 16FE F0 5D			jeq l_06EE
  1586
  1587 				; optimize OK (ai.inc), line = 59
  1588
  1589 1700 A9 05			lda #$05
  1590 1702 85 59			sta I0B
  1591
  1592 1704			l_06F8
  1593 				; --- ForToDoCondition
  1594 1704 A5 59			lda I0B
  1595 1706 C9 01			cmp #$01
  1596 1708 90 53			jcc l_0706
  1597
  1598 				; optimize OK (ai.inc), line = 60
  1599
  1600 170A A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1601 1712 A4 59			ldy I0B
  1602 1714 B1 12			lda (:bp2),y
  1603 1716 C9 20			cmp #$20
  1604 1718 D0 03			jne l_071E
  1605 171A EE 26 2B			inc R
  1606 171D			l_071E
  1607
  1608 				; optimize OK (ai.inc), line = 61
  1609
  1610 171D A5 5D			lda T0W
  1611 171F 18 65 59			add I0B
  1612 1722 A8				tay
  1613 1723 A5 5E			lda T0W+1
  1614 1725 69 00			adc #$00
  1615 1727 85 11			sta :bp+1
  1616 1729 98				tya
  1617 172A 18 69 28			add #$28
  1618 172D A8				tay
  1619 172E 90 02			scc
  1620 1730 E6 11			inc :bp+1
  1621 1732 B1 10			lda (:bp),y
  1622 1734 C9 20			cmp #$20
  1623 1736 D0 03			jne l_0741
  1624 1738 EE 26 2B			inc R
  1625 173B			l_0741
  1626
  1627 				; optimize OK (ai.inc), line = 62
  1628
  1629 173B A5 5D			lda T0W
  1630 173D 18 65 59			add I0B
  1631 1740 A8				tay
  1632 1741 A5 5E			lda T0W+1
  1633 1743 69 00			adc #$00
  1634 1745 85 11			sta :bp+1
  1635 1747 98				tya
  1636 1748 38 E9 28			sub #$28
  1637 174B A8				tay
  1638 174C B0 02			scs
  1639 174E C6 11			dec :bp+1
  1640 1750 B1 10			lda (:bp),y
  1641 1752 C9 20			cmp #$20
  1642 1754 D0 03			jne l_0764
  1643 1756 EE 26 2B			inc R
  1644 1759			l_0764
  1645
  1646 				; --- ForToDoEpilog
  1647 1759 C6 59			dec I0B
  1648 175B 10 A7			jpl l_06F8
  1649 175D			l_0706
  1650 175D			l_06EE
  1651
  1652 				; optimize OK (ai.inc), line = 66
  1653
  1654 175D AD 28 2B			lda D
  1655 1760 85 58			sta T0B
  1656
  1657 				; optimize OK (ai.inc), line = 67
  1658
  1659 1762 CD 27 2B			cmp U
  1660 1765 B0 05			jcs l_078C
  1661 1767 AD 27 2B			lda U
  1662 176A 85 58			sta T0B
  1663 176C			l_078C
  1664
  1665 				; optimize OK (ai.inc), line = 68
  1666
  1667 176C A5 58			lda T0B
  1668 176E CD 25 2B			cmp L
  1669 1771 B0 05			jcs l_07A9
  1670 1773 AD 25 2B			lda L
  1671 1776 85 58			sta T0B
  1672 1778			l_07A9
  1673
  1674 				; optimize OK (ai.inc), line = 69
  1675
  1676 1778 A5 58			lda T0B
  1677 177A CD 26 2B			cmp R
  1678 177D B0 05			jcs l_07C6
  1679 177F AD 26 2B			lda R
  1680 1782 85 58			sta T0B
  1681 1784			l_07C6
  1682
  1683 				; optimize OK (ai.inc), line = 71
  1684
  1685 1784 A5 58			lda T0B
  1686 1786 CD 28 2B			cmp D
  1687 1789 D0 04			jne l_07E3
  1688 178B A9 02			lda #$02
  1689 178D 85 58			sta T0B
  1690 178F			l_07E3
  1691
  1692 				; optimize OK (ai.inc), line = 72
  1693
  1694 178F A5 58			lda T0B
  1695 1791 CD 27 2B			cmp U
  1696 1794 D0 04			jne l_07FE
  1697 1796 A9 01			lda #$01
  1698 1798 85 58			sta T0B
  1699 179A			l_07FE
  1700
  1701 				; optimize OK (ai.inc), line = 73
  1702
  1703 179A A5 58			lda T0B
  1704 179C CD 25 2B			cmp L
  1705 179F D0 04			jne l_0819
  1706 17A1 A9 04			lda #$04
  1707 17A3 85 58			sta T0B
  1708 17A5			l_0819
  1709
  1710 				; optimize OK (ai.inc), line = 74
  1711
  1712 17A5 A5 58			lda T0B
  1713 17A7 CD 26 2B			cmp R
  1714 17AA D0 04			jne l_0834
  1715 17AC A9 08			lda #$08
  1716 17AE 85 58			sta T0B
  1717 17B0			l_0834
  1718
  1719 				; optimize OK (ai.inc), line = 76
  1720
  1721 17B0 A5 5C			lda AVAILDIR
  1722 17B2 25 58			and T0B
  1723 17B4 F0 07			jeq l_0853
  1724 17B6 A5 58			lda T0B
  1725 17B8 85 5B			sta NEWDIR
  1726 17BA 4C C0 17			jmp l_0863
  1727 17BD			l_0853
  1728
  1729 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1730
  1731 17BD 20 E2 14			jsr AISTRAIGHT
  1732 17C0			l_0863
  1733
  1734 				; ------------------------------------------------------------
  1735
  1736 = 2B25			L	= DATAORIGIN+$005D
  1737 = 2B26			R	= DATAORIGIN+$005E
  1738 = 2B27			U	= DATAORIGIN+$005F
  1739 = 2B28			D	= DATAORIGIN+$0060
  1740 = 0001			@FORTMP_051B	= $01
  1741 = 0001			@FORTMP_05BB	= $01
  1742 = 0001			@FORTMP_065B	= $01
  1743 = 0001			@FORTMP_06F5	= $01
  1744
  1745 = 2B25			@VarData	= L
  1746 = 0004			@VarDataSize	= 4
  1747
  1748 17C0			@exit
  1749 					.ifdef @new
  1750 					lda <@VarData
  1751 					sta :ztmp
  1752 					lda >@VarData
  1753 					ldy #@VarDataSize-1
  1754 					jmp @FreeMem
  1755 					els
  1756 17C0 60				rts						; ret
  1757 					eif
  1758 				.endl
  1759
  1760 17C1			.local	AIBULLY						; PROCEDURE
  1761
  1762 				; optimize OK (ai.inc), line = 84
  1763
  1764 17C1 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1765 17CB A0 04			ldy #PLY.DIR-DATAORIGIN
  1766 17CD B1 12			lda (:bp2),y
  1767 17CF 85 58			sta T0B
  1768
  1769 				; optimize OK (ai.inc), line = 86
  1770
  1771 17D1 AD E1 2A			lda PLAYER1.ISALIVE
  1772 17D4 0D E9 2A			ora PLAYER2.ISALIVE
  1773 17D7 D0 03 4C 7E 18		jeq l_0880
  1774
  1775 				; optimize OK (ai.inc), line = 88
  1776
  1777 17DC AD E1 2A			lda PLAYER1.ISALIVE
  1778 17DF F0 0F			jeq l_088D
  1779 17E1 AD BB 2A			lda PLAYER1
  1780 17E4 8D B9 2A			sta TMPPLY
  1781 17E7 AD BC 2A			lda PLAYER1+1
  1782 17EA 8D BA 2A			sta TMPPLY+1
  1783 17ED 4C FC 17			jmp l_089C
  1784 17F0			l_088D
  1785 17F0 AD BD 2A			lda PLAYER2
  1786 17F3 8D B9 2A			sta TMPPLY
  1787 17F6 AD BE 2A			lda PLAYER2+1
  1788 17F9 8D BA 2A			sta TMPPLY+1
  1789 17FC			l_089C
  1790
  1791 				; optimize OK (ai.inc), line = 90
  1792
  1793 17FC AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1794 1806 A0 01			ldy #PLY.Y-DATAORIGIN
  1795 1808 B1 12			lda (:bp2),y
  1796 180A 85 21			sta :STACKORIGIN+9
  1797 180C AC B9 2A 84 12 AC + 	mwy TMPPLY :bp2
  1798 1816 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1799 1818 B1 12			lda (:bp2),y
  1800 181A C5 21			cmp :STACKORIGIN+9
  1801 181C B0 07			jcs l_08B5
  1802 181E A9 01			lda #$01
  1803 1820 85 58			sta T0B
  1804 1822 4C 29 18			jmp l_08C3
  1805 1825			l_08B5
  1806 1825 A9 02			lda #$02
  1807 1827 85 58			sta T0B
  1808 1829			l_08C3
  1809
  1810 				; optimize OK (ai.inc), line = 91
  1811
  1812 1829 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1813 1833 A0 01			ldy #PLY.Y-DATAORIGIN
  1814 1835 B1 12			lda (:bp2),y
  1815 1837 85 21			sta :STACKORIGIN+9
  1816 1839 AC B9 2A 84 12 AC + 	mwy TMPPLY :bp2
  1817 1843 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1818 1845 B1 12			lda (:bp2),y
  1819 1847 C5 21			cmp :STACKORIGIN+9
  1820 1849 F0 06			jeq l_08EDx
  1821 184B A5 5C			lda AVAILDIR
  1822 184D 25 58			and T0B
  1823 184F D0 2D			jne l_08ED
  1824 1851			l_08EDx
  1825
  1826 				; optimize OK (ai.inc), line = 92
  1827
  1828 1851 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1829 185B A0 00			ldy #PLY.X-DATAORIGIN
  1830 185D B1 12			lda (:bp2),y
  1831 185F 85 21			sta :STACKORIGIN+9
  1832 1861 AC B9 2A 84 12 AC + 	mwy TMPPLY :bp2
  1833 186B A0 00			ldy #TMPPLY.X-DATAORIGIN
  1834 186D B1 12			lda (:bp2),y
  1835 186F C5 21			cmp :STACKORIGIN+9
  1836 1871 B0 07			jcs l_0902
  1837 1873 A9 04			lda #$04
  1838 1875 85 58			sta T0B
  1839 1877 4C 7E 18			jmp l_0910
  1840 187A			l_0902
  1841 187A A9 08			lda #$08
  1842 187C 85 58			sta T0B
  1843 187E			l_0910
  1844 187E			l_08ED
  1845 187E			l_0880
  1846
  1847 				; optimize OK (ai.inc), line = 96
  1848
  1849 187E A5 5C			lda AVAILDIR
  1850 1880 25 58			and T0B
  1851 1882 F0 07			jeq l_0930
  1852 1884 A5 58			lda T0B
  1853 1886 85 5B			sta NEWDIR
  1854 1888 4C 8E 18			jmp l_0940
  1855 188B			l_0930
  1856
  1857 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1858
  1859 188B 20 67 15			jsr AISAPPER
  1860 188E			l_0940
  1861 188E			@exit
  1862 					.ifdef @new
  1863 					lda <@VarData
  1864 					sta :ztmp
  1865 					lda >@VarData
  1866 					ldy #@VarDataSize-1
  1867 					jmp @FreeMem
  1868 					els
  1869 188E 60				rts						; ret
  1870 					eif
  1871 				.endl
  1872
  1873 188F			.local	AIMIRROR					; PROCEDURE
  1874
  1875 				; optimize OK (ai.inc), line = 105
  1876
  1877 188F AC B7 2A 84 12 AC + 	mwy PLY :bp2
  1878 1899 A0 04			ldy #PLY.DIR-DATAORIGIN
  1879 189B B1 12			lda (:bp2),y
  1880 189D 85 58			sta T0B
  1881
  1882 				; optimize OK (ai.inc), line = 107
  1883
  1884 189F AD E1 2A			lda PLAYER1.ISALIVE
  1885 18A2 F0 2F			jeq l_0957
  1886
  1887 				; optimize OK (ai.inc), line = 108
  1888
  1889 18A4 AD DE 2A			lda PLAYER1.DIR
  1890 18A7 8D 29 2B			sta @CASETMP_0005
  1891 18AA C9 01			cmp #$01
  1892 18AC D0 07			jne l_0963
  1893 18AE			@
  1894
  1895 				; optimize OK (ai.inc), line = 109
  1896
  1897 18AE A9 02			lda #$02
  1898 18B0 85 58			sta T0B
  1899
  1900 18B2 4C D3 18			jmp a_0005
  1901 18B5			l_0963
  1902 18B5 C9 02			cmp #$02
  1903 18B7 D0 07			jne l_0970
  1904 18B9			@
  1905
  1906 				; optimize OK (ai.inc), line = 110
  1907
  1908 18B9 A9 01			lda #$01
  1909 18BB 85 58			sta T0B
  1910
  1911 18BD 4C D3 18			jmp a_0005
  1912 18C0			l_0970
  1913 18C0 C9 04			cmp #$04
  1914 18C2 D0 07			jne l_097D
  1915 18C4			@
  1916
  1917 				; optimize OK (ai.inc), line = 111
  1918
  1919 18C4 A9 08			lda #$08
  1920 18C6 85 58			sta T0B
  1921
  1922 18C8 4C D3 18			jmp a_0005
  1923 18CB			l_097D
  1924 18CB C9 08			cmp #$08
  1925 18CD D0 04			jne l_098A
  1926 18CF			@
  1927
  1928 				; optimize OK (ai.inc), line = 112
  1929
  1930 18CF A9 04			lda #$04
  1931 18D1 85 58			sta T0B
  1932
  1933 18D3			l_098A
  1934 18D3			a_0005
  1935 18D3			l_0957
  1936
  1937 				; optimize OK (ai.inc), line = 116
  1938
  1939 18D3 A5 5C			lda AVAILDIR
  1940 18D5 25 58			and T0B
  1941 18D7 F0 07			jeq l_09B0
  1942 18D9 A5 58			lda T0B
  1943 18DB 85 5B			sta NEWDIR
  1944 18DD 4C E3 18			jmp l_09C0
  1945 18E0			l_09B0
  1946
  1947 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  1948
  1949 18E0 20 67 15			jsr AISAPPER
  1950 18E3			l_09C0
  1951
  1952 				; ------------------------------------------------------------
  1953
  1954 = 2B29			@CASETMP_0005	= DATAORIGIN+$0061
  1955
  1956 = 2B29			@VarData	= @CASETMP_0005
  1957 = 0001			@VarDataSize	= 1
  1958
  1959 18E3			@exit
  1960 					.ifdef @new
  1961 					lda <@VarData
  1962 					sta :ztmp
  1963 					lda >@VarData
  1964 					ldy #@VarDataSize-1
  1965 					jmp @FreeMem
  1966 					els
  1967 18E3 60				rts						; ret
  1968 					eif
  1969 				.endl
  1970
  1971 18E4			.local	SETLEVEL00					; PROCEDURE
  1972
  1973 				; optimize OK (levels.inc), line = 5
  1974
  1975 18E4 A9 01			lda #$01
  1976 18E6 8D 22 2B			sta SETPLAYER.ISALIVE
  1977 18E9 A9 62			lda #$62
  1978 18EB 8D 21 2B			sta SETPLAYER.COLOUR
  1979 18EE A9 51			lda #$51
  1980 18F0 8D 20 2B			sta SETPLAYER.HEAD
  1981 18F3 A9 00			lda #$00
  1982 18F5 8D 1F 2B			sta SETPLAYER.BRAIN
  1983 18F8 A9 08			lda #$08
  1984 18FA 8D 1E 2B			sta SETPLAYER.DIR
  1985 18FD A9 0C			lda #$0C
  1986 18FF 8D 1D 2B			sta SETPLAYER.Y
  1987 1902 A9 0A			lda #$0A
  1988 1904 8D 1C 2B			sta SETPLAYER.X
  1989 1907 AD BB 2A			lda PLAYER1
  1990 190A 8D 1A 2B			sta SETPLAYER.P
  1991 190D AD BC 2A			lda PLAYER1+1
  1992 1910 8D 1B 2B			sta SETPLAYER.P+1
  1993 1913 20 7E 14			jsr SETPLAYER
  1994
  1995 				; optimize OK (levels.inc), line = 6
  1996
  1997 1916 A9 01			lda #$01
  1998 1918 8D 22 2B			sta SETPLAYER.ISALIVE
  1999 191B A9 5D			lda #$5D
  2000 191D 8D 21 2B			sta SETPLAYER.COLOUR
  2001 1920 A9 51			lda #$51
  2002 1922 8D 20 2B			sta SETPLAYER.HEAD
  2003 1925 A9 01			lda #$01
  2004 1927 8D 1F 2B			sta SETPLAYER.BRAIN
  2005 192A A9 04			lda #$04
  2006 192C 8D 1E 2B			sta SETPLAYER.DIR
  2007 192F A9 0C			lda #$0C
  2008 1931 8D 1D 2B			sta SETPLAYER.Y
  2009 1934 A9 1E			lda #$1E
  2010 1936 8D 1C 2B			sta SETPLAYER.X
  2011 1939 AD BD 2A			lda PLAYER2
  2012 193C 8D 1A 2B			sta SETPLAYER.P
  2013 193F AD BE 2A			lda PLAYER2+1
  2014 1942 8D 1B 2B			sta SETPLAYER.P+1
  2015 1945 20 7E 14			jsr SETPLAYER
  2016
  2017 				; optimize FAIL (1, levels.inc), line = 8
  2018
  2019 1948 E8				inx
  2020 1949 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2021 194D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2022 194F A9 06			lda #$06
  2023 1951 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2024 1954 A9 0A			lda #$0A
  2025 1956 8D 16 2B			sta CALCOBSTACLEADDR.X
  2026 1959 20 2C 13			jsr CALCOBSTACLEADDR
  2027 195C B4 17			ldy :STACKORIGIN-1,x
  2028 195E B5 18			lda :STACKORIGIN,x
  2029 1960 99 FA 2A			sta adr.OBSTACLES,y
  2030 1963 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2031 1965 99 FB 2A			sta adr.OBSTACLES+1,y
  2032 1968 CA				dex
  2033 1969 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2034 196D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2035 1971 A9 06			lda #$06
  2036 1973 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2037 1976 A9 1E			lda #$1E
  2038 1978 8D 16 2B			sta CALCOBSTACLEADDR.X
  2039 197B 20 2C 13			jsr CALCOBSTACLEADDR
  2040 197E B4 17			ldy :STACKORIGIN-1,x
  2041 1980 B5 18			lda :STACKORIGIN,x
  2042 1982 99 FA 2A			sta adr.OBSTACLES,y
  2043 1985 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2044 1987 99 FB 2A			sta adr.OBSTACLES+1,y
  2045 198A CA				dex
  2046
  2047 				; optimize FAIL (1, levels.inc), line = 9
  2048
  2049 198B A9 04 95 18			mva #$04 :STACKORIGIN,x
  2050 198F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2051 1993 A9 12			lda #$12
  2052 1995 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2053 1998 A9 0A			lda #$0A
  2054 199A 8D 16 2B			sta CALCOBSTACLEADDR.X
  2055 199D 20 2C 13			jsr CALCOBSTACLEADDR
  2056 19A0 B4 17			ldy :STACKORIGIN-1,x
  2057 19A2 B5 18			lda :STACKORIGIN,x
  2058 19A4 99 FA 2A			sta adr.OBSTACLES,y
  2059 19A7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2060 19A9 99 FB 2A			sta adr.OBSTACLES+1,y
  2061 19AC CA				dex
  2062 19AD A9 06 95 18			mva #$06 :STACKORIGIN,x
  2063 19B1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2064 19B5 A9 12			lda #$12
  2065 19B7 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2066 19BA A9 1E			lda #$1E
  2067 19BC 8D 16 2B			sta CALCOBSTACLEADDR.X
  2068 19BF 20 2C 13			jsr CALCOBSTACLEADDR
  2069 19C2 B4 17			ldy :STACKORIGIN-1,x
  2070 19C4 B5 18			lda :STACKORIGIN,x
  2071 19C6 99 FA 2A			sta adr.OBSTACLES,y
  2072 19C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2073 19CB 99 FB 2A			sta adr.OBSTACLES+1,y
  2074 19CE CA				dex
  2075
  2076 				; optimize FAIL (1, levels.inc), line = 10
  2077
  2078 19CF A9 08 95 18			mva #$08 :STACKORIGIN,x
  2079 19D3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2080 19D7 A9 02			lda #$02
  2081 19D9 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2082 19DC A9 14			lda #$14
  2083 19DE 8D 16 2B			sta CALCOBSTACLEADDR.X
  2084 19E1 20 2C 13			jsr CALCOBSTACLEADDR
  2085 19E4 B4 17			ldy :STACKORIGIN-1,x
  2086 19E6 B5 18			lda :STACKORIGIN,x
  2087 19E8 99 FA 2A			sta adr.OBSTACLES,y
  2088 19EB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2089 19ED 99 FB 2A			sta adr.OBSTACLES+1,y
  2090 19F0 CA				dex
  2091 19F1 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2092 19F5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2093 19F9 A9 16			lda #$16
  2094 19FB 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2095 19FE A9 14			lda #$14
  2096 1A00 8D 16 2B			sta CALCOBSTACLEADDR.X
  2097 1A03 20 2C 13			jsr CALCOBSTACLEADDR
  2098 1A06 B4 17			ldy :STACKORIGIN-1,x
  2099 1A08 B5 18			lda :STACKORIGIN,x
  2100 1A0A 99 FA 2A			sta adr.OBSTACLES,y
  2101 1A0D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2102 1A0F 99 FB 2A			sta adr.OBSTACLES+1,y
  2103 1A12 CA				dex
  2104 1A13 CA				dex
  2105 1A14			@exit
  2106 					.ifdef @new
  2107 					lda <@VarData
  2108 					sta :ztmp
  2109 					lda >@VarData
  2110 					ldy #@VarDataSize-1
  2111 					jmp @FreeMem
  2112 					els
  2113 1A14 60				rts						; ret
  2114 					eif
  2115 				.endl
  2116
  2117 1A15			.local	SETLEVEL01					; PROCEDURE
  2118
  2119 				; optimize OK (levels.inc), line = 17
  2120
  2121 1A15 A9 01			lda #$01
  2122 1A17 8D 22 2B			sta SETPLAYER.ISALIVE
  2123 1A1A A9 62			lda #$62
  2124 1A1C 8D 21 2B			sta SETPLAYER.COLOUR
  2125 1A1F A9 51			lda #$51
  2126 1A21 8D 20 2B			sta SETPLAYER.HEAD
  2127 1A24 A9 00			lda #$00
  2128 1A26 8D 1F 2B			sta SETPLAYER.BRAIN
  2129 1A29 A9 08			lda #$08
  2130 1A2B 8D 1E 2B			sta SETPLAYER.DIR
  2131 1A2E A9 0C			lda #$0C
  2132 1A30 8D 1D 2B			sta SETPLAYER.Y
  2133 1A33 A9 0A			lda #$0A
  2134 1A35 8D 1C 2B			sta SETPLAYER.X
  2135 1A38 AD BB 2A			lda PLAYER1
  2136 1A3B 8D 1A 2B			sta SETPLAYER.P
  2137 1A3E AD BC 2A			lda PLAYER1+1
  2138 1A41 8D 1B 2B			sta SETPLAYER.P+1
  2139 1A44 20 7E 14			jsr SETPLAYER
  2140
  2141 				; optimize OK (levels.inc), line = 18
  2142
  2143 1A47 A9 01			lda #$01
  2144 1A49 8D 22 2B			sta SETPLAYER.ISALIVE
  2145 1A4C A9 5D			lda #$5D
  2146 1A4E 8D 21 2B			sta SETPLAYER.COLOUR
  2147 1A51 A9 51			lda #$51
  2148 1A53 8D 20 2B			sta SETPLAYER.HEAD
  2149 1A56 A9 01			lda #$01
  2150 1A58 8D 1F 2B			sta SETPLAYER.BRAIN
  2151 1A5B A9 04			lda #$04
  2152 1A5D 8D 1E 2B			sta SETPLAYER.DIR
  2153 1A60 A9 0C			lda #$0C
  2154 1A62 8D 1D 2B			sta SETPLAYER.Y
  2155 1A65 A9 1E			lda #$1E
  2156 1A67 8D 1C 2B			sta SETPLAYER.X
  2157 1A6A AD BD 2A			lda PLAYER2
  2158 1A6D 8D 1A 2B			sta SETPLAYER.P
  2159 1A70 AD BE 2A			lda PLAYER2+1
  2160 1A73 8D 1B 2B			sta SETPLAYER.P+1
  2161 1A76 20 7E 14			jsr SETPLAYER
  2162
  2163 				; optimize FAIL (1, levels.inc), line = 20
  2164
  2165 1A79 E8				inx
  2166 1A7A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2167 1A7E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2168 1A80 A9 06			lda #$06
  2169 1A82 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2170 1A85 A9 0A			lda #$0A
  2171 1A87 8D 16 2B			sta CALCOBSTACLEADDR.X
  2172 1A8A 20 2C 13			jsr CALCOBSTACLEADDR
  2173 1A8D B4 17			ldy :STACKORIGIN-1,x
  2174 1A8F B5 18			lda :STACKORIGIN,x
  2175 1A91 99 FA 2A			sta adr.OBSTACLES,y
  2176 1A94 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2177 1A96 99 FB 2A			sta adr.OBSTACLES+1,y
  2178 1A99 CA				dex
  2179 1A9A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2180 1A9E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2181 1AA2 A9 06			lda #$06
  2182 1AA4 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2183 1AA7 A9 1E			lda #$1E
  2184 1AA9 8D 16 2B			sta CALCOBSTACLEADDR.X
  2185 1AAC 20 2C 13			jsr CALCOBSTACLEADDR
  2186 1AAF B4 17			ldy :STACKORIGIN-1,x
  2187 1AB1 B5 18			lda :STACKORIGIN,x
  2188 1AB3 99 FA 2A			sta adr.OBSTACLES,y
  2189 1AB6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2190 1AB8 99 FB 2A			sta adr.OBSTACLES+1,y
  2191 1ABB CA				dex
  2192
  2193 				; optimize FAIL (1, levels.inc), line = 21
  2194
  2195 1ABC A9 04 95 18			mva #$04 :STACKORIGIN,x
  2196 1AC0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2197 1AC4 A9 12			lda #$12
  2198 1AC6 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2199 1AC9 A9 0A			lda #$0A
  2200 1ACB 8D 16 2B			sta CALCOBSTACLEADDR.X
  2201 1ACE 20 2C 13			jsr CALCOBSTACLEADDR
  2202 1AD1 B4 17			ldy :STACKORIGIN-1,x
  2203 1AD3 B5 18			lda :STACKORIGIN,x
  2204 1AD5 99 FA 2A			sta adr.OBSTACLES,y
  2205 1AD8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2206 1ADA 99 FB 2A			sta adr.OBSTACLES+1,y
  2207 1ADD CA				dex
  2208 1ADE A9 06 95 18			mva #$06 :STACKORIGIN,x
  2209 1AE2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2210 1AE6 A9 12			lda #$12
  2211 1AE8 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2212 1AEB A9 1E			lda #$1E
  2213 1AED 8D 16 2B			sta CALCOBSTACLEADDR.X
  2214 1AF0 20 2C 13			jsr CALCOBSTACLEADDR
  2215 1AF3 B4 17			ldy :STACKORIGIN-1,x
  2216 1AF5 B5 18			lda :STACKORIGIN,x
  2217 1AF7 99 FA 2A			sta adr.OBSTACLES,y
  2218 1AFA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2219 1AFC 99 FB 2A			sta adr.OBSTACLES+1,y
  2220 1AFF CA				dex
  2221
  2222 				; optimize FAIL (1, levels.inc), line = 22
  2223
  2224 1B00 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2225 1B04 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2226 1B08 A9 02			lda #$02
  2227 1B0A 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2228 1B0D A9 14			lda #$14
  2229 1B0F 8D 16 2B			sta CALCOBSTACLEADDR.X
  2230 1B12 20 2C 13			jsr CALCOBSTACLEADDR
  2231 1B15 B4 17			ldy :STACKORIGIN-1,x
  2232 1B17 B5 18			lda :STACKORIGIN,x
  2233 1B19 99 FA 2A			sta adr.OBSTACLES,y
  2234 1B1C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2235 1B1E 99 FB 2A			sta adr.OBSTACLES+1,y
  2236 1B21 CA				dex
  2237 1B22 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2238 1B26 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2239 1B2A A9 16			lda #$16
  2240 1B2C 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2241 1B2F A9 14			lda #$14
  2242 1B31 8D 16 2B			sta CALCOBSTACLEADDR.X
  2243 1B34 20 2C 13			jsr CALCOBSTACLEADDR
  2244 1B37 B4 17			ldy :STACKORIGIN-1,x
  2245 1B39 B5 18			lda :STACKORIGIN,x
  2246 1B3B 99 FA 2A			sta adr.OBSTACLES,y
  2247 1B3E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2248 1B40 99 FB 2A			sta adr.OBSTACLES+1,y
  2249 1B43 CA				dex
  2250 1B44 CA				dex
  2251 1B45			@exit
  2252 					.ifdef @new
  2253 					lda <@VarData
  2254 					sta :ztmp
  2255 					lda >@VarData
  2256 					ldy #@VarDataSize-1
  2257 					jmp @FreeMem
  2258 					els
  2259 1B45 60				rts						; ret
  2260 					eif
  2261 				.endl
  2262
  2263 1B46			.local	SETLEVEL02					; PROCEDURE
  2264
  2265 				; optimize OK (levels.inc), line = 29
  2266
  2267 1B46 A9 01			lda #$01
  2268 1B48 8D 22 2B			sta SETPLAYER.ISALIVE
  2269 1B4B A9 62			lda #$62
  2270 1B4D 8D 21 2B			sta SETPLAYER.COLOUR
  2271 1B50 A9 51			lda #$51
  2272 1B52 8D 20 2B			sta SETPLAYER.HEAD
  2273 1B55 A9 00			lda #$00
  2274 1B57 8D 1F 2B			sta SETPLAYER.BRAIN
  2275 1B5A A9 08			lda #$08
  2276 1B5C 8D 1E 2B			sta SETPLAYER.DIR
  2277 1B5F A9 0C			lda #$0C
  2278 1B61 8D 1D 2B			sta SETPLAYER.Y
  2279 1B64 A9 0A			lda #$0A
  2280 1B66 8D 1C 2B			sta SETPLAYER.X
  2281 1B69 AD BB 2A			lda PLAYER1
  2282 1B6C 8D 1A 2B			sta SETPLAYER.P
  2283 1B6F AD BC 2A			lda PLAYER1+1
  2284 1B72 8D 1B 2B			sta SETPLAYER.P+1
  2285 1B75 20 7E 14			jsr SETPLAYER
  2286
  2287 				; optimize OK (levels.inc), line = 30
  2288
  2289 1B78 A9 01			lda #$01
  2290 1B7A 8D 22 2B			sta SETPLAYER.ISALIVE
  2291 1B7D A9 5D			lda #$5D
  2292 1B7F 8D 21 2B			sta SETPLAYER.COLOUR
  2293 1B82 A9 51			lda #$51
  2294 1B84 8D 20 2B			sta SETPLAYER.HEAD
  2295 1B87 A9 03			lda #$03
  2296 1B89 8D 1F 2B			sta SETPLAYER.BRAIN
  2297 1B8C A9 04			lda #$04
  2298 1B8E 8D 1E 2B			sta SETPLAYER.DIR
  2299 1B91 A9 0C			lda #$0C
  2300 1B93 8D 1D 2B			sta SETPLAYER.Y
  2301 1B96 A9 1E			lda #$1E
  2302 1B98 8D 1C 2B			sta SETPLAYER.X
  2303 1B9B AD BD 2A			lda PLAYER2
  2304 1B9E 8D 1A 2B			sta SETPLAYER.P
  2305 1BA1 AD BE 2A			lda PLAYER2+1
  2306 1BA4 8D 1B 2B			sta SETPLAYER.P+1
  2307 1BA7 20 7E 14			jsr SETPLAYER
  2308
  2309 				; optimize FAIL (1, levels.inc), line = 32
  2310
  2311 1BAA E8				inx
  2312 1BAB A9 00 95 18			mva #$00 :STACKORIGIN,x
  2313 1BAF 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2314 1BB1 A9 06			lda #$06
  2315 1BB3 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2316 1BB6 A9 0A			lda #$0A
  2317 1BB8 8D 16 2B			sta CALCOBSTACLEADDR.X
  2318 1BBB 20 2C 13			jsr CALCOBSTACLEADDR
  2319 1BBE B4 17			ldy :STACKORIGIN-1,x
  2320 1BC0 B5 18			lda :STACKORIGIN,x
  2321 1BC2 99 FA 2A			sta adr.OBSTACLES,y
  2322 1BC5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2323 1BC7 99 FB 2A			sta adr.OBSTACLES+1,y
  2324 1BCA CA				dex
  2325 1BCB A9 02 95 18			mva #$02 :STACKORIGIN,x
  2326 1BCF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2327 1BD3 A9 06			lda #$06
  2328 1BD5 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2329 1BD8 A9 1E			lda #$1E
  2330 1BDA 8D 16 2B			sta CALCOBSTACLEADDR.X
  2331 1BDD 20 2C 13			jsr CALCOBSTACLEADDR
  2332 1BE0 B4 17			ldy :STACKORIGIN-1,x
  2333 1BE2 B5 18			lda :STACKORIGIN,x
  2334 1BE4 99 FA 2A			sta adr.OBSTACLES,y
  2335 1BE7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2336 1BE9 99 FB 2A			sta adr.OBSTACLES+1,y
  2337 1BEC CA				dex
  2338
  2339 				; optimize FAIL (1, levels.inc), line = 33
  2340
  2341 1BED A9 04 95 18			mva #$04 :STACKORIGIN,x
  2342 1BF1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2343 1BF5 A9 12			lda #$12
  2344 1BF7 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2345 1BFA A9 0A			lda #$0A
  2346 1BFC 8D 16 2B			sta CALCOBSTACLEADDR.X
  2347 1BFF 20 2C 13			jsr CALCOBSTACLEADDR
  2348 1C02 B4 17			ldy :STACKORIGIN-1,x
  2349 1C04 B5 18			lda :STACKORIGIN,x
  2350 1C06 99 FA 2A			sta adr.OBSTACLES,y
  2351 1C09 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2352 1C0B 99 FB 2A			sta adr.OBSTACLES+1,y
  2353 1C0E CA				dex
  2354 1C0F A9 06 95 18			mva #$06 :STACKORIGIN,x
  2355 1C13 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2356 1C17 A9 12			lda #$12
  2357 1C19 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2358 1C1C A9 1E			lda #$1E
  2359 1C1E 8D 16 2B			sta CALCOBSTACLEADDR.X
  2360 1C21 20 2C 13			jsr CALCOBSTACLEADDR
  2361 1C24 B4 17			ldy :STACKORIGIN-1,x
  2362 1C26 B5 18			lda :STACKORIGIN,x
  2363 1C28 99 FA 2A			sta adr.OBSTACLES,y
  2364 1C2B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2365 1C2D 99 FB 2A			sta adr.OBSTACLES+1,y
  2366 1C30 CA				dex
  2367
  2368 				; optimize FAIL (1, levels.inc), line = 34
  2369
  2370 1C31 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2371 1C35 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2372 1C39 A9 02			lda #$02
  2373 1C3B 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2374 1C3E A9 14			lda #$14
  2375 1C40 8D 16 2B			sta CALCOBSTACLEADDR.X
  2376 1C43 20 2C 13			jsr CALCOBSTACLEADDR
  2377 1C46 B4 17			ldy :STACKORIGIN-1,x
  2378 1C48 B5 18			lda :STACKORIGIN,x
  2379 1C4A 99 FA 2A			sta adr.OBSTACLES,y
  2380 1C4D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2381 1C4F 99 FB 2A			sta adr.OBSTACLES+1,y
  2382 1C52 CA				dex
  2383 1C53 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2384 1C57 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2385 1C5B A9 16			lda #$16
  2386 1C5D 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2387 1C60 A9 14			lda #$14
  2388 1C62 8D 16 2B			sta CALCOBSTACLEADDR.X
  2389 1C65 20 2C 13			jsr CALCOBSTACLEADDR
  2390 1C68 B4 17			ldy :STACKORIGIN-1,x
  2391 1C6A B5 18			lda :STACKORIGIN,x
  2392 1C6C 99 FA 2A			sta adr.OBSTACLES,y
  2393 1C6F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2394 1C71 99 FB 2A			sta adr.OBSTACLES+1,y
  2395 1C74 CA				dex
  2396 1C75 CA				dex
  2397 1C76			@exit
  2398 					.ifdef @new
  2399 					lda <@VarData
  2400 					sta :ztmp
  2401 					lda >@VarData
  2402 					ldy #@VarDataSize-1
  2403 					jmp @FreeMem
  2404 					els
  2405 1C76 60				rts						; ret
  2406 					eif
  2407 				.endl
  2408
  2409 1C77			.local	SETLEVEL03					; PROCEDURE
  2410
  2411 				; optimize OK (levels.inc), line = 41
  2412
  2413 1C77 A9 01			lda #$01
  2414 1C79 8D 22 2B			sta SETPLAYER.ISALIVE
  2415 1C7C A9 62			lda #$62
  2416 1C7E 8D 21 2B			sta SETPLAYER.COLOUR
  2417 1C81 A9 51			lda #$51
  2418 1C83 8D 20 2B			sta SETPLAYER.HEAD
  2419 1C86 A9 00			lda #$00
  2420 1C88 8D 1F 2B			sta SETPLAYER.BRAIN
  2421 1C8B A9 08			lda #$08
  2422 1C8D 8D 1E 2B			sta SETPLAYER.DIR
  2423 1C90 A9 0C			lda #$0C
  2424 1C92 8D 1D 2B			sta SETPLAYER.Y
  2425 1C95 A9 0A			lda #$0A
  2426 1C97 8D 1C 2B			sta SETPLAYER.X
  2427 1C9A AD BB 2A			lda PLAYER1
  2428 1C9D 8D 1A 2B			sta SETPLAYER.P
  2429 1CA0 AD BC 2A			lda PLAYER1+1
  2430 1CA3 8D 1B 2B			sta SETPLAYER.P+1
  2431 1CA6 20 7E 14			jsr SETPLAYER
  2432
  2433 				; optimize OK (levels.inc), line = 42
  2434
  2435 1CA9 A9 01			lda #$01
  2436 1CAB 8D 22 2B			sta SETPLAYER.ISALIVE
  2437 1CAE A9 5D			lda #$5D
  2438 1CB0 8D 21 2B			sta SETPLAYER.COLOUR
  2439 1CB3 A9 51			lda #$51
  2440 1CB5 8D 20 2B			sta SETPLAYER.HEAD
  2441 1CB8 A9 02			lda #$02
  2442 1CBA 8D 1F 2B			sta SETPLAYER.BRAIN
  2443 1CBD A9 04			lda #$04
  2444 1CBF 8D 1E 2B			sta SETPLAYER.DIR
  2445 1CC2 A9 0C			lda #$0C
  2446 1CC4 8D 1D 2B			sta SETPLAYER.Y
  2447 1CC7 A9 1E			lda #$1E
  2448 1CC9 8D 1C 2B			sta SETPLAYER.X
  2449 1CCC AD BD 2A			lda PLAYER2
  2450 1CCF 8D 1A 2B			sta SETPLAYER.P
  2451 1CD2 AD BE 2A			lda PLAYER2+1
  2452 1CD5 8D 1B 2B			sta SETPLAYER.P+1
  2453 1CD8 20 7E 14			jsr SETPLAYER
  2454
  2455 				; optimize FAIL (1, levels.inc), line = 44
  2456
  2457 1CDB E8				inx
  2458 1CDC A9 00 95 18			mva #$00 :STACKORIGIN,x
  2459 1CE0 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2460 1CE2 A9 06			lda #$06
  2461 1CE4 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2462 1CE7 A9 0A			lda #$0A
  2463 1CE9 8D 16 2B			sta CALCOBSTACLEADDR.X
  2464 1CEC 20 2C 13			jsr CALCOBSTACLEADDR
  2465 1CEF B4 17			ldy :STACKORIGIN-1,x
  2466 1CF1 B5 18			lda :STACKORIGIN,x
  2467 1CF3 99 FA 2A			sta adr.OBSTACLES,y
  2468 1CF6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2469 1CF8 99 FB 2A			sta adr.OBSTACLES+1,y
  2470 1CFB CA				dex
  2471 1CFC A9 02 95 18			mva #$02 :STACKORIGIN,x
  2472 1D00 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2473 1D04 A9 06			lda #$06
  2474 1D06 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2475 1D09 A9 1E			lda #$1E
  2476 1D0B 8D 16 2B			sta CALCOBSTACLEADDR.X
  2477 1D0E 20 2C 13			jsr CALCOBSTACLEADDR
  2478 1D11 B4 17			ldy :STACKORIGIN-1,x
  2479 1D13 B5 18			lda :STACKORIGIN,x
  2480 1D15 99 FA 2A			sta adr.OBSTACLES,y
  2481 1D18 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2482 1D1A 99 FB 2A			sta adr.OBSTACLES+1,y
  2483 1D1D CA				dex
  2484
  2485 				; optimize FAIL (1, levels.inc), line = 45
  2486
  2487 1D1E A9 04 95 18			mva #$04 :STACKORIGIN,x
  2488 1D22 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2489 1D26 A9 12			lda #$12
  2490 1D28 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2491 1D2B A9 0A			lda #$0A
  2492 1D2D 8D 16 2B			sta CALCOBSTACLEADDR.X
  2493 1D30 20 2C 13			jsr CALCOBSTACLEADDR
  2494 1D33 B4 17			ldy :STACKORIGIN-1,x
  2495 1D35 B5 18			lda :STACKORIGIN,x
  2496 1D37 99 FA 2A			sta adr.OBSTACLES,y
  2497 1D3A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2498 1D3C 99 FB 2A			sta adr.OBSTACLES+1,y
  2499 1D3F CA				dex
  2500 1D40 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2501 1D44 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2502 1D48 A9 12			lda #$12
  2503 1D4A 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2504 1D4D A9 1E			lda #$1E
  2505 1D4F 8D 16 2B			sta CALCOBSTACLEADDR.X
  2506 1D52 20 2C 13			jsr CALCOBSTACLEADDR
  2507 1D55 B4 17			ldy :STACKORIGIN-1,x
  2508 1D57 B5 18			lda :STACKORIGIN,x
  2509 1D59 99 FA 2A			sta adr.OBSTACLES,y
  2510 1D5C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2511 1D5E 99 FB 2A			sta adr.OBSTACLES+1,y
  2512 1D61 CA				dex
  2513
  2514 				; optimize FAIL (1, levels.inc), line = 46
  2515
  2516 1D62 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2517 1D66 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2518 1D6A A9 0C			lda #$0C
  2519 1D6C 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2520 1D6F A9 01			lda #$01
  2521 1D71 8D 16 2B			sta CALCOBSTACLEADDR.X
  2522 1D74 20 2C 13			jsr CALCOBSTACLEADDR
  2523 1D77 B4 17			ldy :STACKORIGIN-1,x
  2524 1D79 B5 18			lda :STACKORIGIN,x
  2525 1D7B 99 FA 2A			sta adr.OBSTACLES,y
  2526 1D7E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2527 1D80 99 FB 2A			sta adr.OBSTACLES+1,y
  2528 1D83 CA				dex
  2529 1D84 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2530 1D88 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2531 1D8C A9 02			lda #$02
  2532 1D8E 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2533 1D91 A9 14			lda #$14
  2534 1D93 8D 16 2B			sta CALCOBSTACLEADDR.X
  2535 1D96 20 2C 13			jsr CALCOBSTACLEADDR
  2536 1D99 B4 17			ldy :STACKORIGIN-1,x
  2537 1D9B B5 18			lda :STACKORIGIN,x
  2538 1D9D 99 FA 2A			sta adr.OBSTACLES,y
  2539 1DA0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2540 1DA2 99 FB 2A			sta adr.OBSTACLES+1,y
  2541 1DA5 CA				dex
  2542
  2543 				; optimize FAIL (1, levels.inc), line = 47
  2544
  2545 1DA6 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2546 1DAA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2547 1DAE A9 16			lda #$16
  2548 1DB0 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2549 1DB3 A9 14			lda #$14
  2550 1DB5 8D 16 2B			sta CALCOBSTACLEADDR.X
  2551 1DB8 20 2C 13			jsr CALCOBSTACLEADDR
  2552 1DBB B4 17			ldy :STACKORIGIN-1,x
  2553 1DBD B5 18			lda :STACKORIGIN,x
  2554 1DBF 99 FA 2A			sta adr.OBSTACLES,y
  2555 1DC2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2556 1DC4 99 FB 2A			sta adr.OBSTACLES+1,y
  2557 1DC7 CA				dex
  2558 1DC8 CA				dex
  2559 1DC9			@exit
  2560 					.ifdef @new
  2561 					lda <@VarData
  2562 					sta :ztmp
  2563 					lda >@VarData
  2564 					ldy #@VarDataSize-1
  2565 					jmp @FreeMem
  2566 					els
  2567 1DC9 60				rts						; ret
  2568 					eif
  2569 				.endl
  2570
  2571 1DCA			.local	SETLEVEL04					; PROCEDURE
  2572
  2573 				; optimize OK (levels.inc), line = 54
  2574
  2575 1DCA A9 01			lda #$01
  2576 1DCC 8D 22 2B			sta SETPLAYER.ISALIVE
  2577 1DCF A9 62			lda #$62
  2578 1DD1 8D 21 2B			sta SETPLAYER.COLOUR
  2579 1DD4 A9 51			lda #$51
  2580 1DD6 8D 20 2B			sta SETPLAYER.HEAD
  2581 1DD9 A9 00			lda #$00
  2582 1DDB 8D 1F 2B			sta SETPLAYER.BRAIN
  2583 1DDE A9 04			lda #$04
  2584 1DE0 8D 1E 2B			sta SETPLAYER.DIR
  2585 1DE3 A9 0C			lda #$0C
  2586 1DE5 8D 1D 2B			sta SETPLAYER.Y
  2587 1DE8 A9 12			lda #$12
  2588 1DEA 8D 1C 2B			sta SETPLAYER.X
  2589 1DED AD BB 2A			lda PLAYER1
  2590 1DF0 8D 1A 2B			sta SETPLAYER.P
  2591 1DF3 AD BC 2A			lda PLAYER1+1
  2592 1DF6 8D 1B 2B			sta SETPLAYER.P+1
  2593 1DF9 20 7E 14			jsr SETPLAYER
  2594
  2595 				; optimize OK (levels.inc), line = 55
  2596
  2597 1DFC A9 01			lda #$01
  2598 1DFE 8D 22 2B			sta SETPLAYER.ISALIVE
  2599 1E01 A9 5D			lda #$5D
  2600 1E03 8D 21 2B			sta SETPLAYER.COLOUR
  2601 1E06 A9 51			lda #$51
  2602 1E08 8D 20 2B			sta SETPLAYER.HEAD
  2603 1E0B A9 04			lda #$04
  2604 1E0D 8D 1F 2B			sta SETPLAYER.BRAIN
  2605 1E10 A9 08			lda #$08
  2606 1E12 8D 1E 2B			sta SETPLAYER.DIR
  2607 1E15 A9 0C			lda #$0C
  2608 1E17 8D 1D 2B			sta SETPLAYER.Y
  2609 1E1A A9 16			lda #$16
  2610 1E1C 8D 1C 2B			sta SETPLAYER.X
  2611 1E1F AD BD 2A			lda PLAYER2
  2612 1E22 8D 1A 2B			sta SETPLAYER.P
  2613 1E25 AD BE 2A			lda PLAYER2+1
  2614 1E28 8D 1B 2B			sta SETPLAYER.P+1
  2615 1E2B 20 7E 14			jsr SETPLAYER
  2616
  2617 				; optimize FAIL (1, levels.inc), line = 57
  2618
  2619 1E2E E8				inx
  2620 1E2F A9 00 95 18			mva #$00 :STACKORIGIN,x
  2621 1E33 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2622 1E35 A9 06			lda #$06
  2623 1E37 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2624 1E3A A9 0A			lda #$0A
  2625 1E3C 8D 16 2B			sta CALCOBSTACLEADDR.X
  2626 1E3F 20 2C 13			jsr CALCOBSTACLEADDR
  2627 1E42 B4 17			ldy :STACKORIGIN-1,x
  2628 1E44 B5 18			lda :STACKORIGIN,x
  2629 1E46 99 FA 2A			sta adr.OBSTACLES,y
  2630 1E49 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2631 1E4B 99 FB 2A			sta adr.OBSTACLES+1,y
  2632 1E4E CA				dex
  2633 1E4F A9 02 95 18			mva #$02 :STACKORIGIN,x
  2634 1E53 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2635 1E57 A9 06			lda #$06
  2636 1E59 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2637 1E5C A9 1E			lda #$1E
  2638 1E5E 8D 16 2B			sta CALCOBSTACLEADDR.X
  2639 1E61 20 2C 13			jsr CALCOBSTACLEADDR
  2640 1E64 B4 17			ldy :STACKORIGIN-1,x
  2641 1E66 B5 18			lda :STACKORIGIN,x
  2642 1E68 99 FA 2A			sta adr.OBSTACLES,y
  2643 1E6B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2644 1E6D 99 FB 2A			sta adr.OBSTACLES+1,y
  2645 1E70 CA				dex
  2646
  2647 				; optimize FAIL (1, levels.inc), line = 58
  2648
  2649 1E71 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2650 1E75 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2651 1E79 A9 12			lda #$12
  2652 1E7B 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2653 1E7E A9 0A			lda #$0A
  2654 1E80 8D 16 2B			sta CALCOBSTACLEADDR.X
  2655 1E83 20 2C 13			jsr CALCOBSTACLEADDR
  2656 1E86 B4 17			ldy :STACKORIGIN-1,x
  2657 1E88 B5 18			lda :STACKORIGIN,x
  2658 1E8A 99 FA 2A			sta adr.OBSTACLES,y
  2659 1E8D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2660 1E8F 99 FB 2A			sta adr.OBSTACLES+1,y
  2661 1E92 CA				dex
  2662 1E93 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2663 1E97 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2664 1E9B A9 12			lda #$12
  2665 1E9D 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2666 1EA0 A9 1E			lda #$1E
  2667 1EA2 8D 16 2B			sta CALCOBSTACLEADDR.X
  2668 1EA5 20 2C 13			jsr CALCOBSTACLEADDR
  2669 1EA8 B4 17			ldy :STACKORIGIN-1,x
  2670 1EAA B5 18			lda :STACKORIGIN,x
  2671 1EAC 99 FA 2A			sta adr.OBSTACLES,y
  2672 1EAF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2673 1EB1 99 FB 2A			sta adr.OBSTACLES+1,y
  2674 1EB4 CA				dex
  2675
  2676 				; optimize FAIL (1, levels.inc), line = 59
  2677
  2678 1EB5 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2679 1EB9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2680 1EBD A9 0C			lda #$0C
  2681 1EBF 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2682 1EC2 A9 01			lda #$01
  2683 1EC4 8D 16 2B			sta CALCOBSTACLEADDR.X
  2684 1EC7 20 2C 13			jsr CALCOBSTACLEADDR
  2685 1ECA B4 17			ldy :STACKORIGIN-1,x
  2686 1ECC B5 18			lda :STACKORIGIN,x
  2687 1ECE 99 FA 2A			sta adr.OBSTACLES,y
  2688 1ED1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2689 1ED3 99 FB 2A			sta adr.OBSTACLES+1,y
  2690 1ED6 CA				dex
  2691 1ED7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2692 1EDB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2693 1EDF A9 02			lda #$02
  2694 1EE1 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2695 1EE4 A9 14			lda #$14
  2696 1EE6 8D 16 2B			sta CALCOBSTACLEADDR.X
  2697 1EE9 20 2C 13			jsr CALCOBSTACLEADDR
  2698 1EEC B4 17			ldy :STACKORIGIN-1,x
  2699 1EEE B5 18			lda :STACKORIGIN,x
  2700 1EF0 99 FA 2A			sta adr.OBSTACLES,y
  2701 1EF3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2702 1EF5 99 FB 2A			sta adr.OBSTACLES+1,y
  2703 1EF8 CA				dex
  2704
  2705 				; optimize FAIL (1, levels.inc), line = 60
  2706
  2707 1EF9 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2708 1EFD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2709 1F01 A9 16			lda #$16
  2710 1F03 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2711 1F06 A9 14			lda #$14
  2712 1F08 8D 16 2B			sta CALCOBSTACLEADDR.X
  2713 1F0B 20 2C 13			jsr CALCOBSTACLEADDR
  2714 1F0E B4 17			ldy :STACKORIGIN-1,x
  2715 1F10 B5 18			lda :STACKORIGIN,x
  2716 1F12 99 FA 2A			sta adr.OBSTACLES,y
  2717 1F15 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2718 1F17 99 FB 2A			sta adr.OBSTACLES+1,y
  2719 1F1A CA				dex
  2720 1F1B A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2721 1F1F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2722 1F23 A9 0C			lda #$0C
  2723 1F25 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2724 1F28 A9 14			lda #$14
  2725 1F2A 8D 16 2B			sta CALCOBSTACLEADDR.X
  2726 1F2D 20 2C 13			jsr CALCOBSTACLEADDR
  2727 1F30 B4 17			ldy :STACKORIGIN-1,x
  2728 1F32 B5 18			lda :STACKORIGIN,x
  2729 1F34 99 FA 2A			sta adr.OBSTACLES,y
  2730 1F37 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2731 1F39 99 FB 2A			sta adr.OBSTACLES+1,y
  2732 1F3C CA				dex
  2733 1F3D CA				dex
  2734 1F3E			@exit
  2735 					.ifdef @new
  2736 					lda <@VarData
  2737 					sta :ztmp
  2738 					lda >@VarData
  2739 					ldy #@VarDataSize-1
  2740 					jmp @FreeMem
  2741 					els
  2742 1F3E 60				rts						; ret
  2743 					eif
  2744 				.endl
  2745
  2746 1F3F			.local	SETLEVEL05					; PROCEDURE
  2747
  2748 				; optimize OK (levels.inc), line = 67
  2749
  2750 1F3F A9 01			lda #$01
  2751 1F41 8D 22 2B			sta SETPLAYER.ISALIVE
  2752 1F44 A9 62			lda #$62
  2753 1F46 8D 21 2B			sta SETPLAYER.COLOUR
  2754 1F49 A9 51			lda #$51
  2755 1F4B 8D 20 2B			sta SETPLAYER.HEAD
  2756 1F4E A9 00			lda #$00
  2757 1F50 8D 1F 2B			sta SETPLAYER.BRAIN
  2758 1F53 A9 08			lda #$08
  2759 1F55 8D 1E 2B			sta SETPLAYER.DIR
  2760 1F58 A9 0C			lda #$0C
  2761 1F5A 8D 1D 2B			sta SETPLAYER.Y
  2762 1F5D A9 0A			lda #$0A
  2763 1F5F 8D 1C 2B			sta SETPLAYER.X
  2764 1F62 AD BB 2A			lda PLAYER1
  2765 1F65 8D 1A 2B			sta SETPLAYER.P
  2766 1F68 AD BC 2A			lda PLAYER1+1
  2767 1F6B 8D 1B 2B			sta SETPLAYER.P+1
  2768 1F6E 20 7E 14			jsr SETPLAYER
  2769
  2770 				; optimize OK (levels.inc), line = 68
  2771
  2772 1F71 A9 01			lda #$01
  2773 1F73 8D 22 2B			sta SETPLAYER.ISALIVE
  2774 1F76 A9 5D			lda #$5D
  2775 1F78 8D 21 2B			sta SETPLAYER.COLOUR
  2776 1F7B A9 51			lda #$51
  2777 1F7D 8D 20 2B			sta SETPLAYER.HEAD
  2778 1F80 A9 04			lda #$04
  2779 1F82 8D 1F 2B			sta SETPLAYER.BRAIN
  2780 1F85 8D 1E 2B			sta SETPLAYER.DIR
  2781 1F88 A9 0C			lda #$0C
  2782 1F8A 8D 1D 2B			sta SETPLAYER.Y
  2783 1F8D A9 1E			lda #$1E
  2784 1F8F 8D 1C 2B			sta SETPLAYER.X
  2785 1F92 AD BD 2A			lda PLAYER2
  2786 1F95 8D 1A 2B			sta SETPLAYER.P
  2787 1F98 AD BE 2A			lda PLAYER2+1
  2788 1F9B 8D 1B 2B			sta SETPLAYER.P+1
  2789 1F9E 20 7E 14			jsr SETPLAYER
  2790
  2791 				; optimize OK (levels.inc), line = 69
  2792
  2793 1FA1 A9 01			lda #$01
  2794 1FA3 8D 22 2B			sta SETPLAYER.ISALIVE
  2795 1FA6 A9 71			lda #$71
  2796 1FA8 8D 21 2B			sta SETPLAYER.COLOUR
  2797 1FAB A9 51			lda #$51
  2798 1FAD 8D 20 2B			sta SETPLAYER.HEAD
  2799 1FB0 A9 03			lda #$03
  2800 1FB2 8D 1F 2B			sta SETPLAYER.BRAIN
  2801 1FB5 A9 02			lda #$02
  2802 1FB7 8D 1E 2B			sta SETPLAYER.DIR
  2803 1FBA A9 04			lda #$04
  2804 1FBC 8D 1D 2B			sta SETPLAYER.Y
  2805 1FBF A9 14			lda #$14
  2806 1FC1 8D 1C 2B			sta SETPLAYER.X
  2807 1FC4 AD BF 2A			lda PLAYER3
  2808 1FC7 8D 1A 2B			sta SETPLAYER.P
  2809 1FCA AD C0 2A			lda PLAYER3+1
  2810 1FCD 8D 1B 2B			sta SETPLAYER.P+1
  2811 1FD0 20 7E 14			jsr SETPLAYER
  2812
  2813 				; optimize OK (levels.inc), line = 70
  2814
  2815 1FD3 A9 01			lda #$01
  2816 1FD5 8D 22 2B			sta SETPLAYER.ISALIVE
  2817 1FD8 A9 55			lda #$55
  2818 1FDA 8D 21 2B			sta SETPLAYER.COLOUR
  2819 1FDD A9 51			lda #$51
  2820 1FDF 8D 20 2B			sta SETPLAYER.HEAD
  2821 1FE2 A9 02			lda #$02
  2822 1FE4 8D 1F 2B			sta SETPLAYER.BRAIN
  2823 1FE7 A9 01			lda #$01
  2824 1FE9 8D 1E 2B			sta SETPLAYER.DIR
  2825 1FEC A9 12			lda #$12
  2826 1FEE 8D 1D 2B			sta SETPLAYER.Y
  2827 1FF1 A9 14			lda #$14
  2828 1FF3 8D 1C 2B			sta SETPLAYER.X
  2829 1FF6 AD C1 2A			lda PLAYER4
  2830 1FF9 8D 1A 2B			sta SETPLAYER.P
  2831 1FFC AD C2 2A			lda PLAYER4+1
  2832 1FFF 8D 1B 2B			sta SETPLAYER.P+1
  2833 2002 20 7E 14			jsr SETPLAYER
  2834
  2835 				; optimize FAIL (1, levels.inc), line = 72
  2836
  2837 2005 E8				inx
  2838 2006 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2839 200A 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2840 200C A9 06			lda #$06
  2841 200E 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2842 2011 A9 0A			lda #$0A
  2843 2013 8D 16 2B			sta CALCOBSTACLEADDR.X
  2844 2016 20 2C 13			jsr CALCOBSTACLEADDR
  2845 2019 B4 17			ldy :STACKORIGIN-1,x
  2846 201B B5 18			lda :STACKORIGIN,x
  2847 201D 99 FA 2A			sta adr.OBSTACLES,y
  2848 2020 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2849 2022 99 FB 2A			sta adr.OBSTACLES+1,y
  2850 2025 CA				dex
  2851 2026 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2852 202A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2853 202E A9 06			lda #$06
  2854 2030 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2855 2033 A9 1E			lda #$1E
  2856 2035 8D 16 2B			sta CALCOBSTACLEADDR.X
  2857 2038 20 2C 13			jsr CALCOBSTACLEADDR
  2858 203B B4 17			ldy :STACKORIGIN-1,x
  2859 203D B5 18			lda :STACKORIGIN,x
  2860 203F 99 FA 2A			sta adr.OBSTACLES,y
  2861 2042 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2862 2044 99 FB 2A			sta adr.OBSTACLES+1,y
  2863 2047 CA				dex
  2864
  2865 				; optimize FAIL (1, levels.inc), line = 73
  2866
  2867 2048 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2868 204C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2869 2050 A9 12			lda #$12
  2870 2052 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2871 2055 A9 0A			lda #$0A
  2872 2057 8D 16 2B			sta CALCOBSTACLEADDR.X
  2873 205A 20 2C 13			jsr CALCOBSTACLEADDR
  2874 205D B4 17			ldy :STACKORIGIN-1,x
  2875 205F B5 18			lda :STACKORIGIN,x
  2876 2061 99 FA 2A			sta adr.OBSTACLES,y
  2877 2064 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2878 2066 99 FB 2A			sta adr.OBSTACLES+1,y
  2879 2069 CA				dex
  2880 206A A9 06 95 18			mva #$06 :STACKORIGIN,x
  2881 206E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2882 2072 A9 12			lda #$12
  2883 2074 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2884 2077 A9 1E			lda #$1E
  2885 2079 8D 16 2B			sta CALCOBSTACLEADDR.X
  2886 207C 20 2C 13			jsr CALCOBSTACLEADDR
  2887 207F B4 17			ldy :STACKORIGIN-1,x
  2888 2081 B5 18			lda :STACKORIGIN,x
  2889 2083 99 FA 2A			sta adr.OBSTACLES,y
  2890 2086 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2891 2088 99 FB 2A			sta adr.OBSTACLES+1,y
  2892 208B CA				dex
  2893
  2894 				; optimize FAIL (1, levels.inc), line = 74
  2895
  2896 208C A9 08 95 18			mva #$08 :STACKORIGIN,x
  2897 2090 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2898 2094 A9 0C			lda #$0C
  2899 2096 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2900 2099 A9 01			lda #$01
  2901 209B 8D 16 2B			sta CALCOBSTACLEADDR.X
  2902 209E 20 2C 13			jsr CALCOBSTACLEADDR
  2903 20A1 B4 17			ldy :STACKORIGIN-1,x
  2904 20A3 B5 18			lda :STACKORIGIN,x
  2905 20A5 99 FA 2A			sta adr.OBSTACLES,y
  2906 20A8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2907 20AA 99 FB 2A			sta adr.OBSTACLES+1,y
  2908 20AD CA				dex
  2909 20AE A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2910 20B2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2911 20B6 A9 02			lda #$02
  2912 20B8 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2913 20BB A9 14			lda #$14
  2914 20BD 8D 16 2B			sta CALCOBSTACLEADDR.X
  2915 20C0 20 2C 13			jsr CALCOBSTACLEADDR
  2916 20C3 B4 17			ldy :STACKORIGIN-1,x
  2917 20C5 B5 18			lda :STACKORIGIN,x
  2918 20C7 99 FA 2A			sta adr.OBSTACLES,y
  2919 20CA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2920 20CC 99 FB 2A			sta adr.OBSTACLES+1,y
  2921 20CF CA				dex
  2922
  2923 				; optimize FAIL (1, levels.inc), line = 75
  2924
  2925 20D0 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2926 20D4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2927 20D8 A9 16			lda #$16
  2928 20DA 8D 17 2B			sta CALCOBSTACLEADDR.Y
  2929 20DD A9 14			lda #$14
  2930 20DF 8D 16 2B			sta CALCOBSTACLEADDR.X
  2931 20E2 20 2C 13			jsr CALCOBSTACLEADDR
  2932 20E5 B4 17			ldy :STACKORIGIN-1,x
  2933 20E7 B5 18			lda :STACKORIGIN,x
  2934 20E9 99 FA 2A			sta adr.OBSTACLES,y
  2935 20EC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2936 20EE 99 FB 2A			sta adr.OBSTACLES+1,y
  2937 20F1 CA				dex
  2938 20F2 CA				dex
  2939 20F3			@exit
  2940 					.ifdef @new
  2941 					lda <@VarData
  2942 					sta :ztmp
  2943 					lda >@VarData
  2944 					ldy #@VarDataSize-1
  2945 					jmp @FreeMem
  2946 					els
  2947 20F3 60				rts						; ret
  2948 					eif
  2949 				.endl
  2950
  2951 20F4			.local	SETLEVEL06					; PROCEDURE
  2952
  2953 				; optimize OK (levels.inc), line = 82
  2954
  2955 20F4 A9 01			lda #$01
  2956 20F6 8D 22 2B			sta SETPLAYER.ISALIVE
  2957 20F9 A9 62			lda #$62
  2958 20FB 8D 21 2B			sta SETPLAYER.COLOUR
  2959 20FE A9 51			lda #$51
  2960 2100 8D 20 2B			sta SETPLAYER.HEAD
  2961 2103 A9 00			lda #$00
  2962 2105 8D 1F 2B			sta SETPLAYER.BRAIN
  2963 2108 A9 04			lda #$04
  2964 210A 8D 1E 2B			sta SETPLAYER.DIR
  2965 210D A9 0C			lda #$0C
  2966 210F 8D 1D 2B			sta SETPLAYER.Y
  2967 2112 A9 12			lda #$12
  2968 2114 8D 1C 2B			sta SETPLAYER.X
  2969 2117 AD BB 2A			lda PLAYER1
  2970 211A 8D 1A 2B			sta SETPLAYER.P
  2971 211D AD BC 2A			lda PLAYER1+1
  2972 2120 8D 1B 2B			sta SETPLAYER.P+1
  2973 2123 20 7E 14			jsr SETPLAYER
  2974
  2975 				; optimize OK (levels.inc), line = 83
  2976
  2977 2126 A9 01			lda #$01
  2978 2128 8D 22 2B			sta SETPLAYER.ISALIVE
  2979 212B A9 5D			lda #$5D
  2980 212D 8D 21 2B			sta SETPLAYER.COLOUR
  2981 2130 A9 51			lda #$51
  2982 2132 8D 20 2B			sta SETPLAYER.HEAD
  2983 2135 A9 02			lda #$02
  2984 2137 8D 1F 2B			sta SETPLAYER.BRAIN
  2985 213A A9 08			lda #$08
  2986 213C 8D 1E 2B			sta SETPLAYER.DIR
  2987 213F A9 0C			lda #$0C
  2988 2141 8D 1D 2B			sta SETPLAYER.Y
  2989 2144 A9 16			lda #$16
  2990 2146 8D 1C 2B			sta SETPLAYER.X
  2991 2149 AD BD 2A			lda PLAYER2
  2992 214C 8D 1A 2B			sta SETPLAYER.P
  2993 214F AD BE 2A			lda PLAYER2+1
  2994 2152 8D 1B 2B			sta SETPLAYER.P+1
  2995 2155 20 7E 14			jsr SETPLAYER
  2996
  2997 				; optimize OK (levels.inc), line = 84
  2998
  2999 2158 A9 01			lda #$01
  3000 215A 8D 22 2B			sta SETPLAYER.ISALIVE
  3001 215D A9 71			lda #$71
  3002 215F 8D 21 2B			sta SETPLAYER.COLOUR
  3003 2162 A9 51			lda #$51
  3004 2164 8D 20 2B			sta SETPLAYER.HEAD
  3005 2167 A9 02			lda #$02
  3006 2169 8D 1F 2B			sta SETPLAYER.BRAIN
  3007 216C 8D 1E 2B			sta SETPLAYER.DIR
  3008 216F A9 06			lda #$06
  3009 2171 8D 1D 2B			sta SETPLAYER.Y
  3010 2174 8D 1C 2B			sta SETPLAYER.X
  3011 2177 AD BF 2A			lda PLAYER3
  3012 217A 8D 1A 2B			sta SETPLAYER.P
  3013 217D AD C0 2A			lda PLAYER3+1
  3014 2180 8D 1B 2B			sta SETPLAYER.P+1
  3015 2183 20 7E 14			jsr SETPLAYER
  3016
  3017 				; optimize OK (levels.inc), line = 85
  3018
  3019 2186 A9 01			lda #$01
  3020 2188 8D 22 2B			sta SETPLAYER.ISALIVE
  3021 218B A9 55			lda #$55
  3022 218D 8D 21 2B			sta SETPLAYER.COLOUR
  3023 2190 A9 51			lda #$51
  3024 2192 8D 20 2B			sta SETPLAYER.HEAD
  3025 2195 A9 03			lda #$03
  3026 2197 8D 1F 2B			sta SETPLAYER.BRAIN
  3027 219A A9 08			lda #$08
  3028 219C 8D 1E 2B			sta SETPLAYER.DIR
  3029 219F A9 12			lda #$12
  3030 21A1 8D 1D 2B			sta SETPLAYER.Y
  3031 21A4 A9 24			lda #$24
  3032 21A6 8D 1C 2B			sta SETPLAYER.X
  3033 21A9 AD C1 2A			lda PLAYER4
  3034 21AC 8D 1A 2B			sta SETPLAYER.P
  3035 21AF AD C2 2A			lda PLAYER4+1
  3036 21B2 8D 1B 2B			sta SETPLAYER.P+1
  3037 21B5 20 7E 14			jsr SETPLAYER
  3038
  3039 				; optimize FAIL (1, levels.inc), line = 87
  3040
  3041 21B8 E8				inx
  3042 21B9 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3043 21BD 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3044 21BF A9 06			lda #$06
  3045 21C1 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3046 21C4 A9 0A			lda #$0A
  3047 21C6 8D 16 2B			sta CALCOBSTACLEADDR.X
  3048 21C9 20 2C 13			jsr CALCOBSTACLEADDR
  3049 21CC B4 17			ldy :STACKORIGIN-1,x
  3050 21CE B5 18			lda :STACKORIGIN,x
  3051 21D0 99 FA 2A			sta adr.OBSTACLES,y
  3052 21D3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3053 21D5 99 FB 2A			sta adr.OBSTACLES+1,y
  3054 21D8 CA				dex
  3055 21D9 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3056 21DD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3057 21E1 A9 06			lda #$06
  3058 21E3 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3059 21E6 A9 1E			lda #$1E
  3060 21E8 8D 16 2B			sta CALCOBSTACLEADDR.X
  3061 21EB 20 2C 13			jsr CALCOBSTACLEADDR
  3062 21EE B4 17			ldy :STACKORIGIN-1,x
  3063 21F0 B5 18			lda :STACKORIGIN,x
  3064 21F2 99 FA 2A			sta adr.OBSTACLES,y
  3065 21F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3066 21F7 99 FB 2A			sta adr.OBSTACLES+1,y
  3067 21FA CA				dex
  3068
  3069 				; optimize FAIL (1, levels.inc), line = 88
  3070
  3071 21FB A9 04 95 18			mva #$04 :STACKORIGIN,x
  3072 21FF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3073 2203 A9 12			lda #$12
  3074 2205 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3075 2208 A9 0A			lda #$0A
  3076 220A 8D 16 2B			sta CALCOBSTACLEADDR.X
  3077 220D 20 2C 13			jsr CALCOBSTACLEADDR
  3078 2210 B4 17			ldy :STACKORIGIN-1,x
  3079 2212 B5 18			lda :STACKORIGIN,x
  3080 2214 99 FA 2A			sta adr.OBSTACLES,y
  3081 2217 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3082 2219 99 FB 2A			sta adr.OBSTACLES+1,y
  3083 221C CA				dex
  3084 221D A9 06 95 18			mva #$06 :STACKORIGIN,x
  3085 2221 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3086 2225 A9 12			lda #$12
  3087 2227 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3088 222A A9 1E			lda #$1E
  3089 222C 8D 16 2B			sta CALCOBSTACLEADDR.X
  3090 222F 20 2C 13			jsr CALCOBSTACLEADDR
  3091 2232 B4 17			ldy :STACKORIGIN-1,x
  3092 2234 B5 18			lda :STACKORIGIN,x
  3093 2236 99 FA 2A			sta adr.OBSTACLES,y
  3094 2239 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3095 223B 99 FB 2A			sta adr.OBSTACLES+1,y
  3096 223E CA				dex
  3097
  3098 				; optimize FAIL (1, levels.inc), line = 89
  3099
  3100 223F A9 08 95 18			mva #$08 :STACKORIGIN,x
  3101 2243 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3102 2247 A9 0C			lda #$0C
  3103 2249 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3104 224C A9 01			lda #$01
  3105 224E 8D 16 2B			sta CALCOBSTACLEADDR.X
  3106 2251 20 2C 13			jsr CALCOBSTACLEADDR
  3107 2254 B4 17			ldy :STACKORIGIN-1,x
  3108 2256 B5 18			lda :STACKORIGIN,x
  3109 2258 99 FA 2A			sta adr.OBSTACLES,y
  3110 225B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3111 225D 99 FB 2A			sta adr.OBSTACLES+1,y
  3112 2260 CA				dex
  3113 2261 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3114 2265 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3115 2269 A9 02			lda #$02
  3116 226B 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3117 226E A9 14			lda #$14
  3118 2270 8D 16 2B			sta CALCOBSTACLEADDR.X
  3119 2273 20 2C 13			jsr CALCOBSTACLEADDR
  3120 2276 B4 17			ldy :STACKORIGIN-1,x
  3121 2278 B5 18			lda :STACKORIGIN,x
  3122 227A 99 FA 2A			sta adr.OBSTACLES,y
  3123 227D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3124 227F 99 FB 2A			sta adr.OBSTACLES+1,y
  3125 2282 CA				dex
  3126
  3127 				; optimize FAIL (1, levels.inc), line = 90
  3128
  3129 2283 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3130 2287 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3131 228B A9 16			lda #$16
  3132 228D 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3133 2290 A9 14			lda #$14
  3134 2292 8D 16 2B			sta CALCOBSTACLEADDR.X
  3135 2295 20 2C 13			jsr CALCOBSTACLEADDR
  3136 2298 B4 17			ldy :STACKORIGIN-1,x
  3137 229A B5 18			lda :STACKORIGIN,x
  3138 229C 99 FA 2A			sta adr.OBSTACLES,y
  3139 229F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3140 22A1 99 FB 2A			sta adr.OBSTACLES+1,y
  3141 22A4 CA				dex
  3142 22A5 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3143 22A9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3144 22AD A9 0C			lda #$0C
  3145 22AF 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3146 22B2 A9 14			lda #$14
  3147 22B4 8D 16 2B			sta CALCOBSTACLEADDR.X
  3148 22B7 20 2C 13			jsr CALCOBSTACLEADDR
  3149 22BA B4 17			ldy :STACKORIGIN-1,x
  3150 22BC B5 18			lda :STACKORIGIN,x
  3151 22BE 99 FA 2A			sta adr.OBSTACLES,y
  3152 22C1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3153 22C3 99 FB 2A			sta adr.OBSTACLES+1,y
  3154 22C6 CA				dex
  3155 22C7 CA				dex
  3156 22C8			@exit
  3157 					.ifdef @new
  3158 					lda <@VarData
  3159 					sta :ztmp
  3160 					lda >@VarData
  3161 					ldy #@VarDataSize-1
  3162 					jmp @FreeMem
  3163 					els
  3164 22C8 60				rts						; ret
  3165 					eif
  3166 				.endl
  3167
  3168 22C9			.local	SETLEVEL07					; PROCEDURE
  3169
  3170 				; optimize OK (levels.inc), line = 97
  3171
  3172 22C9 A9 01			lda #$01
  3173 22CB 8D 22 2B			sta SETPLAYER.ISALIVE
  3174 22CE A9 62			lda #$62
  3175 22D0 8D 21 2B			sta SETPLAYER.COLOUR
  3176 22D3 A9 51			lda #$51
  3177 22D5 8D 20 2B			sta SETPLAYER.HEAD
  3178 22D8 A9 00			lda #$00
  3179 22DA 8D 1F 2B			sta SETPLAYER.BRAIN
  3180 22DD A9 04			lda #$04
  3181 22DF 8D 1E 2B			sta SETPLAYER.DIR
  3182 22E2 A9 0C			lda #$0C
  3183 22E4 8D 1D 2B			sta SETPLAYER.Y
  3184 22E7 A9 12			lda #$12
  3185 22E9 8D 1C 2B			sta SETPLAYER.X
  3186 22EC AD BB 2A			lda PLAYER1
  3187 22EF 8D 1A 2B			sta SETPLAYER.P
  3188 22F2 AD BC 2A			lda PLAYER1+1
  3189 22F5 8D 1B 2B			sta SETPLAYER.P+1
  3190 22F8 20 7E 14			jsr SETPLAYER
  3191
  3192 				; optimize OK (levels.inc), line = 98
  3193
  3194 22FB A9 01			lda #$01
  3195 22FD 8D 22 2B			sta SETPLAYER.ISALIVE
  3196 2300 A9 5D			lda #$5D
  3197 2302 8D 21 2B			sta SETPLAYER.COLOUR
  3198 2305 A9 51			lda #$51
  3199 2307 8D 20 2B			sta SETPLAYER.HEAD
  3200 230A A9 03			lda #$03
  3201 230C 8D 1F 2B			sta SETPLAYER.BRAIN
  3202 230F A9 08			lda #$08
  3203 2311 8D 1E 2B			sta SETPLAYER.DIR
  3204 2314 A9 17			lda #$17
  3205 2316 8D 1D 2B			sta SETPLAYER.Y
  3206 2319 A9 01			lda #$01
  3207 231B 8D 1C 2B			sta SETPLAYER.X
  3208 231E AD BD 2A			lda PLAYER2
  3209 2321 8D 1A 2B			sta SETPLAYER.P
  3210 2324 AD BE 2A			lda PLAYER2+1
  3211 2327 8D 1B 2B			sta SETPLAYER.P+1
  3212 232A 20 7E 14			jsr SETPLAYER
  3213
  3214 				; optimize OK (levels.inc), line = 99
  3215
  3216 232D A9 01			lda #$01
  3217 232F 8D 22 2B			sta SETPLAYER.ISALIVE
  3218 2332 A9 71			lda #$71
  3219 2334 8D 21 2B			sta SETPLAYER.COLOUR
  3220 2337 A9 51			lda #$51
  3221 2339 8D 20 2B			sta SETPLAYER.HEAD
  3222 233C A9 03			lda #$03
  3223 233E 8D 1F 2B			sta SETPLAYER.BRAIN
  3224 2341 A9 02			lda #$02
  3225 2343 8D 1E 2B			sta SETPLAYER.DIR
  3226 2346 A9 04			lda #$04
  3227 2348 8D 1D 2B			sta SETPLAYER.Y
  3228 234B A9 1E			lda #$1E
  3229 234D 8D 1C 2B			sta SETPLAYER.X
  3230 2350 AD BF 2A			lda PLAYER3
  3231 2353 8D 1A 2B			sta SETPLAYER.P
  3232 2356 AD C0 2A			lda PLAYER3+1
  3233 2359 8D 1B 2B			sta SETPLAYER.P+1
  3234 235C 20 7E 14			jsr SETPLAYER
  3235
  3236 				; optimize OK (levels.inc), line = 100
  3237
  3238 235F A9 01			lda #$01
  3239 2361 8D 22 2B			sta SETPLAYER.ISALIVE
  3240 2364 A9 55			lda #$55
  3241 2366 8D 21 2B			sta SETPLAYER.COLOUR
  3242 2369 A9 51			lda #$51
  3243 236B 8D 20 2B			sta SETPLAYER.HEAD
  3244 236E A9 02			lda #$02
  3245 2370 8D 1F 2B			sta SETPLAYER.BRAIN
  3246 2373 A9 01			lda #$01
  3247 2375 8D 1E 2B			sta SETPLAYER.DIR
  3248 2378 A9 15			lda #$15
  3249 237A 8D 1D 2B			sta SETPLAYER.Y
  3250 237D A9 24			lda #$24
  3251 237F 8D 1C 2B			sta SETPLAYER.X
  3252 2382 AD C1 2A			lda PLAYER4
  3253 2385 8D 1A 2B			sta SETPLAYER.P
  3254 2388 AD C2 2A			lda PLAYER4+1
  3255 238B 8D 1B 2B			sta SETPLAYER.P+1
  3256 238E 20 7E 14			jsr SETPLAYER
  3257
  3258 				; optimize FAIL (1, levels.inc), line = 102
  3259
  3260 2391 E8				inx
  3261 2392 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3262 2396 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3263 2398 A9 06			lda #$06
  3264 239A 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3265 239D A9 0A			lda #$0A
  3266 239F 8D 16 2B			sta CALCOBSTACLEADDR.X
  3267 23A2 20 2C 13			jsr CALCOBSTACLEADDR
  3268 23A5 B4 17			ldy :STACKORIGIN-1,x
  3269 23A7 B5 18			lda :STACKORIGIN,x
  3270 23A9 99 FA 2A			sta adr.OBSTACLES,y
  3271 23AC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3272 23AE 99 FB 2A			sta adr.OBSTACLES+1,y
  3273 23B1 CA				dex
  3274 23B2 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3275 23B6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3276 23BA A9 06			lda #$06
  3277 23BC 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3278 23BF A9 1E			lda #$1E
  3279 23C1 8D 16 2B			sta CALCOBSTACLEADDR.X
  3280 23C4 20 2C 13			jsr CALCOBSTACLEADDR
  3281 23C7 B4 17			ldy :STACKORIGIN-1,x
  3282 23C9 B5 18			lda :STACKORIGIN,x
  3283 23CB 99 FA 2A			sta adr.OBSTACLES,y
  3284 23CE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3285 23D0 99 FB 2A			sta adr.OBSTACLES+1,y
  3286 23D3 CA				dex
  3287
  3288 				; optimize FAIL (1, levels.inc), line = 103
  3289
  3290 23D4 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3291 23D8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3292 23DC A9 12			lda #$12
  3293 23DE 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3294 23E1 A9 0A			lda #$0A
  3295 23E3 8D 16 2B			sta CALCOBSTACLEADDR.X
  3296 23E6 20 2C 13			jsr CALCOBSTACLEADDR
  3297 23E9 B4 17			ldy :STACKORIGIN-1,x
  3298 23EB B5 18			lda :STACKORIGIN,x
  3299 23ED 99 FA 2A			sta adr.OBSTACLES,y
  3300 23F0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3301 23F2 99 FB 2A			sta adr.OBSTACLES+1,y
  3302 23F5 CA				dex
  3303 23F6 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3304 23FA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3305 23FE A9 12			lda #$12
  3306 2400 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3307 2403 A9 1E			lda #$1E
  3308 2405 8D 16 2B			sta CALCOBSTACLEADDR.X
  3309 2408 20 2C 13			jsr CALCOBSTACLEADDR
  3310 240B B4 17			ldy :STACKORIGIN-1,x
  3311 240D B5 18			lda :STACKORIGIN,x
  3312 240F 99 FA 2A			sta adr.OBSTACLES,y
  3313 2412 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3314 2414 99 FB 2A			sta adr.OBSTACLES+1,y
  3315 2417 CA				dex
  3316
  3317 				; optimize FAIL (1, levels.inc), line = 104
  3318
  3319 2418 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3320 241C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3321 2420 A9 0C			lda #$0C
  3322 2422 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3323 2425 A9 01			lda #$01
  3324 2427 8D 16 2B			sta CALCOBSTACLEADDR.X
  3325 242A 20 2C 13			jsr CALCOBSTACLEADDR
  3326 242D B4 17			ldy :STACKORIGIN-1,x
  3327 242F B5 18			lda :STACKORIGIN,x
  3328 2431 99 FA 2A			sta adr.OBSTACLES,y
  3329 2434 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3330 2436 99 FB 2A			sta adr.OBSTACLES+1,y
  3331 2439 CA				dex
  3332 243A A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3333 243E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3334 2442 A9 02			lda #$02
  3335 2444 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3336 2447 A9 14			lda #$14
  3337 2449 8D 16 2B			sta CALCOBSTACLEADDR.X
  3338 244C 20 2C 13			jsr CALCOBSTACLEADDR
  3339 244F B4 17			ldy :STACKORIGIN-1,x
  3340 2451 B5 18			lda :STACKORIGIN,x
  3341 2453 99 FA 2A			sta adr.OBSTACLES,y
  3342 2456 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3343 2458 99 FB 2A			sta adr.OBSTACLES+1,y
  3344 245B CA				dex
  3345
  3346 				; optimize FAIL (1, levels.inc), line = 105
  3347
  3348 245C A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3349 2460 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3350 2464 A9 16			lda #$16
  3351 2466 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3352 2469 A9 14			lda #$14
  3353 246B 8D 16 2B			sta CALCOBSTACLEADDR.X
  3354 246E 20 2C 13			jsr CALCOBSTACLEADDR
  3355 2471 B4 17			ldy :STACKORIGIN-1,x
  3356 2473 B5 18			lda :STACKORIGIN,x
  3357 2475 99 FA 2A			sta adr.OBSTACLES,y
  3358 2478 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3359 247A 99 FB 2A			sta adr.OBSTACLES+1,y
  3360 247D CA				dex
  3361 247E A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3362 2482 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3363 2486 A9 0C			lda #$0C
  3364 2488 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3365 248B A9 14			lda #$14
  3366 248D 8D 16 2B			sta CALCOBSTACLEADDR.X
  3367 2490 20 2C 13			jsr CALCOBSTACLEADDR
  3368 2493 B4 17			ldy :STACKORIGIN-1,x
  3369 2495 B5 18			lda :STACKORIGIN,x
  3370 2497 99 FA 2A			sta adr.OBSTACLES,y
  3371 249A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3372 249C 99 FB 2A			sta adr.OBSTACLES+1,y
  3373 249F CA				dex
  3374 24A0 CA				dex
  3375 24A1			@exit
  3376 					.ifdef @new
  3377 					lda <@VarData
  3378 					sta :ztmp
  3379 					lda >@VarData
  3380 					ldy #@VarDataSize-1
  3381 					jmp @FreeMem
  3382 					els
  3383 24A1 60				rts						; ret
  3384 					eif
  3385 				.endl
  3386
  3387 24A2			.local	SETLEVEL08					; PROCEDURE
  3388
  3389 				; optimize OK (levels.inc), line = 112
  3390
  3391 24A2 A9 01			lda #$01
  3392 24A4 8D 22 2B			sta SETPLAYER.ISALIVE
  3393 24A7 A9 62			lda #$62
  3394 24A9 8D 21 2B			sta SETPLAYER.COLOUR
  3395 24AC A9 51			lda #$51
  3396 24AE 8D 20 2B			sta SETPLAYER.HEAD
  3397 24B1 A9 00			lda #$00
  3398 24B3 8D 1F 2B			sta SETPLAYER.BRAIN
  3399 24B6 A9 08			lda #$08
  3400 24B8 8D 1E 2B			sta SETPLAYER.DIR
  3401 24BB A9 17			lda #$17
  3402 24BD 8D 1D 2B			sta SETPLAYER.Y
  3403 24C0 A9 01			lda #$01
  3404 24C2 8D 1C 2B			sta SETPLAYER.X
  3405 24C5 AD BB 2A			lda PLAYER1
  3406 24C8 8D 1A 2B			sta SETPLAYER.P
  3407 24CB AD BC 2A			lda PLAYER1+1
  3408 24CE 8D 1B 2B			sta SETPLAYER.P+1
  3409 24D1 20 7E 14			jsr SETPLAYER
  3410
  3411 				; optimize OK (levels.inc), line = 113
  3412
  3413 24D4 A9 01			lda #$01
  3414 24D6 8D 22 2B			sta SETPLAYER.ISALIVE
  3415 24D9 A9 5D			lda #$5D
  3416 24DB 8D 21 2B			sta SETPLAYER.COLOUR
  3417 24DE A9 51			lda #$51
  3418 24E0 8D 20 2B			sta SETPLAYER.HEAD
  3419 24E3 A9 03			lda #$03
  3420 24E5 8D 1F 2B			sta SETPLAYER.BRAIN
  3421 24E8 A9 04			lda #$04
  3422 24EA 8D 1E 2B			sta SETPLAYER.DIR
  3423 24ED A9 17			lda #$17
  3424 24EF 8D 1D 2B			sta SETPLAYER.Y
  3425 24F2 A9 26			lda #$26
  3426 24F4 8D 1C 2B			sta SETPLAYER.X
  3427 24F7 AD BD 2A			lda PLAYER2
  3428 24FA 8D 1A 2B			sta SETPLAYER.P
  3429 24FD AD BE 2A			lda PLAYER2+1
  3430 2500 8D 1B 2B			sta SETPLAYER.P+1
  3431 2503 20 7E 14			jsr SETPLAYER
  3432
  3433 				; optimize OK (levels.inc), line = 114
  3434
  3435 2506 A9 01			lda #$01
  3436 2508 8D 22 2B			sta SETPLAYER.ISALIVE
  3437 250B A9 71			lda #$71
  3438 250D 8D 21 2B			sta SETPLAYER.COLOUR
  3439 2510 A9 51			lda #$51
  3440 2512 8D 20 2B			sta SETPLAYER.HEAD
  3441 2515 A9 02			lda #$02
  3442 2517 8D 1F 2B			sta SETPLAYER.BRAIN
  3443 251A 8D 1E 2B			sta SETPLAYER.DIR
  3444 251D A9 01			lda #$01
  3445 251F 8D 1D 2B			sta SETPLAYER.Y
  3446 2522 A9 0A			lda #$0A
  3447 2524 8D 1C 2B			sta SETPLAYER.X
  3448 2527 AD BF 2A			lda PLAYER3
  3449 252A 8D 1A 2B			sta SETPLAYER.P
  3450 252D AD C0 2A			lda PLAYER3+1
  3451 2530 8D 1B 2B			sta SETPLAYER.P+1
  3452 2533 20 7E 14			jsr SETPLAYER
  3453
  3454 				; optimize OK (levels.inc), line = 115
  3455
  3456 2536 A9 01			lda #$01
  3457 2538 8D 22 2B			sta SETPLAYER.ISALIVE
  3458 253B A9 55			lda #$55
  3459 253D 8D 21 2B			sta SETPLAYER.COLOUR
  3460 2540 A9 51			lda #$51
  3461 2542 8D 20 2B			sta SETPLAYER.HEAD
  3462 2545 A9 04			lda #$04
  3463 2547 8D 1F 2B			sta SETPLAYER.BRAIN
  3464 254A 8D 1E 2B			sta SETPLAYER.DIR
  3465 254D A9 01			lda #$01
  3466 254F 8D 1D 2B			sta SETPLAYER.Y
  3467 2552 A9 26			lda #$26
  3468 2554 8D 1C 2B			sta SETPLAYER.X
  3469 2557 AD C1 2A			lda PLAYER4
  3470 255A 8D 1A 2B			sta SETPLAYER.P
  3471 255D AD C2 2A			lda PLAYER4+1
  3472 2560 8D 1B 2B			sta SETPLAYER.P+1
  3473 2563 20 7E 14			jsr SETPLAYER
  3474
  3475 				; optimize FAIL (1, levels.inc), line = 117
  3476
  3477 2566 E8				inx
  3478 2567 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3479 256B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3480 256D A9 06			lda #$06
  3481 256F 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3482 2572 A9 0A			lda #$0A
  3483 2574 8D 16 2B			sta CALCOBSTACLEADDR.X
  3484 2577 20 2C 13			jsr CALCOBSTACLEADDR
  3485 257A B4 17			ldy :STACKORIGIN-1,x
  3486 257C B5 18			lda :STACKORIGIN,x
  3487 257E 99 FA 2A			sta adr.OBSTACLES,y
  3488 2581 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3489 2583 99 FB 2A			sta adr.OBSTACLES+1,y
  3490 2586 CA				dex
  3491 2587 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3492 258B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3493 258F A9 06			lda #$06
  3494 2591 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3495 2594 A9 1E			lda #$1E
  3496 2596 8D 16 2B			sta CALCOBSTACLEADDR.X
  3497 2599 20 2C 13			jsr CALCOBSTACLEADDR
  3498 259C B4 17			ldy :STACKORIGIN-1,x
  3499 259E B5 18			lda :STACKORIGIN,x
  3500 25A0 99 FA 2A			sta adr.OBSTACLES,y
  3501 25A3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3502 25A5 99 FB 2A			sta adr.OBSTACLES+1,y
  3503 25A8 CA				dex
  3504
  3505 				; optimize FAIL (1, levels.inc), line = 118
  3506
  3507 25A9 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3508 25AD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3509 25B1 A9 12			lda #$12
  3510 25B3 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3511 25B6 A9 0A			lda #$0A
  3512 25B8 8D 16 2B			sta CALCOBSTACLEADDR.X
  3513 25BB 20 2C 13			jsr CALCOBSTACLEADDR
  3514 25BE B4 17			ldy :STACKORIGIN-1,x
  3515 25C0 B5 18			lda :STACKORIGIN,x
  3516 25C2 99 FA 2A			sta adr.OBSTACLES,y
  3517 25C5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3518 25C7 99 FB 2A			sta adr.OBSTACLES+1,y
  3519 25CA CA				dex
  3520 25CB A9 06 95 18			mva #$06 :STACKORIGIN,x
  3521 25CF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3522 25D3 A9 12			lda #$12
  3523 25D5 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3524 25D8 A9 1E			lda #$1E
  3525 25DA 8D 16 2B			sta CALCOBSTACLEADDR.X
  3526 25DD 20 2C 13			jsr CALCOBSTACLEADDR
  3527 25E0 B4 17			ldy :STACKORIGIN-1,x
  3528 25E2 B5 18			lda :STACKORIGIN,x
  3529 25E4 99 FA 2A			sta adr.OBSTACLES,y
  3530 25E7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3531 25E9 99 FB 2A			sta adr.OBSTACLES+1,y
  3532 25EC CA				dex
  3533
  3534 				; optimize FAIL (1, levels.inc), line = 119
  3535
  3536 25ED A9 08 95 18			mva #$08 :STACKORIGIN,x
  3537 25F1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3538 25F5 A9 0C			lda #$0C
  3539 25F7 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3540 25FA A9 01			lda #$01
  3541 25FC 8D 16 2B			sta CALCOBSTACLEADDR.X
  3542 25FF 20 2C 13			jsr CALCOBSTACLEADDR
  3543 2602 B4 17			ldy :STACKORIGIN-1,x
  3544 2604 B5 18			lda :STACKORIGIN,x
  3545 2606 99 FA 2A			sta adr.OBSTACLES,y
  3546 2609 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3547 260B 99 FB 2A			sta adr.OBSTACLES+1,y
  3548 260E CA				dex
  3549 260F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3550 2613 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3551 2617 A9 02			lda #$02
  3552 2619 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3553 261C A9 14			lda #$14
  3554 261E 8D 16 2B			sta CALCOBSTACLEADDR.X
  3555 2621 20 2C 13			jsr CALCOBSTACLEADDR
  3556 2624 B4 17			ldy :STACKORIGIN-1,x
  3557 2626 B5 18			lda :STACKORIGIN,x
  3558 2628 99 FA 2A			sta adr.OBSTACLES,y
  3559 262B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3560 262D 99 FB 2A			sta adr.OBSTACLES+1,y
  3561 2630 CA				dex
  3562
  3563 				; optimize FAIL (1, levels.inc), line = 120
  3564
  3565 2631 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3566 2635 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3567 2639 A9 16			lda #$16
  3568 263B 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3569 263E A9 14			lda #$14
  3570 2640 8D 16 2B			sta CALCOBSTACLEADDR.X
  3571 2643 20 2C 13			jsr CALCOBSTACLEADDR
  3572 2646 B4 17			ldy :STACKORIGIN-1,x
  3573 2648 B5 18			lda :STACKORIGIN,x
  3574 264A 99 FA 2A			sta adr.OBSTACLES,y
  3575 264D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3576 264F 99 FB 2A			sta adr.OBSTACLES+1,y
  3577 2652 CA				dex
  3578 2653 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3579 2657 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3580 265B A9 0C			lda #$0C
  3581 265D 8D 17 2B			sta CALCOBSTACLEADDR.Y
  3582 2660 A9 14			lda #$14
  3583 2662 8D 16 2B			sta CALCOBSTACLEADDR.X
  3584 2665 20 2C 13			jsr CALCOBSTACLEADDR
  3585 2668 B4 17			ldy :STACKORIGIN-1,x
  3586 266A B5 18			lda :STACKORIGIN,x
  3587 266C 99 FA 2A			sta adr.OBSTACLES,y
  3588 266F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3589 2671 99 FB 2A			sta adr.OBSTACLES+1,y
  3590 2674 CA				dex
  3591 2675 CA				dex
  3592 2676			@exit
  3593 					.ifdef @new
  3594 					lda <@VarData
  3595 					sta :ztmp
  3596 					lda >@VarData
  3597 					ldy #@VarDataSize-1
  3598 					jmp @FreeMem
  3599 					els
  3600 2676 60				rts						; ret
  3601 					eif
  3602 				.endl
  3603
  3604 2677			.local	INITPLAYFIELD					; PROCEDURE
  3605
  3606 				; optimize OK (init.inc), line = 5
  3607
  3608 2677 A9 1F			lda #$1F
  3609 2679 8D 15 FF			sta BACKGROUND
  3610 267C A9 00			lda #$00
  3611 267E 8D 19 FF			sta BOREDER
  3612
  3613 				; optimize OK (init.inc), line = 6
  3614
  3615 2681 A9 20			lda #$20
  3616 2683 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3617 2685 A9 C0			lda #$C0
  3618 2687 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3619 2689 A9 03			lda #$03
  3620 268B 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3621 268D A9 00			lda #$00
  3622 268F 85 08			sta SYSTEM.FILLCHAR_0056.A
  3623 2691 A9 0C			lda #$0C
  3624 2693 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3625 2695 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3626
  3627 				; optimize OK (init.inc), line = 8
  3628
  3629 2698 A9 27			lda #$27
  3630 269A 85 58			sta T0B
  3631
  3632 269C			l_0CC2
  3633 				; --- ForToDoCondition
  3634
  3635 				; optimize OK (init.inc), line = 9
  3636
  3637 269C A4 58			ldy T0B
  3638 269E A9 A0			lda #$A0
  3639 26A0 99 00 0C			sta $0C00,y
  3640
  3641 				; optimize OK (init.inc), line = 10
  3642
  3643 26A3 99 C0 0F			sta $0FC0,y
  3644
  3645 				; optimize OK (init.inc), line = 11
  3646
  3647 26A6 A9 41			lda #$41
  3648 26A8 99 00 08			sta $0800,y
  3649
  3650 				; optimize OK (init.inc), line = 12
  3651
  3652 26AB 99 C0 0B			sta $0BC0,y
  3653
  3654 				; --- ForToDoEpilog
  3655 26AE C6 58			dec T0B
  3656 26B0 10 EA			jpl l_0CC2
  3657 26B2			l_0CD0
  3658
  3659 				; optimize OK (init.inc), line = 15
  3660
  3661 26B2 A9 18			lda #$18
  3662 26B4 85 58			sta T0B
  3663
  3664 26B6			l_0D02
  3665 				; --- ForToDoCondition
  3666 26B6 A5 58			lda T0B
  3667 26B8 C9 01			cmp #$01
  3668 26BA 90 3A			jcc l_0D10
  3669
  3670 				; optimize OK (init.inc), line = 16
  3671
  3672 26BC 0A				asl @
  3673 26BD A8				tay
  3674 26BE A9 FF			lda #$FF
  3675 26C0 18 79 0E 10			add adr.MUL40,y
  3676 26C4 85 12			sta :bp2
  3677 26C6 A9 0B			lda #$0B
  3678 26C8 79 0F 10			adc adr.MUL40+1,y
  3679 26CB 85 13			sta :bp2+1
  3680 26CD A0 00			ldy #$00
  3681 26CF A9 A0			lda #$A0
  3682 26D1 91 12			sta (:bp2),y
  3683 26D3 C8				iny
  3684 26D4 91 12			sta (:bp2),y
  3685
  3686 				; optimize OK (init.inc), line = 17
  3687
  3688 26D6 A5 58			lda T0B
  3689 26D8 0A				asl @
  3690 26D9 A8				tay
  3691 26DA A9 FF			lda #$FF
  3692 26DC 18 79 0E 10			add adr.MUL40,y
  3693 26E0 85 12			sta :bp2
  3694 26E2 A9 07			lda #$07
  3695 26E4 79 0F 10			adc adr.MUL40+1,y
  3696 26E7 85 13			sta :bp2+1
  3697 26E9 A0 00			ldy #$00
  3698 26EB A9 41			lda #$41
  3699 26ED 91 12			sta (:bp2),y
  3700 26EF C8				iny
  3701 26F0 91 12			sta (:bp2),y
  3702
  3703 				; --- ForToDoEpilog
  3704 26F2 C6 58			dec T0B
  3705 26F4 10 C0			jpl l_0D02
  3706 26F6			l_0D10
  3707
  3708 				; optimize OK (init.inc), line = 20
  3709
  3710 26F6 A9 07			lda #$07
  3711 26F8 85 59			sta I0B
  3712
  3713 26FA			l_0D34
  3714 				; --- ForToDoCondition
  3715 26FA A5 59			lda I0B
  3716 26FC 0A				asl @
  3717 26FD A8				tay
  3718 26FE A9 7E			lda #$7E
  3719 2700 99 FA 2A			sta adr.OBSTACLES,y
  3720 2703 A9 00			lda #$00
  3721 2705 99 FB 2A			sta adr.OBSTACLES+1,y
  3722
  3723 				; --- ForToDoEpilog
  3724 2708 C6 59			dec I0B
  3725 270A 10 EE			jpl l_0D34
  3726 270C			l_0D42
  3727
  3728 				; ------------------------------------------------------------
  3729
  3730 = 0000			@FORTMP_0CBF	= $00
  3731 = 0001			@FORTMP_0CFF	= $01
  3732 = 0000			@FORTMP_0D31	= $00
  3733 270C			@exit
  3734 					.ifdef @new
  3735 					lda <@VarData
  3736 					sta :ztmp
  3737 					lda >@VarData
  3738 					ldy #@VarDataSize-1
  3739 					jmp @FreeMem
  3740 					els
  3741 270C 60				rts						; ret
  3742 					eif
  3743 				.endl
  3744
  3745 270D			.local	INITPLAYERS					; PROCEDURE
  3746
  3747 				; optimize OK (init.inc), line = 27
  3748
  3749 270D A9 00			lda #$00
  3750 270F 8D E1 2A			sta PLAYER1.ISALIVE
  3751 2712 8D E9 2A			sta PLAYER2.ISALIVE
  3752
  3753 				; optimize OK (init.inc), line = 28
  3754
  3755 2715 8D F1 2A			sta PLAYER3.ISALIVE
  3756 2718 8D F9 2A			sta PLAYER4.ISALIVE
  3757 271B			@exit
  3758 					.ifdef @new
  3759 					lda <@VarData
  3760 					sta :ztmp
  3761 					lda >@VarData
  3762 					ldy #@VarDataSize-1
  3763 					jmp @FreeMem
  3764 					els
  3765 271B 60				rts						; ret
  3766 					eif
  3767 				.endl
  3768
  3769 271C			.local	INITSCORE					; PROCEDURE
  3770
  3771 				; optimize OK (init.inc), line = 35
  3772
  3773 271C A9 30			lda #$30
  3774 271E 8D E0 2A			sta PLAYER1.SCORE
  3775 2721 8D E8 2A			sta PLAYER2.SCORE
  3776
  3777 				; optimize OK (init.inc), line = 36
  3778
  3779 2724 8D F0 2A			sta PLAYER3.SCORE
  3780 2727 8D F8 2A			sta PLAYER4.SCORE
  3781 272A			@exit
  3782 					.ifdef @new
  3783 					lda <@VarData
  3784 					sta :ztmp
  3785 					lda >@VarData
  3786 					ldy #@VarDataSize-1
  3787 					jmp @FreeMem
  3788 					els
  3789 272A 60				rts						; ret
  3790 					eif
  3791 				.endl
  3792
  3793 272B			.local	INITARENA					; PROCEDURE
  3794
  3795 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 43
  3796
  3797 272B 20 77 26			jsr INITPLAYFIELD
  3798 272E 20 0D 27			jsr INITPLAYERS
  3799
  3800 				; optimize OK (init.inc), line = 45
  3801
  3802 2731 AD D8 2A			lda LEVEL
  3803 2734 8D 2A 2B			sta @CASETMP_0006
  3804 2737 C9 00			cmp #$00
  3805 2739 D0 06			jne l_0D87
  3806 273B			@
  3807
  3808 				; optimize FAIL ('SETLEVEL00', init.inc), line = 46
  3809
  3810 273B 20 E4 18			jsr SETLEVEL00
  3811 273E 4C 8E 27			jmp a_0006
  3812 2741			l_0D87
  3813 2741 C9 01			cmp #$01
  3814 2743 D0 06			jne l_0D91
  3815 2745			@
  3816
  3817 				; optimize FAIL ('SETLEVEL01', init.inc), line = 47
  3818
  3819 2745 20 15 1A			jsr SETLEVEL01
  3820 2748 4C 8E 27			jmp a_0006
  3821 274B			l_0D91
  3822 274B C9 02			cmp #$02
  3823 274D D0 06			jne l_0D9B
  3824 274F			@
  3825
  3826 				; optimize FAIL ('SETLEVEL02', init.inc), line = 48
  3827
  3828 274F 20 46 1B			jsr SETLEVEL02
  3829 2752 4C 8E 27			jmp a_0006
  3830 2755			l_0D9B
  3831 2755 C9 03			cmp #$03
  3832 2757 D0 06			jne l_0DA5
  3833 2759			@
  3834
  3835 				; optimize FAIL ('SETLEVEL03', init.inc), line = 49
  3836
  3837 2759 20 77 1C			jsr SETLEVEL03
  3838 275C 4C 8E 27			jmp a_0006
  3839 275F			l_0DA5
  3840 275F C9 04			cmp #$04
  3841 2761 D0 06			jne l_0DAF
  3842 2763			@
  3843
  3844 				; optimize FAIL ('SETLEVEL04', init.inc), line = 50
  3845
  3846 2763 20 CA 1D			jsr SETLEVEL04
  3847 2766 4C 8E 27			jmp a_0006
  3848 2769			l_0DAF
  3849 2769 C9 05			cmp #$05
  3850 276B D0 06			jne l_0DB9
  3851 276D			@
  3852
  3853 				; optimize FAIL ('SETLEVEL05', init.inc), line = 51
  3854
  3855 276D 20 3F 1F			jsr SETLEVEL05
  3856 2770 4C 8E 27			jmp a_0006
  3857 2773			l_0DB9
  3858 2773 C9 06			cmp #$06
  3859 2775 D0 06			jne l_0DC3
  3860 2777			@
  3861
  3862 				; optimize FAIL ('SETLEVEL06', init.inc), line = 52
  3863
  3864 2777 20 F4 20			jsr SETLEVEL06
  3865 277A 4C 8E 27			jmp a_0006
  3866 277D			l_0DC3
  3867 277D C9 07			cmp #$07
  3868 277F D0 06			jne l_0DCD
  3869 2781			@
  3870
  3871 				; optimize FAIL ('SETLEVEL07', init.inc), line = 53
  3872
  3873 2781 20 C9 22			jsr SETLEVEL07
  3874 2784 4C 8E 27			jmp a_0006
  3875 2787			l_0DCD
  3876 2787 C9 08			cmp #$08
  3877 2789 D0 03			jne l_0DD7
  3878 278B			@
  3879
  3880 				; optimize FAIL ('SETLEVEL08', init.inc), line = 54
  3881
  3882 278B 20 A2 24			jsr SETLEVEL08
  3883 278E			l_0DD7
  3884 278E			a_0006
  3885
  3886 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 57
  3887
  3888 278E 20 4F 13			jsr SAVEOBSTACLES
  3889 2791 20 F7 12			jsr ANIMATEOBSTACLES
  3890 2794 20 E9 11			jsr SHOWSCORE
  3891
  3892 				; ------------------------------------------------------------
  3893
  3894 = 2B2A			@CASETMP_0006	= DATAORIGIN+$0062
  3895
  3896 = 2B2A			@VarData	= @CASETMP_0006
  3897 = 0001			@VarDataSize	= 1
  3898
  3899 2797			@exit
  3900 					.ifdef @new
  3901 					lda <@VarData
  3902 					sta :ztmp
  3903 					lda >@VarData
  3904 					ldy #@VarDataSize-1
  3905 					jmp @FreeMem
  3906 					els
  3907 2797 60				rts						; ret
  3908 					eif
  3909 				.endl
  3910
  3911 2798			.local	HUMAN						; PROCEDURE
  3912
  3913 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3914
  3915 2798 20 6C 14			jsr CHECKJOYSTATUS
  3916 279B AC B7 2A 84 12 AC + 	mwy PLY :bp2
  3917 27A5 A0 04			ldy #PLY.DIR-DATAORIGIN
  3918 27A7 B1 12			lda (:bp2),y
  3919 27A9 85 5B			sta NEWDIR
  3920
  3921 				; optimize OK (main.pas), line = 16
  3922
  3923 27AB A5 63			lda JOYSTATUS
  3924 27AD 8D 2B 2B			sta @CASETMP_0007
  3925 27B0 C9 01			cmp #$01
  3926 27B2 D0 19			jne l_0DFE
  3927 27B4			@
  3928
  3929 				; optimize OK (main.pas), line = 17
  3930
  3931 27B4 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  3932 27BE A0 04			ldy #PLY.DIR-DATAORIGIN
  3933 27C0 B1 12			lda (:bp2),y
  3934 27C2 C9 02			cmp #$02
  3935 27C4 F0 04			jeq l_0E10
  3936 27C6 A9 01			lda #$01
  3937 27C8 85 5B			sta NEWDIR
  3938 27CA			l_0E10
  3939
  3940 27CA 4C 21 28			jmp a_0007
  3941 27CD			l_0DFE
  3942 27CD C9 02			cmp #$02
  3943 27CF D0 19			jne l_0E20
  3944 27D1			@
  3945
  3946 				; optimize OK (main.pas), line = 18
  3947
  3948 27D1 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  3949 27DB A0 04			ldy #PLY.DIR-DATAORIGIN
  3950 27DD B1 12			lda (:bp2),y
  3951 27DF C9 01			cmp #$01
  3952 27E1 F0 04			jeq l_0E32
  3953 27E3 A9 02			lda #$02
  3954 27E5 85 5B			sta NEWDIR
  3955 27E7			l_0E32
  3956
  3957 27E7 4C 21 28			jmp a_0007
  3958 27EA			l_0E20
  3959 27EA C9 04			cmp #$04
  3960 27EC D0 19			jne l_0E42
  3961 27EE			@
  3962
  3963 				; optimize OK (main.pas), line = 19
  3964
  3965 27EE AC B7 2A 84 12 AC + 	mwy PLY :bp2
  3966 27F8 A0 04			ldy #PLY.DIR-DATAORIGIN
  3967 27FA B1 12			lda (:bp2),y
  3968 27FC C9 08			cmp #$08
  3969 27FE F0 04			jeq l_0E54
  3970 2800 A9 04			lda #$04
  3971 2802 85 5B			sta NEWDIR
  3972 2804			l_0E54
  3973
  3974 2804 4C 21 28			jmp a_0007
  3975 2807			l_0E42
  3976 2807 C9 08			cmp #$08
  3977 2809 D0 16			jne l_0E64
  3978 280B			@
  3979
  3980 				; optimize OK (main.pas), line = 20
  3981
  3982 280B AC B7 2A 84 12 AC + 	mwy PLY :bp2
  3983 2815 A0 04			ldy #PLY.DIR-DATAORIGIN
  3984 2817 B1 12			lda (:bp2),y
  3985 2819 C9 04			cmp #$04
  3986 281B F0 04			jeq l_0E76
  3987 281D A9 08			lda #$08
  3988 281F 85 5B			sta NEWDIR
  3989 2821			l_0E76
  3990
  3991 2821			l_0E64
  3992 2821			a_0007
  3993
  3994 				; optimize OK (main.pas), line = 23
  3995
  3996 2821 A5 5B			lda NEWDIR
  3997 2823 25 5C			and AVAILDIR
  3998 2825 D0 18			jne l_0E9D
  3999
  4000 				; optimize OK (main.pas), line = 24
  4001
  4002 2827 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4003 2831 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4004 2833 A9 00			lda #$00
  4005 2835 91 12			sta (:bp2),y
  4006 2837 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4007 2839 A9 2A			lda #$2A
  4008 283B 91 12			sta (:bp2),y
  4009 283D C6 5A			dec ALIVE
  4010 283F			l_0E9D
  4011
  4012 				; ------------------------------------------------------------
  4013
  4014 = 2B2B			@CASETMP_0007	= DATAORIGIN+$0063
  4015
  4016 = 2B2B			@VarData	= @CASETMP_0007
  4017 = 0001			@VarDataSize	= 1
  4018
  4019 283F			@exit
  4020 					.ifdef @new
  4021 					lda <@VarData
  4022 					sta :ztmp
  4023 					lda >@VarData
  4024 					ldy #@VarDataSize-1
  4025 					jmp @FreeMem
  4026 					els
  4027 283F 60				rts						; ret
  4028 					eif
  4029 				.endl
  4030
  4031 2840			.local	PLAYERMOVE					; PROCEDURE
  4032
  4033 				; optimize OK (main.pas), line = 32
  4034
  4035 2840 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4036 284A A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4037 284C B1 12			lda (:bp2),y
  4038 284E D0 03 4C 75 29		jeq l_0EBC
  4039
  4040 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4041
  4042 2853 20 62 12			jsr CHECKAVAILDIR
  4043
  4044 				; optimize OK (main.pas), line = 35
  4045
  4046 2856 A5 5C			lda AVAILDIR
  4047 2858 D0 35			jne l_0ED0
  4048
  4049 				; optimize OK (main.pas), line = 36
  4050
  4051 285A AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4052 2864 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4053 2866 A9 00			lda #$00
  4054 2868 91 12			sta (:bp2),y
  4055 286A C6 5A			dec ALIVE
  4056
  4057 				; optimize OK (main.pas), line = 37
  4058
  4059 286C A0 00			ldy #PLY.X-DATAORIGIN
  4060 286E B1 12			lda (:bp2),y
  4061 2870 8D 0D 2B			sta PUTCHAR_008E.X
  4062 2873 A0 01			ldy #PLY.Y-DATAORIGIN
  4063 2875 B1 12			lda (:bp2),y
  4064 2877 8D 0E 2B			sta PUTCHAR_008E.Y
  4065 287A A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4066 287C B1 12			lda (:bp2),y
  4067 287E 18 69 80			add #$80
  4068 2881 8D 10 2B			sta PUTCHAR_008E.C
  4069 2884 A9 57			lda #$57
  4070 2886 8D 0F 2B			sta PUTCHAR_008E.V
  4071 2889 20 99 11			jsr PUTCHAR_008E
  4072 288C 4C 75 29			jmp l_0EF1
  4073 288F			l_0ED0
  4074
  4075 				; optimize OK (main.pas), line = 40
  4076
  4077 288F AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4078 2899 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4079 289B B1 12			lda (:bp2),y
  4080 289D 8D 2C 2B			sta @CASETMP_0008
  4081 28A0 C9 00			cmp #$00
  4082 28A2 D0 06			jne l_0EFC
  4083 28A4			@
  4084
  4085 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4086
  4087 28A4 20 98 27			jsr HUMAN
  4088 28A7 4C CF 28			jmp a_0008
  4089 28AA			l_0EFC
  4090 28AA C9 01			cmp #$01
  4091 28AC D0 06			jne l_0F06
  4092 28AE			@
  4093
  4094 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4095
  4096 28AE 20 E2 14			jsr AISTRAIGHT
  4097 28B1 4C CF 28			jmp a_0008
  4098 28B4			l_0F06
  4099 28B4 C9 02			cmp #$02
  4100 28B6 D0 06			jne l_0F10
  4101 28B8			@
  4102
  4103 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4104
  4105 28B8 20 67 15			jsr AISAPPER
  4106 28BB 4C CF 28			jmp a_0008
  4107 28BE			l_0F10
  4108 28BE C9 03			cmp #$03
  4109 28C0 D0 06			jne l_0F1A
  4110 28C2			@
  4111
  4112 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4113
  4114 28C2 20 C1 17			jsr AIBULLY
  4115 28C5 4C CF 28			jmp a_0008
  4116 28C8			l_0F1A
  4117 28C8 C9 04			cmp #$04
  4118 28CA D0 03			jne l_0F24
  4119 28CC			@
  4120
  4121 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4122
  4123 28CC 20 8F 18			jsr AIMIRROR
  4124 28CF			l_0F24
  4125 28CF			a_0008
  4126
  4127 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4128
  4129 28CF 20 93 13			jsr DRAWTAIL
  4130 28D2 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4131 28DC A0 04			ldy #PLY.DIR-DATAORIGIN
  4132 28DE A5 5B			lda NEWDIR
  4133 28E0 91 12			sta (:bp2),y
  4134
  4135 				; optimize OK (main.pas), line = 50
  4136
  4137 28E2 A5 5B			lda NEWDIR
  4138 28E4 8D 2D 2B			sta @CASETMP_0009
  4139 28E7 C9 01			cmp #$01
  4140 28E9 D0 16			jne l_0F40
  4141 28EB			@
  4142
  4143 				; optimize OK (main.pas), line = 51
  4144
  4145 28EB AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4146 28F5 A0 01			ldy #PLY.Y-DATAORIGIN
  4147 28F7 B1 12			lda (:bp2),y
  4148 28F9 38 E9 01			sub #$01
  4149 28FC 91 12			sta (:bp2),y
  4150
  4151 28FE 4C 4C 29			jmp a_0009
  4152 2901			l_0F40
  4153 2901 C9 02			cmp #$02
  4154 2903 D0 16			jne l_0F4A
  4155 2905			@
  4156
  4157 				; optimize OK (main.pas), line = 52
  4158
  4159 2905 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4160 290F A0 01			ldy #PLY.Y-DATAORIGIN
  4161 2911 B1 12			lda (:bp2),y
  4162 2913 18 69 01			add #$01
  4163 2916 91 12			sta (:bp2),y
  4164
  4165 2918 4C 4C 29			jmp a_0009
  4166 291B			l_0F4A
  4167 291B C9 04			cmp #$04
  4168 291D D0 16			jne l_0F54
  4169 291F			@
  4170
  4171 				; optimize OK (main.pas), line = 53
  4172
  4173 291F AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4174 2929 A0 00			ldy #PLY.X-DATAORIGIN
  4175 292B B1 12			lda (:bp2),y
  4176 292D 38 E9 01			sub #$01
  4177 2930 91 12			sta (:bp2),y
  4178
  4179 2932 4C 4C 29			jmp a_0009
  4180 2935			l_0F54
  4181 2935 C9 08			cmp #$08
  4182 2937 D0 13			jne l_0F5E
  4183 2939			@
  4184
  4185 				; optimize OK (main.pas), line = 54
  4186
  4187 2939 AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4188 2943 A0 00			ldy #PLY.X-DATAORIGIN
  4189 2945 B1 12			lda (:bp2),y
  4190 2947 18 69 01			add #$01
  4191 294A 91 12			sta (:bp2),y
  4192
  4193 294C			l_0F5E
  4194 294C			a_0009
  4195
  4196 				; optimize OK (main.pas), line = 57
  4197
  4198 294C AC B7 2A 84 12 AC + 	mwy PLY :bp2
  4199 2956 A0 00			ldy #PLY.X-DATAORIGIN
  4200 2958 B1 12			lda (:bp2),y
  4201 295A 8D 0D 2B			sta PUTCHAR_008E.X
  4202 295D A0 01			ldy #PLY.Y-DATAORIGIN
  4203 295F B1 12			lda (:bp2),y
  4204 2961 8D 0E 2B			sta PUTCHAR_008E.Y
  4205 2964 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4206 2966 B1 12			lda (:bp2),y
  4207 2968 8D 0F 2B			sta PUTCHAR_008E.V
  4208 296B A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4209 296D B1 12			lda (:bp2),y
  4210 296F 8D 10 2B			sta PUTCHAR_008E.C
  4211 2972 20 99 11			jsr PUTCHAR_008E
  4212 2975			l_0EF1
  4213 2975			l_0EBC
  4214
  4215 				; ------------------------------------------------------------
  4216
  4217 = 2B2C			@CASETMP_0008	= DATAORIGIN+$0064
  4218 = 2B2D			@CASETMP_0009	= DATAORIGIN+$0065
  4219
  4220 = 2B2C			@VarData	= @CASETMP_0008
  4221 = 0002			@VarDataSize	= 2
  4222
  4223 2975			@exit
  4224 					.ifdef @new
  4225 					lda <@VarData
  4226 					sta :ztmp
  4227 					lda >@VarData
  4228 					ldy #@VarDataSize-1
  4229 					jmp @FreeMem
  4230 					els
  4231 2975 60				rts						; ret
  4232 					eif
  4233 				.endl
  4234
  4235 2976			.local	STARTSCREEN					; PROCEDURE
  4236
  4237 				; optimize OK (main.pas), line = 68
  4238
  4239 2976 AD DD 2A			lda PLAYER1.COLOUR
  4240 2979 18 69 80			add #$80
  4241 297C 8D 10 2B			sta PUTCHAR_008E.C
  4242 297F AD DC 2A			lda PLAYER1.HEAD
  4243 2982 8D 0F 2B			sta PUTCHAR_008E.V
  4244 2985 AD DB 2A			lda PLAYER1.Y
  4245 2988 8D 0E 2B			sta PUTCHAR_008E.Y
  4246 298B AD DA 2A			lda PLAYER1.X
  4247 298E 8D 0D 2B			sta PUTCHAR_008E.X
  4248 2991 20 99 11			jsr PUTCHAR_008E
  4249
  4250 				; --- RepeatUntilProlog
  4251 2994			l_0F8C
  4252
  4253 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4254
  4255 2994 20 6C 14			jsr CHECKJOYSTATUS
  4256 2997 A5 63			lda JOYSTATUS
  4257 2999 C9 40			cmp #$40
  4258 299B D0 F7			jne l_0F8C
  4259
  4260 				; optimize OK (main.pas), line = 70
  4261
  4262 299D AD DD 2A			lda PLAYER1.COLOUR
  4263 29A0 8D 10 2B			sta PUTCHAR_008E.C
  4264 29A3 AD DC 2A			lda PLAYER1.HEAD
  4265 29A6 8D 0F 2B			sta PUTCHAR_008E.V
  4266 29A9 AD DB 2A			lda PLAYER1.Y
  4267 29AC 8D 0E 2B			sta PUTCHAR_008E.Y
  4268 29AF AD DA 2A			lda PLAYER1.X
  4269 29B2 8D 0D 2B			sta PUTCHAR_008E.X
  4270 29B5 20 99 11			jsr PUTCHAR_008E
  4271 29B8			@exit
  4272 					.ifdef @new
  4273 					lda <@VarData
  4274 					sta :ztmp
  4275 					lda >@VarData
  4276 					ldy #@VarDataSize-1
  4277 					jmp @FreeMem
  4278 					els
  4279 29B8 60				rts						; ret
  4280 					eif
  4281 				.endl
  4282
  4283 29B9			.local	MAINLOOP					; PROCEDURE
  4284
  4285 				; optimize OK (main.pas), line = 77
  4286
  4287 29B9 A9 FF			lda #$FF
  4288 29BB 85 5A			sta ALIVE
  4289
  4290 				; optimize FAIL ('INITARENA', main.pas), line = 79
  4291
  4292 29BD 20 2B 27			jsr INITARENA
  4293 29C0 20 76 29			jsr STARTSCREEN
  4294
  4295 				; --- RepeatUntilProlog
  4296 29C3			l_0FB2
  4297
  4298 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 82
  4299
  4300 29C3 20 23 11			jsr SYSTEM.PAUSE_006B
  4301
  4302 				; optimize OK (main.pas), line = 83
  4303
  4304 29C6 AD BB 2A			lda PLAYER1
  4305 29C9 8D B7 2A			sta PLY
  4306 29CC AD BC 2A			lda PLAYER1+1
  4307 29CF 8D B8 2A			sta PLY+1
  4308 29D2 20 40 28			jsr PLAYERMOVE
  4309
  4310 				; optimize OK (main.pas), line = 85
  4311
  4312 29D5 A9 02			lda #$02
  4313 29D7 8D D4 2A			sta SYSTEM.PAUSE_006C.N
  4314 29DA A9 00			lda #$00
  4315 29DC 8D D5 2A			sta SYSTEM.PAUSE_006C.N+1
  4316 29DF 20 2A 11			jsr SYSTEM.PAUSE_006C
  4317
  4318 				; optimize OK (main.pas), line = 86
  4319
  4320 29E2 AD BD 2A			lda PLAYER2
  4321 29E5 8D B7 2A			sta PLY
  4322 29E8 AD BE 2A			lda PLAYER2+1
  4323 29EB 8D B8 2A			sta PLY+1
  4324 29EE 20 40 28			jsr PLAYERMOVE
  4325
  4326 				; optimize OK (main.pas), line = 87
  4327
  4328 29F1 AD BF 2A			lda PLAYER3
  4329 29F4 8D B7 2A			sta PLY
  4330 29F7 AD C0 2A			lda PLAYER3+1
  4331 29FA 8D B8 2A			sta PLY+1
  4332 29FD 20 40 28			jsr PLAYERMOVE
  4333
  4334 				; optimize OK (main.pas), line = 88
  4335
  4336 2A00 AD C1 2A			lda PLAYER4
  4337 2A03 8D B7 2A			sta PLY
  4338 2A06 AD C2 2A			lda PLAYER4+1
  4339 2A09 8D B8 2A			sta PLY+1
  4340 2A0C 20 40 28			jsr PLAYERMOVE
  4341
  4342 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 89
  4343
  4344 2A0F 20 F7 12			jsr ANIMATEOBSTACLES
  4345
  4346 				; optimize OK (main.pas), line = 90
  4347
  4348 2A12 A5 5A			lda ALIVE
  4349 2A14 F0 04			jeq l_0FB2x
  4350 2A16 C9 FF			cmp #$FF
  4351 2A18 D0 A9			jne l_0FB2
  4352 2A1A			l_0FB2x
  4353
  4354 				; optimize OK (main.pas), line = 92
  4355
  4356 2A1A AD E1 2A			lda PLAYER1.ISALIVE
  4357 2A1D F0 03			jeq l_0FF3
  4358 2A1F EE E0 2A			inc PLAYER1.SCORE
  4359 2A22			l_0FF3
  4360
  4361 				; optimize OK (main.pas), line = 93
  4362
  4363 2A22 AD E9 2A			lda PLAYER2.ISALIVE
  4364 2A25 F0 03			jeq l_1006
  4365 2A27 EE E8 2A			inc PLAYER2.SCORE
  4366 2A2A			l_1006
  4367
  4368 				; optimize OK (main.pas), line = 94
  4369
  4370 2A2A AD F1 2A			lda PLAYER3.ISALIVE
  4371 2A2D F0 03			jeq l_1019
  4372 2A2F EE F0 2A			inc PLAYER3.SCORE
  4373 2A32			l_1019
  4374
  4375 				; optimize OK (main.pas), line = 95
  4376
  4377 2A32 AD F9 2A			lda PLAYER4.ISALIVE
  4378 2A35 F0 03			jeq l_102C
  4379 2A37 EE F8 2A			inc PLAYER4.SCORE
  4380 2A3A			l_102C
  4381
  4382 				; optimize OK (main.pas), line = 97
  4383
  4384 2A3A A9 64			lda #$64
  4385 2A3C 8D D4 2A			sta SYSTEM.PAUSE_006C.N
  4386 2A3F A9 00			lda #$00
  4387 2A41 8D D5 2A			sta SYSTEM.PAUSE_006C.N+1
  4388 2A44 20 2A 11			jsr SYSTEM.PAUSE_006C
  4389 2A47			@exit
  4390 					.ifdef @new
  4391 					lda <@VarData
  4392 					sta :ztmp
  4393 					lda >@VarData
  4394 					ldy #@VarDataSize-1
  4395 					jmp @FreeMem
  4396 					els
  4397 2A47 60				rts						; ret
  4398 					eif
  4399 				.endl
  4400 2A48			l_0007
  4401
  4402 				; --- RepeatUntilProlog
  4403 2A48			l_1037
  4404
  4405 				; optimize FAIL ('INITSCORE', main.pas), line = 104
  4406
  4407 2A48 20 1C 27			jsr INITSCORE
  4408 2A4B A9 01			lda #$01
  4409 2A4D 8D D8 2A			sta LEVEL
  4410
  4411 				; optimize OK (main.pas), line = 106
  4412
  4413 2A50 A9 00			lda #$00
  4414 2A52 8D D9 2A			sta GAMEOVER
  4415
  4416 				; --- RepeatUntilProlog
  4417 2A55			l_1041
  4418
  4419 				; optimize FAIL ('MAINLOOP', main.pas), line = 108
  4420
  4421 2A55 20 B9 29			jsr MAINLOOP
  4422
  4423 				; optimize FAIL (0, main.pas), line = 109
  4424
  4425 2A58 EE D8 2A			inc LEVEL
  4426 2A5B AD D8 2A			lda LEVEL
  4427 2A5E C9 08			cmp #$08
  4428 2A60 D0 05			jne l_1058
  4429 2A62 A9 05			lda #$05
  4430 2A64 8D D8 2A			sta LEVEL
  4431 2A67			l_1058
  4432
  4433 				; optimize OK (main.pas), line = 110
  4434
  4435 2A67 AD E0 2A			lda PLAYER1.SCORE
  4436 2A6A C9 39			cmp #$39
  4437 2A6C D0 05			jne l_1071
  4438 2A6E A9 01			lda #$01
  4439 2A70 8D D9 2A			sta GAMEOVER
  4440 2A73			l_1071
  4441
  4442 				; optimize OK (main.pas), line = 111
  4443
  4444 2A73 AD E8 2A			lda PLAYER2.SCORE
  4445 2A76 C9 39			cmp #$39
  4446 2A78 D0 05			jne l_108A
  4447 2A7A A9 01			lda #$01
  4448 2A7C 8D D9 2A			sta GAMEOVER
  4449 2A7F			l_108A
  4450
  4451 				; optimize OK (main.pas), line = 112
  4452
  4453 2A7F AD F0 2A			lda PLAYER3.SCORE
  4454 2A82 C9 39			cmp #$39
  4455 2A84 D0 05			jne l_10A3
  4456 2A86 A9 01			lda #$01
  4457 2A88 8D D9 2A			sta GAMEOVER
  4458 2A8B			l_10A3
  4459
  4460 				; optimize OK (main.pas), line = 113
  4461
  4462 2A8B AD F8 2A			lda PLAYER4.SCORE
  4463 2A8E C9 39			cmp #$39
  4464 2A90 D0 05			jne l_10BC
  4465 2A92 A9 01			lda #$01
  4466 2A94 8D D9 2A			sta GAMEOVER
  4467 2A97			l_10BC
  4468
  4469 				; optimize OK (main.pas), line = 114
  4470
  4471 2A97 AD D9 2A			lda GAMEOVER
  4472 2A9A F0 B9			jeq l_1041
  4473
  4474 				; optimize FAIL ('SHOWSCORE', main.pas), line = 116
  4475
  4476 2A9C 20 E9 11			jsr SHOWSCORE
  4477
  4478 				; optimize OK (main.pas), line = 118
  4479
  4480 2A9F A9 C8			lda #$C8
  4481 2AA1 8D D4 2A			sta SYSTEM.PAUSE_006C.N
  4482 2AA4 A9 00			lda #$00
  4483 2AA6 8D D5 2A			sta SYSTEM.PAUSE_006C.N+1
  4484 2AA9 20 2A 11			jsr SYSTEM.PAUSE_006C
  4485
  4486 				; optimize OK (main.pas), line = 119
  4487
  4488 2AAC 4C 48 2A			jmp l_1037
  4489
  4490 				; ------------------------------------------------------------
  4491
  4492 = 0800			ATTRIBUTE_ADDR	= $0800
  4493 = 0C00			SCREEN_ADDR	= $0C00
  4494 = 001F			BACKGROUND_COLOUR	= $1F
  4495 = 0000			BOREDER_COLOUR	= $00
  4496 = 0009			VICTORIES	= $09
  4497 = 0005			LOOK_AHEAD	= $05
  4498 = 007E			TRASH	= $7E
  4499 = 0020			EMPTY	= $20
  4500 = 00A0			WALL	= $A0
  4501 = 0041			WALL_COLOUR	= $41
  4502 = 0030			ZERO	= $30
  4503 = 0056			OBSTACLE_1	= $56
  4504 = 005B			OBSTACLE_2	= $5B
  4505 = 0035			OBST_COLOUR	= $35
  4506 = 0007			OBST_QUANTITY	= $07
  4507 = 0051			PLY_HEAD	= $51
  4508 = 002A			PLY_CRASH	= $2A
  4509 = 0057			PLY_BUSTED	= $57
  4510 = 0042			PLY_TAIL_UD	= $42
  4511 = 0040			PLY_TAIL_LR	= $40
  4512 = 007D			PLY_TAIL_RD	= $7D
  4513 = 006E			PLY_TAIL_RU	= $6E
  4514 = 006D			PLY_TAIL_LD	= $6D
  4515 = 0070			PLY_TAIL_LU	= $70
  4516 = 0062			PLY1_COLOUR	= $62
  4517 = 005D			PLY2_COLOUR	= $5D
  4518 = 0071			PLY3_COLOUR	= $71
  4519 = 0055			PLY4_COLOUR	= $55
  4520 = 0000			PLY_CTRL	= $00
  4521 = 0001			AI_STRAIGHT	= $01
  4522 = 0002			AI_SAPPER	= $02
  4523 = 0003			AI_BULLY	= $03
  4524 = 0004			AI_MIRROR	= $04
  4525 = 0001			JOY_UP	= $01
  4526 = 0002			JOY_DOWN	= $02
  4527 = 0004			JOY_LEFT	= $04
  4528 = 0008			JOY_RIGHT	= $08
  4529 = 0040			JOY_FIRE	= $40
  4530 = 0002			JOY_SELECT_1	= $02
  4531 = 0004			JOY_SELECT_2	= $04
  4532 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4533 2AAF			.var MUL40	= adr.MUL40 .word
  4534 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4535 2AAF			.var DIRECTION	= adr.DIRECTION .word
  4536 = FD30			KEYSCAN	= $FD30
  4537 = FF08			JOY	= $FF08
  4538 = FF15			BACKGROUND	= $FF15
  4539 = FF19			BOREDER	= $FF19
  4540 = 0058			T0B	= $58
  4541 = 0059			I0B	= $59
  4542 = 005A			ALIVE	= $5A
  4543 = 005B			NEWDIR	= $5B
  4544 = 005C			AVAILDIR	= $5C
  4545 = 005D			T0W	= $5D
  4546 = 005F			adr.PLY	= $5F
  4547 2AAF			.var PLY	= adr.PLY .word
  4548 = 2AC8			PLY.X	= DATAORIGIN+$0000
  4549 = 2AC9			PLY.Y	= DATAORIGIN+$0001
  4550 = 2ACA			PLY.HEAD	= DATAORIGIN+$0002
  4551 = 2ACB			PLY.COLOUR	= DATAORIGIN+$0003
  4552 = 2ACC			PLY.DIR	= DATAORIGIN+$0004
  4553 = 2ACD			PLY.BRAIN	= DATAORIGIN+$0005
  4554 = 2ACE			PLY.SCORE	= DATAORIGIN+$0006
  4555 = 2ACF			PLY.ISALIVE	= DATAORIGIN+$0007
  4556 = 0061			adr.TMPPLY	= $61
  4557 2AAF			.var TMPPLY	= adr.TMPPLY .word
  4558 = 2AC8			TMPPLY.X	= DATAORIGIN+$0000
  4559 = 2AC9			TMPPLY.Y	= DATAORIGIN+$0001
  4560 = 2ACA			TMPPLY.HEAD	= DATAORIGIN+$0002
  4561 = 2ACB			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4562 = 2ACC			TMPPLY.DIR	= DATAORIGIN+$0004
  4563 = 2ACD			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4564 = 2ACE			TMPPLY.SCORE	= DATAORIGIN+$0006
  4565 = 2ACF			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4566 = 0063			JOYSTATUS	= $63
  4567 = 2AD8			LEVEL	= DATAORIGIN+$0010
  4568 = 2AD9			GAMEOVER	= DATAORIGIN+$0011
  4569 = 2ADA			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4570 2AAF			.var PLAYER1	= adr.PLAYER1 .word
  4571 = 2ADA			PLAYER1.X	= DATAORIGIN+$0012
  4572 = 2ADB			PLAYER1.Y	= DATAORIGIN+$0013
  4573 = 2ADC			PLAYER1.HEAD	= DATAORIGIN+$0014
  4574 = 2ADD			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4575 = 2ADE			PLAYER1.DIR	= DATAORIGIN+$0016
  4576 = 2ADF			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4577 = 2AE0			PLAYER1.SCORE	= DATAORIGIN+$0018
  4578 = 2AE1			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4579 = 2AE2			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4580 2AAF			.var PLAYER2	= adr.PLAYER2 .word
  4581 = 2AE2			PLAYER2.X	= DATAORIGIN+$001A
  4582 = 2AE3			PLAYER2.Y	= DATAORIGIN+$001B
  4583 = 2AE4			PLAYER2.HEAD	= DATAORIGIN+$001C
  4584 = 2AE5			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4585 = 2AE6			PLAYER2.DIR	= DATAORIGIN+$001E
  4586 = 2AE7			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4587 = 2AE8			PLAYER2.SCORE	= DATAORIGIN+$0020
  4588 = 2AE9			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4589 = 2AEA			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4590 2AAF			.var PLAYER3	= adr.PLAYER3 .word
  4591 = 2AEA			PLAYER3.X	= DATAORIGIN+$0022
  4592 = 2AEB			PLAYER3.Y	= DATAORIGIN+$0023
  4593 = 2AEC			PLAYER3.HEAD	= DATAORIGIN+$0024
  4594 = 2AED			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4595 = 2AEE			PLAYER3.DIR	= DATAORIGIN+$0026
  4596 = 2AEF			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4597 = 2AF0			PLAYER3.SCORE	= DATAORIGIN+$0028
  4598 = 2AF1			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4599 = 2AF2			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4600 2AAF			.var PLAYER4	= adr.PLAYER4 .word
  4601 = 2AF2			PLAYER4.X	= DATAORIGIN+$002A
  4602 = 2AF3			PLAYER4.Y	= DATAORIGIN+$002B
  4603 = 2AF4			PLAYER4.HEAD	= DATAORIGIN+$002C
  4604 = 2AF5			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4605 = 2AF6			PLAYER4.DIR	= DATAORIGIN+$002E
  4606 = 2AF7			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4607 = 2AF8			PLAYER4.SCORE	= DATAORIGIN+$0030
  4608 = 2AF9			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4609 = 2AFA			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4610 2AAF			.var OBSTACLES	= adr.OBSTACLES .word
  4611 2AAF			@exit
  4612
  4613 2AAF A2 00		@halt	ldx #$00
  4614 2AB1 9A				txs
  4615
  4616 2AB2 60				rts
  4617
  4618 				; ------------------------------------------------------------
  4619
  4620 				; ------------------------------------------------------------
  4621
  4622 2AB3			.local	@DEFINES
  4623 2AB3			C4P
  4624 				.endl
  4625
  4626 2AB3			.local	@RESOURCE
  4627 				.endl
  4628
  4629 = 2AB3 0E 10		MUL40
  4629 = 2AB5 40 10		DIRECTION
  4629 = 2AB7 5F 00		PLY
  4629 = 2AB9 61 00		TMPPLY
  4629 = 2ABB DA 2A		PLAYER1
  4629 = 2ABD E2 2A		PLAYER2
  4629 = 2ABF EA 2A		PLAYER3
  4629 = 2AC1 F2 2A		PLAYER4
  4629 = 2AC3 FA 2A		OBSTACLES
  4629 				.endl							; MAIN
  4630
  4631 				; ------------------------------------------------------------
  4632 				; ------------------------------------------------------------
  4633
  4634 				.macro	UNITINITIALIZATION
  4635 				
  4636 					.ifdef MAIN.SYSTEM.@UnitInit
  4637 					jsr MAIN.SYSTEM.@UnitInit
  4638 					eif
  4639 				.endm
  4640
  4641 				; ------------------------------------------------------------
  4642
  4643 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4644 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4644 				SYSTEM: $10D5..$1177
  4645 					eif
  4646
  4647 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4647 				CODE: $100E..$2AB2
  4648
  4649 				; ------------------------------------------------------------
  4650
  4651 2AC5				.align $04
  4652
  4653 2AC8			DATAORIGIN
  4654 2AC8 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4655
  4656 = 0006			VARINITSIZE	= *-DATAORIGIN
  4657 = 0066			VARDATASIZE	= 102
  4658
  4659 = 2B2E			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4660
  4661 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4661 				DATA: $2AC8..$2B2E
  4662
  4663 				; ------------------------------------------------------------
  4664
  4665 				.macro	STATICDATA
  4666 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4667 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4668 				.by  $C0 $03 $01 $02 $04 $08
  4669 				.endm
  4670
  4671 					end
