mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E C9 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0062			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AE6			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 9E			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D 48 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 48 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C 9D 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D EB 2A		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD EB 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AEB			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AEB			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 110C A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1112			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1112 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 1113			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 1113 AD EC 2A		loop  lda n
   325 1116 0D ED 2A		  ora n+1
   326 1119 F0 14		  beq stop
   327
   328 111B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1121 AD EC 2A D0 03 CE +   dew n
   331
   332 112C 4C 13 11		  jmp loop
   333 112F			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AEC			N	= DATAORIGIN+$000C
   339
   340 = 2AEC			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 112F			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 112F 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1130			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1130 8D EE 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 1133 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 1136 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1139 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 113C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 113F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1142 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 1145 A8			  tay
   368
   369 1146 AD EE 2A		  lda range
   370 1149 F0 08		  beq stop
   371
   372 114B 85 0C		  sta ecx
   373 114D 84 04		  sty eax
   374
   375 114F 20 8C 10		  jsr imulCL
   376 1152 A8			  tay
   377
   378 1153 8C EF 2A		stop  sty Result
   379
   380 1156			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 1156 E8				inx
   388 1157 AD EF 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2AEE			RANGE	= DATAORIGIN+$000E
   401 = 2AEF			RESULT	= DATAORIGIN+$000F
   402
   403 = 2AEE			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 115C 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2AE0			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2AE2			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AE4			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 115D			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 115D			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AE5			FILEMODE	= DATAORIGIN+$0005
   468 = 2AE6			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AE7			IORESULT	= DATAORIGIN+$0007
   470 = 2AE8			EOLN	= DATAORIGIN+$0008
   471 = 2AE9			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 115D C0 02		PALETTE
   473 = 115F 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1161			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1161 AD 23 2B			lda Y
   480 1164 0A				asl @
   481 1165 A8				tay
   482 1166 B9 0E 10			lda adr.MUL40,y
   483 1169 18 6D 22 2B			add X
   484 116D 85 5D			sta T0W
   485 116F B9 0F 10			lda adr.MUL40+1,y
   486 1172 69 0C			adc #$0C
   487 1174 85 5E			sta T0W+1
   488 1176 A4 5E			ldy T0W+1
   489 1178 84 11			sty :bp+1
   490 117A A4 5D			ldy T0W
   491 117C AD 24 2B			lda V
   492 117F 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B22			X	= DATAORIGIN+$0042
   497 = 2B23			Y	= DATAORIGIN+$0043
   498 = 2B24			V	= DATAORIGIN+$0044
   499
   500 = 2B22			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1181			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1181 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1182			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1182 AD 26 2B			lda Y
   520 1185 0A				asl @
   521 1186 A8				tay
   522 1187 B9 0E 10			lda adr.MUL40,y
   523 118A 18 6D 25 2B			add X
   524 118E 85 5D			sta T0W
   525 1190 B9 0F 10			lda adr.MUL40+1,y
   526 1193 69 08			adc #$08
   527 1195 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 1197 85 11			sta :bp+1
   532 1199 A4 5D			ldy T0W
   533 119B AD 28 2B			lda C
   534 119E 91 10			sta (:bp),y
   535 11A0 A5 5E			lda T0W+1
   536 11A2 18 69 04			add #$04
   537 11A5 85 11			sta :bp+1
   538 11A7 AD 27 2B			lda V
   539 11AA 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B25			X	= DATAORIGIN+$0045
   544 = 2B26			Y	= DATAORIGIN+$0046
   545 = 2B27			V	= DATAORIGIN+$0047
   546 = 2B28			C	= DATAORIGIN+$0048
   547
   548 = 2B25			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11AC			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11AC 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11AD			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11AD AD 2A 2B			lda Y
   568 11B0 0A				asl @
   569 11B1 A8				tay
   570 11B2 B9 0E 10			lda adr.MUL40,y
   571 11B5 18 6D 29 2B			add X
   572 11B9 85 5D			sta T0W
   573 11BB B9 0F 10			lda adr.MUL40+1,y
   574 11BE 69 0C			adc #$0C
   575 11C0 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11C2 85 11			sta :bp+1
   580 11C4 A4 5D			ldy T0W
   581 11C6 B1 10			lda (:bp),y
   582 11C8 8D 2B 2B			sta RESULT
   583 11CB			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11CB E8				inx
   591 11CC AD 2B 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B29			X	= DATAORIGIN+$0049
   604 = 2B2A			Y	= DATAORIGIN+$004A
   605 = 2B2B			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B29			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11D1 60				rts						; ret
   611 				.endl
   612
   613 11D2			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11D2 AD F9 2A			lda PLAYER1.ISALIVE
   618 11D5 F0 19			jeq l_00E2
   619 11D7 AD F5 2A			lda PLAYER1.COLOUR
   620 11DA 8D 28 2B			sta PUTCHAR_008E.C
   621 11DD AD F8 2A			lda PLAYER1.SCORE
   622 11E0 8D 27 2B			sta PUTCHAR_008E.V
   623 11E3 A9 00			lda #$00
   624 11E5 8D 26 2B			sta PUTCHAR_008E.Y
   625 11E8 A9 1E			lda #$1E
   626 11EA 8D 25 2B			sta PUTCHAR_008E.X
   627 11ED 20 82 11			jsr PUTCHAR_008E
   628 11F0			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 11F0 AD 01 2B			lda PLAYER2.ISALIVE
   633 11F3 F0 19			jeq l_00FA
   634 11F5 AD FD 2A			lda PLAYER2.COLOUR
   635 11F8 8D 28 2B			sta PUTCHAR_008E.C
   636 11FB AD 00 2B			lda PLAYER2.SCORE
   637 11FE 8D 27 2B			sta PUTCHAR_008E.V
   638 1201 A9 00			lda #$00
   639 1203 8D 26 2B			sta PUTCHAR_008E.Y
   640 1206 A9 20			lda #$20
   641 1208 8D 25 2B			sta PUTCHAR_008E.X
   642 120B 20 82 11			jsr PUTCHAR_008E
   643 120E			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 120E AD 09 2B			lda PLAYER3.ISALIVE
   648 1211 F0 19			jeq l_0112
   649 1213 AD 05 2B			lda PLAYER3.COLOUR
   650 1216 8D 28 2B			sta PUTCHAR_008E.C
   651 1219 AD 08 2B			lda PLAYER3.SCORE
   652 121C 8D 27 2B			sta PUTCHAR_008E.V
   653 121F A9 00			lda #$00
   654 1221 8D 26 2B			sta PUTCHAR_008E.Y
   655 1224 A9 22			lda #$22
   656 1226 8D 25 2B			sta PUTCHAR_008E.X
   657 1229 20 82 11			jsr PUTCHAR_008E
   658 122C			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 122C AD 11 2B			lda PLAYER4.ISALIVE
   663 122F F0 19			jeq l_012A
   664 1231 AD 0D 2B			lda PLAYER4.COLOUR
   665 1234 8D 28 2B			sta PUTCHAR_008E.C
   666 1237 AD 10 2B			lda PLAYER4.SCORE
   667 123A 8D 27 2B			sta PUTCHAR_008E.V
   668 123D A9 00			lda #$00
   669 123F 8D 26 2B			sta PUTCHAR_008E.Y
   670 1242 A9 24			lda #$24
   671 1244 8D 25 2B			sta PUTCHAR_008E.X
   672 1247 20 82 11			jsr PUTCHAR_008E
   673 124A			l_012A
   674 124A			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 124A 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 124B			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 124B AD F9 2A			lda PLAYER1.ISALIVE
   691 124E F0 03			jeq l_0146
   692 1250 EE F8 2A			inc PLAYER1.SCORE
   693 1253			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 1253 AD 01 2B			lda PLAYER2.ISALIVE
   698 1256 F0 03			jeq l_0159
   699 1258 EE 00 2B			inc PLAYER2.SCORE
   700 125B			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 125B AD 09 2B			lda PLAYER3.ISALIVE
   705 125E F0 03			jeq l_016C
   706 1260 EE 08 2B			inc PLAYER3.SCORE
   707 1263			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 1263 AD 11 2B			lda PLAYER4.ISALIVE
   712 1266 F0 03			jeq l_017F
   713 1268 EE 10 2B			inc PLAYER4.SCORE
   714 126B			l_017F
   715 126B			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 126B 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 126C			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 126C A9 00			lda #$00
   732 126E 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1270 AC D0 2A 84 12 AC + 	mwy PLY :bp2
   737 127A A0 01			ldy #PLY.Y-DATAORIGIN
   738 127C B1 12			lda (:bp2),y
   739 127E 0A				asl @
   740 127F A8				tay
   741 1280 A9 00			lda #$00
   742 1282 18 79 0E 10			add adr.MUL40,y
   743 1286 85 21			sta :STACKORIGIN+9
   744 1288 A9 0C			lda #$0C
   745 128A 79 0F 10			adc adr.MUL40+1,y
   746 128D 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 128F A0 00			ldy #PLY.X-DATAORIGIN
   748 1291 A5 21			lda :STACKORIGIN+9
   749 1293 18 71 12			add (:bp2),y
   750 1296 85 5D			sta T0W
   751 1298 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 129A 69 00			adc #$00
   753 129C 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 129E A5 5D			lda T0W
   758 12A0 38 E9 28			sub #$28
   759 12A3 85 21			sta :STACKORIGIN+9
   760 12A5 A5 5E			lda T0W+1
   761 12A7 E9 00			sbc #$00
   762 12A9 85 11			sta :bp+1
   763 12AB A4 21			ldy :STACKORIGIN+9
   764 12AD B1 10			lda (:bp),y
   765 12AF C9 20			cmp #$20
   766 12B1 D0 06			jne l_01B6
   767 12B3 A5 5C			lda AVAILDIR
   768 12B5 09 01			ora #$01
   769 12B7 85 5C			sta AVAILDIR
   770 12B9			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12B9 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12C1 A0 28			ldy #$28
   776 12C3 B1 12			lda (:bp2),y
   777 12C5 C9 20			cmp #$20
   778 12C7 D0 06			jne l_01D9
   779 12C9 A5 5C			lda AVAILDIR
   780 12CB 09 02			ora #$02
   781 12CD 85 5C			sta AVAILDIR
   782 12CF			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12CF A5 5D			lda T0W
   787 12D1 38 E9 01			sub #$01
   788 12D4 85 21			sta :STACKORIGIN+9
   789 12D6 A5 5E			lda T0W+1
   790 12D8 E9 00			sbc #$00
   791 12DA 85 11			sta :bp+1
   792 12DC A4 21			ldy :STACKORIGIN+9
   793 12DE B1 10			lda (:bp),y
   794 12E0 C9 20			cmp #$20
   795 12E2 D0 06			jne l_01FC
   796 12E4 A5 5C			lda AVAILDIR
   797 12E6 09 04			ora #$04
   798 12E8 85 5C			sta AVAILDIR
   799 12EA			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 12EA A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 12F2 A0 01			ldy #$01
   805 12F4 B1 12			lda (:bp2),y
   806 12F6 C9 20			cmp #$20
   807 12F8 D0 06			jne l_021F
   808 12FA A5 5C			lda AVAILDIR
   809 12FC 09 08			ora #$08
   810 12FE 85 5C			sta AVAILDIR
   811 1300			l_021F
   812 1300			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1300 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1301			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1301 EE 2C 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 1304 AD 2C 2B			lda COUNTER
   833 1307 29 01			and #$01
   834 1309 F0 08			jeq l_024A
   835 130B A9 56			lda #$56
   836 130D 8D 2D 2B			sta OBST
   837 1310 4C 18 13			jmp l_0258
   838 1313			l_024A
   839 1313 A9 5B			lda #$5B
   840 1315 8D 2D 2B			sta OBST
   841 1318			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 1318 A9 07			lda #$07
   846 131A 85 59			sta I0B
   847
   848 131C			l_0265
   849 				; --- ForToDoCondition
   850 131C A5 59			lda I0B
   851 131E 0A				asl @
   852 131F A8				tay
   853 1320 B9 12 2B			lda adr.OBSTACLES,y
   854 1323 85 21			sta :STACKORIGIN+9
   855 1325 B9 13 2B			lda adr.OBSTACLES+1,y
   856 1328 85 11			sta :bp+1
   857 132A A4 21			ldy :STACKORIGIN+9
   858 132C AD 2D 2B			lda OBST
   859 132F 91 10			sta (:bp),y
   860 1331 C6 59			dec I0B
   861 1333 10 E7			jpl l_0265
   862 1335			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B2C			COUNTER	= DATAORIGIN+$004C
   867 = 2B2D			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B2C			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 1335			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 1335 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 1336			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 1336 AD 2F 2B			lda Y
   890 1339 0A				asl @
   891 133A A8				tay
   892 133B AD 2E 2B			lda X
   893 133E 18 79 0E 10			add adr.MUL40,y
   894 1342 8D 30 2B			sta RESULT
   895 1345 A9 0C			lda #$0C
   896 1347 79 0F 10			adc adr.MUL40+1,y
   897 134A 8D 31 2B			sta RESULT+1
   898 134D			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 134D E8				inx
   906 134E AD 30 2B 95 18		mva RESULT :STACKORIGIN,x
   907 1353 AD 31 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B2E			X	= DATAORIGIN+$004E
   920 = 2B2F			Y	= DATAORIGIN+$004F
   921 = 2B30			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B2E			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 1358 60				rts						; ret
   927 				.endl
   928
   929 1359			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1359 A9 07			lda #$07
   934 135B 85 59			sta I0B
   935
   936 135D			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 135D A5 59			lda I0B
   942 135F 0A				asl @
   943 1360 A8				tay
   944 1361 B9 13 2B			lda adr.OBSTACLES+1,y
   945 1364 C9 00			cmp #$00
   946 1366 D0 05			bne @+
   947 1368 B9 12 2B			lda adr.OBSTACLES,y
   948 136B C9 7E			cmp #$7E
   949 136D			@
   950 136D F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 136F B9 12 2B			lda adr.OBSTACLES,y
   955 1372 85 21			sta :STACKORIGIN+9
   956 1374 B9 13 2B			lda adr.OBSTACLES+1,y
   957 1377 85 11			sta :bp+1
   958 1379 A4 21			ldy :STACKORIGIN+9
   959 137B A9 56			lda #$56
   960 137D 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 137F A5 59			lda I0B
   965 1381 0A				asl @
   966 1382 A8				tay
   967 1383 B9 12 2B			lda adr.OBSTACLES,y
   968 1386 38 E9 00			sub #$00
   969 1389 85 21			sta :STACKORIGIN+9
   970 138B B9 13 2B			lda adr.OBSTACLES+1,y
   971 138E E9 04			sbc #$04
   972 1390 85 11			sta :bp+1
   973 1392 A4 21			ldy :STACKORIGIN+9
   974 1394 A9 35			lda #$35
   975 1396 91 10			sta (:bp),y
   976 1398			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 1398 C6 59			dec I0B
   980 139A 10 C1			jpl l_02A6
   981 139C			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 139C			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 139C 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 139D			.local	DRAWPLAYER					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 139D AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1003 13A7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13A9 B1 12			lda (:bp2),y
  1005 13AB C5 5B			cmp NEWDIR
  1006 13AD D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13AF A5 5B			lda NEWDIR
  1011 13B1 29 0C			and #$0C
  1012 13B3 F0 07			jeq l_0311
  1013 13B5 A9 40			lda #$40
  1014 13B7 85 58			sta T0B
  1015 13B9 4C C0 13			jmp l_031F
  1016 13BC			l_0311
  1017 13BC A9 42			lda #$42
  1018 13BE 85 58			sta T0B
  1019 13C0			l_031F
  1020 13C0 4C 33 14			jmp l_032C
  1021 13C3			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13C3 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1026 13CD A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13CF B1 12			lda (:bp2),y
  1028 13D1 29 0A			and #$0A
  1029 13D3 F0 0A			jeq l_0352
  1030 13D5 A5 5B			lda NEWDIR
  1031 13D7 29 05			and #$05
  1032 13D9 F0 04			jeq l_0352
  1033 13DB A9 7D			lda #$7D
  1034 13DD 85 58			sta T0B
  1035 13DF			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13DF AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1040 13E9 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 13EB B1 12			lda (:bp2),y
  1042 13ED 29 09			and #$09
  1043 13EF F0 0A			jeq l_037F
  1044 13F1 A5 5B			lda NEWDIR
  1045 13F3 29 06			and #$06
  1046 13F5 F0 04			jeq l_037F
  1047 13F7 A9 6E			lda #$6E
  1048 13F9 85 58			sta T0B
  1049 13FB			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 13FB AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1054 1405 A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 1407 B1 12			lda (:bp2),y
  1056 1409 29 06			and #$06
  1057 140B F0 0A			jeq l_03AC
  1058 140D A5 5B			lda NEWDIR
  1059 140F 29 09			and #$09
  1060 1411 F0 04			jeq l_03AC
  1061 1413 A9 6D			lda #$6D
  1062 1415 85 58			sta T0B
  1063 1417			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 1417 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1068 1421 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 1423 B1 12			lda (:bp2),y
  1070 1425 29 05			and #$05
  1071 1427 F0 0A			jeq l_03D9
  1072 1429 A5 5B			lda NEWDIR
  1073 142B 29 0A			and #$0A
  1074 142D F0 04			jeq l_03D9
  1075 142F A9 70			lda #$70
  1076 1431 85 58			sta T0B
  1077 1433			l_03D9
  1078 1433			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 99
  1081
  1082 1433 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1083 143D A0 00			ldy #PLY.X-DATAORIGIN
  1084 143F B1 12			lda (:bp2),y
  1085 1441 8D 29 2B			sta GETCHAR.X
  1086 1444 A0 01			ldy #PLY.Y-DATAORIGIN
  1087 1446 B1 12			lda (:bp2),y
  1088 1448 8D 2A 2B			sta GETCHAR.Y
  1089 144B 20 AD 11			jsr GETCHAR
  1090 144E CA				dex
  1091 144F B5 19			lda :STACKORIGIN+1,x
  1092 1451 C9 2A			cmp #$2A
  1093 1453 F0 20			jeq l_03F6
  1094 1455			@
  1095 1455 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1096 145F A0 00			ldy #PLY.X-DATAORIGIN
  1097 1461 B1 12			lda (:bp2),y
  1098 1463 8D 22 2B			sta PUTCHAR_0072.X
  1099 1466 A0 01			ldy #PLY.Y-DATAORIGIN
  1100 1468 B1 12			lda (:bp2),y
  1101 146A 8D 23 2B			sta PUTCHAR_0072.Y
  1102 146D A5 58			lda T0B
  1103 146F 8D 24 2B			sta PUTCHAR_0072.V
  1104 1472 20 61 11			jsr PUTCHAR_0072
  1105 1475			l_03F6
  1106
  1107 				; optimize OK (tools.inc), line = 101
  1108
  1109 1475 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1110 147F A0 04			ldy #PLY.DIR-DATAORIGIN
  1111 1481 A5 5B			lda NEWDIR
  1112 1483 91 12			sta (:bp2),y
  1113
  1114 				; optimize OK (tools.inc), line = 103
  1115
  1116 1485 A5 5B			lda NEWDIR
  1117 1487 8D 32 2B			sta @CASETMP_0003
  1118 148A C9 01			cmp #$01
  1119 148C D0 16			jne l_0414
  1120 148E			@
  1121
  1122 				; optimize OK (tools.inc), line = 104
  1123
  1124 148E AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1125 1498 A0 01			ldy #PLY.Y-DATAORIGIN
  1126 149A B1 12			lda (:bp2),y
  1127 149C 38 E9 01			sub #$01
  1128 149F 91 12			sta (:bp2),y
  1129
  1130 14A1 4C EF 14			jmp a_0003
  1131 14A4			l_0414
  1132 14A4 C9 02			cmp #$02
  1133 14A6 D0 16			jne l_041E
  1134 14A8			@
  1135
  1136 				; optimize OK (tools.inc), line = 105
  1137
  1138 14A8 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1139 14B2 A0 01			ldy #PLY.Y-DATAORIGIN
  1140 14B4 B1 12			lda (:bp2),y
  1141 14B6 18 69 01			add #$01
  1142 14B9 91 12			sta (:bp2),y
  1143
  1144 14BB 4C EF 14			jmp a_0003
  1145 14BE			l_041E
  1146 14BE C9 04			cmp #$04
  1147 14C0 D0 16			jne l_0428
  1148 14C2			@
  1149
  1150 				; optimize OK (tools.inc), line = 106
  1151
  1152 14C2 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1153 14CC A0 00			ldy #PLY.X-DATAORIGIN
  1154 14CE B1 12			lda (:bp2),y
  1155 14D0 38 E9 01			sub #$01
  1156 14D3 91 12			sta (:bp2),y
  1157
  1158 14D5 4C EF 14			jmp a_0003
  1159 14D8			l_0428
  1160 14D8 C9 08			cmp #$08
  1161 14DA D0 13			jne l_0432
  1162 14DC			@
  1163
  1164 				; optimize OK (tools.inc), line = 107
  1165
  1166 14DC AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1167 14E6 A0 00			ldy #PLY.X-DATAORIGIN
  1168 14E8 B1 12			lda (:bp2),y
  1169 14EA 18 69 01			add #$01
  1170 14ED 91 12			sta (:bp2),y
  1171
  1172 14EF			l_0432
  1173 14EF			a_0003
  1174
  1175 				; optimize OK (tools.inc), line = 110
  1176
  1177 14EF AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1178 14F9 A0 00			ldy #PLY.X-DATAORIGIN
  1179 14FB B1 12			lda (:bp2),y
  1180 14FD 8D 25 2B			sta PUTCHAR_008E.X
  1181 1500 A0 01			ldy #PLY.Y-DATAORIGIN
  1182 1502 B1 12			lda (:bp2),y
  1183 1504 8D 26 2B			sta PUTCHAR_008E.Y
  1184 1507 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1185 1509 B1 12			lda (:bp2),y
  1186 150B 8D 27 2B			sta PUTCHAR_008E.V
  1187 150E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1188 1510 B1 12			lda (:bp2),y
  1189 1512 8D 28 2B			sta PUTCHAR_008E.C
  1190 1515 20 82 11			jsr PUTCHAR_008E
  1191
  1192 				; ------------------------------------------------------------
  1193
  1194 = 2B32			@CASETMP_0003	= DATAORIGIN+$0052
  1195
  1196 = 2B32			@VarData	= @CASETMP_0003
  1197 = 0001			@VarDataSize	= 1
  1198
  1199 1518			@exit
  1200 					.ifdef @new
  1201 					lda <@VarData
  1202 					sta :ztmp
  1203 					lda >@VarData
  1204 					ldy #@VarDataSize-1
  1205 					jmp @FreeMem
  1206 					els
  1207 1518 60				rts						; ret
  1208 					eif
  1209 				.endl
  1210
  1211 1519			.local	DRAWBUSTEDPLAYER				; PROCEDURE
  1212
  1213 				; optimize OK (tools.inc), line = 117
  1214
  1215 1519 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1216 1523 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1217 1525 A9 00			lda #$00
  1218 1527 91 12			sta (:bp2),y
  1219 1529 C6 5A			dec ALIVE
  1220
  1221 				; optimize OK (tools.inc), line = 118
  1222
  1223 152B A0 00			ldy #PLY.X-DATAORIGIN
  1224 152D B1 12			lda (:bp2),y
  1225 152F 8D 25 2B			sta PUTCHAR_008E.X
  1226 1532 A0 01			ldy #PLY.Y-DATAORIGIN
  1227 1534 B1 12			lda (:bp2),y
  1228 1536 8D 26 2B			sta PUTCHAR_008E.Y
  1229 1539 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1230 153B B1 12			lda (:bp2),y
  1231 153D 18 69 80			add #$80
  1232 1540 8D 28 2B			sta PUTCHAR_008E.C
  1233 1543 A9 57			lda #$57
  1234 1545 8D 27 2B			sta PUTCHAR_008E.V
  1235 1548 20 82 11			jsr PUTCHAR_008E
  1236 154B			@exit
  1237 					.ifdef @new
  1238 					lda <@VarData
  1239 					sta :ztmp
  1240 					lda >@VarData
  1241 					ldy #@VarDataSize-1
  1242 					jmp @FreeMem
  1243 					els
  1244 154B 60				rts						; ret
  1245 					eif
  1246 				.endl
  1247
  1248 154C			.local	CHECKJOYSTATUS					; PROCEDURE
  1249
  1250 				; optimize OK (tools.inc), line = 125
  1251
  1252 154C A9 02			lda #$02
  1253 154E 8D 08 FF			sta JOY
  1254 1551 A9 FF			lda #$FF
  1255 1553 8D 30 FD			sta KEYSCAN
  1256
  1257 				; optimize OK (tools.inc), line = 126
  1258
  1259 1556 AD 08 FF			lda JOY
  1260 1559 49 FF			eor #$FF
  1261 155B 85 63			sta JOYSTATUS
  1262 155D			@exit
  1263 					.ifdef @new
  1264 					lda <@VarData
  1265 					sta :ztmp
  1266 					lda >@VarData
  1267 					ldy #@VarDataSize-1
  1268 					jmp @FreeMem
  1269 					els
  1270 155D 60				rts						; ret
  1271 					eif
  1272 				.endl
  1273
  1274 155E			.local	SETPLAYER					; PROCEDURE
  1275
  1276 				; optimize OK (tools.inc), line = 133
  1277
  1278 155E AD 33 2B			lda P
  1279 1561 8D D0 2A			sta PLY
  1280 1564 85 12			sta :bp2
  1281 1566 AD 34 2B			lda P+1
  1282 1569 8D D1 2A			sta PLY+1
  1283 156C 85 13			sta :bp2+1
  1284 				; optimize OK (tools.inc), line = 134
  1285 156E A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1286 1570 AD 38 2B			lda BRAIN
  1287 1573 91 12			sta (:bp2),y
  1288 1575 A0 00			ldy #PLY.X-DATAORIGIN
  1289 1577 AD 35 2B			lda X
  1290 157A 91 12			sta (:bp2),y
  1291 157C A0 01			ldy #PLY.Y-DATAORIGIN
  1292 157E AD 36 2B			lda Y
  1293 1581 91 12			sta (:bp2),y
  1294 1583 A0 04			ldy #PLY.DIR-DATAORIGIN
  1295 1585 AD 37 2B			lda DIR
  1296 1588 91 12			sta (:bp2),y
  1297
  1298 				; optimize OK (tools.inc), line = 135
  1299
  1300 158A A0 02			ldy #PLY.HEAD-DATAORIGIN
  1301 158C AD 39 2B			lda HEAD
  1302 158F 91 12			sta (:bp2),y
  1303 1591 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1304 1593 AD 3A 2B			lda COLOUR
  1305 1596 91 12			sta (:bp2),y
  1306 1598 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1307 159A AD 3B 2B			lda ISALIVE
  1308 159D 91 12			sta (:bp2),y
  1309
  1310 				; optimize OK (tools.inc), line = 136
  1311
  1312 159F AD 3B 2B			lda ISALIVE
  1313 15A2 F0 1D			jeq l_04B8
  1314
  1315 				; optimize FAIL (0, tools.inc), line = 137
  1316
  1317 15A4 E6 5A			inc ALIVE
  1318 15A6 AD 3A 2B			lda COLOUR
  1319 15A9 8D 28 2B			sta PUTCHAR_008E.C
  1320 15AC AD 39 2B			lda HEAD
  1321 15AF 8D 27 2B			sta PUTCHAR_008E.V
  1322 15B2 AD 36 2B			lda Y
  1323 15B5 8D 26 2B			sta PUTCHAR_008E.Y
  1324 15B8 AD 35 2B			lda X
  1325 15BB 8D 25 2B			sta PUTCHAR_008E.X
  1326 15BE 20 82 11			jsr PUTCHAR_008E
  1327 15C1			l_04B8
  1328
  1329 				; ------------------------------------------------------------
  1330
  1331 = 2B33			P	= DATAORIGIN+$0053
  1332 = 2B35			X	= DATAORIGIN+$0055
  1333 = 2B36			Y	= DATAORIGIN+$0056
  1334 = 2B37			DIR	= DATAORIGIN+$0057
  1335 = 2B38			BRAIN	= DATAORIGIN+$0058
  1336 = 2B39			HEAD	= DATAORIGIN+$0059
  1337 = 2B3A			COLOUR	= DATAORIGIN+$005A
  1338 = 2B3B			ISALIVE	= DATAORIGIN+$005B
  1339
  1340 = 2B33			@VarData	= P
  1341 = 0009			@VarDataSize	= 9
  1342
  1343 15C1			@exit
  1344 					.ifdef @new
  1345 					lda <@VarData
  1346 					sta :ztmp
  1347 					lda >@VarData
  1348 					ldy #@VarDataSize-1
  1349 					jmp @FreeMem
  1350 					els
  1351 15C1 60				rts						; ret
  1352 					eif
  1353 				.endl
  1354
  1355 15C2			.local	NEXTLEVEL					; PROCEDURE
  1356
  1357 				; optimize FAIL (0, tools.inc), line = 145
  1358
  1359 15C2 EE F0 2A			inc LEVEL
  1360 15C5 AD F0 2A			lda LEVEL
  1361 15C8 C9 08			cmp #$08
  1362 15CA D0 05			jne l_04E6
  1363 15CC A9 05			lda #$05
  1364 15CE 8D F0 2A			sta LEVEL
  1365 15D1			l_04E6
  1366 15D1			@exit
  1367 					.ifdef @new
  1368 					lda <@VarData
  1369 					sta :ztmp
  1370 					lda >@VarData
  1371 					ldy #@VarDataSize-1
  1372 					jmp @FreeMem
  1373 					els
  1374 15D1 60				rts						; ret
  1375 					eif
  1376 				.endl
  1377
  1378 15D2			.local	STARTSCREEN					; PROCEDURE
  1379
  1380 				; optimize OK (tools.inc), line = 152
  1381
  1382 15D2 AD F5 2A			lda PLAYER1.COLOUR
  1383 15D5 18 69 80			add #$80
  1384 15D8 8D 28 2B			sta PUTCHAR_008E.C
  1385 15DB AD F4 2A			lda PLAYER1.HEAD
  1386 15DE 8D 27 2B			sta PUTCHAR_008E.V
  1387 15E1 AD F3 2A			lda PLAYER1.Y
  1388 15E4 8D 26 2B			sta PUTCHAR_008E.Y
  1389 15E7 AD F2 2A			lda PLAYER1.X
  1390 15EA 8D 25 2B			sta PUTCHAR_008E.X
  1391 15ED 20 82 11			jsr PUTCHAR_008E
  1392
  1393 				; --- RepeatUntilProlog
  1394 15F0			l_0503
  1395
  1396 				; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 153
  1397
  1398 15F0 20 4C 15			jsr CHECKJOYSTATUS
  1399 15F3 A5 63			lda JOYSTATUS
  1400 15F5 C9 40			cmp #$40
  1401 15F7 D0 F7			jne l_0503
  1402
  1403 				; optimize OK (tools.inc), line = 154
  1404
  1405 15F9 AD F5 2A			lda PLAYER1.COLOUR
  1406 15FC 8D 28 2B			sta PUTCHAR_008E.C
  1407 15FF AD F4 2A			lda PLAYER1.HEAD
  1408 1602 8D 27 2B			sta PUTCHAR_008E.V
  1409 1605 AD F3 2A			lda PLAYER1.Y
  1410 1608 8D 26 2B			sta PUTCHAR_008E.Y
  1411 160B AD F2 2A			lda PLAYER1.X
  1412 160E 8D 25 2B			sta PUTCHAR_008E.X
  1413 1611 20 82 11			jsr PUTCHAR_008E
  1414 1614			@exit
  1415 					.ifdef @new
  1416 					lda <@VarData
  1417 					sta :ztmp
  1418 					lda >@VarData
  1419 					ldy #@VarDataSize-1
  1420 					jmp @FreeMem
  1421 					els
  1422 1614 60				rts						; ret
  1423 					eif
  1424 				.endl
  1425
  1426 1615			.local	ISGAMEOVER					; FUNCTION
  1427
  1428 				; optimize OK (tools.inc), line = 161
  1429
  1430 1615 AD F8 2A			lda PLAYER1.SCORE
  1431 1618 C9 39			cmp #$39
  1432 161A D0 05			jne l_0534
  1433 161C A9 01			lda #$01
  1434 161E 8D F1 2A			sta GAMEOVER
  1435 1621			l_0534
  1436
  1437 				; optimize OK (tools.inc), line = 162
  1438
  1439 1621 AD 00 2B			lda PLAYER2.SCORE
  1440 1624 C9 39			cmp #$39
  1441 1626 D0 05			jne l_054D
  1442 1628 A9 01			lda #$01
  1443 162A 8D F1 2A			sta GAMEOVER
  1444 162D			l_054D
  1445
  1446 				; optimize OK (tools.inc), line = 163
  1447
  1448 162D AD 08 2B			lda PLAYER3.SCORE
  1449 1630 C9 39			cmp #$39
  1450 1632 D0 05			jne l_0566
  1451 1634 A9 01			lda #$01
  1452 1636 8D F1 2A			sta GAMEOVER
  1453 1639			l_0566
  1454
  1455 				; optimize OK (tools.inc), line = 164
  1456
  1457 1639 AD 10 2B			lda PLAYER4.SCORE
  1458 163C C9 39			cmp #$39
  1459 163E D0 05			jne l_057F
  1460 1640 A9 01			lda #$01
  1461 1642 8D F1 2A			sta GAMEOVER
  1462 1645			l_057F
  1463
  1464 				; optimize OK (tools.inc), line = 165
  1465
  1466 1645 AD F1 2A			lda GAMEOVER
  1467 1648 8D 3C 2B			sta RESULT
  1468 164B			@exit
  1469
  1470 				; ------------------------------------------------------------
  1471
  1472 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1473 				; as Pointer
  1474
  1475 164B E8				inx
  1476 164C AD 3C 2B 95 18		mva RESULT :STACKORIGIN,x
  1477
  1478 					.ifdef @new
  1479 					lda <@VarData
  1480 					sta :ztmp
  1481 					lda >@VarData
  1482 					ldy #@VarDataSize-1
  1483 					jmp @FreeMem
  1484 					eif
  1485
  1486 				; ------------------------------------------------------------
  1487
  1488 = 2B3C			RESULT	= DATAORIGIN+$005C
  1489
  1490 = 2B3C			@VarData	= RESULT
  1491 = 0001			@VarDataSize	= 1
  1492
  1493 1651 60				rts						; ret
  1494 				.endl
  1495
  1496 1652			.local	ISONELEFT					; FUNCTION
  1497
  1498 				; optimize OK (tools.inc), line = 172
  1499
  1500 1652 A0 01			ldy #1
  1501 1654 A5 5A			lda ALIVE
  1502 1656 F0 01			beq @+
  1503 1658 88				dey
  1504 1659			@
  1505 1659 84 21			sty :STACKORIGIN+9
  1506 165B A0 01			ldy #1
  1507 165D A5 5A			lda ALIVE
  1508 165F C9 FF			cmp #$FF
  1509 1661 F0 01			beq @+
  1510 1663 88				dey
  1511 1664			@
  1512 1664 98				tya
  1513 1665 05 21			ora :STACKORIGIN+9
  1514 1667 8D 3D 2B			sta RESULT
  1515 166A			@exit
  1516
  1517 				; ------------------------------------------------------------
  1518
  1519 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1520 				; as Pointer
  1521
  1522 166A E8				inx
  1523 166B AD 3D 2B 95 18		mva RESULT :STACKORIGIN,x
  1524
  1525 					.ifdef @new
  1526 					lda <@VarData
  1527 					sta :ztmp
  1528 					lda >@VarData
  1529 					ldy #@VarDataSize-1
  1530 					jmp @FreeMem
  1531 					eif
  1532
  1533 				; ------------------------------------------------------------
  1534
  1535 = 2B3D			RESULT	= DATAORIGIN+$005D
  1536
  1537 = 2B3D			@VarData	= RESULT
  1538 = 0001			@VarDataSize	= 1
  1539
  1540 1670 60				rts						; ret
  1541 				.endl
  1542
  1543 1671			.local	HUMAN						; PROCEDURE
  1544
  1545 				; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5
  1546
  1547 1671 20 4C 15			jsr CHECKJOYSTATUS
  1548 1674 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1549 167E A0 04			ldy #PLY.DIR-DATAORIGIN
  1550 1680 B1 12			lda (:bp2),y
  1551 1682 85 5B			sta NEWDIR
  1552
  1553 				; optimize OK (ai.inc), line = 6
  1554
  1555 1684 A5 63			lda JOYSTATUS
  1556 1686 8D 3E 2B			sta @CASETMP_0004
  1557 1689 C9 01			cmp #$01
  1558 168B D0 19			jne l_05C4
  1559 168D			@
  1560
  1561 				; optimize OK (ai.inc), line = 7
  1562
  1563 168D AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1564 1697 A0 04			ldy #PLY.DIR-DATAORIGIN
  1565 1699 B1 12			lda (:bp2),y
  1566 169B C9 02			cmp #$02
  1567 169D F0 04			jeq l_05D6
  1568 169F A9 01			lda #$01
  1569 16A1 85 5B			sta NEWDIR
  1570 16A3			l_05D6
  1571
  1572 16A3 4C FA 16			jmp a_0004
  1573 16A6			l_05C4
  1574 16A6 C9 02			cmp #$02
  1575 16A8 D0 19			jne l_05E6
  1576 16AA			@
  1577
  1578 				; optimize OK (ai.inc), line = 8
  1579
  1580 16AA AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1581 16B4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1582 16B6 B1 12			lda (:bp2),y
  1583 16B8 C9 01			cmp #$01
  1584 16BA F0 04			jeq l_05F8
  1585 16BC A9 02			lda #$02
  1586 16BE 85 5B			sta NEWDIR
  1587 16C0			l_05F8
  1588
  1589 16C0 4C FA 16			jmp a_0004
  1590 16C3			l_05E6
  1591 16C3 C9 04			cmp #$04
  1592 16C5 D0 19			jne l_0608
  1593 16C7			@
  1594
  1595 				; optimize OK (ai.inc), line = 9
  1596
  1597 16C7 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1598 16D1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1599 16D3 B1 12			lda (:bp2),y
  1600 16D5 C9 08			cmp #$08
  1601 16D7 F0 04			jeq l_061A
  1602 16D9 A9 04			lda #$04
  1603 16DB 85 5B			sta NEWDIR
  1604 16DD			l_061A
  1605
  1606 16DD 4C FA 16			jmp a_0004
  1607 16E0			l_0608
  1608 16E0 C9 08			cmp #$08
  1609 16E2 D0 16			jne l_062A
  1610 16E4			@
  1611
  1612 				; optimize OK (ai.inc), line = 10
  1613
  1614 16E4 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1615 16EE A0 04			ldy #PLY.DIR-DATAORIGIN
  1616 16F0 B1 12			lda (:bp2),y
  1617 16F2 C9 04			cmp #$04
  1618 16F4 F0 04			jeq l_063C
  1619 16F6 A9 08			lda #$08
  1620 16F8 85 5B			sta NEWDIR
  1621 16FA			l_063C
  1622
  1623 16FA			l_062A
  1624 16FA			a_0004
  1625
  1626 				; optimize OK (ai.inc), line = 13
  1627
  1628 16FA A5 5B			lda NEWDIR
  1629 16FC 25 5C			and AVAILDIR
  1630 16FE D0 18			jne l_0663
  1631
  1632 				; optimize OK (ai.inc), line = 14
  1633
  1634 1700 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1635 170A A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1636 170C A9 00			lda #$00
  1637 170E 91 12			sta (:bp2),y
  1638 1710 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1639 1712 A9 2A			lda #$2A
  1640 1714 91 12			sta (:bp2),y
  1641 1716 C6 5A			dec ALIVE
  1642 1718			l_0663
  1643
  1644 				; ------------------------------------------------------------
  1645
  1646 = 2B3E			@CASETMP_0004	= DATAORIGIN+$005E
  1647
  1648 = 2B3E			@VarData	= @CASETMP_0004
  1649 = 0001			@VarDataSize	= 1
  1650
  1651 1718			@exit
  1652 					.ifdef @new
  1653 					lda <@VarData
  1654 					sta :ztmp
  1655 					lda >@VarData
  1656 					ldy #@VarDataSize-1
  1657 					jmp @FreeMem
  1658 					els
  1659 1718 60				rts						; ret
  1660 					eif
  1661 				.endl
  1662
  1663 1719			.local	AISTRAIGHT					; PROCEDURE
  1664
  1665 				; optimize OK (ai.inc), line = 22
  1666
  1667 1719 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1668 1723 A0 04			ldy #PLY.DIR-DATAORIGIN
  1669 1725 B1 12			lda (:bp2),y
  1670 1727 25 5C			and AVAILDIR
  1671 1729 F0 07			jeq l_068E
  1672 172B B1 12			lda (:bp2),y
  1673 172D 85 5B			sta NEWDIR
  1674 172F 4C 95 17			jmp l_069E
  1675 1732			l_068E
  1676
  1677 				; optimize OK (ai.inc), line = 24
  1678
  1679 1732 A5 5C			lda AVAILDIR
  1680 1734 C9 03			cmp #$03
  1681 1736 D0 10			jne l_06B0
  1682 1738 A9 02			lda #$02
  1683 173A 20 30 11			jsr SYSTEM.RANDOM_006D
  1684 173D B4 18			ldy :STACKORIGIN,x
  1685 173F B9 40 10			lda adr.DIRECTION,y
  1686 1742 85 5B			sta NEWDIR
  1687 1744 CA				dex
  1688 1745 4C 60 17			jmp l_06C2
  1689 1748			l_06B0
  1690
  1691 				; optimize OK (ai.inc), line = 26
  1692
  1693 1748 A5 5C			lda AVAILDIR
  1694 174A 8D 3F 2B			sta @CASETMP_0005
  1695 174D C9 01			cmp #$01
  1696 174F D0 07			jne l_06CD
  1697 1751			@
  1698
  1699 				; optimize OK (ai.inc), line = 27
  1700
  1701 1751 A9 01			lda #$01
  1702 1753 85 5B			sta NEWDIR
  1703
  1704 1755 4C 60 17			jmp a_0005
  1705 1758			l_06CD
  1706 1758 C9 02			cmp #$02
  1707 175A D0 04			jne l_06DA
  1708 175C			@
  1709
  1710 				; optimize OK (ai.inc), line = 28
  1711
  1712 175C A9 02			lda #$02
  1713 175E 85 5B			sta NEWDIR
  1714
  1715 1760			l_06DA
  1716 1760			a_0005
  1717 1760			l_06C2
  1718
  1719 				; optimize OK (ai.inc), line = 31
  1720
  1721 1760 A5 5C			lda AVAILDIR
  1722 1762 C9 0C			cmp #$0C
  1723 1764 D0 17			jne l_06F6
  1724 1766 A9 02			lda #$02
  1725 1768 20 30 11			jsr SYSTEM.RANDOM_006D
  1726 176B B5 18			lda :STACKORIGIN,x
  1727 176D 18 69 02			add #$02
  1728 1770 95 18			sta :STACKORIGIN,x
  1729 1772 B4 18			ldy :STACKORIGIN,x
  1730 1774 B9 40 10			lda adr.DIRECTION,y
  1731 1777 85 5B			sta NEWDIR
  1732 1779 CA				dex
  1733 177A 4C 95 17			jmp l_070C
  1734 177D			l_06F6
  1735
  1736 				; optimize OK (ai.inc), line = 33
  1737
  1738 177D A5 5C			lda AVAILDIR
  1739 177F 8D 40 2B			sta @CASETMP_0006
  1740 1782 C9 04			cmp #$04
  1741 1784 D0 07			jne l_0717
  1742 1786			@
  1743
  1744 				; optimize OK (ai.inc), line = 34
  1745
  1746 1786 A9 04			lda #$04
  1747 1788 85 5B			sta NEWDIR
  1748
  1749 178A 4C 95 17			jmp a_0006
  1750 178D			l_0717
  1751 178D C9 08			cmp #$08
  1752 178F D0 04			jne l_0724
  1753 1791			@
  1754
  1755 				; optimize OK (ai.inc), line = 35
  1756
  1757 1791 A9 08			lda #$08
  1758 1793 85 5B			sta NEWDIR
  1759
  1760 1795			l_0724
  1761 1795			a_0006
  1762 1795			l_070C
  1763 1795			l_069E
  1764
  1765 				; ------------------------------------------------------------
  1766
  1767 = 2B3F			@CASETMP_0005	= DATAORIGIN+$005F
  1768 = 2B40			@CASETMP_0006	= DATAORIGIN+$0060
  1769
  1770 = 2B3F			@VarData	= @CASETMP_0005
  1771 = 0002			@VarDataSize	= 2
  1772
  1773 1795			@exit
  1774 					.ifdef @new
  1775 					lda <@VarData
  1776 					sta :ztmp
  1777 					lda >@VarData
  1778 					ldy #@VarDataSize-1
  1779 					jmp @FreeMem
  1780 					els
  1781 1795 60				rts						; ret
  1782 					eif
  1783 				.endl
  1784
  1785 1796			.local	AISAPPER					; PROCEDURE
  1786
  1787 				; optimize OK (ai.inc), line = 48
  1788
  1789 1796 A9 00			lda #$00
  1790 1798 8D 41 2B			sta L
  1791 179B 8D 42 2B			sta R
  1792 179E 8D 43 2B			sta U
  1793 17A1 8D 44 2B			sta D
  1794
  1795 				; optimize OK (ai.inc), line = 49
  1796
  1797 17A4 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  1798 17AE A0 01			ldy #PLY.Y-DATAORIGIN
  1799 17B0 B1 12			lda (:bp2),y
  1800 17B2 0A				asl @
  1801 17B3 A8				tay
  1802 17B4 A9 00			lda #$00
  1803 17B6 18 79 0E 10			add adr.MUL40,y
  1804 17BA 85 21			sta :STACKORIGIN+9
  1805 17BC A9 0C			lda #$0C
  1806 17BE 79 0F 10			adc adr.MUL40+1,y
  1807 17C1 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1808 17C3 A0 00			ldy #PLY.X-DATAORIGIN
  1809 17C5 A5 21			lda :STACKORIGIN+9
  1810 17C7 18 71 12			add (:bp2),y
  1811 17CA 85 5D			sta T0W
  1812 17CC A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1813 17CE 69 00			adc #$00
  1814 17D0 85 5E			sta T0W+1
  1815
  1816 				; optimize OK (ai.inc), line = 51
  1817
  1818 17D2 A5 5C			lda AVAILDIR
  1819 17D4 29 01			and #$01
  1820 17D6 F0 73			jeq l_076A
  1821
  1822 				; optimize OK (ai.inc), line = 52
  1823
  1824 17D8 A9 05			lda #$05
  1825 17DA 85 59			sta I0B
  1826
  1827 17DC			l_0774
  1828 				; --- ForToDoCondition
  1829 17DC A5 59			lda I0B
  1830 17DE C9 01			cmp #$01
  1831 17E0 90 69			jcc l_0782
  1832
  1833 				; optimize OK (ai.inc), line = 53
  1834
  1835 17E2 0A				asl @
  1836 17E3 A8				tay
  1837 17E4 A5 5D			lda T0W
  1838 17E6 38 F9 0E 10			sub adr.MUL40,y
  1839 17EA 85 21			sta :STACKORIGIN+9
  1840 17EC A5 5E			lda T0W+1
  1841 17EE F9 0F 10			sbc adr.MUL40+1,y
  1842 17F1 85 11			sta :bp+1
  1843 17F3 A4 21			ldy :STACKORIGIN+9
  1844 17F5 B1 10			lda (:bp),y
  1845 17F7 C9 20			cmp #$20
  1846 17F9 D0 03			jne l_079C
  1847 17FB EE 43 2B			inc U
  1848 17FE			l_079C
  1849
  1850 				; optimize OK (ai.inc), line = 54
  1851
  1852 17FE A5 59			lda I0B
  1853 1800 0A				asl @
  1854 1801 A8				tay
  1855 1802 A5 5D			lda T0W
  1856 1804 38 F9 0E 10			sub adr.MUL40,y
  1857 1808 85 21			sta :STACKORIGIN+9
  1858 180A A5 5E			lda T0W+1
  1859 180C F9 0F 10			sbc adr.MUL40+1,y
  1860 180F 85 11			sta :bp+1
  1861 1811 A5 21			lda :STACKORIGIN+9
  1862 1813 18 69 01			add #$01
  1863 1816 A8				tay
  1864 1817 90 02			scc
  1865 1819 E6 11			inc :bp+1
  1866 181B B1 10			lda (:bp),y
  1867 181D C9 20			cmp #$20
  1868 181F D0 03			jne l_07C1
  1869 1821 EE 43 2B			inc U
  1870 1824			l_07C1
  1871
  1872 				; optimize OK (ai.inc), line = 55
  1873
  1874 1824 A5 59			lda I0B
  1875 1826 0A				asl @
  1876 1827 A8				tay
  1877 1828 A5 5D			lda T0W
  1878 182A 38 F9 0E 10			sub adr.MUL40,y
  1879 182E 85 21			sta :STACKORIGIN+9
  1880 1830 A5 5E			lda T0W+1
  1881 1832 F9 0F 10			sbc adr.MUL40+1,y
  1882 1835 85 11			sta :bp+1
  1883 1837 A4 21			ldy :STACKORIGIN+9
  1884 1839 88				dey
  1885 183A B0 02			scs
  1886 183C C6 11			dec :bp+1
  1887 183E B1 10			lda (:bp),y
  1888 1840 C9 20			cmp #$20
  1889 1842 D0 03			jne l_07E6
  1890 1844 EE 43 2B			inc U
  1891 1847			l_07E6
  1892
  1893 				; --- ForToDoEpilog
  1894 1847 C6 59			dec I0B
  1895 1849 10 91			jpl l_0774
  1896 184B			l_0782
  1897 184B			l_076A
  1898
  1899 				; optimize OK (ai.inc), line = 59
  1900
  1901 184B A5 5C			lda AVAILDIR
  1902 184D 29 02			and #$02
  1903 184F F0 73			jeq l_080A
  1904
  1905 				; optimize OK (ai.inc), line = 60
  1906
  1907 1851 A9 05			lda #$05
  1908 1853 85 59			sta I0B
  1909
  1910 1855			l_0814
  1911 				; --- ForToDoCondition
  1912 1855 A5 59			lda I0B
  1913 1857 C9 01			cmp #$01
  1914 1859 90 69			jcc l_0822
  1915
  1916 				; optimize OK (ai.inc), line = 61
  1917
  1918 185B 0A				asl @
  1919 185C A8				tay
  1920 185D A5 5D			lda T0W
  1921 185F 18 79 0E 10			add adr.MUL40,y
  1922 1863 85 21			sta :STACKORIGIN+9
  1923 1865 A5 5E			lda T0W+1
  1924 1867 79 0F 10			adc adr.MUL40+1,y
  1925 186A 85 11			sta :bp+1
  1926 186C A4 21			ldy :STACKORIGIN+9
  1927 186E B1 10			lda (:bp),y
  1928 1870 C9 20			cmp #$20
  1929 1872 D0 03			jne l_083C
  1930 1874 EE 44 2B			inc D
  1931 1877			l_083C
  1932
  1933 				; optimize OK (ai.inc), line = 62
  1934
  1935 1877 A5 59			lda I0B
  1936 1879 0A				asl @
  1937 187A A8				tay
  1938 187B A5 5D			lda T0W
  1939 187D 18 79 0E 10			add adr.MUL40,y
  1940 1881 85 21			sta :STACKORIGIN+9
  1941 1883 A5 5E			lda T0W+1
  1942 1885 79 0F 10			adc adr.MUL40+1,y
  1943 1888 85 11			sta :bp+1
  1944 188A A5 21			lda :STACKORIGIN+9
  1945 188C 18 69 01			add #$01
  1946 188F A8				tay
  1947 1890 90 02			scc
  1948 1892 E6 11			inc :bp+1
  1949 1894 B1 10			lda (:bp),y
  1950 1896 C9 20			cmp #$20
  1951 1898 D0 03			jne l_0861
  1952 189A EE 44 2B			inc D
  1953 189D			l_0861
  1954
  1955 				; optimize OK (ai.inc), line = 63
  1956
  1957 189D A5 59			lda I0B
  1958 189F 0A				asl @
  1959 18A0 A8				tay
  1960 18A1 A5 5D			lda T0W
  1961 18A3 18 79 0E 10			add adr.MUL40,y
  1962 18A7 85 21			sta :STACKORIGIN+9
  1963 18A9 A5 5E			lda T0W+1
  1964 18AB 79 0F 10			adc adr.MUL40+1,y
  1965 18AE 85 11			sta :bp+1
  1966 18B0 A4 21			ldy :STACKORIGIN+9
  1967 18B2 88				dey
  1968 18B3 B0 02			scs
  1969 18B5 C6 11			dec :bp+1
  1970 18B7 B1 10			lda (:bp),y
  1971 18B9 C9 20			cmp #$20
  1972 18BB D0 03			jne l_0886
  1973 18BD EE 44 2B			inc D
  1974 18C0			l_0886
  1975
  1976 				; --- ForToDoEpilog
  1977 18C0 C6 59			dec I0B
  1978 18C2 10 91			jpl l_0814
  1979 18C4			l_0822
  1980 18C4			l_080A
  1981
  1982 				; optimize OK (ai.inc), line = 67
  1983
  1984 18C4 A5 5C			lda AVAILDIR
  1985 18C6 29 04			and #$04
  1986 18C8 F0 5F			jeq l_08AA
  1987
  1988 				; optimize OK (ai.inc), line = 68
  1989
  1990 18CA A9 05			lda #$05
  1991 18CC 85 59			sta I0B
  1992
  1993 18CE			l_08B4
  1994 				; --- ForToDoCondition
  1995 18CE A5 59			lda I0B
  1996 18D0 C9 01			cmp #$01
  1997 18D2 90 55			jcc l_08C2
  1998
  1999 				; optimize OK (ai.inc), line = 69
  2000
  2001 18D4 A5 5D			lda T0W
  2002 18D6 38 E5 59			sub I0B
  2003 18D9 A8				tay
  2004 18DA A5 5E			lda T0W+1
  2005 18DC E9 00			sbc #$00
  2006 18DE 85 11			sta :bp+1
  2007 18E0 B1 10			lda (:bp),y
  2008 18E2 C9 20			cmp #$20
  2009 18E4 D0 03			jne l_08DA
  2010 18E6 EE 41 2B			inc L
  2011 18E9			l_08DA
  2012
  2013 				; optimize OK (ai.inc), line = 70
  2014
  2015 18E9 A5 5D			lda T0W
  2016 18EB 38 E5 59			sub I0B
  2017 18EE A8				tay
  2018 18EF A5 5E			lda T0W+1
  2019 18F1 E9 00			sbc #$00
  2020 18F3 85 11			sta :bp+1
  2021 18F5 98				tya
  2022 18F6 18 69 28			add #$28
  2023 18F9 A8				tay
  2024 18FA 90 02			scc
  2025 18FC E6 11			inc :bp+1
  2026 18FE B1 10			lda (:bp),y
  2027 1900 C9 20			cmp #$20
  2028 1902 D0 03			jne l_08FD
  2029 1904 EE 41 2B			inc L
  2030 1907			l_08FD
  2031
  2032 				; optimize OK (ai.inc), line = 71
  2033
  2034 1907 A5 5D			lda T0W
  2035 1909 38 E5 59			sub I0B
  2036 190C A8				tay
  2037 190D A5 5E			lda T0W+1
  2038 190F E9 00			sbc #$00
  2039 1911 85 11			sta :bp+1
  2040 1913 98				tya
  2041 1914 38 E9 28			sub #$28
  2042 1917 A8				tay
  2043 1918 B0 02			scs
  2044 191A C6 11			dec :bp+1
  2045 191C B1 10			lda (:bp),y
  2046 191E C9 20			cmp #$20
  2047 1920 D0 03			jne l_0920
  2048 1922 EE 41 2B			inc L
  2049 1925			l_0920
  2050
  2051 				; --- ForToDoEpilog
  2052 1925 C6 59			dec I0B
  2053 1927 10 A5			jpl l_08B4
  2054 1929			l_08C2
  2055 1929			l_08AA
  2056
  2057 				; optimize OK (ai.inc), line = 75
  2058
  2059 1929 A5 5C			lda AVAILDIR
  2060 192B 29 08			and #$08
  2061 192D F0 5D			jeq l_0944
  2062
  2063 				; optimize OK (ai.inc), line = 76
  2064
  2065 192F A9 05			lda #$05
  2066 1931 85 59			sta I0B
  2067
  2068 1933			l_094E
  2069 				; --- ForToDoCondition
  2070 1933 A5 59			lda I0B
  2071 1935 C9 01			cmp #$01
  2072 1937 90 53			jcc l_095C
  2073
  2074 				; optimize OK (ai.inc), line = 77
  2075
  2076 1939 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  2077 1941 A4 59			ldy I0B
  2078 1943 B1 12			lda (:bp2),y
  2079 1945 C9 20			cmp #$20
  2080 1947 D0 03			jne l_0974
  2081 1949 EE 42 2B			inc R
  2082 194C			l_0974
  2083
  2084 				; optimize OK (ai.inc), line = 78
  2085
  2086 194C A5 5D			lda T0W
  2087 194E 18 65 59			add I0B
  2088 1951 A8				tay
  2089 1952 A5 5E			lda T0W+1
  2090 1954 69 00			adc #$00
  2091 1956 85 11			sta :bp+1
  2092 1958 98				tya
  2093 1959 18 69 28			add #$28
  2094 195C A8				tay
  2095 195D 90 02			scc
  2096 195F E6 11			inc :bp+1
  2097 1961 B1 10			lda (:bp),y
  2098 1963 C9 20			cmp #$20
  2099 1965 D0 03			jne l_0997
  2100 1967 EE 42 2B			inc R
  2101 196A			l_0997
  2102
  2103 				; optimize OK (ai.inc), line = 79
  2104
  2105 196A A5 5D			lda T0W
  2106 196C 18 65 59			add I0B
  2107 196F A8				tay
  2108 1970 A5 5E			lda T0W+1
  2109 1972 69 00			adc #$00
  2110 1974 85 11			sta :bp+1
  2111 1976 98				tya
  2112 1977 38 E9 28			sub #$28
  2113 197A A8				tay
  2114 197B B0 02			scs
  2115 197D C6 11			dec :bp+1
  2116 197F B1 10			lda (:bp),y
  2117 1981 C9 20			cmp #$20
  2118 1983 D0 03			jne l_09BA
  2119 1985 EE 42 2B			inc R
  2120 1988			l_09BA
  2121
  2122 				; --- ForToDoEpilog
  2123 1988 C6 59			dec I0B
  2124 198A 10 A7			jpl l_094E
  2125 198C			l_095C
  2126 198C			l_0944
  2127
  2128 				; optimize OK (ai.inc), line = 83
  2129
  2130 198C AD 44 2B			lda D
  2131 198F 85 58			sta T0B
  2132
  2133 				; optimize OK (ai.inc), line = 84
  2134
  2135 1991 CD 43 2B			cmp U
  2136 1994 B0 05			jcs l_09E2
  2137 1996 AD 43 2B			lda U
  2138 1999 85 58			sta T0B
  2139 199B			l_09E2
  2140
  2141 				; optimize OK (ai.inc), line = 85
  2142
  2143 199B A5 58			lda T0B
  2144 199D CD 41 2B			cmp L
  2145 19A0 B0 05			jcs l_09FF
  2146 19A2 AD 41 2B			lda L
  2147 19A5 85 58			sta T0B
  2148 19A7			l_09FF
  2149
  2150 				; optimize OK (ai.inc), line = 86
  2151
  2152 19A7 A5 58			lda T0B
  2153 19A9 CD 42 2B			cmp R
  2154 19AC B0 05			jcs l_0A1C
  2155 19AE AD 42 2B			lda R
  2156 19B1 85 58			sta T0B
  2157 19B3			l_0A1C
  2158
  2159 				; optimize OK (ai.inc), line = 88
  2160
  2161 19B3 A5 58			lda T0B
  2162 19B5 CD 44 2B			cmp D
  2163 19B8 D0 04			jne l_0A39
  2164 19BA A9 02			lda #$02
  2165 19BC 85 58			sta T0B
  2166 19BE			l_0A39
  2167
  2168 				; optimize OK (ai.inc), line = 89
  2169
  2170 19BE A5 58			lda T0B
  2171 19C0 CD 43 2B			cmp U
  2172 19C3 D0 04			jne l_0A54
  2173 19C5 A9 01			lda #$01
  2174 19C7 85 58			sta T0B
  2175 19C9			l_0A54
  2176
  2177 				; optimize OK (ai.inc), line = 90
  2178
  2179 19C9 A5 58			lda T0B
  2180 19CB CD 41 2B			cmp L
  2181 19CE D0 04			jne l_0A6F
  2182 19D0 A9 04			lda #$04
  2183 19D2 85 58			sta T0B
  2184 19D4			l_0A6F
  2185
  2186 				; optimize OK (ai.inc), line = 91
  2187
  2188 19D4 A5 58			lda T0B
  2189 19D6 CD 42 2B			cmp R
  2190 19D9 D0 04			jne l_0A8A
  2191 19DB A9 08			lda #$08
  2192 19DD 85 58			sta T0B
  2193 19DF			l_0A8A
  2194
  2195 				; optimize OK (ai.inc), line = 93
  2196
  2197 19DF A5 5C			lda AVAILDIR
  2198 19E1 25 58			and T0B
  2199 19E3 F0 07			jeq l_0AA9
  2200 19E5 A5 58			lda T0B
  2201 19E7 85 5B			sta NEWDIR
  2202 19E9 4C EF 19			jmp l_0AB9
  2203 19EC			l_0AA9
  2204
  2205 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94
  2206
  2207 19EC 20 19 17			jsr AISTRAIGHT
  2208 19EF			l_0AB9
  2209
  2210 				; ------------------------------------------------------------
  2211
  2212 = 2B41			L	= DATAORIGIN+$0061
  2213 = 2B42			R	= DATAORIGIN+$0062
  2214 = 2B43			U	= DATAORIGIN+$0063
  2215 = 2B44			D	= DATAORIGIN+$0064
  2216 = 0001			@FORTMP_0771	= $01
  2217 = 0001			@FORTMP_0811	= $01
  2218 = 0001			@FORTMP_08B1	= $01
  2219 = 0001			@FORTMP_094B	= $01
  2220
  2221 = 2B41			@VarData	= L
  2222 = 0004			@VarDataSize	= 4
  2223
  2224 19EF			@exit
  2225 					.ifdef @new
  2226 					lda <@VarData
  2227 					sta :ztmp
  2228 					lda >@VarData
  2229 					ldy #@VarDataSize-1
  2230 					jmp @FreeMem
  2231 					els
  2232 19EF 60				rts						; ret
  2233 					eif
  2234 				.endl
  2235
  2236 19F0			.local	AIBULLY						; PROCEDURE
  2237
  2238 				; optimize OK (ai.inc), line = 101
  2239
  2240 19F0 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  2241 19FA A0 04			ldy #PLY.DIR-DATAORIGIN
  2242 19FC B1 12			lda (:bp2),y
  2243 19FE 85 58			sta T0B
  2244
  2245 				; optimize OK (ai.inc), line = 103
  2246
  2247 1A00 AD F9 2A			lda PLAYER1.ISALIVE
  2248 1A03 0D 01 2B			ora PLAYER2.ISALIVE
  2249 1A06 D0 03 4C AD 1A		jeq l_0AD6
  2250
  2251 				; optimize OK (ai.inc), line = 105
  2252
  2253 1A0B AD F9 2A			lda PLAYER1.ISALIVE
  2254 1A0E F0 0F			jeq l_0AE3
  2255 1A10 AD D4 2A			lda PLAYER1
  2256 1A13 8D D2 2A			sta TMPPLY
  2257 1A16 AD D5 2A			lda PLAYER1+1
  2258 1A19 8D D3 2A			sta TMPPLY+1
  2259 1A1C 4C 2B 1A			jmp l_0AF2
  2260 1A1F			l_0AE3
  2261 1A1F AD D6 2A			lda PLAYER2
  2262 1A22 8D D2 2A			sta TMPPLY
  2263 1A25 AD D7 2A			lda PLAYER2+1
  2264 1A28 8D D3 2A			sta TMPPLY+1
  2265 1A2B			l_0AF2
  2266
  2267 				; optimize OK (ai.inc), line = 107
  2268
  2269 1A2B AC D0 2A 84 12 AC + 	mwy PLY :bp2
  2270 1A35 A0 01			ldy #PLY.Y-DATAORIGIN
  2271 1A37 B1 12			lda (:bp2),y
  2272 1A39 85 21			sta :STACKORIGIN+9
  2273 1A3B AC D2 2A 84 12 AC + 	mwy TMPPLY :bp2
  2274 1A45 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2275 1A47 B1 12			lda (:bp2),y
  2276 1A49 C5 21			cmp :STACKORIGIN+9
  2277 1A4B B0 07			jcs l_0B0B
  2278 1A4D A9 01			lda #$01
  2279 1A4F 85 58			sta T0B
  2280 1A51 4C 58 1A			jmp l_0B19
  2281 1A54			l_0B0B
  2282 1A54 A9 02			lda #$02
  2283 1A56 85 58			sta T0B
  2284 1A58			l_0B19
  2285
  2286 				; optimize OK (ai.inc), line = 108
  2287
  2288 1A58 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  2289 1A62 A0 01			ldy #PLY.Y-DATAORIGIN
  2290 1A64 B1 12			lda (:bp2),y
  2291 1A66 85 21			sta :STACKORIGIN+9
  2292 1A68 AC D2 2A 84 12 AC + 	mwy TMPPLY :bp2
  2293 1A72 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2294 1A74 B1 12			lda (:bp2),y
  2295 1A76 C5 21			cmp :STACKORIGIN+9
  2296 1A78 F0 06			jeq l_0B43x
  2297 1A7A A5 5C			lda AVAILDIR
  2298 1A7C 25 58			and T0B
  2299 1A7E D0 2D			jne l_0B43
  2300 1A80			l_0B43x
  2301
  2302 				; optimize OK (ai.inc), line = 109
  2303
  2304 1A80 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  2305 1A8A A0 00			ldy #PLY.X-DATAORIGIN
  2306 1A8C B1 12			lda (:bp2),y
  2307 1A8E 85 21			sta :STACKORIGIN+9
  2308 1A90 AC D2 2A 84 12 AC + 	mwy TMPPLY :bp2
  2309 1A9A A0 00			ldy #TMPPLY.X-DATAORIGIN
  2310 1A9C B1 12			lda (:bp2),y
  2311 1A9E C5 21			cmp :STACKORIGIN+9
  2312 1AA0 B0 07			jcs l_0B58
  2313 1AA2 A9 04			lda #$04
  2314 1AA4 85 58			sta T0B
  2315 1AA6 4C AD 1A			jmp l_0B66
  2316 1AA9			l_0B58
  2317 1AA9 A9 08			lda #$08
  2318 1AAB 85 58			sta T0B
  2319 1AAD			l_0B66
  2320 1AAD			l_0B43
  2321 1AAD			l_0AD6
  2322
  2323 				; optimize OK (ai.inc), line = 113
  2324
  2325 1AAD A5 5C			lda AVAILDIR
  2326 1AAF 25 58			and T0B
  2327 1AB1 F0 07			jeq l_0B86
  2328 1AB3 A5 58			lda T0B
  2329 1AB5 85 5B			sta NEWDIR
  2330 1AB7 4C BD 1A			jmp l_0B96
  2331 1ABA			l_0B86
  2332
  2333 				; optimize FAIL ('AISAPPER', ai.inc), line = 114
  2334
  2335 1ABA 20 96 17			jsr AISAPPER
  2336 1ABD			l_0B96
  2337 1ABD			@exit
  2338 					.ifdef @new
  2339 					lda <@VarData
  2340 					sta :ztmp
  2341 					lda >@VarData
  2342 					ldy #@VarDataSize-1
  2343 					jmp @FreeMem
  2344 					els
  2345 1ABD 60				rts						; ret
  2346 					eif
  2347 				.endl
  2348
  2349 1ABE			.local	AIMIRROR					; PROCEDURE
  2350
  2351 				; optimize OK (ai.inc), line = 122
  2352
  2353 1ABE AC D0 2A 84 12 AC + 	mwy PLY :bp2
  2354 1AC8 A0 04			ldy #PLY.DIR-DATAORIGIN
  2355 1ACA B1 12			lda (:bp2),y
  2356 1ACC 85 58			sta T0B
  2357
  2358 				; optimize OK (ai.inc), line = 124
  2359
  2360 1ACE AD F9 2A			lda PLAYER1.ISALIVE
  2361 1AD1 F0 2F			jeq l_0BAD
  2362
  2363 				; optimize OK (ai.inc), line = 125
  2364
  2365 1AD3 AD F6 2A			lda PLAYER1.DIR
  2366 1AD6 8D 45 2B			sta @CASETMP_0007
  2367 1AD9 C9 01			cmp #$01
  2368 1ADB D0 07			jne l_0BB9
  2369 1ADD			@
  2370
  2371 				; optimize OK (ai.inc), line = 126
  2372
  2373 1ADD A9 02			lda #$02
  2374 1ADF 85 58			sta T0B
  2375
  2376 1AE1 4C 02 1B			jmp a_0007
  2377 1AE4			l_0BB9
  2378 1AE4 C9 02			cmp #$02
  2379 1AE6 D0 07			jne l_0BC6
  2380 1AE8			@
  2381
  2382 				; optimize OK (ai.inc), line = 127
  2383
  2384 1AE8 A9 01			lda #$01
  2385 1AEA 85 58			sta T0B
  2386
  2387 1AEC 4C 02 1B			jmp a_0007
  2388 1AEF			l_0BC6
  2389 1AEF C9 04			cmp #$04
  2390 1AF1 D0 07			jne l_0BD3
  2391 1AF3			@
  2392
  2393 				; optimize OK (ai.inc), line = 128
  2394
  2395 1AF3 A9 08			lda #$08
  2396 1AF5 85 58			sta T0B
  2397
  2398 1AF7 4C 02 1B			jmp a_0007
  2399 1AFA			l_0BD3
  2400 1AFA C9 08			cmp #$08
  2401 1AFC D0 04			jne l_0BE0
  2402 1AFE			@
  2403
  2404 				; optimize OK (ai.inc), line = 129
  2405
  2406 1AFE A9 04			lda #$04
  2407 1B00 85 58			sta T0B
  2408
  2409 1B02			l_0BE0
  2410 1B02			a_0007
  2411 1B02			l_0BAD
  2412
  2413 				; optimize OK (ai.inc), line = 133
  2414
  2415 1B02 A5 5C			lda AVAILDIR
  2416 1B04 25 58			and T0B
  2417 1B06 F0 07			jeq l_0C06
  2418 1B08 A5 58			lda T0B
  2419 1B0A 85 5B			sta NEWDIR
  2420 1B0C 4C 12 1B			jmp l_0C16
  2421 1B0F			l_0C06
  2422
  2423 				; optimize FAIL ('AISAPPER', ai.inc), line = 134
  2424
  2425 1B0F 20 96 17			jsr AISAPPER
  2426 1B12			l_0C16
  2427
  2428 				; ------------------------------------------------------------
  2429
  2430 = 2B45			@CASETMP_0007	= DATAORIGIN+$0065
  2431
  2432 = 2B45			@VarData	= @CASETMP_0007
  2433 = 0001			@VarDataSize	= 1
  2434
  2435 1B12			@exit
  2436 					.ifdef @new
  2437 					lda <@VarData
  2438 					sta :ztmp
  2439 					lda >@VarData
  2440 					ldy #@VarDataSize-1
  2441 					jmp @FreeMem
  2442 					els
  2443 1B12 60				rts						; ret
  2444 					eif
  2445 				.endl
  2446
  2447 1B13			.local	SETLEVEL00					; PROCEDURE
  2448
  2449 				; optimize OK (levels.inc), line = 5
  2450
  2451 1B13 A9 01			lda #$01
  2452 1B15 8D 3B 2B			sta SETPLAYER.ISALIVE
  2453 1B18 A9 62			lda #$62
  2454 1B1A 8D 3A 2B			sta SETPLAYER.COLOUR
  2455 1B1D A9 51			lda #$51
  2456 1B1F 8D 39 2B			sta SETPLAYER.HEAD
  2457 1B22 A9 00			lda #$00
  2458 1B24 8D 38 2B			sta SETPLAYER.BRAIN
  2459 1B27 A9 08			lda #$08
  2460 1B29 8D 37 2B			sta SETPLAYER.DIR
  2461 1B2C A9 0C			lda #$0C
  2462 1B2E 8D 36 2B			sta SETPLAYER.Y
  2463 1B31 A9 0A			lda #$0A
  2464 1B33 8D 35 2B			sta SETPLAYER.X
  2465 1B36 AD D4 2A			lda PLAYER1
  2466 1B39 8D 33 2B			sta SETPLAYER.P
  2467 1B3C AD D5 2A			lda PLAYER1+1
  2468 1B3F 8D 34 2B			sta SETPLAYER.P+1
  2469 1B42 20 5E 15			jsr SETPLAYER
  2470
  2471 				; optimize OK (levels.inc), line = 6
  2472
  2473 1B45 A9 01			lda #$01
  2474 1B47 8D 3B 2B			sta SETPLAYER.ISALIVE
  2475 1B4A A9 5D			lda #$5D
  2476 1B4C 8D 3A 2B			sta SETPLAYER.COLOUR
  2477 1B4F A9 51			lda #$51
  2478 1B51 8D 39 2B			sta SETPLAYER.HEAD
  2479 1B54 A9 01			lda #$01
  2480 1B56 8D 38 2B			sta SETPLAYER.BRAIN
  2481 1B59 A9 04			lda #$04
  2482 1B5B 8D 37 2B			sta SETPLAYER.DIR
  2483 1B5E A9 0C			lda #$0C
  2484 1B60 8D 36 2B			sta SETPLAYER.Y
  2485 1B63 A9 1E			lda #$1E
  2486 1B65 8D 35 2B			sta SETPLAYER.X
  2487 1B68 AD D6 2A			lda PLAYER2
  2488 1B6B 8D 33 2B			sta SETPLAYER.P
  2489 1B6E AD D7 2A			lda PLAYER2+1
  2490 1B71 8D 34 2B			sta SETPLAYER.P+1
  2491 1B74 20 5E 15			jsr SETPLAYER
  2492
  2493 				; optimize FAIL (1, levels.inc), line = 8
  2494
  2495 1B77 E8				inx
  2496 1B78 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2497 1B7C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2498 1B7E A9 06			lda #$06
  2499 1B80 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2500 1B83 A9 0A			lda #$0A
  2501 1B85 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2502 1B88 20 36 13			jsr CALCOBSTACLEADDR
  2503 1B8B B4 17			ldy :STACKORIGIN-1,x
  2504 1B8D B5 18			lda :STACKORIGIN,x
  2505 1B8F 99 12 2B			sta adr.OBSTACLES,y
  2506 1B92 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2507 1B94 99 13 2B			sta adr.OBSTACLES+1,y
  2508 1B97 CA				dex
  2509 1B98 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2510 1B9C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2511 1BA0 A9 06			lda #$06
  2512 1BA2 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2513 1BA5 A9 1E			lda #$1E
  2514 1BA7 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2515 1BAA 20 36 13			jsr CALCOBSTACLEADDR
  2516 1BAD B4 17			ldy :STACKORIGIN-1,x
  2517 1BAF B5 18			lda :STACKORIGIN,x
  2518 1BB1 99 12 2B			sta adr.OBSTACLES,y
  2519 1BB4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2520 1BB6 99 13 2B			sta adr.OBSTACLES+1,y
  2521 1BB9 CA				dex
  2522
  2523 				; optimize FAIL (1, levels.inc), line = 9
  2524
  2525 1BBA A9 04 95 18			mva #$04 :STACKORIGIN,x
  2526 1BBE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2527 1BC2 A9 12			lda #$12
  2528 1BC4 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2529 1BC7 A9 0A			lda #$0A
  2530 1BC9 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2531 1BCC 20 36 13			jsr CALCOBSTACLEADDR
  2532 1BCF B4 17			ldy :STACKORIGIN-1,x
  2533 1BD1 B5 18			lda :STACKORIGIN,x
  2534 1BD3 99 12 2B			sta adr.OBSTACLES,y
  2535 1BD6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2536 1BD8 99 13 2B			sta adr.OBSTACLES+1,y
  2537 1BDB CA				dex
  2538 1BDC A9 06 95 18			mva #$06 :STACKORIGIN,x
  2539 1BE0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2540 1BE4 A9 12			lda #$12
  2541 1BE6 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2542 1BE9 A9 1E			lda #$1E
  2543 1BEB 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2544 1BEE 20 36 13			jsr CALCOBSTACLEADDR
  2545 1BF1 B4 17			ldy :STACKORIGIN-1,x
  2546 1BF3 B5 18			lda :STACKORIGIN,x
  2547 1BF5 99 12 2B			sta adr.OBSTACLES,y
  2548 1BF8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2549 1BFA 99 13 2B			sta adr.OBSTACLES+1,y
  2550 1BFD CA				dex
  2551
  2552 				; optimize FAIL (1, levels.inc), line = 10
  2553
  2554 1BFE A9 08 95 18			mva #$08 :STACKORIGIN,x
  2555 1C02 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2556 1C06 A9 02			lda #$02
  2557 1C08 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2558 1C0B A9 14			lda #$14
  2559 1C0D 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2560 1C10 20 36 13			jsr CALCOBSTACLEADDR
  2561 1C13 B4 17			ldy :STACKORIGIN-1,x
  2562 1C15 B5 18			lda :STACKORIGIN,x
  2563 1C17 99 12 2B			sta adr.OBSTACLES,y
  2564 1C1A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2565 1C1C 99 13 2B			sta adr.OBSTACLES+1,y
  2566 1C1F CA				dex
  2567 1C20 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2568 1C24 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2569 1C28 A9 16			lda #$16
  2570 1C2A 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2571 1C2D A9 14			lda #$14
  2572 1C2F 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2573 1C32 20 36 13			jsr CALCOBSTACLEADDR
  2574 1C35 B4 17			ldy :STACKORIGIN-1,x
  2575 1C37 B5 18			lda :STACKORIGIN,x
  2576 1C39 99 12 2B			sta adr.OBSTACLES,y
  2577 1C3C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2578 1C3E 99 13 2B			sta adr.OBSTACLES+1,y
  2579 1C41 CA				dex
  2580 1C42 CA				dex
  2581 1C43			@exit
  2582 					.ifdef @new
  2583 					lda <@VarData
  2584 					sta :ztmp
  2585 					lda >@VarData
  2586 					ldy #@VarDataSize-1
  2587 					jmp @FreeMem
  2588 					els
  2589 1C43 60				rts						; ret
  2590 					eif
  2591 				.endl
  2592
  2593 1C44			.local	SETLEVEL01					; PROCEDURE
  2594
  2595 				; optimize OK (levels.inc), line = 17
  2596
  2597 1C44 A9 01			lda #$01
  2598 1C46 8D 3B 2B			sta SETPLAYER.ISALIVE
  2599 1C49 A9 62			lda #$62
  2600 1C4B 8D 3A 2B			sta SETPLAYER.COLOUR
  2601 1C4E A9 51			lda #$51
  2602 1C50 8D 39 2B			sta SETPLAYER.HEAD
  2603 1C53 A9 00			lda #$00
  2604 1C55 8D 38 2B			sta SETPLAYER.BRAIN
  2605 1C58 A9 08			lda #$08
  2606 1C5A 8D 37 2B			sta SETPLAYER.DIR
  2607 1C5D A9 0C			lda #$0C
  2608 1C5F 8D 36 2B			sta SETPLAYER.Y
  2609 1C62 A9 0A			lda #$0A
  2610 1C64 8D 35 2B			sta SETPLAYER.X
  2611 1C67 AD D4 2A			lda PLAYER1
  2612 1C6A 8D 33 2B			sta SETPLAYER.P
  2613 1C6D AD D5 2A			lda PLAYER1+1
  2614 1C70 8D 34 2B			sta SETPLAYER.P+1
  2615 1C73 20 5E 15			jsr SETPLAYER
  2616
  2617 				; optimize OK (levels.inc), line = 18
  2618
  2619 1C76 A9 01			lda #$01
  2620 1C78 8D 3B 2B			sta SETPLAYER.ISALIVE
  2621 1C7B A9 5D			lda #$5D
  2622 1C7D 8D 3A 2B			sta SETPLAYER.COLOUR
  2623 1C80 A9 51			lda #$51
  2624 1C82 8D 39 2B			sta SETPLAYER.HEAD
  2625 1C85 A9 01			lda #$01
  2626 1C87 8D 38 2B			sta SETPLAYER.BRAIN
  2627 1C8A A9 04			lda #$04
  2628 1C8C 8D 37 2B			sta SETPLAYER.DIR
  2629 1C8F A9 0C			lda #$0C
  2630 1C91 8D 36 2B			sta SETPLAYER.Y
  2631 1C94 A9 1E			lda #$1E
  2632 1C96 8D 35 2B			sta SETPLAYER.X
  2633 1C99 AD D6 2A			lda PLAYER2
  2634 1C9C 8D 33 2B			sta SETPLAYER.P
  2635 1C9F AD D7 2A			lda PLAYER2+1
  2636 1CA2 8D 34 2B			sta SETPLAYER.P+1
  2637 1CA5 20 5E 15			jsr SETPLAYER
  2638
  2639 				; optimize FAIL (1, levels.inc), line = 20
  2640
  2641 1CA8 E8				inx
  2642 1CA9 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2643 1CAD 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2644 1CAF A9 06			lda #$06
  2645 1CB1 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2646 1CB4 A9 0A			lda #$0A
  2647 1CB6 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2648 1CB9 20 36 13			jsr CALCOBSTACLEADDR
  2649 1CBC B4 17			ldy :STACKORIGIN-1,x
  2650 1CBE B5 18			lda :STACKORIGIN,x
  2651 1CC0 99 12 2B			sta adr.OBSTACLES,y
  2652 1CC3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2653 1CC5 99 13 2B			sta adr.OBSTACLES+1,y
  2654 1CC8 CA				dex
  2655 1CC9 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2656 1CCD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2657 1CD1 A9 06			lda #$06
  2658 1CD3 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2659 1CD6 A9 1E			lda #$1E
  2660 1CD8 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2661 1CDB 20 36 13			jsr CALCOBSTACLEADDR
  2662 1CDE B4 17			ldy :STACKORIGIN-1,x
  2663 1CE0 B5 18			lda :STACKORIGIN,x
  2664 1CE2 99 12 2B			sta adr.OBSTACLES,y
  2665 1CE5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2666 1CE7 99 13 2B			sta adr.OBSTACLES+1,y
  2667 1CEA CA				dex
  2668
  2669 				; optimize FAIL (1, levels.inc), line = 21
  2670
  2671 1CEB A9 04 95 18			mva #$04 :STACKORIGIN,x
  2672 1CEF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2673 1CF3 A9 12			lda #$12
  2674 1CF5 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2675 1CF8 A9 0A			lda #$0A
  2676 1CFA 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2677 1CFD 20 36 13			jsr CALCOBSTACLEADDR
  2678 1D00 B4 17			ldy :STACKORIGIN-1,x
  2679 1D02 B5 18			lda :STACKORIGIN,x
  2680 1D04 99 12 2B			sta adr.OBSTACLES,y
  2681 1D07 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2682 1D09 99 13 2B			sta adr.OBSTACLES+1,y
  2683 1D0C CA				dex
  2684 1D0D A9 06 95 18			mva #$06 :STACKORIGIN,x
  2685 1D11 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2686 1D15 A9 12			lda #$12
  2687 1D17 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2688 1D1A A9 1E			lda #$1E
  2689 1D1C 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2690 1D1F 20 36 13			jsr CALCOBSTACLEADDR
  2691 1D22 B4 17			ldy :STACKORIGIN-1,x
  2692 1D24 B5 18			lda :STACKORIGIN,x
  2693 1D26 99 12 2B			sta adr.OBSTACLES,y
  2694 1D29 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2695 1D2B 99 13 2B			sta adr.OBSTACLES+1,y
  2696 1D2E CA				dex
  2697
  2698 				; optimize FAIL (1, levels.inc), line = 22
  2699
  2700 1D2F A9 08 95 18			mva #$08 :STACKORIGIN,x
  2701 1D33 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2702 1D37 A9 02			lda #$02
  2703 1D39 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2704 1D3C A9 14			lda #$14
  2705 1D3E 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2706 1D41 20 36 13			jsr CALCOBSTACLEADDR
  2707 1D44 B4 17			ldy :STACKORIGIN-1,x
  2708 1D46 B5 18			lda :STACKORIGIN,x
  2709 1D48 99 12 2B			sta adr.OBSTACLES,y
  2710 1D4B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2711 1D4D 99 13 2B			sta adr.OBSTACLES+1,y
  2712 1D50 CA				dex
  2713 1D51 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2714 1D55 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2715 1D59 A9 16			lda #$16
  2716 1D5B 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2717 1D5E A9 14			lda #$14
  2718 1D60 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2719 1D63 20 36 13			jsr CALCOBSTACLEADDR
  2720 1D66 B4 17			ldy :STACKORIGIN-1,x
  2721 1D68 B5 18			lda :STACKORIGIN,x
  2722 1D6A 99 12 2B			sta adr.OBSTACLES,y
  2723 1D6D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2724 1D6F 99 13 2B			sta adr.OBSTACLES+1,y
  2725 1D72 CA				dex
  2726 1D73 CA				dex
  2727 1D74			@exit
  2728 					.ifdef @new
  2729 					lda <@VarData
  2730 					sta :ztmp
  2731 					lda >@VarData
  2732 					ldy #@VarDataSize-1
  2733 					jmp @FreeMem
  2734 					els
  2735 1D74 60				rts						; ret
  2736 					eif
  2737 				.endl
  2738
  2739 1D75			.local	SETLEVEL02					; PROCEDURE
  2740
  2741 				; optimize OK (levels.inc), line = 29
  2742
  2743 1D75 A9 01			lda #$01
  2744 1D77 8D 3B 2B			sta SETPLAYER.ISALIVE
  2745 1D7A A9 62			lda #$62
  2746 1D7C 8D 3A 2B			sta SETPLAYER.COLOUR
  2747 1D7F A9 51			lda #$51
  2748 1D81 8D 39 2B			sta SETPLAYER.HEAD
  2749 1D84 A9 00			lda #$00
  2750 1D86 8D 38 2B			sta SETPLAYER.BRAIN
  2751 1D89 A9 08			lda #$08
  2752 1D8B 8D 37 2B			sta SETPLAYER.DIR
  2753 1D8E A9 0C			lda #$0C
  2754 1D90 8D 36 2B			sta SETPLAYER.Y
  2755 1D93 A9 0A			lda #$0A
  2756 1D95 8D 35 2B			sta SETPLAYER.X
  2757 1D98 AD D4 2A			lda PLAYER1
  2758 1D9B 8D 33 2B			sta SETPLAYER.P
  2759 1D9E AD D5 2A			lda PLAYER1+1
  2760 1DA1 8D 34 2B			sta SETPLAYER.P+1
  2761 1DA4 20 5E 15			jsr SETPLAYER
  2762
  2763 				; optimize OK (levels.inc), line = 30
  2764
  2765 1DA7 A9 01			lda #$01
  2766 1DA9 8D 3B 2B			sta SETPLAYER.ISALIVE
  2767 1DAC A9 5D			lda #$5D
  2768 1DAE 8D 3A 2B			sta SETPLAYER.COLOUR
  2769 1DB1 A9 51			lda #$51
  2770 1DB3 8D 39 2B			sta SETPLAYER.HEAD
  2771 1DB6 A9 03			lda #$03
  2772 1DB8 8D 38 2B			sta SETPLAYER.BRAIN
  2773 1DBB A9 04			lda #$04
  2774 1DBD 8D 37 2B			sta SETPLAYER.DIR
  2775 1DC0 A9 0C			lda #$0C
  2776 1DC2 8D 36 2B			sta SETPLAYER.Y
  2777 1DC5 A9 1E			lda #$1E
  2778 1DC7 8D 35 2B			sta SETPLAYER.X
  2779 1DCA AD D6 2A			lda PLAYER2
  2780 1DCD 8D 33 2B			sta SETPLAYER.P
  2781 1DD0 AD D7 2A			lda PLAYER2+1
  2782 1DD3 8D 34 2B			sta SETPLAYER.P+1
  2783 1DD6 20 5E 15			jsr SETPLAYER
  2784
  2785 				; optimize FAIL (1, levels.inc), line = 32
  2786
  2787 1DD9 E8				inx
  2788 1DDA A9 00 95 18			mva #$00 :STACKORIGIN,x
  2789 1DDE 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2790 1DE0 A9 06			lda #$06
  2791 1DE2 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2792 1DE5 A9 0A			lda #$0A
  2793 1DE7 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2794 1DEA 20 36 13			jsr CALCOBSTACLEADDR
  2795 1DED B4 17			ldy :STACKORIGIN-1,x
  2796 1DEF B5 18			lda :STACKORIGIN,x
  2797 1DF1 99 12 2B			sta adr.OBSTACLES,y
  2798 1DF4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2799 1DF6 99 13 2B			sta adr.OBSTACLES+1,y
  2800 1DF9 CA				dex
  2801 1DFA A9 02 95 18			mva #$02 :STACKORIGIN,x
  2802 1DFE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2803 1E02 A9 06			lda #$06
  2804 1E04 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2805 1E07 A9 1E			lda #$1E
  2806 1E09 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2807 1E0C 20 36 13			jsr CALCOBSTACLEADDR
  2808 1E0F B4 17			ldy :STACKORIGIN-1,x
  2809 1E11 B5 18			lda :STACKORIGIN,x
  2810 1E13 99 12 2B			sta adr.OBSTACLES,y
  2811 1E16 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2812 1E18 99 13 2B			sta adr.OBSTACLES+1,y
  2813 1E1B CA				dex
  2814
  2815 				; optimize FAIL (1, levels.inc), line = 33
  2816
  2817 1E1C A9 04 95 18			mva #$04 :STACKORIGIN,x
  2818 1E20 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2819 1E24 A9 12			lda #$12
  2820 1E26 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2821 1E29 A9 0A			lda #$0A
  2822 1E2B 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2823 1E2E 20 36 13			jsr CALCOBSTACLEADDR
  2824 1E31 B4 17			ldy :STACKORIGIN-1,x
  2825 1E33 B5 18			lda :STACKORIGIN,x
  2826 1E35 99 12 2B			sta adr.OBSTACLES,y
  2827 1E38 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2828 1E3A 99 13 2B			sta adr.OBSTACLES+1,y
  2829 1E3D CA				dex
  2830 1E3E A9 06 95 18			mva #$06 :STACKORIGIN,x
  2831 1E42 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2832 1E46 A9 12			lda #$12
  2833 1E48 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2834 1E4B A9 1E			lda #$1E
  2835 1E4D 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2836 1E50 20 36 13			jsr CALCOBSTACLEADDR
  2837 1E53 B4 17			ldy :STACKORIGIN-1,x
  2838 1E55 B5 18			lda :STACKORIGIN,x
  2839 1E57 99 12 2B			sta adr.OBSTACLES,y
  2840 1E5A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2841 1E5C 99 13 2B			sta adr.OBSTACLES+1,y
  2842 1E5F CA				dex
  2843
  2844 				; optimize FAIL (1, levels.inc), line = 34
  2845
  2846 1E60 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2847 1E64 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2848 1E68 A9 02			lda #$02
  2849 1E6A 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2850 1E6D A9 14			lda #$14
  2851 1E6F 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2852 1E72 20 36 13			jsr CALCOBSTACLEADDR
  2853 1E75 B4 17			ldy :STACKORIGIN-1,x
  2854 1E77 B5 18			lda :STACKORIGIN,x
  2855 1E79 99 12 2B			sta adr.OBSTACLES,y
  2856 1E7C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2857 1E7E 99 13 2B			sta adr.OBSTACLES+1,y
  2858 1E81 CA				dex
  2859 1E82 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2860 1E86 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2861 1E8A A9 16			lda #$16
  2862 1E8C 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2863 1E8F A9 14			lda #$14
  2864 1E91 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2865 1E94 20 36 13			jsr CALCOBSTACLEADDR
  2866 1E97 B4 17			ldy :STACKORIGIN-1,x
  2867 1E99 B5 18			lda :STACKORIGIN,x
  2868 1E9B 99 12 2B			sta adr.OBSTACLES,y
  2869 1E9E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2870 1EA0 99 13 2B			sta adr.OBSTACLES+1,y
  2871 1EA3 CA				dex
  2872 1EA4 CA				dex
  2873 1EA5			@exit
  2874 					.ifdef @new
  2875 					lda <@VarData
  2876 					sta :ztmp
  2877 					lda >@VarData
  2878 					ldy #@VarDataSize-1
  2879 					jmp @FreeMem
  2880 					els
  2881 1EA5 60				rts						; ret
  2882 					eif
  2883 				.endl
  2884
  2885 1EA6			.local	SETLEVEL03					; PROCEDURE
  2886
  2887 				; optimize OK (levels.inc), line = 41
  2888
  2889 1EA6 A9 01			lda #$01
  2890 1EA8 8D 3B 2B			sta SETPLAYER.ISALIVE
  2891 1EAB A9 62			lda #$62
  2892 1EAD 8D 3A 2B			sta SETPLAYER.COLOUR
  2893 1EB0 A9 51			lda #$51
  2894 1EB2 8D 39 2B			sta SETPLAYER.HEAD
  2895 1EB5 A9 00			lda #$00
  2896 1EB7 8D 38 2B			sta SETPLAYER.BRAIN
  2897 1EBA A9 08			lda #$08
  2898 1EBC 8D 37 2B			sta SETPLAYER.DIR
  2899 1EBF A9 0C			lda #$0C
  2900 1EC1 8D 36 2B			sta SETPLAYER.Y
  2901 1EC4 A9 0A			lda #$0A
  2902 1EC6 8D 35 2B			sta SETPLAYER.X
  2903 1EC9 AD D4 2A			lda PLAYER1
  2904 1ECC 8D 33 2B			sta SETPLAYER.P
  2905 1ECF AD D5 2A			lda PLAYER1+1
  2906 1ED2 8D 34 2B			sta SETPLAYER.P+1
  2907 1ED5 20 5E 15			jsr SETPLAYER
  2908
  2909 				; optimize OK (levels.inc), line = 42
  2910
  2911 1ED8 A9 01			lda #$01
  2912 1EDA 8D 3B 2B			sta SETPLAYER.ISALIVE
  2913 1EDD A9 5D			lda #$5D
  2914 1EDF 8D 3A 2B			sta SETPLAYER.COLOUR
  2915 1EE2 A9 51			lda #$51
  2916 1EE4 8D 39 2B			sta SETPLAYER.HEAD
  2917 1EE7 A9 02			lda #$02
  2918 1EE9 8D 38 2B			sta SETPLAYER.BRAIN
  2919 1EEC A9 04			lda #$04
  2920 1EEE 8D 37 2B			sta SETPLAYER.DIR
  2921 1EF1 A9 0C			lda #$0C
  2922 1EF3 8D 36 2B			sta SETPLAYER.Y
  2923 1EF6 A9 1E			lda #$1E
  2924 1EF8 8D 35 2B			sta SETPLAYER.X
  2925 1EFB AD D6 2A			lda PLAYER2
  2926 1EFE 8D 33 2B			sta SETPLAYER.P
  2927 1F01 AD D7 2A			lda PLAYER2+1
  2928 1F04 8D 34 2B			sta SETPLAYER.P+1
  2929 1F07 20 5E 15			jsr SETPLAYER
  2930
  2931 				; optimize FAIL (1, levels.inc), line = 44
  2932
  2933 1F0A E8				inx
  2934 1F0B A9 00 95 18			mva #$00 :STACKORIGIN,x
  2935 1F0F 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2936 1F11 A9 06			lda #$06
  2937 1F13 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2938 1F16 A9 0A			lda #$0A
  2939 1F18 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2940 1F1B 20 36 13			jsr CALCOBSTACLEADDR
  2941 1F1E B4 17			ldy :STACKORIGIN-1,x
  2942 1F20 B5 18			lda :STACKORIGIN,x
  2943 1F22 99 12 2B			sta adr.OBSTACLES,y
  2944 1F25 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2945 1F27 99 13 2B			sta adr.OBSTACLES+1,y
  2946 1F2A CA				dex
  2947 1F2B A9 02 95 18			mva #$02 :STACKORIGIN,x
  2948 1F2F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2949 1F33 A9 06			lda #$06
  2950 1F35 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2951 1F38 A9 1E			lda #$1E
  2952 1F3A 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2953 1F3D 20 36 13			jsr CALCOBSTACLEADDR
  2954 1F40 B4 17			ldy :STACKORIGIN-1,x
  2955 1F42 B5 18			lda :STACKORIGIN,x
  2956 1F44 99 12 2B			sta adr.OBSTACLES,y
  2957 1F47 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2958 1F49 99 13 2B			sta adr.OBSTACLES+1,y
  2959 1F4C CA				dex
  2960
  2961 				; optimize FAIL (1, levels.inc), line = 45
  2962
  2963 1F4D A9 04 95 18			mva #$04 :STACKORIGIN,x
  2964 1F51 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2965 1F55 A9 12			lda #$12
  2966 1F57 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2967 1F5A A9 0A			lda #$0A
  2968 1F5C 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2969 1F5F 20 36 13			jsr CALCOBSTACLEADDR
  2970 1F62 B4 17			ldy :STACKORIGIN-1,x
  2971 1F64 B5 18			lda :STACKORIGIN,x
  2972 1F66 99 12 2B			sta adr.OBSTACLES,y
  2973 1F69 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2974 1F6B 99 13 2B			sta adr.OBSTACLES+1,y
  2975 1F6E CA				dex
  2976 1F6F A9 06 95 18			mva #$06 :STACKORIGIN,x
  2977 1F73 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2978 1F77 A9 12			lda #$12
  2979 1F79 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2980 1F7C A9 1E			lda #$1E
  2981 1F7E 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2982 1F81 20 36 13			jsr CALCOBSTACLEADDR
  2983 1F84 B4 17			ldy :STACKORIGIN-1,x
  2984 1F86 B5 18			lda :STACKORIGIN,x
  2985 1F88 99 12 2B			sta adr.OBSTACLES,y
  2986 1F8B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2987 1F8D 99 13 2B			sta adr.OBSTACLES+1,y
  2988 1F90 CA				dex
  2989
  2990 				; optimize FAIL (1, levels.inc), line = 46
  2991
  2992 1F91 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2993 1F95 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2994 1F99 A9 0C			lda #$0C
  2995 1F9B 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  2996 1F9E A9 01			lda #$01
  2997 1FA0 8D 2E 2B			sta CALCOBSTACLEADDR.X
  2998 1FA3 20 36 13			jsr CALCOBSTACLEADDR
  2999 1FA6 B4 17			ldy :STACKORIGIN-1,x
  3000 1FA8 B5 18			lda :STACKORIGIN,x
  3001 1FAA 99 12 2B			sta adr.OBSTACLES,y
  3002 1FAD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3003 1FAF 99 13 2B			sta adr.OBSTACLES+1,y
  3004 1FB2 CA				dex
  3005 1FB3 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3006 1FB7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3007 1FBB A9 02			lda #$02
  3008 1FBD 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3009 1FC0 A9 14			lda #$14
  3010 1FC2 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3011 1FC5 20 36 13			jsr CALCOBSTACLEADDR
  3012 1FC8 B4 17			ldy :STACKORIGIN-1,x
  3013 1FCA B5 18			lda :STACKORIGIN,x
  3014 1FCC 99 12 2B			sta adr.OBSTACLES,y
  3015 1FCF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3016 1FD1 99 13 2B			sta adr.OBSTACLES+1,y
  3017 1FD4 CA				dex
  3018
  3019 				; optimize FAIL (1, levels.inc), line = 47
  3020
  3021 1FD5 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3022 1FD9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3023 1FDD A9 16			lda #$16
  3024 1FDF 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3025 1FE2 A9 14			lda #$14
  3026 1FE4 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3027 1FE7 20 36 13			jsr CALCOBSTACLEADDR
  3028 1FEA B4 17			ldy :STACKORIGIN-1,x
  3029 1FEC B5 18			lda :STACKORIGIN,x
  3030 1FEE 99 12 2B			sta adr.OBSTACLES,y
  3031 1FF1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3032 1FF3 99 13 2B			sta adr.OBSTACLES+1,y
  3033 1FF6 CA				dex
  3034 1FF7 CA				dex
  3035 1FF8			@exit
  3036 					.ifdef @new
  3037 					lda <@VarData
  3038 					sta :ztmp
  3039 					lda >@VarData
  3040 					ldy #@VarDataSize-1
  3041 					jmp @FreeMem
  3042 					els
  3043 1FF8 60				rts						; ret
  3044 					eif
  3045 				.endl
  3046
  3047 1FF9			.local	SETLEVEL04					; PROCEDURE
  3048
  3049 				; optimize OK (levels.inc), line = 54
  3050
  3051 1FF9 A9 01			lda #$01
  3052 1FFB 8D 3B 2B			sta SETPLAYER.ISALIVE
  3053 1FFE A9 62			lda #$62
  3054 2000 8D 3A 2B			sta SETPLAYER.COLOUR
  3055 2003 A9 51			lda #$51
  3056 2005 8D 39 2B			sta SETPLAYER.HEAD
  3057 2008 A9 00			lda #$00
  3058 200A 8D 38 2B			sta SETPLAYER.BRAIN
  3059 200D A9 04			lda #$04
  3060 200F 8D 37 2B			sta SETPLAYER.DIR
  3061 2012 A9 0C			lda #$0C
  3062 2014 8D 36 2B			sta SETPLAYER.Y
  3063 2017 A9 12			lda #$12
  3064 2019 8D 35 2B			sta SETPLAYER.X
  3065 201C AD D4 2A			lda PLAYER1
  3066 201F 8D 33 2B			sta SETPLAYER.P
  3067 2022 AD D5 2A			lda PLAYER1+1
  3068 2025 8D 34 2B			sta SETPLAYER.P+1
  3069 2028 20 5E 15			jsr SETPLAYER
  3070
  3071 				; optimize OK (levels.inc), line = 55
  3072
  3073 202B A9 01			lda #$01
  3074 202D 8D 3B 2B			sta SETPLAYER.ISALIVE
  3075 2030 A9 5D			lda #$5D
  3076 2032 8D 3A 2B			sta SETPLAYER.COLOUR
  3077 2035 A9 51			lda #$51
  3078 2037 8D 39 2B			sta SETPLAYER.HEAD
  3079 203A A9 04			lda #$04
  3080 203C 8D 38 2B			sta SETPLAYER.BRAIN
  3081 203F A9 08			lda #$08
  3082 2041 8D 37 2B			sta SETPLAYER.DIR
  3083 2044 A9 0C			lda #$0C
  3084 2046 8D 36 2B			sta SETPLAYER.Y
  3085 2049 A9 16			lda #$16
  3086 204B 8D 35 2B			sta SETPLAYER.X
  3087 204E AD D6 2A			lda PLAYER2
  3088 2051 8D 33 2B			sta SETPLAYER.P
  3089 2054 AD D7 2A			lda PLAYER2+1
  3090 2057 8D 34 2B			sta SETPLAYER.P+1
  3091 205A 20 5E 15			jsr SETPLAYER
  3092
  3093 				; optimize FAIL (1, levels.inc), line = 57
  3094
  3095 205D E8				inx
  3096 205E A9 00 95 18			mva #$00 :STACKORIGIN,x
  3097 2062 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3098 2064 A9 06			lda #$06
  3099 2066 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3100 2069 A9 0A			lda #$0A
  3101 206B 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3102 206E 20 36 13			jsr CALCOBSTACLEADDR
  3103 2071 B4 17			ldy :STACKORIGIN-1,x
  3104 2073 B5 18			lda :STACKORIGIN,x
  3105 2075 99 12 2B			sta adr.OBSTACLES,y
  3106 2078 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3107 207A 99 13 2B			sta adr.OBSTACLES+1,y
  3108 207D CA				dex
  3109 207E A9 02 95 18			mva #$02 :STACKORIGIN,x
  3110 2082 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3111 2086 A9 06			lda #$06
  3112 2088 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3113 208B A9 1E			lda #$1E
  3114 208D 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3115 2090 20 36 13			jsr CALCOBSTACLEADDR
  3116 2093 B4 17			ldy :STACKORIGIN-1,x
  3117 2095 B5 18			lda :STACKORIGIN,x
  3118 2097 99 12 2B			sta adr.OBSTACLES,y
  3119 209A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3120 209C 99 13 2B			sta adr.OBSTACLES+1,y
  3121 209F CA				dex
  3122
  3123 				; optimize FAIL (1, levels.inc), line = 58
  3124
  3125 20A0 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3126 20A4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3127 20A8 A9 12			lda #$12
  3128 20AA 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3129 20AD A9 0A			lda #$0A
  3130 20AF 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3131 20B2 20 36 13			jsr CALCOBSTACLEADDR
  3132 20B5 B4 17			ldy :STACKORIGIN-1,x
  3133 20B7 B5 18			lda :STACKORIGIN,x
  3134 20B9 99 12 2B			sta adr.OBSTACLES,y
  3135 20BC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3136 20BE 99 13 2B			sta adr.OBSTACLES+1,y
  3137 20C1 CA				dex
  3138 20C2 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3139 20C6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3140 20CA A9 12			lda #$12
  3141 20CC 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3142 20CF A9 1E			lda #$1E
  3143 20D1 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3144 20D4 20 36 13			jsr CALCOBSTACLEADDR
  3145 20D7 B4 17			ldy :STACKORIGIN-1,x
  3146 20D9 B5 18			lda :STACKORIGIN,x
  3147 20DB 99 12 2B			sta adr.OBSTACLES,y
  3148 20DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3149 20E0 99 13 2B			sta adr.OBSTACLES+1,y
  3150 20E3 CA				dex
  3151
  3152 				; optimize FAIL (1, levels.inc), line = 59
  3153
  3154 20E4 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3155 20E8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3156 20EC A9 0C			lda #$0C
  3157 20EE 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3158 20F1 A9 01			lda #$01
  3159 20F3 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3160 20F6 20 36 13			jsr CALCOBSTACLEADDR
  3161 20F9 B4 17			ldy :STACKORIGIN-1,x
  3162 20FB B5 18			lda :STACKORIGIN,x
  3163 20FD 99 12 2B			sta adr.OBSTACLES,y
  3164 2100 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3165 2102 99 13 2B			sta adr.OBSTACLES+1,y
  3166 2105 CA				dex
  3167 2106 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3168 210A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3169 210E A9 02			lda #$02
  3170 2110 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3171 2113 A9 14			lda #$14
  3172 2115 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3173 2118 20 36 13			jsr CALCOBSTACLEADDR
  3174 211B B4 17			ldy :STACKORIGIN-1,x
  3175 211D B5 18			lda :STACKORIGIN,x
  3176 211F 99 12 2B			sta adr.OBSTACLES,y
  3177 2122 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3178 2124 99 13 2B			sta adr.OBSTACLES+1,y
  3179 2127 CA				dex
  3180
  3181 				; optimize FAIL (1, levels.inc), line = 60
  3182
  3183 2128 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3184 212C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3185 2130 A9 16			lda #$16
  3186 2132 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3187 2135 A9 14			lda #$14
  3188 2137 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3189 213A 20 36 13			jsr CALCOBSTACLEADDR
  3190 213D B4 17			ldy :STACKORIGIN-1,x
  3191 213F B5 18			lda :STACKORIGIN,x
  3192 2141 99 12 2B			sta adr.OBSTACLES,y
  3193 2144 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3194 2146 99 13 2B			sta adr.OBSTACLES+1,y
  3195 2149 CA				dex
  3196 214A A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3197 214E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3198 2152 A9 0C			lda #$0C
  3199 2154 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3200 2157 A9 14			lda #$14
  3201 2159 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3202 215C 20 36 13			jsr CALCOBSTACLEADDR
  3203 215F B4 17			ldy :STACKORIGIN-1,x
  3204 2161 B5 18			lda :STACKORIGIN,x
  3205 2163 99 12 2B			sta adr.OBSTACLES,y
  3206 2166 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3207 2168 99 13 2B			sta adr.OBSTACLES+1,y
  3208 216B CA				dex
  3209 216C CA				dex
  3210 216D			@exit
  3211 					.ifdef @new
  3212 					lda <@VarData
  3213 					sta :ztmp
  3214 					lda >@VarData
  3215 					ldy #@VarDataSize-1
  3216 					jmp @FreeMem
  3217 					els
  3218 216D 60				rts						; ret
  3219 					eif
  3220 				.endl
  3221
  3222 216E			.local	SETLEVEL05					; PROCEDURE
  3223
  3224 				; optimize OK (levels.inc), line = 67
  3225
  3226 216E A9 01			lda #$01
  3227 2170 8D 3B 2B			sta SETPLAYER.ISALIVE
  3228 2173 A9 62			lda #$62
  3229 2175 8D 3A 2B			sta SETPLAYER.COLOUR
  3230 2178 A9 51			lda #$51
  3231 217A 8D 39 2B			sta SETPLAYER.HEAD
  3232 217D A9 00			lda #$00
  3233 217F 8D 38 2B			sta SETPLAYER.BRAIN
  3234 2182 A9 08			lda #$08
  3235 2184 8D 37 2B			sta SETPLAYER.DIR
  3236 2187 A9 0C			lda #$0C
  3237 2189 8D 36 2B			sta SETPLAYER.Y
  3238 218C A9 0A			lda #$0A
  3239 218E 8D 35 2B			sta SETPLAYER.X
  3240 2191 AD D4 2A			lda PLAYER1
  3241 2194 8D 33 2B			sta SETPLAYER.P
  3242 2197 AD D5 2A			lda PLAYER1+1
  3243 219A 8D 34 2B			sta SETPLAYER.P+1
  3244 219D 20 5E 15			jsr SETPLAYER
  3245
  3246 				; optimize OK (levels.inc), line = 68
  3247
  3248 21A0 A9 01			lda #$01
  3249 21A2 8D 3B 2B			sta SETPLAYER.ISALIVE
  3250 21A5 A9 5D			lda #$5D
  3251 21A7 8D 3A 2B			sta SETPLAYER.COLOUR
  3252 21AA A9 51			lda #$51
  3253 21AC 8D 39 2B			sta SETPLAYER.HEAD
  3254 21AF A9 04			lda #$04
  3255 21B1 8D 38 2B			sta SETPLAYER.BRAIN
  3256 21B4 8D 37 2B			sta SETPLAYER.DIR
  3257 21B7 A9 0C			lda #$0C
  3258 21B9 8D 36 2B			sta SETPLAYER.Y
  3259 21BC A9 1E			lda #$1E
  3260 21BE 8D 35 2B			sta SETPLAYER.X
  3261 21C1 AD D6 2A			lda PLAYER2
  3262 21C4 8D 33 2B			sta SETPLAYER.P
  3263 21C7 AD D7 2A			lda PLAYER2+1
  3264 21CA 8D 34 2B			sta SETPLAYER.P+1
  3265 21CD 20 5E 15			jsr SETPLAYER
  3266
  3267 				; optimize OK (levels.inc), line = 69
  3268
  3269 21D0 A9 01			lda #$01
  3270 21D2 8D 3B 2B			sta SETPLAYER.ISALIVE
  3271 21D5 A9 71			lda #$71
  3272 21D7 8D 3A 2B			sta SETPLAYER.COLOUR
  3273 21DA A9 51			lda #$51
  3274 21DC 8D 39 2B			sta SETPLAYER.HEAD
  3275 21DF A9 03			lda #$03
  3276 21E1 8D 38 2B			sta SETPLAYER.BRAIN
  3277 21E4 A9 02			lda #$02
  3278 21E6 8D 37 2B			sta SETPLAYER.DIR
  3279 21E9 A9 04			lda #$04
  3280 21EB 8D 36 2B			sta SETPLAYER.Y
  3281 21EE A9 14			lda #$14
  3282 21F0 8D 35 2B			sta SETPLAYER.X
  3283 21F3 AD D8 2A			lda PLAYER3
  3284 21F6 8D 33 2B			sta SETPLAYER.P
  3285 21F9 AD D9 2A			lda PLAYER3+1
  3286 21FC 8D 34 2B			sta SETPLAYER.P+1
  3287 21FF 20 5E 15			jsr SETPLAYER
  3288
  3289 				; optimize OK (levels.inc), line = 70
  3290
  3291 2202 A9 01			lda #$01
  3292 2204 8D 3B 2B			sta SETPLAYER.ISALIVE
  3293 2207 A9 55			lda #$55
  3294 2209 8D 3A 2B			sta SETPLAYER.COLOUR
  3295 220C A9 51			lda #$51
  3296 220E 8D 39 2B			sta SETPLAYER.HEAD
  3297 2211 A9 02			lda #$02
  3298 2213 8D 38 2B			sta SETPLAYER.BRAIN
  3299 2216 A9 01			lda #$01
  3300 2218 8D 37 2B			sta SETPLAYER.DIR
  3301 221B A9 12			lda #$12
  3302 221D 8D 36 2B			sta SETPLAYER.Y
  3303 2220 A9 14			lda #$14
  3304 2222 8D 35 2B			sta SETPLAYER.X
  3305 2225 AD DA 2A			lda PLAYER4
  3306 2228 8D 33 2B			sta SETPLAYER.P
  3307 222B AD DB 2A			lda PLAYER4+1
  3308 222E 8D 34 2B			sta SETPLAYER.P+1
  3309 2231 20 5E 15			jsr SETPLAYER
  3310
  3311 				; optimize FAIL (1, levels.inc), line = 72
  3312
  3313 2234 E8				inx
  3314 2235 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3315 2239 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3316 223B A9 06			lda #$06
  3317 223D 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3318 2240 A9 0A			lda #$0A
  3319 2242 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3320 2245 20 36 13			jsr CALCOBSTACLEADDR
  3321 2248 B4 17			ldy :STACKORIGIN-1,x
  3322 224A B5 18			lda :STACKORIGIN,x
  3323 224C 99 12 2B			sta adr.OBSTACLES,y
  3324 224F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3325 2251 99 13 2B			sta adr.OBSTACLES+1,y
  3326 2254 CA				dex
  3327 2255 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3328 2259 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3329 225D A9 06			lda #$06
  3330 225F 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3331 2262 A9 1E			lda #$1E
  3332 2264 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3333 2267 20 36 13			jsr CALCOBSTACLEADDR
  3334 226A B4 17			ldy :STACKORIGIN-1,x
  3335 226C B5 18			lda :STACKORIGIN,x
  3336 226E 99 12 2B			sta adr.OBSTACLES,y
  3337 2271 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3338 2273 99 13 2B			sta adr.OBSTACLES+1,y
  3339 2276 CA				dex
  3340
  3341 				; optimize FAIL (1, levels.inc), line = 73
  3342
  3343 2277 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3344 227B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3345 227F A9 12			lda #$12
  3346 2281 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3347 2284 A9 0A			lda #$0A
  3348 2286 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3349 2289 20 36 13			jsr CALCOBSTACLEADDR
  3350 228C B4 17			ldy :STACKORIGIN-1,x
  3351 228E B5 18			lda :STACKORIGIN,x
  3352 2290 99 12 2B			sta adr.OBSTACLES,y
  3353 2293 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3354 2295 99 13 2B			sta adr.OBSTACLES+1,y
  3355 2298 CA				dex
  3356 2299 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3357 229D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3358 22A1 A9 12			lda #$12
  3359 22A3 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3360 22A6 A9 1E			lda #$1E
  3361 22A8 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3362 22AB 20 36 13			jsr CALCOBSTACLEADDR
  3363 22AE B4 17			ldy :STACKORIGIN-1,x
  3364 22B0 B5 18			lda :STACKORIGIN,x
  3365 22B2 99 12 2B			sta adr.OBSTACLES,y
  3366 22B5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3367 22B7 99 13 2B			sta adr.OBSTACLES+1,y
  3368 22BA CA				dex
  3369
  3370 				; optimize FAIL (1, levels.inc), line = 74
  3371
  3372 22BB A9 08 95 18			mva #$08 :STACKORIGIN,x
  3373 22BF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3374 22C3 A9 0C			lda #$0C
  3375 22C5 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3376 22C8 A9 01			lda #$01
  3377 22CA 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3378 22CD 20 36 13			jsr CALCOBSTACLEADDR
  3379 22D0 B4 17			ldy :STACKORIGIN-1,x
  3380 22D2 B5 18			lda :STACKORIGIN,x
  3381 22D4 99 12 2B			sta adr.OBSTACLES,y
  3382 22D7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3383 22D9 99 13 2B			sta adr.OBSTACLES+1,y
  3384 22DC CA				dex
  3385 22DD A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3386 22E1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3387 22E5 A9 02			lda #$02
  3388 22E7 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3389 22EA A9 14			lda #$14
  3390 22EC 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3391 22EF 20 36 13			jsr CALCOBSTACLEADDR
  3392 22F2 B4 17			ldy :STACKORIGIN-1,x
  3393 22F4 B5 18			lda :STACKORIGIN,x
  3394 22F6 99 12 2B			sta adr.OBSTACLES,y
  3395 22F9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3396 22FB 99 13 2B			sta adr.OBSTACLES+1,y
  3397 22FE CA				dex
  3398
  3399 				; optimize FAIL (1, levels.inc), line = 75
  3400
  3401 22FF A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3402 2303 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3403 2307 A9 16			lda #$16
  3404 2309 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3405 230C A9 14			lda #$14
  3406 230E 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3407 2311 20 36 13			jsr CALCOBSTACLEADDR
  3408 2314 B4 17			ldy :STACKORIGIN-1,x
  3409 2316 B5 18			lda :STACKORIGIN,x
  3410 2318 99 12 2B			sta adr.OBSTACLES,y
  3411 231B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3412 231D 99 13 2B			sta adr.OBSTACLES+1,y
  3413 2320 CA				dex
  3414 2321 CA				dex
  3415 2322			@exit
  3416 					.ifdef @new
  3417 					lda <@VarData
  3418 					sta :ztmp
  3419 					lda >@VarData
  3420 					ldy #@VarDataSize-1
  3421 					jmp @FreeMem
  3422 					els
  3423 2322 60				rts						; ret
  3424 					eif
  3425 				.endl
  3426
  3427 2323			.local	SETLEVEL06					; PROCEDURE
  3428
  3429 				; optimize OK (levels.inc), line = 82
  3430
  3431 2323 A9 01			lda #$01
  3432 2325 8D 3B 2B			sta SETPLAYER.ISALIVE
  3433 2328 A9 62			lda #$62
  3434 232A 8D 3A 2B			sta SETPLAYER.COLOUR
  3435 232D A9 51			lda #$51
  3436 232F 8D 39 2B			sta SETPLAYER.HEAD
  3437 2332 A9 00			lda #$00
  3438 2334 8D 38 2B			sta SETPLAYER.BRAIN
  3439 2337 A9 04			lda #$04
  3440 2339 8D 37 2B			sta SETPLAYER.DIR
  3441 233C A9 0C			lda #$0C
  3442 233E 8D 36 2B			sta SETPLAYER.Y
  3443 2341 A9 12			lda #$12
  3444 2343 8D 35 2B			sta SETPLAYER.X
  3445 2346 AD D4 2A			lda PLAYER1
  3446 2349 8D 33 2B			sta SETPLAYER.P
  3447 234C AD D5 2A			lda PLAYER1+1
  3448 234F 8D 34 2B			sta SETPLAYER.P+1
  3449 2352 20 5E 15			jsr SETPLAYER
  3450
  3451 				; optimize OK (levels.inc), line = 83
  3452
  3453 2355 A9 01			lda #$01
  3454 2357 8D 3B 2B			sta SETPLAYER.ISALIVE
  3455 235A A9 5D			lda #$5D
  3456 235C 8D 3A 2B			sta SETPLAYER.COLOUR
  3457 235F A9 51			lda #$51
  3458 2361 8D 39 2B			sta SETPLAYER.HEAD
  3459 2364 A9 02			lda #$02
  3460 2366 8D 38 2B			sta SETPLAYER.BRAIN
  3461 2369 A9 08			lda #$08
  3462 236B 8D 37 2B			sta SETPLAYER.DIR
  3463 236E A9 0C			lda #$0C
  3464 2370 8D 36 2B			sta SETPLAYER.Y
  3465 2373 A9 16			lda #$16
  3466 2375 8D 35 2B			sta SETPLAYER.X
  3467 2378 AD D6 2A			lda PLAYER2
  3468 237B 8D 33 2B			sta SETPLAYER.P
  3469 237E AD D7 2A			lda PLAYER2+1
  3470 2381 8D 34 2B			sta SETPLAYER.P+1
  3471 2384 20 5E 15			jsr SETPLAYER
  3472
  3473 				; optimize OK (levels.inc), line = 84
  3474
  3475 2387 A9 01			lda #$01
  3476 2389 8D 3B 2B			sta SETPLAYER.ISALIVE
  3477 238C A9 71			lda #$71
  3478 238E 8D 3A 2B			sta SETPLAYER.COLOUR
  3479 2391 A9 51			lda #$51
  3480 2393 8D 39 2B			sta SETPLAYER.HEAD
  3481 2396 A9 02			lda #$02
  3482 2398 8D 38 2B			sta SETPLAYER.BRAIN
  3483 239B 8D 37 2B			sta SETPLAYER.DIR
  3484 239E A9 06			lda #$06
  3485 23A0 8D 36 2B			sta SETPLAYER.Y
  3486 23A3 8D 35 2B			sta SETPLAYER.X
  3487 23A6 AD D8 2A			lda PLAYER3
  3488 23A9 8D 33 2B			sta SETPLAYER.P
  3489 23AC AD D9 2A			lda PLAYER3+1
  3490 23AF 8D 34 2B			sta SETPLAYER.P+1
  3491 23B2 20 5E 15			jsr SETPLAYER
  3492
  3493 				; optimize OK (levels.inc), line = 85
  3494
  3495 23B5 A9 01			lda #$01
  3496 23B7 8D 3B 2B			sta SETPLAYER.ISALIVE
  3497 23BA A9 55			lda #$55
  3498 23BC 8D 3A 2B			sta SETPLAYER.COLOUR
  3499 23BF A9 51			lda #$51
  3500 23C1 8D 39 2B			sta SETPLAYER.HEAD
  3501 23C4 A9 03			lda #$03
  3502 23C6 8D 38 2B			sta SETPLAYER.BRAIN
  3503 23C9 A9 08			lda #$08
  3504 23CB 8D 37 2B			sta SETPLAYER.DIR
  3505 23CE A9 12			lda #$12
  3506 23D0 8D 36 2B			sta SETPLAYER.Y
  3507 23D3 A9 24			lda #$24
  3508 23D5 8D 35 2B			sta SETPLAYER.X
  3509 23D8 AD DA 2A			lda PLAYER4
  3510 23DB 8D 33 2B			sta SETPLAYER.P
  3511 23DE AD DB 2A			lda PLAYER4+1
  3512 23E1 8D 34 2B			sta SETPLAYER.P+1
  3513 23E4 20 5E 15			jsr SETPLAYER
  3514
  3515 				; optimize FAIL (1, levels.inc), line = 87
  3516
  3517 23E7 E8				inx
  3518 23E8 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3519 23EC 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3520 23EE A9 06			lda #$06
  3521 23F0 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3522 23F3 A9 0A			lda #$0A
  3523 23F5 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3524 23F8 20 36 13			jsr CALCOBSTACLEADDR
  3525 23FB B4 17			ldy :STACKORIGIN-1,x
  3526 23FD B5 18			lda :STACKORIGIN,x
  3527 23FF 99 12 2B			sta adr.OBSTACLES,y
  3528 2402 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3529 2404 99 13 2B			sta adr.OBSTACLES+1,y
  3530 2407 CA				dex
  3531 2408 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3532 240C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3533 2410 A9 06			lda #$06
  3534 2412 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3535 2415 A9 1E			lda #$1E
  3536 2417 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3537 241A 20 36 13			jsr CALCOBSTACLEADDR
  3538 241D B4 17			ldy :STACKORIGIN-1,x
  3539 241F B5 18			lda :STACKORIGIN,x
  3540 2421 99 12 2B			sta adr.OBSTACLES,y
  3541 2424 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3542 2426 99 13 2B			sta adr.OBSTACLES+1,y
  3543 2429 CA				dex
  3544
  3545 				; optimize FAIL (1, levels.inc), line = 88
  3546
  3547 242A A9 04 95 18			mva #$04 :STACKORIGIN,x
  3548 242E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3549 2432 A9 12			lda #$12
  3550 2434 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3551 2437 A9 0A			lda #$0A
  3552 2439 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3553 243C 20 36 13			jsr CALCOBSTACLEADDR
  3554 243F B4 17			ldy :STACKORIGIN-1,x
  3555 2441 B5 18			lda :STACKORIGIN,x
  3556 2443 99 12 2B			sta adr.OBSTACLES,y
  3557 2446 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3558 2448 99 13 2B			sta adr.OBSTACLES+1,y
  3559 244B CA				dex
  3560 244C A9 06 95 18			mva #$06 :STACKORIGIN,x
  3561 2450 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3562 2454 A9 12			lda #$12
  3563 2456 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3564 2459 A9 1E			lda #$1E
  3565 245B 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3566 245E 20 36 13			jsr CALCOBSTACLEADDR
  3567 2461 B4 17			ldy :STACKORIGIN-1,x
  3568 2463 B5 18			lda :STACKORIGIN,x
  3569 2465 99 12 2B			sta adr.OBSTACLES,y
  3570 2468 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3571 246A 99 13 2B			sta adr.OBSTACLES+1,y
  3572 246D CA				dex
  3573
  3574 				; optimize FAIL (1, levels.inc), line = 89
  3575
  3576 246E A9 08 95 18			mva #$08 :STACKORIGIN,x
  3577 2472 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3578 2476 A9 0C			lda #$0C
  3579 2478 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3580 247B A9 01			lda #$01
  3581 247D 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3582 2480 20 36 13			jsr CALCOBSTACLEADDR
  3583 2483 B4 17			ldy :STACKORIGIN-1,x
  3584 2485 B5 18			lda :STACKORIGIN,x
  3585 2487 99 12 2B			sta adr.OBSTACLES,y
  3586 248A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3587 248C 99 13 2B			sta adr.OBSTACLES+1,y
  3588 248F CA				dex
  3589 2490 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3590 2494 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3591 2498 A9 02			lda #$02
  3592 249A 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3593 249D A9 14			lda #$14
  3594 249F 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3595 24A2 20 36 13			jsr CALCOBSTACLEADDR
  3596 24A5 B4 17			ldy :STACKORIGIN-1,x
  3597 24A7 B5 18			lda :STACKORIGIN,x
  3598 24A9 99 12 2B			sta adr.OBSTACLES,y
  3599 24AC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3600 24AE 99 13 2B			sta adr.OBSTACLES+1,y
  3601 24B1 CA				dex
  3602
  3603 				; optimize FAIL (1, levels.inc), line = 90
  3604
  3605 24B2 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3606 24B6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3607 24BA A9 16			lda #$16
  3608 24BC 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3609 24BF A9 14			lda #$14
  3610 24C1 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3611 24C4 20 36 13			jsr CALCOBSTACLEADDR
  3612 24C7 B4 17			ldy :STACKORIGIN-1,x
  3613 24C9 B5 18			lda :STACKORIGIN,x
  3614 24CB 99 12 2B			sta adr.OBSTACLES,y
  3615 24CE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3616 24D0 99 13 2B			sta adr.OBSTACLES+1,y
  3617 24D3 CA				dex
  3618 24D4 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3619 24D8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3620 24DC A9 0C			lda #$0C
  3621 24DE 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3622 24E1 A9 14			lda #$14
  3623 24E3 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3624 24E6 20 36 13			jsr CALCOBSTACLEADDR
  3625 24E9 B4 17			ldy :STACKORIGIN-1,x
  3626 24EB B5 18			lda :STACKORIGIN,x
  3627 24ED 99 12 2B			sta adr.OBSTACLES,y
  3628 24F0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3629 24F2 99 13 2B			sta adr.OBSTACLES+1,y
  3630 24F5 CA				dex
  3631 24F6 CA				dex
  3632 24F7			@exit
  3633 					.ifdef @new
  3634 					lda <@VarData
  3635 					sta :ztmp
  3636 					lda >@VarData
  3637 					ldy #@VarDataSize-1
  3638 					jmp @FreeMem
  3639 					els
  3640 24F7 60				rts						; ret
  3641 					eif
  3642 				.endl
  3643
  3644 24F8			.local	SETLEVEL07					; PROCEDURE
  3645
  3646 				; optimize OK (levels.inc), line = 97
  3647
  3648 24F8 A9 01			lda #$01
  3649 24FA 8D 3B 2B			sta SETPLAYER.ISALIVE
  3650 24FD A9 62			lda #$62
  3651 24FF 8D 3A 2B			sta SETPLAYER.COLOUR
  3652 2502 A9 51			lda #$51
  3653 2504 8D 39 2B			sta SETPLAYER.HEAD
  3654 2507 A9 00			lda #$00
  3655 2509 8D 38 2B			sta SETPLAYER.BRAIN
  3656 250C A9 04			lda #$04
  3657 250E 8D 37 2B			sta SETPLAYER.DIR
  3658 2511 A9 0C			lda #$0C
  3659 2513 8D 36 2B			sta SETPLAYER.Y
  3660 2516 A9 12			lda #$12
  3661 2518 8D 35 2B			sta SETPLAYER.X
  3662 251B AD D4 2A			lda PLAYER1
  3663 251E 8D 33 2B			sta SETPLAYER.P
  3664 2521 AD D5 2A			lda PLAYER1+1
  3665 2524 8D 34 2B			sta SETPLAYER.P+1
  3666 2527 20 5E 15			jsr SETPLAYER
  3667
  3668 				; optimize OK (levels.inc), line = 98
  3669
  3670 252A A9 01			lda #$01
  3671 252C 8D 3B 2B			sta SETPLAYER.ISALIVE
  3672 252F A9 5D			lda #$5D
  3673 2531 8D 3A 2B			sta SETPLAYER.COLOUR
  3674 2534 A9 51			lda #$51
  3675 2536 8D 39 2B			sta SETPLAYER.HEAD
  3676 2539 A9 03			lda #$03
  3677 253B 8D 38 2B			sta SETPLAYER.BRAIN
  3678 253E A9 08			lda #$08
  3679 2540 8D 37 2B			sta SETPLAYER.DIR
  3680 2543 A9 17			lda #$17
  3681 2545 8D 36 2B			sta SETPLAYER.Y
  3682 2548 A9 01			lda #$01
  3683 254A 8D 35 2B			sta SETPLAYER.X
  3684 254D AD D6 2A			lda PLAYER2
  3685 2550 8D 33 2B			sta SETPLAYER.P
  3686 2553 AD D7 2A			lda PLAYER2+1
  3687 2556 8D 34 2B			sta SETPLAYER.P+1
  3688 2559 20 5E 15			jsr SETPLAYER
  3689
  3690 				; optimize OK (levels.inc), line = 99
  3691
  3692 255C A9 01			lda #$01
  3693 255E 8D 3B 2B			sta SETPLAYER.ISALIVE
  3694 2561 A9 71			lda #$71
  3695 2563 8D 3A 2B			sta SETPLAYER.COLOUR
  3696 2566 A9 51			lda #$51
  3697 2568 8D 39 2B			sta SETPLAYER.HEAD
  3698 256B A9 03			lda #$03
  3699 256D 8D 38 2B			sta SETPLAYER.BRAIN
  3700 2570 A9 02			lda #$02
  3701 2572 8D 37 2B			sta SETPLAYER.DIR
  3702 2575 A9 04			lda #$04
  3703 2577 8D 36 2B			sta SETPLAYER.Y
  3704 257A A9 1E			lda #$1E
  3705 257C 8D 35 2B			sta SETPLAYER.X
  3706 257F AD D8 2A			lda PLAYER3
  3707 2582 8D 33 2B			sta SETPLAYER.P
  3708 2585 AD D9 2A			lda PLAYER3+1
  3709 2588 8D 34 2B			sta SETPLAYER.P+1
  3710 258B 20 5E 15			jsr SETPLAYER
  3711
  3712 				; optimize OK (levels.inc), line = 100
  3713
  3714 258E A9 01			lda #$01
  3715 2590 8D 3B 2B			sta SETPLAYER.ISALIVE
  3716 2593 A9 55			lda #$55
  3717 2595 8D 3A 2B			sta SETPLAYER.COLOUR
  3718 2598 A9 51			lda #$51
  3719 259A 8D 39 2B			sta SETPLAYER.HEAD
  3720 259D A9 02			lda #$02
  3721 259F 8D 38 2B			sta SETPLAYER.BRAIN
  3722 25A2 A9 01			lda #$01
  3723 25A4 8D 37 2B			sta SETPLAYER.DIR
  3724 25A7 A9 15			lda #$15
  3725 25A9 8D 36 2B			sta SETPLAYER.Y
  3726 25AC A9 24			lda #$24
  3727 25AE 8D 35 2B			sta SETPLAYER.X
  3728 25B1 AD DA 2A			lda PLAYER4
  3729 25B4 8D 33 2B			sta SETPLAYER.P
  3730 25B7 AD DB 2A			lda PLAYER4+1
  3731 25BA 8D 34 2B			sta SETPLAYER.P+1
  3732 25BD 20 5E 15			jsr SETPLAYER
  3733
  3734 				; optimize FAIL (1, levels.inc), line = 102
  3735
  3736 25C0 E8				inx
  3737 25C1 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3738 25C5 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3739 25C7 A9 06			lda #$06
  3740 25C9 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3741 25CC A9 0A			lda #$0A
  3742 25CE 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3743 25D1 20 36 13			jsr CALCOBSTACLEADDR
  3744 25D4 B4 17			ldy :STACKORIGIN-1,x
  3745 25D6 B5 18			lda :STACKORIGIN,x
  3746 25D8 99 12 2B			sta adr.OBSTACLES,y
  3747 25DB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3748 25DD 99 13 2B			sta adr.OBSTACLES+1,y
  3749 25E0 CA				dex
  3750 25E1 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3751 25E5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3752 25E9 A9 06			lda #$06
  3753 25EB 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3754 25EE A9 1E			lda #$1E
  3755 25F0 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3756 25F3 20 36 13			jsr CALCOBSTACLEADDR
  3757 25F6 B4 17			ldy :STACKORIGIN-1,x
  3758 25F8 B5 18			lda :STACKORIGIN,x
  3759 25FA 99 12 2B			sta adr.OBSTACLES,y
  3760 25FD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3761 25FF 99 13 2B			sta adr.OBSTACLES+1,y
  3762 2602 CA				dex
  3763
  3764 				; optimize FAIL (1, levels.inc), line = 103
  3765
  3766 2603 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3767 2607 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3768 260B A9 12			lda #$12
  3769 260D 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3770 2610 A9 0A			lda #$0A
  3771 2612 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3772 2615 20 36 13			jsr CALCOBSTACLEADDR
  3773 2618 B4 17			ldy :STACKORIGIN-1,x
  3774 261A B5 18			lda :STACKORIGIN,x
  3775 261C 99 12 2B			sta adr.OBSTACLES,y
  3776 261F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3777 2621 99 13 2B			sta adr.OBSTACLES+1,y
  3778 2624 CA				dex
  3779 2625 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3780 2629 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3781 262D A9 12			lda #$12
  3782 262F 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3783 2632 A9 1E			lda #$1E
  3784 2634 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3785 2637 20 36 13			jsr CALCOBSTACLEADDR
  3786 263A B4 17			ldy :STACKORIGIN-1,x
  3787 263C B5 18			lda :STACKORIGIN,x
  3788 263E 99 12 2B			sta adr.OBSTACLES,y
  3789 2641 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3790 2643 99 13 2B			sta adr.OBSTACLES+1,y
  3791 2646 CA				dex
  3792
  3793 				; optimize FAIL (1, levels.inc), line = 104
  3794
  3795 2647 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3796 264B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3797 264F A9 0C			lda #$0C
  3798 2651 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3799 2654 A9 01			lda #$01
  3800 2656 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3801 2659 20 36 13			jsr CALCOBSTACLEADDR
  3802 265C B4 17			ldy :STACKORIGIN-1,x
  3803 265E B5 18			lda :STACKORIGIN,x
  3804 2660 99 12 2B			sta adr.OBSTACLES,y
  3805 2663 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3806 2665 99 13 2B			sta adr.OBSTACLES+1,y
  3807 2668 CA				dex
  3808 2669 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3809 266D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3810 2671 A9 02			lda #$02
  3811 2673 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3812 2676 A9 14			lda #$14
  3813 2678 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3814 267B 20 36 13			jsr CALCOBSTACLEADDR
  3815 267E B4 17			ldy :STACKORIGIN-1,x
  3816 2680 B5 18			lda :STACKORIGIN,x
  3817 2682 99 12 2B			sta adr.OBSTACLES,y
  3818 2685 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3819 2687 99 13 2B			sta adr.OBSTACLES+1,y
  3820 268A CA				dex
  3821
  3822 				; optimize FAIL (1, levels.inc), line = 105
  3823
  3824 268B A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3825 268F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3826 2693 A9 16			lda #$16
  3827 2695 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3828 2698 A9 14			lda #$14
  3829 269A 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3830 269D 20 36 13			jsr CALCOBSTACLEADDR
  3831 26A0 B4 17			ldy :STACKORIGIN-1,x
  3832 26A2 B5 18			lda :STACKORIGIN,x
  3833 26A4 99 12 2B			sta adr.OBSTACLES,y
  3834 26A7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3835 26A9 99 13 2B			sta adr.OBSTACLES+1,y
  3836 26AC CA				dex
  3837 26AD A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3838 26B1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3839 26B5 A9 0C			lda #$0C
  3840 26B7 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3841 26BA A9 14			lda #$14
  3842 26BC 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3843 26BF 20 36 13			jsr CALCOBSTACLEADDR
  3844 26C2 B4 17			ldy :STACKORIGIN-1,x
  3845 26C4 B5 18			lda :STACKORIGIN,x
  3846 26C6 99 12 2B			sta adr.OBSTACLES,y
  3847 26C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3848 26CB 99 13 2B			sta adr.OBSTACLES+1,y
  3849 26CE CA				dex
  3850 26CF CA				dex
  3851 26D0			@exit
  3852 					.ifdef @new
  3853 					lda <@VarData
  3854 					sta :ztmp
  3855 					lda >@VarData
  3856 					ldy #@VarDataSize-1
  3857 					jmp @FreeMem
  3858 					els
  3859 26D0 60				rts						; ret
  3860 					eif
  3861 				.endl
  3862
  3863 26D1			.local	SETLEVEL08					; PROCEDURE
  3864
  3865 				; optimize OK (levels.inc), line = 112
  3866
  3867 26D1 A9 01			lda #$01
  3868 26D3 8D 3B 2B			sta SETPLAYER.ISALIVE
  3869 26D6 A9 62			lda #$62
  3870 26D8 8D 3A 2B			sta SETPLAYER.COLOUR
  3871 26DB A9 51			lda #$51
  3872 26DD 8D 39 2B			sta SETPLAYER.HEAD
  3873 26E0 A9 00			lda #$00
  3874 26E2 8D 38 2B			sta SETPLAYER.BRAIN
  3875 26E5 A9 08			lda #$08
  3876 26E7 8D 37 2B			sta SETPLAYER.DIR
  3877 26EA A9 17			lda #$17
  3878 26EC 8D 36 2B			sta SETPLAYER.Y
  3879 26EF A9 01			lda #$01
  3880 26F1 8D 35 2B			sta SETPLAYER.X
  3881 26F4 AD D4 2A			lda PLAYER1
  3882 26F7 8D 33 2B			sta SETPLAYER.P
  3883 26FA AD D5 2A			lda PLAYER1+1
  3884 26FD 8D 34 2B			sta SETPLAYER.P+1
  3885 2700 20 5E 15			jsr SETPLAYER
  3886
  3887 				; optimize OK (levels.inc), line = 113
  3888
  3889 2703 A9 01			lda #$01
  3890 2705 8D 3B 2B			sta SETPLAYER.ISALIVE
  3891 2708 A9 5D			lda #$5D
  3892 270A 8D 3A 2B			sta SETPLAYER.COLOUR
  3893 270D A9 51			lda #$51
  3894 270F 8D 39 2B			sta SETPLAYER.HEAD
  3895 2712 A9 03			lda #$03
  3896 2714 8D 38 2B			sta SETPLAYER.BRAIN
  3897 2717 A9 04			lda #$04
  3898 2719 8D 37 2B			sta SETPLAYER.DIR
  3899 271C A9 17			lda #$17
  3900 271E 8D 36 2B			sta SETPLAYER.Y
  3901 2721 A9 26			lda #$26
  3902 2723 8D 35 2B			sta SETPLAYER.X
  3903 2726 AD D6 2A			lda PLAYER2
  3904 2729 8D 33 2B			sta SETPLAYER.P
  3905 272C AD D7 2A			lda PLAYER2+1
  3906 272F 8D 34 2B			sta SETPLAYER.P+1
  3907 2732 20 5E 15			jsr SETPLAYER
  3908
  3909 				; optimize OK (levels.inc), line = 114
  3910
  3911 2735 A9 01			lda #$01
  3912 2737 8D 3B 2B			sta SETPLAYER.ISALIVE
  3913 273A A9 71			lda #$71
  3914 273C 8D 3A 2B			sta SETPLAYER.COLOUR
  3915 273F A9 51			lda #$51
  3916 2741 8D 39 2B			sta SETPLAYER.HEAD
  3917 2744 A9 02			lda #$02
  3918 2746 8D 38 2B			sta SETPLAYER.BRAIN
  3919 2749 8D 37 2B			sta SETPLAYER.DIR
  3920 274C A9 01			lda #$01
  3921 274E 8D 36 2B			sta SETPLAYER.Y
  3922 2751 A9 0A			lda #$0A
  3923 2753 8D 35 2B			sta SETPLAYER.X
  3924 2756 AD D8 2A			lda PLAYER3
  3925 2759 8D 33 2B			sta SETPLAYER.P
  3926 275C AD D9 2A			lda PLAYER3+1
  3927 275F 8D 34 2B			sta SETPLAYER.P+1
  3928 2762 20 5E 15			jsr SETPLAYER
  3929
  3930 				; optimize OK (levels.inc), line = 115
  3931
  3932 2765 A9 01			lda #$01
  3933 2767 8D 3B 2B			sta SETPLAYER.ISALIVE
  3934 276A A9 55			lda #$55
  3935 276C 8D 3A 2B			sta SETPLAYER.COLOUR
  3936 276F A9 51			lda #$51
  3937 2771 8D 39 2B			sta SETPLAYER.HEAD
  3938 2774 A9 04			lda #$04
  3939 2776 8D 38 2B			sta SETPLAYER.BRAIN
  3940 2779 8D 37 2B			sta SETPLAYER.DIR
  3941 277C A9 01			lda #$01
  3942 277E 8D 36 2B			sta SETPLAYER.Y
  3943 2781 A9 26			lda #$26
  3944 2783 8D 35 2B			sta SETPLAYER.X
  3945 2786 AD DA 2A			lda PLAYER4
  3946 2789 8D 33 2B			sta SETPLAYER.P
  3947 278C AD DB 2A			lda PLAYER4+1
  3948 278F 8D 34 2B			sta SETPLAYER.P+1
  3949 2792 20 5E 15			jsr SETPLAYER
  3950
  3951 				; optimize FAIL (1, levels.inc), line = 117
  3952
  3953 2795 E8				inx
  3954 2796 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3955 279A 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3956 279C A9 06			lda #$06
  3957 279E 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3958 27A1 A9 0A			lda #$0A
  3959 27A3 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3960 27A6 20 36 13			jsr CALCOBSTACLEADDR
  3961 27A9 B4 17			ldy :STACKORIGIN-1,x
  3962 27AB B5 18			lda :STACKORIGIN,x
  3963 27AD 99 12 2B			sta adr.OBSTACLES,y
  3964 27B0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3965 27B2 99 13 2B			sta adr.OBSTACLES+1,y
  3966 27B5 CA				dex
  3967 27B6 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3968 27BA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3969 27BE A9 06			lda #$06
  3970 27C0 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3971 27C3 A9 1E			lda #$1E
  3972 27C5 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3973 27C8 20 36 13			jsr CALCOBSTACLEADDR
  3974 27CB B4 17			ldy :STACKORIGIN-1,x
  3975 27CD B5 18			lda :STACKORIGIN,x
  3976 27CF 99 12 2B			sta adr.OBSTACLES,y
  3977 27D2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3978 27D4 99 13 2B			sta adr.OBSTACLES+1,y
  3979 27D7 CA				dex
  3980
  3981 				; optimize FAIL (1, levels.inc), line = 118
  3982
  3983 27D8 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3984 27DC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3985 27E0 A9 12			lda #$12
  3986 27E2 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  3987 27E5 A9 0A			lda #$0A
  3988 27E7 8D 2E 2B			sta CALCOBSTACLEADDR.X
  3989 27EA 20 36 13			jsr CALCOBSTACLEADDR
  3990 27ED B4 17			ldy :STACKORIGIN-1,x
  3991 27EF B5 18			lda :STACKORIGIN,x
  3992 27F1 99 12 2B			sta adr.OBSTACLES,y
  3993 27F4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3994 27F6 99 13 2B			sta adr.OBSTACLES+1,y
  3995 27F9 CA				dex
  3996 27FA A9 06 95 18			mva #$06 :STACKORIGIN,x
  3997 27FE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3998 2802 A9 12			lda #$12
  3999 2804 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  4000 2807 A9 1E			lda #$1E
  4001 2809 8D 2E 2B			sta CALCOBSTACLEADDR.X
  4002 280C 20 36 13			jsr CALCOBSTACLEADDR
  4003 280F B4 17			ldy :STACKORIGIN-1,x
  4004 2811 B5 18			lda :STACKORIGIN,x
  4005 2813 99 12 2B			sta adr.OBSTACLES,y
  4006 2816 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4007 2818 99 13 2B			sta adr.OBSTACLES+1,y
  4008 281B CA				dex
  4009
  4010 				; optimize FAIL (1, levels.inc), line = 119
  4011
  4012 281C A9 08 95 18			mva #$08 :STACKORIGIN,x
  4013 2820 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4014 2824 A9 0C			lda #$0C
  4015 2826 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  4016 2829 A9 01			lda #$01
  4017 282B 8D 2E 2B			sta CALCOBSTACLEADDR.X
  4018 282E 20 36 13			jsr CALCOBSTACLEADDR
  4019 2831 B4 17			ldy :STACKORIGIN-1,x
  4020 2833 B5 18			lda :STACKORIGIN,x
  4021 2835 99 12 2B			sta adr.OBSTACLES,y
  4022 2838 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4023 283A 99 13 2B			sta adr.OBSTACLES+1,y
  4024 283D CA				dex
  4025 283E A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4026 2842 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4027 2846 A9 02			lda #$02
  4028 2848 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  4029 284B A9 14			lda #$14
  4030 284D 8D 2E 2B			sta CALCOBSTACLEADDR.X
  4031 2850 20 36 13			jsr CALCOBSTACLEADDR
  4032 2853 B4 17			ldy :STACKORIGIN-1,x
  4033 2855 B5 18			lda :STACKORIGIN,x
  4034 2857 99 12 2B			sta adr.OBSTACLES,y
  4035 285A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4036 285C 99 13 2B			sta adr.OBSTACLES+1,y
  4037 285F CA				dex
  4038
  4039 				; optimize FAIL (1, levels.inc), line = 120
  4040
  4041 2860 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4042 2864 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4043 2868 A9 16			lda #$16
  4044 286A 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  4045 286D A9 14			lda #$14
  4046 286F 8D 2E 2B			sta CALCOBSTACLEADDR.X
  4047 2872 20 36 13			jsr CALCOBSTACLEADDR
  4048 2875 B4 17			ldy :STACKORIGIN-1,x
  4049 2877 B5 18			lda :STACKORIGIN,x
  4050 2879 99 12 2B			sta adr.OBSTACLES,y
  4051 287C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4052 287E 99 13 2B			sta adr.OBSTACLES+1,y
  4053 2881 CA				dex
  4054 2882 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4055 2886 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4056 288A A9 0C			lda #$0C
  4057 288C 8D 2F 2B			sta CALCOBSTACLEADDR.Y
  4058 288F A9 14			lda #$14
  4059 2891 8D 2E 2B			sta CALCOBSTACLEADDR.X
  4060 2894 20 36 13			jsr CALCOBSTACLEADDR
  4061 2897 B4 17			ldy :STACKORIGIN-1,x
  4062 2899 B5 18			lda :STACKORIGIN,x
  4063 289B 99 12 2B			sta adr.OBSTACLES,y
  4064 289E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4065 28A0 99 13 2B			sta adr.OBSTACLES+1,y
  4066 28A3 CA				dex
  4067 28A4 CA				dex
  4068 28A5			@exit
  4069 					.ifdef @new
  4070 					lda <@VarData
  4071 					sta :ztmp
  4072 					lda >@VarData
  4073 					ldy #@VarDataSize-1
  4074 					jmp @FreeMem
  4075 					els
  4076 28A5 60				rts						; ret
  4077 					eif
  4078 				.endl
  4079
  4080 28A6			.local	INITPLAYFIELD					; PROCEDURE
  4081
  4082 				; optimize OK (init.inc), line = 5
  4083
  4084 28A6 A9 1F			lda #$1F
  4085 28A8 8D 15 FF			sta BACKGROUND
  4086 28AB A9 00			lda #$00
  4087 28AD 8D 19 FF			sta BOREDER
  4088
  4089 				; optimize OK (init.inc), line = 6
  4090
  4091 28B0 A9 20			lda #$20
  4092 28B2 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  4093 28B4 A9 C0			lda #$C0
  4094 28B6 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  4095 28B8 A9 03			lda #$03
  4096 28BA 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  4097 28BC A9 00			lda #$00
  4098 28BE 85 08			sta SYSTEM.FILLCHAR_0056.A
  4099 28C0 A9 0C			lda #$0C
  4100 28C2 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  4101 28C4 20 08 11			jsr SYSTEM.FILLCHAR_0056
  4102
  4103 				; optimize OK (init.inc), line = 8
  4104
  4105 28C7 A9 27			lda #$27
  4106 28C9 85 58			sta T0B
  4107
  4108 28CB			l_0F18
  4109 				; --- ForToDoCondition
  4110
  4111 				; optimize OK (init.inc), line = 9
  4112
  4113 28CB A4 58			ldy T0B
  4114 28CD A9 A0			lda #$A0
  4115 28CF 99 00 0C			sta $0C00,y
  4116
  4117 				; optimize OK (init.inc), line = 10
  4118
  4119 28D2 99 C0 0F			sta $0FC0,y
  4120
  4121 				; optimize OK (init.inc), line = 11
  4122
  4123 28D5 A9 41			lda #$41
  4124 28D7 99 00 08			sta $0800,y
  4125
  4126 				; optimize OK (init.inc), line = 12
  4127
  4128 28DA 99 C0 0B			sta $0BC0,y
  4129
  4130 				; --- ForToDoEpilog
  4131 28DD C6 58			dec T0B
  4132 28DF 10 EA			jpl l_0F18
  4133 28E1			l_0F26
  4134
  4135 				; optimize OK (init.inc), line = 15
  4136
  4137 28E1 A9 18			lda #$18
  4138 28E3 85 58			sta T0B
  4139
  4140 28E5			l_0F58
  4141 				; --- ForToDoCondition
  4142 28E5 A5 58			lda T0B
  4143 28E7 C9 01			cmp #$01
  4144 28E9 90 3A			jcc l_0F66
  4145
  4146 				; optimize OK (init.inc), line = 16
  4147
  4148 28EB 0A				asl @
  4149 28EC A8				tay
  4150 28ED A9 FF			lda #$FF
  4151 28EF 18 79 0E 10			add adr.MUL40,y
  4152 28F3 85 12			sta :bp2
  4153 28F5 A9 0B			lda #$0B
  4154 28F7 79 0F 10			adc adr.MUL40+1,y
  4155 28FA 85 13			sta :bp2+1
  4156 28FC A0 00			ldy #$00
  4157 28FE A9 A0			lda #$A0
  4158 2900 91 12			sta (:bp2),y
  4159 2902 C8				iny
  4160 2903 91 12			sta (:bp2),y
  4161
  4162 				; optimize OK (init.inc), line = 17
  4163
  4164 2905 A5 58			lda T0B
  4165 2907 0A				asl @
  4166 2908 A8				tay
  4167 2909 A9 FF			lda #$FF
  4168 290B 18 79 0E 10			add adr.MUL40,y
  4169 290F 85 12			sta :bp2
  4170 2911 A9 07			lda #$07
  4171 2913 79 0F 10			adc adr.MUL40+1,y
  4172 2916 85 13			sta :bp2+1
  4173 2918 A0 00			ldy #$00
  4174 291A A9 41			lda #$41
  4175 291C 91 12			sta (:bp2),y
  4176 291E C8				iny
  4177 291F 91 12			sta (:bp2),y
  4178
  4179 				; --- ForToDoEpilog
  4180 2921 C6 58			dec T0B
  4181 2923 10 C0			jpl l_0F58
  4182 2925			l_0F66
  4183
  4184 				; optimize OK (init.inc), line = 20
  4185
  4186 2925 A9 07			lda #$07
  4187 2927 85 59			sta I0B
  4188
  4189 2929			l_0F8A
  4190 				; --- ForToDoCondition
  4191 2929 A5 59			lda I0B
  4192 292B 0A				asl @
  4193 292C A8				tay
  4194 292D A9 7E			lda #$7E
  4195 292F 99 12 2B			sta adr.OBSTACLES,y
  4196 2932 A9 00			lda #$00
  4197 2934 99 13 2B			sta adr.OBSTACLES+1,y
  4198
  4199 				; --- ForToDoEpilog
  4200 2937 C6 59			dec I0B
  4201 2939 10 EE			jpl l_0F8A
  4202 293B			l_0F98
  4203
  4204 				; ------------------------------------------------------------
  4205
  4206 = 0000			@FORTMP_0F15	= $00
  4207 = 0001			@FORTMP_0F55	= $01
  4208 = 0000			@FORTMP_0F87	= $00
  4209 293B			@exit
  4210 					.ifdef @new
  4211 					lda <@VarData
  4212 					sta :ztmp
  4213 					lda >@VarData
  4214 					ldy #@VarDataSize-1
  4215 					jmp @FreeMem
  4216 					els
  4217 293B 60				rts						; ret
  4218 					eif
  4219 				.endl
  4220
  4221 293C			.local	INITPLAYERS					; PROCEDURE
  4222
  4223 				; optimize OK (init.inc), line = 27
  4224
  4225 293C A9 FF			lda #$FF
  4226 293E 85 5A			sta ALIVE
  4227
  4228 				; optimize OK (init.inc), line = 28
  4229
  4230 2940 A9 00			lda #$00
  4231 2942 8D F9 2A			sta PLAYER1.ISALIVE
  4232 2945 8D 01 2B			sta PLAYER2.ISALIVE
  4233
  4234 				; optimize OK (init.inc), line = 29
  4235
  4236 2948 8D 09 2B			sta PLAYER3.ISALIVE
  4237 294B 8D 11 2B			sta PLAYER4.ISALIVE
  4238 294E			@exit
  4239 					.ifdef @new
  4240 					lda <@VarData
  4241 					sta :ztmp
  4242 					lda >@VarData
  4243 					ldy #@VarDataSize-1
  4244 					jmp @FreeMem
  4245 					els
  4246 294E 60				rts						; ret
  4247 					eif
  4248 				.endl
  4249
  4250 294F			.local	INITSCORE					; PROCEDURE
  4251
  4252 				; optimize OK (init.inc), line = 36
  4253
  4254 294F A9 30			lda #$30
  4255 2951 8D F8 2A			sta PLAYER1.SCORE
  4256 2954 8D 00 2B			sta PLAYER2.SCORE
  4257
  4258 				; optimize OK (init.inc), line = 37
  4259
  4260 2957 8D 08 2B			sta PLAYER3.SCORE
  4261 295A 8D 10 2B			sta PLAYER4.SCORE
  4262 295D			@exit
  4263 					.ifdef @new
  4264 					lda <@VarData
  4265 					sta :ztmp
  4266 					lda >@VarData
  4267 					ldy #@VarDataSize-1
  4268 					jmp @FreeMem
  4269 					els
  4270 295D 60				rts						; ret
  4271 					eif
  4272 				.endl
  4273
  4274 295E			.local	INITARENA					; PROCEDURE
  4275
  4276 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  4277
  4278 295E 20 A6 28			jsr INITPLAYFIELD
  4279 2961 20 3C 29			jsr INITPLAYERS
  4280
  4281 				; optimize OK (init.inc), line = 46
  4282
  4283 2964 AD F0 2A			lda LEVEL
  4284 2967 8D 46 2B			sta @CASETMP_0008
  4285 296A C9 00			cmp #$00
  4286 296C D0 06			jne l_0FE1
  4287 296E			@
  4288
  4289 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  4290
  4291 296E 20 13 1B			jsr SETLEVEL00
  4292 2971 4C C1 29			jmp a_0008
  4293 2974			l_0FE1
  4294 2974 C9 01			cmp #$01
  4295 2976 D0 06			jne l_0FEB
  4296 2978			@
  4297
  4298 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4299
  4300 2978 20 44 1C			jsr SETLEVEL01
  4301 297B 4C C1 29			jmp a_0008
  4302 297E			l_0FEB
  4303 297E C9 02			cmp #$02
  4304 2980 D0 06			jne l_0FF5
  4305 2982			@
  4306
  4307 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4308
  4309 2982 20 75 1D			jsr SETLEVEL02
  4310 2985 4C C1 29			jmp a_0008
  4311 2988			l_0FF5
  4312 2988 C9 03			cmp #$03
  4313 298A D0 06			jne l_0FFF
  4314 298C			@
  4315
  4316 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4317
  4318 298C 20 A6 1E			jsr SETLEVEL03
  4319 298F 4C C1 29			jmp a_0008
  4320 2992			l_0FFF
  4321 2992 C9 04			cmp #$04
  4322 2994 D0 06			jne l_1009
  4323 2996			@
  4324
  4325 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4326
  4327 2996 20 F9 1F			jsr SETLEVEL04
  4328 2999 4C C1 29			jmp a_0008
  4329 299C			l_1009
  4330 299C C9 05			cmp #$05
  4331 299E D0 06			jne l_1013
  4332 29A0			@
  4333
  4334 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4335
  4336 29A0 20 6E 21			jsr SETLEVEL05
  4337 29A3 4C C1 29			jmp a_0008
  4338 29A6			l_1013
  4339 29A6 C9 06			cmp #$06
  4340 29A8 D0 06			jne l_101D
  4341 29AA			@
  4342
  4343 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4344
  4345 29AA 20 23 23			jsr SETLEVEL06
  4346 29AD 4C C1 29			jmp a_0008
  4347 29B0			l_101D
  4348 29B0 C9 07			cmp #$07
  4349 29B2 D0 06			jne l_1027
  4350 29B4			@
  4351
  4352 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4353
  4354 29B4 20 F8 24			jsr SETLEVEL07
  4355 29B7 4C C1 29			jmp a_0008
  4356 29BA			l_1027
  4357 29BA C9 08			cmp #$08
  4358 29BC D0 03			jne l_1031
  4359 29BE			@
  4360
  4361 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4362
  4363 29BE 20 D1 26			jsr SETLEVEL08
  4364 29C1			l_1031
  4365 29C1			a_0008
  4366
  4367 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4368
  4369 29C1 20 59 13			jsr SAVEOBSTACLES
  4370 29C4 20 01 13			jsr ANIMATEOBSTACLES
  4371 29C7 20 D2 11			jsr SHOWSCORE
  4372
  4373 				; ------------------------------------------------------------
  4374
  4375 = 2B46			@CASETMP_0008	= DATAORIGIN+$0066
  4376
  4377 = 2B46			@VarData	= @CASETMP_0008
  4378 = 0001			@VarDataSize	= 1
  4379
  4380 29CA			@exit
  4381 					.ifdef @new
  4382 					lda <@VarData
  4383 					sta :ztmp
  4384 					lda >@VarData
  4385 					ldy #@VarDataSize-1
  4386 					jmp @FreeMem
  4387 					els
  4388 29CA 60				rts						; ret
  4389 					eif
  4390 				.endl
  4391
  4392 29CB			.local	PLAYERMOVE					; PROCEDURE
  4393
  4394 				; optimize OK (main.pas), line = 15
  4395
  4396 29CB AC D0 2A 84 12 AC + 	mwy PLY :bp2
  4397 29D5 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4398 29D7 B1 12			lda (:bp2),y
  4399 29D9 F0 50			jeq l_1052
  4400
  4401 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17
  4402
  4403 29DB 20 6C 12			jsr CHECKAVAILDIR
  4404
  4405 				; optimize OK (main.pas), line = 18
  4406
  4407 29DE A5 5C			lda AVAILDIR
  4408 29E0 D0 06			jne l_1066
  4409
  4410 				; optimize FAIL ('DRAWBUSTEDPLAYER', main.pas), line = 19
  4411
  4412 29E2 20 19 15			jsr DRAWBUSTEDPLAYER
  4413 29E5 4C 2B 2A			jmp l_1071
  4414 29E8			l_1066
  4415
  4416 				; optimize OK (main.pas), line = 21
  4417
  4418 29E8 AC D0 2A 84 12 AC + 	mwy PLY :bp2
  4419 29F2 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4420 29F4 B1 12			lda (:bp2),y
  4421 29F6 8D 47 2B			sta @CASETMP_0009
  4422 29F9 C9 00			cmp #$00
  4423 29FB D0 06			jne l_107C
  4424 29FD			@
  4425
  4426 				; optimize FAIL ('HUMAN', main.pas), line = 22
  4427
  4428 29FD 20 71 16			jsr HUMAN
  4429 2A00 4C 28 2A			jmp a_0009
  4430 2A03			l_107C
  4431 2A03 C9 01			cmp #$01
  4432 2A05 D0 06			jne l_1086
  4433 2A07			@
  4434
  4435 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 23
  4436
  4437 2A07 20 19 17			jsr AISTRAIGHT
  4438 2A0A 4C 28 2A			jmp a_0009
  4439 2A0D			l_1086
  4440 2A0D C9 02			cmp #$02
  4441 2A0F D0 06			jne l_1090
  4442 2A11			@
  4443
  4444 				; optimize FAIL ('AISAPPER', main.pas), line = 24
  4445
  4446 2A11 20 96 17			jsr AISAPPER
  4447 2A14 4C 28 2A			jmp a_0009
  4448 2A17			l_1090
  4449 2A17 C9 03			cmp #$03
  4450 2A19 D0 06			jne l_109A
  4451 2A1B			@
  4452
  4453 				; optimize FAIL ('AIBULLY', main.pas), line = 25
  4454
  4455 2A1B 20 F0 19			jsr AIBULLY
  4456 2A1E 4C 28 2A			jmp a_0009
  4457 2A21			l_109A
  4458 2A21 C9 04			cmp #$04
  4459 2A23 D0 03			jne l_10A4
  4460 2A25			@
  4461
  4462 				; optimize FAIL ('AIMIRROR', main.pas), line = 26
  4463
  4464 2A25 20 BE 1A			jsr AIMIRROR
  4465 2A28			l_10A4
  4466 2A28			a_0009
  4467
  4468 				; optimize FAIL ('DRAWPLAYER', main.pas), line = 29
  4469
  4470 2A28 20 9D 13			jsr DRAWPLAYER
  4471 2A2B			l_1071
  4472 2A2B			l_1052
  4473
  4474 				; ------------------------------------------------------------
  4475
  4476 = 2B47			@CASETMP_0009	= DATAORIGIN+$0067
  4477
  4478 = 2B47			@VarData	= @CASETMP_0009
  4479 = 0001			@VarDataSize	= 1
  4480
  4481 2A2B			@exit
  4482 					.ifdef @new
  4483 					lda <@VarData
  4484 					sta :ztmp
  4485 					lda >@VarData
  4486 					ldy #@VarDataSize-1
  4487 					jmp @FreeMem
  4488 					els
  4489 2A2B 60				rts						; ret
  4490 					eif
  4491 				.endl
  4492
  4493 2A2C			.local	MAINLOOP					; PROCEDURE
  4494
  4495 				; optimize FAIL ('INITARENA', main.pas), line = 39
  4496
  4497 2A2C 20 5E 29			jsr INITARENA
  4498 2A2F 20 D2 15			jsr STARTSCREEN
  4499
  4500 				; --- RepeatUntilProlog
  4501 2A32			l_10B8
  4502
  4503 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 42
  4504
  4505 2A32 20 0C 11			jsr SYSTEM.PAUSE_006B
  4506 2A35 AD D4 2A			lda PLAYER1
  4507 2A38 8D D0 2A			sta PLY
  4508 2A3B AD D5 2A			lda PLAYER1+1
  4509 2A3E 8D D1 2A			sta PLY+1
  4510 2A41 20 CB 29			jsr PLAYERMOVE
  4511
  4512 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44
  4513
  4514 2A44 20 01 13			jsr ANIMATEOBSTACLES
  4515
  4516 				; optimize OK (main.pas), line = 46
  4517
  4518 2A47 A9 02			lda #$02
  4519 2A49 8D EC 2A			sta SYSTEM.PAUSE_006C.N
  4520 2A4C A9 00			lda #$00
  4521 2A4E 8D ED 2A			sta SYSTEM.PAUSE_006C.N+1
  4522 2A51 20 13 11			jsr SYSTEM.PAUSE_006C
  4523
  4524 				; optimize OK (main.pas), line = 47
  4525
  4526 2A54 AD D6 2A			lda PLAYER2
  4527 2A57 8D D0 2A			sta PLY
  4528 2A5A AD D7 2A			lda PLAYER2+1
  4529 2A5D 8D D1 2A			sta PLY+1
  4530 2A60 20 CB 29			jsr PLAYERMOVE
  4531
  4532 				; optimize OK (main.pas), line = 48
  4533
  4534 2A63 AD D8 2A			lda PLAYER3
  4535 2A66 8D D0 2A			sta PLY
  4536 2A69 AD D9 2A			lda PLAYER3+1
  4537 2A6C 8D D1 2A			sta PLY+1
  4538 2A6F 20 CB 29			jsr PLAYERMOVE
  4539
  4540 				; optimize OK (main.pas), line = 49
  4541
  4542 2A72 AD DA 2A			lda PLAYER4
  4543 2A75 8D D0 2A			sta PLY
  4544 2A78 AD DB 2A			lda PLAYER4+1
  4545 2A7B 8D D1 2A			sta PLY+1
  4546 2A7E 20 CB 29			jsr PLAYERMOVE
  4547
  4548 				; optimize FAIL ('ISONELEFT', main.pas), line = 50
  4549
  4550 2A81 20 52 16			jsr ISONELEFT
  4551 2A84 CA				dex
  4552 2A85 B5 19			lda :STACKORIGIN+1,x
  4553 2A87 F0 A9			jeq l_10B8
  4554
  4555 				; optimize FAIL ('UPDATESCORE', main.pas), line = 52
  4556
  4557 2A89 20 4B 12			jsr UPDATESCORE
  4558 2A8C A9 64			lda #$64
  4559 2A8E 8D EC 2A			sta SYSTEM.PAUSE_006C.N
  4560 2A91 A9 00			lda #$00
  4561 2A93 8D ED 2A			sta SYSTEM.PAUSE_006C.N+1
  4562 2A96 20 13 11			jsr SYSTEM.PAUSE_006C
  4563 2A99 20 C2 15			jsr NEXTLEVEL
  4564 2A9C			@exit
  4565 					.ifdef @new
  4566 					lda <@VarData
  4567 					sta :ztmp
  4568 					lda >@VarData
  4569 					ldy #@VarDataSize-1
  4570 					jmp @FreeMem
  4571 					els
  4572 2A9C 60				rts						; ret
  4573 					eif
  4574 				.endl
  4575 2A9D			l_0007
  4576
  4577 				; --- RepeatUntilProlog
  4578 2A9D			l_10DF
  4579
  4580 				; optimize FAIL ('INITSCORE', main.pas), line = 59
  4581
  4582 2A9D 20 4F 29			jsr INITSCORE
  4583 2AA0 A9 00			lda #$00
  4584 2AA2 8D F1 2A			sta GAMEOVER
  4585 2AA5 A9 01			lda #$01
  4586 2AA7 8D F0 2A			sta LEVEL
  4587
  4588 				; --- RepeatUntilProlog
  4589 2AAA			l_10E9
  4590
  4591 				; optimize FAIL ('MAINLOOP', main.pas), line = 61
  4592
  4593 2AAA 20 2C 2A			jsr MAINLOOP
  4594 2AAD 20 15 16			jsr ISGAMEOVER
  4595 2AB0 CA				dex
  4596 2AB1 B5 19			lda :STACKORIGIN+1,x
  4597 2AB3 F0 F5			jeq l_10E9
  4598
  4599 				; optimize FAIL ('SHOWSCORE', main.pas), line = 63
  4600
  4601 2AB5 20 D2 11			jsr SHOWSCORE
  4602 2AB8 A9 C8			lda #$C8
  4603 2ABA 8D EC 2A			sta SYSTEM.PAUSE_006C.N
  4604 2ABD A9 00			lda #$00
  4605 2ABF 8D ED 2A			sta SYSTEM.PAUSE_006C.N+1
  4606 2AC2 20 13 11			jsr SYSTEM.PAUSE_006C
  4607
  4608 				; optimize OK (main.pas), line = 64
  4609
  4610 2AC5 4C 9D 2A			jmp l_10DF
  4611
  4612 				; ------------------------------------------------------------
  4613
  4614 = 0800			ATTRIBUTE_ADDR	= $0800
  4615 = 0C00			SCREEN_ADDR	= $0C00
  4616 = 001F			BACKGROUND_COLOUR	= $1F
  4617 = 0000			BOREDER_COLOUR	= $00
  4618 = 0009			VICTORIES	= $09
  4619 = 0005			LOOK_AHEAD	= $05
  4620 = 007E			TRASH	= $7E
  4621 = 0020			EMPTY	= $20
  4622 = 00A0			WALL	= $A0
  4623 = 0041			WALL_COLOUR	= $41
  4624 = 0030			ZERO	= $30
  4625 = 0056			OBSTACLE_1	= $56
  4626 = 005B			OBSTACLE_2	= $5B
  4627 = 0035			OBST_COLOUR	= $35
  4628 = 0007			OBST_QUANTITY	= $07
  4629 = 0051			PLY_HEAD	= $51
  4630 = 002A			PLY_CRASH	= $2A
  4631 = 0057			PLY_BUSTED	= $57
  4632 = 0042			PLY_TAIL_UD	= $42
  4633 = 0040			PLY_TAIL_LR	= $40
  4634 = 007D			PLY_TAIL_RD	= $7D
  4635 = 006E			PLY_TAIL_RU	= $6E
  4636 = 006D			PLY_TAIL_LD	= $6D
  4637 = 0070			PLY_TAIL_LU	= $70
  4638 = 0062			PLY1_COLOUR	= $62
  4639 = 005D			PLY2_COLOUR	= $5D
  4640 = 0071			PLY3_COLOUR	= $71
  4641 = 0055			PLY4_COLOUR	= $55
  4642 = 0000			PLY_CTRL	= $00
  4643 = 0001			AI_STRAIGHT	= $01
  4644 = 0002			AI_SAPPER	= $02
  4645 = 0003			AI_BULLY	= $03
  4646 = 0004			AI_MIRROR	= $04
  4647 = 0001			JOY_UP	= $01
  4648 = 0002			JOY_DOWN	= $02
  4649 = 0004			JOY_LEFT	= $04
  4650 = 0008			JOY_RIGHT	= $08
  4651 = 0040			JOY_FIRE	= $40
  4652 = 0002			JOY_SELECT_1	= $02
  4653 = 0004			JOY_SELECT_2	= $04
  4654 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4655 2AC8			.var MUL40	= adr.MUL40 .word
  4656 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4657 2AC8			.var DIRECTION	= adr.DIRECTION .word
  4658 = FD30			KEYSCAN	= $FD30
  4659 = FF08			JOY	= $FF08
  4660 = FF15			BACKGROUND	= $FF15
  4661 = FF19			BOREDER	= $FF19
  4662 = 0058			T0B	= $58
  4663 = 0059			I0B	= $59
  4664 = 005A			ALIVE	= $5A
  4665 = 005B			NEWDIR	= $5B
  4666 = 005C			AVAILDIR	= $5C
  4667 = 005D			T0W	= $5D
  4668 = 005F			adr.PLY	= $5F
  4669 2AC8			.var PLY	= adr.PLY .word
  4670 = 2AE0			PLY.X	= DATAORIGIN+$0000
  4671 = 2AE1			PLY.Y	= DATAORIGIN+$0001
  4672 = 2AE2			PLY.HEAD	= DATAORIGIN+$0002
  4673 = 2AE3			PLY.COLOUR	= DATAORIGIN+$0003
  4674 = 2AE4			PLY.DIR	= DATAORIGIN+$0004
  4675 = 2AE5			PLY.BRAIN	= DATAORIGIN+$0005
  4676 = 2AE6			PLY.SCORE	= DATAORIGIN+$0006
  4677 = 2AE7			PLY.ISALIVE	= DATAORIGIN+$0007
  4678 = 0061			adr.TMPPLY	= $61
  4679 2AC8			.var TMPPLY	= adr.TMPPLY .word
  4680 = 2AE0			TMPPLY.X	= DATAORIGIN+$0000
  4681 = 2AE1			TMPPLY.Y	= DATAORIGIN+$0001
  4682 = 2AE2			TMPPLY.HEAD	= DATAORIGIN+$0002
  4683 = 2AE3			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4684 = 2AE4			TMPPLY.DIR	= DATAORIGIN+$0004
  4685 = 2AE5			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4686 = 2AE6			TMPPLY.SCORE	= DATAORIGIN+$0006
  4687 = 2AE7			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4688 = 0063			JOYSTATUS	= $63
  4689 = 2AF0			LEVEL	= DATAORIGIN+$0010
  4690 = 2AF1			GAMEOVER	= DATAORIGIN+$0011
  4691 = 2AF2			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4692 2AC8			.var PLAYER1	= adr.PLAYER1 .word
  4693 = 2AF2			PLAYER1.X	= DATAORIGIN+$0012
  4694 = 2AF3			PLAYER1.Y	= DATAORIGIN+$0013
  4695 = 2AF4			PLAYER1.HEAD	= DATAORIGIN+$0014
  4696 = 2AF5			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4697 = 2AF6			PLAYER1.DIR	= DATAORIGIN+$0016
  4698 = 2AF7			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4699 = 2AF8			PLAYER1.SCORE	= DATAORIGIN+$0018
  4700 = 2AF9			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4701 = 2AFA			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4702 2AC8			.var PLAYER2	= adr.PLAYER2 .word
  4703 = 2AFA			PLAYER2.X	= DATAORIGIN+$001A
  4704 = 2AFB			PLAYER2.Y	= DATAORIGIN+$001B
  4705 = 2AFC			PLAYER2.HEAD	= DATAORIGIN+$001C
  4706 = 2AFD			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4707 = 2AFE			PLAYER2.DIR	= DATAORIGIN+$001E
  4708 = 2AFF			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4709 = 2B00			PLAYER2.SCORE	= DATAORIGIN+$0020
  4710 = 2B01			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4711 = 2B02			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4712 2AC8			.var PLAYER3	= adr.PLAYER3 .word
  4713 = 2B02			PLAYER3.X	= DATAORIGIN+$0022
  4714 = 2B03			PLAYER3.Y	= DATAORIGIN+$0023
  4715 = 2B04			PLAYER3.HEAD	= DATAORIGIN+$0024
  4716 = 2B05			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4717 = 2B06			PLAYER3.DIR	= DATAORIGIN+$0026
  4718 = 2B07			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4719 = 2B08			PLAYER3.SCORE	= DATAORIGIN+$0028
  4720 = 2B09			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4721 = 2B0A			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4722 2AC8			.var PLAYER4	= adr.PLAYER4 .word
  4723 = 2B0A			PLAYER4.X	= DATAORIGIN+$002A
  4724 = 2B0B			PLAYER4.Y	= DATAORIGIN+$002B
  4725 = 2B0C			PLAYER4.HEAD	= DATAORIGIN+$002C
  4726 = 2B0D			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4727 = 2B0E			PLAYER4.DIR	= DATAORIGIN+$002E
  4728 = 2B0F			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4729 = 2B10			PLAYER4.SCORE	= DATAORIGIN+$0030
  4730 = 2B11			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4731 = 2B12			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4732 2AC8			.var OBSTACLES	= adr.OBSTACLES .word
  4733 2AC8			@exit
  4734
  4735 2AC8 A2 00		@halt	ldx #$00
  4736 2ACA 9A				txs
  4737
  4738 2ACB 60				rts
  4739
  4740 				; ------------------------------------------------------------
  4741
  4742 				; ------------------------------------------------------------
  4743
  4744 2ACC			.local	@DEFINES
  4745 2ACC			C4P
  4746 				.endl
  4747
  4748 2ACC			.local	@RESOURCE
  4749 				.endl
  4750
  4751 = 2ACC 0E 10		MUL40
  4751 = 2ACE 40 10		DIRECTION
  4751 = 2AD0 5F 00		PLY
  4751 = 2AD2 61 00		TMPPLY
  4751 = 2AD4 F2 2A		PLAYER1
  4751 = 2AD6 FA 2A		PLAYER2
  4751 = 2AD8 02 2B		PLAYER3
  4751 = 2ADA 0A 2B		PLAYER4
  4751 = 2ADC 12 2B		OBSTACLES
  4751 				.endl							; MAIN
  4752
  4753 				; ------------------------------------------------------------
  4754 				; ------------------------------------------------------------
  4755
  4756 				.macro	UNITINITIALIZATION
  4757 				
  4758 					.ifdef MAIN.SYSTEM.@UnitInit
  4759 					jsr MAIN.SYSTEM.@UnitInit
  4760 					eif
  4761 				.endm
  4762
  4763 				; ------------------------------------------------------------
  4764
  4765 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4766 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4766 				SYSTEM: $10BE..$1160
  4767 					eif
  4768
  4769 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4769 				CODE: $100E..$2ACB
  4770
  4771 				; ------------------------------------------------------------
  4772
  4773 2ADE				.align $04
  4774
  4775 2AE0			DATAORIGIN
  4776 2AE0 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4777
  4778 = 0006			VARINITSIZE	= *-DATAORIGIN
  4779 = 0068			VARDATASIZE	= 104
  4780
  4781 = 2B48			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4782
  4783 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4783 				DATA: $2AE0..$2B48
  4784
  4785 				; ------------------------------------------------------------
  4786
  4787 				.macro	STATICDATA
  4788 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4789 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4790 				.by  $C0 $03 $01 $02 $04 $08
  4791 				.endm
  4792
  4793 					end
