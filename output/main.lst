mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E C4 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0061			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AE2			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 9F			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 43 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 43 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 98 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D E7 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD E7 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AE7			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AE7			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD E8 2A		loop  lda n
   325 112D 0D E9 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD E8 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AE8			N	= DATAORIGIN+$000C
   339
   340 = 2AE8			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D EA 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD EA 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C EB 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD EB 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2AEA			RANGE	= DATAORIGIN+$000E
   401 = 2AEB			RESULT	= DATAORIGIN+$000F
   402
   403 = 2AEA			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2ADC			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2ADE			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AE0			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AE1			FILEMODE	= DATAORIGIN+$0005
   468 = 2AE2			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AE3			IORESULT	= DATAORIGIN+$0007
   470 = 2AE4			EOLN	= DATAORIGIN+$0008
   471 = 2AE5			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 1F 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 1E 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 20 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B1E			X	= DATAORIGIN+$0042
   497 = 2B1F			Y	= DATAORIGIN+$0043
   498 = 2B20			V	= DATAORIGIN+$0044
   499
   500 = 2B1E			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 22 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 21 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 24 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 23 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B21			X	= DATAORIGIN+$0045
   544 = 2B22			Y	= DATAORIGIN+$0046
   545 = 2B23			V	= DATAORIGIN+$0047
   546 = 2B24			C	= DATAORIGIN+$0048
   547
   548 = 2B21			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 26 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 25 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 27 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 27 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B25			X	= DATAORIGIN+$0049
   604 = 2B26			Y	= DATAORIGIN+$004A
   605 = 2B27			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B25			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD F5 2A			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD F1 2A			lda PLAYER1.COLOUR
   620 11F1 8D 24 2B			sta PUTCHAR_008E.C
   621 11F4 AD F4 2A			lda PLAYER1.SCORE
   622 11F7 8D 23 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 22 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 21 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD FD 2A			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD F9 2A			lda PLAYER2.COLOUR
   635 120F 8D 24 2B			sta PUTCHAR_008E.C
   636 1212 AD FC 2A			lda PLAYER2.SCORE
   637 1215 8D 23 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 22 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 21 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD 05 2B			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD 01 2B			lda PLAYER3.COLOUR
   650 122D 8D 24 2B			sta PUTCHAR_008E.C
   651 1230 AD 04 2B			lda PLAYER3.SCORE
   652 1233 8D 23 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 22 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 21 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD 0D 2B			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD 09 2B			lda PLAYER4.COLOUR
   665 124B 8D 24 2B			sta PUTCHAR_008E.C
   666 124E AD 0C 2B			lda PLAYER4.SCORE
   667 1251 8D 23 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 22 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 21 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 AD F5 2A			lda PLAYER1.ISALIVE
   691 1265 F0 03			jeq l_0146
   692 1267 EE F4 2A			inc PLAYER1.SCORE
   693 126A			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 126A AD FD 2A			lda PLAYER2.ISALIVE
   698 126D F0 03			jeq l_0159
   699 126F EE FC 2A			inc PLAYER2.SCORE
   700 1272			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 1272 AD 05 2B			lda PLAYER3.ISALIVE
   705 1275 F0 03			jeq l_016C
   706 1277 EE 04 2B			inc PLAYER3.SCORE
   707 127A			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 127A AD 0D 2B			lda PLAYER4.ISALIVE
   712 127D F0 03			jeq l_017F
   713 127F EE 0C 2B			inc PLAYER4.SCORE
   714 1282			l_017F
   715 1282			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 1282 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 1283			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 1283 A9 00			lda #$00
   732 1285 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1287 AC CB 2A 84 12 AC + 	mwy PLY :bp2
   737 1291 A0 01			ldy #PLY.Y-DATAORIGIN
   738 1293 B1 12			lda (:bp2),y
   739 1295 0A				asl @
   740 1296 A8				tay
   741 1297 A9 00			lda #$00
   742 1299 18 79 0E 10			add adr.MUL40,y
   743 129D 85 21			sta :STACKORIGIN+9
   744 129F A9 0C			lda #$0C
   745 12A1 79 0F 10			adc adr.MUL40+1,y
   746 12A4 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 12A6 A0 00			ldy #PLY.X-DATAORIGIN
   748 12A8 A5 21			lda :STACKORIGIN+9
   749 12AA 18 71 12			add (:bp2),y
   750 12AD 85 5D			sta T0W
   751 12AF A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 12B1 69 00			adc #$00
   753 12B3 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 12B5 A5 5D			lda T0W
   758 12B7 38 E9 28			sub #$28
   759 12BA 85 21			sta :STACKORIGIN+9
   760 12BC A5 5E			lda T0W+1
   761 12BE E9 00			sbc #$00
   762 12C0 85 11			sta :bp+1
   763 12C2 A4 21			ldy :STACKORIGIN+9
   764 12C4 B1 10			lda (:bp),y
   765 12C6 C9 20			cmp #$20
   766 12C8 D0 06			jne l_01B6
   767 12CA A5 5C			lda AVAILDIR
   768 12CC 09 01			ora #$01
   769 12CE 85 5C			sta AVAILDIR
   770 12D0			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12D0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12D8 A0 28			ldy #$28
   776 12DA B1 12			lda (:bp2),y
   777 12DC C9 20			cmp #$20
   778 12DE D0 06			jne l_01D9
   779 12E0 A5 5C			lda AVAILDIR
   780 12E2 09 02			ora #$02
   781 12E4 85 5C			sta AVAILDIR
   782 12E6			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12E6 A5 5D			lda T0W
   787 12E8 38 E9 01			sub #$01
   788 12EB 85 21			sta :STACKORIGIN+9
   789 12ED A5 5E			lda T0W+1
   790 12EF E9 00			sbc #$00
   791 12F1 85 11			sta :bp+1
   792 12F3 A4 21			ldy :STACKORIGIN+9
   793 12F5 B1 10			lda (:bp),y
   794 12F7 C9 20			cmp #$20
   795 12F9 D0 06			jne l_01FC
   796 12FB A5 5C			lda AVAILDIR
   797 12FD 09 04			ora #$04
   798 12FF 85 5C			sta AVAILDIR
   799 1301			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 1301 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 1309 A0 01			ldy #$01
   805 130B B1 12			lda (:bp2),y
   806 130D C9 20			cmp #$20
   807 130F D0 06			jne l_021F
   808 1311 A5 5C			lda AVAILDIR
   809 1313 09 08			ora #$08
   810 1315 85 5C			sta AVAILDIR
   811 1317			l_021F
   812 1317			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1317 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1318			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1318 EE 28 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 131B AD 28 2B			lda COUNTER
   833 131E 29 01			and #$01
   834 1320 F0 08			jeq l_024A
   835 1322 A9 56			lda #$56
   836 1324 8D 29 2B			sta OBST
   837 1327 4C 2F 13			jmp l_0258
   838 132A			l_024A
   839 132A A9 5B			lda #$5B
   840 132C 8D 29 2B			sta OBST
   841 132F			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 132F A9 07			lda #$07
   846 1331 85 59			sta I0B
   847
   848 1333			l_0265
   849 				; --- ForToDoCondition
   850 1333 A5 59			lda I0B
   851 1335 0A				asl @
   852 1336 A8				tay
   853 1337 B9 0E 2B			lda adr.OBSTACLES,y
   854 133A 85 21			sta :STACKORIGIN+9
   855 133C B9 0F 2B			lda adr.OBSTACLES+1,y
   856 133F 85 11			sta :bp+1
   857 1341 A4 21			ldy :STACKORIGIN+9
   858 1343 AD 29 2B			lda OBST
   859 1346 91 10			sta (:bp),y
   860 1348 C6 59			dec I0B
   861 134A 10 E7			jpl l_0265
   862 134C			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B28			COUNTER	= DATAORIGIN+$004C
   867 = 2B29			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B28			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 134C			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 134C 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 134D			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 134D AD 2B 2B			lda Y
   890 1350 0A				asl @
   891 1351 A8				tay
   892 1352 AD 2A 2B			lda X
   893 1355 18 79 0E 10			add adr.MUL40,y
   894 1359 8D 2C 2B			sta RESULT
   895 135C A9 0C			lda #$0C
   896 135E 79 0F 10			adc adr.MUL40+1,y
   897 1361 8D 2D 2B			sta RESULT+1
   898 1364			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 1364 E8				inx
   906 1365 AD 2C 2B 95 18		mva RESULT :STACKORIGIN,x
   907 136A AD 2D 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B2A			X	= DATAORIGIN+$004E
   920 = 2B2B			Y	= DATAORIGIN+$004F
   921 = 2B2C			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B2A			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 136F 60				rts						; ret
   927 				.endl
   928
   929 1370			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1370 A9 07			lda #$07
   934 1372 85 59			sta I0B
   935
   936 1374			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 1374 A5 59			lda I0B
   942 1376 0A				asl @
   943 1377 A8				tay
   944 1378 B9 0F 2B			lda adr.OBSTACLES+1,y
   945 137B C9 00			cmp #$00
   946 137D D0 05			bne @+
   947 137F B9 0E 2B			lda adr.OBSTACLES,y
   948 1382 C9 7E			cmp #$7E
   949 1384			@
   950 1384 F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 1386 B9 0E 2B			lda adr.OBSTACLES,y
   955 1389 85 21			sta :STACKORIGIN+9
   956 138B B9 0F 2B			lda adr.OBSTACLES+1,y
   957 138E 85 11			sta :bp+1
   958 1390 A4 21			ldy :STACKORIGIN+9
   959 1392 A9 56			lda #$56
   960 1394 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 1396 A5 59			lda I0B
   965 1398 0A				asl @
   966 1399 A8				tay
   967 139A B9 0E 2B			lda adr.OBSTACLES,y
   968 139D 38 E9 00			sub #$00
   969 13A0 85 21			sta :STACKORIGIN+9
   970 13A2 B9 0F 2B			lda adr.OBSTACLES+1,y
   971 13A5 E9 04			sbc #$04
   972 13A7 85 11			sta :bp+1
   973 13A9 A4 21			ldy :STACKORIGIN+9
   974 13AB A9 35			lda #$35
   975 13AD 91 10			sta (:bp),y
   976 13AF			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 13AF C6 59			dec I0B
   980 13B1 10 C1			jpl l_02A6
   981 13B3			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 13B3			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 13B3 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 13B4			.local	DRAWTAIL					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 13B4 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1003 13BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13C0 B1 12			lda (:bp2),y
  1005 13C2 C5 5B			cmp NEWDIR
  1006 13C4 D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13C6 A5 5B			lda NEWDIR
  1011 13C8 29 0C			and #$0C
  1012 13CA F0 07			jeq l_0311
  1013 13CC A9 40			lda #$40
  1014 13CE 85 58			sta T0B
  1015 13D0 4C D7 13			jmp l_031F
  1016 13D3			l_0311
  1017 13D3 A9 42			lda #$42
  1018 13D5 85 58			sta T0B
  1019 13D7			l_031F
  1020 13D7 4C 4A 14			jmp l_032C
  1021 13DA			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13DA AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1026 13E4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13E6 B1 12			lda (:bp2),y
  1028 13E8 29 0A			and #$0A
  1029 13EA F0 0A			jeq l_0352
  1030 13EC A5 5B			lda NEWDIR
  1031 13EE 29 05			and #$05
  1032 13F0 F0 04			jeq l_0352
  1033 13F2 A9 7D			lda #$7D
  1034 13F4 85 58			sta T0B
  1035 13F6			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13F6 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1040 1400 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 1402 B1 12			lda (:bp2),y
  1042 1404 29 09			and #$09
  1043 1406 F0 0A			jeq l_037F
  1044 1408 A5 5B			lda NEWDIR
  1045 140A 29 06			and #$06
  1046 140C F0 04			jeq l_037F
  1047 140E A9 6E			lda #$6E
  1048 1410 85 58			sta T0B
  1049 1412			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 1412 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1054 141C A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 141E B1 12			lda (:bp2),y
  1056 1420 29 06			and #$06
  1057 1422 F0 0A			jeq l_03AC
  1058 1424 A5 5B			lda NEWDIR
  1059 1426 29 09			and #$09
  1060 1428 F0 04			jeq l_03AC
  1061 142A A9 6D			lda #$6D
  1062 142C 85 58			sta T0B
  1063 142E			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 142E AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1068 1438 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 143A B1 12			lda (:bp2),y
  1070 143C 29 05			and #$05
  1071 143E F0 0A			jeq l_03D9
  1072 1440 A5 5B			lda NEWDIR
  1073 1442 29 0A			and #$0A
  1074 1444 F0 04			jeq l_03D9
  1075 1446 A9 70			lda #$70
  1076 1448 85 58			sta T0B
  1077 144A			l_03D9
  1078 144A			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 100
  1081
  1082 144A AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1083 1454 A0 00			ldy #PLY.X-DATAORIGIN
  1084 1456 B1 12			lda (:bp2),y
  1085 1458 8D 25 2B			sta GETCHAR.X
  1086 145B A0 01			ldy #PLY.Y-DATAORIGIN
  1087 145D B1 12			lda (:bp2),y
  1088 145F 8D 26 2B			sta GETCHAR.Y
  1089 1462 20 C4 11			jsr GETCHAR
  1090 1465 CA				dex
  1091 1466 B5 19			lda :STACKORIGIN+1,x
  1092 1468 C9 2A			cmp #$2A
  1093 146A F0 20			jeq l_03F6
  1094 146C			@
  1095 146C AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1096 1476 A0 00			ldy #PLY.X-DATAORIGIN
  1097 1478 B1 12			lda (:bp2),y
  1098 147A 8D 1E 2B			sta PUTCHAR_0072.X
  1099 147D A0 01			ldy #PLY.Y-DATAORIGIN
  1100 147F B1 12			lda (:bp2),y
  1101 1481 8D 1F 2B			sta PUTCHAR_0072.Y
  1102 1484 A5 58			lda T0B
  1103 1486 8D 20 2B			sta PUTCHAR_0072.V
  1104 1489 20 78 11			jsr PUTCHAR_0072
  1105 148C			l_03F6
  1106 148C			@exit
  1107 					.ifdef @new
  1108 					lda <@VarData
  1109 					sta :ztmp
  1110 					lda >@VarData
  1111 					ldy #@VarDataSize-1
  1112 					jmp @FreeMem
  1113 					els
  1114 148C 60				rts						; ret
  1115 					eif
  1116 				.endl
  1117
  1118 148D			.local	CHECKJOYSTATUS					; PROCEDURE
  1119
  1120 				; optimize OK (tools.inc), line = 107
  1121
  1122 148D A9 02			lda #$02
  1123 148F 8D 08 FF			sta JOY
  1124 1492 A9 FF			lda #$FF
  1125 1494 8D 30 FD			sta KEYSCAN
  1126
  1127 				; optimize OK (tools.inc), line = 108
  1128
  1129 1497 AD 08 FF			lda JOY
  1130 149A 49 FF			eor #$FF
  1131 149C 85 63			sta JOYSTATUS
  1132 149E			@exit
  1133 					.ifdef @new
  1134 					lda <@VarData
  1135 					sta :ztmp
  1136 					lda >@VarData
  1137 					ldy #@VarDataSize-1
  1138 					jmp @FreeMem
  1139 					els
  1140 149E 60				rts						; ret
  1141 					eif
  1142 				.endl
  1143
  1144 149F			.local	SETPLAYER					; PROCEDURE
  1145
  1146 				; optimize OK (tools.inc), line = 115
  1147
  1148 149F AD 2E 2B			lda P
  1149 14A2 8D CB 2A			sta PLY
  1150 14A5 85 12			sta :bp2
  1151 14A7 AD 2F 2B			lda P+1
  1152 14AA 8D CC 2A			sta PLY+1
  1153 14AD 85 13			sta :bp2+1
  1154 				; optimize OK (tools.inc), line = 116
  1155 14AF A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1156 14B1 AD 33 2B			lda BRAIN
  1157 14B4 91 12			sta (:bp2),y
  1158 14B6 A0 00			ldy #PLY.X-DATAORIGIN
  1159 14B8 AD 30 2B			lda X
  1160 14BB 91 12			sta (:bp2),y
  1161 14BD A0 01			ldy #PLY.Y-DATAORIGIN
  1162 14BF AD 31 2B			lda Y
  1163 14C2 91 12			sta (:bp2),y
  1164 14C4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1165 14C6 AD 32 2B			lda DIR
  1166 14C9 91 12			sta (:bp2),y
  1167
  1168 				; optimize OK (tools.inc), line = 117
  1169
  1170 14CB A0 02			ldy #PLY.HEAD-DATAORIGIN
  1171 14CD AD 34 2B			lda HEAD
  1172 14D0 91 12			sta (:bp2),y
  1173 14D2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1174 14D4 AD 35 2B			lda COLOUR
  1175 14D7 91 12			sta (:bp2),y
  1176 14D9 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1177 14DB AD 36 2B			lda ISALIVE
  1178 14DE 91 12			sta (:bp2),y
  1179
  1180 				; optimize OK (tools.inc), line = 118
  1181
  1182 14E0 AD 36 2B			lda ISALIVE
  1183 14E3 F0 1D			jeq l_0458
  1184
  1185 				; optimize FAIL (0, tools.inc), line = 119
  1186
  1187 14E5 E6 5A			inc ALIVE
  1188 14E7 AD 35 2B			lda COLOUR
  1189 14EA 8D 24 2B			sta PUTCHAR_008E.C
  1190 14ED AD 34 2B			lda HEAD
  1191 14F0 8D 23 2B			sta PUTCHAR_008E.V
  1192 14F3 AD 31 2B			lda Y
  1193 14F6 8D 22 2B			sta PUTCHAR_008E.Y
  1194 14F9 AD 30 2B			lda X
  1195 14FC 8D 21 2B			sta PUTCHAR_008E.X
  1196 14FF 20 99 11			jsr PUTCHAR_008E
  1197 1502			l_0458
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 = 2B2E			P	= DATAORIGIN+$0052
  1202 = 2B30			X	= DATAORIGIN+$0054
  1203 = 2B31			Y	= DATAORIGIN+$0055
  1204 = 2B32			DIR	= DATAORIGIN+$0056
  1205 = 2B33			BRAIN	= DATAORIGIN+$0057
  1206 = 2B34			HEAD	= DATAORIGIN+$0058
  1207 = 2B35			COLOUR	= DATAORIGIN+$0059
  1208 = 2B36			ISALIVE	= DATAORIGIN+$005A
  1209
  1210 = 2B2E			@VarData	= P
  1211 = 0009			@VarDataSize	= 9
  1212
  1213 1502			@exit
  1214 					.ifdef @new
  1215 					lda <@VarData
  1216 					sta :ztmp
  1217 					lda >@VarData
  1218 					ldy #@VarDataSize-1
  1219 					jmp @FreeMem
  1220 					els
  1221 1502 60				rts						; ret
  1222 					eif
  1223 				.endl
  1224
  1225 1503			.local	ISGAMEOVER					; FUNCTION
  1226
  1227 				; optimize OK (tools.inc), line = 127
  1228
  1229 1503 AD F4 2A			lda PLAYER1.SCORE
  1230 1506 C9 39			cmp #$39
  1231 1508 D0 05			jne l_0482
  1232 150A A9 01			lda #$01
  1233 150C 8D ED 2A			sta GAMEOVER
  1234 150F			l_0482
  1235
  1236 				; optimize OK (tools.inc), line = 128
  1237
  1238 150F AD FC 2A			lda PLAYER2.SCORE
  1239 1512 C9 39			cmp #$39
  1240 1514 D0 05			jne l_049B
  1241 1516 A9 01			lda #$01
  1242 1518 8D ED 2A			sta GAMEOVER
  1243 151B			l_049B
  1244
  1245 				; optimize OK (tools.inc), line = 129
  1246
  1247 151B AD 04 2B			lda PLAYER3.SCORE
  1248 151E C9 39			cmp #$39
  1249 1520 D0 05			jne l_04B4
  1250 1522 A9 01			lda #$01
  1251 1524 8D ED 2A			sta GAMEOVER
  1252 1527			l_04B4
  1253
  1254 				; optimize OK (tools.inc), line = 130
  1255
  1256 1527 AD 0C 2B			lda PLAYER4.SCORE
  1257 152A C9 39			cmp #$39
  1258 152C D0 05			jne l_04CD
  1259 152E A9 01			lda #$01
  1260 1530 8D ED 2A			sta GAMEOVER
  1261 1533			l_04CD
  1262
  1263 				; optimize OK (tools.inc), line = 131
  1264
  1265 1533 AD ED 2A			lda GAMEOVER
  1266 1536 8D 37 2B			sta RESULT
  1267 1539			@exit
  1268
  1269 				; ------------------------------------------------------------
  1270
  1271 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1272 				; as Pointer
  1273
  1274 1539 E8				inx
  1275 153A AD 37 2B 95 18		mva RESULT :STACKORIGIN,x
  1276
  1277 					.ifdef @new
  1278 					lda <@VarData
  1279 					sta :ztmp
  1280 					lda >@VarData
  1281 					ldy #@VarDataSize-1
  1282 					jmp @FreeMem
  1283 					eif
  1284
  1285 				; ------------------------------------------------------------
  1286
  1287 = 2B37			RESULT	= DATAORIGIN+$005B
  1288
  1289 = 2B37			@VarData	= RESULT
  1290 = 0001			@VarDataSize	= 1
  1291
  1292 153F 60				rts						; ret
  1293 				.endl
  1294
  1295 1540			.local	AISTRAIGHT					; PROCEDURE
  1296
  1297 				; optimize OK (ai.inc), line = 5
  1298
  1299 1540 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1300 154A A0 04			ldy #PLY.DIR-DATAORIGIN
  1301 154C B1 12			lda (:bp2),y
  1302 154E 25 5C			and AVAILDIR
  1303 1550 F0 07			jeq l_04F9
  1304 1552 B1 12			lda (:bp2),y
  1305 1554 85 5B			sta NEWDIR
  1306 1556 4C C4 15			jmp l_0509
  1307 1559			l_04F9
  1308
  1309 				; optimize OK (ai.inc), line = 7
  1310
  1311 1559 A5 5C			lda AVAILDIR
  1312 155B C9 03			cmp #$03
  1313 155D D0 10			jne l_051B
  1314 155F A9 02			lda #$02
  1315 1561 20 47 11			jsr SYSTEM.RANDOM_006D
  1316 1564 B4 18			ldy :STACKORIGIN,x
  1317 1566 B9 40 10			lda adr.DIRECTION,y
  1318 1569 85 5B			sta NEWDIR
  1319 156B CA				dex
  1320 156C 4C 87 15			jmp l_052D
  1321 156F			l_051B
  1322
  1323 				; optimize OK (ai.inc), line = 9
  1324
  1325 156F A5 5C			lda AVAILDIR
  1326 1571 8D 38 2B			sta @CASETMP_0003
  1327 1574 C9 01			cmp #$01
  1328 1576 D0 07			jne l_0538
  1329 1578			@
  1330
  1331 				; optimize OK (ai.inc), line = 10
  1332
  1333 1578 A9 01			lda #$01
  1334 157A 85 5B			sta NEWDIR
  1335
  1336 157C 4C 87 15			jmp a_0003
  1337 157F			l_0538
  1338 157F C9 02			cmp #$02
  1339 1581 D0 04			jne l_0545
  1340 1583			@
  1341
  1342 				; optimize OK (ai.inc), line = 11
  1343
  1344 1583 A9 02			lda #$02
  1345 1585 85 5B			sta NEWDIR
  1346
  1347 1587			l_0545
  1348 1587			a_0003
  1349 1587			l_052D
  1350
  1351 				; optimize OK (ai.inc), line = 14
  1352
  1353 1587 A5 5C			lda AVAILDIR
  1354 1589 C9 0C			cmp #$0C
  1355 158B D0 1F			jne l_0561
  1356 158D A9 02			lda #$02
  1357 158F 20 47 11			jsr SYSTEM.RANDOM_006D
  1358 1592 E8				inx
  1359 1593 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1360 1597 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1361 159B 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1362 159D 20 44 10			jsr addAX_CX
  1363 15A0 CA				dex
  1364 15A1 B4 18			ldy :STACKORIGIN,x
  1365 15A3 B9 40 10			lda adr.DIRECTION,y
  1366 15A6 85 5B			sta NEWDIR
  1367 15A8 CA				dex
  1368 15A9 4C C4 15			jmp l_0577
  1369 15AC			l_0561
  1370
  1371 				; optimize OK (ai.inc), line = 16
  1372
  1373 15AC A5 5C			lda AVAILDIR
  1374 15AE 8D 39 2B			sta @CASETMP_0004
  1375 15B1 C9 04			cmp #$04
  1376 15B3 D0 07			jne l_0582
  1377 15B5			@
  1378
  1379 				; optimize OK (ai.inc), line = 17
  1380
  1381 15B5 A9 04			lda #$04
  1382 15B7 85 5B			sta NEWDIR
  1383
  1384 15B9 4C C4 15			jmp a_0004
  1385 15BC			l_0582
  1386 15BC C9 08			cmp #$08
  1387 15BE D0 04			jne l_058F
  1388 15C0			@
  1389
  1390 				; optimize OK (ai.inc), line = 18
  1391
  1392 15C0 A9 08			lda #$08
  1393 15C2 85 5B			sta NEWDIR
  1394
  1395 15C4			l_058F
  1396 15C4			a_0004
  1397 15C4			l_0577
  1398 15C4			l_0509
  1399
  1400 				; ------------------------------------------------------------
  1401
  1402 = 2B38			@CASETMP_0003	= DATAORIGIN+$005C
  1403 = 2B39			@CASETMP_0004	= DATAORIGIN+$005D
  1404
  1405 = 2B38			@VarData	= @CASETMP_0003
  1406 = 0002			@VarDataSize	= 2
  1407
  1408 15C4			@exit
  1409 					.ifdef @new
  1410 					lda <@VarData
  1411 					sta :ztmp
  1412 					lda >@VarData
  1413 					ldy #@VarDataSize-1
  1414 					jmp @FreeMem
  1415 					els
  1416 15C4 60				rts						; ret
  1417 					eif
  1418 				.endl
  1419
  1420 15C5			.local	AISAPPER					; PROCEDURE
  1421
  1422 				; optimize OK (ai.inc), line = 31
  1423
  1424 15C5 A9 00			lda #$00
  1425 15C7 8D 3A 2B			sta L
  1426 15CA 8D 3B 2B			sta R
  1427 15CD 8D 3C 2B			sta U
  1428 15D0 8D 3D 2B			sta D
  1429
  1430 				; optimize OK (ai.inc), line = 32
  1431
  1432 15D3 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1433 15DD A0 01			ldy #PLY.Y-DATAORIGIN
  1434 15DF B1 12			lda (:bp2),y
  1435 15E1 0A				asl @
  1436 15E2 A8				tay
  1437 15E3 A9 00			lda #$00
  1438 15E5 18 79 0E 10			add adr.MUL40,y
  1439 15E9 85 21			sta :STACKORIGIN+9
  1440 15EB A9 0C			lda #$0C
  1441 15ED 79 0F 10			adc adr.MUL40+1,y
  1442 15F0 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1443 15F2 A0 00			ldy #PLY.X-DATAORIGIN
  1444 15F4 A5 21			lda :STACKORIGIN+9
  1445 15F6 18 71 12			add (:bp2),y
  1446 15F9 85 5D			sta T0W
  1447 15FB A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1448 15FD 69 00			adc #$00
  1449 15FF 85 5E			sta T0W+1
  1450
  1451 				; optimize OK (ai.inc), line = 34
  1452
  1453 1601 A5 5C			lda AVAILDIR
  1454 1603 29 01			and #$01
  1455 1605 F0 73			jeq l_05D5
  1456
  1457 				; optimize OK (ai.inc), line = 35
  1458
  1459 1607 A9 05			lda #$05
  1460 1609 85 59			sta I0B
  1461
  1462 160B			l_05DF
  1463 				; --- ForToDoCondition
  1464 160B A5 59			lda I0B
  1465 160D C9 01			cmp #$01
  1466 160F 90 69			jcc l_05ED
  1467
  1468 				; optimize OK (ai.inc), line = 36
  1469
  1470 1611 0A				asl @
  1471 1612 A8				tay
  1472 1613 A5 5D			lda T0W
  1473 1615 38 F9 0E 10			sub adr.MUL40,y
  1474 1619 85 21			sta :STACKORIGIN+9
  1475 161B A5 5E			lda T0W+1
  1476 161D F9 0F 10			sbc adr.MUL40+1,y
  1477 1620 85 11			sta :bp+1
  1478 1622 A4 21			ldy :STACKORIGIN+9
  1479 1624 B1 10			lda (:bp),y
  1480 1626 C9 20			cmp #$20
  1481 1628 D0 03			jne l_0607
  1482 162A EE 3C 2B			inc U
  1483 162D			l_0607
  1484
  1485 				; optimize OK (ai.inc), line = 37
  1486
  1487 162D A5 59			lda I0B
  1488 162F 0A				asl @
  1489 1630 A8				tay
  1490 1631 A5 5D			lda T0W
  1491 1633 38 F9 0E 10			sub adr.MUL40,y
  1492 1637 85 21			sta :STACKORIGIN+9
  1493 1639 A5 5E			lda T0W+1
  1494 163B F9 0F 10			sbc adr.MUL40+1,y
  1495 163E 85 11			sta :bp+1
  1496 1640 A5 21			lda :STACKORIGIN+9
  1497 1642 18 69 01			add #$01
  1498 1645 A8				tay
  1499 1646 90 02			scc
  1500 1648 E6 11			inc :bp+1
  1501 164A B1 10			lda (:bp),y
  1502 164C C9 20			cmp #$20
  1503 164E D0 03			jne l_062C
  1504 1650 EE 3C 2B			inc U
  1505 1653			l_062C
  1506
  1507 				; optimize OK (ai.inc), line = 38
  1508
  1509 1653 A5 59			lda I0B
  1510 1655 0A				asl @
  1511 1656 A8				tay
  1512 1657 A5 5D			lda T0W
  1513 1659 38 F9 0E 10			sub adr.MUL40,y
  1514 165D 85 21			sta :STACKORIGIN+9
  1515 165F A5 5E			lda T0W+1
  1516 1661 F9 0F 10			sbc adr.MUL40+1,y
  1517 1664 85 11			sta :bp+1
  1518 1666 A4 21			ldy :STACKORIGIN+9
  1519 1668 88				dey
  1520 1669 B0 02			scs
  1521 166B C6 11			dec :bp+1
  1522 166D B1 10			lda (:bp),y
  1523 166F C9 20			cmp #$20
  1524 1671 D0 03			jne l_0651
  1525 1673 EE 3C 2B			inc U
  1526 1676			l_0651
  1527
  1528 				; --- ForToDoEpilog
  1529 1676 C6 59			dec I0B
  1530 1678 10 91			jpl l_05DF
  1531 167A			l_05ED
  1532 167A			l_05D5
  1533
  1534 				; optimize OK (ai.inc), line = 42
  1535
  1536 167A A5 5C			lda AVAILDIR
  1537 167C 29 02			and #$02
  1538 167E F0 73			jeq l_0675
  1539
  1540 				; optimize OK (ai.inc), line = 43
  1541
  1542 1680 A9 05			lda #$05
  1543 1682 85 59			sta I0B
  1544
  1545 1684			l_067F
  1546 				; --- ForToDoCondition
  1547 1684 A5 59			lda I0B
  1548 1686 C9 01			cmp #$01
  1549 1688 90 69			jcc l_068D
  1550
  1551 				; optimize OK (ai.inc), line = 44
  1552
  1553 168A 0A				asl @
  1554 168B A8				tay
  1555 168C A5 5D			lda T0W
  1556 168E 18 79 0E 10			add adr.MUL40,y
  1557 1692 85 21			sta :STACKORIGIN+9
  1558 1694 A5 5E			lda T0W+1
  1559 1696 79 0F 10			adc adr.MUL40+1,y
  1560 1699 85 11			sta :bp+1
  1561 169B A4 21			ldy :STACKORIGIN+9
  1562 169D B1 10			lda (:bp),y
  1563 169F C9 20			cmp #$20
  1564 16A1 D0 03			jne l_06A7
  1565 16A3 EE 3D 2B			inc D
  1566 16A6			l_06A7
  1567
  1568 				; optimize OK (ai.inc), line = 45
  1569
  1570 16A6 A5 59			lda I0B
  1571 16A8 0A				asl @
  1572 16A9 A8				tay
  1573 16AA A5 5D			lda T0W
  1574 16AC 18 79 0E 10			add adr.MUL40,y
  1575 16B0 85 21			sta :STACKORIGIN+9
  1576 16B2 A5 5E			lda T0W+1
  1577 16B4 79 0F 10			adc adr.MUL40+1,y
  1578 16B7 85 11			sta :bp+1
  1579 16B9 A5 21			lda :STACKORIGIN+9
  1580 16BB 18 69 01			add #$01
  1581 16BE A8				tay
  1582 16BF 90 02			scc
  1583 16C1 E6 11			inc :bp+1
  1584 16C3 B1 10			lda (:bp),y
  1585 16C5 C9 20			cmp #$20
  1586 16C7 D0 03			jne l_06CC
  1587 16C9 EE 3D 2B			inc D
  1588 16CC			l_06CC
  1589
  1590 				; optimize OK (ai.inc), line = 46
  1591
  1592 16CC A5 59			lda I0B
  1593 16CE 0A				asl @
  1594 16CF A8				tay
  1595 16D0 A5 5D			lda T0W
  1596 16D2 18 79 0E 10			add adr.MUL40,y
  1597 16D6 85 21			sta :STACKORIGIN+9
  1598 16D8 A5 5E			lda T0W+1
  1599 16DA 79 0F 10			adc adr.MUL40+1,y
  1600 16DD 85 11			sta :bp+1
  1601 16DF A4 21			ldy :STACKORIGIN+9
  1602 16E1 88				dey
  1603 16E2 B0 02			scs
  1604 16E4 C6 11			dec :bp+1
  1605 16E6 B1 10			lda (:bp),y
  1606 16E8 C9 20			cmp #$20
  1607 16EA D0 03			jne l_06F1
  1608 16EC EE 3D 2B			inc D
  1609 16EF			l_06F1
  1610
  1611 				; --- ForToDoEpilog
  1612 16EF C6 59			dec I0B
  1613 16F1 10 91			jpl l_067F
  1614 16F3			l_068D
  1615 16F3			l_0675
  1616
  1617 				; optimize OK (ai.inc), line = 50
  1618
  1619 16F3 A5 5C			lda AVAILDIR
  1620 16F5 29 04			and #$04
  1621 16F7 F0 5F			jeq l_0715
  1622
  1623 				; optimize OK (ai.inc), line = 51
  1624
  1625 16F9 A9 05			lda #$05
  1626 16FB 85 59			sta I0B
  1627
  1628 16FD			l_071F
  1629 				; --- ForToDoCondition
  1630 16FD A5 59			lda I0B
  1631 16FF C9 01			cmp #$01
  1632 1701 90 55			jcc l_072D
  1633
  1634 				; optimize OK (ai.inc), line = 52
  1635
  1636 1703 A5 5D			lda T0W
  1637 1705 38 E5 59			sub I0B
  1638 1708 A8				tay
  1639 1709 A5 5E			lda T0W+1
  1640 170B E9 00			sbc #$00
  1641 170D 85 11			sta :bp+1
  1642 170F B1 10			lda (:bp),y
  1643 1711 C9 20			cmp #$20
  1644 1713 D0 03			jne l_0745
  1645 1715 EE 3A 2B			inc L
  1646 1718			l_0745
  1647
  1648 				; optimize OK (ai.inc), line = 53
  1649
  1650 1718 A5 5D			lda T0W
  1651 171A 38 E5 59			sub I0B
  1652 171D A8				tay
  1653 171E A5 5E			lda T0W+1
  1654 1720 E9 00			sbc #$00
  1655 1722 85 11			sta :bp+1
  1656 1724 98				tya
  1657 1725 18 69 28			add #$28
  1658 1728 A8				tay
  1659 1729 90 02			scc
  1660 172B E6 11			inc :bp+1
  1661 172D B1 10			lda (:bp),y
  1662 172F C9 20			cmp #$20
  1663 1731 D0 03			jne l_0768
  1664 1733 EE 3A 2B			inc L
  1665 1736			l_0768
  1666
  1667 				; optimize OK (ai.inc), line = 54
  1668
  1669 1736 A5 5D			lda T0W
  1670 1738 38 E5 59			sub I0B
  1671 173B A8				tay
  1672 173C A5 5E			lda T0W+1
  1673 173E E9 00			sbc #$00
  1674 1740 85 11			sta :bp+1
  1675 1742 98				tya
  1676 1743 38 E9 28			sub #$28
  1677 1746 A8				tay
  1678 1747 B0 02			scs
  1679 1749 C6 11			dec :bp+1
  1680 174B B1 10			lda (:bp),y
  1681 174D C9 20			cmp #$20
  1682 174F D0 03			jne l_078B
  1683 1751 EE 3A 2B			inc L
  1684 1754			l_078B
  1685
  1686 				; --- ForToDoEpilog
  1687 1754 C6 59			dec I0B
  1688 1756 10 A5			jpl l_071F
  1689 1758			l_072D
  1690 1758			l_0715
  1691
  1692 				; optimize OK (ai.inc), line = 58
  1693
  1694 1758 A5 5C			lda AVAILDIR
  1695 175A 29 08			and #$08
  1696 175C F0 5D			jeq l_07AF
  1697
  1698 				; optimize OK (ai.inc), line = 59
  1699
  1700 175E A9 05			lda #$05
  1701 1760 85 59			sta I0B
  1702
  1703 1762			l_07B9
  1704 				; --- ForToDoCondition
  1705 1762 A5 59			lda I0B
  1706 1764 C9 01			cmp #$01
  1707 1766 90 53			jcc l_07C7
  1708
  1709 				; optimize OK (ai.inc), line = 60
  1710
  1711 1768 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1712 1770 A4 59			ldy I0B
  1713 1772 B1 12			lda (:bp2),y
  1714 1774 C9 20			cmp #$20
  1715 1776 D0 03			jne l_07DF
  1716 1778 EE 3B 2B			inc R
  1717 177B			l_07DF
  1718
  1719 				; optimize OK (ai.inc), line = 61
  1720
  1721 177B A5 5D			lda T0W
  1722 177D 18 65 59			add I0B
  1723 1780 A8				tay
  1724 1781 A5 5E			lda T0W+1
  1725 1783 69 00			adc #$00
  1726 1785 85 11			sta :bp+1
  1727 1787 98				tya
  1728 1788 18 69 28			add #$28
  1729 178B A8				tay
  1730 178C 90 02			scc
  1731 178E E6 11			inc :bp+1
  1732 1790 B1 10			lda (:bp),y
  1733 1792 C9 20			cmp #$20
  1734 1794 D0 03			jne l_0802
  1735 1796 EE 3B 2B			inc R
  1736 1799			l_0802
  1737
  1738 				; optimize OK (ai.inc), line = 62
  1739
  1740 1799 A5 5D			lda T0W
  1741 179B 18 65 59			add I0B
  1742 179E A8				tay
  1743 179F A5 5E			lda T0W+1
  1744 17A1 69 00			adc #$00
  1745 17A3 85 11			sta :bp+1
  1746 17A5 98				tya
  1747 17A6 38 E9 28			sub #$28
  1748 17A9 A8				tay
  1749 17AA B0 02			scs
  1750 17AC C6 11			dec :bp+1
  1751 17AE B1 10			lda (:bp),y
  1752 17B0 C9 20			cmp #$20
  1753 17B2 D0 03			jne l_0825
  1754 17B4 EE 3B 2B			inc R
  1755 17B7			l_0825
  1756
  1757 				; --- ForToDoEpilog
  1758 17B7 C6 59			dec I0B
  1759 17B9 10 A7			jpl l_07B9
  1760 17BB			l_07C7
  1761 17BB			l_07AF
  1762
  1763 				; optimize OK (ai.inc), line = 66
  1764
  1765 17BB AD 3D 2B			lda D
  1766 17BE 85 58			sta T0B
  1767
  1768 				; optimize OK (ai.inc), line = 67
  1769
  1770 17C0 CD 3C 2B			cmp U
  1771 17C3 B0 05			jcs l_084D
  1772 17C5 AD 3C 2B			lda U
  1773 17C8 85 58			sta T0B
  1774 17CA			l_084D
  1775
  1776 				; optimize OK (ai.inc), line = 68
  1777
  1778 17CA A5 58			lda T0B
  1779 17CC CD 3A 2B			cmp L
  1780 17CF B0 05			jcs l_086A
  1781 17D1 AD 3A 2B			lda L
  1782 17D4 85 58			sta T0B
  1783 17D6			l_086A
  1784
  1785 				; optimize OK (ai.inc), line = 69
  1786
  1787 17D6 A5 58			lda T0B
  1788 17D8 CD 3B 2B			cmp R
  1789 17DB B0 05			jcs l_0887
  1790 17DD AD 3B 2B			lda R
  1791 17E0 85 58			sta T0B
  1792 17E2			l_0887
  1793
  1794 				; optimize OK (ai.inc), line = 71
  1795
  1796 17E2 A5 58			lda T0B
  1797 17E4 CD 3D 2B			cmp D
  1798 17E7 D0 04			jne l_08A4
  1799 17E9 A9 02			lda #$02
  1800 17EB 85 58			sta T0B
  1801 17ED			l_08A4
  1802
  1803 				; optimize OK (ai.inc), line = 72
  1804
  1805 17ED A5 58			lda T0B
  1806 17EF CD 3C 2B			cmp U
  1807 17F2 D0 04			jne l_08BF
  1808 17F4 A9 01			lda #$01
  1809 17F6 85 58			sta T0B
  1810 17F8			l_08BF
  1811
  1812 				; optimize OK (ai.inc), line = 73
  1813
  1814 17F8 A5 58			lda T0B
  1815 17FA CD 3A 2B			cmp L
  1816 17FD D0 04			jne l_08DA
  1817 17FF A9 04			lda #$04
  1818 1801 85 58			sta T0B
  1819 1803			l_08DA
  1820
  1821 				; optimize OK (ai.inc), line = 74
  1822
  1823 1803 A5 58			lda T0B
  1824 1805 CD 3B 2B			cmp R
  1825 1808 D0 04			jne l_08F5
  1826 180A A9 08			lda #$08
  1827 180C 85 58			sta T0B
  1828 180E			l_08F5
  1829
  1830 				; optimize OK (ai.inc), line = 76
  1831
  1832 180E A5 5C			lda AVAILDIR
  1833 1810 25 58			and T0B
  1834 1812 F0 07			jeq l_0914
  1835 1814 A5 58			lda T0B
  1836 1816 85 5B			sta NEWDIR
  1837 1818 4C 1E 18			jmp l_0924
  1838 181B			l_0914
  1839
  1840 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1841
  1842 181B 20 40 15			jsr AISTRAIGHT
  1843 181E			l_0924
  1844
  1845 				; ------------------------------------------------------------
  1846
  1847 = 2B3A			L	= DATAORIGIN+$005E
  1848 = 2B3B			R	= DATAORIGIN+$005F
  1849 = 2B3C			U	= DATAORIGIN+$0060
  1850 = 2B3D			D	= DATAORIGIN+$0061
  1851 = 0001			@FORTMP_05DC	= $01
  1852 = 0001			@FORTMP_067C	= $01
  1853 = 0001			@FORTMP_071C	= $01
  1854 = 0001			@FORTMP_07B6	= $01
  1855
  1856 = 2B3A			@VarData	= L
  1857 = 0004			@VarDataSize	= 4
  1858
  1859 181E			@exit
  1860 					.ifdef @new
  1861 					lda <@VarData
  1862 					sta :ztmp
  1863 					lda >@VarData
  1864 					ldy #@VarDataSize-1
  1865 					jmp @FreeMem
  1866 					els
  1867 181E 60				rts						; ret
  1868 					eif
  1869 				.endl
  1870
  1871 181F			.local	AIBULLY						; PROCEDURE
  1872
  1873 				; optimize OK (ai.inc), line = 84
  1874
  1875 181F AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1876 1829 A0 04			ldy #PLY.DIR-DATAORIGIN
  1877 182B B1 12			lda (:bp2),y
  1878 182D 85 58			sta T0B
  1879
  1880 				; optimize OK (ai.inc), line = 86
  1881
  1882 182F AD F5 2A			lda PLAYER1.ISALIVE
  1883 1832 0D FD 2A			ora PLAYER2.ISALIVE
  1884 1835 D0 03 4C DC 18		jeq l_0941
  1885
  1886 				; optimize OK (ai.inc), line = 88
  1887
  1888 183A AD F5 2A			lda PLAYER1.ISALIVE
  1889 183D F0 0F			jeq l_094E
  1890 183F AD CF 2A			lda PLAYER1
  1891 1842 8D CD 2A			sta TMPPLY
  1892 1845 AD D0 2A			lda PLAYER1+1
  1893 1848 8D CE 2A			sta TMPPLY+1
  1894 184B 4C 5A 18			jmp l_095D
  1895 184E			l_094E
  1896 184E AD D1 2A			lda PLAYER2
  1897 1851 8D CD 2A			sta TMPPLY
  1898 1854 AD D2 2A			lda PLAYER2+1
  1899 1857 8D CE 2A			sta TMPPLY+1
  1900 185A			l_095D
  1901
  1902 				; optimize OK (ai.inc), line = 90
  1903
  1904 185A AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1905 1864 A0 01			ldy #PLY.Y-DATAORIGIN
  1906 1866 B1 12			lda (:bp2),y
  1907 1868 85 21			sta :STACKORIGIN+9
  1908 186A AC CD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1909 1874 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1910 1876 B1 12			lda (:bp2),y
  1911 1878 C5 21			cmp :STACKORIGIN+9
  1912 187A B0 07			jcs l_0976
  1913 187C A9 01			lda #$01
  1914 187E 85 58			sta T0B
  1915 1880 4C 87 18			jmp l_0984
  1916 1883			l_0976
  1917 1883 A9 02			lda #$02
  1918 1885 85 58			sta T0B
  1919 1887			l_0984
  1920
  1921 				; optimize OK (ai.inc), line = 91
  1922
  1923 1887 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1924 1891 A0 01			ldy #PLY.Y-DATAORIGIN
  1925 1893 B1 12			lda (:bp2),y
  1926 1895 85 21			sta :STACKORIGIN+9
  1927 1897 AC CD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1928 18A1 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1929 18A3 B1 12			lda (:bp2),y
  1930 18A5 C5 21			cmp :STACKORIGIN+9
  1931 18A7 F0 06			jeq l_09AEx
  1932 18A9 A5 5C			lda AVAILDIR
  1933 18AB 25 58			and T0B
  1934 18AD D0 2D			jne l_09AE
  1935 18AF			l_09AEx
  1936
  1937 				; optimize OK (ai.inc), line = 92
  1938
  1939 18AF AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1940 18B9 A0 00			ldy #PLY.X-DATAORIGIN
  1941 18BB B1 12			lda (:bp2),y
  1942 18BD 85 21			sta :STACKORIGIN+9
  1943 18BF AC CD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1944 18C9 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1945 18CB B1 12			lda (:bp2),y
  1946 18CD C5 21			cmp :STACKORIGIN+9
  1947 18CF B0 07			jcs l_09C3
  1948 18D1 A9 04			lda #$04
  1949 18D3 85 58			sta T0B
  1950 18D5 4C DC 18			jmp l_09D1
  1951 18D8			l_09C3
  1952 18D8 A9 08			lda #$08
  1953 18DA 85 58			sta T0B
  1954 18DC			l_09D1
  1955 18DC			l_09AE
  1956 18DC			l_0941
  1957
  1958 				; optimize OK (ai.inc), line = 96
  1959
  1960 18DC A5 5C			lda AVAILDIR
  1961 18DE 25 58			and T0B
  1962 18E0 F0 07			jeq l_09F1
  1963 18E2 A5 58			lda T0B
  1964 18E4 85 5B			sta NEWDIR
  1965 18E6 4C EC 18			jmp l_0A01
  1966 18E9			l_09F1
  1967
  1968 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1969
  1970 18E9 20 C5 15			jsr AISAPPER
  1971 18EC			l_0A01
  1972 18EC			@exit
  1973 					.ifdef @new
  1974 					lda <@VarData
  1975 					sta :ztmp
  1976 					lda >@VarData
  1977 					ldy #@VarDataSize-1
  1978 					jmp @FreeMem
  1979 					els
  1980 18EC 60				rts						; ret
  1981 					eif
  1982 				.endl
  1983
  1984 18ED			.local	AIMIRROR					; PROCEDURE
  1985
  1986 				; optimize OK (ai.inc), line = 105
  1987
  1988 18ED AC CB 2A 84 12 AC + 	mwy PLY :bp2
  1989 18F7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1990 18F9 B1 12			lda (:bp2),y
  1991 18FB 85 58			sta T0B
  1992
  1993 				; optimize OK (ai.inc), line = 107
  1994
  1995 18FD AD F5 2A			lda PLAYER1.ISALIVE
  1996 1900 F0 2F			jeq l_0A18
  1997
  1998 				; optimize OK (ai.inc), line = 108
  1999
  2000 1902 AD F2 2A			lda PLAYER1.DIR
  2001 1905 8D 3E 2B			sta @CASETMP_0005
  2002 1908 C9 01			cmp #$01
  2003 190A D0 07			jne l_0A24
  2004 190C			@
  2005
  2006 				; optimize OK (ai.inc), line = 109
  2007
  2008 190C A9 02			lda #$02
  2009 190E 85 58			sta T0B
  2010
  2011 1910 4C 31 19			jmp a_0005
  2012 1913			l_0A24
  2013 1913 C9 02			cmp #$02
  2014 1915 D0 07			jne l_0A31
  2015 1917			@
  2016
  2017 				; optimize OK (ai.inc), line = 110
  2018
  2019 1917 A9 01			lda #$01
  2020 1919 85 58			sta T0B
  2021
  2022 191B 4C 31 19			jmp a_0005
  2023 191E			l_0A31
  2024 191E C9 04			cmp #$04
  2025 1920 D0 07			jne l_0A3E
  2026 1922			@
  2027
  2028 				; optimize OK (ai.inc), line = 111
  2029
  2030 1922 A9 08			lda #$08
  2031 1924 85 58			sta T0B
  2032
  2033 1926 4C 31 19			jmp a_0005
  2034 1929			l_0A3E
  2035 1929 C9 08			cmp #$08
  2036 192B D0 04			jne l_0A4B
  2037 192D			@
  2038
  2039 				; optimize OK (ai.inc), line = 112
  2040
  2041 192D A9 04			lda #$04
  2042 192F 85 58			sta T0B
  2043
  2044 1931			l_0A4B
  2045 1931			a_0005
  2046 1931			l_0A18
  2047
  2048 				; optimize OK (ai.inc), line = 116
  2049
  2050 1931 A5 5C			lda AVAILDIR
  2051 1933 25 58			and T0B
  2052 1935 F0 07			jeq l_0A71
  2053 1937 A5 58			lda T0B
  2054 1939 85 5B			sta NEWDIR
  2055 193B 4C 41 19			jmp l_0A81
  2056 193E			l_0A71
  2057
  2058 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  2059
  2060 193E 20 C5 15			jsr AISAPPER
  2061 1941			l_0A81
  2062
  2063 				; ------------------------------------------------------------
  2064
  2065 = 2B3E			@CASETMP_0005	= DATAORIGIN+$0062
  2066
  2067 = 2B3E			@VarData	= @CASETMP_0005
  2068 = 0001			@VarDataSize	= 1
  2069
  2070 1941			@exit
  2071 					.ifdef @new
  2072 					lda <@VarData
  2073 					sta :ztmp
  2074 					lda >@VarData
  2075 					ldy #@VarDataSize-1
  2076 					jmp @FreeMem
  2077 					els
  2078 1941 60				rts						; ret
  2079 					eif
  2080 				.endl
  2081
  2082 1942			.local	SETLEVEL00					; PROCEDURE
  2083
  2084 				; optimize OK (levels.inc), line = 5
  2085
  2086 1942 A9 01			lda #$01
  2087 1944 8D 36 2B			sta SETPLAYER.ISALIVE
  2088 1947 A9 62			lda #$62
  2089 1949 8D 35 2B			sta SETPLAYER.COLOUR
  2090 194C A9 51			lda #$51
  2091 194E 8D 34 2B			sta SETPLAYER.HEAD
  2092 1951 A9 00			lda #$00
  2093 1953 8D 33 2B			sta SETPLAYER.BRAIN
  2094 1956 A9 08			lda #$08
  2095 1958 8D 32 2B			sta SETPLAYER.DIR
  2096 195B A9 0C			lda #$0C
  2097 195D 8D 31 2B			sta SETPLAYER.Y
  2098 1960 A9 0A			lda #$0A
  2099 1962 8D 30 2B			sta SETPLAYER.X
  2100 1965 AD CF 2A			lda PLAYER1
  2101 1968 8D 2E 2B			sta SETPLAYER.P
  2102 196B AD D0 2A			lda PLAYER1+1
  2103 196E 8D 2F 2B			sta SETPLAYER.P+1
  2104 1971 20 9F 14			jsr SETPLAYER
  2105
  2106 				; optimize OK (levels.inc), line = 6
  2107
  2108 1974 A9 01			lda #$01
  2109 1976 8D 36 2B			sta SETPLAYER.ISALIVE
  2110 1979 A9 5D			lda #$5D
  2111 197B 8D 35 2B			sta SETPLAYER.COLOUR
  2112 197E A9 51			lda #$51
  2113 1980 8D 34 2B			sta SETPLAYER.HEAD
  2114 1983 A9 01			lda #$01
  2115 1985 8D 33 2B			sta SETPLAYER.BRAIN
  2116 1988 A9 04			lda #$04
  2117 198A 8D 32 2B			sta SETPLAYER.DIR
  2118 198D A9 0C			lda #$0C
  2119 198F 8D 31 2B			sta SETPLAYER.Y
  2120 1992 A9 1E			lda #$1E
  2121 1994 8D 30 2B			sta SETPLAYER.X
  2122 1997 AD D1 2A			lda PLAYER2
  2123 199A 8D 2E 2B			sta SETPLAYER.P
  2124 199D AD D2 2A			lda PLAYER2+1
  2125 19A0 8D 2F 2B			sta SETPLAYER.P+1
  2126 19A3 20 9F 14			jsr SETPLAYER
  2127
  2128 				; optimize FAIL (1, levels.inc), line = 8
  2129
  2130 19A6 E8				inx
  2131 19A7 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2132 19AB 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2133 19AD A9 06			lda #$06
  2134 19AF 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2135 19B2 A9 0A			lda #$0A
  2136 19B4 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2137 19B7 20 4D 13			jsr CALCOBSTACLEADDR
  2138 19BA B4 17			ldy :STACKORIGIN-1,x
  2139 19BC B5 18			lda :STACKORIGIN,x
  2140 19BE 99 0E 2B			sta adr.OBSTACLES,y
  2141 19C1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2142 19C3 99 0F 2B			sta adr.OBSTACLES+1,y
  2143 19C6 CA				dex
  2144 19C7 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2145 19CB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2146 19CF A9 06			lda #$06
  2147 19D1 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2148 19D4 A9 1E			lda #$1E
  2149 19D6 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2150 19D9 20 4D 13			jsr CALCOBSTACLEADDR
  2151 19DC B4 17			ldy :STACKORIGIN-1,x
  2152 19DE B5 18			lda :STACKORIGIN,x
  2153 19E0 99 0E 2B			sta adr.OBSTACLES,y
  2154 19E3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2155 19E5 99 0F 2B			sta adr.OBSTACLES+1,y
  2156 19E8 CA				dex
  2157
  2158 				; optimize FAIL (1, levels.inc), line = 9
  2159
  2160 19E9 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2161 19ED A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2162 19F1 A9 12			lda #$12
  2163 19F3 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2164 19F6 A9 0A			lda #$0A
  2165 19F8 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2166 19FB 20 4D 13			jsr CALCOBSTACLEADDR
  2167 19FE B4 17			ldy :STACKORIGIN-1,x
  2168 1A00 B5 18			lda :STACKORIGIN,x
  2169 1A02 99 0E 2B			sta adr.OBSTACLES,y
  2170 1A05 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2171 1A07 99 0F 2B			sta adr.OBSTACLES+1,y
  2172 1A0A CA				dex
  2173 1A0B A9 06 95 18			mva #$06 :STACKORIGIN,x
  2174 1A0F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2175 1A13 A9 12			lda #$12
  2176 1A15 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2177 1A18 A9 1E			lda #$1E
  2178 1A1A 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2179 1A1D 20 4D 13			jsr CALCOBSTACLEADDR
  2180 1A20 B4 17			ldy :STACKORIGIN-1,x
  2181 1A22 B5 18			lda :STACKORIGIN,x
  2182 1A24 99 0E 2B			sta adr.OBSTACLES,y
  2183 1A27 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2184 1A29 99 0F 2B			sta adr.OBSTACLES+1,y
  2185 1A2C CA				dex
  2186
  2187 				; optimize FAIL (1, levels.inc), line = 10
  2188
  2189 1A2D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2190 1A31 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2191 1A35 A9 02			lda #$02
  2192 1A37 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2193 1A3A A9 14			lda #$14
  2194 1A3C 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2195 1A3F 20 4D 13			jsr CALCOBSTACLEADDR
  2196 1A42 B4 17			ldy :STACKORIGIN-1,x
  2197 1A44 B5 18			lda :STACKORIGIN,x
  2198 1A46 99 0E 2B			sta adr.OBSTACLES,y
  2199 1A49 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2200 1A4B 99 0F 2B			sta adr.OBSTACLES+1,y
  2201 1A4E CA				dex
  2202 1A4F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2203 1A53 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2204 1A57 A9 16			lda #$16
  2205 1A59 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2206 1A5C A9 14			lda #$14
  2207 1A5E 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2208 1A61 20 4D 13			jsr CALCOBSTACLEADDR
  2209 1A64 B4 17			ldy :STACKORIGIN-1,x
  2210 1A66 B5 18			lda :STACKORIGIN,x
  2211 1A68 99 0E 2B			sta adr.OBSTACLES,y
  2212 1A6B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2213 1A6D 99 0F 2B			sta adr.OBSTACLES+1,y
  2214 1A70 CA				dex
  2215 1A71 CA				dex
  2216 1A72			@exit
  2217 					.ifdef @new
  2218 					lda <@VarData
  2219 					sta :ztmp
  2220 					lda >@VarData
  2221 					ldy #@VarDataSize-1
  2222 					jmp @FreeMem
  2223 					els
  2224 1A72 60				rts						; ret
  2225 					eif
  2226 				.endl
  2227
  2228 1A73			.local	SETLEVEL01					; PROCEDURE
  2229
  2230 				; optimize OK (levels.inc), line = 17
  2231
  2232 1A73 A9 01			lda #$01
  2233 1A75 8D 36 2B			sta SETPLAYER.ISALIVE
  2234 1A78 A9 62			lda #$62
  2235 1A7A 8D 35 2B			sta SETPLAYER.COLOUR
  2236 1A7D A9 51			lda #$51
  2237 1A7F 8D 34 2B			sta SETPLAYER.HEAD
  2238 1A82 A9 00			lda #$00
  2239 1A84 8D 33 2B			sta SETPLAYER.BRAIN
  2240 1A87 A9 08			lda #$08
  2241 1A89 8D 32 2B			sta SETPLAYER.DIR
  2242 1A8C A9 0C			lda #$0C
  2243 1A8E 8D 31 2B			sta SETPLAYER.Y
  2244 1A91 A9 0A			lda #$0A
  2245 1A93 8D 30 2B			sta SETPLAYER.X
  2246 1A96 AD CF 2A			lda PLAYER1
  2247 1A99 8D 2E 2B			sta SETPLAYER.P
  2248 1A9C AD D0 2A			lda PLAYER1+1
  2249 1A9F 8D 2F 2B			sta SETPLAYER.P+1
  2250 1AA2 20 9F 14			jsr SETPLAYER
  2251
  2252 				; optimize OK (levels.inc), line = 18
  2253
  2254 1AA5 A9 01			lda #$01
  2255 1AA7 8D 36 2B			sta SETPLAYER.ISALIVE
  2256 1AAA A9 5D			lda #$5D
  2257 1AAC 8D 35 2B			sta SETPLAYER.COLOUR
  2258 1AAF A9 51			lda #$51
  2259 1AB1 8D 34 2B			sta SETPLAYER.HEAD
  2260 1AB4 A9 01			lda #$01
  2261 1AB6 8D 33 2B			sta SETPLAYER.BRAIN
  2262 1AB9 A9 04			lda #$04
  2263 1ABB 8D 32 2B			sta SETPLAYER.DIR
  2264 1ABE A9 0C			lda #$0C
  2265 1AC0 8D 31 2B			sta SETPLAYER.Y
  2266 1AC3 A9 1E			lda #$1E
  2267 1AC5 8D 30 2B			sta SETPLAYER.X
  2268 1AC8 AD D1 2A			lda PLAYER2
  2269 1ACB 8D 2E 2B			sta SETPLAYER.P
  2270 1ACE AD D2 2A			lda PLAYER2+1
  2271 1AD1 8D 2F 2B			sta SETPLAYER.P+1
  2272 1AD4 20 9F 14			jsr SETPLAYER
  2273
  2274 				; optimize FAIL (1, levels.inc), line = 20
  2275
  2276 1AD7 E8				inx
  2277 1AD8 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2278 1ADC 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2279 1ADE A9 06			lda #$06
  2280 1AE0 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2281 1AE3 A9 0A			lda #$0A
  2282 1AE5 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2283 1AE8 20 4D 13			jsr CALCOBSTACLEADDR
  2284 1AEB B4 17			ldy :STACKORIGIN-1,x
  2285 1AED B5 18			lda :STACKORIGIN,x
  2286 1AEF 99 0E 2B			sta adr.OBSTACLES,y
  2287 1AF2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2288 1AF4 99 0F 2B			sta adr.OBSTACLES+1,y
  2289 1AF7 CA				dex
  2290 1AF8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2291 1AFC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2292 1B00 A9 06			lda #$06
  2293 1B02 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2294 1B05 A9 1E			lda #$1E
  2295 1B07 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2296 1B0A 20 4D 13			jsr CALCOBSTACLEADDR
  2297 1B0D B4 17			ldy :STACKORIGIN-1,x
  2298 1B0F B5 18			lda :STACKORIGIN,x
  2299 1B11 99 0E 2B			sta adr.OBSTACLES,y
  2300 1B14 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2301 1B16 99 0F 2B			sta adr.OBSTACLES+1,y
  2302 1B19 CA				dex
  2303
  2304 				; optimize FAIL (1, levels.inc), line = 21
  2305
  2306 1B1A A9 04 95 18			mva #$04 :STACKORIGIN,x
  2307 1B1E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2308 1B22 A9 12			lda #$12
  2309 1B24 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2310 1B27 A9 0A			lda #$0A
  2311 1B29 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2312 1B2C 20 4D 13			jsr CALCOBSTACLEADDR
  2313 1B2F B4 17			ldy :STACKORIGIN-1,x
  2314 1B31 B5 18			lda :STACKORIGIN,x
  2315 1B33 99 0E 2B			sta adr.OBSTACLES,y
  2316 1B36 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2317 1B38 99 0F 2B			sta adr.OBSTACLES+1,y
  2318 1B3B CA				dex
  2319 1B3C A9 06 95 18			mva #$06 :STACKORIGIN,x
  2320 1B40 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2321 1B44 A9 12			lda #$12
  2322 1B46 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2323 1B49 A9 1E			lda #$1E
  2324 1B4B 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2325 1B4E 20 4D 13			jsr CALCOBSTACLEADDR
  2326 1B51 B4 17			ldy :STACKORIGIN-1,x
  2327 1B53 B5 18			lda :STACKORIGIN,x
  2328 1B55 99 0E 2B			sta adr.OBSTACLES,y
  2329 1B58 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2330 1B5A 99 0F 2B			sta adr.OBSTACLES+1,y
  2331 1B5D CA				dex
  2332
  2333 				; optimize FAIL (1, levels.inc), line = 22
  2334
  2335 1B5E A9 08 95 18			mva #$08 :STACKORIGIN,x
  2336 1B62 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2337 1B66 A9 02			lda #$02
  2338 1B68 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2339 1B6B A9 14			lda #$14
  2340 1B6D 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2341 1B70 20 4D 13			jsr CALCOBSTACLEADDR
  2342 1B73 B4 17			ldy :STACKORIGIN-1,x
  2343 1B75 B5 18			lda :STACKORIGIN,x
  2344 1B77 99 0E 2B			sta adr.OBSTACLES,y
  2345 1B7A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2346 1B7C 99 0F 2B			sta adr.OBSTACLES+1,y
  2347 1B7F CA				dex
  2348 1B80 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2349 1B84 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2350 1B88 A9 16			lda #$16
  2351 1B8A 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2352 1B8D A9 14			lda #$14
  2353 1B8F 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2354 1B92 20 4D 13			jsr CALCOBSTACLEADDR
  2355 1B95 B4 17			ldy :STACKORIGIN-1,x
  2356 1B97 B5 18			lda :STACKORIGIN,x
  2357 1B99 99 0E 2B			sta adr.OBSTACLES,y
  2358 1B9C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2359 1B9E 99 0F 2B			sta adr.OBSTACLES+1,y
  2360 1BA1 CA				dex
  2361 1BA2 CA				dex
  2362 1BA3			@exit
  2363 					.ifdef @new
  2364 					lda <@VarData
  2365 					sta :ztmp
  2366 					lda >@VarData
  2367 					ldy #@VarDataSize-1
  2368 					jmp @FreeMem
  2369 					els
  2370 1BA3 60				rts						; ret
  2371 					eif
  2372 				.endl
  2373
  2374 1BA4			.local	SETLEVEL02					; PROCEDURE
  2375
  2376 				; optimize OK (levels.inc), line = 29
  2377
  2378 1BA4 A9 01			lda #$01
  2379 1BA6 8D 36 2B			sta SETPLAYER.ISALIVE
  2380 1BA9 A9 62			lda #$62
  2381 1BAB 8D 35 2B			sta SETPLAYER.COLOUR
  2382 1BAE A9 51			lda #$51
  2383 1BB0 8D 34 2B			sta SETPLAYER.HEAD
  2384 1BB3 A9 00			lda #$00
  2385 1BB5 8D 33 2B			sta SETPLAYER.BRAIN
  2386 1BB8 A9 08			lda #$08
  2387 1BBA 8D 32 2B			sta SETPLAYER.DIR
  2388 1BBD A9 0C			lda #$0C
  2389 1BBF 8D 31 2B			sta SETPLAYER.Y
  2390 1BC2 A9 0A			lda #$0A
  2391 1BC4 8D 30 2B			sta SETPLAYER.X
  2392 1BC7 AD CF 2A			lda PLAYER1
  2393 1BCA 8D 2E 2B			sta SETPLAYER.P
  2394 1BCD AD D0 2A			lda PLAYER1+1
  2395 1BD0 8D 2F 2B			sta SETPLAYER.P+1
  2396 1BD3 20 9F 14			jsr SETPLAYER
  2397
  2398 				; optimize OK (levels.inc), line = 30
  2399
  2400 1BD6 A9 01			lda #$01
  2401 1BD8 8D 36 2B			sta SETPLAYER.ISALIVE
  2402 1BDB A9 5D			lda #$5D
  2403 1BDD 8D 35 2B			sta SETPLAYER.COLOUR
  2404 1BE0 A9 51			lda #$51
  2405 1BE2 8D 34 2B			sta SETPLAYER.HEAD
  2406 1BE5 A9 03			lda #$03
  2407 1BE7 8D 33 2B			sta SETPLAYER.BRAIN
  2408 1BEA A9 04			lda #$04
  2409 1BEC 8D 32 2B			sta SETPLAYER.DIR
  2410 1BEF A9 0C			lda #$0C
  2411 1BF1 8D 31 2B			sta SETPLAYER.Y
  2412 1BF4 A9 1E			lda #$1E
  2413 1BF6 8D 30 2B			sta SETPLAYER.X
  2414 1BF9 AD D1 2A			lda PLAYER2
  2415 1BFC 8D 2E 2B			sta SETPLAYER.P
  2416 1BFF AD D2 2A			lda PLAYER2+1
  2417 1C02 8D 2F 2B			sta SETPLAYER.P+1
  2418 1C05 20 9F 14			jsr SETPLAYER
  2419
  2420 				; optimize FAIL (1, levels.inc), line = 32
  2421
  2422 1C08 E8				inx
  2423 1C09 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2424 1C0D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2425 1C0F A9 06			lda #$06
  2426 1C11 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2427 1C14 A9 0A			lda #$0A
  2428 1C16 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2429 1C19 20 4D 13			jsr CALCOBSTACLEADDR
  2430 1C1C B4 17			ldy :STACKORIGIN-1,x
  2431 1C1E B5 18			lda :STACKORIGIN,x
  2432 1C20 99 0E 2B			sta adr.OBSTACLES,y
  2433 1C23 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2434 1C25 99 0F 2B			sta adr.OBSTACLES+1,y
  2435 1C28 CA				dex
  2436 1C29 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2437 1C2D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2438 1C31 A9 06			lda #$06
  2439 1C33 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2440 1C36 A9 1E			lda #$1E
  2441 1C38 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2442 1C3B 20 4D 13			jsr CALCOBSTACLEADDR
  2443 1C3E B4 17			ldy :STACKORIGIN-1,x
  2444 1C40 B5 18			lda :STACKORIGIN,x
  2445 1C42 99 0E 2B			sta adr.OBSTACLES,y
  2446 1C45 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2447 1C47 99 0F 2B			sta adr.OBSTACLES+1,y
  2448 1C4A CA				dex
  2449
  2450 				; optimize FAIL (1, levels.inc), line = 33
  2451
  2452 1C4B A9 04 95 18			mva #$04 :STACKORIGIN,x
  2453 1C4F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2454 1C53 A9 12			lda #$12
  2455 1C55 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2456 1C58 A9 0A			lda #$0A
  2457 1C5A 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2458 1C5D 20 4D 13			jsr CALCOBSTACLEADDR
  2459 1C60 B4 17			ldy :STACKORIGIN-1,x
  2460 1C62 B5 18			lda :STACKORIGIN,x
  2461 1C64 99 0E 2B			sta adr.OBSTACLES,y
  2462 1C67 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2463 1C69 99 0F 2B			sta adr.OBSTACLES+1,y
  2464 1C6C CA				dex
  2465 1C6D A9 06 95 18			mva #$06 :STACKORIGIN,x
  2466 1C71 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2467 1C75 A9 12			lda #$12
  2468 1C77 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2469 1C7A A9 1E			lda #$1E
  2470 1C7C 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2471 1C7F 20 4D 13			jsr CALCOBSTACLEADDR
  2472 1C82 B4 17			ldy :STACKORIGIN-1,x
  2473 1C84 B5 18			lda :STACKORIGIN,x
  2474 1C86 99 0E 2B			sta adr.OBSTACLES,y
  2475 1C89 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2476 1C8B 99 0F 2B			sta adr.OBSTACLES+1,y
  2477 1C8E CA				dex
  2478
  2479 				; optimize FAIL (1, levels.inc), line = 34
  2480
  2481 1C8F A9 08 95 18			mva #$08 :STACKORIGIN,x
  2482 1C93 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2483 1C97 A9 02			lda #$02
  2484 1C99 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2485 1C9C A9 14			lda #$14
  2486 1C9E 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2487 1CA1 20 4D 13			jsr CALCOBSTACLEADDR
  2488 1CA4 B4 17			ldy :STACKORIGIN-1,x
  2489 1CA6 B5 18			lda :STACKORIGIN,x
  2490 1CA8 99 0E 2B			sta adr.OBSTACLES,y
  2491 1CAB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2492 1CAD 99 0F 2B			sta adr.OBSTACLES+1,y
  2493 1CB0 CA				dex
  2494 1CB1 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2495 1CB5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2496 1CB9 A9 16			lda #$16
  2497 1CBB 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2498 1CBE A9 14			lda #$14
  2499 1CC0 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2500 1CC3 20 4D 13			jsr CALCOBSTACLEADDR
  2501 1CC6 B4 17			ldy :STACKORIGIN-1,x
  2502 1CC8 B5 18			lda :STACKORIGIN,x
  2503 1CCA 99 0E 2B			sta adr.OBSTACLES,y
  2504 1CCD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2505 1CCF 99 0F 2B			sta adr.OBSTACLES+1,y
  2506 1CD2 CA				dex
  2507 1CD3 CA				dex
  2508 1CD4			@exit
  2509 					.ifdef @new
  2510 					lda <@VarData
  2511 					sta :ztmp
  2512 					lda >@VarData
  2513 					ldy #@VarDataSize-1
  2514 					jmp @FreeMem
  2515 					els
  2516 1CD4 60				rts						; ret
  2517 					eif
  2518 				.endl
  2519
  2520 1CD5			.local	SETLEVEL03					; PROCEDURE
  2521
  2522 				; optimize OK (levels.inc), line = 41
  2523
  2524 1CD5 A9 01			lda #$01
  2525 1CD7 8D 36 2B			sta SETPLAYER.ISALIVE
  2526 1CDA A9 62			lda #$62
  2527 1CDC 8D 35 2B			sta SETPLAYER.COLOUR
  2528 1CDF A9 51			lda #$51
  2529 1CE1 8D 34 2B			sta SETPLAYER.HEAD
  2530 1CE4 A9 00			lda #$00
  2531 1CE6 8D 33 2B			sta SETPLAYER.BRAIN
  2532 1CE9 A9 08			lda #$08
  2533 1CEB 8D 32 2B			sta SETPLAYER.DIR
  2534 1CEE A9 0C			lda #$0C
  2535 1CF0 8D 31 2B			sta SETPLAYER.Y
  2536 1CF3 A9 0A			lda #$0A
  2537 1CF5 8D 30 2B			sta SETPLAYER.X
  2538 1CF8 AD CF 2A			lda PLAYER1
  2539 1CFB 8D 2E 2B			sta SETPLAYER.P
  2540 1CFE AD D0 2A			lda PLAYER1+1
  2541 1D01 8D 2F 2B			sta SETPLAYER.P+1
  2542 1D04 20 9F 14			jsr SETPLAYER
  2543
  2544 				; optimize OK (levels.inc), line = 42
  2545
  2546 1D07 A9 01			lda #$01
  2547 1D09 8D 36 2B			sta SETPLAYER.ISALIVE
  2548 1D0C A9 5D			lda #$5D
  2549 1D0E 8D 35 2B			sta SETPLAYER.COLOUR
  2550 1D11 A9 51			lda #$51
  2551 1D13 8D 34 2B			sta SETPLAYER.HEAD
  2552 1D16 A9 02			lda #$02
  2553 1D18 8D 33 2B			sta SETPLAYER.BRAIN
  2554 1D1B A9 04			lda #$04
  2555 1D1D 8D 32 2B			sta SETPLAYER.DIR
  2556 1D20 A9 0C			lda #$0C
  2557 1D22 8D 31 2B			sta SETPLAYER.Y
  2558 1D25 A9 1E			lda #$1E
  2559 1D27 8D 30 2B			sta SETPLAYER.X
  2560 1D2A AD D1 2A			lda PLAYER2
  2561 1D2D 8D 2E 2B			sta SETPLAYER.P
  2562 1D30 AD D2 2A			lda PLAYER2+1
  2563 1D33 8D 2F 2B			sta SETPLAYER.P+1
  2564 1D36 20 9F 14			jsr SETPLAYER
  2565
  2566 				; optimize FAIL (1, levels.inc), line = 44
  2567
  2568 1D39 E8				inx
  2569 1D3A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2570 1D3E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2571 1D40 A9 06			lda #$06
  2572 1D42 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2573 1D45 A9 0A			lda #$0A
  2574 1D47 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2575 1D4A 20 4D 13			jsr CALCOBSTACLEADDR
  2576 1D4D B4 17			ldy :STACKORIGIN-1,x
  2577 1D4F B5 18			lda :STACKORIGIN,x
  2578 1D51 99 0E 2B			sta adr.OBSTACLES,y
  2579 1D54 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2580 1D56 99 0F 2B			sta adr.OBSTACLES+1,y
  2581 1D59 CA				dex
  2582 1D5A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2583 1D5E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2584 1D62 A9 06			lda #$06
  2585 1D64 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2586 1D67 A9 1E			lda #$1E
  2587 1D69 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2588 1D6C 20 4D 13			jsr CALCOBSTACLEADDR
  2589 1D6F B4 17			ldy :STACKORIGIN-1,x
  2590 1D71 B5 18			lda :STACKORIGIN,x
  2591 1D73 99 0E 2B			sta adr.OBSTACLES,y
  2592 1D76 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2593 1D78 99 0F 2B			sta adr.OBSTACLES+1,y
  2594 1D7B CA				dex
  2595
  2596 				; optimize FAIL (1, levels.inc), line = 45
  2597
  2598 1D7C A9 04 95 18			mva #$04 :STACKORIGIN,x
  2599 1D80 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2600 1D84 A9 12			lda #$12
  2601 1D86 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2602 1D89 A9 0A			lda #$0A
  2603 1D8B 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2604 1D8E 20 4D 13			jsr CALCOBSTACLEADDR
  2605 1D91 B4 17			ldy :STACKORIGIN-1,x
  2606 1D93 B5 18			lda :STACKORIGIN,x
  2607 1D95 99 0E 2B			sta adr.OBSTACLES,y
  2608 1D98 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2609 1D9A 99 0F 2B			sta adr.OBSTACLES+1,y
  2610 1D9D CA				dex
  2611 1D9E A9 06 95 18			mva #$06 :STACKORIGIN,x
  2612 1DA2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2613 1DA6 A9 12			lda #$12
  2614 1DA8 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2615 1DAB A9 1E			lda #$1E
  2616 1DAD 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2617 1DB0 20 4D 13			jsr CALCOBSTACLEADDR
  2618 1DB3 B4 17			ldy :STACKORIGIN-1,x
  2619 1DB5 B5 18			lda :STACKORIGIN,x
  2620 1DB7 99 0E 2B			sta adr.OBSTACLES,y
  2621 1DBA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2622 1DBC 99 0F 2B			sta adr.OBSTACLES+1,y
  2623 1DBF CA				dex
  2624
  2625 				; optimize FAIL (1, levels.inc), line = 46
  2626
  2627 1DC0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2628 1DC4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2629 1DC8 A9 0C			lda #$0C
  2630 1DCA 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2631 1DCD A9 01			lda #$01
  2632 1DCF 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2633 1DD2 20 4D 13			jsr CALCOBSTACLEADDR
  2634 1DD5 B4 17			ldy :STACKORIGIN-1,x
  2635 1DD7 B5 18			lda :STACKORIGIN,x
  2636 1DD9 99 0E 2B			sta adr.OBSTACLES,y
  2637 1DDC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2638 1DDE 99 0F 2B			sta adr.OBSTACLES+1,y
  2639 1DE1 CA				dex
  2640 1DE2 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2641 1DE6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2642 1DEA A9 02			lda #$02
  2643 1DEC 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2644 1DEF A9 14			lda #$14
  2645 1DF1 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2646 1DF4 20 4D 13			jsr CALCOBSTACLEADDR
  2647 1DF7 B4 17			ldy :STACKORIGIN-1,x
  2648 1DF9 B5 18			lda :STACKORIGIN,x
  2649 1DFB 99 0E 2B			sta adr.OBSTACLES,y
  2650 1DFE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2651 1E00 99 0F 2B			sta adr.OBSTACLES+1,y
  2652 1E03 CA				dex
  2653
  2654 				; optimize FAIL (1, levels.inc), line = 47
  2655
  2656 1E04 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2657 1E08 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2658 1E0C A9 16			lda #$16
  2659 1E0E 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2660 1E11 A9 14			lda #$14
  2661 1E13 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2662 1E16 20 4D 13			jsr CALCOBSTACLEADDR
  2663 1E19 B4 17			ldy :STACKORIGIN-1,x
  2664 1E1B B5 18			lda :STACKORIGIN,x
  2665 1E1D 99 0E 2B			sta adr.OBSTACLES,y
  2666 1E20 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2667 1E22 99 0F 2B			sta adr.OBSTACLES+1,y
  2668 1E25 CA				dex
  2669 1E26 CA				dex
  2670 1E27			@exit
  2671 					.ifdef @new
  2672 					lda <@VarData
  2673 					sta :ztmp
  2674 					lda >@VarData
  2675 					ldy #@VarDataSize-1
  2676 					jmp @FreeMem
  2677 					els
  2678 1E27 60				rts						; ret
  2679 					eif
  2680 				.endl
  2681
  2682 1E28			.local	SETLEVEL04					; PROCEDURE
  2683
  2684 				; optimize OK (levels.inc), line = 54
  2685
  2686 1E28 A9 01			lda #$01
  2687 1E2A 8D 36 2B			sta SETPLAYER.ISALIVE
  2688 1E2D A9 62			lda #$62
  2689 1E2F 8D 35 2B			sta SETPLAYER.COLOUR
  2690 1E32 A9 51			lda #$51
  2691 1E34 8D 34 2B			sta SETPLAYER.HEAD
  2692 1E37 A9 00			lda #$00
  2693 1E39 8D 33 2B			sta SETPLAYER.BRAIN
  2694 1E3C A9 04			lda #$04
  2695 1E3E 8D 32 2B			sta SETPLAYER.DIR
  2696 1E41 A9 0C			lda #$0C
  2697 1E43 8D 31 2B			sta SETPLAYER.Y
  2698 1E46 A9 12			lda #$12
  2699 1E48 8D 30 2B			sta SETPLAYER.X
  2700 1E4B AD CF 2A			lda PLAYER1
  2701 1E4E 8D 2E 2B			sta SETPLAYER.P
  2702 1E51 AD D0 2A			lda PLAYER1+1
  2703 1E54 8D 2F 2B			sta SETPLAYER.P+1
  2704 1E57 20 9F 14			jsr SETPLAYER
  2705
  2706 				; optimize OK (levels.inc), line = 55
  2707
  2708 1E5A A9 01			lda #$01
  2709 1E5C 8D 36 2B			sta SETPLAYER.ISALIVE
  2710 1E5F A9 5D			lda #$5D
  2711 1E61 8D 35 2B			sta SETPLAYER.COLOUR
  2712 1E64 A9 51			lda #$51
  2713 1E66 8D 34 2B			sta SETPLAYER.HEAD
  2714 1E69 A9 04			lda #$04
  2715 1E6B 8D 33 2B			sta SETPLAYER.BRAIN
  2716 1E6E A9 08			lda #$08
  2717 1E70 8D 32 2B			sta SETPLAYER.DIR
  2718 1E73 A9 0C			lda #$0C
  2719 1E75 8D 31 2B			sta SETPLAYER.Y
  2720 1E78 A9 16			lda #$16
  2721 1E7A 8D 30 2B			sta SETPLAYER.X
  2722 1E7D AD D1 2A			lda PLAYER2
  2723 1E80 8D 2E 2B			sta SETPLAYER.P
  2724 1E83 AD D2 2A			lda PLAYER2+1
  2725 1E86 8D 2F 2B			sta SETPLAYER.P+1
  2726 1E89 20 9F 14			jsr SETPLAYER
  2727
  2728 				; optimize FAIL (1, levels.inc), line = 57
  2729
  2730 1E8C E8				inx
  2731 1E8D A9 00 95 18			mva #$00 :STACKORIGIN,x
  2732 1E91 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2733 1E93 A9 06			lda #$06
  2734 1E95 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2735 1E98 A9 0A			lda #$0A
  2736 1E9A 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2737 1E9D 20 4D 13			jsr CALCOBSTACLEADDR
  2738 1EA0 B4 17			ldy :STACKORIGIN-1,x
  2739 1EA2 B5 18			lda :STACKORIGIN,x
  2740 1EA4 99 0E 2B			sta adr.OBSTACLES,y
  2741 1EA7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2742 1EA9 99 0F 2B			sta adr.OBSTACLES+1,y
  2743 1EAC CA				dex
  2744 1EAD A9 02 95 18			mva #$02 :STACKORIGIN,x
  2745 1EB1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2746 1EB5 A9 06			lda #$06
  2747 1EB7 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2748 1EBA A9 1E			lda #$1E
  2749 1EBC 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2750 1EBF 20 4D 13			jsr CALCOBSTACLEADDR
  2751 1EC2 B4 17			ldy :STACKORIGIN-1,x
  2752 1EC4 B5 18			lda :STACKORIGIN,x
  2753 1EC6 99 0E 2B			sta adr.OBSTACLES,y
  2754 1EC9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2755 1ECB 99 0F 2B			sta adr.OBSTACLES+1,y
  2756 1ECE CA				dex
  2757
  2758 				; optimize FAIL (1, levels.inc), line = 58
  2759
  2760 1ECF A9 04 95 18			mva #$04 :STACKORIGIN,x
  2761 1ED3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2762 1ED7 A9 12			lda #$12
  2763 1ED9 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2764 1EDC A9 0A			lda #$0A
  2765 1EDE 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2766 1EE1 20 4D 13			jsr CALCOBSTACLEADDR
  2767 1EE4 B4 17			ldy :STACKORIGIN-1,x
  2768 1EE6 B5 18			lda :STACKORIGIN,x
  2769 1EE8 99 0E 2B			sta adr.OBSTACLES,y
  2770 1EEB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2771 1EED 99 0F 2B			sta adr.OBSTACLES+1,y
  2772 1EF0 CA				dex
  2773 1EF1 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2774 1EF5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2775 1EF9 A9 12			lda #$12
  2776 1EFB 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2777 1EFE A9 1E			lda #$1E
  2778 1F00 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2779 1F03 20 4D 13			jsr CALCOBSTACLEADDR
  2780 1F06 B4 17			ldy :STACKORIGIN-1,x
  2781 1F08 B5 18			lda :STACKORIGIN,x
  2782 1F0A 99 0E 2B			sta adr.OBSTACLES,y
  2783 1F0D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2784 1F0F 99 0F 2B			sta adr.OBSTACLES+1,y
  2785 1F12 CA				dex
  2786
  2787 				; optimize FAIL (1, levels.inc), line = 59
  2788
  2789 1F13 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2790 1F17 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2791 1F1B A9 0C			lda #$0C
  2792 1F1D 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2793 1F20 A9 01			lda #$01
  2794 1F22 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2795 1F25 20 4D 13			jsr CALCOBSTACLEADDR
  2796 1F28 B4 17			ldy :STACKORIGIN-1,x
  2797 1F2A B5 18			lda :STACKORIGIN,x
  2798 1F2C 99 0E 2B			sta adr.OBSTACLES,y
  2799 1F2F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2800 1F31 99 0F 2B			sta adr.OBSTACLES+1,y
  2801 1F34 CA				dex
  2802 1F35 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2803 1F39 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2804 1F3D A9 02			lda #$02
  2805 1F3F 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2806 1F42 A9 14			lda #$14
  2807 1F44 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2808 1F47 20 4D 13			jsr CALCOBSTACLEADDR
  2809 1F4A B4 17			ldy :STACKORIGIN-1,x
  2810 1F4C B5 18			lda :STACKORIGIN,x
  2811 1F4E 99 0E 2B			sta adr.OBSTACLES,y
  2812 1F51 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2813 1F53 99 0F 2B			sta adr.OBSTACLES+1,y
  2814 1F56 CA				dex
  2815
  2816 				; optimize FAIL (1, levels.inc), line = 60
  2817
  2818 1F57 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2819 1F5B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2820 1F5F A9 16			lda #$16
  2821 1F61 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2822 1F64 A9 14			lda #$14
  2823 1F66 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2824 1F69 20 4D 13			jsr CALCOBSTACLEADDR
  2825 1F6C B4 17			ldy :STACKORIGIN-1,x
  2826 1F6E B5 18			lda :STACKORIGIN,x
  2827 1F70 99 0E 2B			sta adr.OBSTACLES,y
  2828 1F73 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2829 1F75 99 0F 2B			sta adr.OBSTACLES+1,y
  2830 1F78 CA				dex
  2831 1F79 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2832 1F7D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2833 1F81 A9 0C			lda #$0C
  2834 1F83 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2835 1F86 A9 14			lda #$14
  2836 1F88 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2837 1F8B 20 4D 13			jsr CALCOBSTACLEADDR
  2838 1F8E B4 17			ldy :STACKORIGIN-1,x
  2839 1F90 B5 18			lda :STACKORIGIN,x
  2840 1F92 99 0E 2B			sta adr.OBSTACLES,y
  2841 1F95 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2842 1F97 99 0F 2B			sta adr.OBSTACLES+1,y
  2843 1F9A CA				dex
  2844 1F9B CA				dex
  2845 1F9C			@exit
  2846 					.ifdef @new
  2847 					lda <@VarData
  2848 					sta :ztmp
  2849 					lda >@VarData
  2850 					ldy #@VarDataSize-1
  2851 					jmp @FreeMem
  2852 					els
  2853 1F9C 60				rts						; ret
  2854 					eif
  2855 				.endl
  2856
  2857 1F9D			.local	SETLEVEL05					; PROCEDURE
  2858
  2859 				; optimize OK (levels.inc), line = 67
  2860
  2861 1F9D A9 01			lda #$01
  2862 1F9F 8D 36 2B			sta SETPLAYER.ISALIVE
  2863 1FA2 A9 62			lda #$62
  2864 1FA4 8D 35 2B			sta SETPLAYER.COLOUR
  2865 1FA7 A9 51			lda #$51
  2866 1FA9 8D 34 2B			sta SETPLAYER.HEAD
  2867 1FAC A9 00			lda #$00
  2868 1FAE 8D 33 2B			sta SETPLAYER.BRAIN
  2869 1FB1 A9 08			lda #$08
  2870 1FB3 8D 32 2B			sta SETPLAYER.DIR
  2871 1FB6 A9 0C			lda #$0C
  2872 1FB8 8D 31 2B			sta SETPLAYER.Y
  2873 1FBB A9 0A			lda #$0A
  2874 1FBD 8D 30 2B			sta SETPLAYER.X
  2875 1FC0 AD CF 2A			lda PLAYER1
  2876 1FC3 8D 2E 2B			sta SETPLAYER.P
  2877 1FC6 AD D0 2A			lda PLAYER1+1
  2878 1FC9 8D 2F 2B			sta SETPLAYER.P+1
  2879 1FCC 20 9F 14			jsr SETPLAYER
  2880
  2881 				; optimize OK (levels.inc), line = 68
  2882
  2883 1FCF A9 01			lda #$01
  2884 1FD1 8D 36 2B			sta SETPLAYER.ISALIVE
  2885 1FD4 A9 5D			lda #$5D
  2886 1FD6 8D 35 2B			sta SETPLAYER.COLOUR
  2887 1FD9 A9 51			lda #$51
  2888 1FDB 8D 34 2B			sta SETPLAYER.HEAD
  2889 1FDE A9 04			lda #$04
  2890 1FE0 8D 33 2B			sta SETPLAYER.BRAIN
  2891 1FE3 8D 32 2B			sta SETPLAYER.DIR
  2892 1FE6 A9 0C			lda #$0C
  2893 1FE8 8D 31 2B			sta SETPLAYER.Y
  2894 1FEB A9 1E			lda #$1E
  2895 1FED 8D 30 2B			sta SETPLAYER.X
  2896 1FF0 AD D1 2A			lda PLAYER2
  2897 1FF3 8D 2E 2B			sta SETPLAYER.P
  2898 1FF6 AD D2 2A			lda PLAYER2+1
  2899 1FF9 8D 2F 2B			sta SETPLAYER.P+1
  2900 1FFC 20 9F 14			jsr SETPLAYER
  2901
  2902 				; optimize OK (levels.inc), line = 69
  2903
  2904 1FFF A9 01			lda #$01
  2905 2001 8D 36 2B			sta SETPLAYER.ISALIVE
  2906 2004 A9 71			lda #$71
  2907 2006 8D 35 2B			sta SETPLAYER.COLOUR
  2908 2009 A9 51			lda #$51
  2909 200B 8D 34 2B			sta SETPLAYER.HEAD
  2910 200E A9 03			lda #$03
  2911 2010 8D 33 2B			sta SETPLAYER.BRAIN
  2912 2013 A9 02			lda #$02
  2913 2015 8D 32 2B			sta SETPLAYER.DIR
  2914 2018 A9 04			lda #$04
  2915 201A 8D 31 2B			sta SETPLAYER.Y
  2916 201D A9 14			lda #$14
  2917 201F 8D 30 2B			sta SETPLAYER.X
  2918 2022 AD D3 2A			lda PLAYER3
  2919 2025 8D 2E 2B			sta SETPLAYER.P
  2920 2028 AD D4 2A			lda PLAYER3+1
  2921 202B 8D 2F 2B			sta SETPLAYER.P+1
  2922 202E 20 9F 14			jsr SETPLAYER
  2923
  2924 				; optimize OK (levels.inc), line = 70
  2925
  2926 2031 A9 01			lda #$01
  2927 2033 8D 36 2B			sta SETPLAYER.ISALIVE
  2928 2036 A9 55			lda #$55
  2929 2038 8D 35 2B			sta SETPLAYER.COLOUR
  2930 203B A9 51			lda #$51
  2931 203D 8D 34 2B			sta SETPLAYER.HEAD
  2932 2040 A9 02			lda #$02
  2933 2042 8D 33 2B			sta SETPLAYER.BRAIN
  2934 2045 A9 01			lda #$01
  2935 2047 8D 32 2B			sta SETPLAYER.DIR
  2936 204A A9 12			lda #$12
  2937 204C 8D 31 2B			sta SETPLAYER.Y
  2938 204F A9 14			lda #$14
  2939 2051 8D 30 2B			sta SETPLAYER.X
  2940 2054 AD D5 2A			lda PLAYER4
  2941 2057 8D 2E 2B			sta SETPLAYER.P
  2942 205A AD D6 2A			lda PLAYER4+1
  2943 205D 8D 2F 2B			sta SETPLAYER.P+1
  2944 2060 20 9F 14			jsr SETPLAYER
  2945
  2946 				; optimize FAIL (1, levels.inc), line = 72
  2947
  2948 2063 E8				inx
  2949 2064 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2950 2068 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2951 206A A9 06			lda #$06
  2952 206C 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2953 206F A9 0A			lda #$0A
  2954 2071 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2955 2074 20 4D 13			jsr CALCOBSTACLEADDR
  2956 2077 B4 17			ldy :STACKORIGIN-1,x
  2957 2079 B5 18			lda :STACKORIGIN,x
  2958 207B 99 0E 2B			sta adr.OBSTACLES,y
  2959 207E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2960 2080 99 0F 2B			sta adr.OBSTACLES+1,y
  2961 2083 CA				dex
  2962 2084 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2963 2088 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2964 208C A9 06			lda #$06
  2965 208E 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2966 2091 A9 1E			lda #$1E
  2967 2093 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2968 2096 20 4D 13			jsr CALCOBSTACLEADDR
  2969 2099 B4 17			ldy :STACKORIGIN-1,x
  2970 209B B5 18			lda :STACKORIGIN,x
  2971 209D 99 0E 2B			sta adr.OBSTACLES,y
  2972 20A0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2973 20A2 99 0F 2B			sta adr.OBSTACLES+1,y
  2974 20A5 CA				dex
  2975
  2976 				; optimize FAIL (1, levels.inc), line = 73
  2977
  2978 20A6 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2979 20AA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2980 20AE A9 12			lda #$12
  2981 20B0 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2982 20B3 A9 0A			lda #$0A
  2983 20B5 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2984 20B8 20 4D 13			jsr CALCOBSTACLEADDR
  2985 20BB B4 17			ldy :STACKORIGIN-1,x
  2986 20BD B5 18			lda :STACKORIGIN,x
  2987 20BF 99 0E 2B			sta adr.OBSTACLES,y
  2988 20C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2989 20C4 99 0F 2B			sta adr.OBSTACLES+1,y
  2990 20C7 CA				dex
  2991 20C8 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2992 20CC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2993 20D0 A9 12			lda #$12
  2994 20D2 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  2995 20D5 A9 1E			lda #$1E
  2996 20D7 8D 2A 2B			sta CALCOBSTACLEADDR.X
  2997 20DA 20 4D 13			jsr CALCOBSTACLEADDR
  2998 20DD B4 17			ldy :STACKORIGIN-1,x
  2999 20DF B5 18			lda :STACKORIGIN,x
  3000 20E1 99 0E 2B			sta adr.OBSTACLES,y
  3001 20E4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3002 20E6 99 0F 2B			sta adr.OBSTACLES+1,y
  3003 20E9 CA				dex
  3004
  3005 				; optimize FAIL (1, levels.inc), line = 74
  3006
  3007 20EA A9 08 95 18			mva #$08 :STACKORIGIN,x
  3008 20EE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3009 20F2 A9 0C			lda #$0C
  3010 20F4 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3011 20F7 A9 01			lda #$01
  3012 20F9 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3013 20FC 20 4D 13			jsr CALCOBSTACLEADDR
  3014 20FF B4 17			ldy :STACKORIGIN-1,x
  3015 2101 B5 18			lda :STACKORIGIN,x
  3016 2103 99 0E 2B			sta adr.OBSTACLES,y
  3017 2106 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3018 2108 99 0F 2B			sta adr.OBSTACLES+1,y
  3019 210B CA				dex
  3020 210C A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3021 2110 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3022 2114 A9 02			lda #$02
  3023 2116 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3024 2119 A9 14			lda #$14
  3025 211B 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3026 211E 20 4D 13			jsr CALCOBSTACLEADDR
  3027 2121 B4 17			ldy :STACKORIGIN-1,x
  3028 2123 B5 18			lda :STACKORIGIN,x
  3029 2125 99 0E 2B			sta adr.OBSTACLES,y
  3030 2128 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3031 212A 99 0F 2B			sta adr.OBSTACLES+1,y
  3032 212D CA				dex
  3033
  3034 				; optimize FAIL (1, levels.inc), line = 75
  3035
  3036 212E A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3037 2132 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3038 2136 A9 16			lda #$16
  3039 2138 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3040 213B A9 14			lda #$14
  3041 213D 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3042 2140 20 4D 13			jsr CALCOBSTACLEADDR
  3043 2143 B4 17			ldy :STACKORIGIN-1,x
  3044 2145 B5 18			lda :STACKORIGIN,x
  3045 2147 99 0E 2B			sta adr.OBSTACLES,y
  3046 214A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3047 214C 99 0F 2B			sta adr.OBSTACLES+1,y
  3048 214F CA				dex
  3049 2150 CA				dex
  3050 2151			@exit
  3051 					.ifdef @new
  3052 					lda <@VarData
  3053 					sta :ztmp
  3054 					lda >@VarData
  3055 					ldy #@VarDataSize-1
  3056 					jmp @FreeMem
  3057 					els
  3058 2151 60				rts						; ret
  3059 					eif
  3060 				.endl
  3061
  3062 2152			.local	SETLEVEL06					; PROCEDURE
  3063
  3064 				; optimize OK (levels.inc), line = 82
  3065
  3066 2152 A9 01			lda #$01
  3067 2154 8D 36 2B			sta SETPLAYER.ISALIVE
  3068 2157 A9 62			lda #$62
  3069 2159 8D 35 2B			sta SETPLAYER.COLOUR
  3070 215C A9 51			lda #$51
  3071 215E 8D 34 2B			sta SETPLAYER.HEAD
  3072 2161 A9 00			lda #$00
  3073 2163 8D 33 2B			sta SETPLAYER.BRAIN
  3074 2166 A9 04			lda #$04
  3075 2168 8D 32 2B			sta SETPLAYER.DIR
  3076 216B A9 0C			lda #$0C
  3077 216D 8D 31 2B			sta SETPLAYER.Y
  3078 2170 A9 12			lda #$12
  3079 2172 8D 30 2B			sta SETPLAYER.X
  3080 2175 AD CF 2A			lda PLAYER1
  3081 2178 8D 2E 2B			sta SETPLAYER.P
  3082 217B AD D0 2A			lda PLAYER1+1
  3083 217E 8D 2F 2B			sta SETPLAYER.P+1
  3084 2181 20 9F 14			jsr SETPLAYER
  3085
  3086 				; optimize OK (levels.inc), line = 83
  3087
  3088 2184 A9 01			lda #$01
  3089 2186 8D 36 2B			sta SETPLAYER.ISALIVE
  3090 2189 A9 5D			lda #$5D
  3091 218B 8D 35 2B			sta SETPLAYER.COLOUR
  3092 218E A9 51			lda #$51
  3093 2190 8D 34 2B			sta SETPLAYER.HEAD
  3094 2193 A9 02			lda #$02
  3095 2195 8D 33 2B			sta SETPLAYER.BRAIN
  3096 2198 A9 08			lda #$08
  3097 219A 8D 32 2B			sta SETPLAYER.DIR
  3098 219D A9 0C			lda #$0C
  3099 219F 8D 31 2B			sta SETPLAYER.Y
  3100 21A2 A9 16			lda #$16
  3101 21A4 8D 30 2B			sta SETPLAYER.X
  3102 21A7 AD D1 2A			lda PLAYER2
  3103 21AA 8D 2E 2B			sta SETPLAYER.P
  3104 21AD AD D2 2A			lda PLAYER2+1
  3105 21B0 8D 2F 2B			sta SETPLAYER.P+1
  3106 21B3 20 9F 14			jsr SETPLAYER
  3107
  3108 				; optimize OK (levels.inc), line = 84
  3109
  3110 21B6 A9 01			lda #$01
  3111 21B8 8D 36 2B			sta SETPLAYER.ISALIVE
  3112 21BB A9 71			lda #$71
  3113 21BD 8D 35 2B			sta SETPLAYER.COLOUR
  3114 21C0 A9 51			lda #$51
  3115 21C2 8D 34 2B			sta SETPLAYER.HEAD
  3116 21C5 A9 02			lda #$02
  3117 21C7 8D 33 2B			sta SETPLAYER.BRAIN
  3118 21CA 8D 32 2B			sta SETPLAYER.DIR
  3119 21CD A9 06			lda #$06
  3120 21CF 8D 31 2B			sta SETPLAYER.Y
  3121 21D2 8D 30 2B			sta SETPLAYER.X
  3122 21D5 AD D3 2A			lda PLAYER3
  3123 21D8 8D 2E 2B			sta SETPLAYER.P
  3124 21DB AD D4 2A			lda PLAYER3+1
  3125 21DE 8D 2F 2B			sta SETPLAYER.P+1
  3126 21E1 20 9F 14			jsr SETPLAYER
  3127
  3128 				; optimize OK (levels.inc), line = 85
  3129
  3130 21E4 A9 01			lda #$01
  3131 21E6 8D 36 2B			sta SETPLAYER.ISALIVE
  3132 21E9 A9 55			lda #$55
  3133 21EB 8D 35 2B			sta SETPLAYER.COLOUR
  3134 21EE A9 51			lda #$51
  3135 21F0 8D 34 2B			sta SETPLAYER.HEAD
  3136 21F3 A9 03			lda #$03
  3137 21F5 8D 33 2B			sta SETPLAYER.BRAIN
  3138 21F8 A9 08			lda #$08
  3139 21FA 8D 32 2B			sta SETPLAYER.DIR
  3140 21FD A9 12			lda #$12
  3141 21FF 8D 31 2B			sta SETPLAYER.Y
  3142 2202 A9 24			lda #$24
  3143 2204 8D 30 2B			sta SETPLAYER.X
  3144 2207 AD D5 2A			lda PLAYER4
  3145 220A 8D 2E 2B			sta SETPLAYER.P
  3146 220D AD D6 2A			lda PLAYER4+1
  3147 2210 8D 2F 2B			sta SETPLAYER.P+1
  3148 2213 20 9F 14			jsr SETPLAYER
  3149
  3150 				; optimize FAIL (1, levels.inc), line = 87
  3151
  3152 2216 E8				inx
  3153 2217 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3154 221B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3155 221D A9 06			lda #$06
  3156 221F 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3157 2222 A9 0A			lda #$0A
  3158 2224 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3159 2227 20 4D 13			jsr CALCOBSTACLEADDR
  3160 222A B4 17			ldy :STACKORIGIN-1,x
  3161 222C B5 18			lda :STACKORIGIN,x
  3162 222E 99 0E 2B			sta adr.OBSTACLES,y
  3163 2231 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3164 2233 99 0F 2B			sta adr.OBSTACLES+1,y
  3165 2236 CA				dex
  3166 2237 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3167 223B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3168 223F A9 06			lda #$06
  3169 2241 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3170 2244 A9 1E			lda #$1E
  3171 2246 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3172 2249 20 4D 13			jsr CALCOBSTACLEADDR
  3173 224C B4 17			ldy :STACKORIGIN-1,x
  3174 224E B5 18			lda :STACKORIGIN,x
  3175 2250 99 0E 2B			sta adr.OBSTACLES,y
  3176 2253 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3177 2255 99 0F 2B			sta adr.OBSTACLES+1,y
  3178 2258 CA				dex
  3179
  3180 				; optimize FAIL (1, levels.inc), line = 88
  3181
  3182 2259 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3183 225D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3184 2261 A9 12			lda #$12
  3185 2263 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3186 2266 A9 0A			lda #$0A
  3187 2268 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3188 226B 20 4D 13			jsr CALCOBSTACLEADDR
  3189 226E B4 17			ldy :STACKORIGIN-1,x
  3190 2270 B5 18			lda :STACKORIGIN,x
  3191 2272 99 0E 2B			sta adr.OBSTACLES,y
  3192 2275 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3193 2277 99 0F 2B			sta adr.OBSTACLES+1,y
  3194 227A CA				dex
  3195 227B A9 06 95 18			mva #$06 :STACKORIGIN,x
  3196 227F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3197 2283 A9 12			lda #$12
  3198 2285 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3199 2288 A9 1E			lda #$1E
  3200 228A 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3201 228D 20 4D 13			jsr CALCOBSTACLEADDR
  3202 2290 B4 17			ldy :STACKORIGIN-1,x
  3203 2292 B5 18			lda :STACKORIGIN,x
  3204 2294 99 0E 2B			sta adr.OBSTACLES,y
  3205 2297 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3206 2299 99 0F 2B			sta adr.OBSTACLES+1,y
  3207 229C CA				dex
  3208
  3209 				; optimize FAIL (1, levels.inc), line = 89
  3210
  3211 229D A9 08 95 18			mva #$08 :STACKORIGIN,x
  3212 22A1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3213 22A5 A9 0C			lda #$0C
  3214 22A7 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3215 22AA A9 01			lda #$01
  3216 22AC 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3217 22AF 20 4D 13			jsr CALCOBSTACLEADDR
  3218 22B2 B4 17			ldy :STACKORIGIN-1,x
  3219 22B4 B5 18			lda :STACKORIGIN,x
  3220 22B6 99 0E 2B			sta adr.OBSTACLES,y
  3221 22B9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3222 22BB 99 0F 2B			sta adr.OBSTACLES+1,y
  3223 22BE CA				dex
  3224 22BF A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3225 22C3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3226 22C7 A9 02			lda #$02
  3227 22C9 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3228 22CC A9 14			lda #$14
  3229 22CE 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3230 22D1 20 4D 13			jsr CALCOBSTACLEADDR
  3231 22D4 B4 17			ldy :STACKORIGIN-1,x
  3232 22D6 B5 18			lda :STACKORIGIN,x
  3233 22D8 99 0E 2B			sta adr.OBSTACLES,y
  3234 22DB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3235 22DD 99 0F 2B			sta adr.OBSTACLES+1,y
  3236 22E0 CA				dex
  3237
  3238 				; optimize FAIL (1, levels.inc), line = 90
  3239
  3240 22E1 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3241 22E5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3242 22E9 A9 16			lda #$16
  3243 22EB 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3244 22EE A9 14			lda #$14
  3245 22F0 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3246 22F3 20 4D 13			jsr CALCOBSTACLEADDR
  3247 22F6 B4 17			ldy :STACKORIGIN-1,x
  3248 22F8 B5 18			lda :STACKORIGIN,x
  3249 22FA 99 0E 2B			sta adr.OBSTACLES,y
  3250 22FD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3251 22FF 99 0F 2B			sta adr.OBSTACLES+1,y
  3252 2302 CA				dex
  3253 2303 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3254 2307 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3255 230B A9 0C			lda #$0C
  3256 230D 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3257 2310 A9 14			lda #$14
  3258 2312 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3259 2315 20 4D 13			jsr CALCOBSTACLEADDR
  3260 2318 B4 17			ldy :STACKORIGIN-1,x
  3261 231A B5 18			lda :STACKORIGIN,x
  3262 231C 99 0E 2B			sta adr.OBSTACLES,y
  3263 231F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3264 2321 99 0F 2B			sta adr.OBSTACLES+1,y
  3265 2324 CA				dex
  3266 2325 CA				dex
  3267 2326			@exit
  3268 					.ifdef @new
  3269 					lda <@VarData
  3270 					sta :ztmp
  3271 					lda >@VarData
  3272 					ldy #@VarDataSize-1
  3273 					jmp @FreeMem
  3274 					els
  3275 2326 60				rts						; ret
  3276 					eif
  3277 				.endl
  3278
  3279 2327			.local	SETLEVEL07					; PROCEDURE
  3280
  3281 				; optimize OK (levels.inc), line = 97
  3282
  3283 2327 A9 01			lda #$01
  3284 2329 8D 36 2B			sta SETPLAYER.ISALIVE
  3285 232C A9 62			lda #$62
  3286 232E 8D 35 2B			sta SETPLAYER.COLOUR
  3287 2331 A9 51			lda #$51
  3288 2333 8D 34 2B			sta SETPLAYER.HEAD
  3289 2336 A9 00			lda #$00
  3290 2338 8D 33 2B			sta SETPLAYER.BRAIN
  3291 233B A9 04			lda #$04
  3292 233D 8D 32 2B			sta SETPLAYER.DIR
  3293 2340 A9 0C			lda #$0C
  3294 2342 8D 31 2B			sta SETPLAYER.Y
  3295 2345 A9 12			lda #$12
  3296 2347 8D 30 2B			sta SETPLAYER.X
  3297 234A AD CF 2A			lda PLAYER1
  3298 234D 8D 2E 2B			sta SETPLAYER.P
  3299 2350 AD D0 2A			lda PLAYER1+1
  3300 2353 8D 2F 2B			sta SETPLAYER.P+1
  3301 2356 20 9F 14			jsr SETPLAYER
  3302
  3303 				; optimize OK (levels.inc), line = 98
  3304
  3305 2359 A9 01			lda #$01
  3306 235B 8D 36 2B			sta SETPLAYER.ISALIVE
  3307 235E A9 5D			lda #$5D
  3308 2360 8D 35 2B			sta SETPLAYER.COLOUR
  3309 2363 A9 51			lda #$51
  3310 2365 8D 34 2B			sta SETPLAYER.HEAD
  3311 2368 A9 03			lda #$03
  3312 236A 8D 33 2B			sta SETPLAYER.BRAIN
  3313 236D A9 08			lda #$08
  3314 236F 8D 32 2B			sta SETPLAYER.DIR
  3315 2372 A9 17			lda #$17
  3316 2374 8D 31 2B			sta SETPLAYER.Y
  3317 2377 A9 01			lda #$01
  3318 2379 8D 30 2B			sta SETPLAYER.X
  3319 237C AD D1 2A			lda PLAYER2
  3320 237F 8D 2E 2B			sta SETPLAYER.P
  3321 2382 AD D2 2A			lda PLAYER2+1
  3322 2385 8D 2F 2B			sta SETPLAYER.P+1
  3323 2388 20 9F 14			jsr SETPLAYER
  3324
  3325 				; optimize OK (levels.inc), line = 99
  3326
  3327 238B A9 01			lda #$01
  3328 238D 8D 36 2B			sta SETPLAYER.ISALIVE
  3329 2390 A9 71			lda #$71
  3330 2392 8D 35 2B			sta SETPLAYER.COLOUR
  3331 2395 A9 51			lda #$51
  3332 2397 8D 34 2B			sta SETPLAYER.HEAD
  3333 239A A9 03			lda #$03
  3334 239C 8D 33 2B			sta SETPLAYER.BRAIN
  3335 239F A9 02			lda #$02
  3336 23A1 8D 32 2B			sta SETPLAYER.DIR
  3337 23A4 A9 04			lda #$04
  3338 23A6 8D 31 2B			sta SETPLAYER.Y
  3339 23A9 A9 1E			lda #$1E
  3340 23AB 8D 30 2B			sta SETPLAYER.X
  3341 23AE AD D3 2A			lda PLAYER3
  3342 23B1 8D 2E 2B			sta SETPLAYER.P
  3343 23B4 AD D4 2A			lda PLAYER3+1
  3344 23B7 8D 2F 2B			sta SETPLAYER.P+1
  3345 23BA 20 9F 14			jsr SETPLAYER
  3346
  3347 				; optimize OK (levels.inc), line = 100
  3348
  3349 23BD A9 01			lda #$01
  3350 23BF 8D 36 2B			sta SETPLAYER.ISALIVE
  3351 23C2 A9 55			lda #$55
  3352 23C4 8D 35 2B			sta SETPLAYER.COLOUR
  3353 23C7 A9 51			lda #$51
  3354 23C9 8D 34 2B			sta SETPLAYER.HEAD
  3355 23CC A9 02			lda #$02
  3356 23CE 8D 33 2B			sta SETPLAYER.BRAIN
  3357 23D1 A9 01			lda #$01
  3358 23D3 8D 32 2B			sta SETPLAYER.DIR
  3359 23D6 A9 15			lda #$15
  3360 23D8 8D 31 2B			sta SETPLAYER.Y
  3361 23DB A9 24			lda #$24
  3362 23DD 8D 30 2B			sta SETPLAYER.X
  3363 23E0 AD D5 2A			lda PLAYER4
  3364 23E3 8D 2E 2B			sta SETPLAYER.P
  3365 23E6 AD D6 2A			lda PLAYER4+1
  3366 23E9 8D 2F 2B			sta SETPLAYER.P+1
  3367 23EC 20 9F 14			jsr SETPLAYER
  3368
  3369 				; optimize FAIL (1, levels.inc), line = 102
  3370
  3371 23EF E8				inx
  3372 23F0 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3373 23F4 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3374 23F6 A9 06			lda #$06
  3375 23F8 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3376 23FB A9 0A			lda #$0A
  3377 23FD 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3378 2400 20 4D 13			jsr CALCOBSTACLEADDR
  3379 2403 B4 17			ldy :STACKORIGIN-1,x
  3380 2405 B5 18			lda :STACKORIGIN,x
  3381 2407 99 0E 2B			sta adr.OBSTACLES,y
  3382 240A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3383 240C 99 0F 2B			sta adr.OBSTACLES+1,y
  3384 240F CA				dex
  3385 2410 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3386 2414 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3387 2418 A9 06			lda #$06
  3388 241A 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3389 241D A9 1E			lda #$1E
  3390 241F 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3391 2422 20 4D 13			jsr CALCOBSTACLEADDR
  3392 2425 B4 17			ldy :STACKORIGIN-1,x
  3393 2427 B5 18			lda :STACKORIGIN,x
  3394 2429 99 0E 2B			sta adr.OBSTACLES,y
  3395 242C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3396 242E 99 0F 2B			sta adr.OBSTACLES+1,y
  3397 2431 CA				dex
  3398
  3399 				; optimize FAIL (1, levels.inc), line = 103
  3400
  3401 2432 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3402 2436 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3403 243A A9 12			lda #$12
  3404 243C 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3405 243F A9 0A			lda #$0A
  3406 2441 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3407 2444 20 4D 13			jsr CALCOBSTACLEADDR
  3408 2447 B4 17			ldy :STACKORIGIN-1,x
  3409 2449 B5 18			lda :STACKORIGIN,x
  3410 244B 99 0E 2B			sta adr.OBSTACLES,y
  3411 244E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3412 2450 99 0F 2B			sta adr.OBSTACLES+1,y
  3413 2453 CA				dex
  3414 2454 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3415 2458 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3416 245C A9 12			lda #$12
  3417 245E 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3418 2461 A9 1E			lda #$1E
  3419 2463 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3420 2466 20 4D 13			jsr CALCOBSTACLEADDR
  3421 2469 B4 17			ldy :STACKORIGIN-1,x
  3422 246B B5 18			lda :STACKORIGIN,x
  3423 246D 99 0E 2B			sta adr.OBSTACLES,y
  3424 2470 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3425 2472 99 0F 2B			sta adr.OBSTACLES+1,y
  3426 2475 CA				dex
  3427
  3428 				; optimize FAIL (1, levels.inc), line = 104
  3429
  3430 2476 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3431 247A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3432 247E A9 0C			lda #$0C
  3433 2480 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3434 2483 A9 01			lda #$01
  3435 2485 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3436 2488 20 4D 13			jsr CALCOBSTACLEADDR
  3437 248B B4 17			ldy :STACKORIGIN-1,x
  3438 248D B5 18			lda :STACKORIGIN,x
  3439 248F 99 0E 2B			sta adr.OBSTACLES,y
  3440 2492 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3441 2494 99 0F 2B			sta adr.OBSTACLES+1,y
  3442 2497 CA				dex
  3443 2498 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3444 249C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3445 24A0 A9 02			lda #$02
  3446 24A2 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3447 24A5 A9 14			lda #$14
  3448 24A7 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3449 24AA 20 4D 13			jsr CALCOBSTACLEADDR
  3450 24AD B4 17			ldy :STACKORIGIN-1,x
  3451 24AF B5 18			lda :STACKORIGIN,x
  3452 24B1 99 0E 2B			sta adr.OBSTACLES,y
  3453 24B4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3454 24B6 99 0F 2B			sta adr.OBSTACLES+1,y
  3455 24B9 CA				dex
  3456
  3457 				; optimize FAIL (1, levels.inc), line = 105
  3458
  3459 24BA A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3460 24BE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3461 24C2 A9 16			lda #$16
  3462 24C4 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3463 24C7 A9 14			lda #$14
  3464 24C9 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3465 24CC 20 4D 13			jsr CALCOBSTACLEADDR
  3466 24CF B4 17			ldy :STACKORIGIN-1,x
  3467 24D1 B5 18			lda :STACKORIGIN,x
  3468 24D3 99 0E 2B			sta adr.OBSTACLES,y
  3469 24D6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3470 24D8 99 0F 2B			sta adr.OBSTACLES+1,y
  3471 24DB CA				dex
  3472 24DC A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3473 24E0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3474 24E4 A9 0C			lda #$0C
  3475 24E6 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3476 24E9 A9 14			lda #$14
  3477 24EB 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3478 24EE 20 4D 13			jsr CALCOBSTACLEADDR
  3479 24F1 B4 17			ldy :STACKORIGIN-1,x
  3480 24F3 B5 18			lda :STACKORIGIN,x
  3481 24F5 99 0E 2B			sta adr.OBSTACLES,y
  3482 24F8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3483 24FA 99 0F 2B			sta adr.OBSTACLES+1,y
  3484 24FD CA				dex
  3485 24FE CA				dex
  3486 24FF			@exit
  3487 					.ifdef @new
  3488 					lda <@VarData
  3489 					sta :ztmp
  3490 					lda >@VarData
  3491 					ldy #@VarDataSize-1
  3492 					jmp @FreeMem
  3493 					els
  3494 24FF 60				rts						; ret
  3495 					eif
  3496 				.endl
  3497
  3498 2500			.local	SETLEVEL08					; PROCEDURE
  3499
  3500 				; optimize OK (levels.inc), line = 112
  3501
  3502 2500 A9 01			lda #$01
  3503 2502 8D 36 2B			sta SETPLAYER.ISALIVE
  3504 2505 A9 62			lda #$62
  3505 2507 8D 35 2B			sta SETPLAYER.COLOUR
  3506 250A A9 51			lda #$51
  3507 250C 8D 34 2B			sta SETPLAYER.HEAD
  3508 250F A9 00			lda #$00
  3509 2511 8D 33 2B			sta SETPLAYER.BRAIN
  3510 2514 A9 08			lda #$08
  3511 2516 8D 32 2B			sta SETPLAYER.DIR
  3512 2519 A9 17			lda #$17
  3513 251B 8D 31 2B			sta SETPLAYER.Y
  3514 251E A9 01			lda #$01
  3515 2520 8D 30 2B			sta SETPLAYER.X
  3516 2523 AD CF 2A			lda PLAYER1
  3517 2526 8D 2E 2B			sta SETPLAYER.P
  3518 2529 AD D0 2A			lda PLAYER1+1
  3519 252C 8D 2F 2B			sta SETPLAYER.P+1
  3520 252F 20 9F 14			jsr SETPLAYER
  3521
  3522 				; optimize OK (levels.inc), line = 113
  3523
  3524 2532 A9 01			lda #$01
  3525 2534 8D 36 2B			sta SETPLAYER.ISALIVE
  3526 2537 A9 5D			lda #$5D
  3527 2539 8D 35 2B			sta SETPLAYER.COLOUR
  3528 253C A9 51			lda #$51
  3529 253E 8D 34 2B			sta SETPLAYER.HEAD
  3530 2541 A9 03			lda #$03
  3531 2543 8D 33 2B			sta SETPLAYER.BRAIN
  3532 2546 A9 04			lda #$04
  3533 2548 8D 32 2B			sta SETPLAYER.DIR
  3534 254B A9 17			lda #$17
  3535 254D 8D 31 2B			sta SETPLAYER.Y
  3536 2550 A9 26			lda #$26
  3537 2552 8D 30 2B			sta SETPLAYER.X
  3538 2555 AD D1 2A			lda PLAYER2
  3539 2558 8D 2E 2B			sta SETPLAYER.P
  3540 255B AD D2 2A			lda PLAYER2+1
  3541 255E 8D 2F 2B			sta SETPLAYER.P+1
  3542 2561 20 9F 14			jsr SETPLAYER
  3543
  3544 				; optimize OK (levels.inc), line = 114
  3545
  3546 2564 A9 01			lda #$01
  3547 2566 8D 36 2B			sta SETPLAYER.ISALIVE
  3548 2569 A9 71			lda #$71
  3549 256B 8D 35 2B			sta SETPLAYER.COLOUR
  3550 256E A9 51			lda #$51
  3551 2570 8D 34 2B			sta SETPLAYER.HEAD
  3552 2573 A9 02			lda #$02
  3553 2575 8D 33 2B			sta SETPLAYER.BRAIN
  3554 2578 8D 32 2B			sta SETPLAYER.DIR
  3555 257B A9 01			lda #$01
  3556 257D 8D 31 2B			sta SETPLAYER.Y
  3557 2580 A9 0A			lda #$0A
  3558 2582 8D 30 2B			sta SETPLAYER.X
  3559 2585 AD D3 2A			lda PLAYER3
  3560 2588 8D 2E 2B			sta SETPLAYER.P
  3561 258B AD D4 2A			lda PLAYER3+1
  3562 258E 8D 2F 2B			sta SETPLAYER.P+1
  3563 2591 20 9F 14			jsr SETPLAYER
  3564
  3565 				; optimize OK (levels.inc), line = 115
  3566
  3567 2594 A9 01			lda #$01
  3568 2596 8D 36 2B			sta SETPLAYER.ISALIVE
  3569 2599 A9 55			lda #$55
  3570 259B 8D 35 2B			sta SETPLAYER.COLOUR
  3571 259E A9 51			lda #$51
  3572 25A0 8D 34 2B			sta SETPLAYER.HEAD
  3573 25A3 A9 04			lda #$04
  3574 25A5 8D 33 2B			sta SETPLAYER.BRAIN
  3575 25A8 8D 32 2B			sta SETPLAYER.DIR
  3576 25AB A9 01			lda #$01
  3577 25AD 8D 31 2B			sta SETPLAYER.Y
  3578 25B0 A9 26			lda #$26
  3579 25B2 8D 30 2B			sta SETPLAYER.X
  3580 25B5 AD D5 2A			lda PLAYER4
  3581 25B8 8D 2E 2B			sta SETPLAYER.P
  3582 25BB AD D6 2A			lda PLAYER4+1
  3583 25BE 8D 2F 2B			sta SETPLAYER.P+1
  3584 25C1 20 9F 14			jsr SETPLAYER
  3585
  3586 				; optimize FAIL (1, levels.inc), line = 117
  3587
  3588 25C4 E8				inx
  3589 25C5 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3590 25C9 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3591 25CB A9 06			lda #$06
  3592 25CD 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3593 25D0 A9 0A			lda #$0A
  3594 25D2 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3595 25D5 20 4D 13			jsr CALCOBSTACLEADDR
  3596 25D8 B4 17			ldy :STACKORIGIN-1,x
  3597 25DA B5 18			lda :STACKORIGIN,x
  3598 25DC 99 0E 2B			sta adr.OBSTACLES,y
  3599 25DF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3600 25E1 99 0F 2B			sta adr.OBSTACLES+1,y
  3601 25E4 CA				dex
  3602 25E5 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3603 25E9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3604 25ED A9 06			lda #$06
  3605 25EF 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3606 25F2 A9 1E			lda #$1E
  3607 25F4 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3608 25F7 20 4D 13			jsr CALCOBSTACLEADDR
  3609 25FA B4 17			ldy :STACKORIGIN-1,x
  3610 25FC B5 18			lda :STACKORIGIN,x
  3611 25FE 99 0E 2B			sta adr.OBSTACLES,y
  3612 2601 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3613 2603 99 0F 2B			sta adr.OBSTACLES+1,y
  3614 2606 CA				dex
  3615
  3616 				; optimize FAIL (1, levels.inc), line = 118
  3617
  3618 2607 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3619 260B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3620 260F A9 12			lda #$12
  3621 2611 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3622 2614 A9 0A			lda #$0A
  3623 2616 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3624 2619 20 4D 13			jsr CALCOBSTACLEADDR
  3625 261C B4 17			ldy :STACKORIGIN-1,x
  3626 261E B5 18			lda :STACKORIGIN,x
  3627 2620 99 0E 2B			sta adr.OBSTACLES,y
  3628 2623 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3629 2625 99 0F 2B			sta adr.OBSTACLES+1,y
  3630 2628 CA				dex
  3631 2629 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3632 262D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3633 2631 A9 12			lda #$12
  3634 2633 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3635 2636 A9 1E			lda #$1E
  3636 2638 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3637 263B 20 4D 13			jsr CALCOBSTACLEADDR
  3638 263E B4 17			ldy :STACKORIGIN-1,x
  3639 2640 B5 18			lda :STACKORIGIN,x
  3640 2642 99 0E 2B			sta adr.OBSTACLES,y
  3641 2645 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3642 2647 99 0F 2B			sta adr.OBSTACLES+1,y
  3643 264A CA				dex
  3644
  3645 				; optimize FAIL (1, levels.inc), line = 119
  3646
  3647 264B A9 08 95 18			mva #$08 :STACKORIGIN,x
  3648 264F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3649 2653 A9 0C			lda #$0C
  3650 2655 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3651 2658 A9 01			lda #$01
  3652 265A 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3653 265D 20 4D 13			jsr CALCOBSTACLEADDR
  3654 2660 B4 17			ldy :STACKORIGIN-1,x
  3655 2662 B5 18			lda :STACKORIGIN,x
  3656 2664 99 0E 2B			sta adr.OBSTACLES,y
  3657 2667 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3658 2669 99 0F 2B			sta adr.OBSTACLES+1,y
  3659 266C CA				dex
  3660 266D A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3661 2671 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3662 2675 A9 02			lda #$02
  3663 2677 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3664 267A A9 14			lda #$14
  3665 267C 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3666 267F 20 4D 13			jsr CALCOBSTACLEADDR
  3667 2682 B4 17			ldy :STACKORIGIN-1,x
  3668 2684 B5 18			lda :STACKORIGIN,x
  3669 2686 99 0E 2B			sta adr.OBSTACLES,y
  3670 2689 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3671 268B 99 0F 2B			sta adr.OBSTACLES+1,y
  3672 268E CA				dex
  3673
  3674 				; optimize FAIL (1, levels.inc), line = 120
  3675
  3676 268F A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3677 2693 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3678 2697 A9 16			lda #$16
  3679 2699 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3680 269C A9 14			lda #$14
  3681 269E 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3682 26A1 20 4D 13			jsr CALCOBSTACLEADDR
  3683 26A4 B4 17			ldy :STACKORIGIN-1,x
  3684 26A6 B5 18			lda :STACKORIGIN,x
  3685 26A8 99 0E 2B			sta adr.OBSTACLES,y
  3686 26AB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3687 26AD 99 0F 2B			sta adr.OBSTACLES+1,y
  3688 26B0 CA				dex
  3689 26B1 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3690 26B5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3691 26B9 A9 0C			lda #$0C
  3692 26BB 8D 2B 2B			sta CALCOBSTACLEADDR.Y
  3693 26BE A9 14			lda #$14
  3694 26C0 8D 2A 2B			sta CALCOBSTACLEADDR.X
  3695 26C3 20 4D 13			jsr CALCOBSTACLEADDR
  3696 26C6 B4 17			ldy :STACKORIGIN-1,x
  3697 26C8 B5 18			lda :STACKORIGIN,x
  3698 26CA 99 0E 2B			sta adr.OBSTACLES,y
  3699 26CD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3700 26CF 99 0F 2B			sta adr.OBSTACLES+1,y
  3701 26D2 CA				dex
  3702 26D3 CA				dex
  3703 26D4			@exit
  3704 					.ifdef @new
  3705 					lda <@VarData
  3706 					sta :ztmp
  3707 					lda >@VarData
  3708 					ldy #@VarDataSize-1
  3709 					jmp @FreeMem
  3710 					els
  3711 26D4 60				rts						; ret
  3712 					eif
  3713 				.endl
  3714
  3715 26D5			.local	INITPLAYFIELD					; PROCEDURE
  3716
  3717 				; optimize OK (init.inc), line = 5
  3718
  3719 26D5 A9 1F			lda #$1F
  3720 26D7 8D 15 FF			sta BACKGROUND
  3721 26DA A9 00			lda #$00
  3722 26DC 8D 19 FF			sta BOREDER
  3723
  3724 				; optimize OK (init.inc), line = 6
  3725
  3726 26DF A9 20			lda #$20
  3727 26E1 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3728 26E3 A9 C0			lda #$C0
  3729 26E5 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3730 26E7 A9 03			lda #$03
  3731 26E9 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3732 26EB A9 00			lda #$00
  3733 26ED 85 08			sta SYSTEM.FILLCHAR_0056.A
  3734 26EF A9 0C			lda #$0C
  3735 26F1 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3736 26F3 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3737
  3738 				; optimize OK (init.inc), line = 8
  3739
  3740 26F6 A9 27			lda #$27
  3741 26F8 85 58			sta T0B
  3742
  3743 26FA			l_0D83
  3744 				; --- ForToDoCondition
  3745
  3746 				; optimize OK (init.inc), line = 9
  3747
  3748 26FA A4 58			ldy T0B
  3749 26FC A9 A0			lda #$A0
  3750 26FE 99 00 0C			sta $0C00,y
  3751
  3752 				; optimize OK (init.inc), line = 10
  3753
  3754 2701 99 C0 0F			sta $0FC0,y
  3755
  3756 				; optimize OK (init.inc), line = 11
  3757
  3758 2704 A9 41			lda #$41
  3759 2706 99 00 08			sta $0800,y
  3760
  3761 				; optimize OK (init.inc), line = 12
  3762
  3763 2709 99 C0 0B			sta $0BC0,y
  3764
  3765 				; --- ForToDoEpilog
  3766 270C C6 58			dec T0B
  3767 270E 10 EA			jpl l_0D83
  3768 2710			l_0D91
  3769
  3770 				; optimize OK (init.inc), line = 15
  3771
  3772 2710 A9 18			lda #$18
  3773 2712 85 58			sta T0B
  3774
  3775 2714			l_0DC3
  3776 				; --- ForToDoCondition
  3777 2714 A5 58			lda T0B
  3778 2716 C9 01			cmp #$01
  3779 2718 90 3A			jcc l_0DD1
  3780
  3781 				; optimize OK (init.inc), line = 16
  3782
  3783 271A 0A				asl @
  3784 271B A8				tay
  3785 271C A9 FF			lda #$FF
  3786 271E 18 79 0E 10			add adr.MUL40,y
  3787 2722 85 12			sta :bp2
  3788 2724 A9 0B			lda #$0B
  3789 2726 79 0F 10			adc adr.MUL40+1,y
  3790 2729 85 13			sta :bp2+1
  3791 272B A0 00			ldy #$00
  3792 272D A9 A0			lda #$A0
  3793 272F 91 12			sta (:bp2),y
  3794 2731 C8				iny
  3795 2732 91 12			sta (:bp2),y
  3796
  3797 				; optimize OK (init.inc), line = 17
  3798
  3799 2734 A5 58			lda T0B
  3800 2736 0A				asl @
  3801 2737 A8				tay
  3802 2738 A9 FF			lda #$FF
  3803 273A 18 79 0E 10			add adr.MUL40,y
  3804 273E 85 12			sta :bp2
  3805 2740 A9 07			lda #$07
  3806 2742 79 0F 10			adc adr.MUL40+1,y
  3807 2745 85 13			sta :bp2+1
  3808 2747 A0 00			ldy #$00
  3809 2749 A9 41			lda #$41
  3810 274B 91 12			sta (:bp2),y
  3811 274D C8				iny
  3812 274E 91 12			sta (:bp2),y
  3813
  3814 				; --- ForToDoEpilog
  3815 2750 C6 58			dec T0B
  3816 2752 10 C0			jpl l_0DC3
  3817 2754			l_0DD1
  3818
  3819 				; optimize OK (init.inc), line = 20
  3820
  3821 2754 A9 07			lda #$07
  3822 2756 85 59			sta I0B
  3823
  3824 2758			l_0DF5
  3825 				; --- ForToDoCondition
  3826 2758 A5 59			lda I0B
  3827 275A 0A				asl @
  3828 275B A8				tay
  3829 275C A9 7E			lda #$7E
  3830 275E 99 0E 2B			sta adr.OBSTACLES,y
  3831 2761 A9 00			lda #$00
  3832 2763 99 0F 2B			sta adr.OBSTACLES+1,y
  3833
  3834 				; --- ForToDoEpilog
  3835 2766 C6 59			dec I0B
  3836 2768 10 EE			jpl l_0DF5
  3837 276A			l_0E03
  3838
  3839 				; ------------------------------------------------------------
  3840
  3841 = 0000			@FORTMP_0D80	= $00
  3842 = 0001			@FORTMP_0DC0	= $01
  3843 = 0000			@FORTMP_0DF2	= $00
  3844 276A			@exit
  3845 					.ifdef @new
  3846 					lda <@VarData
  3847 					sta :ztmp
  3848 					lda >@VarData
  3849 					ldy #@VarDataSize-1
  3850 					jmp @FreeMem
  3851 					els
  3852 276A 60				rts						; ret
  3853 					eif
  3854 				.endl
  3855
  3856 276B			.local	INITPLAYERS					; PROCEDURE
  3857
  3858 				; optimize OK (init.inc), line = 27
  3859
  3860 276B A9 00			lda #$00
  3861 276D 8D F5 2A			sta PLAYER1.ISALIVE
  3862 2770 8D FD 2A			sta PLAYER2.ISALIVE
  3863
  3864 				; optimize OK (init.inc), line = 28
  3865
  3866 2773 8D 05 2B			sta PLAYER3.ISALIVE
  3867 2776 8D 0D 2B			sta PLAYER4.ISALIVE
  3868 2779			@exit
  3869 					.ifdef @new
  3870 					lda <@VarData
  3871 					sta :ztmp
  3872 					lda >@VarData
  3873 					ldy #@VarDataSize-1
  3874 					jmp @FreeMem
  3875 					els
  3876 2779 60				rts						; ret
  3877 					eif
  3878 				.endl
  3879
  3880 277A			.local	INITSCORE					; PROCEDURE
  3881
  3882 				; optimize OK (init.inc), line = 35
  3883
  3884 277A A9 30			lda #$30
  3885 277C 8D F4 2A			sta PLAYER1.SCORE
  3886 277F 8D FC 2A			sta PLAYER2.SCORE
  3887
  3888 				; optimize OK (init.inc), line = 36
  3889
  3890 2782 8D 04 2B			sta PLAYER3.SCORE
  3891 2785 8D 0C 2B			sta PLAYER4.SCORE
  3892 2788			@exit
  3893 					.ifdef @new
  3894 					lda <@VarData
  3895 					sta :ztmp
  3896 					lda >@VarData
  3897 					ldy #@VarDataSize-1
  3898 					jmp @FreeMem
  3899 					els
  3900 2788 60				rts						; ret
  3901 					eif
  3902 				.endl
  3903
  3904 2789			.local	INITARENA					; PROCEDURE
  3905
  3906 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 43
  3907
  3908 2789 20 D5 26			jsr INITPLAYFIELD
  3909 278C 20 6B 27			jsr INITPLAYERS
  3910
  3911 				; optimize OK (init.inc), line = 45
  3912
  3913 278F AD EC 2A			lda LEVEL
  3914 2792 8D 3F 2B			sta @CASETMP_0006
  3915 2795 C9 00			cmp #$00
  3916 2797 D0 06			jne l_0E48
  3917 2799			@
  3918
  3919 				; optimize FAIL ('SETLEVEL00', init.inc), line = 46
  3920
  3921 2799 20 42 19			jsr SETLEVEL00
  3922 279C 4C EC 27			jmp a_0006
  3923 279F			l_0E48
  3924 279F C9 01			cmp #$01
  3925 27A1 D0 06			jne l_0E52
  3926 27A3			@
  3927
  3928 				; optimize FAIL ('SETLEVEL01', init.inc), line = 47
  3929
  3930 27A3 20 73 1A			jsr SETLEVEL01
  3931 27A6 4C EC 27			jmp a_0006
  3932 27A9			l_0E52
  3933 27A9 C9 02			cmp #$02
  3934 27AB D0 06			jne l_0E5C
  3935 27AD			@
  3936
  3937 				; optimize FAIL ('SETLEVEL02', init.inc), line = 48
  3938
  3939 27AD 20 A4 1B			jsr SETLEVEL02
  3940 27B0 4C EC 27			jmp a_0006
  3941 27B3			l_0E5C
  3942 27B3 C9 03			cmp #$03
  3943 27B5 D0 06			jne l_0E66
  3944 27B7			@
  3945
  3946 				; optimize FAIL ('SETLEVEL03', init.inc), line = 49
  3947
  3948 27B7 20 D5 1C			jsr SETLEVEL03
  3949 27BA 4C EC 27			jmp a_0006
  3950 27BD			l_0E66
  3951 27BD C9 04			cmp #$04
  3952 27BF D0 06			jne l_0E70
  3953 27C1			@
  3954
  3955 				; optimize FAIL ('SETLEVEL04', init.inc), line = 50
  3956
  3957 27C1 20 28 1E			jsr SETLEVEL04
  3958 27C4 4C EC 27			jmp a_0006
  3959 27C7			l_0E70
  3960 27C7 C9 05			cmp #$05
  3961 27C9 D0 06			jne l_0E7A
  3962 27CB			@
  3963
  3964 				; optimize FAIL ('SETLEVEL05', init.inc), line = 51
  3965
  3966 27CB 20 9D 1F			jsr SETLEVEL05
  3967 27CE 4C EC 27			jmp a_0006
  3968 27D1			l_0E7A
  3969 27D1 C9 06			cmp #$06
  3970 27D3 D0 06			jne l_0E84
  3971 27D5			@
  3972
  3973 				; optimize FAIL ('SETLEVEL06', init.inc), line = 52
  3974
  3975 27D5 20 52 21			jsr SETLEVEL06
  3976 27D8 4C EC 27			jmp a_0006
  3977 27DB			l_0E84
  3978 27DB C9 07			cmp #$07
  3979 27DD D0 06			jne l_0E8E
  3980 27DF			@
  3981
  3982 				; optimize FAIL ('SETLEVEL07', init.inc), line = 53
  3983
  3984 27DF 20 27 23			jsr SETLEVEL07
  3985 27E2 4C EC 27			jmp a_0006
  3986 27E5			l_0E8E
  3987 27E5 C9 08			cmp #$08
  3988 27E7 D0 03			jne l_0E98
  3989 27E9			@
  3990
  3991 				; optimize FAIL ('SETLEVEL08', init.inc), line = 54
  3992
  3993 27E9 20 00 25			jsr SETLEVEL08
  3994 27EC			l_0E98
  3995 27EC			a_0006
  3996
  3997 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 57
  3998
  3999 27EC 20 70 13			jsr SAVEOBSTACLES
  4000 27EF 20 18 13			jsr ANIMATEOBSTACLES
  4001 27F2 20 E9 11			jsr SHOWSCORE
  4002
  4003 				; ------------------------------------------------------------
  4004
  4005 = 2B3F			@CASETMP_0006	= DATAORIGIN+$0063
  4006
  4007 = 2B3F			@VarData	= @CASETMP_0006
  4008 = 0001			@VarDataSize	= 1
  4009
  4010 27F5			@exit
  4011 					.ifdef @new
  4012 					lda <@VarData
  4013 					sta :ztmp
  4014 					lda >@VarData
  4015 					ldy #@VarDataSize-1
  4016 					jmp @FreeMem
  4017 					els
  4018 27F5 60				rts						; ret
  4019 					eif
  4020 				.endl
  4021
  4022 27F6			.local	HUMAN						; PROCEDURE
  4023
  4024 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  4025
  4026 27F6 20 8D 14			jsr CHECKJOYSTATUS
  4027 27F9 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4028 2803 A0 04			ldy #PLY.DIR-DATAORIGIN
  4029 2805 B1 12			lda (:bp2),y
  4030 2807 85 5B			sta NEWDIR
  4031
  4032 				; optimize OK (main.pas), line = 16
  4033
  4034 2809 A5 63			lda JOYSTATUS
  4035 280B 8D 40 2B			sta @CASETMP_0007
  4036 280E C9 01			cmp #$01
  4037 2810 D0 19			jne l_0EBF
  4038 2812			@
  4039
  4040 				; optimize OK (main.pas), line = 17
  4041
  4042 2812 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4043 281C A0 04			ldy #PLY.DIR-DATAORIGIN
  4044 281E B1 12			lda (:bp2),y
  4045 2820 C9 02			cmp #$02
  4046 2822 F0 04			jeq l_0ED1
  4047 2824 A9 01			lda #$01
  4048 2826 85 5B			sta NEWDIR
  4049 2828			l_0ED1
  4050
  4051 2828 4C 7F 28			jmp a_0007
  4052 282B			l_0EBF
  4053 282B C9 02			cmp #$02
  4054 282D D0 19			jne l_0EE1
  4055 282F			@
  4056
  4057 				; optimize OK (main.pas), line = 18
  4058
  4059 282F AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4060 2839 A0 04			ldy #PLY.DIR-DATAORIGIN
  4061 283B B1 12			lda (:bp2),y
  4062 283D C9 01			cmp #$01
  4063 283F F0 04			jeq l_0EF3
  4064 2841 A9 02			lda #$02
  4065 2843 85 5B			sta NEWDIR
  4066 2845			l_0EF3
  4067
  4068 2845 4C 7F 28			jmp a_0007
  4069 2848			l_0EE1
  4070 2848 C9 04			cmp #$04
  4071 284A D0 19			jne l_0F03
  4072 284C			@
  4073
  4074 				; optimize OK (main.pas), line = 19
  4075
  4076 284C AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4077 2856 A0 04			ldy #PLY.DIR-DATAORIGIN
  4078 2858 B1 12			lda (:bp2),y
  4079 285A C9 08			cmp #$08
  4080 285C F0 04			jeq l_0F15
  4081 285E A9 04			lda #$04
  4082 2860 85 5B			sta NEWDIR
  4083 2862			l_0F15
  4084
  4085 2862 4C 7F 28			jmp a_0007
  4086 2865			l_0F03
  4087 2865 C9 08			cmp #$08
  4088 2867 D0 16			jne l_0F25
  4089 2869			@
  4090
  4091 				; optimize OK (main.pas), line = 20
  4092
  4093 2869 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4094 2873 A0 04			ldy #PLY.DIR-DATAORIGIN
  4095 2875 B1 12			lda (:bp2),y
  4096 2877 C9 04			cmp #$04
  4097 2879 F0 04			jeq l_0F37
  4098 287B A9 08			lda #$08
  4099 287D 85 5B			sta NEWDIR
  4100 287F			l_0F37
  4101
  4102 287F			l_0F25
  4103 287F			a_0007
  4104
  4105 				; optimize OK (main.pas), line = 23
  4106
  4107 287F A5 5B			lda NEWDIR
  4108 2881 25 5C			and AVAILDIR
  4109 2883 D0 18			jne l_0F5E
  4110
  4111 				; optimize OK (main.pas), line = 24
  4112
  4113 2885 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4114 288F A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4115 2891 A9 00			lda #$00
  4116 2893 91 12			sta (:bp2),y
  4117 2895 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4118 2897 A9 2A			lda #$2A
  4119 2899 91 12			sta (:bp2),y
  4120 289B C6 5A			dec ALIVE
  4121 289D			l_0F5E
  4122
  4123 				; ------------------------------------------------------------
  4124
  4125 = 2B40			@CASETMP_0007	= DATAORIGIN+$0064
  4126
  4127 = 2B40			@VarData	= @CASETMP_0007
  4128 = 0001			@VarDataSize	= 1
  4129
  4130 289D			@exit
  4131 					.ifdef @new
  4132 					lda <@VarData
  4133 					sta :ztmp
  4134 					lda >@VarData
  4135 					ldy #@VarDataSize-1
  4136 					jmp @FreeMem
  4137 					els
  4138 289D 60				rts						; ret
  4139 					eif
  4140 				.endl
  4141
  4142 289E			.local	PLAYERMOVE					; PROCEDURE
  4143
  4144 				; optimize OK (main.pas), line = 32
  4145
  4146 289E AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4147 28A8 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4148 28AA B1 12			lda (:bp2),y
  4149 28AC D0 03 4C D3 29		jeq l_0F7D
  4150
  4151 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4152
  4153 28B1 20 83 12			jsr CHECKAVAILDIR
  4154
  4155 				; optimize OK (main.pas), line = 35
  4156
  4157 28B4 A5 5C			lda AVAILDIR
  4158 28B6 D0 35			jne l_0F91
  4159
  4160 				; optimize OK (main.pas), line = 36
  4161
  4162 28B8 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4163 28C2 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4164 28C4 A9 00			lda #$00
  4165 28C6 91 12			sta (:bp2),y
  4166 28C8 C6 5A			dec ALIVE
  4167
  4168 				; optimize OK (main.pas), line = 37
  4169
  4170 28CA A0 00			ldy #PLY.X-DATAORIGIN
  4171 28CC B1 12			lda (:bp2),y
  4172 28CE 8D 21 2B			sta PUTCHAR_008E.X
  4173 28D1 A0 01			ldy #PLY.Y-DATAORIGIN
  4174 28D3 B1 12			lda (:bp2),y
  4175 28D5 8D 22 2B			sta PUTCHAR_008E.Y
  4176 28D8 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4177 28DA B1 12			lda (:bp2),y
  4178 28DC 18 69 80			add #$80
  4179 28DF 8D 24 2B			sta PUTCHAR_008E.C
  4180 28E2 A9 57			lda #$57
  4181 28E4 8D 23 2B			sta PUTCHAR_008E.V
  4182 28E7 20 99 11			jsr PUTCHAR_008E
  4183 28EA 4C D3 29			jmp l_0FB2
  4184 28ED			l_0F91
  4185
  4186 				; optimize OK (main.pas), line = 40
  4187
  4188 28ED AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4189 28F7 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4190 28F9 B1 12			lda (:bp2),y
  4191 28FB 8D 41 2B			sta @CASETMP_0008
  4192 28FE C9 00			cmp #$00
  4193 2900 D0 06			jne l_0FBD
  4194 2902			@
  4195
  4196 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4197
  4198 2902 20 F6 27			jsr HUMAN
  4199 2905 4C 2D 29			jmp a_0008
  4200 2908			l_0FBD
  4201 2908 C9 01			cmp #$01
  4202 290A D0 06			jne l_0FC7
  4203 290C			@
  4204
  4205 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4206
  4207 290C 20 40 15			jsr AISTRAIGHT
  4208 290F 4C 2D 29			jmp a_0008
  4209 2912			l_0FC7
  4210 2912 C9 02			cmp #$02
  4211 2914 D0 06			jne l_0FD1
  4212 2916			@
  4213
  4214 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4215
  4216 2916 20 C5 15			jsr AISAPPER
  4217 2919 4C 2D 29			jmp a_0008
  4218 291C			l_0FD1
  4219 291C C9 03			cmp #$03
  4220 291E D0 06			jne l_0FDB
  4221 2920			@
  4222
  4223 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4224
  4225 2920 20 1F 18			jsr AIBULLY
  4226 2923 4C 2D 29			jmp a_0008
  4227 2926			l_0FDB
  4228 2926 C9 04			cmp #$04
  4229 2928 D0 03			jne l_0FE5
  4230 292A			@
  4231
  4232 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4233
  4234 292A 20 ED 18			jsr AIMIRROR
  4235 292D			l_0FE5
  4236 292D			a_0008
  4237
  4238 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4239
  4240 292D 20 B4 13			jsr DRAWTAIL
  4241 2930 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4242 293A A0 04			ldy #PLY.DIR-DATAORIGIN
  4243 293C A5 5B			lda NEWDIR
  4244 293E 91 12			sta (:bp2),y
  4245
  4246 				; optimize OK (main.pas), line = 50
  4247
  4248 2940 A5 5B			lda NEWDIR
  4249 2942 8D 42 2B			sta @CASETMP_0009
  4250 2945 C9 01			cmp #$01
  4251 2947 D0 16			jne l_1001
  4252 2949			@
  4253
  4254 				; optimize OK (main.pas), line = 51
  4255
  4256 2949 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4257 2953 A0 01			ldy #PLY.Y-DATAORIGIN
  4258 2955 B1 12			lda (:bp2),y
  4259 2957 38 E9 01			sub #$01
  4260 295A 91 12			sta (:bp2),y
  4261
  4262 295C 4C AA 29			jmp a_0009
  4263 295F			l_1001
  4264 295F C9 02			cmp #$02
  4265 2961 D0 16			jne l_100B
  4266 2963			@
  4267
  4268 				; optimize OK (main.pas), line = 52
  4269
  4270 2963 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4271 296D A0 01			ldy #PLY.Y-DATAORIGIN
  4272 296F B1 12			lda (:bp2),y
  4273 2971 18 69 01			add #$01
  4274 2974 91 12			sta (:bp2),y
  4275
  4276 2976 4C AA 29			jmp a_0009
  4277 2979			l_100B
  4278 2979 C9 04			cmp #$04
  4279 297B D0 16			jne l_1015
  4280 297D			@
  4281
  4282 				; optimize OK (main.pas), line = 53
  4283
  4284 297D AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4285 2987 A0 00			ldy #PLY.X-DATAORIGIN
  4286 2989 B1 12			lda (:bp2),y
  4287 298B 38 E9 01			sub #$01
  4288 298E 91 12			sta (:bp2),y
  4289
  4290 2990 4C AA 29			jmp a_0009
  4291 2993			l_1015
  4292 2993 C9 08			cmp #$08
  4293 2995 D0 13			jne l_101F
  4294 2997			@
  4295
  4296 				; optimize OK (main.pas), line = 54
  4297
  4298 2997 AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4299 29A1 A0 00			ldy #PLY.X-DATAORIGIN
  4300 29A3 B1 12			lda (:bp2),y
  4301 29A5 18 69 01			add #$01
  4302 29A8 91 12			sta (:bp2),y
  4303
  4304 29AA			l_101F
  4305 29AA			a_0009
  4306
  4307 				; optimize OK (main.pas), line = 57
  4308
  4309 29AA AC CB 2A 84 12 AC + 	mwy PLY :bp2
  4310 29B4 A0 00			ldy #PLY.X-DATAORIGIN
  4311 29B6 B1 12			lda (:bp2),y
  4312 29B8 8D 21 2B			sta PUTCHAR_008E.X
  4313 29BB A0 01			ldy #PLY.Y-DATAORIGIN
  4314 29BD B1 12			lda (:bp2),y
  4315 29BF 8D 22 2B			sta PUTCHAR_008E.Y
  4316 29C2 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4317 29C4 B1 12			lda (:bp2),y
  4318 29C6 8D 23 2B			sta PUTCHAR_008E.V
  4319 29C9 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4320 29CB B1 12			lda (:bp2),y
  4321 29CD 8D 24 2B			sta PUTCHAR_008E.C
  4322 29D0 20 99 11			jsr PUTCHAR_008E
  4323 29D3			l_0FB2
  4324 29D3			l_0F7D
  4325
  4326 				; ------------------------------------------------------------
  4327
  4328 = 2B41			@CASETMP_0008	= DATAORIGIN+$0065
  4329 = 2B42			@CASETMP_0009	= DATAORIGIN+$0066
  4330
  4331 = 2B41			@VarData	= @CASETMP_0008
  4332 = 0002			@VarDataSize	= 2
  4333
  4334 29D3			@exit
  4335 					.ifdef @new
  4336 					lda <@VarData
  4337 					sta :ztmp
  4338 					lda >@VarData
  4339 					ldy #@VarDataSize-1
  4340 					jmp @FreeMem
  4341 					els
  4342 29D3 60				rts						; ret
  4343 					eif
  4344 				.endl
  4345
  4346 29D4			.local	STARTSCREEN					; PROCEDURE
  4347
  4348 				; optimize OK (main.pas), line = 68
  4349
  4350 29D4 AD F1 2A			lda PLAYER1.COLOUR
  4351 29D7 18 69 80			add #$80
  4352 29DA 8D 24 2B			sta PUTCHAR_008E.C
  4353 29DD AD F0 2A			lda PLAYER1.HEAD
  4354 29E0 8D 23 2B			sta PUTCHAR_008E.V
  4355 29E3 AD EF 2A			lda PLAYER1.Y
  4356 29E6 8D 22 2B			sta PUTCHAR_008E.Y
  4357 29E9 AD EE 2A			lda PLAYER1.X
  4358 29EC 8D 21 2B			sta PUTCHAR_008E.X
  4359 29EF 20 99 11			jsr PUTCHAR_008E
  4360
  4361 				; --- RepeatUntilProlog
  4362 29F2			l_104D
  4363
  4364 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4365
  4366 29F2 20 8D 14			jsr CHECKJOYSTATUS
  4367 29F5 A5 63			lda JOYSTATUS
  4368 29F7 C9 40			cmp #$40
  4369 29F9 D0 F7			jne l_104D
  4370
  4371 				; optimize OK (main.pas), line = 70
  4372
  4373 29FB AD F1 2A			lda PLAYER1.COLOUR
  4374 29FE 8D 24 2B			sta PUTCHAR_008E.C
  4375 2A01 AD F0 2A			lda PLAYER1.HEAD
  4376 2A04 8D 23 2B			sta PUTCHAR_008E.V
  4377 2A07 AD EF 2A			lda PLAYER1.Y
  4378 2A0A 8D 22 2B			sta PUTCHAR_008E.Y
  4379 2A0D AD EE 2A			lda PLAYER1.X
  4380 2A10 8D 21 2B			sta PUTCHAR_008E.X
  4381 2A13 20 99 11			jsr PUTCHAR_008E
  4382 2A16			@exit
  4383 					.ifdef @new
  4384 					lda <@VarData
  4385 					sta :ztmp
  4386 					lda >@VarData
  4387 					ldy #@VarDataSize-1
  4388 					jmp @FreeMem
  4389 					els
  4390 2A16 60				rts						; ret
  4391 					eif
  4392 				.endl
  4393
  4394 2A17			.local	MAINLOOP					; PROCEDURE
  4395
  4396 				; optimize OK (main.pas), line = 77
  4397
  4398 2A17 A9 FF			lda #$FF
  4399 2A19 85 5A			sta ALIVE
  4400
  4401 				; optimize FAIL ('INITARENA', main.pas), line = 79
  4402
  4403 2A1B 20 89 27			jsr INITARENA
  4404 2A1E 20 D4 29			jsr STARTSCREEN
  4405
  4406 				; --- RepeatUntilProlog
  4407 2A21			l_1073
  4408
  4409 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 82
  4410
  4411 2A21 20 23 11			jsr SYSTEM.PAUSE_006B
  4412
  4413 				; optimize OK (main.pas), line = 83
  4414
  4415 2A24 AD CF 2A			lda PLAYER1
  4416 2A27 8D CB 2A			sta PLY
  4417 2A2A AD D0 2A			lda PLAYER1+1
  4418 2A2D 8D CC 2A			sta PLY+1
  4419 2A30 20 9E 28			jsr PLAYERMOVE
  4420
  4421 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 85
  4422
  4423 2A33 20 18 13			jsr ANIMATEOBSTACLES
  4424
  4425 				; optimize OK (main.pas), line = 87
  4426
  4427 2A36 A9 02			lda #$02
  4428 2A38 8D E8 2A			sta SYSTEM.PAUSE_006C.N
  4429 2A3B A9 00			lda #$00
  4430 2A3D 8D E9 2A			sta SYSTEM.PAUSE_006C.N+1
  4431 2A40 20 2A 11			jsr SYSTEM.PAUSE_006C
  4432
  4433 				; optimize OK (main.pas), line = 88
  4434
  4435 2A43 AD D1 2A			lda PLAYER2
  4436 2A46 8D CB 2A			sta PLY
  4437 2A49 AD D2 2A			lda PLAYER2+1
  4438 2A4C 8D CC 2A			sta PLY+1
  4439 2A4F 20 9E 28			jsr PLAYERMOVE
  4440
  4441 				; optimize OK (main.pas), line = 89
  4442
  4443 2A52 AD D3 2A			lda PLAYER3
  4444 2A55 8D CB 2A			sta PLY
  4445 2A58 AD D4 2A			lda PLAYER3+1
  4446 2A5B 8D CC 2A			sta PLY+1
  4447 2A5E 20 9E 28			jsr PLAYERMOVE
  4448
  4449 				; optimize OK (main.pas), line = 90
  4450
  4451 2A61 AD D5 2A			lda PLAYER4
  4452 2A64 8D CB 2A			sta PLY
  4453 2A67 AD D6 2A			lda PLAYER4+1
  4454 2A6A 8D CC 2A			sta PLY+1
  4455 2A6D 20 9E 28			jsr PLAYERMOVE
  4456
  4457 				; optimize OK (main.pas), line = 91
  4458
  4459 2A70 A5 5A			lda ALIVE
  4460 2A72 F0 04			jeq l_1073x
  4461 2A74 C9 FF			cmp #$FF
  4462 2A76 D0 A9			jne l_1073
  4463 2A78			l_1073x
  4464
  4465 				; optimize FAIL ('UPDATESCORE', main.pas), line = 93
  4466
  4467 2A78 20 62 12			jsr UPDATESCORE
  4468
  4469 				; optimize OK (main.pas), line = 95
  4470
  4471 2A7B A9 64			lda #$64
  4472 2A7D 8D E8 2A			sta SYSTEM.PAUSE_006C.N
  4473 2A80 A9 00			lda #$00
  4474 2A82 8D E9 2A			sta SYSTEM.PAUSE_006C.N+1
  4475 2A85 20 2A 11			jsr SYSTEM.PAUSE_006C
  4476
  4477 				; optimize FAIL (0, main.pas), line = 97
  4478
  4479 2A88 EE EC 2A			inc LEVEL
  4480 2A8B AD EC 2A			lda LEVEL
  4481 2A8E C9 08			cmp #$08
  4482 2A90 D0 05			jne l_10C1
  4483 2A92 A9 05			lda #$05
  4484 2A94 8D EC 2A			sta LEVEL
  4485 2A97			l_10C1
  4486 2A97			@exit
  4487 					.ifdef @new
  4488 					lda <@VarData
  4489 					sta :ztmp
  4490 					lda >@VarData
  4491 					ldy #@VarDataSize-1
  4492 					jmp @FreeMem
  4493 					els
  4494 2A97 60				rts						; ret
  4495 					eif
  4496 				.endl
  4497 2A98			l_0007
  4498
  4499 				; --- RepeatUntilProlog
  4500 2A98			l_10CA
  4501
  4502 				; optimize FAIL ('INITSCORE', main.pas), line = 104
  4503
  4504 2A98 20 7A 27			jsr INITSCORE
  4505 2A9B A9 00			lda #$00
  4506 2A9D 8D ED 2A			sta GAMEOVER
  4507 2AA0 A9 01			lda #$01
  4508 2AA2 8D EC 2A			sta LEVEL
  4509
  4510 				; --- RepeatUntilProlog
  4511 2AA5			l_10D4
  4512
  4513 				; optimize FAIL ('MAINLOOP', main.pas), line = 106
  4514
  4515 2AA5 20 17 2A			jsr MAINLOOP
  4516 2AA8 20 03 15			jsr ISGAMEOVER
  4517 2AAB CA				dex
  4518 2AAC B5 19			lda :STACKORIGIN+1,x
  4519 2AAE F0 F5			jeq l_10D4
  4520
  4521 				; optimize FAIL ('SHOWSCORE', main.pas), line = 107
  4522
  4523 2AB0 20 E9 11			jsr SHOWSCORE
  4524
  4525 				; optimize OK (main.pas), line = 109
  4526
  4527 2AB3 A9 C8			lda #$C8
  4528 2AB5 8D E8 2A			sta SYSTEM.PAUSE_006C.N
  4529 2AB8 A9 00			lda #$00
  4530 2ABA 8D E9 2A			sta SYSTEM.PAUSE_006C.N+1
  4531 2ABD 20 2A 11			jsr SYSTEM.PAUSE_006C
  4532
  4533 				; optimize OK (main.pas), line = 110
  4534
  4535 2AC0 4C 98 2A			jmp l_10CA
  4536
  4537 				; ------------------------------------------------------------
  4538
  4539 = 0800			ATTRIBUTE_ADDR	= $0800
  4540 = 0C00			SCREEN_ADDR	= $0C00
  4541 = 001F			BACKGROUND_COLOUR	= $1F
  4542 = 0000			BOREDER_COLOUR	= $00
  4543 = 0009			VICTORIES	= $09
  4544 = 0005			LOOK_AHEAD	= $05
  4545 = 007E			TRASH	= $7E
  4546 = 0020			EMPTY	= $20
  4547 = 00A0			WALL	= $A0
  4548 = 0041			WALL_COLOUR	= $41
  4549 = 0030			ZERO	= $30
  4550 = 0056			OBSTACLE_1	= $56
  4551 = 005B			OBSTACLE_2	= $5B
  4552 = 0035			OBST_COLOUR	= $35
  4553 = 0007			OBST_QUANTITY	= $07
  4554 = 0051			PLY_HEAD	= $51
  4555 = 002A			PLY_CRASH	= $2A
  4556 = 0057			PLY_BUSTED	= $57
  4557 = 0042			PLY_TAIL_UD	= $42
  4558 = 0040			PLY_TAIL_LR	= $40
  4559 = 007D			PLY_TAIL_RD	= $7D
  4560 = 006E			PLY_TAIL_RU	= $6E
  4561 = 006D			PLY_TAIL_LD	= $6D
  4562 = 0070			PLY_TAIL_LU	= $70
  4563 = 0062			PLY1_COLOUR	= $62
  4564 = 005D			PLY2_COLOUR	= $5D
  4565 = 0071			PLY3_COLOUR	= $71
  4566 = 0055			PLY4_COLOUR	= $55
  4567 = 0000			PLY_CTRL	= $00
  4568 = 0001			AI_STRAIGHT	= $01
  4569 = 0002			AI_SAPPER	= $02
  4570 = 0003			AI_BULLY	= $03
  4571 = 0004			AI_MIRROR	= $04
  4572 = 0001			JOY_UP	= $01
  4573 = 0002			JOY_DOWN	= $02
  4574 = 0004			JOY_LEFT	= $04
  4575 = 0008			JOY_RIGHT	= $08
  4576 = 0040			JOY_FIRE	= $40
  4577 = 0002			JOY_SELECT_1	= $02
  4578 = 0004			JOY_SELECT_2	= $04
  4579 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4580 2AC3			.var MUL40	= adr.MUL40 .word
  4581 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4582 2AC3			.var DIRECTION	= adr.DIRECTION .word
  4583 = FD30			KEYSCAN	= $FD30
  4584 = FF08			JOY	= $FF08
  4585 = FF15			BACKGROUND	= $FF15
  4586 = FF19			BOREDER	= $FF19
  4587 = 0058			T0B	= $58
  4588 = 0059			I0B	= $59
  4589 = 005A			ALIVE	= $5A
  4590 = 005B			NEWDIR	= $5B
  4591 = 005C			AVAILDIR	= $5C
  4592 = 005D			T0W	= $5D
  4593 = 005F			adr.PLY	= $5F
  4594 2AC3			.var PLY	= adr.PLY .word
  4595 = 2ADC			PLY.X	= DATAORIGIN+$0000
  4596 = 2ADD			PLY.Y	= DATAORIGIN+$0001
  4597 = 2ADE			PLY.HEAD	= DATAORIGIN+$0002
  4598 = 2ADF			PLY.COLOUR	= DATAORIGIN+$0003
  4599 = 2AE0			PLY.DIR	= DATAORIGIN+$0004
  4600 = 2AE1			PLY.BRAIN	= DATAORIGIN+$0005
  4601 = 2AE2			PLY.SCORE	= DATAORIGIN+$0006
  4602 = 2AE3			PLY.ISALIVE	= DATAORIGIN+$0007
  4603 = 0061			adr.TMPPLY	= $61
  4604 2AC3			.var TMPPLY	= adr.TMPPLY .word
  4605 = 2ADC			TMPPLY.X	= DATAORIGIN+$0000
  4606 = 2ADD			TMPPLY.Y	= DATAORIGIN+$0001
  4607 = 2ADE			TMPPLY.HEAD	= DATAORIGIN+$0002
  4608 = 2ADF			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4609 = 2AE0			TMPPLY.DIR	= DATAORIGIN+$0004
  4610 = 2AE1			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4611 = 2AE2			TMPPLY.SCORE	= DATAORIGIN+$0006
  4612 = 2AE3			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4613 = 0063			JOYSTATUS	= $63
  4614 = 2AEC			LEVEL	= DATAORIGIN+$0010
  4615 = 2AED			GAMEOVER	= DATAORIGIN+$0011
  4616 = 2AEE			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4617 2AC3			.var PLAYER1	= adr.PLAYER1 .word
  4618 = 2AEE			PLAYER1.X	= DATAORIGIN+$0012
  4619 = 2AEF			PLAYER1.Y	= DATAORIGIN+$0013
  4620 = 2AF0			PLAYER1.HEAD	= DATAORIGIN+$0014
  4621 = 2AF1			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4622 = 2AF2			PLAYER1.DIR	= DATAORIGIN+$0016
  4623 = 2AF3			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4624 = 2AF4			PLAYER1.SCORE	= DATAORIGIN+$0018
  4625 = 2AF5			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4626 = 2AF6			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4627 2AC3			.var PLAYER2	= adr.PLAYER2 .word
  4628 = 2AF6			PLAYER2.X	= DATAORIGIN+$001A
  4629 = 2AF7			PLAYER2.Y	= DATAORIGIN+$001B
  4630 = 2AF8			PLAYER2.HEAD	= DATAORIGIN+$001C
  4631 = 2AF9			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4632 = 2AFA			PLAYER2.DIR	= DATAORIGIN+$001E
  4633 = 2AFB			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4634 = 2AFC			PLAYER2.SCORE	= DATAORIGIN+$0020
  4635 = 2AFD			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4636 = 2AFE			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4637 2AC3			.var PLAYER3	= adr.PLAYER3 .word
  4638 = 2AFE			PLAYER3.X	= DATAORIGIN+$0022
  4639 = 2AFF			PLAYER3.Y	= DATAORIGIN+$0023
  4640 = 2B00			PLAYER3.HEAD	= DATAORIGIN+$0024
  4641 = 2B01			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4642 = 2B02			PLAYER3.DIR	= DATAORIGIN+$0026
  4643 = 2B03			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4644 = 2B04			PLAYER3.SCORE	= DATAORIGIN+$0028
  4645 = 2B05			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4646 = 2B06			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4647 2AC3			.var PLAYER4	= adr.PLAYER4 .word
  4648 = 2B06			PLAYER4.X	= DATAORIGIN+$002A
  4649 = 2B07			PLAYER4.Y	= DATAORIGIN+$002B
  4650 = 2B08			PLAYER4.HEAD	= DATAORIGIN+$002C
  4651 = 2B09			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4652 = 2B0A			PLAYER4.DIR	= DATAORIGIN+$002E
  4653 = 2B0B			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4654 = 2B0C			PLAYER4.SCORE	= DATAORIGIN+$0030
  4655 = 2B0D			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4656 = 2B0E			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4657 2AC3			.var OBSTACLES	= adr.OBSTACLES .word
  4658 2AC3			@exit
  4659
  4660 2AC3 A2 00		@halt	ldx #$00
  4661 2AC5 9A				txs
  4662
  4663 2AC6 60				rts
  4664
  4665 				; ------------------------------------------------------------
  4666
  4667 				; ------------------------------------------------------------
  4668
  4669 2AC7			.local	@DEFINES
  4670 2AC7			C4P
  4671 				.endl
  4672
  4673 2AC7			.local	@RESOURCE
  4674 				.endl
  4675
  4676 = 2AC7 0E 10		MUL40
  4676 = 2AC9 40 10		DIRECTION
  4676 = 2ACB 5F 00		PLY
  4676 = 2ACD 61 00		TMPPLY
  4676 = 2ACF EE 2A		PLAYER1
  4676 = 2AD1 F6 2A		PLAYER2
  4676 = 2AD3 FE 2A		PLAYER3
  4676 = 2AD5 06 2B		PLAYER4
  4676 = 2AD7 0E 2B		OBSTACLES
  4676 				.endl							; MAIN
  4677
  4678 				; ------------------------------------------------------------
  4679 				; ------------------------------------------------------------
  4680
  4681 				.macro	UNITINITIALIZATION
  4682 				
  4683 					.ifdef MAIN.SYSTEM.@UnitInit
  4684 					jsr MAIN.SYSTEM.@UnitInit
  4685 					eif
  4686 				.endm
  4687
  4688 				; ------------------------------------------------------------
  4689
  4690 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4691 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4691 				SYSTEM: $10D5..$1177
  4692 					eif
  4693
  4694 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4694 				CODE: $100E..$2AC6
  4695
  4696 				; ------------------------------------------------------------
  4697
  4698 2AD9				.align $04
  4699
  4700 2ADC			DATAORIGIN
  4701 2ADC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4702
  4703 = 0006			VARINITSIZE	= *-DATAORIGIN
  4704 = 0067			VARDATASIZE	= 103
  4705
  4706 = 2B43			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4707
  4708 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4708 				DATA: $2ADC..$2B43
  4709
  4710 				; ------------------------------------------------------------
  4711
  4712 				.macro	STATICDATA
  4713 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4714 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4715 				.by  $C0 $03 $01 $02 $04 $08
  4716 				.endm
  4717
  4718 					end
