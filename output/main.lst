mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E E7 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0062			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2B02			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 9E			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 64 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 64 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C BB 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 07 2B		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 07 2B 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2B07			RESULT	= DATAORIGIN+$000B
   182
   183 = 2B07			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD 08 2B		loop  lda n
   325 112D 0D 09 2B		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD 08 2B D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2B08			N	= DATAORIGIN+$000C
   339
   340 = 2B08			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D 0A 2B			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD 0A 2B		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C 0B 2B		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD 0B 2B 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2B0A			RANGE	= DATAORIGIN+$000E
   401 = 2B0B			RESULT	= DATAORIGIN+$000F
   402
   403 = 2B0A			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2AFC			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2AFE			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2B00			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2B01			FILEMODE	= DATAORIGIN+$0005
   468 = 2B02			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2B03			IORESULT	= DATAORIGIN+$0007
   470 = 2B04			EOLN	= DATAORIGIN+$0008
   471 = 2B05			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 3F 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 3E 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 40 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B3E			X	= DATAORIGIN+$0042
   497 = 2B3F			Y	= DATAORIGIN+$0043
   498 = 2B40			V	= DATAORIGIN+$0044
   499
   500 = 2B3E			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 42 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 41 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 44 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 43 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B41			X	= DATAORIGIN+$0045
   544 = 2B42			Y	= DATAORIGIN+$0046
   545 = 2B43			V	= DATAORIGIN+$0047
   546 = 2B44			C	= DATAORIGIN+$0048
   547
   548 = 2B41			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 46 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 45 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 47 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 47 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B45			X	= DATAORIGIN+$0049
   604 = 2B46			Y	= DATAORIGIN+$004A
   605 = 2B47			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B45			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD 15 2B			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD 11 2B			lda PLAYER1.COLOUR
   620 11F1 8D 44 2B			sta PUTCHAR_008E.C
   621 11F4 AD 14 2B			lda PLAYER1.SCORE
   622 11F7 8D 43 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 42 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 41 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD 1D 2B			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD 19 2B			lda PLAYER2.COLOUR
   635 120F 8D 44 2B			sta PUTCHAR_008E.C
   636 1212 AD 1C 2B			lda PLAYER2.SCORE
   637 1215 8D 43 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 42 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 41 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD 25 2B			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD 21 2B			lda PLAYER3.COLOUR
   650 122D 8D 44 2B			sta PUTCHAR_008E.C
   651 1230 AD 24 2B			lda PLAYER3.SCORE
   652 1233 8D 43 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 42 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 41 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD 2D 2B			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD 29 2B			lda PLAYER4.COLOUR
   665 124B 8D 44 2B			sta PUTCHAR_008E.C
   666 124E AD 2C 2B			lda PLAYER4.SCORE
   667 1251 8D 43 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 42 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 41 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 AD 15 2B			lda PLAYER1.ISALIVE
   691 1265 F0 03			jeq l_0146
   692 1267 EE 14 2B			inc PLAYER1.SCORE
   693 126A			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 126A AD 1D 2B			lda PLAYER2.ISALIVE
   698 126D F0 03			jeq l_0159
   699 126F EE 1C 2B			inc PLAYER2.SCORE
   700 1272			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 1272 AD 25 2B			lda PLAYER3.ISALIVE
   705 1275 F0 03			jeq l_016C
   706 1277 EE 24 2B			inc PLAYER3.SCORE
   707 127A			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 127A AD 2D 2B			lda PLAYER4.ISALIVE
   712 127D F0 03			jeq l_017F
   713 127F EE 2C 2B			inc PLAYER4.SCORE
   714 1282			l_017F
   715 1282			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 1282 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 1283			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 1283 A9 00			lda #$00
   732 1285 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1287 AC EE 2A 84 12 AC + 	mwy PLY :bp2
   737 1291 A0 01			ldy #PLY.Y-DATAORIGIN
   738 1293 B1 12			lda (:bp2),y
   739 1295 0A				asl @
   740 1296 A8				tay
   741 1297 A9 00			lda #$00
   742 1299 18 79 0E 10			add adr.MUL40,y
   743 129D 85 21			sta :STACKORIGIN+9
   744 129F A9 0C			lda #$0C
   745 12A1 79 0F 10			adc adr.MUL40+1,y
   746 12A4 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 12A6 A0 00			ldy #PLY.X-DATAORIGIN
   748 12A8 A5 21			lda :STACKORIGIN+9
   749 12AA 18 71 12			add (:bp2),y
   750 12AD 85 5D			sta T0W
   751 12AF A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 12B1 69 00			adc #$00
   753 12B3 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 12B5 A5 5D			lda T0W
   758 12B7 38 E9 28			sub #$28
   759 12BA 85 21			sta :STACKORIGIN+9
   760 12BC A5 5E			lda T0W+1
   761 12BE E9 00			sbc #$00
   762 12C0 85 11			sta :bp+1
   763 12C2 A4 21			ldy :STACKORIGIN+9
   764 12C4 B1 10			lda (:bp),y
   765 12C6 C9 20			cmp #$20
   766 12C8 D0 06			jne l_01B6
   767 12CA A5 5C			lda AVAILDIR
   768 12CC 09 01			ora #$01
   769 12CE 85 5C			sta AVAILDIR
   770 12D0			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12D0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12D8 A0 28			ldy #$28
   776 12DA B1 12			lda (:bp2),y
   777 12DC C9 20			cmp #$20
   778 12DE D0 06			jne l_01D9
   779 12E0 A5 5C			lda AVAILDIR
   780 12E2 09 02			ora #$02
   781 12E4 85 5C			sta AVAILDIR
   782 12E6			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12E6 A5 5D			lda T0W
   787 12E8 38 E9 01			sub #$01
   788 12EB 85 21			sta :STACKORIGIN+9
   789 12ED A5 5E			lda T0W+1
   790 12EF E9 00			sbc #$00
   791 12F1 85 11			sta :bp+1
   792 12F3 A4 21			ldy :STACKORIGIN+9
   793 12F5 B1 10			lda (:bp),y
   794 12F7 C9 20			cmp #$20
   795 12F9 D0 06			jne l_01FC
   796 12FB A5 5C			lda AVAILDIR
   797 12FD 09 04			ora #$04
   798 12FF 85 5C			sta AVAILDIR
   799 1301			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 1301 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 1309 A0 01			ldy #$01
   805 130B B1 12			lda (:bp2),y
   806 130D C9 20			cmp #$20
   807 130F D0 06			jne l_021F
   808 1311 A5 5C			lda AVAILDIR
   809 1313 09 08			ora #$08
   810 1315 85 5C			sta AVAILDIR
   811 1317			l_021F
   812 1317			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1317 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1318			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1318 EE 48 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 131B AD 48 2B			lda COUNTER
   833 131E 29 01			and #$01
   834 1320 F0 08			jeq l_024A
   835 1322 A9 56			lda #$56
   836 1324 8D 49 2B			sta OBST
   837 1327 4C 2F 13			jmp l_0258
   838 132A			l_024A
   839 132A A9 5B			lda #$5B
   840 132C 8D 49 2B			sta OBST
   841 132F			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 132F A9 07			lda #$07
   846 1331 85 59			sta I0B
   847
   848 1333			l_0265
   849 				; --- ForToDoCondition
   850 1333 A5 59			lda I0B
   851 1335 0A				asl @
   852 1336 A8				tay
   853 1337 B9 2E 2B			lda adr.OBSTACLES,y
   854 133A 85 21			sta :STACKORIGIN+9
   855 133C B9 2F 2B			lda adr.OBSTACLES+1,y
   856 133F 85 11			sta :bp+1
   857 1341 A4 21			ldy :STACKORIGIN+9
   858 1343 AD 49 2B			lda OBST
   859 1346 91 10			sta (:bp),y
   860 1348 C6 59			dec I0B
   861 134A 10 E7			jpl l_0265
   862 134C			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B48			COUNTER	= DATAORIGIN+$004C
   867 = 2B49			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B48			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 134C			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 134C 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 134D			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 134D AD 4B 2B			lda Y
   890 1350 0A				asl @
   891 1351 A8				tay
   892 1352 AD 4A 2B			lda X
   893 1355 18 79 0E 10			add adr.MUL40,y
   894 1359 8D 4C 2B			sta RESULT
   895 135C A9 0C			lda #$0C
   896 135E 79 0F 10			adc adr.MUL40+1,y
   897 1361 8D 4D 2B			sta RESULT+1
   898 1364			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 1364 E8				inx
   906 1365 AD 4C 2B 95 18		mva RESULT :STACKORIGIN,x
   907 136A AD 4D 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B4A			X	= DATAORIGIN+$004E
   920 = 2B4B			Y	= DATAORIGIN+$004F
   921 = 2B4C			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B4A			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 136F 60				rts						; ret
   927 				.endl
   928
   929 1370			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1370 A9 07			lda #$07
   934 1372 85 59			sta I0B
   935
   936 1374			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 1374 A5 59			lda I0B
   942 1376 0A				asl @
   943 1377 A8				tay
   944 1378 B9 2F 2B			lda adr.OBSTACLES+1,y
   945 137B C9 00			cmp #$00
   946 137D D0 05			bne @+
   947 137F B9 2E 2B			lda adr.OBSTACLES,y
   948 1382 C9 7E			cmp #$7E
   949 1384			@
   950 1384 F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 1386 B9 2E 2B			lda adr.OBSTACLES,y
   955 1389 85 21			sta :STACKORIGIN+9
   956 138B B9 2F 2B			lda adr.OBSTACLES+1,y
   957 138E 85 11			sta :bp+1
   958 1390 A4 21			ldy :STACKORIGIN+9
   959 1392 A9 56			lda #$56
   960 1394 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 1396 A5 59			lda I0B
   965 1398 0A				asl @
   966 1399 A8				tay
   967 139A B9 2E 2B			lda adr.OBSTACLES,y
   968 139D 38 E9 00			sub #$00
   969 13A0 85 21			sta :STACKORIGIN+9
   970 13A2 B9 2F 2B			lda adr.OBSTACLES+1,y
   971 13A5 E9 04			sbc #$04
   972 13A7 85 11			sta :bp+1
   973 13A9 A4 21			ldy :STACKORIGIN+9
   974 13AB A9 35			lda #$35
   975 13AD 91 10			sta (:bp),y
   976 13AF			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 13AF C6 59			dec I0B
   980 13B1 10 C1			jpl l_02A6
   981 13B3			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 13B3			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 13B3 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 13B4			.local	DRAWTAIL					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 13B4 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1003 13BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13C0 B1 12			lda (:bp2),y
  1005 13C2 C5 5B			cmp NEWDIR
  1006 13C4 D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13C6 A5 5B			lda NEWDIR
  1011 13C8 29 0C			and #$0C
  1012 13CA F0 07			jeq l_0311
  1013 13CC A9 40			lda #$40
  1014 13CE 85 58			sta T0B
  1015 13D0 4C D7 13			jmp l_031F
  1016 13D3			l_0311
  1017 13D3 A9 42			lda #$42
  1018 13D5 85 58			sta T0B
  1019 13D7			l_031F
  1020 13D7 4C 4A 14			jmp l_032C
  1021 13DA			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13DA AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1026 13E4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13E6 B1 12			lda (:bp2),y
  1028 13E8 29 0A			and #$0A
  1029 13EA F0 0A			jeq l_0352
  1030 13EC A5 5B			lda NEWDIR
  1031 13EE 29 05			and #$05
  1032 13F0 F0 04			jeq l_0352
  1033 13F2 A9 7D			lda #$7D
  1034 13F4 85 58			sta T0B
  1035 13F6			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13F6 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1040 1400 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 1402 B1 12			lda (:bp2),y
  1042 1404 29 09			and #$09
  1043 1406 F0 0A			jeq l_037F
  1044 1408 A5 5B			lda NEWDIR
  1045 140A 29 06			and #$06
  1046 140C F0 04			jeq l_037F
  1047 140E A9 6E			lda #$6E
  1048 1410 85 58			sta T0B
  1049 1412			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 1412 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1054 141C A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 141E B1 12			lda (:bp2),y
  1056 1420 29 06			and #$06
  1057 1422 F0 0A			jeq l_03AC
  1058 1424 A5 5B			lda NEWDIR
  1059 1426 29 09			and #$09
  1060 1428 F0 04			jeq l_03AC
  1061 142A A9 6D			lda #$6D
  1062 142C 85 58			sta T0B
  1063 142E			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 142E AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1068 1438 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 143A B1 12			lda (:bp2),y
  1070 143C 29 05			and #$05
  1071 143E F0 0A			jeq l_03D9
  1072 1440 A5 5B			lda NEWDIR
  1073 1442 29 0A			and #$0A
  1074 1444 F0 04			jeq l_03D9
  1075 1446 A9 70			lda #$70
  1076 1448 85 58			sta T0B
  1077 144A			l_03D9
  1078 144A			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 100
  1081
  1082 144A AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1083 1454 A0 00			ldy #PLY.X-DATAORIGIN
  1084 1456 B1 12			lda (:bp2),y
  1085 1458 8D 45 2B			sta GETCHAR.X
  1086 145B A0 01			ldy #PLY.Y-DATAORIGIN
  1087 145D B1 12			lda (:bp2),y
  1088 145F 8D 46 2B			sta GETCHAR.Y
  1089 1462 20 C4 11			jsr GETCHAR
  1090 1465 CA				dex
  1091 1466 B5 19			lda :STACKORIGIN+1,x
  1092 1468 C9 2A			cmp #$2A
  1093 146A F0 20			jeq l_03F6
  1094 146C			@
  1095 146C AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1096 1476 A0 00			ldy #PLY.X-DATAORIGIN
  1097 1478 B1 12			lda (:bp2),y
  1098 147A 8D 3E 2B			sta PUTCHAR_0072.X
  1099 147D A0 01			ldy #PLY.Y-DATAORIGIN
  1100 147F B1 12			lda (:bp2),y
  1101 1481 8D 3F 2B			sta PUTCHAR_0072.Y
  1102 1484 A5 58			lda T0B
  1103 1486 8D 40 2B			sta PUTCHAR_0072.V
  1104 1489 20 78 11			jsr PUTCHAR_0072
  1105 148C			l_03F6
  1106 148C			@exit
  1107 					.ifdef @new
  1108 					lda <@VarData
  1109 					sta :ztmp
  1110 					lda >@VarData
  1111 					ldy #@VarDataSize-1
  1112 					jmp @FreeMem
  1113 					els
  1114 148C 60				rts						; ret
  1115 					eif
  1116 				.endl
  1117
  1118 148D			.local	CHECKJOYSTATUS					; PROCEDURE
  1119
  1120 				; optimize OK (tools.inc), line = 107
  1121
  1122 148D A9 02			lda #$02
  1123 148F 8D 08 FF			sta JOY
  1124 1492 A9 FF			lda #$FF
  1125 1494 8D 30 FD			sta KEYSCAN
  1126
  1127 				; optimize OK (tools.inc), line = 108
  1128
  1129 1497 AD 08 FF			lda JOY
  1130 149A 49 FF			eor #$FF
  1131 149C 85 63			sta JOYSTATUS
  1132 149E			@exit
  1133 					.ifdef @new
  1134 					lda <@VarData
  1135 					sta :ztmp
  1136 					lda >@VarData
  1137 					ldy #@VarDataSize-1
  1138 					jmp @FreeMem
  1139 					els
  1140 149E 60				rts						; ret
  1141 					eif
  1142 				.endl
  1143
  1144 149F			.local	SETPLAYER					; PROCEDURE
  1145
  1146 				; optimize OK (tools.inc), line = 115
  1147
  1148 149F AD 4E 2B			lda P
  1149 14A2 8D EE 2A			sta PLY
  1150 14A5 85 12			sta :bp2
  1151 14A7 AD 4F 2B			lda P+1
  1152 14AA 8D EF 2A			sta PLY+1
  1153 14AD 85 13			sta :bp2+1
  1154 				; optimize OK (tools.inc), line = 116
  1155 14AF A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1156 14B1 AD 53 2B			lda BRAIN
  1157 14B4 91 12			sta (:bp2),y
  1158 14B6 A0 00			ldy #PLY.X-DATAORIGIN
  1159 14B8 AD 50 2B			lda X
  1160 14BB 91 12			sta (:bp2),y
  1161 14BD A0 01			ldy #PLY.Y-DATAORIGIN
  1162 14BF AD 51 2B			lda Y
  1163 14C2 91 12			sta (:bp2),y
  1164 14C4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1165 14C6 AD 52 2B			lda DIR
  1166 14C9 91 12			sta (:bp2),y
  1167
  1168 				; optimize OK (tools.inc), line = 117
  1169
  1170 14CB A0 02			ldy #PLY.HEAD-DATAORIGIN
  1171 14CD AD 54 2B			lda HEAD
  1172 14D0 91 12			sta (:bp2),y
  1173 14D2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1174 14D4 AD 55 2B			lda COLOUR
  1175 14D7 91 12			sta (:bp2),y
  1176 14D9 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1177 14DB AD 56 2B			lda ISALIVE
  1178 14DE 91 12			sta (:bp2),y
  1179
  1180 				; optimize OK (tools.inc), line = 118
  1181
  1182 14E0 AD 56 2B			lda ISALIVE
  1183 14E3 F0 1D			jeq l_0458
  1184
  1185 				; optimize FAIL (0, tools.inc), line = 119
  1186
  1187 14E5 E6 5A			inc ALIVE
  1188 14E7 AD 55 2B			lda COLOUR
  1189 14EA 8D 44 2B			sta PUTCHAR_008E.C
  1190 14ED AD 54 2B			lda HEAD
  1191 14F0 8D 43 2B			sta PUTCHAR_008E.V
  1192 14F3 AD 51 2B			lda Y
  1193 14F6 8D 42 2B			sta PUTCHAR_008E.Y
  1194 14F9 AD 50 2B			lda X
  1195 14FC 8D 41 2B			sta PUTCHAR_008E.X
  1196 14FF 20 99 11			jsr PUTCHAR_008E
  1197 1502			l_0458
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 = 2B4E			P	= DATAORIGIN+$0052
  1202 = 2B50			X	= DATAORIGIN+$0054
  1203 = 2B51			Y	= DATAORIGIN+$0055
  1204 = 2B52			DIR	= DATAORIGIN+$0056
  1205 = 2B53			BRAIN	= DATAORIGIN+$0057
  1206 = 2B54			HEAD	= DATAORIGIN+$0058
  1207 = 2B55			COLOUR	= DATAORIGIN+$0059
  1208 = 2B56			ISALIVE	= DATAORIGIN+$005A
  1209
  1210 = 2B4E			@VarData	= P
  1211 = 0009			@VarDataSize	= 9
  1212
  1213 1502			@exit
  1214 					.ifdef @new
  1215 					lda <@VarData
  1216 					sta :ztmp
  1217 					lda >@VarData
  1218 					ldy #@VarDataSize-1
  1219 					jmp @FreeMem
  1220 					els
  1221 1502 60				rts						; ret
  1222 					eif
  1223 				.endl
  1224
  1225 1503			.local	NEXTLEVEL					; PROCEDURE
  1226
  1227 				; optimize FAIL (0, tools.inc), line = 127
  1228
  1229 1503 EE 0C 2B			inc LEVEL
  1230 1506 AD 0C 2B			lda LEVEL
  1231 1509 C9 08			cmp #$08
  1232 150B D0 05			jne l_0486
  1233 150D A9 05			lda #$05
  1234 150F 8D 0C 2B			sta LEVEL
  1235 1512			l_0486
  1236 1512			@exit
  1237 					.ifdef @new
  1238 					lda <@VarData
  1239 					sta :ztmp
  1240 					lda >@VarData
  1241 					ldy #@VarDataSize-1
  1242 					jmp @FreeMem
  1243 					els
  1244 1512 60				rts						; ret
  1245 					eif
  1246 				.endl
  1247
  1248 1513			.local	ISGAMEOVER					; FUNCTION
  1249
  1250 				; optimize OK (tools.inc), line = 134
  1251
  1252 1513 AD 14 2B			lda PLAYER1.SCORE
  1253 1516 C9 39			cmp #$39
  1254 1518 D0 05			jne l_04A3
  1255 151A A9 01			lda #$01
  1256 151C 8D 0D 2B			sta GAMEOVER
  1257 151F			l_04A3
  1258
  1259 				; optimize OK (tools.inc), line = 135
  1260
  1261 151F AD 1C 2B			lda PLAYER2.SCORE
  1262 1522 C9 39			cmp #$39
  1263 1524 D0 05			jne l_04BC
  1264 1526 A9 01			lda #$01
  1265 1528 8D 0D 2B			sta GAMEOVER
  1266 152B			l_04BC
  1267
  1268 				; optimize OK (tools.inc), line = 136
  1269
  1270 152B AD 24 2B			lda PLAYER3.SCORE
  1271 152E C9 39			cmp #$39
  1272 1530 D0 05			jne l_04D5
  1273 1532 A9 01			lda #$01
  1274 1534 8D 0D 2B			sta GAMEOVER
  1275 1537			l_04D5
  1276
  1277 				; optimize OK (tools.inc), line = 137
  1278
  1279 1537 AD 2C 2B			lda PLAYER4.SCORE
  1280 153A C9 39			cmp #$39
  1281 153C D0 05			jne l_04EE
  1282 153E A9 01			lda #$01
  1283 1540 8D 0D 2B			sta GAMEOVER
  1284 1543			l_04EE
  1285
  1286 				; optimize OK (tools.inc), line = 138
  1287
  1288 1543 AD 0D 2B			lda GAMEOVER
  1289 1546 8D 57 2B			sta RESULT
  1290 1549			@exit
  1291
  1292 				; ------------------------------------------------------------
  1293
  1294 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1295 				; as Pointer
  1296
  1297 1549 E8				inx
  1298 154A AD 57 2B 95 18		mva RESULT :STACKORIGIN,x
  1299
  1300 					.ifdef @new
  1301 					lda <@VarData
  1302 					sta :ztmp
  1303 					lda >@VarData
  1304 					ldy #@VarDataSize-1
  1305 					jmp @FreeMem
  1306 					eif
  1307
  1308 				; ------------------------------------------------------------
  1309
  1310 = 2B57			RESULT	= DATAORIGIN+$005B
  1311
  1312 = 2B57			@VarData	= RESULT
  1313 = 0001			@VarDataSize	= 1
  1314
  1315 154F 60				rts						; ret
  1316 				.endl
  1317
  1318 1550			.local	ISONELEFT					; FUNCTION
  1319
  1320 				; optimize OK (tools.inc), line = 145
  1321
  1322 1550 A0 01			ldy #1
  1323 1552 A5 5A			lda ALIVE
  1324 1554 F0 01			beq @+
  1325 1556 88				dey
  1326 1557			@
  1327 1557 84 21			sty :STACKORIGIN+9
  1328 1559 A0 01			ldy #1
  1329 155B A5 5A			lda ALIVE
  1330 155D C9 FF			cmp #$FF
  1331 155F F0 01			beq @+
  1332 1561 88				dey
  1333 1562			@
  1334 1562 98				tya
  1335 1563 05 21			ora :STACKORIGIN+9
  1336 1565 8D 58 2B			sta RESULT
  1337 1568			@exit
  1338
  1339 				; ------------------------------------------------------------
  1340
  1341 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1342 				; as Pointer
  1343
  1344 1568 E8				inx
  1345 1569 AD 58 2B 95 18		mva RESULT :STACKORIGIN,x
  1346
  1347 					.ifdef @new
  1348 					lda <@VarData
  1349 					sta :ztmp
  1350 					lda >@VarData
  1351 					ldy #@VarDataSize-1
  1352 					jmp @FreeMem
  1353 					eif
  1354
  1355 				; ------------------------------------------------------------
  1356
  1357 = 2B58			RESULT	= DATAORIGIN+$005C
  1358
  1359 = 2B58			@VarData	= RESULT
  1360 = 0001			@VarDataSize	= 1
  1361
  1362 156E 60				rts						; ret
  1363 				.endl
  1364
  1365 156F			.local	AISTRAIGHT					; PROCEDURE
  1366
  1367 				; optimize OK (ai.inc), line = 5
  1368
  1369 156F AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1370 1579 A0 04			ldy #PLY.DIR-DATAORIGIN
  1371 157B B1 12			lda (:bp2),y
  1372 157D 25 5C			and AVAILDIR
  1373 157F F0 07			jeq l_0539
  1374 1581 B1 12			lda (:bp2),y
  1375 1583 85 5B			sta NEWDIR
  1376 1585 4C F3 15			jmp l_0549
  1377 1588			l_0539
  1378
  1379 				; optimize OK (ai.inc), line = 7
  1380
  1381 1588 A5 5C			lda AVAILDIR
  1382 158A C9 03			cmp #$03
  1383 158C D0 10			jne l_055B
  1384 158E A9 02			lda #$02
  1385 1590 20 47 11			jsr SYSTEM.RANDOM_006D
  1386 1593 B4 18			ldy :STACKORIGIN,x
  1387 1595 B9 40 10			lda adr.DIRECTION,y
  1388 1598 85 5B			sta NEWDIR
  1389 159A CA				dex
  1390 159B 4C B6 15			jmp l_056D
  1391 159E			l_055B
  1392
  1393 				; optimize OK (ai.inc), line = 9
  1394
  1395 159E A5 5C			lda AVAILDIR
  1396 15A0 8D 59 2B			sta @CASETMP_0003
  1397 15A3 C9 01			cmp #$01
  1398 15A5 D0 07			jne l_0578
  1399 15A7			@
  1400
  1401 				; optimize OK (ai.inc), line = 10
  1402
  1403 15A7 A9 01			lda #$01
  1404 15A9 85 5B			sta NEWDIR
  1405
  1406 15AB 4C B6 15			jmp a_0003
  1407 15AE			l_0578
  1408 15AE C9 02			cmp #$02
  1409 15B0 D0 04			jne l_0585
  1410 15B2			@
  1411
  1412 				; optimize OK (ai.inc), line = 11
  1413
  1414 15B2 A9 02			lda #$02
  1415 15B4 85 5B			sta NEWDIR
  1416
  1417 15B6			l_0585
  1418 15B6			a_0003
  1419 15B6			l_056D
  1420
  1421 				; optimize OK (ai.inc), line = 14
  1422
  1423 15B6 A5 5C			lda AVAILDIR
  1424 15B8 C9 0C			cmp #$0C
  1425 15BA D0 1F			jne l_05A1
  1426 15BC A9 02			lda #$02
  1427 15BE 20 47 11			jsr SYSTEM.RANDOM_006D
  1428 15C1 E8				inx
  1429 15C2 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1430 15C6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1431 15CA 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1432 15CC 20 44 10			jsr addAX_CX
  1433 15CF CA				dex
  1434 15D0 B4 18			ldy :STACKORIGIN,x
  1435 15D2 B9 40 10			lda adr.DIRECTION,y
  1436 15D5 85 5B			sta NEWDIR
  1437 15D7 CA				dex
  1438 15D8 4C F3 15			jmp l_05B7
  1439 15DB			l_05A1
  1440
  1441 				; optimize OK (ai.inc), line = 16
  1442
  1443 15DB A5 5C			lda AVAILDIR
  1444 15DD 8D 5A 2B			sta @CASETMP_0004
  1445 15E0 C9 04			cmp #$04
  1446 15E2 D0 07			jne l_05C2
  1447 15E4			@
  1448
  1449 				; optimize OK (ai.inc), line = 17
  1450
  1451 15E4 A9 04			lda #$04
  1452 15E6 85 5B			sta NEWDIR
  1453
  1454 15E8 4C F3 15			jmp a_0004
  1455 15EB			l_05C2
  1456 15EB C9 08			cmp #$08
  1457 15ED D0 04			jne l_05CF
  1458 15EF			@
  1459
  1460 				; optimize OK (ai.inc), line = 18
  1461
  1462 15EF A9 08			lda #$08
  1463 15F1 85 5B			sta NEWDIR
  1464
  1465 15F3			l_05CF
  1466 15F3			a_0004
  1467 15F3			l_05B7
  1468 15F3			l_0549
  1469
  1470 				; ------------------------------------------------------------
  1471
  1472 = 2B59			@CASETMP_0003	= DATAORIGIN+$005D
  1473 = 2B5A			@CASETMP_0004	= DATAORIGIN+$005E
  1474
  1475 = 2B59			@VarData	= @CASETMP_0003
  1476 = 0002			@VarDataSize	= 2
  1477
  1478 15F3			@exit
  1479 					.ifdef @new
  1480 					lda <@VarData
  1481 					sta :ztmp
  1482 					lda >@VarData
  1483 					ldy #@VarDataSize-1
  1484 					jmp @FreeMem
  1485 					els
  1486 15F3 60				rts						; ret
  1487 					eif
  1488 				.endl
  1489
  1490 15F4			.local	AISAPPER					; PROCEDURE
  1491
  1492 				; optimize OK (ai.inc), line = 31
  1493
  1494 15F4 A9 00			lda #$00
  1495 15F6 8D 5B 2B			sta L
  1496 15F9 8D 5C 2B			sta R
  1497 15FC 8D 5D 2B			sta U
  1498 15FF 8D 5E 2B			sta D
  1499
  1500 				; optimize OK (ai.inc), line = 32
  1501
  1502 1602 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1503 160C A0 01			ldy #PLY.Y-DATAORIGIN
  1504 160E B1 12			lda (:bp2),y
  1505 1610 0A				asl @
  1506 1611 A8				tay
  1507 1612 A9 00			lda #$00
  1508 1614 18 79 0E 10			add adr.MUL40,y
  1509 1618 85 21			sta :STACKORIGIN+9
  1510 161A A9 0C			lda #$0C
  1511 161C 79 0F 10			adc adr.MUL40+1,y
  1512 161F 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1513 1621 A0 00			ldy #PLY.X-DATAORIGIN
  1514 1623 A5 21			lda :STACKORIGIN+9
  1515 1625 18 71 12			add (:bp2),y
  1516 1628 85 5D			sta T0W
  1517 162A A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1518 162C 69 00			adc #$00
  1519 162E 85 5E			sta T0W+1
  1520
  1521 				; optimize OK (ai.inc), line = 34
  1522
  1523 1630 A5 5C			lda AVAILDIR
  1524 1632 29 01			and #$01
  1525 1634 F0 73			jeq l_0615
  1526
  1527 				; optimize OK (ai.inc), line = 35
  1528
  1529 1636 A9 05			lda #$05
  1530 1638 85 59			sta I0B
  1531
  1532 163A			l_061F
  1533 				; --- ForToDoCondition
  1534 163A A5 59			lda I0B
  1535 163C C9 01			cmp #$01
  1536 163E 90 69			jcc l_062D
  1537
  1538 				; optimize OK (ai.inc), line = 36
  1539
  1540 1640 0A				asl @
  1541 1641 A8				tay
  1542 1642 A5 5D			lda T0W
  1543 1644 38 F9 0E 10			sub adr.MUL40,y
  1544 1648 85 21			sta :STACKORIGIN+9
  1545 164A A5 5E			lda T0W+1
  1546 164C F9 0F 10			sbc adr.MUL40+1,y
  1547 164F 85 11			sta :bp+1
  1548 1651 A4 21			ldy :STACKORIGIN+9
  1549 1653 B1 10			lda (:bp),y
  1550 1655 C9 20			cmp #$20
  1551 1657 D0 03			jne l_0647
  1552 1659 EE 5D 2B			inc U
  1553 165C			l_0647
  1554
  1555 				; optimize OK (ai.inc), line = 37
  1556
  1557 165C A5 59			lda I0B
  1558 165E 0A				asl @
  1559 165F A8				tay
  1560 1660 A5 5D			lda T0W
  1561 1662 38 F9 0E 10			sub adr.MUL40,y
  1562 1666 85 21			sta :STACKORIGIN+9
  1563 1668 A5 5E			lda T0W+1
  1564 166A F9 0F 10			sbc adr.MUL40+1,y
  1565 166D 85 11			sta :bp+1
  1566 166F A5 21			lda :STACKORIGIN+9
  1567 1671 18 69 01			add #$01
  1568 1674 A8				tay
  1569 1675 90 02			scc
  1570 1677 E6 11			inc :bp+1
  1571 1679 B1 10			lda (:bp),y
  1572 167B C9 20			cmp #$20
  1573 167D D0 03			jne l_066C
  1574 167F EE 5D 2B			inc U
  1575 1682			l_066C
  1576
  1577 				; optimize OK (ai.inc), line = 38
  1578
  1579 1682 A5 59			lda I0B
  1580 1684 0A				asl @
  1581 1685 A8				tay
  1582 1686 A5 5D			lda T0W
  1583 1688 38 F9 0E 10			sub adr.MUL40,y
  1584 168C 85 21			sta :STACKORIGIN+9
  1585 168E A5 5E			lda T0W+1
  1586 1690 F9 0F 10			sbc adr.MUL40+1,y
  1587 1693 85 11			sta :bp+1
  1588 1695 A4 21			ldy :STACKORIGIN+9
  1589 1697 88				dey
  1590 1698 B0 02			scs
  1591 169A C6 11			dec :bp+1
  1592 169C B1 10			lda (:bp),y
  1593 169E C9 20			cmp #$20
  1594 16A0 D0 03			jne l_0691
  1595 16A2 EE 5D 2B			inc U
  1596 16A5			l_0691
  1597
  1598 				; --- ForToDoEpilog
  1599 16A5 C6 59			dec I0B
  1600 16A7 10 91			jpl l_061F
  1601 16A9			l_062D
  1602 16A9			l_0615
  1603
  1604 				; optimize OK (ai.inc), line = 42
  1605
  1606 16A9 A5 5C			lda AVAILDIR
  1607 16AB 29 02			and #$02
  1608 16AD F0 73			jeq l_06B5
  1609
  1610 				; optimize OK (ai.inc), line = 43
  1611
  1612 16AF A9 05			lda #$05
  1613 16B1 85 59			sta I0B
  1614
  1615 16B3			l_06BF
  1616 				; --- ForToDoCondition
  1617 16B3 A5 59			lda I0B
  1618 16B5 C9 01			cmp #$01
  1619 16B7 90 69			jcc l_06CD
  1620
  1621 				; optimize OK (ai.inc), line = 44
  1622
  1623 16B9 0A				asl @
  1624 16BA A8				tay
  1625 16BB A5 5D			lda T0W
  1626 16BD 18 79 0E 10			add adr.MUL40,y
  1627 16C1 85 21			sta :STACKORIGIN+9
  1628 16C3 A5 5E			lda T0W+1
  1629 16C5 79 0F 10			adc adr.MUL40+1,y
  1630 16C8 85 11			sta :bp+1
  1631 16CA A4 21			ldy :STACKORIGIN+9
  1632 16CC B1 10			lda (:bp),y
  1633 16CE C9 20			cmp #$20
  1634 16D0 D0 03			jne l_06E7
  1635 16D2 EE 5E 2B			inc D
  1636 16D5			l_06E7
  1637
  1638 				; optimize OK (ai.inc), line = 45
  1639
  1640 16D5 A5 59			lda I0B
  1641 16D7 0A				asl @
  1642 16D8 A8				tay
  1643 16D9 A5 5D			lda T0W
  1644 16DB 18 79 0E 10			add adr.MUL40,y
  1645 16DF 85 21			sta :STACKORIGIN+9
  1646 16E1 A5 5E			lda T0W+1
  1647 16E3 79 0F 10			adc adr.MUL40+1,y
  1648 16E6 85 11			sta :bp+1
  1649 16E8 A5 21			lda :STACKORIGIN+9
  1650 16EA 18 69 01			add #$01
  1651 16ED A8				tay
  1652 16EE 90 02			scc
  1653 16F0 E6 11			inc :bp+1
  1654 16F2 B1 10			lda (:bp),y
  1655 16F4 C9 20			cmp #$20
  1656 16F6 D0 03			jne l_070C
  1657 16F8 EE 5E 2B			inc D
  1658 16FB			l_070C
  1659
  1660 				; optimize OK (ai.inc), line = 46
  1661
  1662 16FB A5 59			lda I0B
  1663 16FD 0A				asl @
  1664 16FE A8				tay
  1665 16FF A5 5D			lda T0W
  1666 1701 18 79 0E 10			add adr.MUL40,y
  1667 1705 85 21			sta :STACKORIGIN+9
  1668 1707 A5 5E			lda T0W+1
  1669 1709 79 0F 10			adc adr.MUL40+1,y
  1670 170C 85 11			sta :bp+1
  1671 170E A4 21			ldy :STACKORIGIN+9
  1672 1710 88				dey
  1673 1711 B0 02			scs
  1674 1713 C6 11			dec :bp+1
  1675 1715 B1 10			lda (:bp),y
  1676 1717 C9 20			cmp #$20
  1677 1719 D0 03			jne l_0731
  1678 171B EE 5E 2B			inc D
  1679 171E			l_0731
  1680
  1681 				; --- ForToDoEpilog
  1682 171E C6 59			dec I0B
  1683 1720 10 91			jpl l_06BF
  1684 1722			l_06CD
  1685 1722			l_06B5
  1686
  1687 				; optimize OK (ai.inc), line = 50
  1688
  1689 1722 A5 5C			lda AVAILDIR
  1690 1724 29 04			and #$04
  1691 1726 F0 5F			jeq l_0755
  1692
  1693 				; optimize OK (ai.inc), line = 51
  1694
  1695 1728 A9 05			lda #$05
  1696 172A 85 59			sta I0B
  1697
  1698 172C			l_075F
  1699 				; --- ForToDoCondition
  1700 172C A5 59			lda I0B
  1701 172E C9 01			cmp #$01
  1702 1730 90 55			jcc l_076D
  1703
  1704 				; optimize OK (ai.inc), line = 52
  1705
  1706 1732 A5 5D			lda T0W
  1707 1734 38 E5 59			sub I0B
  1708 1737 A8				tay
  1709 1738 A5 5E			lda T0W+1
  1710 173A E9 00			sbc #$00
  1711 173C 85 11			sta :bp+1
  1712 173E B1 10			lda (:bp),y
  1713 1740 C9 20			cmp #$20
  1714 1742 D0 03			jne l_0785
  1715 1744 EE 5B 2B			inc L
  1716 1747			l_0785
  1717
  1718 				; optimize OK (ai.inc), line = 53
  1719
  1720 1747 A5 5D			lda T0W
  1721 1749 38 E5 59			sub I0B
  1722 174C A8				tay
  1723 174D A5 5E			lda T0W+1
  1724 174F E9 00			sbc #$00
  1725 1751 85 11			sta :bp+1
  1726 1753 98				tya
  1727 1754 18 69 28			add #$28
  1728 1757 A8				tay
  1729 1758 90 02			scc
  1730 175A E6 11			inc :bp+1
  1731 175C B1 10			lda (:bp),y
  1732 175E C9 20			cmp #$20
  1733 1760 D0 03			jne l_07A8
  1734 1762 EE 5B 2B			inc L
  1735 1765			l_07A8
  1736
  1737 				; optimize OK (ai.inc), line = 54
  1738
  1739 1765 A5 5D			lda T0W
  1740 1767 38 E5 59			sub I0B
  1741 176A A8				tay
  1742 176B A5 5E			lda T0W+1
  1743 176D E9 00			sbc #$00
  1744 176F 85 11			sta :bp+1
  1745 1771 98				tya
  1746 1772 38 E9 28			sub #$28
  1747 1775 A8				tay
  1748 1776 B0 02			scs
  1749 1778 C6 11			dec :bp+1
  1750 177A B1 10			lda (:bp),y
  1751 177C C9 20			cmp #$20
  1752 177E D0 03			jne l_07CB
  1753 1780 EE 5B 2B			inc L
  1754 1783			l_07CB
  1755
  1756 				; --- ForToDoEpilog
  1757 1783 C6 59			dec I0B
  1758 1785 10 A5			jpl l_075F
  1759 1787			l_076D
  1760 1787			l_0755
  1761
  1762 				; optimize OK (ai.inc), line = 58
  1763
  1764 1787 A5 5C			lda AVAILDIR
  1765 1789 29 08			and #$08
  1766 178B F0 5D			jeq l_07EF
  1767
  1768 				; optimize OK (ai.inc), line = 59
  1769
  1770 178D A9 05			lda #$05
  1771 178F 85 59			sta I0B
  1772
  1773 1791			l_07F9
  1774 				; --- ForToDoCondition
  1775 1791 A5 59			lda I0B
  1776 1793 C9 01			cmp #$01
  1777 1795 90 53			jcc l_0807
  1778
  1779 				; optimize OK (ai.inc), line = 60
  1780
  1781 1797 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1782 179F A4 59			ldy I0B
  1783 17A1 B1 12			lda (:bp2),y
  1784 17A3 C9 20			cmp #$20
  1785 17A5 D0 03			jne l_081F
  1786 17A7 EE 5C 2B			inc R
  1787 17AA			l_081F
  1788
  1789 				; optimize OK (ai.inc), line = 61
  1790
  1791 17AA A5 5D			lda T0W
  1792 17AC 18 65 59			add I0B
  1793 17AF A8				tay
  1794 17B0 A5 5E			lda T0W+1
  1795 17B2 69 00			adc #$00
  1796 17B4 85 11			sta :bp+1
  1797 17B6 98				tya
  1798 17B7 18 69 28			add #$28
  1799 17BA A8				tay
  1800 17BB 90 02			scc
  1801 17BD E6 11			inc :bp+1
  1802 17BF B1 10			lda (:bp),y
  1803 17C1 C9 20			cmp #$20
  1804 17C3 D0 03			jne l_0842
  1805 17C5 EE 5C 2B			inc R
  1806 17C8			l_0842
  1807
  1808 				; optimize OK (ai.inc), line = 62
  1809
  1810 17C8 A5 5D			lda T0W
  1811 17CA 18 65 59			add I0B
  1812 17CD A8				tay
  1813 17CE A5 5E			lda T0W+1
  1814 17D0 69 00			adc #$00
  1815 17D2 85 11			sta :bp+1
  1816 17D4 98				tya
  1817 17D5 38 E9 28			sub #$28
  1818 17D8 A8				tay
  1819 17D9 B0 02			scs
  1820 17DB C6 11			dec :bp+1
  1821 17DD B1 10			lda (:bp),y
  1822 17DF C9 20			cmp #$20
  1823 17E1 D0 03			jne l_0865
  1824 17E3 EE 5C 2B			inc R
  1825 17E6			l_0865
  1826
  1827 				; --- ForToDoEpilog
  1828 17E6 C6 59			dec I0B
  1829 17E8 10 A7			jpl l_07F9
  1830 17EA			l_0807
  1831 17EA			l_07EF
  1832
  1833 				; optimize OK (ai.inc), line = 66
  1834
  1835 17EA AD 5E 2B			lda D
  1836 17ED 85 58			sta T0B
  1837
  1838 				; optimize OK (ai.inc), line = 67
  1839
  1840 17EF CD 5D 2B			cmp U
  1841 17F2 B0 05			jcs l_088D
  1842 17F4 AD 5D 2B			lda U
  1843 17F7 85 58			sta T0B
  1844 17F9			l_088D
  1845
  1846 				; optimize OK (ai.inc), line = 68
  1847
  1848 17F9 A5 58			lda T0B
  1849 17FB CD 5B 2B			cmp L
  1850 17FE B0 05			jcs l_08AA
  1851 1800 AD 5B 2B			lda L
  1852 1803 85 58			sta T0B
  1853 1805			l_08AA
  1854
  1855 				; optimize OK (ai.inc), line = 69
  1856
  1857 1805 A5 58			lda T0B
  1858 1807 CD 5C 2B			cmp R
  1859 180A B0 05			jcs l_08C7
  1860 180C AD 5C 2B			lda R
  1861 180F 85 58			sta T0B
  1862 1811			l_08C7
  1863
  1864 				; optimize OK (ai.inc), line = 71
  1865
  1866 1811 A5 58			lda T0B
  1867 1813 CD 5E 2B			cmp D
  1868 1816 D0 04			jne l_08E4
  1869 1818 A9 02			lda #$02
  1870 181A 85 58			sta T0B
  1871 181C			l_08E4
  1872
  1873 				; optimize OK (ai.inc), line = 72
  1874
  1875 181C A5 58			lda T0B
  1876 181E CD 5D 2B			cmp U
  1877 1821 D0 04			jne l_08FF
  1878 1823 A9 01			lda #$01
  1879 1825 85 58			sta T0B
  1880 1827			l_08FF
  1881
  1882 				; optimize OK (ai.inc), line = 73
  1883
  1884 1827 A5 58			lda T0B
  1885 1829 CD 5B 2B			cmp L
  1886 182C D0 04			jne l_091A
  1887 182E A9 04			lda #$04
  1888 1830 85 58			sta T0B
  1889 1832			l_091A
  1890
  1891 				; optimize OK (ai.inc), line = 74
  1892
  1893 1832 A5 58			lda T0B
  1894 1834 CD 5C 2B			cmp R
  1895 1837 D0 04			jne l_0935
  1896 1839 A9 08			lda #$08
  1897 183B 85 58			sta T0B
  1898 183D			l_0935
  1899
  1900 				; optimize OK (ai.inc), line = 76
  1901
  1902 183D A5 5C			lda AVAILDIR
  1903 183F 25 58			and T0B
  1904 1841 F0 07			jeq l_0954
  1905 1843 A5 58			lda T0B
  1906 1845 85 5B			sta NEWDIR
  1907 1847 4C 4D 18			jmp l_0964
  1908 184A			l_0954
  1909
  1910 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1911
  1912 184A 20 6F 15			jsr AISTRAIGHT
  1913 184D			l_0964
  1914
  1915 				; ------------------------------------------------------------
  1916
  1917 = 2B5B			L	= DATAORIGIN+$005F
  1918 = 2B5C			R	= DATAORIGIN+$0060
  1919 = 2B5D			U	= DATAORIGIN+$0061
  1920 = 2B5E			D	= DATAORIGIN+$0062
  1921 = 0001			@FORTMP_061C	= $01
  1922 = 0001			@FORTMP_06BC	= $01
  1923 = 0001			@FORTMP_075C	= $01
  1924 = 0001			@FORTMP_07F6	= $01
  1925
  1926 = 2B5B			@VarData	= L
  1927 = 0004			@VarDataSize	= 4
  1928
  1929 184D			@exit
  1930 					.ifdef @new
  1931 					lda <@VarData
  1932 					sta :ztmp
  1933 					lda >@VarData
  1934 					ldy #@VarDataSize-1
  1935 					jmp @FreeMem
  1936 					els
  1937 184D 60				rts						; ret
  1938 					eif
  1939 				.endl
  1940
  1941 184E			.local	AIBULLY						; PROCEDURE
  1942
  1943 				; optimize OK (ai.inc), line = 84
  1944
  1945 184E AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1946 1858 A0 04			ldy #PLY.DIR-DATAORIGIN
  1947 185A B1 12			lda (:bp2),y
  1948 185C 85 58			sta T0B
  1949
  1950 				; optimize OK (ai.inc), line = 86
  1951
  1952 185E AD 15 2B			lda PLAYER1.ISALIVE
  1953 1861 0D 1D 2B			ora PLAYER2.ISALIVE
  1954 1864 D0 03 4C 0B 19		jeq l_0981
  1955
  1956 				; optimize OK (ai.inc), line = 88
  1957
  1958 1869 AD 15 2B			lda PLAYER1.ISALIVE
  1959 186C F0 0F			jeq l_098E
  1960 186E AD F2 2A			lda PLAYER1
  1961 1871 8D F0 2A			sta TMPPLY
  1962 1874 AD F3 2A			lda PLAYER1+1
  1963 1877 8D F1 2A			sta TMPPLY+1
  1964 187A 4C 89 18			jmp l_099D
  1965 187D			l_098E
  1966 187D AD F4 2A			lda PLAYER2
  1967 1880 8D F0 2A			sta TMPPLY
  1968 1883 AD F5 2A			lda PLAYER2+1
  1969 1886 8D F1 2A			sta TMPPLY+1
  1970 1889			l_099D
  1971
  1972 				; optimize OK (ai.inc), line = 90
  1973
  1974 1889 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1975 1893 A0 01			ldy #PLY.Y-DATAORIGIN
  1976 1895 B1 12			lda (:bp2),y
  1977 1897 85 21			sta :STACKORIGIN+9
  1978 1899 AC F0 2A 84 12 AC + 	mwy TMPPLY :bp2
  1979 18A3 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1980 18A5 B1 12			lda (:bp2),y
  1981 18A7 C5 21			cmp :STACKORIGIN+9
  1982 18A9 B0 07			jcs l_09B6
  1983 18AB A9 01			lda #$01
  1984 18AD 85 58			sta T0B
  1985 18AF 4C B6 18			jmp l_09C4
  1986 18B2			l_09B6
  1987 18B2 A9 02			lda #$02
  1988 18B4 85 58			sta T0B
  1989 18B6			l_09C4
  1990
  1991 				; optimize OK (ai.inc), line = 91
  1992
  1993 18B6 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  1994 18C0 A0 01			ldy #PLY.Y-DATAORIGIN
  1995 18C2 B1 12			lda (:bp2),y
  1996 18C4 85 21			sta :STACKORIGIN+9
  1997 18C6 AC F0 2A 84 12 AC + 	mwy TMPPLY :bp2
  1998 18D0 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1999 18D2 B1 12			lda (:bp2),y
  2000 18D4 C5 21			cmp :STACKORIGIN+9
  2001 18D6 F0 06			jeq l_09EEx
  2002 18D8 A5 5C			lda AVAILDIR
  2003 18DA 25 58			and T0B
  2004 18DC D0 2D			jne l_09EE
  2005 18DE			l_09EEx
  2006
  2007 				; optimize OK (ai.inc), line = 92
  2008
  2009 18DE AC EE 2A 84 12 AC + 	mwy PLY :bp2
  2010 18E8 A0 00			ldy #PLY.X-DATAORIGIN
  2011 18EA B1 12			lda (:bp2),y
  2012 18EC 85 21			sta :STACKORIGIN+9
  2013 18EE AC F0 2A 84 12 AC + 	mwy TMPPLY :bp2
  2014 18F8 A0 00			ldy #TMPPLY.X-DATAORIGIN
  2015 18FA B1 12			lda (:bp2),y
  2016 18FC C5 21			cmp :STACKORIGIN+9
  2017 18FE B0 07			jcs l_0A03
  2018 1900 A9 04			lda #$04
  2019 1902 85 58			sta T0B
  2020 1904 4C 0B 19			jmp l_0A11
  2021 1907			l_0A03
  2022 1907 A9 08			lda #$08
  2023 1909 85 58			sta T0B
  2024 190B			l_0A11
  2025 190B			l_09EE
  2026 190B			l_0981
  2027
  2028 				; optimize OK (ai.inc), line = 96
  2029
  2030 190B A5 5C			lda AVAILDIR
  2031 190D 25 58			and T0B
  2032 190F F0 07			jeq l_0A31
  2033 1911 A5 58			lda T0B
  2034 1913 85 5B			sta NEWDIR
  2035 1915 4C 1B 19			jmp l_0A41
  2036 1918			l_0A31
  2037
  2038 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  2039
  2040 1918 20 F4 15			jsr AISAPPER
  2041 191B			l_0A41
  2042 191B			@exit
  2043 					.ifdef @new
  2044 					lda <@VarData
  2045 					sta :ztmp
  2046 					lda >@VarData
  2047 					ldy #@VarDataSize-1
  2048 					jmp @FreeMem
  2049 					els
  2050 191B 60				rts						; ret
  2051 					eif
  2052 				.endl
  2053
  2054 191C			.local	AIMIRROR					; PROCEDURE
  2055
  2056 				; optimize OK (ai.inc), line = 105
  2057
  2058 191C AC EE 2A 84 12 AC + 	mwy PLY :bp2
  2059 1926 A0 04			ldy #PLY.DIR-DATAORIGIN
  2060 1928 B1 12			lda (:bp2),y
  2061 192A 85 58			sta T0B
  2062
  2063 				; optimize OK (ai.inc), line = 107
  2064
  2065 192C AD 15 2B			lda PLAYER1.ISALIVE
  2066 192F F0 2F			jeq l_0A58
  2067
  2068 				; optimize OK (ai.inc), line = 108
  2069
  2070 1931 AD 12 2B			lda PLAYER1.DIR
  2071 1934 8D 5F 2B			sta @CASETMP_0005
  2072 1937 C9 01			cmp #$01
  2073 1939 D0 07			jne l_0A64
  2074 193B			@
  2075
  2076 				; optimize OK (ai.inc), line = 109
  2077
  2078 193B A9 02			lda #$02
  2079 193D 85 58			sta T0B
  2080
  2081 193F 4C 60 19			jmp a_0005
  2082 1942			l_0A64
  2083 1942 C9 02			cmp #$02
  2084 1944 D0 07			jne l_0A71
  2085 1946			@
  2086
  2087 				; optimize OK (ai.inc), line = 110
  2088
  2089 1946 A9 01			lda #$01
  2090 1948 85 58			sta T0B
  2091
  2092 194A 4C 60 19			jmp a_0005
  2093 194D			l_0A71
  2094 194D C9 04			cmp #$04
  2095 194F D0 07			jne l_0A7E
  2096 1951			@
  2097
  2098 				; optimize OK (ai.inc), line = 111
  2099
  2100 1951 A9 08			lda #$08
  2101 1953 85 58			sta T0B
  2102
  2103 1955 4C 60 19			jmp a_0005
  2104 1958			l_0A7E
  2105 1958 C9 08			cmp #$08
  2106 195A D0 04			jne l_0A8B
  2107 195C			@
  2108
  2109 				; optimize OK (ai.inc), line = 112
  2110
  2111 195C A9 04			lda #$04
  2112 195E 85 58			sta T0B
  2113
  2114 1960			l_0A8B
  2115 1960			a_0005
  2116 1960			l_0A58
  2117
  2118 				; optimize OK (ai.inc), line = 116
  2119
  2120 1960 A5 5C			lda AVAILDIR
  2121 1962 25 58			and T0B
  2122 1964 F0 07			jeq l_0AB1
  2123 1966 A5 58			lda T0B
  2124 1968 85 5B			sta NEWDIR
  2125 196A 4C 70 19			jmp l_0AC1
  2126 196D			l_0AB1
  2127
  2128 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  2129
  2130 196D 20 F4 15			jsr AISAPPER
  2131 1970			l_0AC1
  2132
  2133 				; ------------------------------------------------------------
  2134
  2135 = 2B5F			@CASETMP_0005	= DATAORIGIN+$0063
  2136
  2137 = 2B5F			@VarData	= @CASETMP_0005
  2138 = 0001			@VarDataSize	= 1
  2139
  2140 1970			@exit
  2141 					.ifdef @new
  2142 					lda <@VarData
  2143 					sta :ztmp
  2144 					lda >@VarData
  2145 					ldy #@VarDataSize-1
  2146 					jmp @FreeMem
  2147 					els
  2148 1970 60				rts						; ret
  2149 					eif
  2150 				.endl
  2151
  2152 1971			.local	SETLEVEL00					; PROCEDURE
  2153
  2154 				; optimize OK (levels.inc), line = 5
  2155
  2156 1971 A9 01			lda #$01
  2157 1973 8D 56 2B			sta SETPLAYER.ISALIVE
  2158 1976 A9 62			lda #$62
  2159 1978 8D 55 2B			sta SETPLAYER.COLOUR
  2160 197B A9 51			lda #$51
  2161 197D 8D 54 2B			sta SETPLAYER.HEAD
  2162 1980 A9 00			lda #$00
  2163 1982 8D 53 2B			sta SETPLAYER.BRAIN
  2164 1985 A9 08			lda #$08
  2165 1987 8D 52 2B			sta SETPLAYER.DIR
  2166 198A A9 0C			lda #$0C
  2167 198C 8D 51 2B			sta SETPLAYER.Y
  2168 198F A9 0A			lda #$0A
  2169 1991 8D 50 2B			sta SETPLAYER.X
  2170 1994 AD F2 2A			lda PLAYER1
  2171 1997 8D 4E 2B			sta SETPLAYER.P
  2172 199A AD F3 2A			lda PLAYER1+1
  2173 199D 8D 4F 2B			sta SETPLAYER.P+1
  2174 19A0 20 9F 14			jsr SETPLAYER
  2175
  2176 				; optimize OK (levels.inc), line = 6
  2177
  2178 19A3 A9 01			lda #$01
  2179 19A5 8D 56 2B			sta SETPLAYER.ISALIVE
  2180 19A8 A9 5D			lda #$5D
  2181 19AA 8D 55 2B			sta SETPLAYER.COLOUR
  2182 19AD A9 51			lda #$51
  2183 19AF 8D 54 2B			sta SETPLAYER.HEAD
  2184 19B2 A9 01			lda #$01
  2185 19B4 8D 53 2B			sta SETPLAYER.BRAIN
  2186 19B7 A9 04			lda #$04
  2187 19B9 8D 52 2B			sta SETPLAYER.DIR
  2188 19BC A9 0C			lda #$0C
  2189 19BE 8D 51 2B			sta SETPLAYER.Y
  2190 19C1 A9 1E			lda #$1E
  2191 19C3 8D 50 2B			sta SETPLAYER.X
  2192 19C6 AD F4 2A			lda PLAYER2
  2193 19C9 8D 4E 2B			sta SETPLAYER.P
  2194 19CC AD F5 2A			lda PLAYER2+1
  2195 19CF 8D 4F 2B			sta SETPLAYER.P+1
  2196 19D2 20 9F 14			jsr SETPLAYER
  2197
  2198 				; optimize FAIL (1, levels.inc), line = 8
  2199
  2200 19D5 E8				inx
  2201 19D6 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2202 19DA 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2203 19DC A9 06			lda #$06
  2204 19DE 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2205 19E1 A9 0A			lda #$0A
  2206 19E3 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2207 19E6 20 4D 13			jsr CALCOBSTACLEADDR
  2208 19E9 B4 17			ldy :STACKORIGIN-1,x
  2209 19EB B5 18			lda :STACKORIGIN,x
  2210 19ED 99 2E 2B			sta adr.OBSTACLES,y
  2211 19F0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2212 19F2 99 2F 2B			sta adr.OBSTACLES+1,y
  2213 19F5 CA				dex
  2214 19F6 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2215 19FA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2216 19FE A9 06			lda #$06
  2217 1A00 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2218 1A03 A9 1E			lda #$1E
  2219 1A05 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2220 1A08 20 4D 13			jsr CALCOBSTACLEADDR
  2221 1A0B B4 17			ldy :STACKORIGIN-1,x
  2222 1A0D B5 18			lda :STACKORIGIN,x
  2223 1A0F 99 2E 2B			sta adr.OBSTACLES,y
  2224 1A12 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2225 1A14 99 2F 2B			sta adr.OBSTACLES+1,y
  2226 1A17 CA				dex
  2227
  2228 				; optimize FAIL (1, levels.inc), line = 9
  2229
  2230 1A18 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2231 1A1C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2232 1A20 A9 12			lda #$12
  2233 1A22 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2234 1A25 A9 0A			lda #$0A
  2235 1A27 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2236 1A2A 20 4D 13			jsr CALCOBSTACLEADDR
  2237 1A2D B4 17			ldy :STACKORIGIN-1,x
  2238 1A2F B5 18			lda :STACKORIGIN,x
  2239 1A31 99 2E 2B			sta adr.OBSTACLES,y
  2240 1A34 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2241 1A36 99 2F 2B			sta adr.OBSTACLES+1,y
  2242 1A39 CA				dex
  2243 1A3A A9 06 95 18			mva #$06 :STACKORIGIN,x
  2244 1A3E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2245 1A42 A9 12			lda #$12
  2246 1A44 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2247 1A47 A9 1E			lda #$1E
  2248 1A49 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2249 1A4C 20 4D 13			jsr CALCOBSTACLEADDR
  2250 1A4F B4 17			ldy :STACKORIGIN-1,x
  2251 1A51 B5 18			lda :STACKORIGIN,x
  2252 1A53 99 2E 2B			sta adr.OBSTACLES,y
  2253 1A56 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2254 1A58 99 2F 2B			sta adr.OBSTACLES+1,y
  2255 1A5B CA				dex
  2256
  2257 				; optimize FAIL (1, levels.inc), line = 10
  2258
  2259 1A5C A9 08 95 18			mva #$08 :STACKORIGIN,x
  2260 1A60 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2261 1A64 A9 02			lda #$02
  2262 1A66 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2263 1A69 A9 14			lda #$14
  2264 1A6B 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2265 1A6E 20 4D 13			jsr CALCOBSTACLEADDR
  2266 1A71 B4 17			ldy :STACKORIGIN-1,x
  2267 1A73 B5 18			lda :STACKORIGIN,x
  2268 1A75 99 2E 2B			sta adr.OBSTACLES,y
  2269 1A78 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2270 1A7A 99 2F 2B			sta adr.OBSTACLES+1,y
  2271 1A7D CA				dex
  2272 1A7E A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2273 1A82 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2274 1A86 A9 16			lda #$16
  2275 1A88 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2276 1A8B A9 14			lda #$14
  2277 1A8D 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2278 1A90 20 4D 13			jsr CALCOBSTACLEADDR
  2279 1A93 B4 17			ldy :STACKORIGIN-1,x
  2280 1A95 B5 18			lda :STACKORIGIN,x
  2281 1A97 99 2E 2B			sta adr.OBSTACLES,y
  2282 1A9A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2283 1A9C 99 2F 2B			sta adr.OBSTACLES+1,y
  2284 1A9F CA				dex
  2285 1AA0 CA				dex
  2286 1AA1			@exit
  2287 					.ifdef @new
  2288 					lda <@VarData
  2289 					sta :ztmp
  2290 					lda >@VarData
  2291 					ldy #@VarDataSize-1
  2292 					jmp @FreeMem
  2293 					els
  2294 1AA1 60				rts						; ret
  2295 					eif
  2296 				.endl
  2297
  2298 1AA2			.local	SETLEVEL01					; PROCEDURE
  2299
  2300 				; optimize OK (levels.inc), line = 17
  2301
  2302 1AA2 A9 01			lda #$01
  2303 1AA4 8D 56 2B			sta SETPLAYER.ISALIVE
  2304 1AA7 A9 62			lda #$62
  2305 1AA9 8D 55 2B			sta SETPLAYER.COLOUR
  2306 1AAC A9 51			lda #$51
  2307 1AAE 8D 54 2B			sta SETPLAYER.HEAD
  2308 1AB1 A9 00			lda #$00
  2309 1AB3 8D 53 2B			sta SETPLAYER.BRAIN
  2310 1AB6 A9 08			lda #$08
  2311 1AB8 8D 52 2B			sta SETPLAYER.DIR
  2312 1ABB A9 0C			lda #$0C
  2313 1ABD 8D 51 2B			sta SETPLAYER.Y
  2314 1AC0 A9 0A			lda #$0A
  2315 1AC2 8D 50 2B			sta SETPLAYER.X
  2316 1AC5 AD F2 2A			lda PLAYER1
  2317 1AC8 8D 4E 2B			sta SETPLAYER.P
  2318 1ACB AD F3 2A			lda PLAYER1+1
  2319 1ACE 8D 4F 2B			sta SETPLAYER.P+1
  2320 1AD1 20 9F 14			jsr SETPLAYER
  2321
  2322 				; optimize OK (levels.inc), line = 18
  2323
  2324 1AD4 A9 01			lda #$01
  2325 1AD6 8D 56 2B			sta SETPLAYER.ISALIVE
  2326 1AD9 A9 5D			lda #$5D
  2327 1ADB 8D 55 2B			sta SETPLAYER.COLOUR
  2328 1ADE A9 51			lda #$51
  2329 1AE0 8D 54 2B			sta SETPLAYER.HEAD
  2330 1AE3 A9 01			lda #$01
  2331 1AE5 8D 53 2B			sta SETPLAYER.BRAIN
  2332 1AE8 A9 04			lda #$04
  2333 1AEA 8D 52 2B			sta SETPLAYER.DIR
  2334 1AED A9 0C			lda #$0C
  2335 1AEF 8D 51 2B			sta SETPLAYER.Y
  2336 1AF2 A9 1E			lda #$1E
  2337 1AF4 8D 50 2B			sta SETPLAYER.X
  2338 1AF7 AD F4 2A			lda PLAYER2
  2339 1AFA 8D 4E 2B			sta SETPLAYER.P
  2340 1AFD AD F5 2A			lda PLAYER2+1
  2341 1B00 8D 4F 2B			sta SETPLAYER.P+1
  2342 1B03 20 9F 14			jsr SETPLAYER
  2343
  2344 				; optimize FAIL (1, levels.inc), line = 20
  2345
  2346 1B06 E8				inx
  2347 1B07 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2348 1B0B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2349 1B0D A9 06			lda #$06
  2350 1B0F 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2351 1B12 A9 0A			lda #$0A
  2352 1B14 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2353 1B17 20 4D 13			jsr CALCOBSTACLEADDR
  2354 1B1A B4 17			ldy :STACKORIGIN-1,x
  2355 1B1C B5 18			lda :STACKORIGIN,x
  2356 1B1E 99 2E 2B			sta adr.OBSTACLES,y
  2357 1B21 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2358 1B23 99 2F 2B			sta adr.OBSTACLES+1,y
  2359 1B26 CA				dex
  2360 1B27 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2361 1B2B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2362 1B2F A9 06			lda #$06
  2363 1B31 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2364 1B34 A9 1E			lda #$1E
  2365 1B36 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2366 1B39 20 4D 13			jsr CALCOBSTACLEADDR
  2367 1B3C B4 17			ldy :STACKORIGIN-1,x
  2368 1B3E B5 18			lda :STACKORIGIN,x
  2369 1B40 99 2E 2B			sta adr.OBSTACLES,y
  2370 1B43 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2371 1B45 99 2F 2B			sta adr.OBSTACLES+1,y
  2372 1B48 CA				dex
  2373
  2374 				; optimize FAIL (1, levels.inc), line = 21
  2375
  2376 1B49 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2377 1B4D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2378 1B51 A9 12			lda #$12
  2379 1B53 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2380 1B56 A9 0A			lda #$0A
  2381 1B58 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2382 1B5B 20 4D 13			jsr CALCOBSTACLEADDR
  2383 1B5E B4 17			ldy :STACKORIGIN-1,x
  2384 1B60 B5 18			lda :STACKORIGIN,x
  2385 1B62 99 2E 2B			sta adr.OBSTACLES,y
  2386 1B65 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2387 1B67 99 2F 2B			sta adr.OBSTACLES+1,y
  2388 1B6A CA				dex
  2389 1B6B A9 06 95 18			mva #$06 :STACKORIGIN,x
  2390 1B6F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2391 1B73 A9 12			lda #$12
  2392 1B75 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2393 1B78 A9 1E			lda #$1E
  2394 1B7A 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2395 1B7D 20 4D 13			jsr CALCOBSTACLEADDR
  2396 1B80 B4 17			ldy :STACKORIGIN-1,x
  2397 1B82 B5 18			lda :STACKORIGIN,x
  2398 1B84 99 2E 2B			sta adr.OBSTACLES,y
  2399 1B87 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2400 1B89 99 2F 2B			sta adr.OBSTACLES+1,y
  2401 1B8C CA				dex
  2402
  2403 				; optimize FAIL (1, levels.inc), line = 22
  2404
  2405 1B8D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2406 1B91 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2407 1B95 A9 02			lda #$02
  2408 1B97 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2409 1B9A A9 14			lda #$14
  2410 1B9C 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2411 1B9F 20 4D 13			jsr CALCOBSTACLEADDR
  2412 1BA2 B4 17			ldy :STACKORIGIN-1,x
  2413 1BA4 B5 18			lda :STACKORIGIN,x
  2414 1BA6 99 2E 2B			sta adr.OBSTACLES,y
  2415 1BA9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2416 1BAB 99 2F 2B			sta adr.OBSTACLES+1,y
  2417 1BAE CA				dex
  2418 1BAF A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2419 1BB3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2420 1BB7 A9 16			lda #$16
  2421 1BB9 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2422 1BBC A9 14			lda #$14
  2423 1BBE 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2424 1BC1 20 4D 13			jsr CALCOBSTACLEADDR
  2425 1BC4 B4 17			ldy :STACKORIGIN-1,x
  2426 1BC6 B5 18			lda :STACKORIGIN,x
  2427 1BC8 99 2E 2B			sta adr.OBSTACLES,y
  2428 1BCB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2429 1BCD 99 2F 2B			sta adr.OBSTACLES+1,y
  2430 1BD0 CA				dex
  2431 1BD1 CA				dex
  2432 1BD2			@exit
  2433 					.ifdef @new
  2434 					lda <@VarData
  2435 					sta :ztmp
  2436 					lda >@VarData
  2437 					ldy #@VarDataSize-1
  2438 					jmp @FreeMem
  2439 					els
  2440 1BD2 60				rts						; ret
  2441 					eif
  2442 				.endl
  2443
  2444 1BD3			.local	SETLEVEL02					; PROCEDURE
  2445
  2446 				; optimize OK (levels.inc), line = 29
  2447
  2448 1BD3 A9 01			lda #$01
  2449 1BD5 8D 56 2B			sta SETPLAYER.ISALIVE
  2450 1BD8 A9 62			lda #$62
  2451 1BDA 8D 55 2B			sta SETPLAYER.COLOUR
  2452 1BDD A9 51			lda #$51
  2453 1BDF 8D 54 2B			sta SETPLAYER.HEAD
  2454 1BE2 A9 00			lda #$00
  2455 1BE4 8D 53 2B			sta SETPLAYER.BRAIN
  2456 1BE7 A9 08			lda #$08
  2457 1BE9 8D 52 2B			sta SETPLAYER.DIR
  2458 1BEC A9 0C			lda #$0C
  2459 1BEE 8D 51 2B			sta SETPLAYER.Y
  2460 1BF1 A9 0A			lda #$0A
  2461 1BF3 8D 50 2B			sta SETPLAYER.X
  2462 1BF6 AD F2 2A			lda PLAYER1
  2463 1BF9 8D 4E 2B			sta SETPLAYER.P
  2464 1BFC AD F3 2A			lda PLAYER1+1
  2465 1BFF 8D 4F 2B			sta SETPLAYER.P+1
  2466 1C02 20 9F 14			jsr SETPLAYER
  2467
  2468 				; optimize OK (levels.inc), line = 30
  2469
  2470 1C05 A9 01			lda #$01
  2471 1C07 8D 56 2B			sta SETPLAYER.ISALIVE
  2472 1C0A A9 5D			lda #$5D
  2473 1C0C 8D 55 2B			sta SETPLAYER.COLOUR
  2474 1C0F A9 51			lda #$51
  2475 1C11 8D 54 2B			sta SETPLAYER.HEAD
  2476 1C14 A9 03			lda #$03
  2477 1C16 8D 53 2B			sta SETPLAYER.BRAIN
  2478 1C19 A9 04			lda #$04
  2479 1C1B 8D 52 2B			sta SETPLAYER.DIR
  2480 1C1E A9 0C			lda #$0C
  2481 1C20 8D 51 2B			sta SETPLAYER.Y
  2482 1C23 A9 1E			lda #$1E
  2483 1C25 8D 50 2B			sta SETPLAYER.X
  2484 1C28 AD F4 2A			lda PLAYER2
  2485 1C2B 8D 4E 2B			sta SETPLAYER.P
  2486 1C2E AD F5 2A			lda PLAYER2+1
  2487 1C31 8D 4F 2B			sta SETPLAYER.P+1
  2488 1C34 20 9F 14			jsr SETPLAYER
  2489
  2490 				; optimize FAIL (1, levels.inc), line = 32
  2491
  2492 1C37 E8				inx
  2493 1C38 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2494 1C3C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2495 1C3E A9 06			lda #$06
  2496 1C40 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2497 1C43 A9 0A			lda #$0A
  2498 1C45 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2499 1C48 20 4D 13			jsr CALCOBSTACLEADDR
  2500 1C4B B4 17			ldy :STACKORIGIN-1,x
  2501 1C4D B5 18			lda :STACKORIGIN,x
  2502 1C4F 99 2E 2B			sta adr.OBSTACLES,y
  2503 1C52 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2504 1C54 99 2F 2B			sta adr.OBSTACLES+1,y
  2505 1C57 CA				dex
  2506 1C58 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2507 1C5C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2508 1C60 A9 06			lda #$06
  2509 1C62 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2510 1C65 A9 1E			lda #$1E
  2511 1C67 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2512 1C6A 20 4D 13			jsr CALCOBSTACLEADDR
  2513 1C6D B4 17			ldy :STACKORIGIN-1,x
  2514 1C6F B5 18			lda :STACKORIGIN,x
  2515 1C71 99 2E 2B			sta adr.OBSTACLES,y
  2516 1C74 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2517 1C76 99 2F 2B			sta adr.OBSTACLES+1,y
  2518 1C79 CA				dex
  2519
  2520 				; optimize FAIL (1, levels.inc), line = 33
  2521
  2522 1C7A A9 04 95 18			mva #$04 :STACKORIGIN,x
  2523 1C7E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2524 1C82 A9 12			lda #$12
  2525 1C84 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2526 1C87 A9 0A			lda #$0A
  2527 1C89 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2528 1C8C 20 4D 13			jsr CALCOBSTACLEADDR
  2529 1C8F B4 17			ldy :STACKORIGIN-1,x
  2530 1C91 B5 18			lda :STACKORIGIN,x
  2531 1C93 99 2E 2B			sta adr.OBSTACLES,y
  2532 1C96 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2533 1C98 99 2F 2B			sta adr.OBSTACLES+1,y
  2534 1C9B CA				dex
  2535 1C9C A9 06 95 18			mva #$06 :STACKORIGIN,x
  2536 1CA0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2537 1CA4 A9 12			lda #$12
  2538 1CA6 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2539 1CA9 A9 1E			lda #$1E
  2540 1CAB 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2541 1CAE 20 4D 13			jsr CALCOBSTACLEADDR
  2542 1CB1 B4 17			ldy :STACKORIGIN-1,x
  2543 1CB3 B5 18			lda :STACKORIGIN,x
  2544 1CB5 99 2E 2B			sta adr.OBSTACLES,y
  2545 1CB8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2546 1CBA 99 2F 2B			sta adr.OBSTACLES+1,y
  2547 1CBD CA				dex
  2548
  2549 				; optimize FAIL (1, levels.inc), line = 34
  2550
  2551 1CBE A9 08 95 18			mva #$08 :STACKORIGIN,x
  2552 1CC2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2553 1CC6 A9 02			lda #$02
  2554 1CC8 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2555 1CCB A9 14			lda #$14
  2556 1CCD 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2557 1CD0 20 4D 13			jsr CALCOBSTACLEADDR
  2558 1CD3 B4 17			ldy :STACKORIGIN-1,x
  2559 1CD5 B5 18			lda :STACKORIGIN,x
  2560 1CD7 99 2E 2B			sta adr.OBSTACLES,y
  2561 1CDA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2562 1CDC 99 2F 2B			sta adr.OBSTACLES+1,y
  2563 1CDF CA				dex
  2564 1CE0 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2565 1CE4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2566 1CE8 A9 16			lda #$16
  2567 1CEA 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2568 1CED A9 14			lda #$14
  2569 1CEF 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2570 1CF2 20 4D 13			jsr CALCOBSTACLEADDR
  2571 1CF5 B4 17			ldy :STACKORIGIN-1,x
  2572 1CF7 B5 18			lda :STACKORIGIN,x
  2573 1CF9 99 2E 2B			sta adr.OBSTACLES,y
  2574 1CFC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2575 1CFE 99 2F 2B			sta adr.OBSTACLES+1,y
  2576 1D01 CA				dex
  2577 1D02 CA				dex
  2578 1D03			@exit
  2579 					.ifdef @new
  2580 					lda <@VarData
  2581 					sta :ztmp
  2582 					lda >@VarData
  2583 					ldy #@VarDataSize-1
  2584 					jmp @FreeMem
  2585 					els
  2586 1D03 60				rts						; ret
  2587 					eif
  2588 				.endl
  2589
  2590 1D04			.local	SETLEVEL03					; PROCEDURE
  2591
  2592 				; optimize OK (levels.inc), line = 41
  2593
  2594 1D04 A9 01			lda #$01
  2595 1D06 8D 56 2B			sta SETPLAYER.ISALIVE
  2596 1D09 A9 62			lda #$62
  2597 1D0B 8D 55 2B			sta SETPLAYER.COLOUR
  2598 1D0E A9 51			lda #$51
  2599 1D10 8D 54 2B			sta SETPLAYER.HEAD
  2600 1D13 A9 00			lda #$00
  2601 1D15 8D 53 2B			sta SETPLAYER.BRAIN
  2602 1D18 A9 08			lda #$08
  2603 1D1A 8D 52 2B			sta SETPLAYER.DIR
  2604 1D1D A9 0C			lda #$0C
  2605 1D1F 8D 51 2B			sta SETPLAYER.Y
  2606 1D22 A9 0A			lda #$0A
  2607 1D24 8D 50 2B			sta SETPLAYER.X
  2608 1D27 AD F2 2A			lda PLAYER1
  2609 1D2A 8D 4E 2B			sta SETPLAYER.P
  2610 1D2D AD F3 2A			lda PLAYER1+1
  2611 1D30 8D 4F 2B			sta SETPLAYER.P+1
  2612 1D33 20 9F 14			jsr SETPLAYER
  2613
  2614 				; optimize OK (levels.inc), line = 42
  2615
  2616 1D36 A9 01			lda #$01
  2617 1D38 8D 56 2B			sta SETPLAYER.ISALIVE
  2618 1D3B A9 5D			lda #$5D
  2619 1D3D 8D 55 2B			sta SETPLAYER.COLOUR
  2620 1D40 A9 51			lda #$51
  2621 1D42 8D 54 2B			sta SETPLAYER.HEAD
  2622 1D45 A9 02			lda #$02
  2623 1D47 8D 53 2B			sta SETPLAYER.BRAIN
  2624 1D4A A9 04			lda #$04
  2625 1D4C 8D 52 2B			sta SETPLAYER.DIR
  2626 1D4F A9 0C			lda #$0C
  2627 1D51 8D 51 2B			sta SETPLAYER.Y
  2628 1D54 A9 1E			lda #$1E
  2629 1D56 8D 50 2B			sta SETPLAYER.X
  2630 1D59 AD F4 2A			lda PLAYER2
  2631 1D5C 8D 4E 2B			sta SETPLAYER.P
  2632 1D5F AD F5 2A			lda PLAYER2+1
  2633 1D62 8D 4F 2B			sta SETPLAYER.P+1
  2634 1D65 20 9F 14			jsr SETPLAYER
  2635
  2636 				; optimize FAIL (1, levels.inc), line = 44
  2637
  2638 1D68 E8				inx
  2639 1D69 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2640 1D6D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2641 1D6F A9 06			lda #$06
  2642 1D71 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2643 1D74 A9 0A			lda #$0A
  2644 1D76 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2645 1D79 20 4D 13			jsr CALCOBSTACLEADDR
  2646 1D7C B4 17			ldy :STACKORIGIN-1,x
  2647 1D7E B5 18			lda :STACKORIGIN,x
  2648 1D80 99 2E 2B			sta adr.OBSTACLES,y
  2649 1D83 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2650 1D85 99 2F 2B			sta adr.OBSTACLES+1,y
  2651 1D88 CA				dex
  2652 1D89 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2653 1D8D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2654 1D91 A9 06			lda #$06
  2655 1D93 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2656 1D96 A9 1E			lda #$1E
  2657 1D98 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2658 1D9B 20 4D 13			jsr CALCOBSTACLEADDR
  2659 1D9E B4 17			ldy :STACKORIGIN-1,x
  2660 1DA0 B5 18			lda :STACKORIGIN,x
  2661 1DA2 99 2E 2B			sta adr.OBSTACLES,y
  2662 1DA5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2663 1DA7 99 2F 2B			sta adr.OBSTACLES+1,y
  2664 1DAA CA				dex
  2665
  2666 				; optimize FAIL (1, levels.inc), line = 45
  2667
  2668 1DAB A9 04 95 18			mva #$04 :STACKORIGIN,x
  2669 1DAF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2670 1DB3 A9 12			lda #$12
  2671 1DB5 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2672 1DB8 A9 0A			lda #$0A
  2673 1DBA 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2674 1DBD 20 4D 13			jsr CALCOBSTACLEADDR
  2675 1DC0 B4 17			ldy :STACKORIGIN-1,x
  2676 1DC2 B5 18			lda :STACKORIGIN,x
  2677 1DC4 99 2E 2B			sta adr.OBSTACLES,y
  2678 1DC7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2679 1DC9 99 2F 2B			sta adr.OBSTACLES+1,y
  2680 1DCC CA				dex
  2681 1DCD A9 06 95 18			mva #$06 :STACKORIGIN,x
  2682 1DD1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2683 1DD5 A9 12			lda #$12
  2684 1DD7 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2685 1DDA A9 1E			lda #$1E
  2686 1DDC 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2687 1DDF 20 4D 13			jsr CALCOBSTACLEADDR
  2688 1DE2 B4 17			ldy :STACKORIGIN-1,x
  2689 1DE4 B5 18			lda :STACKORIGIN,x
  2690 1DE6 99 2E 2B			sta adr.OBSTACLES,y
  2691 1DE9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2692 1DEB 99 2F 2B			sta adr.OBSTACLES+1,y
  2693 1DEE CA				dex
  2694
  2695 				; optimize FAIL (1, levels.inc), line = 46
  2696
  2697 1DEF A9 08 95 18			mva #$08 :STACKORIGIN,x
  2698 1DF3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2699 1DF7 A9 0C			lda #$0C
  2700 1DF9 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2701 1DFC A9 01			lda #$01
  2702 1DFE 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2703 1E01 20 4D 13			jsr CALCOBSTACLEADDR
  2704 1E04 B4 17			ldy :STACKORIGIN-1,x
  2705 1E06 B5 18			lda :STACKORIGIN,x
  2706 1E08 99 2E 2B			sta adr.OBSTACLES,y
  2707 1E0B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2708 1E0D 99 2F 2B			sta adr.OBSTACLES+1,y
  2709 1E10 CA				dex
  2710 1E11 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2711 1E15 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2712 1E19 A9 02			lda #$02
  2713 1E1B 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2714 1E1E A9 14			lda #$14
  2715 1E20 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2716 1E23 20 4D 13			jsr CALCOBSTACLEADDR
  2717 1E26 B4 17			ldy :STACKORIGIN-1,x
  2718 1E28 B5 18			lda :STACKORIGIN,x
  2719 1E2A 99 2E 2B			sta adr.OBSTACLES,y
  2720 1E2D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2721 1E2F 99 2F 2B			sta adr.OBSTACLES+1,y
  2722 1E32 CA				dex
  2723
  2724 				; optimize FAIL (1, levels.inc), line = 47
  2725
  2726 1E33 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2727 1E37 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2728 1E3B A9 16			lda #$16
  2729 1E3D 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2730 1E40 A9 14			lda #$14
  2731 1E42 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2732 1E45 20 4D 13			jsr CALCOBSTACLEADDR
  2733 1E48 B4 17			ldy :STACKORIGIN-1,x
  2734 1E4A B5 18			lda :STACKORIGIN,x
  2735 1E4C 99 2E 2B			sta adr.OBSTACLES,y
  2736 1E4F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2737 1E51 99 2F 2B			sta adr.OBSTACLES+1,y
  2738 1E54 CA				dex
  2739 1E55 CA				dex
  2740 1E56			@exit
  2741 					.ifdef @new
  2742 					lda <@VarData
  2743 					sta :ztmp
  2744 					lda >@VarData
  2745 					ldy #@VarDataSize-1
  2746 					jmp @FreeMem
  2747 					els
  2748 1E56 60				rts						; ret
  2749 					eif
  2750 				.endl
  2751
  2752 1E57			.local	SETLEVEL04					; PROCEDURE
  2753
  2754 				; optimize OK (levels.inc), line = 54
  2755
  2756 1E57 A9 01			lda #$01
  2757 1E59 8D 56 2B			sta SETPLAYER.ISALIVE
  2758 1E5C A9 62			lda #$62
  2759 1E5E 8D 55 2B			sta SETPLAYER.COLOUR
  2760 1E61 A9 51			lda #$51
  2761 1E63 8D 54 2B			sta SETPLAYER.HEAD
  2762 1E66 A9 00			lda #$00
  2763 1E68 8D 53 2B			sta SETPLAYER.BRAIN
  2764 1E6B A9 04			lda #$04
  2765 1E6D 8D 52 2B			sta SETPLAYER.DIR
  2766 1E70 A9 0C			lda #$0C
  2767 1E72 8D 51 2B			sta SETPLAYER.Y
  2768 1E75 A9 12			lda #$12
  2769 1E77 8D 50 2B			sta SETPLAYER.X
  2770 1E7A AD F2 2A			lda PLAYER1
  2771 1E7D 8D 4E 2B			sta SETPLAYER.P
  2772 1E80 AD F3 2A			lda PLAYER1+1
  2773 1E83 8D 4F 2B			sta SETPLAYER.P+1
  2774 1E86 20 9F 14			jsr SETPLAYER
  2775
  2776 				; optimize OK (levels.inc), line = 55
  2777
  2778 1E89 A9 01			lda #$01
  2779 1E8B 8D 56 2B			sta SETPLAYER.ISALIVE
  2780 1E8E A9 5D			lda #$5D
  2781 1E90 8D 55 2B			sta SETPLAYER.COLOUR
  2782 1E93 A9 51			lda #$51
  2783 1E95 8D 54 2B			sta SETPLAYER.HEAD
  2784 1E98 A9 04			lda #$04
  2785 1E9A 8D 53 2B			sta SETPLAYER.BRAIN
  2786 1E9D A9 08			lda #$08
  2787 1E9F 8D 52 2B			sta SETPLAYER.DIR
  2788 1EA2 A9 0C			lda #$0C
  2789 1EA4 8D 51 2B			sta SETPLAYER.Y
  2790 1EA7 A9 16			lda #$16
  2791 1EA9 8D 50 2B			sta SETPLAYER.X
  2792 1EAC AD F4 2A			lda PLAYER2
  2793 1EAF 8D 4E 2B			sta SETPLAYER.P
  2794 1EB2 AD F5 2A			lda PLAYER2+1
  2795 1EB5 8D 4F 2B			sta SETPLAYER.P+1
  2796 1EB8 20 9F 14			jsr SETPLAYER
  2797
  2798 				; optimize FAIL (1, levels.inc), line = 57
  2799
  2800 1EBB E8				inx
  2801 1EBC A9 00 95 18			mva #$00 :STACKORIGIN,x
  2802 1EC0 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2803 1EC2 A9 06			lda #$06
  2804 1EC4 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2805 1EC7 A9 0A			lda #$0A
  2806 1EC9 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2807 1ECC 20 4D 13			jsr CALCOBSTACLEADDR
  2808 1ECF B4 17			ldy :STACKORIGIN-1,x
  2809 1ED1 B5 18			lda :STACKORIGIN,x
  2810 1ED3 99 2E 2B			sta adr.OBSTACLES,y
  2811 1ED6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2812 1ED8 99 2F 2B			sta adr.OBSTACLES+1,y
  2813 1EDB CA				dex
  2814 1EDC A9 02 95 18			mva #$02 :STACKORIGIN,x
  2815 1EE0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2816 1EE4 A9 06			lda #$06
  2817 1EE6 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2818 1EE9 A9 1E			lda #$1E
  2819 1EEB 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2820 1EEE 20 4D 13			jsr CALCOBSTACLEADDR
  2821 1EF1 B4 17			ldy :STACKORIGIN-1,x
  2822 1EF3 B5 18			lda :STACKORIGIN,x
  2823 1EF5 99 2E 2B			sta adr.OBSTACLES,y
  2824 1EF8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2825 1EFA 99 2F 2B			sta adr.OBSTACLES+1,y
  2826 1EFD CA				dex
  2827
  2828 				; optimize FAIL (1, levels.inc), line = 58
  2829
  2830 1EFE A9 04 95 18			mva #$04 :STACKORIGIN,x
  2831 1F02 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2832 1F06 A9 12			lda #$12
  2833 1F08 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2834 1F0B A9 0A			lda #$0A
  2835 1F0D 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2836 1F10 20 4D 13			jsr CALCOBSTACLEADDR
  2837 1F13 B4 17			ldy :STACKORIGIN-1,x
  2838 1F15 B5 18			lda :STACKORIGIN,x
  2839 1F17 99 2E 2B			sta adr.OBSTACLES,y
  2840 1F1A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2841 1F1C 99 2F 2B			sta adr.OBSTACLES+1,y
  2842 1F1F CA				dex
  2843 1F20 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2844 1F24 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2845 1F28 A9 12			lda #$12
  2846 1F2A 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2847 1F2D A9 1E			lda #$1E
  2848 1F2F 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2849 1F32 20 4D 13			jsr CALCOBSTACLEADDR
  2850 1F35 B4 17			ldy :STACKORIGIN-1,x
  2851 1F37 B5 18			lda :STACKORIGIN,x
  2852 1F39 99 2E 2B			sta adr.OBSTACLES,y
  2853 1F3C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2854 1F3E 99 2F 2B			sta adr.OBSTACLES+1,y
  2855 1F41 CA				dex
  2856
  2857 				; optimize FAIL (1, levels.inc), line = 59
  2858
  2859 1F42 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2860 1F46 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2861 1F4A A9 0C			lda #$0C
  2862 1F4C 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2863 1F4F A9 01			lda #$01
  2864 1F51 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2865 1F54 20 4D 13			jsr CALCOBSTACLEADDR
  2866 1F57 B4 17			ldy :STACKORIGIN-1,x
  2867 1F59 B5 18			lda :STACKORIGIN,x
  2868 1F5B 99 2E 2B			sta adr.OBSTACLES,y
  2869 1F5E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2870 1F60 99 2F 2B			sta adr.OBSTACLES+1,y
  2871 1F63 CA				dex
  2872 1F64 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2873 1F68 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2874 1F6C A9 02			lda #$02
  2875 1F6E 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2876 1F71 A9 14			lda #$14
  2877 1F73 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2878 1F76 20 4D 13			jsr CALCOBSTACLEADDR
  2879 1F79 B4 17			ldy :STACKORIGIN-1,x
  2880 1F7B B5 18			lda :STACKORIGIN,x
  2881 1F7D 99 2E 2B			sta adr.OBSTACLES,y
  2882 1F80 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2883 1F82 99 2F 2B			sta adr.OBSTACLES+1,y
  2884 1F85 CA				dex
  2885
  2886 				; optimize FAIL (1, levels.inc), line = 60
  2887
  2888 1F86 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2889 1F8A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2890 1F8E A9 16			lda #$16
  2891 1F90 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2892 1F93 A9 14			lda #$14
  2893 1F95 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2894 1F98 20 4D 13			jsr CALCOBSTACLEADDR
  2895 1F9B B4 17			ldy :STACKORIGIN-1,x
  2896 1F9D B5 18			lda :STACKORIGIN,x
  2897 1F9F 99 2E 2B			sta adr.OBSTACLES,y
  2898 1FA2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2899 1FA4 99 2F 2B			sta adr.OBSTACLES+1,y
  2900 1FA7 CA				dex
  2901 1FA8 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2902 1FAC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2903 1FB0 A9 0C			lda #$0C
  2904 1FB2 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  2905 1FB5 A9 14			lda #$14
  2906 1FB7 8D 4A 2B			sta CALCOBSTACLEADDR.X
  2907 1FBA 20 4D 13			jsr CALCOBSTACLEADDR
  2908 1FBD B4 17			ldy :STACKORIGIN-1,x
  2909 1FBF B5 18			lda :STACKORIGIN,x
  2910 1FC1 99 2E 2B			sta adr.OBSTACLES,y
  2911 1FC4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2912 1FC6 99 2F 2B			sta adr.OBSTACLES+1,y
  2913 1FC9 CA				dex
  2914 1FCA CA				dex
  2915 1FCB			@exit
  2916 					.ifdef @new
  2917 					lda <@VarData
  2918 					sta :ztmp
  2919 					lda >@VarData
  2920 					ldy #@VarDataSize-1
  2921 					jmp @FreeMem
  2922 					els
  2923 1FCB 60				rts						; ret
  2924 					eif
  2925 				.endl
  2926
  2927 1FCC			.local	SETLEVEL05					; PROCEDURE
  2928
  2929 				; optimize OK (levels.inc), line = 67
  2930
  2931 1FCC A9 01			lda #$01
  2932 1FCE 8D 56 2B			sta SETPLAYER.ISALIVE
  2933 1FD1 A9 62			lda #$62
  2934 1FD3 8D 55 2B			sta SETPLAYER.COLOUR
  2935 1FD6 A9 51			lda #$51
  2936 1FD8 8D 54 2B			sta SETPLAYER.HEAD
  2937 1FDB A9 00			lda #$00
  2938 1FDD 8D 53 2B			sta SETPLAYER.BRAIN
  2939 1FE0 A9 08			lda #$08
  2940 1FE2 8D 52 2B			sta SETPLAYER.DIR
  2941 1FE5 A9 0C			lda #$0C
  2942 1FE7 8D 51 2B			sta SETPLAYER.Y
  2943 1FEA A9 0A			lda #$0A
  2944 1FEC 8D 50 2B			sta SETPLAYER.X
  2945 1FEF AD F2 2A			lda PLAYER1
  2946 1FF2 8D 4E 2B			sta SETPLAYER.P
  2947 1FF5 AD F3 2A			lda PLAYER1+1
  2948 1FF8 8D 4F 2B			sta SETPLAYER.P+1
  2949 1FFB 20 9F 14			jsr SETPLAYER
  2950
  2951 				; optimize OK (levels.inc), line = 68
  2952
  2953 1FFE A9 01			lda #$01
  2954 2000 8D 56 2B			sta SETPLAYER.ISALIVE
  2955 2003 A9 5D			lda #$5D
  2956 2005 8D 55 2B			sta SETPLAYER.COLOUR
  2957 2008 A9 51			lda #$51
  2958 200A 8D 54 2B			sta SETPLAYER.HEAD
  2959 200D A9 04			lda #$04
  2960 200F 8D 53 2B			sta SETPLAYER.BRAIN
  2961 2012 8D 52 2B			sta SETPLAYER.DIR
  2962 2015 A9 0C			lda #$0C
  2963 2017 8D 51 2B			sta SETPLAYER.Y
  2964 201A A9 1E			lda #$1E
  2965 201C 8D 50 2B			sta SETPLAYER.X
  2966 201F AD F4 2A			lda PLAYER2
  2967 2022 8D 4E 2B			sta SETPLAYER.P
  2968 2025 AD F5 2A			lda PLAYER2+1
  2969 2028 8D 4F 2B			sta SETPLAYER.P+1
  2970 202B 20 9F 14			jsr SETPLAYER
  2971
  2972 				; optimize OK (levels.inc), line = 69
  2973
  2974 202E A9 01			lda #$01
  2975 2030 8D 56 2B			sta SETPLAYER.ISALIVE
  2976 2033 A9 71			lda #$71
  2977 2035 8D 55 2B			sta SETPLAYER.COLOUR
  2978 2038 A9 51			lda #$51
  2979 203A 8D 54 2B			sta SETPLAYER.HEAD
  2980 203D A9 03			lda #$03
  2981 203F 8D 53 2B			sta SETPLAYER.BRAIN
  2982 2042 A9 02			lda #$02
  2983 2044 8D 52 2B			sta SETPLAYER.DIR
  2984 2047 A9 04			lda #$04
  2985 2049 8D 51 2B			sta SETPLAYER.Y
  2986 204C A9 14			lda #$14
  2987 204E 8D 50 2B			sta SETPLAYER.X
  2988 2051 AD F6 2A			lda PLAYER3
  2989 2054 8D 4E 2B			sta SETPLAYER.P
  2990 2057 AD F7 2A			lda PLAYER3+1
  2991 205A 8D 4F 2B			sta SETPLAYER.P+1
  2992 205D 20 9F 14			jsr SETPLAYER
  2993
  2994 				; optimize OK (levels.inc), line = 70
  2995
  2996 2060 A9 01			lda #$01
  2997 2062 8D 56 2B			sta SETPLAYER.ISALIVE
  2998 2065 A9 55			lda #$55
  2999 2067 8D 55 2B			sta SETPLAYER.COLOUR
  3000 206A A9 51			lda #$51
  3001 206C 8D 54 2B			sta SETPLAYER.HEAD
  3002 206F A9 02			lda #$02
  3003 2071 8D 53 2B			sta SETPLAYER.BRAIN
  3004 2074 A9 01			lda #$01
  3005 2076 8D 52 2B			sta SETPLAYER.DIR
  3006 2079 A9 12			lda #$12
  3007 207B 8D 51 2B			sta SETPLAYER.Y
  3008 207E A9 14			lda #$14
  3009 2080 8D 50 2B			sta SETPLAYER.X
  3010 2083 AD F8 2A			lda PLAYER4
  3011 2086 8D 4E 2B			sta SETPLAYER.P
  3012 2089 AD F9 2A			lda PLAYER4+1
  3013 208C 8D 4F 2B			sta SETPLAYER.P+1
  3014 208F 20 9F 14			jsr SETPLAYER
  3015
  3016 				; optimize FAIL (1, levels.inc), line = 72
  3017
  3018 2092 E8				inx
  3019 2093 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3020 2097 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3021 2099 A9 06			lda #$06
  3022 209B 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3023 209E A9 0A			lda #$0A
  3024 20A0 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3025 20A3 20 4D 13			jsr CALCOBSTACLEADDR
  3026 20A6 B4 17			ldy :STACKORIGIN-1,x
  3027 20A8 B5 18			lda :STACKORIGIN,x
  3028 20AA 99 2E 2B			sta adr.OBSTACLES,y
  3029 20AD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3030 20AF 99 2F 2B			sta adr.OBSTACLES+1,y
  3031 20B2 CA				dex
  3032 20B3 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3033 20B7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3034 20BB A9 06			lda #$06
  3035 20BD 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3036 20C0 A9 1E			lda #$1E
  3037 20C2 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3038 20C5 20 4D 13			jsr CALCOBSTACLEADDR
  3039 20C8 B4 17			ldy :STACKORIGIN-1,x
  3040 20CA B5 18			lda :STACKORIGIN,x
  3041 20CC 99 2E 2B			sta adr.OBSTACLES,y
  3042 20CF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3043 20D1 99 2F 2B			sta adr.OBSTACLES+1,y
  3044 20D4 CA				dex
  3045
  3046 				; optimize FAIL (1, levels.inc), line = 73
  3047
  3048 20D5 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3049 20D9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3050 20DD A9 12			lda #$12
  3051 20DF 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3052 20E2 A9 0A			lda #$0A
  3053 20E4 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3054 20E7 20 4D 13			jsr CALCOBSTACLEADDR
  3055 20EA B4 17			ldy :STACKORIGIN-1,x
  3056 20EC B5 18			lda :STACKORIGIN,x
  3057 20EE 99 2E 2B			sta adr.OBSTACLES,y
  3058 20F1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3059 20F3 99 2F 2B			sta adr.OBSTACLES+1,y
  3060 20F6 CA				dex
  3061 20F7 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3062 20FB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3063 20FF A9 12			lda #$12
  3064 2101 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3065 2104 A9 1E			lda #$1E
  3066 2106 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3067 2109 20 4D 13			jsr CALCOBSTACLEADDR
  3068 210C B4 17			ldy :STACKORIGIN-1,x
  3069 210E B5 18			lda :STACKORIGIN,x
  3070 2110 99 2E 2B			sta adr.OBSTACLES,y
  3071 2113 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3072 2115 99 2F 2B			sta adr.OBSTACLES+1,y
  3073 2118 CA				dex
  3074
  3075 				; optimize FAIL (1, levels.inc), line = 74
  3076
  3077 2119 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3078 211D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3079 2121 A9 0C			lda #$0C
  3080 2123 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3081 2126 A9 01			lda #$01
  3082 2128 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3083 212B 20 4D 13			jsr CALCOBSTACLEADDR
  3084 212E B4 17			ldy :STACKORIGIN-1,x
  3085 2130 B5 18			lda :STACKORIGIN,x
  3086 2132 99 2E 2B			sta adr.OBSTACLES,y
  3087 2135 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3088 2137 99 2F 2B			sta adr.OBSTACLES+1,y
  3089 213A CA				dex
  3090 213B A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3091 213F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3092 2143 A9 02			lda #$02
  3093 2145 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3094 2148 A9 14			lda #$14
  3095 214A 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3096 214D 20 4D 13			jsr CALCOBSTACLEADDR
  3097 2150 B4 17			ldy :STACKORIGIN-1,x
  3098 2152 B5 18			lda :STACKORIGIN,x
  3099 2154 99 2E 2B			sta adr.OBSTACLES,y
  3100 2157 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3101 2159 99 2F 2B			sta adr.OBSTACLES+1,y
  3102 215C CA				dex
  3103
  3104 				; optimize FAIL (1, levels.inc), line = 75
  3105
  3106 215D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3107 2161 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3108 2165 A9 16			lda #$16
  3109 2167 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3110 216A A9 14			lda #$14
  3111 216C 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3112 216F 20 4D 13			jsr CALCOBSTACLEADDR
  3113 2172 B4 17			ldy :STACKORIGIN-1,x
  3114 2174 B5 18			lda :STACKORIGIN,x
  3115 2176 99 2E 2B			sta adr.OBSTACLES,y
  3116 2179 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3117 217B 99 2F 2B			sta adr.OBSTACLES+1,y
  3118 217E CA				dex
  3119 217F CA				dex
  3120 2180			@exit
  3121 					.ifdef @new
  3122 					lda <@VarData
  3123 					sta :ztmp
  3124 					lda >@VarData
  3125 					ldy #@VarDataSize-1
  3126 					jmp @FreeMem
  3127 					els
  3128 2180 60				rts						; ret
  3129 					eif
  3130 				.endl
  3131
  3132 2181			.local	SETLEVEL06					; PROCEDURE
  3133
  3134 				; optimize OK (levels.inc), line = 82
  3135
  3136 2181 A9 01			lda #$01
  3137 2183 8D 56 2B			sta SETPLAYER.ISALIVE
  3138 2186 A9 62			lda #$62
  3139 2188 8D 55 2B			sta SETPLAYER.COLOUR
  3140 218B A9 51			lda #$51
  3141 218D 8D 54 2B			sta SETPLAYER.HEAD
  3142 2190 A9 00			lda #$00
  3143 2192 8D 53 2B			sta SETPLAYER.BRAIN
  3144 2195 A9 04			lda #$04
  3145 2197 8D 52 2B			sta SETPLAYER.DIR
  3146 219A A9 0C			lda #$0C
  3147 219C 8D 51 2B			sta SETPLAYER.Y
  3148 219F A9 12			lda #$12
  3149 21A1 8D 50 2B			sta SETPLAYER.X
  3150 21A4 AD F2 2A			lda PLAYER1
  3151 21A7 8D 4E 2B			sta SETPLAYER.P
  3152 21AA AD F3 2A			lda PLAYER1+1
  3153 21AD 8D 4F 2B			sta SETPLAYER.P+1
  3154 21B0 20 9F 14			jsr SETPLAYER
  3155
  3156 				; optimize OK (levels.inc), line = 83
  3157
  3158 21B3 A9 01			lda #$01
  3159 21B5 8D 56 2B			sta SETPLAYER.ISALIVE
  3160 21B8 A9 5D			lda #$5D
  3161 21BA 8D 55 2B			sta SETPLAYER.COLOUR
  3162 21BD A9 51			lda #$51
  3163 21BF 8D 54 2B			sta SETPLAYER.HEAD
  3164 21C2 A9 02			lda #$02
  3165 21C4 8D 53 2B			sta SETPLAYER.BRAIN
  3166 21C7 A9 08			lda #$08
  3167 21C9 8D 52 2B			sta SETPLAYER.DIR
  3168 21CC A9 0C			lda #$0C
  3169 21CE 8D 51 2B			sta SETPLAYER.Y
  3170 21D1 A9 16			lda #$16
  3171 21D3 8D 50 2B			sta SETPLAYER.X
  3172 21D6 AD F4 2A			lda PLAYER2
  3173 21D9 8D 4E 2B			sta SETPLAYER.P
  3174 21DC AD F5 2A			lda PLAYER2+1
  3175 21DF 8D 4F 2B			sta SETPLAYER.P+1
  3176 21E2 20 9F 14			jsr SETPLAYER
  3177
  3178 				; optimize OK (levels.inc), line = 84
  3179
  3180 21E5 A9 01			lda #$01
  3181 21E7 8D 56 2B			sta SETPLAYER.ISALIVE
  3182 21EA A9 71			lda #$71
  3183 21EC 8D 55 2B			sta SETPLAYER.COLOUR
  3184 21EF A9 51			lda #$51
  3185 21F1 8D 54 2B			sta SETPLAYER.HEAD
  3186 21F4 A9 02			lda #$02
  3187 21F6 8D 53 2B			sta SETPLAYER.BRAIN
  3188 21F9 8D 52 2B			sta SETPLAYER.DIR
  3189 21FC A9 06			lda #$06
  3190 21FE 8D 51 2B			sta SETPLAYER.Y
  3191 2201 8D 50 2B			sta SETPLAYER.X
  3192 2204 AD F6 2A			lda PLAYER3
  3193 2207 8D 4E 2B			sta SETPLAYER.P
  3194 220A AD F7 2A			lda PLAYER3+1
  3195 220D 8D 4F 2B			sta SETPLAYER.P+1
  3196 2210 20 9F 14			jsr SETPLAYER
  3197
  3198 				; optimize OK (levels.inc), line = 85
  3199
  3200 2213 A9 01			lda #$01
  3201 2215 8D 56 2B			sta SETPLAYER.ISALIVE
  3202 2218 A9 55			lda #$55
  3203 221A 8D 55 2B			sta SETPLAYER.COLOUR
  3204 221D A9 51			lda #$51
  3205 221F 8D 54 2B			sta SETPLAYER.HEAD
  3206 2222 A9 03			lda #$03
  3207 2224 8D 53 2B			sta SETPLAYER.BRAIN
  3208 2227 A9 08			lda #$08
  3209 2229 8D 52 2B			sta SETPLAYER.DIR
  3210 222C A9 12			lda #$12
  3211 222E 8D 51 2B			sta SETPLAYER.Y
  3212 2231 A9 24			lda #$24
  3213 2233 8D 50 2B			sta SETPLAYER.X
  3214 2236 AD F8 2A			lda PLAYER4
  3215 2239 8D 4E 2B			sta SETPLAYER.P
  3216 223C AD F9 2A			lda PLAYER4+1
  3217 223F 8D 4F 2B			sta SETPLAYER.P+1
  3218 2242 20 9F 14			jsr SETPLAYER
  3219
  3220 				; optimize FAIL (1, levels.inc), line = 87
  3221
  3222 2245 E8				inx
  3223 2246 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3224 224A 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3225 224C A9 06			lda #$06
  3226 224E 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3227 2251 A9 0A			lda #$0A
  3228 2253 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3229 2256 20 4D 13			jsr CALCOBSTACLEADDR
  3230 2259 B4 17			ldy :STACKORIGIN-1,x
  3231 225B B5 18			lda :STACKORIGIN,x
  3232 225D 99 2E 2B			sta adr.OBSTACLES,y
  3233 2260 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3234 2262 99 2F 2B			sta adr.OBSTACLES+1,y
  3235 2265 CA				dex
  3236 2266 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3237 226A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3238 226E A9 06			lda #$06
  3239 2270 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3240 2273 A9 1E			lda #$1E
  3241 2275 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3242 2278 20 4D 13			jsr CALCOBSTACLEADDR
  3243 227B B4 17			ldy :STACKORIGIN-1,x
  3244 227D B5 18			lda :STACKORIGIN,x
  3245 227F 99 2E 2B			sta adr.OBSTACLES,y
  3246 2282 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3247 2284 99 2F 2B			sta adr.OBSTACLES+1,y
  3248 2287 CA				dex
  3249
  3250 				; optimize FAIL (1, levels.inc), line = 88
  3251
  3252 2288 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3253 228C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3254 2290 A9 12			lda #$12
  3255 2292 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3256 2295 A9 0A			lda #$0A
  3257 2297 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3258 229A 20 4D 13			jsr CALCOBSTACLEADDR
  3259 229D B4 17			ldy :STACKORIGIN-1,x
  3260 229F B5 18			lda :STACKORIGIN,x
  3261 22A1 99 2E 2B			sta adr.OBSTACLES,y
  3262 22A4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3263 22A6 99 2F 2B			sta adr.OBSTACLES+1,y
  3264 22A9 CA				dex
  3265 22AA A9 06 95 18			mva #$06 :STACKORIGIN,x
  3266 22AE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3267 22B2 A9 12			lda #$12
  3268 22B4 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3269 22B7 A9 1E			lda #$1E
  3270 22B9 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3271 22BC 20 4D 13			jsr CALCOBSTACLEADDR
  3272 22BF B4 17			ldy :STACKORIGIN-1,x
  3273 22C1 B5 18			lda :STACKORIGIN,x
  3274 22C3 99 2E 2B			sta adr.OBSTACLES,y
  3275 22C6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3276 22C8 99 2F 2B			sta adr.OBSTACLES+1,y
  3277 22CB CA				dex
  3278
  3279 				; optimize FAIL (1, levels.inc), line = 89
  3280
  3281 22CC A9 08 95 18			mva #$08 :STACKORIGIN,x
  3282 22D0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3283 22D4 A9 0C			lda #$0C
  3284 22D6 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3285 22D9 A9 01			lda #$01
  3286 22DB 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3287 22DE 20 4D 13			jsr CALCOBSTACLEADDR
  3288 22E1 B4 17			ldy :STACKORIGIN-1,x
  3289 22E3 B5 18			lda :STACKORIGIN,x
  3290 22E5 99 2E 2B			sta adr.OBSTACLES,y
  3291 22E8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3292 22EA 99 2F 2B			sta adr.OBSTACLES+1,y
  3293 22ED CA				dex
  3294 22EE A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3295 22F2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3296 22F6 A9 02			lda #$02
  3297 22F8 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3298 22FB A9 14			lda #$14
  3299 22FD 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3300 2300 20 4D 13			jsr CALCOBSTACLEADDR
  3301 2303 B4 17			ldy :STACKORIGIN-1,x
  3302 2305 B5 18			lda :STACKORIGIN,x
  3303 2307 99 2E 2B			sta adr.OBSTACLES,y
  3304 230A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3305 230C 99 2F 2B			sta adr.OBSTACLES+1,y
  3306 230F CA				dex
  3307
  3308 				; optimize FAIL (1, levels.inc), line = 90
  3309
  3310 2310 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3311 2314 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3312 2318 A9 16			lda #$16
  3313 231A 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3314 231D A9 14			lda #$14
  3315 231F 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3316 2322 20 4D 13			jsr CALCOBSTACLEADDR
  3317 2325 B4 17			ldy :STACKORIGIN-1,x
  3318 2327 B5 18			lda :STACKORIGIN,x
  3319 2329 99 2E 2B			sta adr.OBSTACLES,y
  3320 232C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3321 232E 99 2F 2B			sta adr.OBSTACLES+1,y
  3322 2331 CA				dex
  3323 2332 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3324 2336 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3325 233A A9 0C			lda #$0C
  3326 233C 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3327 233F A9 14			lda #$14
  3328 2341 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3329 2344 20 4D 13			jsr CALCOBSTACLEADDR
  3330 2347 B4 17			ldy :STACKORIGIN-1,x
  3331 2349 B5 18			lda :STACKORIGIN,x
  3332 234B 99 2E 2B			sta adr.OBSTACLES,y
  3333 234E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3334 2350 99 2F 2B			sta adr.OBSTACLES+1,y
  3335 2353 CA				dex
  3336 2354 CA				dex
  3337 2355			@exit
  3338 					.ifdef @new
  3339 					lda <@VarData
  3340 					sta :ztmp
  3341 					lda >@VarData
  3342 					ldy #@VarDataSize-1
  3343 					jmp @FreeMem
  3344 					els
  3345 2355 60				rts						; ret
  3346 					eif
  3347 				.endl
  3348
  3349 2356			.local	SETLEVEL07					; PROCEDURE
  3350
  3351 				; optimize OK (levels.inc), line = 97
  3352
  3353 2356 A9 01			lda #$01
  3354 2358 8D 56 2B			sta SETPLAYER.ISALIVE
  3355 235B A9 62			lda #$62
  3356 235D 8D 55 2B			sta SETPLAYER.COLOUR
  3357 2360 A9 51			lda #$51
  3358 2362 8D 54 2B			sta SETPLAYER.HEAD
  3359 2365 A9 00			lda #$00
  3360 2367 8D 53 2B			sta SETPLAYER.BRAIN
  3361 236A A9 04			lda #$04
  3362 236C 8D 52 2B			sta SETPLAYER.DIR
  3363 236F A9 0C			lda #$0C
  3364 2371 8D 51 2B			sta SETPLAYER.Y
  3365 2374 A9 12			lda #$12
  3366 2376 8D 50 2B			sta SETPLAYER.X
  3367 2379 AD F2 2A			lda PLAYER1
  3368 237C 8D 4E 2B			sta SETPLAYER.P
  3369 237F AD F3 2A			lda PLAYER1+1
  3370 2382 8D 4F 2B			sta SETPLAYER.P+1
  3371 2385 20 9F 14			jsr SETPLAYER
  3372
  3373 				; optimize OK (levels.inc), line = 98
  3374
  3375 2388 A9 01			lda #$01
  3376 238A 8D 56 2B			sta SETPLAYER.ISALIVE
  3377 238D A9 5D			lda #$5D
  3378 238F 8D 55 2B			sta SETPLAYER.COLOUR
  3379 2392 A9 51			lda #$51
  3380 2394 8D 54 2B			sta SETPLAYER.HEAD
  3381 2397 A9 03			lda #$03
  3382 2399 8D 53 2B			sta SETPLAYER.BRAIN
  3383 239C A9 08			lda #$08
  3384 239E 8D 52 2B			sta SETPLAYER.DIR
  3385 23A1 A9 17			lda #$17
  3386 23A3 8D 51 2B			sta SETPLAYER.Y
  3387 23A6 A9 01			lda #$01
  3388 23A8 8D 50 2B			sta SETPLAYER.X
  3389 23AB AD F4 2A			lda PLAYER2
  3390 23AE 8D 4E 2B			sta SETPLAYER.P
  3391 23B1 AD F5 2A			lda PLAYER2+1
  3392 23B4 8D 4F 2B			sta SETPLAYER.P+1
  3393 23B7 20 9F 14			jsr SETPLAYER
  3394
  3395 				; optimize OK (levels.inc), line = 99
  3396
  3397 23BA A9 01			lda #$01
  3398 23BC 8D 56 2B			sta SETPLAYER.ISALIVE
  3399 23BF A9 71			lda #$71
  3400 23C1 8D 55 2B			sta SETPLAYER.COLOUR
  3401 23C4 A9 51			lda #$51
  3402 23C6 8D 54 2B			sta SETPLAYER.HEAD
  3403 23C9 A9 03			lda #$03
  3404 23CB 8D 53 2B			sta SETPLAYER.BRAIN
  3405 23CE A9 02			lda #$02
  3406 23D0 8D 52 2B			sta SETPLAYER.DIR
  3407 23D3 A9 04			lda #$04
  3408 23D5 8D 51 2B			sta SETPLAYER.Y
  3409 23D8 A9 1E			lda #$1E
  3410 23DA 8D 50 2B			sta SETPLAYER.X
  3411 23DD AD F6 2A			lda PLAYER3
  3412 23E0 8D 4E 2B			sta SETPLAYER.P
  3413 23E3 AD F7 2A			lda PLAYER3+1
  3414 23E6 8D 4F 2B			sta SETPLAYER.P+1
  3415 23E9 20 9F 14			jsr SETPLAYER
  3416
  3417 				; optimize OK (levels.inc), line = 100
  3418
  3419 23EC A9 01			lda #$01
  3420 23EE 8D 56 2B			sta SETPLAYER.ISALIVE
  3421 23F1 A9 55			lda #$55
  3422 23F3 8D 55 2B			sta SETPLAYER.COLOUR
  3423 23F6 A9 51			lda #$51
  3424 23F8 8D 54 2B			sta SETPLAYER.HEAD
  3425 23FB A9 02			lda #$02
  3426 23FD 8D 53 2B			sta SETPLAYER.BRAIN
  3427 2400 A9 01			lda #$01
  3428 2402 8D 52 2B			sta SETPLAYER.DIR
  3429 2405 A9 15			lda #$15
  3430 2407 8D 51 2B			sta SETPLAYER.Y
  3431 240A A9 24			lda #$24
  3432 240C 8D 50 2B			sta SETPLAYER.X
  3433 240F AD F8 2A			lda PLAYER4
  3434 2412 8D 4E 2B			sta SETPLAYER.P
  3435 2415 AD F9 2A			lda PLAYER4+1
  3436 2418 8D 4F 2B			sta SETPLAYER.P+1
  3437 241B 20 9F 14			jsr SETPLAYER
  3438
  3439 				; optimize FAIL (1, levels.inc), line = 102
  3440
  3441 241E E8				inx
  3442 241F A9 00 95 18			mva #$00 :STACKORIGIN,x
  3443 2423 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3444 2425 A9 06			lda #$06
  3445 2427 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3446 242A A9 0A			lda #$0A
  3447 242C 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3448 242F 20 4D 13			jsr CALCOBSTACLEADDR
  3449 2432 B4 17			ldy :STACKORIGIN-1,x
  3450 2434 B5 18			lda :STACKORIGIN,x
  3451 2436 99 2E 2B			sta adr.OBSTACLES,y
  3452 2439 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3453 243B 99 2F 2B			sta adr.OBSTACLES+1,y
  3454 243E CA				dex
  3455 243F A9 02 95 18			mva #$02 :STACKORIGIN,x
  3456 2443 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3457 2447 A9 06			lda #$06
  3458 2449 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3459 244C A9 1E			lda #$1E
  3460 244E 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3461 2451 20 4D 13			jsr CALCOBSTACLEADDR
  3462 2454 B4 17			ldy :STACKORIGIN-1,x
  3463 2456 B5 18			lda :STACKORIGIN,x
  3464 2458 99 2E 2B			sta adr.OBSTACLES,y
  3465 245B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3466 245D 99 2F 2B			sta adr.OBSTACLES+1,y
  3467 2460 CA				dex
  3468
  3469 				; optimize FAIL (1, levels.inc), line = 103
  3470
  3471 2461 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3472 2465 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3473 2469 A9 12			lda #$12
  3474 246B 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3475 246E A9 0A			lda #$0A
  3476 2470 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3477 2473 20 4D 13			jsr CALCOBSTACLEADDR
  3478 2476 B4 17			ldy :STACKORIGIN-1,x
  3479 2478 B5 18			lda :STACKORIGIN,x
  3480 247A 99 2E 2B			sta adr.OBSTACLES,y
  3481 247D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3482 247F 99 2F 2B			sta adr.OBSTACLES+1,y
  3483 2482 CA				dex
  3484 2483 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3485 2487 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3486 248B A9 12			lda #$12
  3487 248D 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3488 2490 A9 1E			lda #$1E
  3489 2492 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3490 2495 20 4D 13			jsr CALCOBSTACLEADDR
  3491 2498 B4 17			ldy :STACKORIGIN-1,x
  3492 249A B5 18			lda :STACKORIGIN,x
  3493 249C 99 2E 2B			sta adr.OBSTACLES,y
  3494 249F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3495 24A1 99 2F 2B			sta adr.OBSTACLES+1,y
  3496 24A4 CA				dex
  3497
  3498 				; optimize FAIL (1, levels.inc), line = 104
  3499
  3500 24A5 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3501 24A9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3502 24AD A9 0C			lda #$0C
  3503 24AF 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3504 24B2 A9 01			lda #$01
  3505 24B4 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3506 24B7 20 4D 13			jsr CALCOBSTACLEADDR
  3507 24BA B4 17			ldy :STACKORIGIN-1,x
  3508 24BC B5 18			lda :STACKORIGIN,x
  3509 24BE 99 2E 2B			sta adr.OBSTACLES,y
  3510 24C1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3511 24C3 99 2F 2B			sta adr.OBSTACLES+1,y
  3512 24C6 CA				dex
  3513 24C7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3514 24CB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3515 24CF A9 02			lda #$02
  3516 24D1 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3517 24D4 A9 14			lda #$14
  3518 24D6 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3519 24D9 20 4D 13			jsr CALCOBSTACLEADDR
  3520 24DC B4 17			ldy :STACKORIGIN-1,x
  3521 24DE B5 18			lda :STACKORIGIN,x
  3522 24E0 99 2E 2B			sta adr.OBSTACLES,y
  3523 24E3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3524 24E5 99 2F 2B			sta adr.OBSTACLES+1,y
  3525 24E8 CA				dex
  3526
  3527 				; optimize FAIL (1, levels.inc), line = 105
  3528
  3529 24E9 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3530 24ED A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3531 24F1 A9 16			lda #$16
  3532 24F3 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3533 24F6 A9 14			lda #$14
  3534 24F8 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3535 24FB 20 4D 13			jsr CALCOBSTACLEADDR
  3536 24FE B4 17			ldy :STACKORIGIN-1,x
  3537 2500 B5 18			lda :STACKORIGIN,x
  3538 2502 99 2E 2B			sta adr.OBSTACLES,y
  3539 2505 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3540 2507 99 2F 2B			sta adr.OBSTACLES+1,y
  3541 250A CA				dex
  3542 250B A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3543 250F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3544 2513 A9 0C			lda #$0C
  3545 2515 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3546 2518 A9 14			lda #$14
  3547 251A 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3548 251D 20 4D 13			jsr CALCOBSTACLEADDR
  3549 2520 B4 17			ldy :STACKORIGIN-1,x
  3550 2522 B5 18			lda :STACKORIGIN,x
  3551 2524 99 2E 2B			sta adr.OBSTACLES,y
  3552 2527 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3553 2529 99 2F 2B			sta adr.OBSTACLES+1,y
  3554 252C CA				dex
  3555 252D CA				dex
  3556 252E			@exit
  3557 					.ifdef @new
  3558 					lda <@VarData
  3559 					sta :ztmp
  3560 					lda >@VarData
  3561 					ldy #@VarDataSize-1
  3562 					jmp @FreeMem
  3563 					els
  3564 252E 60				rts						; ret
  3565 					eif
  3566 				.endl
  3567
  3568 252F			.local	SETLEVEL08					; PROCEDURE
  3569
  3570 				; optimize OK (levels.inc), line = 112
  3571
  3572 252F A9 01			lda #$01
  3573 2531 8D 56 2B			sta SETPLAYER.ISALIVE
  3574 2534 A9 62			lda #$62
  3575 2536 8D 55 2B			sta SETPLAYER.COLOUR
  3576 2539 A9 51			lda #$51
  3577 253B 8D 54 2B			sta SETPLAYER.HEAD
  3578 253E A9 00			lda #$00
  3579 2540 8D 53 2B			sta SETPLAYER.BRAIN
  3580 2543 A9 08			lda #$08
  3581 2545 8D 52 2B			sta SETPLAYER.DIR
  3582 2548 A9 17			lda #$17
  3583 254A 8D 51 2B			sta SETPLAYER.Y
  3584 254D A9 01			lda #$01
  3585 254F 8D 50 2B			sta SETPLAYER.X
  3586 2552 AD F2 2A			lda PLAYER1
  3587 2555 8D 4E 2B			sta SETPLAYER.P
  3588 2558 AD F3 2A			lda PLAYER1+1
  3589 255B 8D 4F 2B			sta SETPLAYER.P+1
  3590 255E 20 9F 14			jsr SETPLAYER
  3591
  3592 				; optimize OK (levels.inc), line = 113
  3593
  3594 2561 A9 01			lda #$01
  3595 2563 8D 56 2B			sta SETPLAYER.ISALIVE
  3596 2566 A9 5D			lda #$5D
  3597 2568 8D 55 2B			sta SETPLAYER.COLOUR
  3598 256B A9 51			lda #$51
  3599 256D 8D 54 2B			sta SETPLAYER.HEAD
  3600 2570 A9 03			lda #$03
  3601 2572 8D 53 2B			sta SETPLAYER.BRAIN
  3602 2575 A9 04			lda #$04
  3603 2577 8D 52 2B			sta SETPLAYER.DIR
  3604 257A A9 17			lda #$17
  3605 257C 8D 51 2B			sta SETPLAYER.Y
  3606 257F A9 26			lda #$26
  3607 2581 8D 50 2B			sta SETPLAYER.X
  3608 2584 AD F4 2A			lda PLAYER2
  3609 2587 8D 4E 2B			sta SETPLAYER.P
  3610 258A AD F5 2A			lda PLAYER2+1
  3611 258D 8D 4F 2B			sta SETPLAYER.P+1
  3612 2590 20 9F 14			jsr SETPLAYER
  3613
  3614 				; optimize OK (levels.inc), line = 114
  3615
  3616 2593 A9 01			lda #$01
  3617 2595 8D 56 2B			sta SETPLAYER.ISALIVE
  3618 2598 A9 71			lda #$71
  3619 259A 8D 55 2B			sta SETPLAYER.COLOUR
  3620 259D A9 51			lda #$51
  3621 259F 8D 54 2B			sta SETPLAYER.HEAD
  3622 25A2 A9 02			lda #$02
  3623 25A4 8D 53 2B			sta SETPLAYER.BRAIN
  3624 25A7 8D 52 2B			sta SETPLAYER.DIR
  3625 25AA A9 01			lda #$01
  3626 25AC 8D 51 2B			sta SETPLAYER.Y
  3627 25AF A9 0A			lda #$0A
  3628 25B1 8D 50 2B			sta SETPLAYER.X
  3629 25B4 AD F6 2A			lda PLAYER3
  3630 25B7 8D 4E 2B			sta SETPLAYER.P
  3631 25BA AD F7 2A			lda PLAYER3+1
  3632 25BD 8D 4F 2B			sta SETPLAYER.P+1
  3633 25C0 20 9F 14			jsr SETPLAYER
  3634
  3635 				; optimize OK (levels.inc), line = 115
  3636
  3637 25C3 A9 01			lda #$01
  3638 25C5 8D 56 2B			sta SETPLAYER.ISALIVE
  3639 25C8 A9 55			lda #$55
  3640 25CA 8D 55 2B			sta SETPLAYER.COLOUR
  3641 25CD A9 51			lda #$51
  3642 25CF 8D 54 2B			sta SETPLAYER.HEAD
  3643 25D2 A9 04			lda #$04
  3644 25D4 8D 53 2B			sta SETPLAYER.BRAIN
  3645 25D7 8D 52 2B			sta SETPLAYER.DIR
  3646 25DA A9 01			lda #$01
  3647 25DC 8D 51 2B			sta SETPLAYER.Y
  3648 25DF A9 26			lda #$26
  3649 25E1 8D 50 2B			sta SETPLAYER.X
  3650 25E4 AD F8 2A			lda PLAYER4
  3651 25E7 8D 4E 2B			sta SETPLAYER.P
  3652 25EA AD F9 2A			lda PLAYER4+1
  3653 25ED 8D 4F 2B			sta SETPLAYER.P+1
  3654 25F0 20 9F 14			jsr SETPLAYER
  3655
  3656 				; optimize FAIL (1, levels.inc), line = 117
  3657
  3658 25F3 E8				inx
  3659 25F4 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3660 25F8 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3661 25FA A9 06			lda #$06
  3662 25FC 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3663 25FF A9 0A			lda #$0A
  3664 2601 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3665 2604 20 4D 13			jsr CALCOBSTACLEADDR
  3666 2607 B4 17			ldy :STACKORIGIN-1,x
  3667 2609 B5 18			lda :STACKORIGIN,x
  3668 260B 99 2E 2B			sta adr.OBSTACLES,y
  3669 260E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3670 2610 99 2F 2B			sta adr.OBSTACLES+1,y
  3671 2613 CA				dex
  3672 2614 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3673 2618 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3674 261C A9 06			lda #$06
  3675 261E 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3676 2621 A9 1E			lda #$1E
  3677 2623 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3678 2626 20 4D 13			jsr CALCOBSTACLEADDR
  3679 2629 B4 17			ldy :STACKORIGIN-1,x
  3680 262B B5 18			lda :STACKORIGIN,x
  3681 262D 99 2E 2B			sta adr.OBSTACLES,y
  3682 2630 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3683 2632 99 2F 2B			sta adr.OBSTACLES+1,y
  3684 2635 CA				dex
  3685
  3686 				; optimize FAIL (1, levels.inc), line = 118
  3687
  3688 2636 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3689 263A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3690 263E A9 12			lda #$12
  3691 2640 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3692 2643 A9 0A			lda #$0A
  3693 2645 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3694 2648 20 4D 13			jsr CALCOBSTACLEADDR
  3695 264B B4 17			ldy :STACKORIGIN-1,x
  3696 264D B5 18			lda :STACKORIGIN,x
  3697 264F 99 2E 2B			sta adr.OBSTACLES,y
  3698 2652 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3699 2654 99 2F 2B			sta adr.OBSTACLES+1,y
  3700 2657 CA				dex
  3701 2658 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3702 265C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3703 2660 A9 12			lda #$12
  3704 2662 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3705 2665 A9 1E			lda #$1E
  3706 2667 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3707 266A 20 4D 13			jsr CALCOBSTACLEADDR
  3708 266D B4 17			ldy :STACKORIGIN-1,x
  3709 266F B5 18			lda :STACKORIGIN,x
  3710 2671 99 2E 2B			sta adr.OBSTACLES,y
  3711 2674 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3712 2676 99 2F 2B			sta adr.OBSTACLES+1,y
  3713 2679 CA				dex
  3714
  3715 				; optimize FAIL (1, levels.inc), line = 119
  3716
  3717 267A A9 08 95 18			mva #$08 :STACKORIGIN,x
  3718 267E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3719 2682 A9 0C			lda #$0C
  3720 2684 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3721 2687 A9 01			lda #$01
  3722 2689 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3723 268C 20 4D 13			jsr CALCOBSTACLEADDR
  3724 268F B4 17			ldy :STACKORIGIN-1,x
  3725 2691 B5 18			lda :STACKORIGIN,x
  3726 2693 99 2E 2B			sta adr.OBSTACLES,y
  3727 2696 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3728 2698 99 2F 2B			sta adr.OBSTACLES+1,y
  3729 269B CA				dex
  3730 269C A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3731 26A0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3732 26A4 A9 02			lda #$02
  3733 26A6 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3734 26A9 A9 14			lda #$14
  3735 26AB 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3736 26AE 20 4D 13			jsr CALCOBSTACLEADDR
  3737 26B1 B4 17			ldy :STACKORIGIN-1,x
  3738 26B3 B5 18			lda :STACKORIGIN,x
  3739 26B5 99 2E 2B			sta adr.OBSTACLES,y
  3740 26B8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3741 26BA 99 2F 2B			sta adr.OBSTACLES+1,y
  3742 26BD CA				dex
  3743
  3744 				; optimize FAIL (1, levels.inc), line = 120
  3745
  3746 26BE A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3747 26C2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3748 26C6 A9 16			lda #$16
  3749 26C8 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3750 26CB A9 14			lda #$14
  3751 26CD 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3752 26D0 20 4D 13			jsr CALCOBSTACLEADDR
  3753 26D3 B4 17			ldy :STACKORIGIN-1,x
  3754 26D5 B5 18			lda :STACKORIGIN,x
  3755 26D7 99 2E 2B			sta adr.OBSTACLES,y
  3756 26DA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3757 26DC 99 2F 2B			sta adr.OBSTACLES+1,y
  3758 26DF CA				dex
  3759 26E0 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3760 26E4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3761 26E8 A9 0C			lda #$0C
  3762 26EA 8D 4B 2B			sta CALCOBSTACLEADDR.Y
  3763 26ED A9 14			lda #$14
  3764 26EF 8D 4A 2B			sta CALCOBSTACLEADDR.X
  3765 26F2 20 4D 13			jsr CALCOBSTACLEADDR
  3766 26F5 B4 17			ldy :STACKORIGIN-1,x
  3767 26F7 B5 18			lda :STACKORIGIN,x
  3768 26F9 99 2E 2B			sta adr.OBSTACLES,y
  3769 26FC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3770 26FE 99 2F 2B			sta adr.OBSTACLES+1,y
  3771 2701 CA				dex
  3772 2702 CA				dex
  3773 2703			@exit
  3774 					.ifdef @new
  3775 					lda <@VarData
  3776 					sta :ztmp
  3777 					lda >@VarData
  3778 					ldy #@VarDataSize-1
  3779 					jmp @FreeMem
  3780 					els
  3781 2703 60				rts						; ret
  3782 					eif
  3783 				.endl
  3784
  3785 2704			.local	INITPLAYFIELD					; PROCEDURE
  3786
  3787 				; optimize OK (init.inc), line = 5
  3788
  3789 2704 A9 1F			lda #$1F
  3790 2706 8D 15 FF			sta BACKGROUND
  3791 2709 A9 00			lda #$00
  3792 270B 8D 19 FF			sta BOREDER
  3793
  3794 				; optimize OK (init.inc), line = 6
  3795
  3796 270E A9 20			lda #$20
  3797 2710 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3798 2712 A9 C0			lda #$C0
  3799 2714 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3800 2716 A9 03			lda #$03
  3801 2718 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3802 271A A9 00			lda #$00
  3803 271C 85 08			sta SYSTEM.FILLCHAR_0056.A
  3804 271E A9 0C			lda #$0C
  3805 2720 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3806 2722 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3807
  3808 				; optimize OK (init.inc), line = 8
  3809
  3810 2725 A9 27			lda #$27
  3811 2727 85 58			sta T0B
  3812
  3813 2729			l_0DC3
  3814 				; --- ForToDoCondition
  3815
  3816 				; optimize OK (init.inc), line = 9
  3817
  3818 2729 A4 58			ldy T0B
  3819 272B A9 A0			lda #$A0
  3820 272D 99 00 0C			sta $0C00,y
  3821
  3822 				; optimize OK (init.inc), line = 10
  3823
  3824 2730 99 C0 0F			sta $0FC0,y
  3825
  3826 				; optimize OK (init.inc), line = 11
  3827
  3828 2733 A9 41			lda #$41
  3829 2735 99 00 08			sta $0800,y
  3830
  3831 				; optimize OK (init.inc), line = 12
  3832
  3833 2738 99 C0 0B			sta $0BC0,y
  3834
  3835 				; --- ForToDoEpilog
  3836 273B C6 58			dec T0B
  3837 273D 10 EA			jpl l_0DC3
  3838 273F			l_0DD1
  3839
  3840 				; optimize OK (init.inc), line = 15
  3841
  3842 273F A9 18			lda #$18
  3843 2741 85 58			sta T0B
  3844
  3845 2743			l_0E03
  3846 				; --- ForToDoCondition
  3847 2743 A5 58			lda T0B
  3848 2745 C9 01			cmp #$01
  3849 2747 90 3A			jcc l_0E11
  3850
  3851 				; optimize OK (init.inc), line = 16
  3852
  3853 2749 0A				asl @
  3854 274A A8				tay
  3855 274B A9 FF			lda #$FF
  3856 274D 18 79 0E 10			add adr.MUL40,y
  3857 2751 85 12			sta :bp2
  3858 2753 A9 0B			lda #$0B
  3859 2755 79 0F 10			adc adr.MUL40+1,y
  3860 2758 85 13			sta :bp2+1
  3861 275A A0 00			ldy #$00
  3862 275C A9 A0			lda #$A0
  3863 275E 91 12			sta (:bp2),y
  3864 2760 C8				iny
  3865 2761 91 12			sta (:bp2),y
  3866
  3867 				; optimize OK (init.inc), line = 17
  3868
  3869 2763 A5 58			lda T0B
  3870 2765 0A				asl @
  3871 2766 A8				tay
  3872 2767 A9 FF			lda #$FF
  3873 2769 18 79 0E 10			add adr.MUL40,y
  3874 276D 85 12			sta :bp2
  3875 276F A9 07			lda #$07
  3876 2771 79 0F 10			adc adr.MUL40+1,y
  3877 2774 85 13			sta :bp2+1
  3878 2776 A0 00			ldy #$00
  3879 2778 A9 41			lda #$41
  3880 277A 91 12			sta (:bp2),y
  3881 277C C8				iny
  3882 277D 91 12			sta (:bp2),y
  3883
  3884 				; --- ForToDoEpilog
  3885 277F C6 58			dec T0B
  3886 2781 10 C0			jpl l_0E03
  3887 2783			l_0E11
  3888
  3889 				; optimize OK (init.inc), line = 20
  3890
  3891 2783 A9 07			lda #$07
  3892 2785 85 59			sta I0B
  3893
  3894 2787			l_0E35
  3895 				; --- ForToDoCondition
  3896 2787 A5 59			lda I0B
  3897 2789 0A				asl @
  3898 278A A8				tay
  3899 278B A9 7E			lda #$7E
  3900 278D 99 2E 2B			sta adr.OBSTACLES,y
  3901 2790 A9 00			lda #$00
  3902 2792 99 2F 2B			sta adr.OBSTACLES+1,y
  3903
  3904 				; --- ForToDoEpilog
  3905 2795 C6 59			dec I0B
  3906 2797 10 EE			jpl l_0E35
  3907 2799			l_0E43
  3908
  3909 				; ------------------------------------------------------------
  3910
  3911 = 0000			@FORTMP_0DC0	= $00
  3912 = 0001			@FORTMP_0E00	= $01
  3913 = 0000			@FORTMP_0E32	= $00
  3914 2799			@exit
  3915 					.ifdef @new
  3916 					lda <@VarData
  3917 					sta :ztmp
  3918 					lda >@VarData
  3919 					ldy #@VarDataSize-1
  3920 					jmp @FreeMem
  3921 					els
  3922 2799 60				rts						; ret
  3923 					eif
  3924 				.endl
  3925
  3926 279A			.local	INITPLAYERS					; PROCEDURE
  3927
  3928 				; optimize OK (init.inc), line = 27
  3929
  3930 279A A9 FF			lda #$FF
  3931 279C 85 5A			sta ALIVE
  3932
  3933 				; optimize OK (init.inc), line = 28
  3934
  3935 279E A9 00			lda #$00
  3936 27A0 8D 15 2B			sta PLAYER1.ISALIVE
  3937 27A3 8D 1D 2B			sta PLAYER2.ISALIVE
  3938
  3939 				; optimize OK (init.inc), line = 29
  3940
  3941 27A6 8D 25 2B			sta PLAYER3.ISALIVE
  3942 27A9 8D 2D 2B			sta PLAYER4.ISALIVE
  3943 27AC			@exit
  3944 					.ifdef @new
  3945 					lda <@VarData
  3946 					sta :ztmp
  3947 					lda >@VarData
  3948 					ldy #@VarDataSize-1
  3949 					jmp @FreeMem
  3950 					els
  3951 27AC 60				rts						; ret
  3952 					eif
  3953 				.endl
  3954
  3955 27AD			.local	INITSCORE					; PROCEDURE
  3956
  3957 				; optimize OK (init.inc), line = 36
  3958
  3959 27AD A9 30			lda #$30
  3960 27AF 8D 14 2B			sta PLAYER1.SCORE
  3961 27B2 8D 1C 2B			sta PLAYER2.SCORE
  3962
  3963 				; optimize OK (init.inc), line = 37
  3964
  3965 27B5 8D 24 2B			sta PLAYER3.SCORE
  3966 27B8 8D 2C 2B			sta PLAYER4.SCORE
  3967 27BB			@exit
  3968 					.ifdef @new
  3969 					lda <@VarData
  3970 					sta :ztmp
  3971 					lda >@VarData
  3972 					ldy #@VarDataSize-1
  3973 					jmp @FreeMem
  3974 					els
  3975 27BB 60				rts						; ret
  3976 					eif
  3977 				.endl
  3978
  3979 27BC			.local	INITARENA					; PROCEDURE
  3980
  3981 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  3982
  3983 27BC 20 04 27			jsr INITPLAYFIELD
  3984 27BF 20 9A 27			jsr INITPLAYERS
  3985
  3986 				; optimize OK (init.inc), line = 46
  3987
  3988 27C2 AD 0C 2B			lda LEVEL
  3989 27C5 8D 60 2B			sta @CASETMP_0006
  3990 27C8 C9 00			cmp #$00
  3991 27CA D0 06			jne l_0E8C
  3992 27CC			@
  3993
  3994 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  3995
  3996 27CC 20 71 19			jsr SETLEVEL00
  3997 27CF 4C 1F 28			jmp a_0006
  3998 27D2			l_0E8C
  3999 27D2 C9 01			cmp #$01
  4000 27D4 D0 06			jne l_0E96
  4001 27D6			@
  4002
  4003 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4004
  4005 27D6 20 A2 1A			jsr SETLEVEL01
  4006 27D9 4C 1F 28			jmp a_0006
  4007 27DC			l_0E96
  4008 27DC C9 02			cmp #$02
  4009 27DE D0 06			jne l_0EA0
  4010 27E0			@
  4011
  4012 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4013
  4014 27E0 20 D3 1B			jsr SETLEVEL02
  4015 27E3 4C 1F 28			jmp a_0006
  4016 27E6			l_0EA0
  4017 27E6 C9 03			cmp #$03
  4018 27E8 D0 06			jne l_0EAA
  4019 27EA			@
  4020
  4021 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4022
  4023 27EA 20 04 1D			jsr SETLEVEL03
  4024 27ED 4C 1F 28			jmp a_0006
  4025 27F0			l_0EAA
  4026 27F0 C9 04			cmp #$04
  4027 27F2 D0 06			jne l_0EB4
  4028 27F4			@
  4029
  4030 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4031
  4032 27F4 20 57 1E			jsr SETLEVEL04
  4033 27F7 4C 1F 28			jmp a_0006
  4034 27FA			l_0EB4
  4035 27FA C9 05			cmp #$05
  4036 27FC D0 06			jne l_0EBE
  4037 27FE			@
  4038
  4039 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4040
  4041 27FE 20 CC 1F			jsr SETLEVEL05
  4042 2801 4C 1F 28			jmp a_0006
  4043 2804			l_0EBE
  4044 2804 C9 06			cmp #$06
  4045 2806 D0 06			jne l_0EC8
  4046 2808			@
  4047
  4048 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4049
  4050 2808 20 81 21			jsr SETLEVEL06
  4051 280B 4C 1F 28			jmp a_0006
  4052 280E			l_0EC8
  4053 280E C9 07			cmp #$07
  4054 2810 D0 06			jne l_0ED2
  4055 2812			@
  4056
  4057 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4058
  4059 2812 20 56 23			jsr SETLEVEL07
  4060 2815 4C 1F 28			jmp a_0006
  4061 2818			l_0ED2
  4062 2818 C9 08			cmp #$08
  4063 281A D0 03			jne l_0EDC
  4064 281C			@
  4065
  4066 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4067
  4068 281C 20 2F 25			jsr SETLEVEL08
  4069 281F			l_0EDC
  4070 281F			a_0006
  4071
  4072 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4073
  4074 281F 20 70 13			jsr SAVEOBSTACLES
  4075 2822 20 18 13			jsr ANIMATEOBSTACLES
  4076 2825 20 E9 11			jsr SHOWSCORE
  4077
  4078 				; ------------------------------------------------------------
  4079
  4080 = 2B60			@CASETMP_0006	= DATAORIGIN+$0064
  4081
  4082 = 2B60			@VarData	= @CASETMP_0006
  4083 = 0001			@VarDataSize	= 1
  4084
  4085 2828			@exit
  4086 					.ifdef @new
  4087 					lda <@VarData
  4088 					sta :ztmp
  4089 					lda >@VarData
  4090 					ldy #@VarDataSize-1
  4091 					jmp @FreeMem
  4092 					els
  4093 2828 60				rts						; ret
  4094 					eif
  4095 				.endl
  4096
  4097 2829			.local	HUMAN						; PROCEDURE
  4098
  4099 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  4100
  4101 2829 20 8D 14			jsr CHECKJOYSTATUS
  4102 282C AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4103 2836 A0 04			ldy #PLY.DIR-DATAORIGIN
  4104 2838 B1 12			lda (:bp2),y
  4105 283A 85 5B			sta NEWDIR
  4106
  4107 				; optimize OK (main.pas), line = 16
  4108
  4109 283C A5 63			lda JOYSTATUS
  4110 283E 8D 61 2B			sta @CASETMP_0007
  4111 2841 C9 01			cmp #$01
  4112 2843 D0 19			jne l_0F03
  4113 2845			@
  4114
  4115 				; optimize OK (main.pas), line = 17
  4116
  4117 2845 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4118 284F A0 04			ldy #PLY.DIR-DATAORIGIN
  4119 2851 B1 12			lda (:bp2),y
  4120 2853 C9 02			cmp #$02
  4121 2855 F0 04			jeq l_0F15
  4122 2857 A9 01			lda #$01
  4123 2859 85 5B			sta NEWDIR
  4124 285B			l_0F15
  4125
  4126 285B 4C B2 28			jmp a_0007
  4127 285E			l_0F03
  4128 285E C9 02			cmp #$02
  4129 2860 D0 19			jne l_0F25
  4130 2862			@
  4131
  4132 				; optimize OK (main.pas), line = 18
  4133
  4134 2862 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4135 286C A0 04			ldy #PLY.DIR-DATAORIGIN
  4136 286E B1 12			lda (:bp2),y
  4137 2870 C9 01			cmp #$01
  4138 2872 F0 04			jeq l_0F37
  4139 2874 A9 02			lda #$02
  4140 2876 85 5B			sta NEWDIR
  4141 2878			l_0F37
  4142
  4143 2878 4C B2 28			jmp a_0007
  4144 287B			l_0F25
  4145 287B C9 04			cmp #$04
  4146 287D D0 19			jne l_0F47
  4147 287F			@
  4148
  4149 				; optimize OK (main.pas), line = 19
  4150
  4151 287F AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4152 2889 A0 04			ldy #PLY.DIR-DATAORIGIN
  4153 288B B1 12			lda (:bp2),y
  4154 288D C9 08			cmp #$08
  4155 288F F0 04			jeq l_0F59
  4156 2891 A9 04			lda #$04
  4157 2893 85 5B			sta NEWDIR
  4158 2895			l_0F59
  4159
  4160 2895 4C B2 28			jmp a_0007
  4161 2898			l_0F47
  4162 2898 C9 08			cmp #$08
  4163 289A D0 16			jne l_0F69
  4164 289C			@
  4165
  4166 				; optimize OK (main.pas), line = 20
  4167
  4168 289C AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4169 28A6 A0 04			ldy #PLY.DIR-DATAORIGIN
  4170 28A8 B1 12			lda (:bp2),y
  4171 28AA C9 04			cmp #$04
  4172 28AC F0 04			jeq l_0F7B
  4173 28AE A9 08			lda #$08
  4174 28B0 85 5B			sta NEWDIR
  4175 28B2			l_0F7B
  4176
  4177 28B2			l_0F69
  4178 28B2			a_0007
  4179
  4180 				; optimize OK (main.pas), line = 23
  4181
  4182 28B2 A5 5B			lda NEWDIR
  4183 28B4 25 5C			and AVAILDIR
  4184 28B6 D0 18			jne l_0FA2
  4185
  4186 				; optimize OK (main.pas), line = 24
  4187
  4188 28B8 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4189 28C2 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4190 28C4 A9 00			lda #$00
  4191 28C6 91 12			sta (:bp2),y
  4192 28C8 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4193 28CA A9 2A			lda #$2A
  4194 28CC 91 12			sta (:bp2),y
  4195 28CE C6 5A			dec ALIVE
  4196 28D0			l_0FA2
  4197
  4198 				; ------------------------------------------------------------
  4199
  4200 = 2B61			@CASETMP_0007	= DATAORIGIN+$0065
  4201
  4202 = 2B61			@VarData	= @CASETMP_0007
  4203 = 0001			@VarDataSize	= 1
  4204
  4205 28D0			@exit
  4206 					.ifdef @new
  4207 					lda <@VarData
  4208 					sta :ztmp
  4209 					lda >@VarData
  4210 					ldy #@VarDataSize-1
  4211 					jmp @FreeMem
  4212 					els
  4213 28D0 60				rts						; ret
  4214 					eif
  4215 				.endl
  4216
  4217 28D1			.local	PLAYERMOVE					; PROCEDURE
  4218
  4219 				; optimize OK (main.pas), line = 32
  4220
  4221 28D1 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4222 28DB A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4223 28DD B1 12			lda (:bp2),y
  4224 28DF D0 03 4C 06 2A		jeq l_0FC1
  4225
  4226 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4227
  4228 28E4 20 83 12			jsr CHECKAVAILDIR
  4229
  4230 				; optimize OK (main.pas), line = 35
  4231
  4232 28E7 A5 5C			lda AVAILDIR
  4233 28E9 D0 35			jne l_0FD5
  4234
  4235 				; optimize OK (main.pas), line = 36
  4236
  4237 28EB AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4238 28F5 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4239 28F7 A9 00			lda #$00
  4240 28F9 91 12			sta (:bp2),y
  4241 28FB C6 5A			dec ALIVE
  4242
  4243 				; optimize OK (main.pas), line = 37
  4244
  4245 28FD A0 00			ldy #PLY.X-DATAORIGIN
  4246 28FF B1 12			lda (:bp2),y
  4247 2901 8D 41 2B			sta PUTCHAR_008E.X
  4248 2904 A0 01			ldy #PLY.Y-DATAORIGIN
  4249 2906 B1 12			lda (:bp2),y
  4250 2908 8D 42 2B			sta PUTCHAR_008E.Y
  4251 290B A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4252 290D B1 12			lda (:bp2),y
  4253 290F 18 69 80			add #$80
  4254 2912 8D 44 2B			sta PUTCHAR_008E.C
  4255 2915 A9 57			lda #$57
  4256 2917 8D 43 2B			sta PUTCHAR_008E.V
  4257 291A 20 99 11			jsr PUTCHAR_008E
  4258 291D 4C 06 2A			jmp l_0FF6
  4259 2920			l_0FD5
  4260
  4261 				; optimize OK (main.pas), line = 40
  4262
  4263 2920 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4264 292A A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4265 292C B1 12			lda (:bp2),y
  4266 292E 8D 62 2B			sta @CASETMP_0008
  4267 2931 C9 00			cmp #$00
  4268 2933 D0 06			jne l_1001
  4269 2935			@
  4270
  4271 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4272
  4273 2935 20 29 28			jsr HUMAN
  4274 2938 4C 60 29			jmp a_0008
  4275 293B			l_1001
  4276 293B C9 01			cmp #$01
  4277 293D D0 06			jne l_100B
  4278 293F			@
  4279
  4280 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4281
  4282 293F 20 6F 15			jsr AISTRAIGHT
  4283 2942 4C 60 29			jmp a_0008
  4284 2945			l_100B
  4285 2945 C9 02			cmp #$02
  4286 2947 D0 06			jne l_1015
  4287 2949			@
  4288
  4289 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4290
  4291 2949 20 F4 15			jsr AISAPPER
  4292 294C 4C 60 29			jmp a_0008
  4293 294F			l_1015
  4294 294F C9 03			cmp #$03
  4295 2951 D0 06			jne l_101F
  4296 2953			@
  4297
  4298 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4299
  4300 2953 20 4E 18			jsr AIBULLY
  4301 2956 4C 60 29			jmp a_0008
  4302 2959			l_101F
  4303 2959 C9 04			cmp #$04
  4304 295B D0 03			jne l_1029
  4305 295D			@
  4306
  4307 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4308
  4309 295D 20 1C 19			jsr AIMIRROR
  4310 2960			l_1029
  4311 2960			a_0008
  4312
  4313 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4314
  4315 2960 20 B4 13			jsr DRAWTAIL
  4316 2963 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4317 296D A0 04			ldy #PLY.DIR-DATAORIGIN
  4318 296F A5 5B			lda NEWDIR
  4319 2971 91 12			sta (:bp2),y
  4320
  4321 				; optimize OK (main.pas), line = 50
  4322
  4323 2973 A5 5B			lda NEWDIR
  4324 2975 8D 63 2B			sta @CASETMP_0009
  4325 2978 C9 01			cmp #$01
  4326 297A D0 16			jne l_1045
  4327 297C			@
  4328
  4329 				; optimize OK (main.pas), line = 51
  4330
  4331 297C AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4332 2986 A0 01			ldy #PLY.Y-DATAORIGIN
  4333 2988 B1 12			lda (:bp2),y
  4334 298A 38 E9 01			sub #$01
  4335 298D 91 12			sta (:bp2),y
  4336
  4337 298F 4C DD 29			jmp a_0009
  4338 2992			l_1045
  4339 2992 C9 02			cmp #$02
  4340 2994 D0 16			jne l_104F
  4341 2996			@
  4342
  4343 				; optimize OK (main.pas), line = 52
  4344
  4345 2996 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4346 29A0 A0 01			ldy #PLY.Y-DATAORIGIN
  4347 29A2 B1 12			lda (:bp2),y
  4348 29A4 18 69 01			add #$01
  4349 29A7 91 12			sta (:bp2),y
  4350
  4351 29A9 4C DD 29			jmp a_0009
  4352 29AC			l_104F
  4353 29AC C9 04			cmp #$04
  4354 29AE D0 16			jne l_1059
  4355 29B0			@
  4356
  4357 				; optimize OK (main.pas), line = 53
  4358
  4359 29B0 AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4360 29BA A0 00			ldy #PLY.X-DATAORIGIN
  4361 29BC B1 12			lda (:bp2),y
  4362 29BE 38 E9 01			sub #$01
  4363 29C1 91 12			sta (:bp2),y
  4364
  4365 29C3 4C DD 29			jmp a_0009
  4366 29C6			l_1059
  4367 29C6 C9 08			cmp #$08
  4368 29C8 D0 13			jne l_1063
  4369 29CA			@
  4370
  4371 				; optimize OK (main.pas), line = 54
  4372
  4373 29CA AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4374 29D4 A0 00			ldy #PLY.X-DATAORIGIN
  4375 29D6 B1 12			lda (:bp2),y
  4376 29D8 18 69 01			add #$01
  4377 29DB 91 12			sta (:bp2),y
  4378
  4379 29DD			l_1063
  4380 29DD			a_0009
  4381
  4382 				; optimize OK (main.pas), line = 57
  4383
  4384 29DD AC EE 2A 84 12 AC + 	mwy PLY :bp2
  4385 29E7 A0 00			ldy #PLY.X-DATAORIGIN
  4386 29E9 B1 12			lda (:bp2),y
  4387 29EB 8D 41 2B			sta PUTCHAR_008E.X
  4388 29EE A0 01			ldy #PLY.Y-DATAORIGIN
  4389 29F0 B1 12			lda (:bp2),y
  4390 29F2 8D 42 2B			sta PUTCHAR_008E.Y
  4391 29F5 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4392 29F7 B1 12			lda (:bp2),y
  4393 29F9 8D 43 2B			sta PUTCHAR_008E.V
  4394 29FC A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4395 29FE B1 12			lda (:bp2),y
  4396 2A00 8D 44 2B			sta PUTCHAR_008E.C
  4397 2A03 20 99 11			jsr PUTCHAR_008E
  4398 2A06			l_0FF6
  4399 2A06			l_0FC1
  4400
  4401 				; ------------------------------------------------------------
  4402
  4403 = 2B62			@CASETMP_0008	= DATAORIGIN+$0066
  4404 = 2B63			@CASETMP_0009	= DATAORIGIN+$0067
  4405
  4406 = 2B62			@VarData	= @CASETMP_0008
  4407 = 0002			@VarDataSize	= 2
  4408
  4409 2A06			@exit
  4410 					.ifdef @new
  4411 					lda <@VarData
  4412 					sta :ztmp
  4413 					lda >@VarData
  4414 					ldy #@VarDataSize-1
  4415 					jmp @FreeMem
  4416 					els
  4417 2A06 60				rts						; ret
  4418 					eif
  4419 				.endl
  4420
  4421 2A07			.local	STARTSCREEN					; PROCEDURE
  4422
  4423 				; optimize OK (main.pas), line = 68
  4424
  4425 2A07 AD 11 2B			lda PLAYER1.COLOUR
  4426 2A0A 18 69 80			add #$80
  4427 2A0D 8D 44 2B			sta PUTCHAR_008E.C
  4428 2A10 AD 10 2B			lda PLAYER1.HEAD
  4429 2A13 8D 43 2B			sta PUTCHAR_008E.V
  4430 2A16 AD 0F 2B			lda PLAYER1.Y
  4431 2A19 8D 42 2B			sta PUTCHAR_008E.Y
  4432 2A1C AD 0E 2B			lda PLAYER1.X
  4433 2A1F 8D 41 2B			sta PUTCHAR_008E.X
  4434 2A22 20 99 11			jsr PUTCHAR_008E
  4435
  4436 				; --- RepeatUntilProlog
  4437 2A25			l_1091
  4438
  4439 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4440
  4441 2A25 20 8D 14			jsr CHECKJOYSTATUS
  4442 2A28 A5 63			lda JOYSTATUS
  4443 2A2A C9 40			cmp #$40
  4444 2A2C D0 F7			jne l_1091
  4445
  4446 				; optimize OK (main.pas), line = 70
  4447
  4448 2A2E AD 11 2B			lda PLAYER1.COLOUR
  4449 2A31 8D 44 2B			sta PUTCHAR_008E.C
  4450 2A34 AD 10 2B			lda PLAYER1.HEAD
  4451 2A37 8D 43 2B			sta PUTCHAR_008E.V
  4452 2A3A AD 0F 2B			lda PLAYER1.Y
  4453 2A3D 8D 42 2B			sta PUTCHAR_008E.Y
  4454 2A40 AD 0E 2B			lda PLAYER1.X
  4455 2A43 8D 41 2B			sta PUTCHAR_008E.X
  4456 2A46 20 99 11			jsr PUTCHAR_008E
  4457 2A49			@exit
  4458 					.ifdef @new
  4459 					lda <@VarData
  4460 					sta :ztmp
  4461 					lda >@VarData
  4462 					ldy #@VarDataSize-1
  4463 					jmp @FreeMem
  4464 					els
  4465 2A49 60				rts						; ret
  4466 					eif
  4467 				.endl
  4468
  4469 2A4A			.local	MAINLOOP					; PROCEDURE
  4470
  4471 				; optimize FAIL ('INITARENA', main.pas), line = 77
  4472
  4473 2A4A 20 BC 27			jsr INITARENA
  4474 2A4D 20 07 2A			jsr STARTSCREEN
  4475
  4476 				; --- RepeatUntilProlog
  4477 2A50			l_10B3
  4478
  4479 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 80
  4480
  4481 2A50 20 23 11			jsr SYSTEM.PAUSE_006B
  4482 2A53 AD F2 2A			lda PLAYER1
  4483 2A56 8D EE 2A			sta PLY
  4484 2A59 AD F3 2A			lda PLAYER1+1
  4485 2A5C 8D EF 2A			sta PLY+1
  4486 2A5F 20 D1 28			jsr PLAYERMOVE
  4487
  4488 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 82
  4489
  4490 2A62 20 18 13			jsr ANIMATEOBSTACLES
  4491
  4492 				; optimize OK (main.pas), line = 84
  4493
  4494 2A65 A9 02			lda #$02
  4495 2A67 8D 08 2B			sta SYSTEM.PAUSE_006C.N
  4496 2A6A A9 00			lda #$00
  4497 2A6C 8D 09 2B			sta SYSTEM.PAUSE_006C.N+1
  4498 2A6F 20 2A 11			jsr SYSTEM.PAUSE_006C
  4499
  4500 				; optimize OK (main.pas), line = 85
  4501
  4502 2A72 AD F4 2A			lda PLAYER2
  4503 2A75 8D EE 2A			sta PLY
  4504 2A78 AD F5 2A			lda PLAYER2+1
  4505 2A7B 8D EF 2A			sta PLY+1
  4506 2A7E 20 D1 28			jsr PLAYERMOVE
  4507
  4508 				; optimize OK (main.pas), line = 86
  4509
  4510 2A81 AD F6 2A			lda PLAYER3
  4511 2A84 8D EE 2A			sta PLY
  4512 2A87 AD F7 2A			lda PLAYER3+1
  4513 2A8A 8D EF 2A			sta PLY+1
  4514 2A8D 20 D1 28			jsr PLAYERMOVE
  4515
  4516 				; optimize OK (main.pas), line = 87
  4517
  4518 2A90 AD F8 2A			lda PLAYER4
  4519 2A93 8D EE 2A			sta PLY
  4520 2A96 AD F9 2A			lda PLAYER4+1
  4521 2A99 8D EF 2A			sta PLY+1
  4522 2A9C 20 D1 28			jsr PLAYERMOVE
  4523
  4524 				; optimize FAIL ('ISONELEFT', main.pas), line = 88
  4525
  4526 2A9F 20 50 15			jsr ISONELEFT
  4527 2AA2 CA				dex
  4528 2AA3 B5 19			lda :STACKORIGIN+1,x
  4529 2AA5 F0 A9			jeq l_10B3
  4530
  4531 				; optimize FAIL ('UPDATESCORE', main.pas), line = 90
  4532
  4533 2AA7 20 62 12			jsr UPDATESCORE
  4534 2AAA A9 64			lda #$64
  4535 2AAC 8D 08 2B			sta SYSTEM.PAUSE_006C.N
  4536 2AAF A9 00			lda #$00
  4537 2AB1 8D 09 2B			sta SYSTEM.PAUSE_006C.N+1
  4538 2AB4 20 2A 11			jsr SYSTEM.PAUSE_006C
  4539 2AB7 20 03 15			jsr NEXTLEVEL
  4540 2ABA			@exit
  4541 					.ifdef @new
  4542 					lda <@VarData
  4543 					sta :ztmp
  4544 					lda >@VarData
  4545 					ldy #@VarDataSize-1
  4546 					jmp @FreeMem
  4547 					els
  4548 2ABA 60				rts						; ret
  4549 					eif
  4550 				.endl
  4551 2ABB			l_0007
  4552
  4553 				; --- RepeatUntilProlog
  4554 2ABB			l_10DA
  4555
  4556 				; optimize FAIL ('INITSCORE', main.pas), line = 97
  4557
  4558 2ABB 20 AD 27			jsr INITSCORE
  4559 2ABE A9 00			lda #$00
  4560 2AC0 8D 0D 2B			sta GAMEOVER
  4561 2AC3 A9 01			lda #$01
  4562 2AC5 8D 0C 2B			sta LEVEL
  4563
  4564 				; --- RepeatUntilProlog
  4565 2AC8			l_10E4
  4566
  4567 				; optimize FAIL ('MAINLOOP', main.pas), line = 99
  4568
  4569 2AC8 20 4A 2A			jsr MAINLOOP
  4570 2ACB 20 13 15			jsr ISGAMEOVER
  4571 2ACE CA				dex
  4572 2ACF B5 19			lda :STACKORIGIN+1,x
  4573 2AD1 F0 F5			jeq l_10E4
  4574
  4575 				; optimize FAIL ('SHOWSCORE', main.pas), line = 100
  4576
  4577 2AD3 20 E9 11			jsr SHOWSCORE
  4578
  4579 				; optimize OK (main.pas), line = 102
  4580
  4581 2AD6 A9 C8			lda #$C8
  4582 2AD8 8D 08 2B			sta SYSTEM.PAUSE_006C.N
  4583 2ADB A9 00			lda #$00
  4584 2ADD 8D 09 2B			sta SYSTEM.PAUSE_006C.N+1
  4585 2AE0 20 2A 11			jsr SYSTEM.PAUSE_006C
  4586
  4587 				; optimize OK (main.pas), line = 103
  4588
  4589 2AE3 4C BB 2A			jmp l_10DA
  4590
  4591 				; ------------------------------------------------------------
  4592
  4593 = 0800			ATTRIBUTE_ADDR	= $0800
  4594 = 0C00			SCREEN_ADDR	= $0C00
  4595 = 001F			BACKGROUND_COLOUR	= $1F
  4596 = 0000			BOREDER_COLOUR	= $00
  4597 = 0009			VICTORIES	= $09
  4598 = 0005			LOOK_AHEAD	= $05
  4599 = 007E			TRASH	= $7E
  4600 = 0020			EMPTY	= $20
  4601 = 00A0			WALL	= $A0
  4602 = 0041			WALL_COLOUR	= $41
  4603 = 0030			ZERO	= $30
  4604 = 0056			OBSTACLE_1	= $56
  4605 = 005B			OBSTACLE_2	= $5B
  4606 = 0035			OBST_COLOUR	= $35
  4607 = 0007			OBST_QUANTITY	= $07
  4608 = 0051			PLY_HEAD	= $51
  4609 = 002A			PLY_CRASH	= $2A
  4610 = 0057			PLY_BUSTED	= $57
  4611 = 0042			PLY_TAIL_UD	= $42
  4612 = 0040			PLY_TAIL_LR	= $40
  4613 = 007D			PLY_TAIL_RD	= $7D
  4614 = 006E			PLY_TAIL_RU	= $6E
  4615 = 006D			PLY_TAIL_LD	= $6D
  4616 = 0070			PLY_TAIL_LU	= $70
  4617 = 0062			PLY1_COLOUR	= $62
  4618 = 005D			PLY2_COLOUR	= $5D
  4619 = 0071			PLY3_COLOUR	= $71
  4620 = 0055			PLY4_COLOUR	= $55
  4621 = 0000			PLY_CTRL	= $00
  4622 = 0001			AI_STRAIGHT	= $01
  4623 = 0002			AI_SAPPER	= $02
  4624 = 0003			AI_BULLY	= $03
  4625 = 0004			AI_MIRROR	= $04
  4626 = 0001			JOY_UP	= $01
  4627 = 0002			JOY_DOWN	= $02
  4628 = 0004			JOY_LEFT	= $04
  4629 = 0008			JOY_RIGHT	= $08
  4630 = 0040			JOY_FIRE	= $40
  4631 = 0002			JOY_SELECT_1	= $02
  4632 = 0004			JOY_SELECT_2	= $04
  4633 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4634 2AE6			.var MUL40	= adr.MUL40 .word
  4635 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4636 2AE6			.var DIRECTION	= adr.DIRECTION .word
  4637 = FD30			KEYSCAN	= $FD30
  4638 = FF08			JOY	= $FF08
  4639 = FF15			BACKGROUND	= $FF15
  4640 = FF19			BOREDER	= $FF19
  4641 = 0058			T0B	= $58
  4642 = 0059			I0B	= $59
  4643 = 005A			ALIVE	= $5A
  4644 = 005B			NEWDIR	= $5B
  4645 = 005C			AVAILDIR	= $5C
  4646 = 005D			T0W	= $5D
  4647 = 005F			adr.PLY	= $5F
  4648 2AE6			.var PLY	= adr.PLY .word
  4649 = 2AFC			PLY.X	= DATAORIGIN+$0000
  4650 = 2AFD			PLY.Y	= DATAORIGIN+$0001
  4651 = 2AFE			PLY.HEAD	= DATAORIGIN+$0002
  4652 = 2AFF			PLY.COLOUR	= DATAORIGIN+$0003
  4653 = 2B00			PLY.DIR	= DATAORIGIN+$0004
  4654 = 2B01			PLY.BRAIN	= DATAORIGIN+$0005
  4655 = 2B02			PLY.SCORE	= DATAORIGIN+$0006
  4656 = 2B03			PLY.ISALIVE	= DATAORIGIN+$0007
  4657 = 0061			adr.TMPPLY	= $61
  4658 2AE6			.var TMPPLY	= adr.TMPPLY .word
  4659 = 2AFC			TMPPLY.X	= DATAORIGIN+$0000
  4660 = 2AFD			TMPPLY.Y	= DATAORIGIN+$0001
  4661 = 2AFE			TMPPLY.HEAD	= DATAORIGIN+$0002
  4662 = 2AFF			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4663 = 2B00			TMPPLY.DIR	= DATAORIGIN+$0004
  4664 = 2B01			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4665 = 2B02			TMPPLY.SCORE	= DATAORIGIN+$0006
  4666 = 2B03			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4667 = 0063			JOYSTATUS	= $63
  4668 = 2B0C			LEVEL	= DATAORIGIN+$0010
  4669 = 2B0D			GAMEOVER	= DATAORIGIN+$0011
  4670 = 2B0E			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4671 2AE6			.var PLAYER1	= adr.PLAYER1 .word
  4672 = 2B0E			PLAYER1.X	= DATAORIGIN+$0012
  4673 = 2B0F			PLAYER1.Y	= DATAORIGIN+$0013
  4674 = 2B10			PLAYER1.HEAD	= DATAORIGIN+$0014
  4675 = 2B11			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4676 = 2B12			PLAYER1.DIR	= DATAORIGIN+$0016
  4677 = 2B13			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4678 = 2B14			PLAYER1.SCORE	= DATAORIGIN+$0018
  4679 = 2B15			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4680 = 2B16			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4681 2AE6			.var PLAYER2	= adr.PLAYER2 .word
  4682 = 2B16			PLAYER2.X	= DATAORIGIN+$001A
  4683 = 2B17			PLAYER2.Y	= DATAORIGIN+$001B
  4684 = 2B18			PLAYER2.HEAD	= DATAORIGIN+$001C
  4685 = 2B19			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4686 = 2B1A			PLAYER2.DIR	= DATAORIGIN+$001E
  4687 = 2B1B			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4688 = 2B1C			PLAYER2.SCORE	= DATAORIGIN+$0020
  4689 = 2B1D			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4690 = 2B1E			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4691 2AE6			.var PLAYER3	= adr.PLAYER3 .word
  4692 = 2B1E			PLAYER3.X	= DATAORIGIN+$0022
  4693 = 2B1F			PLAYER3.Y	= DATAORIGIN+$0023
  4694 = 2B20			PLAYER3.HEAD	= DATAORIGIN+$0024
  4695 = 2B21			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4696 = 2B22			PLAYER3.DIR	= DATAORIGIN+$0026
  4697 = 2B23			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4698 = 2B24			PLAYER3.SCORE	= DATAORIGIN+$0028
  4699 = 2B25			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4700 = 2B26			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4701 2AE6			.var PLAYER4	= adr.PLAYER4 .word
  4702 = 2B26			PLAYER4.X	= DATAORIGIN+$002A
  4703 = 2B27			PLAYER4.Y	= DATAORIGIN+$002B
  4704 = 2B28			PLAYER4.HEAD	= DATAORIGIN+$002C
  4705 = 2B29			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4706 = 2B2A			PLAYER4.DIR	= DATAORIGIN+$002E
  4707 = 2B2B			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4708 = 2B2C			PLAYER4.SCORE	= DATAORIGIN+$0030
  4709 = 2B2D			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4710 = 2B2E			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4711 2AE6			.var OBSTACLES	= adr.OBSTACLES .word
  4712 2AE6			@exit
  4713
  4714 2AE6 A2 00		@halt	ldx #$00
  4715 2AE8 9A				txs
  4716
  4717 2AE9 60				rts
  4718
  4719 				; ------------------------------------------------------------
  4720
  4721 				; ------------------------------------------------------------
  4722
  4723 2AEA			.local	@DEFINES
  4724 2AEA			C4P
  4725 				.endl
  4726
  4727 2AEA			.local	@RESOURCE
  4728 				.endl
  4729
  4730 = 2AEA 0E 10		MUL40
  4730 = 2AEC 40 10		DIRECTION
  4730 = 2AEE 5F 00		PLY
  4730 = 2AF0 61 00		TMPPLY
  4730 = 2AF2 0E 2B		PLAYER1
  4730 = 2AF4 16 2B		PLAYER2
  4730 = 2AF6 1E 2B		PLAYER3
  4730 = 2AF8 26 2B		PLAYER4
  4730 = 2AFA 2E 2B		OBSTACLES
  4730 				.endl							; MAIN
  4731
  4732 				; ------------------------------------------------------------
  4733 				; ------------------------------------------------------------
  4734
  4735 				.macro	UNITINITIALIZATION
  4736 				
  4737 					.ifdef MAIN.SYSTEM.@UnitInit
  4738 					jsr MAIN.SYSTEM.@UnitInit
  4739 					eif
  4740 				.endm
  4741
  4742 				; ------------------------------------------------------------
  4743
  4744 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4745 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4745 				SYSTEM: $10D5..$1177
  4746 					eif
  4747
  4748 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4748 				CODE: $100E..$2AE9
  4749
  4750 				; ------------------------------------------------------------
  4751
  4752 2AFC				.align $04
  4753
  4754 2AFC			DATAORIGIN
  4755 2AFC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4756
  4757 = 0006			VARINITSIZE	= *-DATAORIGIN
  4758 = 0068			VARDATASIZE	= 104
  4759
  4760 = 2B64			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4761
  4762 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4762 				DATA: $2AFC..$2B64
  4763
  4764 				; ------------------------------------------------------------
  4765
  4766 				.macro	STATICDATA
  4767 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4768 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4769 				.by  $C0 $03 $01 $02 $04 $08
  4770 				.endm
  4771
  4772 					end
