mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 74 17			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0041			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 178A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BF			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D CB 16 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 CB 85 02 A9 17 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 19 16			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 8F 17		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 8F 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 178F			RESULT	= DATAORIGIN+$000B
   182
   183 = 178F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 90 17		loop  lda n
   307 1126 0D 91 17		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 90 17 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1790			N	= DATAORIGIN+$000C
   321
   322 = 1790			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 92 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 92 17		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 93 17		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 93 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1792			RANGE	= DATAORIGIN+$000E
   383 = 1793			RESULT	= DATAORIGIN+$000F
   384
   385 = 1792			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1784			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1786			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1788			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1789			FILEMODE	= DATAORIGIN+$0005
   450 = 178A			GRAPHMODE	= DATAORIGIN+$0006
   451 = 178B			IORESULT	= DATAORIGIN+$0007
   452 = 178C			EOLN	= DATAORIGIN+$0008
   453 = 178D			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 3
   460
   461 1171 AD B6 17			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D B5 17			add X
   466 117D 85 5B			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5C			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 4
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5B			ldy T0W
   475 118A AD B8 17			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5C			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD B7 17			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 17B5			X	= DATAORIGIN+$0031
   486 = 17B6			Y	= DATAORIGIN+$0032
   487 = 17B7			V	= DATAORIGIN+$0033
   488 = 17B8			C	= DATAORIGIN+$0034
   489
   490 = 17B5			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	CHECKAVAILDIR					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 9
   508
   509 119C A9 00			lda #$00
   510 119E 8D 95 17			sta AVAILDIR
   511
   512 				; optimize OK (tools.inc), line = 10
   513
   514 11A1 AD BA 17			lda Y
   515 11A4 0A				asl @
   516 11A5 A8				tay
   517 11A6 B9 0E 10			lda adr.MUL40,y
   518 11A9 18 6D B9 17			add X
   519 11AD 85 5B			sta T0W
   520 11AF B9 0F 10			lda adr.MUL40+1,y
   521 11B2 69 0C			adc #$0C
   522 11B4 85 5C			sta T0W+1
   523
   524 				; optimize OK (tools.inc), line = 12
   525
   526 11B6 A5 5B			lda T0W
   527 11B8 38 E9 28			sub #$28
   528 11BB 85 21			sta :STACKORIGIN+9
   529 11BD A5 5C			lda T0W+1
   530 11BF E9 00			sbc #$00
   531 11C1 85 11			sta :bp+1
   532 11C3 A4 21			ldy :STACKORIGIN+9
   533 11C5 B1 10			lda (:bp),y
   534 11C7 C9 20			cmp #$20
   535 11C9 D0 08			jne l_00C6
   536 11CB AD 95 17			lda AVAILDIR
   537 11CE 09 01			ora #$01
   538 11D0 8D 95 17			sta AVAILDIR
   539 11D3			l_00C6
   540
   541 				; optimize OK (tools.inc), line = 13
   542
   543 11D3 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   544 11DB A0 28			ldy #$28
   545 11DD B1 12			lda (:bp2),y
   546 11DF C9 20			cmp #$20
   547 11E1 D0 08			jne l_00E9
   548 11E3 AD 95 17			lda AVAILDIR
   549 11E6 09 02			ora #$02
   550 11E8 8D 95 17			sta AVAILDIR
   551 11EB			l_00E9
   552
   553 				; optimize OK (tools.inc), line = 14
   554
   555 11EB A5 5B			lda T0W
   556 11ED 38 E9 01			sub #$01
   557 11F0 85 21			sta :STACKORIGIN+9
   558 11F2 A5 5C			lda T0W+1
   559 11F4 E9 00			sbc #$00
   560 11F6 85 11			sta :bp+1
   561 11F8 A4 21			ldy :STACKORIGIN+9
   562 11FA B1 10			lda (:bp),y
   563 11FC C9 20			cmp #$20
   564 11FE D0 08			jne l_010C
   565 1200 AD 95 17			lda AVAILDIR
   566 1203 09 04			ora #$04
   567 1205 8D 95 17			sta AVAILDIR
   568 1208			l_010C
   569
   570 				; optimize OK (tools.inc), line = 15
   571
   572 1208 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   573 1210 A0 01			ldy #$01
   574 1212 B1 12			lda (:bp2),y
   575 1214 C9 20			cmp #$20
   576 1216 D0 08			jne l_012F
   577 1218 AD 95 17			lda AVAILDIR
   578 121B 09 08			ora #$08
   579 121D 8D 95 17			sta AVAILDIR
   580 1220			l_012F
   581
   582 				; ------------------------------------------------------------
   583
   584 = 17B9			X	= DATAORIGIN+$0035
   585 = 17BA			Y	= DATAORIGIN+$0036
   586
   587 = 17B9			@VarData	= X
   588 = 0002			@VarDataSize	= 2
   589
   590 1220			@exit
   591 					.ifdef @new
   592 					lda <@VarData
   593 					sta :ztmp
   594 					lda >@VarData
   595 					ldy #@VarDataSize-1
   596 					jmp @FreeMem
   597 					els
   598 1220 60				rts						; ret
   599 					eif
   600 				.endl
   601
   602 1221			.local	INITPLAYFIELD					; PROCEDURE
   603
   604 				; optimize OK (init.inc), line = 3
   605
   606 1221 A9 1F			lda #$1F
   607 1223 8D 15 FF			sta BORDERCOLOR
   608 1226 A9 00			lda #$00
   609 1228 8D 19 FF			sta BGCOLOR
   610
   611 				; optimize OK (init.inc), line = 4
   612
   613 122B A9 20			lda #$20
   614 122D 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   615 122F A9 C0			lda #$C0
   616 1231 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   617 1233 A9 03			lda #$03
   618 1235 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   619 1237 A9 00			lda #$00
   620 1239 85 08			sta SYSTEM.FILLCHAR_0056.A
   621 123B A9 0C			lda #$0C
   622 123D 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   623 123F 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   624
   625 				; optimize OK (init.inc), line = 6
   626
   627 1242 A9 27			lda #$27
   628 1244 85 58			sta T0B
   629
   630 1246			l_0155
   631 				; --- ForToDoCondition
   632
   633 				; optimize OK (init.inc), line = 7
   634
   635 1246 A4 58			ldy T0B
   636 1248 A9 A0			lda #$A0
   637 124A 99 00 0C			sta $0C00,y
   638
   639 				; optimize OK (init.inc), line = 8
   640
   641 124D 99 C0 0F			sta $0FC0,y
   642
   643 				; optimize OK (init.inc), line = 9
   644
   645 1250 A9 41			lda #$41
   646 1252 99 00 08			sta $0800,y
   647
   648 				; optimize OK (init.inc), line = 10
   649
   650 1255 99 C0 0B			sta $0BC0,y
   651
   652 				; --- ForToDoEpilog
   653 1258 C6 58			dec T0B
   654 125A 10 EA			jpl l_0155
   655 125C			l_0163
   656
   657 				; optimize OK (init.inc), line = 13
   658
   659 125C A9 18			lda #$18
   660 125E 85 58			sta T0B
   661
   662 1260			l_0195
   663 				; --- ForToDoCondition
   664 1260 A5 58			lda T0B
   665 1262 C9 01			cmp #$01
   666 1264 90 3A			jcc l_01A3
   667
   668 				; optimize OK (init.inc), line = 14
   669
   670 1266 0A				asl @
   671 1267 A8				tay
   672 1268 A9 FF			lda #$FF
   673 126A 18 79 0E 10			add adr.MUL40,y
   674 126E 85 12			sta :bp2
   675 1270 A9 0B			lda #$0B
   676 1272 79 0F 10			adc adr.MUL40+1,y
   677 1275 85 13			sta :bp2+1
   678 1277 A0 00			ldy #$00
   679 1279 A9 A0			lda #$A0
   680 127B 91 12			sta (:bp2),y
   681 127D C8				iny
   682 127E 91 12			sta (:bp2),y
   683
   684 				; optimize OK (init.inc), line = 15
   685
   686 1280 A5 58			lda T0B
   687 1282 0A				asl @
   688 1283 A8				tay
   689 1284 A9 FF			lda #$FF
   690 1286 18 79 0E 10			add adr.MUL40,y
   691 128A 85 12			sta :bp2
   692 128C A9 07			lda #$07
   693 128E 79 0F 10			adc adr.MUL40+1,y
   694 1291 85 13			sta :bp2+1
   695 1293 A0 00			ldy #$00
   696 1295 A9 41			lda #$41
   697 1297 91 12			sta (:bp2),y
   698 1299 C8				iny
   699 129A 91 12			sta (:bp2),y
   700
   701 				; --- ForToDoEpilog
   702 129C C6 58			dec T0B
   703 129E 10 C0			jpl l_0195
   704 12A0			l_01A3
   705
   706 				; ------------------------------------------------------------
   707
   708 = 0000			@FORTMP_0152	= $00
   709 = 0001			@FORTMP_0192	= $01
   710 12A0			@exit
   711 					.ifdef @new
   712 					lda <@VarData
   713 					sta :ztmp
   714 					lda >@VarData
   715 					ldy #@VarDataSize-1
   716 					jmp @FreeMem
   717 					els
   718 12A0 60				rts						; ret
   719 					eif
   720 				.endl
   721
   722 12A1			.local	INITPLAYERS					; PROCEDURE
   723
   724 				; optimize OK (init.inc), line = 21
   725
   726 12A1 AD BB 17			lda P
   727 12A4 8D 97 17			sta PLY
   728 12A7 85 12			sta :bp2
   729 12A9 AD BC 17			lda P+1
   730 12AC 8D 98 17			sta PLY+1
   731 12AF 85 13			sta :bp2+1
   732 				; optimize OK (init.inc), line = 22
   733 12B1 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   734 12B3 AD C0 17			lda BRAIN
   735 12B6 91 12			sta (:bp2),y
   736 12B8 A0 00			ldy #PLY.X-DATAORIGIN
   737 12BA AD BD 17			lda X
   738 12BD 91 12			sta (:bp2),y
   739 12BF A0 01			ldy #PLY.Y-DATAORIGIN
   740 12C1 AD BE 17			lda Y
   741 12C4 91 12			sta (:bp2),y
   742 12C6 A0 04			ldy #PLY.DIR-DATAORIGIN
   743 12C8 AD BF 17			lda DIR
   744 12CB 91 12			sta (:bp2),y
   745
   746 				; optimize OK (init.inc), line = 23
   747
   748 12CD A0 02			ldy #PLY.HEAD-DATAORIGIN
   749 12CF AD C1 17			lda HEAD
   750 12D2 91 12			sta (:bp2),y
   751 12D4 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   752 12D6 AD C2 17			lda COLOUR
   753 12D9 91 12			sta (:bp2),y
   754 12DB A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   755 12DD AD C3 17			lda ISDEAD
   756 12E0 91 12			sta (:bp2),y
   757
   758 				; ------------------------------------------------------------
   759
   760 = 17BB			P	= DATAORIGIN+$0037
   761 = 17BD			X	= DATAORIGIN+$0039
   762 = 17BE			Y	= DATAORIGIN+$003A
   763 = 17BF			DIR	= DATAORIGIN+$003B
   764 = 17C0			BRAIN	= DATAORIGIN+$003C
   765 = 17C1			HEAD	= DATAORIGIN+$003D
   766 = 17C2			COLOUR	= DATAORIGIN+$003E
   767 = 17C3			ISDEAD	= DATAORIGIN+$003F
   768
   769 = 17BB			@VarData	= P
   770 = 0009			@VarDataSize	= 9
   771
   772 12E2			@exit
   773 					.ifdef @new
   774 					lda <@VarData
   775 					sta :ztmp
   776 					lda >@VarData
   777 					ldy #@VarDataSize-1
   778 					jmp @FreeMem
   779 					els
   780 12E2 60				rts						; ret
   781 					eif
   782 				.endl
   783
   784 12E3			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   785
   786 				; optimize OK (ai.inc), line = 13
   787
   788 12E3 AC 97 17 84 12 AC + 	mwy PLY :bp2
   789 12ED A0 04			ldy #PLY.DIR-DATAORIGIN
   790 12EF B1 12			lda (:bp2),y
   791 12F1 2D 95 17			and AVAILDIR
   792 12F4 F0 07			jeq l_020D
   793 12F6 B1 12			lda (:bp2),y
   794 12F8 85 59			sta NEWDIR
   795 12FA 4C 78 13			jmp l_021D
   796 12FD			l_020D
   797
   798 				; optimize OK (ai.inc), line = 15
   799
   800 12FD AD 95 17			lda AVAILDIR
   801 1300 C9 03			cmp #$03
   802 1302 D0 16			jne l_022F
   803 1304 A9 00			lda #$00
   804 1306 20 40 11			jsr SYSTEM.RANDOM_006C
   805 1309 B5 18			lda :STACKORIGIN,x
   806 130B 29 01			and #$01
   807 130D 95 18			sta :STACKORIGIN,x
   808 130F B4 18			ldy :STACKORIGIN,x
   809 1311 B9 40 10			lda adr.DIRECTION,y
   810 1314 85 59			sta NEWDIR
   811 1316 CA				dex
   812 1317 4C 33 13			jmp l_0245
   813 131A			l_022F
   814
   815 				; optimize OK (ai.inc), line = 17
   816
   817 131A AD 95 17			lda AVAILDIR
   818 131D 8D C4 17			sta @CASETMP_0003
   819 1320 C9 01			cmp #$01
   820 1322 D0 07			jne l_0250
   821 1324			@
   822
   823 				; optimize OK (ai.inc), line = 18
   824
   825 1324 A9 01			lda #$01
   826 1326 85 59			sta NEWDIR
   827
   828 1328 4C 33 13			jmp a_0003
   829 132B			l_0250
   830 132B C9 02			cmp #$02
   831 132D D0 04			jne l_025D
   832 132F			@
   833
   834 				; optimize OK (ai.inc), line = 19
   835
   836 132F A9 02			lda #$02
   837 1331 85 59			sta NEWDIR
   838
   839 1333			l_025D
   840 1333			a_0003
   841 1333			l_0245
   842
   843 				; optimize OK (ai.inc), line = 22
   844
   845 1333 AD 95 17			lda AVAILDIR
   846 1336 C9 0C			cmp #$0C
   847 1338 D0 25			jne l_0279
   848 133A A9 00			lda #$00
   849 133C 20 40 11			jsr SYSTEM.RANDOM_006C
   850 133F B5 18			lda :STACKORIGIN,x
   851 1341 29 01			and #$01
   852 1343 95 18			sta :STACKORIGIN,x
   853 1345 E8				inx
   854 1346 A9 02 95 18			mva #$02 :STACKORIGIN,x
   855 134A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
   856 134E 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
   857 1350 20 44 10			jsr addAX_CX
   858 1353 CA				dex
   859 1354 B4 18			ldy :STACKORIGIN,x
   860 1356 B9 40 10			lda adr.DIRECTION,y
   861 1359 85 59			sta NEWDIR
   862 135B CA				dex
   863 135C 4C 78 13			jmp l_0293
   864 135F			l_0279
   865
   866 				; optimize OK (ai.inc), line = 24
   867
   868 135F AD 95 17			lda AVAILDIR
   869 1362 8D C5 17			sta @CASETMP_0004
   870 1365 C9 04			cmp #$04
   871 1367 D0 07			jne l_029E
   872 1369			@
   873
   874 				; optimize OK (ai.inc), line = 25
   875
   876 1369 A9 04			lda #$04
   877 136B 85 59			sta NEWDIR
   878
   879 136D 4C 78 13			jmp a_0004
   880 1370			l_029E
   881 1370 C9 08			cmp #$08
   882 1372 D0 04			jne l_02AB
   883 1374			@
   884
   885 				; optimize OK (ai.inc), line = 26
   886
   887 1374 A9 08			lda #$08
   888 1376 85 59			sta NEWDIR
   889
   890 1378			l_02AB
   891 1378			a_0004
   892 1378			l_0293
   893 1378			l_021D
   894
   895 				; ------------------------------------------------------------
   896
   897 = 17C4			@CASETMP_0003	= DATAORIGIN+$0040
   898 = 17C5			@CASETMP_0004	= DATAORIGIN+$0041
   899
   900 = 17C4			@VarData	= @CASETMP_0003
   901 = 0002			@VarDataSize	= 2
   902
   903 1378			@exit
   904 					.ifdef @new
   905 					lda <@VarData
   906 					sta :ztmp
   907 					lda >@VarData
   908 					ldy #@VarDataSize-1
   909 					jmp @FreeMem
   910 					els
   911 1378 60				rts						; ret
   912 					eif
   913 				.endl
   914
   915 1379			.local	HUMAN						; PROCEDURE
   916
   917 				; optimize OK (main.pas), line = 14
   918
   919 1379 AC 97 17 84 12 AC + 	mwy PLY :bp2
   920 1383 A0 04			ldy #PLY.DIR-DATAORIGIN
   921 1385 B1 12			lda (:bp2),y
   922 1387 85 59			sta NEWDIR
   923
   924 				; optimize OK (main.pas), line = 15
   925
   926 1389 A9 02			lda #$02
   927 138B 8D 08 FF			sta JOY
   928 138E A9 FF			lda #$FF
   929 1390 8D 30 FD			sta KEY_PIO
   930 1393 AD 08 FF			lda JOY
   931 1396 49 FF			eor #$FF
   932 1398 85 58			sta T0B
   933
   934 				; optimize OK (main.pas), line = 17
   935
   936 139A 8D C6 17			sta @CASETMP_0005
   937 139D C9 01			cmp #$01
   938 139F D0 19			jne l_02DC
   939 13A1			@
   940
   941 				; optimize OK (main.pas), line = 18
   942
   943 13A1 AC 97 17 84 12 AC + 	mwy PLY :bp2
   944 13AB A0 04			ldy #PLY.DIR-DATAORIGIN
   945 13AD B1 12			lda (:bp2),y
   946 13AF C9 02			cmp #$02
   947 13B1 F0 04			jeq l_02EE
   948 13B3 A9 01			lda #$01
   949 13B5 85 59			sta NEWDIR
   950 13B7			l_02EE
   951
   952 13B7 4C 0E 14			jmp a_0005
   953 13BA			l_02DC
   954 13BA C9 02			cmp #$02
   955 13BC D0 19			jne l_02FE
   956 13BE			@
   957
   958 				; optimize OK (main.pas), line = 19
   959
   960 13BE AC 97 17 84 12 AC + 	mwy PLY :bp2
   961 13C8 A0 04			ldy #PLY.DIR-DATAORIGIN
   962 13CA B1 12			lda (:bp2),y
   963 13CC C9 01			cmp #$01
   964 13CE F0 04			jeq l_0310
   965 13D0 A9 02			lda #$02
   966 13D2 85 59			sta NEWDIR
   967 13D4			l_0310
   968
   969 13D4 4C 0E 14			jmp a_0005
   970 13D7			l_02FE
   971 13D7 C9 04			cmp #$04
   972 13D9 D0 19			jne l_0320
   973 13DB			@
   974
   975 				; optimize OK (main.pas), line = 20
   976
   977 13DB AC 97 17 84 12 AC + 	mwy PLY :bp2
   978 13E5 A0 04			ldy #PLY.DIR-DATAORIGIN
   979 13E7 B1 12			lda (:bp2),y
   980 13E9 C9 08			cmp #$08
   981 13EB F0 04			jeq l_0332
   982 13ED A9 04			lda #$04
   983 13EF 85 59			sta NEWDIR
   984 13F1			l_0332
   985
   986 13F1 4C 0E 14			jmp a_0005
   987 13F4			l_0320
   988 13F4 C9 08			cmp #$08
   989 13F6 D0 16			jne l_0342
   990 13F8			@
   991
   992 				; optimize OK (main.pas), line = 21
   993
   994 13F8 AC 97 17 84 12 AC + 	mwy PLY :bp2
   995 1402 A0 04			ldy #PLY.DIR-DATAORIGIN
   996 1404 B1 12			lda (:bp2),y
   997 1406 C9 04			cmp #$04
   998 1408 F0 04			jeq l_0354
   999 140A A9 08			lda #$08
  1000 140C 85 59			sta NEWDIR
  1001 140E			l_0354
  1002
  1003 140E			l_0342
  1004 140E			a_0005
  1005
  1006 				; optimize OK (main.pas), line = 24
  1007
  1008 140E A5 59			lda NEWDIR
  1009 1410 2D 95 17			and AVAILDIR
  1010 1413 D0 1B			jne l_037B
  1011
  1012 				; optimize OK (main.pas), line = 25
  1013
  1014 1415 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1015 141F A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1016 1421 A9 01			lda #$01
  1017 1423 91 12			sta (:bp2),y
  1018 1425 A9 00			lda #$00
  1019 1427 8D 96 17			sta ALIVE
  1020 142A A0 02			ldy #PLY.HEAD-DATAORIGIN
  1021 142C A9 57			lda #$57
  1022 142E 91 12			sta (:bp2),y
  1023 1430			l_037B
  1024
  1025 				; ------------------------------------------------------------
  1026
  1027 = 17C6			@CASETMP_0005	= DATAORIGIN+$0042
  1028
  1029 = 17C6			@VarData	= @CASETMP_0005
  1030 = 0001			@VarDataSize	= 1
  1031
  1032 1430			@exit
  1033 					.ifdef @new
  1034 					lda <@VarData
  1035 					sta :ztmp
  1036 					lda >@VarData
  1037 					ldy #@VarDataSize-1
  1038 					jmp @FreeMem
  1039 					els
  1040 1430 60				rts						; ret
  1041 					eif
  1042 				.endl
  1043
  1044 1431			.local	PLAYERMOVE					; PROCEDURE
  1045
  1046 				; optimize OK (main.pas), line = 33
  1047
  1048 1431 AD C7 17			lda P
  1049 1434 8D 97 17			sta PLY
  1050 1437 85 12			sta :bp2
  1051 1439 AD C8 17			lda P+1
  1052 143C 8D 98 17			sta PLY+1
  1053 143F 85 13			sta :bp2+1
  1054 				; optimize OK (main.pas), line = 35
  1055 1441 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1056 1443 B1 12			lda (:bp2),y
  1057 1445 F0 03 4C 18 16		jne l_03A2
  1058
  1059 				; optimize OK (main.pas), line = 37
  1060
  1061 144A A0 00			ldy #PLY.X-DATAORIGIN
  1062 144C B1 12			lda (:bp2),y
  1063 144E 8D B9 17			sta CHECKAVAILDIR.X
  1064 1451 A0 01			ldy #PLY.Y-DATAORIGIN
  1065 1453 B1 12			lda (:bp2),y
  1066 1455 8D BA 17			sta CHECKAVAILDIR.Y
  1067 1458 20 9C 11			jsr CHECKAVAILDIR
  1068
  1069 				; optimize OK (main.pas), line = 39
  1070
  1071 145B AD 95 17			lda AVAILDIR
  1072 145E D0 36			jne l_03BC
  1073
  1074 				; optimize OK (main.pas), line = 40
  1075
  1076 1460 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1077 146A A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1078 146C A9 01			lda #$01
  1079 146E 91 12			sta (:bp2),y
  1080 1470 CE 96 17			dec ALIVE
  1081
  1082 				; optimize OK (main.pas), line = 41
  1083
  1084 1473 A0 00			ldy #PLY.X-DATAORIGIN
  1085 1475 B1 12			lda (:bp2),y
  1086 1477 8D B5 17			sta PUTCHAR.X
  1087 147A A0 01			ldy #PLY.Y-DATAORIGIN
  1088 147C B1 12			lda (:bp2),y
  1089 147E 8D B6 17			sta PUTCHAR.Y
  1090 1481 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1091 1483 B1 12			lda (:bp2),y
  1092 1485 18 69 80			add #$80
  1093 1488 8D B8 17			sta PUTCHAR.C
  1094 148B A9 57			lda #$57
  1095 148D 8D B7 17			sta PUTCHAR.V
  1096 1490 20 71 11			jsr PUTCHAR
  1097 1493 4C 18 16			jmp l_03DD
  1098 1496			l_03BC
  1099
  1100 				; optimize OK (main.pas), line = 44
  1101
  1102 1496 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1103 14A0 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1104 14A2 B1 12			lda (:bp2),y
  1105 14A4 8D C9 17			sta @CASETMP_0006
  1106 14A7 C9 00			cmp #$00
  1107 14A9 D0 06			jne l_03E8
  1108 14AB			@
  1109
  1110 				; optimize FAIL ('HUMAN', main.pas), line = 45
  1111
  1112 14AB 20 79 13			jsr HUMAN
  1113 14AE 4C B8 14			jmp a_0006
  1114 14B1			l_03E8
  1115 14B1 C9 01			cmp #$01
  1116 14B3 D0 03			jne l_03F2
  1117 14B5			@
  1118
  1119 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 46
  1120
  1121 14B5 20 E3 12			jsr AI_STRAIGHTFORWARD
  1122 14B8			l_03F2
  1123 14B8			a_0006
  1124
  1125 				; optimize OK (main.pas), line = 49
  1126
  1127 14B8 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1128 14C2 A0 04			ldy #PLY.DIR-DATAORIGIN
  1129 14C4 B1 12			lda (:bp2),y
  1130 14C6 C5 59			cmp NEWDIR
  1131 14C8 D0 14			jne l_040D
  1132
  1133 				; optimize OK (main.pas), line = 50
  1134
  1135 14CA A5 59			lda NEWDIR
  1136 14CC 29 0C			and #$0C
  1137 14CE F0 07			jeq l_0424
  1138 14D0 A9 40			lda #$40
  1139 14D2 85 58			sta T0B
  1140 14D4 4C DB 14			jmp l_0432
  1141 14D7			l_0424
  1142 14D7 A9 42			lda #$42
  1143 14D9 85 58			sta T0B
  1144 14DB			l_0432
  1145 14DB 4C 4E 15			jmp l_043F
  1146 14DE			l_040D
  1147
  1148 				; optimize OK (main.pas), line = 52
  1149
  1150 14DE AC 97 17 84 12 AC + 	mwy PLY :bp2
  1151 14E8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1152 14EA B1 12			lda (:bp2),y
  1153 14EC 29 0A			and #$0A
  1154 14EE F0 0A			jeq l_0465
  1155 14F0 A5 59			lda NEWDIR
  1156 14F2 29 05			and #$05
  1157 14F4 F0 04			jeq l_0465
  1158 14F6 A9 7D			lda #$7D
  1159 14F8 85 58			sta T0B
  1160 14FA			l_0465
  1161
  1162 				; optimize OK (main.pas), line = 53
  1163
  1164 14FA AC 97 17 84 12 AC + 	mwy PLY :bp2
  1165 1504 A0 04			ldy #PLY.DIR-DATAORIGIN
  1166 1506 B1 12			lda (:bp2),y
  1167 1508 29 09			and #$09
  1168 150A F0 0A			jeq l_0492
  1169 150C A5 59			lda NEWDIR
  1170 150E 29 06			and #$06
  1171 1510 F0 04			jeq l_0492
  1172 1512 A9 6E			lda #$6E
  1173 1514 85 58			sta T0B
  1174 1516			l_0492
  1175
  1176 				; optimize OK (main.pas), line = 54
  1177
  1178 1516 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1179 1520 A0 04			ldy #PLY.DIR-DATAORIGIN
  1180 1522 B1 12			lda (:bp2),y
  1181 1524 29 06			and #$06
  1182 1526 F0 0A			jeq l_04BF
  1183 1528 A5 59			lda NEWDIR
  1184 152A 29 09			and #$09
  1185 152C F0 04			jeq l_04BF
  1186 152E A9 6D			lda #$6D
  1187 1530 85 58			sta T0B
  1188 1532			l_04BF
  1189
  1190 				; optimize OK (main.pas), line = 55
  1191
  1192 1532 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1193 153C A0 04			ldy #PLY.DIR-DATAORIGIN
  1194 153E B1 12			lda (:bp2),y
  1195 1540 29 05			and #$05
  1196 1542 F0 0A			jeq l_04EC
  1197 1544 A5 59			lda NEWDIR
  1198 1546 29 0A			and #$0A
  1199 1548 F0 04			jeq l_04EC
  1200 154A A9 70			lda #$70
  1201 154C 85 58			sta T0B
  1202 154E			l_04EC
  1203 154E			l_043F
  1204
  1205 				; optimize OK (main.pas), line = 57
  1206
  1207 154E AC 97 17 84 12 AC + 	mwy PLY :bp2
  1208 1558 A0 00			ldy #PLY.X-DATAORIGIN
  1209 155A B1 12			lda (:bp2),y
  1210 155C 8D B5 17			sta PUTCHAR.X
  1211 155F A0 01			ldy #PLY.Y-DATAORIGIN
  1212 1561 B1 12			lda (:bp2),y
  1213 1563 8D B6 17			sta PUTCHAR.Y
  1214 1566 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1215 1568 B1 12			lda (:bp2),y
  1216 156A 8D B8 17			sta PUTCHAR.C
  1217 156D A5 58			lda T0B
  1218 156F 8D B7 17			sta PUTCHAR.V
  1219 1572 20 71 11			jsr PUTCHAR
  1220
  1221 				; optimize OK (main.pas), line = 59
  1222
  1223 1575 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1224 157F A0 04			ldy #PLY.DIR-DATAORIGIN
  1225 1581 A5 59			lda NEWDIR
  1226 1583 91 12			sta (:bp2),y
  1227
  1228 				; optimize OK (main.pas), line = 61
  1229
  1230 1585 A5 59			lda NEWDIR
  1231 1587 8D CA 17			sta @CASETMP_0007
  1232 158A C9 01			cmp #$01
  1233 158C D0 16			jne l_0511
  1234 158E			@
  1235
  1236 				; optimize OK (main.pas), line = 62
  1237
  1238 158E AC 97 17 84 12 AC + 	mwy PLY :bp2
  1239 1598 A0 01			ldy #PLY.Y-DATAORIGIN
  1240 159A B1 12			lda (:bp2),y
  1241 159C 38 E9 01			sub #$01
  1242 159F 91 12			sta (:bp2),y
  1243
  1244 15A1 4C EF 15			jmp a_0007
  1245 15A4			l_0511
  1246 15A4 C9 02			cmp #$02
  1247 15A6 D0 16			jne l_051B
  1248 15A8			@
  1249
  1250 				; optimize OK (main.pas), line = 63
  1251
  1252 15A8 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1253 15B2 A0 01			ldy #PLY.Y-DATAORIGIN
  1254 15B4 B1 12			lda (:bp2),y
  1255 15B6 18 69 01			add #$01
  1256 15B9 91 12			sta (:bp2),y
  1257
  1258 15BB 4C EF 15			jmp a_0007
  1259 15BE			l_051B
  1260 15BE C9 04			cmp #$04
  1261 15C0 D0 16			jne l_0525
  1262 15C2			@
  1263
  1264 				; optimize OK (main.pas), line = 64
  1265
  1266 15C2 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1267 15CC A0 00			ldy #PLY.X-DATAORIGIN
  1268 15CE B1 12			lda (:bp2),y
  1269 15D0 38 E9 01			sub #$01
  1270 15D3 91 12			sta (:bp2),y
  1271
  1272 15D5 4C EF 15			jmp a_0007
  1273 15D8			l_0525
  1274 15D8 C9 08			cmp #$08
  1275 15DA D0 13			jne l_052F
  1276 15DC			@
  1277
  1278 				; optimize OK (main.pas), line = 65
  1279
  1280 15DC AC 97 17 84 12 AC + 	mwy PLY :bp2
  1281 15E6 A0 00			ldy #PLY.X-DATAORIGIN
  1282 15E8 B1 12			lda (:bp2),y
  1283 15EA 18 69 01			add #$01
  1284 15ED 91 12			sta (:bp2),y
  1285
  1286 15EF			l_052F
  1287 15EF			a_0007
  1288
  1289 				; optimize OK (main.pas), line = 68
  1290
  1291 15EF AC 97 17 84 12 AC + 	mwy PLY :bp2
  1292 15F9 A0 00			ldy #PLY.X-DATAORIGIN
  1293 15FB B1 12			lda (:bp2),y
  1294 15FD 8D B5 17			sta PUTCHAR.X
  1295 1600 A0 01			ldy #PLY.Y-DATAORIGIN
  1296 1602 B1 12			lda (:bp2),y
  1297 1604 8D B6 17			sta PUTCHAR.Y
  1298 1607 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1299 1609 B1 12			lda (:bp2),y
  1300 160B 8D B7 17			sta PUTCHAR.V
  1301 160E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1302 1610 B1 12			lda (:bp2),y
  1303 1612 8D B8 17			sta PUTCHAR.C
  1304 1615 20 71 11			jsr PUTCHAR
  1305 1618			l_03DD
  1306 1618			l_03A2
  1307
  1308 				; ------------------------------------------------------------
  1309
  1310 = 17C7			P	= DATAORIGIN+$0043
  1311 = 17C9			@CASETMP_0006	= DATAORIGIN+$0045
  1312 = 17CA			@CASETMP_0007	= DATAORIGIN+$0046
  1313
  1314 = 17C7			@VarData	= P
  1315 = 0004			@VarDataSize	= 4
  1316
  1317 1618			@exit
  1318 					.ifdef @new
  1319 					lda <@VarData
  1320 					sta :ztmp
  1321 					lda >@VarData
  1322 					ldy #@VarDataSize-1
  1323 					jmp @FreeMem
  1324 					els
  1325 1618 60				rts						; ret
  1326 					eif
  1327 				.endl
  1328 1619			l_0007
  1329
  1330 				; optimize OK (main.pas), line = 79
  1331
  1332 1619 A9 00			lda #$00
  1333 161B 8D 94 17			sta GAMEOVER
  1334
  1335 				; --- RepeatUntilProlog
  1336 161E			l_054D
  1337
  1338 				; optimize OK (main.pas), line = 81
  1339
  1340 161E A9 FF			lda #$FF
  1341 1620 8D 96 17			sta ALIVE
  1342
  1343 				; optimize OK (main.pas), line = 83
  1344
  1345 1623 A9 00			lda #$00
  1346 1625 8D C3 17			sta INITPLAYERS.ISDEAD
  1347 1628 A9 5F			lda #$5F
  1348 162A 8D C2 17			sta INITPLAYERS.COLOUR
  1349 162D A9 51			lda #$51
  1350 162F 8D C1 17			sta INITPLAYERS.HEAD
  1351 1632 A9 01			lda #$01
  1352 1634 8D C0 17			sta INITPLAYERS.BRAIN
  1353 1637 A9 08			lda #$08
  1354 1639 8D BF 17			sta INITPLAYERS.DIR
  1355 163C A9 0C			lda #$0C
  1356 163E 8D BE 17			sta INITPLAYERS.Y
  1357 1641 A9 0A			lda #$0A
  1358 1643 8D BD 17			sta INITPLAYERS.X
  1359 1646 AD 7B 17			lda PLAYER1
  1360 1649 8D BB 17			sta INITPLAYERS.P
  1361 164C AD 7C 17			lda PLAYER1+1
  1362 164F 8D BC 17			sta INITPLAYERS.P+1
  1363 1652 20 A1 12			jsr INITPLAYERS
  1364
  1365 				; optimize OK (main.pas), line = 84
  1366
  1367 1655 A9 00			lda #$00
  1368 1657 8D C3 17			sta INITPLAYERS.ISDEAD
  1369 165A A9 5D			lda #$5D
  1370 165C 8D C2 17			sta INITPLAYERS.COLOUR
  1371 165F A9 51			lda #$51
  1372 1661 8D C1 17			sta INITPLAYERS.HEAD
  1373 1664 A9 01			lda #$01
  1374 1666 8D C0 17			sta INITPLAYERS.BRAIN
  1375 1669 A9 04			lda #$04
  1376 166B 8D BF 17			sta INITPLAYERS.DIR
  1377 166E A9 0C			lda #$0C
  1378 1670 8D BE 17			sta INITPLAYERS.Y
  1379 1673 A9 1E			lda #$1E
  1380 1675 8D BD 17			sta INITPLAYERS.X
  1381 1678 AD 7D 17			lda PLAYER2
  1382 167B 8D BB 17			sta INITPLAYERS.P
  1383 167E AD 7E 17			lda PLAYER2+1
  1384 1681 8D BC 17			sta INITPLAYERS.P+1
  1385 1684 20 A1 12			jsr INITPLAYERS
  1386
  1387 				; optimize OK (main.pas), line = 85
  1388
  1389 1687 A9 01			lda #$01
  1390 1689 8D C3 17			sta INITPLAYERS.ISDEAD
  1391 168C A9 71			lda #$71
  1392 168E 8D C2 17			sta INITPLAYERS.COLOUR
  1393 1691 A9 51			lda #$51
  1394 1693 8D C1 17			sta INITPLAYERS.HEAD
  1395 1696 A9 01			lda #$01
  1396 1698 8D C0 17			sta INITPLAYERS.BRAIN
  1397 169B A9 02			lda #$02
  1398 169D 8D BF 17			sta INITPLAYERS.DIR
  1399 16A0 A9 06			lda #$06
  1400 16A2 8D BE 17			sta INITPLAYERS.Y
  1401 16A5 A9 14			lda #$14
  1402 16A7 8D BD 17			sta INITPLAYERS.X
  1403 16AA AD 7F 17			lda PLAYER3
  1404 16AD 8D BB 17			sta INITPLAYERS.P
  1405 16B0 AD 80 17			lda PLAYER3+1
  1406 16B3 8D BC 17			sta INITPLAYERS.P+1
  1407 16B6 20 A1 12			jsr INITPLAYERS
  1408
  1409 				; optimize OK (main.pas), line = 86
  1410
  1411 16B9 A9 01			lda #$01
  1412 16BB 8D C3 17			sta INITPLAYERS.ISDEAD
  1413 16BE A9 55			lda #$55
  1414 16C0 8D C2 17			sta INITPLAYERS.COLOUR
  1415 16C3 A9 51			lda #$51
  1416 16C5 8D C1 17			sta INITPLAYERS.HEAD
  1417 16C8 A9 01			lda #$01
  1418 16CA 8D C0 17			sta INITPLAYERS.BRAIN
  1419 16CD 8D BF 17			sta INITPLAYERS.DIR
  1420 16D0 A9 12			lda #$12
  1421 16D2 8D BE 17			sta INITPLAYERS.Y
  1422 16D5 A9 14			lda #$14
  1423 16D7 8D BD 17			sta INITPLAYERS.X
  1424 16DA AD 81 17			lda PLAYER4
  1425 16DD 8D BB 17			sta INITPLAYERS.P
  1426 16E0 AD 82 17			lda PLAYER4+1
  1427 16E3 8D BC 17			sta INITPLAYERS.P+1
  1428 16E6 20 A1 12			jsr INITPLAYERS
  1429
  1430 				; optimize OK (main.pas), line = 88
  1431
  1432 16E9 AD 9F 17			lda PLAYER1.ISDEAD
  1433 16EC D0 03			jne l_0588
  1434 16EE EE 96 17			inc ALIVE
  1435 16F1			l_0588
  1436
  1437 				; optimize OK (main.pas), line = 89
  1438
  1439 16F1 AD A6 17			lda PLAYER2.ISDEAD
  1440 16F4 D0 03			jne l_059E
  1441 16F6 EE 96 17			inc ALIVE
  1442 16F9			l_059E
  1443
  1444 				; optimize OK (main.pas), line = 90
  1445
  1446 16F9 AD AD 17			lda PLAYER3.ISDEAD
  1447 16FC D0 03			jne l_05B4
  1448 16FE EE 96 17			inc ALIVE
  1449 1701			l_05B4
  1450
  1451 				; optimize OK (main.pas), line = 91
  1452
  1453 1701 AD B4 17			lda PLAYER4.ISDEAD
  1454 1704 D0 03			jne l_05CA
  1455 1706 EE 96 17			inc ALIVE
  1456 1709			l_05CA
  1457
  1458 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 93
  1459
  1460 1709 20 21 12			jsr INITPLAYFIELD
  1461
  1462 				; --- RepeatUntilProlog
  1463 170C			l_05D3
  1464
  1465 				; optimize OK (main.pas), line = 96
  1466
  1467 170C A9 01			lda #$01
  1468 170E 8D 90 17			sta SYSTEM.PAUSE_006B.N
  1469 1711 A9 00			lda #$00
  1470 1713 8D 91 17			sta SYSTEM.PAUSE_006B.N+1
  1471 1716 20 23 11			jsr SYSTEM.PAUSE_006B
  1472
  1473 				; optimize OK (main.pas), line = 97
  1474
  1475 1719 AD 7B 17			lda PLAYER1
  1476 171C 8D C7 17			sta PLAYERMOVE.P
  1477 171F AD 7C 17			lda PLAYER1+1
  1478 1722 8D C8 17			sta PLAYERMOVE.P+1
  1479 1725 20 31 14			jsr PLAYERMOVE
  1480
  1481 				; optimize OK (main.pas), line = 98
  1482
  1483 1728 AD 7D 17			lda PLAYER2
  1484 172B 8D C7 17			sta PLAYERMOVE.P
  1485 172E AD 7E 17			lda PLAYER2+1
  1486 1731 8D C8 17			sta PLAYERMOVE.P+1
  1487 1734 20 31 14			jsr PLAYERMOVE
  1488
  1489 				; optimize OK (main.pas), line = 99
  1490
  1491 1737 AD 7F 17			lda PLAYER3
  1492 173A 8D C7 17			sta PLAYERMOVE.P
  1493 173D AD 80 17			lda PLAYER3+1
  1494 1740 8D C8 17			sta PLAYERMOVE.P+1
  1495 1743 20 31 14			jsr PLAYERMOVE
  1496
  1497 				; optimize OK (main.pas), line = 100
  1498
  1499 1746 AD 81 17			lda PLAYER4
  1500 1749 8D C7 17			sta PLAYERMOVE.P
  1501 174C AD 82 17			lda PLAYER4+1
  1502 174F 8D C8 17			sta PLAYERMOVE.P+1
  1503 1752 20 31 14			jsr PLAYERMOVE
  1504
  1505 				; optimize OK (main.pas), line = 101
  1506
  1507 1755 AD 96 17			lda ALIVE
  1508 1758 F0 04			jeq l_05D3x
  1509 175A C9 FF			cmp #$FF
  1510 175C D0 AE			jne l_05D3
  1511 175E			l_05D3x
  1512
  1513 				; optimize OK (main.pas), line = 103
  1514
  1515 175E A9 64			lda #$64
  1516 1760 8D 90 17			sta SYSTEM.PAUSE_006B.N
  1517 1763 A9 00			lda #$00
  1518 1765 8D 91 17			sta SYSTEM.PAUSE_006B.N+1
  1519 1768 20 23 11			jsr SYSTEM.PAUSE_006B
  1520
  1521 				; optimize OK (main.pas), line = 104
  1522
  1523 176B AD 94 17			lda GAMEOVER
  1524 176E D0 03 4C 1E 16		jeq l_054D
  1525
  1526 				; ------------------------------------------------------------
  1527
  1528 = 0800			ATTRIBUTE_ADDR	= $0800
  1529 = 0C00			SCREEN_ADDR	= $0C00
  1530 = 0020			EMPTY	= $20
  1531 = 00A0			WALL	= $A0
  1532 = 0041			WALL_COLOUR	= $41
  1533 = 0051			PLY_HEAD	= $51
  1534 = 0057			PLY_CRASH	= $57
  1535 = 0042			PLY_TAIL_UD	= $42
  1536 = 0040			PLY_TAIL_LR	= $40
  1537 = 007D			PLY_TAIL_RD	= $7D
  1538 = 006E			PLY_TAIL_RU	= $6E
  1539 = 006D			PLY_TAIL_LD	= $6D
  1540 = 0070			PLY_TAIL_LU	= $70
  1541 = 005F			PLY1_COLOUR	= $5F
  1542 = 005D			PLY2_COLOUR	= $5D
  1543 = 0071			PLY3_COLOUR	= $71
  1544 = 0055			PLY4_COLOUR	= $55
  1545 = 0001			JOY_UP	= $01
  1546 = 0002			JOY_DOWN	= $02
  1547 = 0004			JOY_LEFT	= $04
  1548 = 0008			JOY_RIGHT	= $08
  1549 = 0040			JOY_FIRE	= $40
  1550 = 0002			JOY_SELECT_1	= $02
  1551 = 0004			JOY_SELECT_2	= $04
  1552 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1553 1773			.var MUL40	= adr.MUL40 .word
  1554 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1555 1773			.var DIRECTION	= adr.DIRECTION .word
  1556 = FD30			KEY_PIO	= $FD30
  1557 = FF08			JOY	= $FF08
  1558 = FF15			BORDERCOLOR	= $FF15
  1559 = FF19			BGCOLOR	= $FF19
  1560 = 0058			T0B	= $58
  1561 = 0059			NEWDIR	= $59
  1562 = 005A			T0N	= $5A
  1563 = 005B			T0W	= $5B
  1564 = 1794			GAMEOVER	= DATAORIGIN+$0010
  1565 = 1795			AVAILDIR	= DATAORIGIN+$0011
  1566 = 1796			ALIVE	= DATAORIGIN+$0012
  1567 = 1797			PLY	= DATAORIGIN+$0013
  1568 = 1784			PLY.X	= DATAORIGIN+$0000
  1569 = 1785			PLY.Y	= DATAORIGIN+$0001
  1570 = 1786			PLY.HEAD	= DATAORIGIN+$0002
  1571 = 1787			PLY.COLOUR	= DATAORIGIN+$0003
  1572 = 1788			PLY.DIR	= DATAORIGIN+$0004
  1573 = 1789			PLY.BRAIN	= DATAORIGIN+$0005
  1574 = 178A			PLY.ISDEAD	= DATAORIGIN+$0006
  1575 = 1799			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1576 1773			.var PLAYER1	= adr.PLAYER1 .word
  1577 = 1799			PLAYER1.X	= DATAORIGIN+$0015
  1578 = 179A			PLAYER1.Y	= DATAORIGIN+$0016
  1579 = 179B			PLAYER1.HEAD	= DATAORIGIN+$0017
  1580 = 179C			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1581 = 179D			PLAYER1.DIR	= DATAORIGIN+$0019
  1582 = 179E			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1583 = 179F			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1584 = 17A0			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1585 1773			.var PLAYER2	= adr.PLAYER2 .word
  1586 = 17A0			PLAYER2.X	= DATAORIGIN+$001C
  1587 = 17A1			PLAYER2.Y	= DATAORIGIN+$001D
  1588 = 17A2			PLAYER2.HEAD	= DATAORIGIN+$001E
  1589 = 17A3			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1590 = 17A4			PLAYER2.DIR	= DATAORIGIN+$0020
  1591 = 17A5			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1592 = 17A6			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1593 = 17A7			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1594 1773			.var PLAYER3	= adr.PLAYER3 .word
  1595 = 17A7			PLAYER3.X	= DATAORIGIN+$0023
  1596 = 17A8			PLAYER3.Y	= DATAORIGIN+$0024
  1597 = 17A9			PLAYER3.HEAD	= DATAORIGIN+$0025
  1598 = 17AA			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1599 = 17AB			PLAYER3.DIR	= DATAORIGIN+$0027
  1600 = 17AC			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1601 = 17AD			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1602 = 17AE			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1603 1773			.var PLAYER4	= adr.PLAYER4 .word
  1604 = 17AE			PLAYER4.X	= DATAORIGIN+$002A
  1605 = 17AF			PLAYER4.Y	= DATAORIGIN+$002B
  1606 = 17B0			PLAYER4.HEAD	= DATAORIGIN+$002C
  1607 = 17B1			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1608 = 17B2			PLAYER4.DIR	= DATAORIGIN+$002E
  1609 = 17B3			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1610 = 17B4			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1611 1773			@exit
  1612
  1613 1773 A2 00		@halt	ldx #$00
  1614 1775 9A				txs
  1615
  1616 1776 60				rts
  1617
  1618 				; ------------------------------------------------------------
  1619
  1620 				; ------------------------------------------------------------
  1621
  1622 1777			.local	@DEFINES
  1623 1777			C4P
  1624 				.endl
  1625
  1626 1777			.local	@RESOURCE
  1627 				.endl
  1628
  1629 = 1777 0E 10		MUL40
  1629 = 1779 40 10		DIRECTION
  1629 = 177B 99 17		PLAYER1
  1629 = 177D A0 17		PLAYER2
  1629 = 177F A7 17		PLAYER3
  1629 = 1781 AE 17		PLAYER4
  1629 				.endl							; MAIN
  1630
  1631 				; ------------------------------------------------------------
  1632 				; ------------------------------------------------------------
  1633
  1634 				.macro	UNITINITIALIZATION
  1635 				
  1636 					.ifdef MAIN.SYSTEM.@UnitInit
  1637 					jsr MAIN.SYSTEM.@UnitInit
  1638 					eif
  1639 				.endm
  1640
  1641 				; ------------------------------------------------------------
  1642
  1643 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1644 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1644 				SYSTEM: $10D5..$1170
  1645 					eif
  1646
  1647 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1647 				CODE: $100E..$1776
  1648
  1649 				; ------------------------------------------------------------
  1650
  1651 1783				.align $04
  1652
  1653 1784			DATAORIGIN
  1654 1784 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1655
  1656 = 0006			VARINITSIZE	= *-DATAORIGIN
  1657 = 0047			VARDATASIZE	= 71
  1658
  1659 = 17CB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1660
  1661 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1661 				DATA: $1784..$17CB
  1662
  1663 				; ------------------------------------------------------------
  1664
  1665 				.macro	STATICDATA
  1666 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1667 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1668 				.by  $C0 $03 $01 $02 $04 $08
  1669 				.endm
  1670
  1671 					end
