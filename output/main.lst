mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E 6F 15			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0031			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1586			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 CF			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D B7 14 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 B7 85 02 A9 15 + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C 03 15			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D 8B 15		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD 8B 15 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 158B			RESULT	= DATAORIGIN+$000B
   182
   183 = 158B			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 110C AD 8C 15		loop  lda n
   307 110F 0D 8D 15		  ora n+1
   308 1112 F0 14		  beq stop
   309
   310 1114 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 111A AD 8C 15 D0 03 CE +   dew n
   313
   314 1125 4C 0C 11		  jmp loop
   315 1128			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 158C			N	= DATAORIGIN+$000C
   321
   322 = 158C			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 1128			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 1128 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1129			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1129 8D 8E 15			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 112C AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 112F 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1132 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 1135 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 1138 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 113B 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 113E A8			  tay
   350
   351 113F AD 8E 15		  lda range
   352 1142 F0 08		  beq stop
   353
   354 1144 85 0C		  sta ecx
   355 1146 84 04		  sty eax
   356
   357 1148 20 8C 10		  jsr imulCL
   358 114B A8			  tay
   359
   360 114C 8C 8F 15		stop  sty Result
   361
   362 114F			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 114F E8				inx
   370 1150 AD 8F 15 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 158E			RANGE	= DATAORIGIN+$000E
   383 = 158F			RESULT	= DATAORIGIN+$000F
   384
   385 = 158E			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 1155 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1580			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1582			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1584			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 1156			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 1156			.var HPALETTE	= adr.HPALETTE .word
   449 = 1585			FILEMODE	= DATAORIGIN+$0005
   450 = 1586			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1587			IORESULT	= DATAORIGIN+$0007
   452 = 1588			EOLN	= DATAORIGIN+$0008
   453 = 1589			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 1156 C0 02		PALETTE
   455 = 1158 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 115A			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 59
   460
   461 115A A9 03			lda #$03
   462 115C 8D 92 15			sta ALIVE
   463
   464 				; optimize OK (main.pas), line = 61
   465
   466 115F A9 1F			lda #$1F
   467 1161 8D 15 FF			sta BORDERCOLOR
   468 1164 A9 00			lda #$00
   469 1166 8D 19 FF			sta BGCOLOR
   470
   471 				; optimize OK (main.pas), line = 62
   472
   473 1169 A9 20			lda #$20
   474 116B 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   475 116D A9 C0			lda #$C0
   476 116F 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   477 1171 A9 03			lda #$03
   478 1173 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   479 1175 A9 00			lda #$00
   480 1177 85 08			sta SYSTEM.FILLCHAR_0056.A
   481 1179 A9 0C			lda #$0C
   482 117B 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   483 117D 20 08 11			jsr SYSTEM.FILLCHAR_0056
   484
   485 				; optimize OK (main.pas), line = 64
   486
   487 1180 A9 27			lda #$27
   488 1182 85 58			sta T0B
   489
   490 1184			l_008D
   491 				; --- ForToDoCondition
   492
   493 				; optimize OK (main.pas), line = 65
   494
   495 1184 A4 58			ldy T0B
   496 1186 A9 A0			lda #$A0
   497 1188 99 00 0C			sta $0C00,y
   498
   499 				; optimize OK (main.pas), line = 66
   500
   501 118B 99 C0 0F			sta $0FC0,y
   502
   503 				; optimize OK (main.pas), line = 67
   504
   505 118E A9 41			lda #$41
   506 1190 99 00 08			sta $0800,y
   507
   508 				; optimize OK (main.pas), line = 68
   509
   510 1193 99 C0 0B			sta $0BC0,y
   511
   512 				; --- ForToDoEpilog
   513 1196 C6 58			dec T0B
   514 1198 10 EA			jpl l_008D
   515 119A			l_009B
   516
   517 				; optimize OK (main.pas), line = 71
   518
   519 119A A9 18			lda #$18
   520 119C 85 58			sta T0B
   521
   522 119E			l_00CD
   523 				; --- ForToDoCondition
   524 119E A5 58			lda T0B
   525 11A0 C9 01			cmp #$01
   526 11A2 90 3A			jcc l_00DB
   527
   528 				; optimize OK (main.pas), line = 72
   529
   530 11A4 0A				asl @
   531 11A5 A8				tay
   532 11A6 A9 FF			lda #$FF
   533 11A8 18 79 0E 10			add adr.MUL40,y
   534 11AC 85 12			sta :bp2
   535 11AE A9 0B			lda #$0B
   536 11B0 79 0F 10			adc adr.MUL40+1,y
   537 11B3 85 13			sta :bp2+1
   538 11B5 A0 00			ldy #$00
   539 11B7 A9 A0			lda #$A0
   540 11B9 91 12			sta (:bp2),y
   541 11BB C8				iny
   542 11BC 91 12			sta (:bp2),y
   543
   544 				; optimize OK (main.pas), line = 73
   545
   546 11BE A5 58			lda T0B
   547 11C0 0A				asl @
   548 11C1 A8				tay
   549 11C2 A9 FF			lda #$FF
   550 11C4 18 79 0E 10			add adr.MUL40,y
   551 11C8 85 12			sta :bp2
   552 11CA A9 07			lda #$07
   553 11CC 79 0F 10			adc adr.MUL40+1,y
   554 11CF 85 13			sta :bp2+1
   555 11D1 A0 00			ldy #$00
   556 11D3 A9 41			lda #$41
   557 11D5 91 12			sta (:bp2),y
   558 11D7 C8				iny
   559 11D8 91 12			sta (:bp2),y
   560
   561 				; --- ForToDoEpilog
   562 11DA C6 58			dec T0B
   563 11DC 10 C0			jpl l_00CD
   564 11DE			l_00DB
   565
   566 				; ------------------------------------------------------------
   567
   568 = 0000			@FORTMP_008A	= $00
   569 = 0001			@FORTMP_00CA	= $01
   570 11DE			@exit
   571 					.ifdef @new
   572 					lda <@VarData
   573 					sta :ztmp
   574 					lda >@VarData
   575 					ldy #@VarDataSize-1
   576 					jmp @FreeMem
   577 					els
   578 11DE 60				rts						; ret
   579 					eif
   580 				.endl
   581
   582 11DF			.local	INITPLAYERS					; PROCEDURE
   583
   584 				; optimize OK (main.pas), line = 79
   585
   586 11DF A9 01			lda #$01
   587 11E1 8D 97 15			sta PLAYER1.BRAIN
   588 11E4 A9 0A			lda #$0A
   589 11E6 8D 93 15			sta PLAYER1.X
   590 11E9 8D 94 15			sta PLAYER1.Y
   591 11EC A9 5F			lda #$5F
   592 11EE 8D 95 15			sta PLAYER1.COLOUR
   593 11F1 A9 00			lda #$00
   594 11F3 8D 98 15			sta PLAYER1.ISDEAD
   595 11F6 A9 08			lda #$08
   596 11F8 8D 96 15			sta PLAYER1.DIR
   597
   598 				; optimize OK (main.pas), line = 80
   599
   600 11FB A9 01			lda #$01
   601 11FD 8D 9D 15			sta PLAYER2.BRAIN
   602 1200 A9 1E			lda #$1E
   603 1202 8D 99 15			sta PLAYER2.X
   604 1205 A9 0A			lda #$0A
   605 1207 8D 9A 15			sta PLAYER2.Y
   606 120A A9 5D			lda #$5D
   607 120C 8D 9B 15			sta PLAYER2.COLOUR
   608 120F A9 00			lda #$00
   609 1211 8D 9E 15			sta PLAYER2.ISDEAD
   610 1214 A9 04			lda #$04
   611 1216 8D 9C 15			sta PLAYER2.DIR
   612
   613 				; optimize OK (main.pas), line = 81
   614
   615 1219 A9 01			lda #$01
   616 121B 8D A3 15			sta PLAYER3.BRAIN
   617 121E A9 14			lda #$14
   618 1220 8D 9F 15			sta PLAYER3.X
   619 1223 A9 06			lda #$06
   620 1225 8D A0 15			sta PLAYER3.Y
   621 1228 A9 71			lda #$71
   622 122A 8D A1 15			sta PLAYER3.COLOUR
   623 122D A9 00			lda #$00
   624 122F 8D A4 15			sta PLAYER3.ISDEAD
   625 1232 A9 02			lda #$02
   626 1234 8D A2 15			sta PLAYER3.DIR
   627
   628 				; optimize OK (main.pas), line = 82
   629
   630 1237 A9 01			lda #$01
   631 1239 8D A9 15			sta PLAYER4.BRAIN
   632 123C A9 14			lda #$14
   633 123E 8D A5 15			sta PLAYER4.X
   634 1241 A9 12			lda #$12
   635 1243 8D A6 15			sta PLAYER4.Y
   636 1246 A9 55			lda #$55
   637 1248 8D A7 15			sta PLAYER4.COLOUR
   638 124B A9 00			lda #$00
   639 124D 8D AA 15			sta PLAYER4.ISDEAD
   640 1250 A9 01			lda #$01
   641 1252 8D A8 15			sta PLAYER4.DIR
   642 1255			@exit
   643 					.ifdef @new
   644 					lda <@VarData
   645 					sta :ztmp
   646 					lda >@VarData
   647 					ldy #@VarDataSize-1
   648 					jmp @FreeMem
   649 					els
   650 1255 60				rts						; ret
   651 					eif
   652 				.endl
   653
   654 1256			.local	PUTCHAR						; PROCEDURE
   655
   656 				; optimize OK (main.pas), line = 89
   657
   658 1256 AD AC 15			lda Y
   659 1259 0A				asl @
   660 125A A8				tay
   661 125B B9 0E 10			lda adr.MUL40,y
   662 125E 18 6D AB 15			add X
   663 1262 85 5B			sta T0W
   664 1264 B9 0F 10			lda adr.MUL40+1,y
   665 1267 69 08			adc #$08
   666 1269 85 5C			sta T0W+1
   667
   668 				; optimize OK (main.pas), line = 90
   669
   670 126B 85 11			sta :bp+1
   671 126D A4 5B			ldy T0W
   672 126F AD AE 15			lda C
   673 1272 91 10			sta (:bp),y
   674 1274 A5 5C			lda T0W+1
   675 1276 18 69 04			add #$04
   676 1279 85 11			sta :bp+1
   677 127B AD AD 15			lda V
   678 127E 91 10			sta (:bp),y
   679
   680 				; ------------------------------------------------------------
   681
   682 = 15AB			X	= DATAORIGIN+$002B
   683 = 15AC			Y	= DATAORIGIN+$002C
   684 = 15AD			V	= DATAORIGIN+$002D
   685 = 15AE			C	= DATAORIGIN+$002E
   686
   687 = 15AB			@VarData	= X
   688 = 0004			@VarDataSize	= 4
   689
   690 1280			@exit
   691 					.ifdef @new
   692 					lda <@VarData
   693 					sta :ztmp
   694 					lda >@VarData
   695 					ldy #@VarDataSize-1
   696 					jmp @FreeMem
   697 					els
   698 1280 60				rts						; ret
   699 					eif
   700 				.endl
   701
   702 1281			.local	CHECKAVAILDIR					; PROCEDURE
   703
   704 				; optimize OK (main.pas), line = 95
   705
   706 1281 A9 00			lda #$00
   707 1283 8D 91 15			sta AVAILDIR
   708
   709 				; optimize OK (main.pas), line = 96
   710
   711 1286 AD B0 15			lda Y
   712 1289 0A				asl @
   713 128A A8				tay
   714 128B B9 0E 10			lda adr.MUL40,y
   715 128E 18 6D AF 15			add X
   716 1292 85 5B			sta T0W
   717 1294 B9 0F 10			lda adr.MUL40+1,y
   718 1297 69 0C			adc #$0C
   719 1299 85 5C			sta T0W+1
   720
   721 				; optimize OK (main.pas), line = 98
   722
   723 129B A5 5B			lda T0W
   724 129D 38 E9 28			sub #$28
   725 12A0 85 21			sta :STACKORIGIN+9
   726 12A2 A5 5C			lda T0W+1
   727 12A4 E9 00			sbc #$00
   728 12A6 85 11			sta :bp+1
   729 12A8 A4 21			ldy :STACKORIGIN+9
   730 12AA B1 10			lda (:bp),y
   731 12AC C9 20			cmp #$20
   732 12AE D0 08			jne l_01B0
   733 12B0 AD 91 15			lda AVAILDIR
   734 12B3 09 01			ora #$01
   735 12B5 8D 91 15			sta AVAILDIR
   736 12B8			l_01B0
   737
   738 				; optimize OK (main.pas), line = 99
   739
   740 12B8 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   741 12C0 A0 28			ldy #$28
   742 12C2 B1 12			lda (:bp2),y
   743 12C4 C9 20			cmp #$20
   744 12C6 D0 08			jne l_01D3
   745 12C8 AD 91 15			lda AVAILDIR
   746 12CB 09 02			ora #$02
   747 12CD 8D 91 15			sta AVAILDIR
   748 12D0			l_01D3
   749
   750 				; optimize OK (main.pas), line = 100
   751
   752 12D0 A5 5B			lda T0W
   753 12D2 38 E9 01			sub #$01
   754 12D5 85 21			sta :STACKORIGIN+9
   755 12D7 A5 5C			lda T0W+1
   756 12D9 E9 00			sbc #$00
   757 12DB 85 11			sta :bp+1
   758 12DD A4 21			ldy :STACKORIGIN+9
   759 12DF B1 10			lda (:bp),y
   760 12E1 C9 20			cmp #$20
   761 12E3 D0 08			jne l_01F6
   762 12E5 AD 91 15			lda AVAILDIR
   763 12E8 09 04			ora #$04
   764 12EA 8D 91 15			sta AVAILDIR
   765 12ED			l_01F6
   766
   767 				; optimize OK (main.pas), line = 101
   768
   769 12ED A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   770 12F5 A0 01			ldy #$01
   771 12F7 B1 12			lda (:bp2),y
   772 12F9 C9 20			cmp #$20
   773 12FB D0 08			jne l_0219
   774 12FD AD 91 15			lda AVAILDIR
   775 1300 09 08			ora #$08
   776 1302 8D 91 15			sta AVAILDIR
   777 1305			l_0219
   778
   779 				; ------------------------------------------------------------
   780
   781 = 15AF			X	= DATAORIGIN+$002F
   782 = 15B0			Y	= DATAORIGIN+$0030
   783
   784 = 15AF			@VarData	= X
   785 = 0002			@VarDataSize	= 2
   786
   787 1305			@exit
   788 					.ifdef @new
   789 					lda <@VarData
   790 					sta :ztmp
   791 					lda >@VarData
   792 					ldy #@VarDataSize-1
   793 					jmp @FreeMem
   794 					els
   795 1305 60				rts						; ret
   796 					eif
   797 				.endl
   798
   799 1306			.local	AI_SIMPLERANDOM					; PROCEDURE
   800
   801 				; optimize OK (main.pas), line = 109
   802
   803 1306 A9 00			lda #$00
   804 1308 85 5A			sta T0N
   805
   806 				; --- RepeatUntilProlog
   807 130A			l_022F
   808
   809 				; optimize FAIL (0, main.pas), line = 111
   810
   811 130A A9 04			lda #$04
   812 130C 20 29 11			jsr SYSTEM.RANDOM_006C
   813 130F B4 18			ldy :STACKORIGIN,x
   814 1311 B9 40 10			lda adr.DIRECTION,y
   815 1314 85 59			sta NEWDIR
   816 1316 CA				dex
   817
   818 				; optimize OK (main.pas), line = 112
   819
   820 1317 AD 91 15			lda AVAILDIR
   821 131A 25 59			and NEWDIR
   822 131C F0 04			jeq l_024F
   823 131E A9 01			lda #$01
   824 1320 85 5A			sta T0N
   825 1322			l_024F
   826
   827 				; optimize OK (main.pas), line = 113
   828
   829 1322 A5 5A			lda T0N
   830 1324 F0 E4			jeq l_022F
   831 1326			@exit
   832 					.ifdef @new
   833 					lda <@VarData
   834 					sta :ztmp
   835 					lda >@VarData
   836 					ldy #@VarDataSize-1
   837 					jmp @FreeMem
   838 					els
   839 1326 60				rts						; ret
   840 					eif
   841 				.endl
   842
   843 1327			.local	PLAYERMOVE					; PROCEDURE
   844
   845 				; optimize OK (main.pas), line = 122
   846
   847 1327 AD B1 15			lda P
   848 132A 8D B3 15			sta PLY
   849 132D 85 12			sta :bp2
   850 132F AD B2 15			lda P+1
   851 1332 8D B4 15			sta PLY+1
   852 1335 85 13			sta :bp2+1
   853 				; optimize OK (main.pas), line = 124
   854 1337 A0 05			ldy #PLY.ISDEAD-DATAORIGIN
   855 1339 B1 12			lda (:bp2),y
   856 133B F0 03 4C 02 15		jne l_0275
   857
   858 				; optimize OK (main.pas), line = 126
   859
   860 1340 A0 00			ldy #PLY.X-DATAORIGIN
   861 1342 B1 12			lda (:bp2),y
   862 1344 8D AF 15			sta CHECKAVAILDIR.X
   863 1347 A0 01			ldy #PLY.Y-DATAORIGIN
   864 1349 B1 12			lda (:bp2),y
   865 134B 8D B0 15			sta CHECKAVAILDIR.Y
   866 134E 20 81 12			jsr CHECKAVAILDIR
   867
   868 				; optimize OK (main.pas), line = 128
   869
   870 1351 AD 91 15			lda AVAILDIR
   871 1354 D0 36			jne l_028F
   872
   873 				; optimize OK (main.pas), line = 129
   874
   875 1356 AC B3 15 84 12 AC + 	mwy PLY :bp2
   876 1360 A0 05			ldy #PLY.ISDEAD-DATAORIGIN
   877 1362 A9 01			lda #$01
   878 1364 91 12			sta (:bp2),y
   879 1366 CE 92 15			dec ALIVE
   880
   881 				; optimize OK (main.pas), line = 130
   882
   883 1369 A0 00			ldy #PLY.X-DATAORIGIN
   884 136B B1 12			lda (:bp2),y
   885 136D 8D AB 15			sta PUTCHAR.X
   886 1370 A0 01			ldy #PLY.Y-DATAORIGIN
   887 1372 B1 12			lda (:bp2),y
   888 1374 8D AC 15			sta PUTCHAR.Y
   889 1377 A0 02			ldy #PLY.COLOUR-DATAORIGIN
   890 1379 B1 12			lda (:bp2),y
   891 137B 18 69 80			add #$80
   892 137E 8D AE 15			sta PUTCHAR.C
   893 1381 A9 57			lda #$57
   894 1383 8D AD 15			sta PUTCHAR.V
   895 1386 20 56 12			jsr PUTCHAR
   896 1389 4C 02 15			jmp l_02B0
   897 138C			l_028F
   898
   899 				; optimize OK (main.pas), line = 133
   900
   901 138C AC B3 15 84 12 AC + 	mwy PLY :bp2
   902 1396 A0 04			ldy #PLY.BRAIN-DATAORIGIN
   903 1398 B1 12			lda (:bp2),y
   904 139A 8D B5 15			sta @CASETMP_0003
   905 139D C9 01			cmp #$01
   906 139F D0 03			jne l_02BB
   907 13A1			@
   908
   909 				; optimize FAIL ('AI_SIMPLERANDOM', main.pas), line = 134
   910
   911 13A1 20 06 13			jsr AI_SIMPLERANDOM
   912 13A4			l_02BB
   913 13A4			a_0003
   914
   915 				; optimize OK (main.pas), line = 137
   916
   917 13A4 AC B3 15 84 12 AC + 	mwy PLY :bp2
   918 13AE A0 03			ldy #PLY.DIR-DATAORIGIN
   919 13B0 B1 12			lda (:bp2),y
   920 13B2 C5 59			cmp NEWDIR
   921 13B4 D0 14			jne l_02D5
   922
   923 				; optimize OK (main.pas), line = 138
   924
   925 13B6 A5 59			lda NEWDIR
   926 13B8 29 0C			and #$0C
   927 13BA F0 07			jeq l_02EC
   928 13BC A9 40			lda #$40
   929 13BE 85 58			sta T0B
   930 13C0 4C C7 13			jmp l_02FA
   931 13C3			l_02EC
   932 13C3 A9 42			lda #$42
   933 13C5 85 58			sta T0B
   934 13C7			l_02FA
   935 13C7 4C 3A 14			jmp l_0307
   936 13CA			l_02D5
   937
   938 				; optimize OK (main.pas), line = 140
   939
   940 13CA AC B3 15 84 12 AC + 	mwy PLY :bp2
   941 13D4 A0 03			ldy #PLY.DIR-DATAORIGIN
   942 13D6 B1 12			lda (:bp2),y
   943 13D8 29 0A			and #$0A
   944 13DA F0 0A			jeq l_032D
   945 13DC A5 59			lda NEWDIR
   946 13DE 29 05			and #$05
   947 13E0 F0 04			jeq l_032D
   948 13E2 A9 7D			lda #$7D
   949 13E4 85 58			sta T0B
   950 13E6			l_032D
   951
   952 				; optimize OK (main.pas), line = 141
   953
   954 13E6 AC B3 15 84 12 AC + 	mwy PLY :bp2
   955 13F0 A0 03			ldy #PLY.DIR-DATAORIGIN
   956 13F2 B1 12			lda (:bp2),y
   957 13F4 29 09			and #$09
   958 13F6 F0 0A			jeq l_035A
   959 13F8 A5 59			lda NEWDIR
   960 13FA 29 06			and #$06
   961 13FC F0 04			jeq l_035A
   962 13FE A9 6E			lda #$6E
   963 1400 85 58			sta T0B
   964 1402			l_035A
   965
   966 				; optimize OK (main.pas), line = 142
   967
   968 1402 AC B3 15 84 12 AC + 	mwy PLY :bp2
   969 140C A0 03			ldy #PLY.DIR-DATAORIGIN
   970 140E B1 12			lda (:bp2),y
   971 1410 29 06			and #$06
   972 1412 F0 0A			jeq l_0387
   973 1414 A5 59			lda NEWDIR
   974 1416 29 09			and #$09
   975 1418 F0 04			jeq l_0387
   976 141A A9 6D			lda #$6D
   977 141C 85 58			sta T0B
   978 141E			l_0387
   979
   980 				; optimize OK (main.pas), line = 143
   981
   982 141E AC B3 15 84 12 AC + 	mwy PLY :bp2
   983 1428 A0 03			ldy #PLY.DIR-DATAORIGIN
   984 142A B1 12			lda (:bp2),y
   985 142C 29 05			and #$05
   986 142E F0 0A			jeq l_03B4
   987 1430 A5 59			lda NEWDIR
   988 1432 29 0A			and #$0A
   989 1434 F0 04			jeq l_03B4
   990 1436 A9 70			lda #$70
   991 1438 85 58			sta T0B
   992 143A			l_03B4
   993 143A			l_0307
   994
   995 				; optimize OK (main.pas), line = 145
   996
   997 143A AC B3 15 84 12 AC + 	mwy PLY :bp2
   998 1444 A0 00			ldy #PLY.X-DATAORIGIN
   999 1446 B1 12			lda (:bp2),y
  1000 1448 8D AB 15			sta PUTCHAR.X
  1001 144B A0 01			ldy #PLY.Y-DATAORIGIN
  1002 144D B1 12			lda (:bp2),y
  1003 144F 8D AC 15			sta PUTCHAR.Y
  1004 1452 A0 02			ldy #PLY.COLOUR-DATAORIGIN
  1005 1454 B1 12			lda (:bp2),y
  1006 1456 8D AE 15			sta PUTCHAR.C
  1007 1459 A5 58			lda T0B
  1008 145B 8D AD 15			sta PUTCHAR.V
  1009 145E 20 56 12			jsr PUTCHAR
  1010
  1011 				; optimize OK (main.pas), line = 147
  1012
  1013 1461 AC B3 15 84 12 AC + 	mwy PLY :bp2
  1014 146B A0 03			ldy #PLY.DIR-DATAORIGIN
  1015 146D A5 59			lda NEWDIR
  1016 146F 91 12			sta (:bp2),y
  1017
  1018 				; optimize OK (main.pas), line = 149
  1019
  1020 1471 A5 59			lda NEWDIR
  1021 1473 8D B6 15			sta @CASETMP_0004
  1022 1476 C9 01			cmp #$01
  1023 1478 D0 16			jne l_03D9
  1024 147A			@
  1025
  1026 				; optimize OK (main.pas), line = 150
  1027
  1028 147A AC B3 15 84 12 AC + 	mwy PLY :bp2
  1029 1484 A0 01			ldy #PLY.Y-DATAORIGIN
  1030 1486 B1 12			lda (:bp2),y
  1031 1488 38 E9 01			sub #$01
  1032 148B 91 12			sta (:bp2),y
  1033
  1034 148D 4C DB 14			jmp a_0004
  1035 1490			l_03D9
  1036 1490 C9 02			cmp #$02
  1037 1492 D0 16			jne l_03E3
  1038 1494			@
  1039
  1040 				; optimize OK (main.pas), line = 151
  1041
  1042 1494 AC B3 15 84 12 AC + 	mwy PLY :bp2
  1043 149E A0 01			ldy #PLY.Y-DATAORIGIN
  1044 14A0 B1 12			lda (:bp2),y
  1045 14A2 18 69 01			add #$01
  1046 14A5 91 12			sta (:bp2),y
  1047
  1048 14A7 4C DB 14			jmp a_0004
  1049 14AA			l_03E3
  1050 14AA C9 04			cmp #$04
  1051 14AC D0 16			jne l_03ED
  1052 14AE			@
  1053
  1054 				; optimize OK (main.pas), line = 152
  1055
  1056 14AE AC B3 15 84 12 AC + 	mwy PLY :bp2
  1057 14B8 A0 00			ldy #PLY.X-DATAORIGIN
  1058 14BA B1 12			lda (:bp2),y
  1059 14BC 38 E9 01			sub #$01
  1060 14BF 91 12			sta (:bp2),y
  1061
  1062 14C1 4C DB 14			jmp a_0004
  1063 14C4			l_03ED
  1064 14C4 C9 08			cmp #$08
  1065 14C6 D0 13			jne l_03F7
  1066 14C8			@
  1067
  1068 				; optimize OK (main.pas), line = 153
  1069
  1070 14C8 AC B3 15 84 12 AC + 	mwy PLY :bp2
  1071 14D2 A0 00			ldy #PLY.X-DATAORIGIN
  1072 14D4 B1 12			lda (:bp2),y
  1073 14D6 18 69 01			add #$01
  1074 14D9 91 12			sta (:bp2),y
  1075
  1076 14DB			l_03F7
  1077 14DB			a_0004
  1078
  1079 				; optimize OK (main.pas), line = 156
  1080
  1081 14DB AC B3 15 84 12 AC + 	mwy PLY :bp2
  1082 14E5 A0 00			ldy #PLY.X-DATAORIGIN
  1083 14E7 B1 12			lda (:bp2),y
  1084 14E9 8D AB 15			sta PUTCHAR.X
  1085 14EC A0 01			ldy #PLY.Y-DATAORIGIN
  1086 14EE B1 12			lda (:bp2),y
  1087 14F0 8D AC 15			sta PUTCHAR.Y
  1088 14F3 A0 02			ldy #PLY.COLOUR-DATAORIGIN
  1089 14F5 B1 12			lda (:bp2),y
  1090 14F7 8D AE 15			sta PUTCHAR.C
  1091 14FA A9 51			lda #$51
  1092 14FC 8D AD 15			sta PUTCHAR.V
  1093 14FF 20 56 12			jsr PUTCHAR
  1094 1502			l_02B0
  1095 1502			l_0275
  1096
  1097 				; ------------------------------------------------------------
  1098
  1099 = 15B1			P	= DATAORIGIN+$0031
  1100 = 15B3			PLY	= DATAORIGIN+$0033
  1101 = 1580			PLY.X	= DATAORIGIN+$0000
  1102 = 1581			PLY.Y	= DATAORIGIN+$0001
  1103 = 1582			PLY.COLOUR	= DATAORIGIN+$0002
  1104 = 1583			PLY.DIR	= DATAORIGIN+$0003
  1105 = 1584			PLY.BRAIN	= DATAORIGIN+$0004
  1106 = 1585			PLY.ISDEAD	= DATAORIGIN+$0005
  1107 = 15B5			@CASETMP_0003	= DATAORIGIN+$0035
  1108 = 15B6			@CASETMP_0004	= DATAORIGIN+$0036
  1109
  1110 = 15B1			@VarData	= P
  1111 = 0010			@VarDataSize	= 16
  1112
  1113 1502			@exit
  1114 					.ifdef @new
  1115 					lda <@VarData
  1116 					sta :ztmp
  1117 					lda >@VarData
  1118 					ldy #@VarDataSize-1
  1119 					jmp @FreeMem
  1120 					els
  1121 1502 60				rts						; ret
  1122 					eif
  1123 				.endl
  1124 1503			l_0007
  1125
  1126 				; optimize OK (main.pas), line = 167
  1127
  1128 1503 A9 00			lda #$00
  1129 1505 8D 90 15			sta GAMEOVER
  1130
  1131 				; --- RepeatUntilProlog
  1132 1508			l_0413
  1133
  1134 				; optimize FAIL ('INITPLAYERS', main.pas), line = 170
  1135
  1136 1508 20 DF 11			jsr INITPLAYERS
  1137
  1138 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 171
  1139
  1140 150B 20 5A 11			jsr INITPLAYFIELD
  1141
  1142 				; --- RepeatUntilProlog
  1143 150E			l_0416
  1144
  1145 				; optimize OK (main.pas), line = 174
  1146
  1147 150E A9 05			lda #$05
  1148 1510 8D 8C 15			sta SYSTEM.PAUSE_006B.N
  1149 1513 A9 00			lda #$00
  1150 1515 8D 8D 15			sta SYSTEM.PAUSE_006B.N+1
  1151 1518 20 0C 11			jsr SYSTEM.PAUSE_006B
  1152
  1153 				; optimize OK (main.pas), line = 175
  1154
  1155 151B AD 76 15			lda PLAYER1
  1156 151E 8D B1 15			sta PLAYERMOVE.P
  1157 1521 AD 77 15			lda PLAYER1+1
  1158 1524 8D B2 15			sta PLAYERMOVE.P+1
  1159 1527 20 27 13			jsr PLAYERMOVE
  1160
  1161 				; optimize OK (main.pas), line = 176
  1162
  1163 152A AD 78 15			lda PLAYER2
  1164 152D 8D B1 15			sta PLAYERMOVE.P
  1165 1530 AD 79 15			lda PLAYER2+1
  1166 1533 8D B2 15			sta PLAYERMOVE.P+1
  1167 1536 20 27 13			jsr PLAYERMOVE
  1168
  1169 				; optimize OK (main.pas), line = 177
  1170
  1171 1539 AD 7A 15			lda PLAYER3
  1172 153C 8D B1 15			sta PLAYERMOVE.P
  1173 153F AD 7B 15			lda PLAYER3+1
  1174 1542 8D B2 15			sta PLAYERMOVE.P+1
  1175 1545 20 27 13			jsr PLAYERMOVE
  1176
  1177 				; optimize OK (main.pas), line = 178
  1178
  1179 1548 AD 7C 15			lda PLAYER4
  1180 154B 8D B1 15			sta PLAYERMOVE.P
  1181 154E AD 7D 15			lda PLAYER4+1
  1182 1551 8D B2 15			sta PLAYERMOVE.P+1
  1183 1554 20 27 13			jsr PLAYERMOVE
  1184
  1185 				; optimize OK (main.pas), line = 179
  1186
  1187 1557 AD 92 15			lda ALIVE
  1188 155A D0 B2			jne l_0416
  1189
  1190 				; optimize OK (main.pas), line = 181
  1191
  1192 155C A9 64			lda #$64
  1193 155E 8D 8C 15			sta SYSTEM.PAUSE_006B.N
  1194 1561 A9 00			lda #$00
  1195 1563 8D 8D 15			sta SYSTEM.PAUSE_006B.N+1
  1196 1566 20 0C 11			jsr SYSTEM.PAUSE_006B
  1197
  1198 				; optimize OK (main.pas), line = 182
  1199
  1200 1569 AD 90 15			lda GAMEOVER
  1201 156C F0 9A			jeq l_0413
  1202
  1203 				; ------------------------------------------------------------
  1204
  1205 = 0800			ATTRIBUTE_ADDR	= $0800
  1206 = 0C00			SCREEN_ADDR	= $0C00
  1207 = 00A0			WALL	= $A0
  1208 = 0041			WALL_COLOUR	= $41
  1209 = 0020			EMPTY	= $20
  1210 = 0051			PLY_HEAD	= $51
  1211 = 0057			PLY_CRASH	= $57
  1212 = 0042			PLY_TAIL_UD	= $42
  1213 = 0040			PLY_TAIL_LR	= $40
  1214 = 007D			PLY_TAIL_RD	= $7D
  1215 = 006E			PLY_TAIL_RU	= $6E
  1216 = 006D			PLY_TAIL_LD	= $6D
  1217 = 0070			PLY_TAIL_LU	= $70
  1218 = 005F			PLY1_COLOUR	= $5F
  1219 = 005D			PLY2_COLOUR	= $5D
  1220 = 0071			PLY3_COLOUR	= $71
  1221 = 0055			PLY4_COLOUR	= $55
  1222 = 0001			JOY_UP	= $01
  1223 = 0002			JOY_DOWN	= $02
  1224 = 0004			JOY_LEFT	= $04
  1225 = 0008			JOY_RIGHT	= $08
  1226 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1227 156E			.var MUL40	= adr.MUL40 .word
  1228 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1229 156E			.var DIRECTION	= adr.DIRECTION .word
  1230 = FF15			BORDERCOLOR	= $FF15
  1231 = FF19			BGCOLOR	= $FF19
  1232 = 0058			T0B	= $58
  1233 = 0059			NEWDIR	= $59
  1234 = 005A			T0N	= $5A
  1235 = 005B			T0W	= $5B
  1236 = 1590			GAMEOVER	= DATAORIGIN+$0010
  1237 = 1591			AVAILDIR	= DATAORIGIN+$0011
  1238 = 1592			ALIVE	= DATAORIGIN+$0012
  1239 = 1593			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  1240 156E			.var PLAYER1	= adr.PLAYER1 .word
  1241 = 1593			PLAYER1.X	= DATAORIGIN+$0013
  1242 = 1594			PLAYER1.Y	= DATAORIGIN+$0014
  1243 = 1595			PLAYER1.COLOUR	= DATAORIGIN+$0015
  1244 = 1596			PLAYER1.DIR	= DATAORIGIN+$0016
  1245 = 1597			PLAYER1.BRAIN	= DATAORIGIN+$0017
  1246 = 1598			PLAYER1.ISDEAD	= DATAORIGIN+$0018
  1247 = 1599			adr.PLAYER2	= [DATAORIGIN+$0019] .array [6]
  1248 156E			.var PLAYER2	= adr.PLAYER2 .word
  1249 = 1599			PLAYER2.X	= DATAORIGIN+$0019
  1250 = 159A			PLAYER2.Y	= DATAORIGIN+$001A
  1251 = 159B			PLAYER2.COLOUR	= DATAORIGIN+$001B
  1252 = 159C			PLAYER2.DIR	= DATAORIGIN+$001C
  1253 = 159D			PLAYER2.BRAIN	= DATAORIGIN+$001D
  1254 = 159E			PLAYER2.ISDEAD	= DATAORIGIN+$001E
  1255 = 159F			adr.PLAYER3	= [DATAORIGIN+$001F] .array [6]
  1256 156E			.var PLAYER3	= adr.PLAYER3 .word
  1257 = 159F			PLAYER3.X	= DATAORIGIN+$001F
  1258 = 15A0			PLAYER3.Y	= DATAORIGIN+$0020
  1259 = 15A1			PLAYER3.COLOUR	= DATAORIGIN+$0021
  1260 = 15A2			PLAYER3.DIR	= DATAORIGIN+$0022
  1261 = 15A3			PLAYER3.BRAIN	= DATAORIGIN+$0023
  1262 = 15A4			PLAYER3.ISDEAD	= DATAORIGIN+$0024
  1263 = 15A5			adr.PLAYER4	= [DATAORIGIN+$0025] .array [6]
  1264 156E			.var PLAYER4	= adr.PLAYER4 .word
  1265 = 15A5			PLAYER4.X	= DATAORIGIN+$0025
  1266 = 15A6			PLAYER4.Y	= DATAORIGIN+$0026
  1267 = 15A7			PLAYER4.COLOUR	= DATAORIGIN+$0027
  1268 = 15A8			PLAYER4.DIR	= DATAORIGIN+$0028
  1269 = 15A9			PLAYER4.BRAIN	= DATAORIGIN+$0029
  1270 = 15AA			PLAYER4.ISDEAD	= DATAORIGIN+$002A
  1271 156E			@exit
  1272
  1273 156E A2 00		@halt	ldx #$00
  1274 1570 9A				txs
  1275
  1276 1571 60				rts
  1277
  1278 				; ------------------------------------------------------------
  1279
  1280 				; ------------------------------------------------------------
  1281
  1282 1572			.local	@DEFINES
  1283 1572			C4P
  1284 				.endl
  1285
  1286 1572			.local	@RESOURCE
  1287 				.endl
  1288
  1289 = 1572 0E 10		MUL40
  1289 = 1574 40 10		DIRECTION
  1289 = 1576 93 15		PLAYER1
  1289 = 1578 99 15		PLAYER2
  1289 = 157A 9F 15		PLAYER3
  1289 = 157C A5 15		PLAYER4
  1289 				.endl							; MAIN
  1290
  1291 				; ------------------------------------------------------------
  1292 				; ------------------------------------------------------------
  1293
  1294 				.macro	UNITINITIALIZATION
  1295 				
  1296 					.ifdef MAIN.SYSTEM.@UnitInit
  1297 					jsr MAIN.SYSTEM.@UnitInit
  1298 					eif
  1299 				.endm
  1300
  1301 				; ------------------------------------------------------------
  1302
  1303 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1304 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1304 				SYSTEM: $10BE..$1159
  1305 					eif
  1306
  1307 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1307 				CODE: $100E..$1571
  1308
  1309 				; ------------------------------------------------------------
  1310
  1311 157E				.align $04
  1312
  1313 1580			DATAORIGIN
  1314 1580 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1315
  1316 = 0006			VARINITSIZE	= *-DATAORIGIN
  1317 = 0037			VARDATASIZE	= 55
  1318
  1319 = 15B7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1320
  1321 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1321 				DATA: $1580..$15B7
  1322
  1323 				; ------------------------------------------------------------
  1324
  1325 				.macro	STATICDATA
  1326 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1327 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1328 				.by  $C0 $03 $01 $02 $04 $08
  1329 				.endm
  1330
  1331 					end
