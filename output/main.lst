mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 05 17			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0038			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 171A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 C8			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 52 16 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 52 85 02 A9 17 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 58 16			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 1F 17		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 1F 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 171F			RESULT	= DATAORIGIN+$000B
   182
   183 = 171F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 20 17		loop  lda n
   307 1126 0D 21 17		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 20 17 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1720			N	= DATAORIGIN+$000C
   321
   322 = 1720			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 22 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 22 17		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 23 17		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 23 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1722			RANGE	= DATAORIGIN+$000E
   383 = 1723			RESULT	= DATAORIGIN+$000F
   384
   385 = 1722			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1714			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1716			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1718			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1719			FILEMODE	= DATAORIGIN+$0005
   450 = 171A			GRAPHMODE	= DATAORIGIN+$0006
   451 = 171B			IORESULT	= DATAORIGIN+$0007
   452 = 171C			EOLN	= DATAORIGIN+$0008
   453 = 171D			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 1171 A9 1F			lda #$1F
   462 1173 8D 15 FF			sta BORDERCOLOR
   463 1176 A9 00			lda #$00
   464 1178 8D 19 FF			sta BGCOLOR
   465
   466 				; optimize OK (main.pas), line = 66
   467
   468 117B A9 20			lda #$20
   469 117D 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   470 117F A9 C0			lda #$C0
   471 1181 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   472 1183 A9 03			lda #$03
   473 1185 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   474 1187 A9 00			lda #$00
   475 1189 85 08			sta SYSTEM.FILLCHAR_0056.A
   476 118B A9 0C			lda #$0C
   477 118D 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   478 118F 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   479
   480 				; optimize OK (main.pas), line = 68
   481
   482 1192 A9 27			lda #$27
   483 1194 85 58			sta T0B
   484
   485 1196			l_0089
   486 				; --- ForToDoCondition
   487
   488 				; optimize OK (main.pas), line = 69
   489
   490 1196 A4 58			ldy T0B
   491 1198 A9 A0			lda #$A0
   492 119A 99 00 0C			sta $0C00,y
   493
   494 				; optimize OK (main.pas), line = 70
   495
   496 119D 99 C0 0F			sta $0FC0,y
   497
   498 				; optimize OK (main.pas), line = 71
   499
   500 11A0 A9 41			lda #$41
   501 11A2 99 00 08			sta $0800,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 11A5 99 C0 0B			sta $0BC0,y
   506
   507 				; --- ForToDoEpilog
   508 11A8 C6 58			dec T0B
   509 11AA 10 EA			jpl l_0089
   510 11AC			l_0097
   511
   512 				; optimize OK (main.pas), line = 75
   513
   514 11AC A9 18			lda #$18
   515 11AE 85 58			sta T0B
   516
   517 11B0			l_00C9
   518 				; --- ForToDoCondition
   519 11B0 A5 58			lda T0B
   520 11B2 C9 01			cmp #$01
   521 11B4 90 3A			jcc l_00D7
   522
   523 				; optimize OK (main.pas), line = 76
   524
   525 11B6 0A				asl @
   526 11B7 A8				tay
   527 11B8 A9 FF			lda #$FF
   528 11BA 18 79 0E 10			add adr.MUL40,y
   529 11BE 85 12			sta :bp2
   530 11C0 A9 0B			lda #$0B
   531 11C2 79 0F 10			adc adr.MUL40+1,y
   532 11C5 85 13			sta :bp2+1
   533 11C7 A0 00			ldy #$00
   534 11C9 A9 A0			lda #$A0
   535 11CB 91 12			sta (:bp2),y
   536 11CD C8				iny
   537 11CE 91 12			sta (:bp2),y
   538
   539 				; optimize OK (main.pas), line = 77
   540
   541 11D0 A5 58			lda T0B
   542 11D2 0A				asl @
   543 11D3 A8				tay
   544 11D4 A9 FF			lda #$FF
   545 11D6 18 79 0E 10			add adr.MUL40,y
   546 11DA 85 12			sta :bp2
   547 11DC A9 07			lda #$07
   548 11DE 79 0F 10			adc adr.MUL40+1,y
   549 11E1 85 13			sta :bp2+1
   550 11E3 A0 00			ldy #$00
   551 11E5 A9 41			lda #$41
   552 11E7 91 12			sta (:bp2),y
   553 11E9 C8				iny
   554 11EA 91 12			sta (:bp2),y
   555
   556 				; --- ForToDoEpilog
   557 11EC C6 58			dec T0B
   558 11EE 10 C0			jpl l_00C9
   559 11F0			l_00D7
   560
   561 				; ------------------------------------------------------------
   562
   563 = 0000			@FORTMP_0086	= $00
   564 = 0001			@FORTMP_00C6	= $01
   565 11F0			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 11F0 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 11F1			.local	INITPLAYERS					; PROCEDURE
   578
   579 				; optimize OK (main.pas), line = 83
   580
   581 11F1 A9 01			lda #$01
   582 11F3 8D 2E 17			sta PLAYER1.BRAIN
   583 11F6 A9 0A			lda #$0A
   584 11F8 8D 29 17			sta PLAYER1.X
   585 11FB A9 0C			lda #$0C
   586 11FD 8D 2A 17			sta PLAYER1.Y
   587 1200 A9 51			lda #$51
   588 1202 8D 2B 17			sta PLAYER1.HEAD
   589
   590 				; optimize OK (main.pas), line = 84
   591
   592 1205 A9 5F			lda #$5F
   593 1207 8D 2C 17			sta PLAYER1.COLOUR
   594 120A A9 00			lda #$00
   595 120C 8D 2F 17			sta PLAYER1.ISDEAD
   596 120F A9 08			lda #$08
   597 1211 8D 2D 17			sta PLAYER1.DIR
   598
   599 				; optimize OK (main.pas), line = 86
   600
   601 1214 A9 01			lda #$01
   602 1216 8D 35 17			sta PLAYER2.BRAIN
   603 1219 A9 1E			lda #$1E
   604 121B 8D 30 17			sta PLAYER2.X
   605 121E A9 0C			lda #$0C
   606 1220 8D 31 17			sta PLAYER2.Y
   607 1223 A9 51			lda #$51
   608 1225 8D 32 17			sta PLAYER2.HEAD
   609
   610 				; optimize OK (main.pas), line = 87
   611
   612 1228 A9 5D			lda #$5D
   613 122A 8D 33 17			sta PLAYER2.COLOUR
   614 122D A9 00			lda #$00
   615 122F 8D 36 17			sta PLAYER2.ISDEAD
   616 1232 A9 04			lda #$04
   617 1234 8D 34 17			sta PLAYER2.DIR
   618
   619 				; optimize OK (main.pas), line = 89
   620
   621 1237 A9 01			lda #$01
   622 1239 8D 3C 17			sta PLAYER3.BRAIN
   623 123C A9 14			lda #$14
   624 123E 8D 37 17			sta PLAYER3.X
   625 1241 A9 06			lda #$06
   626 1243 8D 38 17			sta PLAYER3.Y
   627 1246 A9 51			lda #$51
   628 1248 8D 39 17			sta PLAYER3.HEAD
   629
   630 				; optimize OK (main.pas), line = 90
   631
   632 124B A9 71			lda #$71
   633 124D 8D 3A 17			sta PLAYER3.COLOUR
   634 1250 A9 00			lda #$00
   635 1252 8D 3D 17			sta PLAYER3.ISDEAD
   636 1255 A9 02			lda #$02
   637 1257 8D 3B 17			sta PLAYER3.DIR
   638
   639 				; optimize OK (main.pas), line = 92
   640
   641 125A A9 01			lda #$01
   642 125C 8D 43 17			sta PLAYER4.BRAIN
   643 125F A9 14			lda #$14
   644 1261 8D 3E 17			sta PLAYER4.X
   645 1264 A9 12			lda #$12
   646 1266 8D 3F 17			sta PLAYER4.Y
   647 1269 A9 51			lda #$51
   648 126B 8D 40 17			sta PLAYER4.HEAD
   649
   650 				; optimize OK (main.pas), line = 93
   651
   652 126E A9 55			lda #$55
   653 1270 8D 41 17			sta PLAYER4.COLOUR
   654 1273 A9 00			lda #$00
   655 1275 8D 44 17			sta PLAYER4.ISDEAD
   656 1278 A9 01			lda #$01
   657 127A 8D 42 17			sta PLAYER4.DIR
   658 127D			@exit
   659 					.ifdef @new
   660 					lda <@VarData
   661 					sta :ztmp
   662 					lda >@VarData
   663 					ldy #@VarDataSize-1
   664 					jmp @FreeMem
   665 					els
   666 127D 60				rts						; ret
   667 					eif
   668 				.endl
   669
   670 127E			.local	PUTCHAR						; PROCEDURE
   671
   672 				; optimize OK (main.pas), line = 100
   673
   674 127E AD 46 17			lda Y
   675 1281 0A				asl @
   676 1282 A8				tay
   677 1283 B9 0E 10			lda adr.MUL40,y
   678 1286 18 6D 45 17			add X
   679 128A 85 5B			sta T0W
   680 128C B9 0F 10			lda adr.MUL40+1,y
   681 128F 69 08			adc #$08
   682 1291 85 5C			sta T0W+1
   683
   684 				; optimize OK (main.pas), line = 101
   685
   686 1293 85 11			sta :bp+1
   687 1295 A4 5B			ldy T0W
   688 1297 AD 48 17			lda C
   689 129A 91 10			sta (:bp),y
   690 129C A5 5C			lda T0W+1
   691 129E 18 69 04			add #$04
   692 12A1 85 11			sta :bp+1
   693 12A3 AD 47 17			lda V
   694 12A6 91 10			sta (:bp),y
   695
   696 				; ------------------------------------------------------------
   697
   698 = 1745			X	= DATAORIGIN+$0031
   699 = 1746			Y	= DATAORIGIN+$0032
   700 = 1747			V	= DATAORIGIN+$0033
   701 = 1748			C	= DATAORIGIN+$0034
   702
   703 = 1745			@VarData	= X
   704 = 0004			@VarDataSize	= 4
   705
   706 12A8			@exit
   707 					.ifdef @new
   708 					lda <@VarData
   709 					sta :ztmp
   710 					lda >@VarData
   711 					ldy #@VarDataSize-1
   712 					jmp @FreeMem
   713 					els
   714 12A8 60				rts						; ret
   715 					eif
   716 				.endl
   717
   718 12A9			.local	CHECKAVAILDIR					; PROCEDURE
   719
   720 				; optimize OK (main.pas), line = 106
   721
   722 12A9 A9 00			lda #$00
   723 12AB 8D 25 17			sta AVAILDIR
   724
   725 				; optimize OK (main.pas), line = 107
   726
   727 12AE AD 4A 17			lda Y
   728 12B1 0A				asl @
   729 12B2 A8				tay
   730 12B3 B9 0E 10			lda adr.MUL40,y
   731 12B6 18 6D 49 17			add X
   732 12BA 85 5B			sta T0W
   733 12BC B9 0F 10			lda adr.MUL40+1,y
   734 12BF 69 0C			adc #$0C
   735 12C1 85 5C			sta T0W+1
   736
   737 				; optimize OK (main.pas), line = 109
   738
   739 12C3 A5 5B			lda T0W
   740 12C5 38 E9 28			sub #$28
   741 12C8 85 21			sta :STACKORIGIN+9
   742 12CA A5 5C			lda T0W+1
   743 12CC E9 00			sbc #$00
   744 12CE 85 11			sta :bp+1
   745 12D0 A4 21			ldy :STACKORIGIN+9
   746 12D2 B1 10			lda (:bp),y
   747 12D4 C9 20			cmp #$20
   748 12D6 D0 08			jne l_01BC
   749 12D8 AD 25 17			lda AVAILDIR
   750 12DB 09 01			ora #$01
   751 12DD 8D 25 17			sta AVAILDIR
   752 12E0			l_01BC
   753
   754 				; optimize OK (main.pas), line = 110
   755
   756 12E0 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   757 12E8 A0 28			ldy #$28
   758 12EA B1 12			lda (:bp2),y
   759 12EC C9 20			cmp #$20
   760 12EE D0 08			jne l_01DF
   761 12F0 AD 25 17			lda AVAILDIR
   762 12F3 09 02			ora #$02
   763 12F5 8D 25 17			sta AVAILDIR
   764 12F8			l_01DF
   765
   766 				; optimize OK (main.pas), line = 111
   767
   768 12F8 A5 5B			lda T0W
   769 12FA 38 E9 01			sub #$01
   770 12FD 85 21			sta :STACKORIGIN+9
   771 12FF A5 5C			lda T0W+1
   772 1301 E9 00			sbc #$00
   773 1303 85 11			sta :bp+1
   774 1305 A4 21			ldy :STACKORIGIN+9
   775 1307 B1 10			lda (:bp),y
   776 1309 C9 20			cmp #$20
   777 130B D0 08			jne l_0202
   778 130D AD 25 17			lda AVAILDIR
   779 1310 09 04			ora #$04
   780 1312 8D 25 17			sta AVAILDIR
   781 1315			l_0202
   782
   783 				; optimize OK (main.pas), line = 112
   784
   785 1315 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   786 131D A0 01			ldy #$01
   787 131F B1 12			lda (:bp2),y
   788 1321 C9 20			cmp #$20
   789 1323 D0 08			jne l_0225
   790 1325 AD 25 17			lda AVAILDIR
   791 1328 09 08			ora #$08
   792 132A 8D 25 17			sta AVAILDIR
   793 132D			l_0225
   794
   795 				; ------------------------------------------------------------
   796
   797 = 1749			X	= DATAORIGIN+$0035
   798 = 174A			Y	= DATAORIGIN+$0036
   799
   800 = 1749			@VarData	= X
   801 = 0002			@VarDataSize	= 2
   802
   803 132D			@exit
   804 					.ifdef @new
   805 					lda <@VarData
   806 					sta :ztmp
   807 					lda >@VarData
   808 					ldy #@VarDataSize-1
   809 					jmp @FreeMem
   810 					els
   811 132D 60				rts						; ret
   812 					eif
   813 				.endl
   814
   815 132E			.local	HUMAN						; PROCEDURE
   816
   817 				; optimize OK (main.pas), line = 120
   818
   819 132E AC 27 17 84 12 AC + 	mwy PLY :bp2
   820 1338 A0 04			ldy #PLY.DIR-DATAORIGIN
   821 133A B1 12			lda (:bp2),y
   822 133C 85 59			sta NEWDIR
   823
   824 				; optimize OK (main.pas), line = 121
   825
   826 133E A9 02			lda #$02
   827 1340 8D 08 FF			sta JOY
   828 1343 A9 FF			lda #$FF
   829 1345 8D 30 FD			sta KEY_PIO
   830 1348 AD 08 FF			lda JOY
   831 134B 49 FF			eor #$FF
   832 134D 85 58			sta T0B
   833
   834 				; optimize OK (main.pas), line = 123
   835
   836 134F 8D 4B 17			sta @CASETMP_0003
   837 1352 C9 01			cmp #$01
   838 1354 D0 19			jne l_0259
   839 1356			@
   840
   841 				; optimize OK (main.pas), line = 124
   842
   843 1356 AC 27 17 84 12 AC + 	mwy PLY :bp2
   844 1360 A0 04			ldy #PLY.DIR-DATAORIGIN
   845 1362 B1 12			lda (:bp2),y
   846 1364 C9 02			cmp #$02
   847 1366 F0 04			jeq l_026B
   848 1368 A9 01			lda #$01
   849 136A 85 59			sta NEWDIR
   850 136C			l_026B
   851
   852 136C 4C C3 13			jmp a_0003
   853 136F			l_0259
   854 136F C9 02			cmp #$02
   855 1371 D0 19			jne l_027B
   856 1373			@
   857
   858 				; optimize OK (main.pas), line = 125
   859
   860 1373 AC 27 17 84 12 AC + 	mwy PLY :bp2
   861 137D A0 04			ldy #PLY.DIR-DATAORIGIN
   862 137F B1 12			lda (:bp2),y
   863 1381 C9 01			cmp #$01
   864 1383 F0 04			jeq l_028D
   865 1385 A9 02			lda #$02
   866 1387 85 59			sta NEWDIR
   867 1389			l_028D
   868
   869 1389 4C C3 13			jmp a_0003
   870 138C			l_027B
   871 138C C9 04			cmp #$04
   872 138E D0 19			jne l_029D
   873 1390			@
   874
   875 				; optimize OK (main.pas), line = 126
   876
   877 1390 AC 27 17 84 12 AC + 	mwy PLY :bp2
   878 139A A0 04			ldy #PLY.DIR-DATAORIGIN
   879 139C B1 12			lda (:bp2),y
   880 139E C9 08			cmp #$08
   881 13A0 F0 04			jeq l_02AF
   882 13A2 A9 04			lda #$04
   883 13A4 85 59			sta NEWDIR
   884 13A6			l_02AF
   885
   886 13A6 4C C3 13			jmp a_0003
   887 13A9			l_029D
   888 13A9 C9 08			cmp #$08
   889 13AB D0 16			jne l_02BF
   890 13AD			@
   891
   892 				; optimize OK (main.pas), line = 127
   893
   894 13AD AC 27 17 84 12 AC + 	mwy PLY :bp2
   895 13B7 A0 04			ldy #PLY.DIR-DATAORIGIN
   896 13B9 B1 12			lda (:bp2),y
   897 13BB C9 04			cmp #$04
   898 13BD F0 04			jeq l_02D1
   899 13BF A9 08			lda #$08
   900 13C1 85 59			sta NEWDIR
   901 13C3			l_02D1
   902
   903 13C3			l_02BF
   904 13C3			a_0003
   905
   906 				; optimize OK (main.pas), line = 130
   907
   908 13C3 A5 59			lda NEWDIR
   909 13C5 2D 25 17			and AVAILDIR
   910 13C8 D0 1B			jne l_02F8
   911
   912 				; optimize OK (main.pas), line = 131
   913
   914 13CA AC 27 17 84 12 AC + 	mwy PLY :bp2
   915 13D4 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   916 13D6 A9 01			lda #$01
   917 13D8 91 12			sta (:bp2),y
   918 13DA A9 00			lda #$00
   919 13DC 8D 26 17			sta ALIVE
   920 13DF A0 02			ldy #PLY.HEAD-DATAORIGIN
   921 13E1 A9 57			lda #$57
   922 13E3 91 12			sta (:bp2),y
   923 13E5			l_02F8
   924
   925 				; ------------------------------------------------------------
   926
   927 = 174B			@CASETMP_0003	= DATAORIGIN+$0037
   928
   929 = 174B			@VarData	= @CASETMP_0003
   930 = 0001			@VarDataSize	= 1
   931
   932 13E5			@exit
   933 					.ifdef @new
   934 					lda <@VarData
   935 					sta :ztmp
   936 					lda >@VarData
   937 					ldy #@VarDataSize-1
   938 					jmp @FreeMem
   939 					els
   940 13E5 60				rts						; ret
   941 					eif
   942 				.endl
   943
   944 13E6			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   945
   946 				; optimize OK (main.pas), line = 138
   947
   948 13E6 AC 27 17 84 12 AC + 	mwy PLY :bp2
   949 13F0 A0 04			ldy #PLY.DIR-DATAORIGIN
   950 13F2 B1 12			lda (:bp2),y
   951 13F4 2D 25 17			and AVAILDIR
   952 13F7 F0 07			jeq l_0323
   953 13F9 B1 12			lda (:bp2),y
   954 13FB 85 59			sta NEWDIR
   955 13FD 4C 6F 14			jmp l_0333
   956 1400			l_0323
   957
   958 				; optimize OK (main.pas), line = 140
   959
   960 1400 AD 25 17			lda AVAILDIR
   961 1403 C9 03			cmp #$03
   962 1405 D0 10			jne l_0345
   963 1407 A9 02			lda #$02
   964 1409 20 40 11			jsr SYSTEM.RANDOM_006C
   965 140C B4 18			ldy :STACKORIGIN,x
   966 140E B9 40 10			lda adr.DIRECTION,y
   967 1411 85 59			sta NEWDIR
   968 1413 CA				dex
   969 1414 4C 30 14			jmp l_0357
   970 1417			l_0345
   971
   972 				; optimize OK (main.pas), line = 142
   973
   974 1417 AD 25 17			lda AVAILDIR
   975 141A 8D 4C 17			sta @CASETMP_0004
   976 141D C9 01			cmp #$01
   977 141F D0 07			jne l_0362
   978 1421			@
   979
   980 				; optimize OK (main.pas), line = 143
   981
   982 1421 A9 01			lda #$01
   983 1423 85 59			sta NEWDIR
   984
   985 1425 4C 30 14			jmp a_0004
   986 1428			l_0362
   987 1428 C9 02			cmp #$02
   988 142A D0 04			jne l_036F
   989 142C			@
   990
   991 				; optimize OK (main.pas), line = 144
   992
   993 142C A9 02			lda #$02
   994 142E 85 59			sta NEWDIR
   995
   996 1430			l_036F
   997 1430			a_0004
   998 1430			l_0357
   999
  1000 				; optimize OK (main.pas), line = 147
  1001
  1002 1430 AD 25 17			lda AVAILDIR
  1003 1433 C9 0C			cmp #$0C
  1004 1435 D0 1F			jne l_038B
  1005 1437 A9 02			lda #$02
  1006 1439 20 40 11			jsr SYSTEM.RANDOM_006C
  1007 143C E8				inx
  1008 143D A9 02 95 18			mva #$02 :STACKORIGIN,x
  1009 1441 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1010 1445 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1011 1447 20 44 10			jsr addAX_CX
  1012 144A CA				dex
  1013 144B B4 18			ldy :STACKORIGIN,x
  1014 144D B9 40 10			lda adr.DIRECTION,y
  1015 1450 85 59			sta NEWDIR
  1016 1452 CA				dex
  1017 1453 4C 6F 14			jmp l_03A1
  1018 1456			l_038B
  1019
  1020 				; optimize OK (main.pas), line = 149
  1021
  1022 1456 AD 25 17			lda AVAILDIR
  1023 1459 8D 4D 17			sta @CASETMP_0005
  1024 145C C9 04			cmp #$04
  1025 145E D0 07			jne l_03AC
  1026 1460			@
  1027
  1028 				; optimize OK (main.pas), line = 150
  1029
  1030 1460 A9 04			lda #$04
  1031 1462 85 59			sta NEWDIR
  1032
  1033 1464 4C 6F 14			jmp a_0005
  1034 1467			l_03AC
  1035 1467 C9 08			cmp #$08
  1036 1469 D0 04			jne l_03B9
  1037 146B			@
  1038
  1039 				; optimize OK (main.pas), line = 151
  1040
  1041 146B A9 08			lda #$08
  1042 146D 85 59			sta NEWDIR
  1043
  1044 146F			l_03B9
  1045 146F			a_0005
  1046 146F			l_03A1
  1047 146F			l_0333
  1048
  1049 				; ------------------------------------------------------------
  1050
  1051 = 174C			@CASETMP_0004	= DATAORIGIN+$0038
  1052 = 174D			@CASETMP_0005	= DATAORIGIN+$0039
  1053
  1054 = 174C			@VarData	= @CASETMP_0004
  1055 = 0002			@VarDataSize	= 2
  1056
  1057 146F			@exit
  1058 					.ifdef @new
  1059 					lda <@VarData
  1060 					sta :ztmp
  1061 					lda >@VarData
  1062 					ldy #@VarDataSize-1
  1063 					jmp @FreeMem
  1064 					els
  1065 146F 60				rts						; ret
  1066 					eif
  1067 				.endl
  1068
  1069 1470			.local	PLAYERMOVE					; PROCEDURE
  1070
  1071 				; optimize OK (main.pas), line = 161
  1072
  1073 1470 AD 4E 17			lda P
  1074 1473 8D 27 17			sta PLY
  1075 1476 85 12			sta :bp2
  1076 1478 AD 4F 17			lda P+1
  1077 147B 8D 28 17			sta PLY+1
  1078 147E 85 13			sta :bp2+1
  1079 				; optimize OK (main.pas), line = 163
  1080 1480 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1081 1482 B1 12			lda (:bp2),y
  1082 1484 F0 03 4C 57 16		jne l_03DB
  1083
  1084 				; optimize OK (main.pas), line = 165
  1085
  1086 1489 A0 00			ldy #PLY.X-DATAORIGIN
  1087 148B B1 12			lda (:bp2),y
  1088 148D 8D 49 17			sta CHECKAVAILDIR.X
  1089 1490 A0 01			ldy #PLY.Y-DATAORIGIN
  1090 1492 B1 12			lda (:bp2),y
  1091 1494 8D 4A 17			sta CHECKAVAILDIR.Y
  1092 1497 20 A9 12			jsr CHECKAVAILDIR
  1093
  1094 				; optimize OK (main.pas), line = 167
  1095
  1096 149A AD 25 17			lda AVAILDIR
  1097 149D D0 36			jne l_03F5
  1098
  1099 				; optimize OK (main.pas), line = 168
  1100
  1101 149F AC 27 17 84 12 AC + 	mwy PLY :bp2
  1102 14A9 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1103 14AB A9 01			lda #$01
  1104 14AD 91 12			sta (:bp2),y
  1105 14AF CE 26 17			dec ALIVE
  1106
  1107 				; optimize OK (main.pas), line = 169
  1108
  1109 14B2 A0 00			ldy #PLY.X-DATAORIGIN
  1110 14B4 B1 12			lda (:bp2),y
  1111 14B6 8D 45 17			sta PUTCHAR.X
  1112 14B9 A0 01			ldy #PLY.Y-DATAORIGIN
  1113 14BB B1 12			lda (:bp2),y
  1114 14BD 8D 46 17			sta PUTCHAR.Y
  1115 14C0 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1116 14C2 B1 12			lda (:bp2),y
  1117 14C4 18 69 80			add #$80
  1118 14C7 8D 48 17			sta PUTCHAR.C
  1119 14CA A9 57			lda #$57
  1120 14CC 8D 47 17			sta PUTCHAR.V
  1121 14CF 20 7E 12			jsr PUTCHAR
  1122 14D2 4C 57 16			jmp l_0416
  1123 14D5			l_03F5
  1124
  1125 				; optimize OK (main.pas), line = 172
  1126
  1127 14D5 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1128 14DF A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1129 14E1 B1 12			lda (:bp2),y
  1130 14E3 8D 50 17			sta @CASETMP_0006
  1131 14E6 C9 00			cmp #$00
  1132 14E8 D0 06			jne l_0421
  1133 14EA			@
  1134
  1135 				; optimize FAIL ('HUMAN', main.pas), line = 173
  1136
  1137 14EA 20 2E 13			jsr HUMAN
  1138 14ED 4C F7 14			jmp a_0006
  1139 14F0			l_0421
  1140 14F0 C9 01			cmp #$01
  1141 14F2 D0 03			jne l_042B
  1142 14F4			@
  1143
  1144 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 174
  1145
  1146 14F4 20 E6 13			jsr AI_STRAIGHTFORWARD
  1147 14F7			l_042B
  1148 14F7			a_0006
  1149
  1150 				; optimize OK (main.pas), line = 177
  1151
  1152 14F7 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1153 1501 A0 04			ldy #PLY.DIR-DATAORIGIN
  1154 1503 B1 12			lda (:bp2),y
  1155 1505 C5 59			cmp NEWDIR
  1156 1507 D0 14			jne l_0446
  1157
  1158 				; optimize OK (main.pas), line = 178
  1159
  1160 1509 A5 59			lda NEWDIR
  1161 150B 29 0C			and #$0C
  1162 150D F0 07			jeq l_045D
  1163 150F A9 40			lda #$40
  1164 1511 85 58			sta T0B
  1165 1513 4C 1A 15			jmp l_046B
  1166 1516			l_045D
  1167 1516 A9 42			lda #$42
  1168 1518 85 58			sta T0B
  1169 151A			l_046B
  1170 151A 4C 8D 15			jmp l_0478
  1171 151D			l_0446
  1172
  1173 				; optimize OK (main.pas), line = 180
  1174
  1175 151D AC 27 17 84 12 AC + 	mwy PLY :bp2
  1176 1527 A0 04			ldy #PLY.DIR-DATAORIGIN
  1177 1529 B1 12			lda (:bp2),y
  1178 152B 29 0A			and #$0A
  1179 152D F0 0A			jeq l_049E
  1180 152F A5 59			lda NEWDIR
  1181 1531 29 05			and #$05
  1182 1533 F0 04			jeq l_049E
  1183 1535 A9 7D			lda #$7D
  1184 1537 85 58			sta T0B
  1185 1539			l_049E
  1186
  1187 				; optimize OK (main.pas), line = 181
  1188
  1189 1539 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1190 1543 A0 04			ldy #PLY.DIR-DATAORIGIN
  1191 1545 B1 12			lda (:bp2),y
  1192 1547 29 09			and #$09
  1193 1549 F0 0A			jeq l_04CB
  1194 154B A5 59			lda NEWDIR
  1195 154D 29 06			and #$06
  1196 154F F0 04			jeq l_04CB
  1197 1551 A9 6E			lda #$6E
  1198 1553 85 58			sta T0B
  1199 1555			l_04CB
  1200
  1201 				; optimize OK (main.pas), line = 182
  1202
  1203 1555 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1204 155F A0 04			ldy #PLY.DIR-DATAORIGIN
  1205 1561 B1 12			lda (:bp2),y
  1206 1563 29 06			and #$06
  1207 1565 F0 0A			jeq l_04F8
  1208 1567 A5 59			lda NEWDIR
  1209 1569 29 09			and #$09
  1210 156B F0 04			jeq l_04F8
  1211 156D A9 6D			lda #$6D
  1212 156F 85 58			sta T0B
  1213 1571			l_04F8
  1214
  1215 				; optimize OK (main.pas), line = 183
  1216
  1217 1571 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1218 157B A0 04			ldy #PLY.DIR-DATAORIGIN
  1219 157D B1 12			lda (:bp2),y
  1220 157F 29 05			and #$05
  1221 1581 F0 0A			jeq l_0525
  1222 1583 A5 59			lda NEWDIR
  1223 1585 29 0A			and #$0A
  1224 1587 F0 04			jeq l_0525
  1225 1589 A9 70			lda #$70
  1226 158B 85 58			sta T0B
  1227 158D			l_0525
  1228 158D			l_0478
  1229
  1230 				; optimize OK (main.pas), line = 185
  1231
  1232 158D AC 27 17 84 12 AC + 	mwy PLY :bp2
  1233 1597 A0 00			ldy #PLY.X-DATAORIGIN
  1234 1599 B1 12			lda (:bp2),y
  1235 159B 8D 45 17			sta PUTCHAR.X
  1236 159E A0 01			ldy #PLY.Y-DATAORIGIN
  1237 15A0 B1 12			lda (:bp2),y
  1238 15A2 8D 46 17			sta PUTCHAR.Y
  1239 15A5 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1240 15A7 B1 12			lda (:bp2),y
  1241 15A9 8D 48 17			sta PUTCHAR.C
  1242 15AC A5 58			lda T0B
  1243 15AE 8D 47 17			sta PUTCHAR.V
  1244 15B1 20 7E 12			jsr PUTCHAR
  1245
  1246 				; optimize OK (main.pas), line = 187
  1247
  1248 15B4 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1249 15BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1250 15C0 A5 59			lda NEWDIR
  1251 15C2 91 12			sta (:bp2),y
  1252
  1253 				; optimize OK (main.pas), line = 189
  1254
  1255 15C4 A5 59			lda NEWDIR
  1256 15C6 8D 51 17			sta @CASETMP_0007
  1257 15C9 C9 01			cmp #$01
  1258 15CB D0 16			jne l_054A
  1259 15CD			@
  1260
  1261 				; optimize OK (main.pas), line = 190
  1262
  1263 15CD AC 27 17 84 12 AC + 	mwy PLY :bp2
  1264 15D7 A0 01			ldy #PLY.Y-DATAORIGIN
  1265 15D9 B1 12			lda (:bp2),y
  1266 15DB 38 E9 01			sub #$01
  1267 15DE 91 12			sta (:bp2),y
  1268
  1269 15E0 4C 2E 16			jmp a_0007
  1270 15E3			l_054A
  1271 15E3 C9 02			cmp #$02
  1272 15E5 D0 16			jne l_0554
  1273 15E7			@
  1274
  1275 				; optimize OK (main.pas), line = 191
  1276
  1277 15E7 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1278 15F1 A0 01			ldy #PLY.Y-DATAORIGIN
  1279 15F3 B1 12			lda (:bp2),y
  1280 15F5 18 69 01			add #$01
  1281 15F8 91 12			sta (:bp2),y
  1282
  1283 15FA 4C 2E 16			jmp a_0007
  1284 15FD			l_0554
  1285 15FD C9 04			cmp #$04
  1286 15FF D0 16			jne l_055E
  1287 1601			@
  1288
  1289 				; optimize OK (main.pas), line = 192
  1290
  1291 1601 AC 27 17 84 12 AC + 	mwy PLY :bp2
  1292 160B A0 00			ldy #PLY.X-DATAORIGIN
  1293 160D B1 12			lda (:bp2),y
  1294 160F 38 E9 01			sub #$01
  1295 1612 91 12			sta (:bp2),y
  1296
  1297 1614 4C 2E 16			jmp a_0007
  1298 1617			l_055E
  1299 1617 C9 08			cmp #$08
  1300 1619 D0 13			jne l_0568
  1301 161B			@
  1302
  1303 				; optimize OK (main.pas), line = 193
  1304
  1305 161B AC 27 17 84 12 AC + 	mwy PLY :bp2
  1306 1625 A0 00			ldy #PLY.X-DATAORIGIN
  1307 1627 B1 12			lda (:bp2),y
  1308 1629 18 69 01			add #$01
  1309 162C 91 12			sta (:bp2),y
  1310
  1311 162E			l_0568
  1312 162E			a_0007
  1313
  1314 				; optimize OK (main.pas), line = 196
  1315
  1316 162E AC 27 17 84 12 AC + 	mwy PLY :bp2
  1317 1638 A0 00			ldy #PLY.X-DATAORIGIN
  1318 163A B1 12			lda (:bp2),y
  1319 163C 8D 45 17			sta PUTCHAR.X
  1320 163F A0 01			ldy #PLY.Y-DATAORIGIN
  1321 1641 B1 12			lda (:bp2),y
  1322 1643 8D 46 17			sta PUTCHAR.Y
  1323 1646 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1324 1648 B1 12			lda (:bp2),y
  1325 164A 8D 47 17			sta PUTCHAR.V
  1326 164D A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1327 164F B1 12			lda (:bp2),y
  1328 1651 8D 48 17			sta PUTCHAR.C
  1329 1654 20 7E 12			jsr PUTCHAR
  1330 1657			l_0416
  1331 1657			l_03DB
  1332
  1333 				; ------------------------------------------------------------
  1334
  1335 = 174E			P	= DATAORIGIN+$003A
  1336 = 1750			@CASETMP_0006	= DATAORIGIN+$003C
  1337 = 1751			@CASETMP_0007	= DATAORIGIN+$003D
  1338
  1339 = 174E			@VarData	= P
  1340 = 0004			@VarDataSize	= 4
  1341
  1342 1657			@exit
  1343 					.ifdef @new
  1344 					lda <@VarData
  1345 					sta :ztmp
  1346 					lda >@VarData
  1347 					ldy #@VarDataSize-1
  1348 					jmp @FreeMem
  1349 					els
  1350 1657 60				rts						; ret
  1351 					eif
  1352 				.endl
  1353 1658			l_0007
  1354
  1355 				; optimize OK (main.pas), line = 207
  1356
  1357 1658 A9 00			lda #$00
  1358 165A 8D 24 17			sta GAMEOVER
  1359
  1360 				; --- RepeatUntilProlog
  1361 165D			l_0586
  1362
  1363 				; optimize OK (main.pas), line = 210
  1364
  1365 165D A9 03			lda #$03
  1366 165F 8D 26 17			sta ALIVE
  1367
  1368 				; optimize FAIL ('INITPLAYERS', main.pas), line = 211
  1369
  1370 1662 20 F1 11			jsr INITPLAYERS
  1371
  1372 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 212
  1373
  1374 1665 20 71 11			jsr INITPLAYFIELD
  1375
  1376 				; optimize OK (main.pas), line = 214
  1377
  1378 1668 A9 01			lda #$01
  1379 166A 8D 2E 17			sta PLAYER1.BRAIN
  1380
  1381 				; optimize OK (main.pas), line = 215
  1382
  1383 166D 8D 35 17			sta PLAYER2.BRAIN
  1384
  1385 				; optimize OK (main.pas), line = 216
  1386
  1387 1670 8D 3C 17			sta PLAYER3.BRAIN
  1388
  1389 				; optimize OK (main.pas), line = 217
  1390
  1391 1673 8D 43 17			sta PLAYER4.BRAIN
  1392
  1393 				; --- RepeatUntilProlog
  1394 1676			l_059D
  1395
  1396 				; optimize OK (main.pas), line = 220
  1397
  1398 1676 A9 01			lda #$01
  1399 1678 8D 20 17			sta SYSTEM.PAUSE_006B.N
  1400 167B A9 00			lda #$00
  1401 167D 8D 21 17			sta SYSTEM.PAUSE_006B.N+1
  1402 1680 20 23 11			jsr SYSTEM.PAUSE_006B
  1403 1683 AD 0C 17			lda PLAYER1
  1404 1686 8D 4E 17			sta PLAYERMOVE.P
  1405 1689 AD 0D 17			lda PLAYER1+1
  1406 168C 8D 4F 17			sta PLAYERMOVE.P+1
  1407 168F 20 70 14			jsr PLAYERMOVE
  1408
  1409 				; optimize OK (main.pas), line = 221
  1410
  1411 1692 A9 01			lda #$01
  1412 1694 8D 20 17			sta SYSTEM.PAUSE_006B.N
  1413 1697 A9 00			lda #$00
  1414 1699 8D 21 17			sta SYSTEM.PAUSE_006B.N+1
  1415 169C 20 23 11			jsr SYSTEM.PAUSE_006B
  1416 169F AD 0E 17			lda PLAYER2
  1417 16A2 8D 4E 17			sta PLAYERMOVE.P
  1418 16A5 AD 0F 17			lda PLAYER2+1
  1419 16A8 8D 4F 17			sta PLAYERMOVE.P+1
  1420 16AB 20 70 14			jsr PLAYERMOVE
  1421
  1422 				; optimize OK (main.pas), line = 222
  1423
  1424 16AE A9 01			lda #$01
  1425 16B0 8D 20 17			sta SYSTEM.PAUSE_006B.N
  1426 16B3 A9 00			lda #$00
  1427 16B5 8D 21 17			sta SYSTEM.PAUSE_006B.N+1
  1428 16B8 20 23 11			jsr SYSTEM.PAUSE_006B
  1429 16BB AD 10 17			lda PLAYER3
  1430 16BE 8D 4E 17			sta PLAYERMOVE.P
  1431 16C1 AD 11 17			lda PLAYER3+1
  1432 16C4 8D 4F 17			sta PLAYERMOVE.P+1
  1433 16C7 20 70 14			jsr PLAYERMOVE
  1434
  1435 				; optimize OK (main.pas), line = 223
  1436
  1437 16CA A9 01			lda #$01
  1438 16CC 8D 20 17			sta SYSTEM.PAUSE_006B.N
  1439 16CF A9 00			lda #$00
  1440 16D1 8D 21 17			sta SYSTEM.PAUSE_006B.N+1
  1441 16D4 20 23 11			jsr SYSTEM.PAUSE_006B
  1442 16D7 AD 12 17			lda PLAYER4
  1443 16DA 8D 4E 17			sta PLAYERMOVE.P
  1444 16DD AD 13 17			lda PLAYER4+1
  1445 16E0 8D 4F 17			sta PLAYERMOVE.P+1
  1446 16E3 20 70 14			jsr PLAYERMOVE
  1447
  1448 				; optimize OK (main.pas), line = 224
  1449
  1450 16E6 AD 26 17			lda ALIVE
  1451 16E9 F0 04			jeq l_059Dx
  1452 16EB C9 FF			cmp #$FF
  1453 16ED D0 87			jne l_059D
  1454 16EF			l_059Dx
  1455
  1456 				; optimize OK (main.pas), line = 226
  1457
  1458 16EF A9 64			lda #$64
  1459 16F1 8D 20 17			sta SYSTEM.PAUSE_006B.N
  1460 16F4 A9 00			lda #$00
  1461 16F6 8D 21 17			sta SYSTEM.PAUSE_006B.N+1
  1462 16F9 20 23 11			jsr SYSTEM.PAUSE_006B
  1463
  1464 				; optimize OK (main.pas), line = 227
  1465
  1466 16FC AD 24 17			lda GAMEOVER
  1467 16FF D0 03 4C 5D 16		jeq l_0586
  1468
  1469 				; ------------------------------------------------------------
  1470
  1471 = 0800			ATTRIBUTE_ADDR	= $0800
  1472 = 0C00			SCREEN_ADDR	= $0C00
  1473 = 0020			EMPTY	= $20
  1474 = 00A0			WALL	= $A0
  1475 = 0041			WALL_COLOUR	= $41
  1476 = 0051			PLY_HEAD	= $51
  1477 = 0057			PLY_CRASH	= $57
  1478 = 0042			PLY_TAIL_UD	= $42
  1479 = 0040			PLY_TAIL_LR	= $40
  1480 = 007D			PLY_TAIL_RD	= $7D
  1481 = 006E			PLY_TAIL_RU	= $6E
  1482 = 006D			PLY_TAIL_LD	= $6D
  1483 = 0070			PLY_TAIL_LU	= $70
  1484 = 005F			PLY1_COLOUR	= $5F
  1485 = 005D			PLY2_COLOUR	= $5D
  1486 = 0071			PLY3_COLOUR	= $71
  1487 = 0055			PLY4_COLOUR	= $55
  1488 = 0001			JOY_UP	= $01
  1489 = 0002			JOY_DOWN	= $02
  1490 = 0004			JOY_LEFT	= $04
  1491 = 0008			JOY_RIGHT	= $08
  1492 = 0040			JOY_FIRE	= $40
  1493 = 0002			JOY_SELECT_1	= $02
  1494 = 0004			JOY_SELECT_2	= $04
  1495 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1496 1704			.var MUL40	= adr.MUL40 .word
  1497 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1498 1704			.var DIRECTION	= adr.DIRECTION .word
  1499 = FD30			KEY_PIO	= $FD30
  1500 = FF08			JOY	= $FF08
  1501 = FF15			BORDERCOLOR	= $FF15
  1502 = FF19			BGCOLOR	= $FF19
  1503 = 0058			T0B	= $58
  1504 = 0059			NEWDIR	= $59
  1505 = 005A			T0N	= $5A
  1506 = 005B			T0W	= $5B
  1507 = 1724			GAMEOVER	= DATAORIGIN+$0010
  1508 = 1725			AVAILDIR	= DATAORIGIN+$0011
  1509 = 1726			ALIVE	= DATAORIGIN+$0012
  1510 = 1727			PLY	= DATAORIGIN+$0013
  1511 = 1714			PLY.X	= DATAORIGIN+$0000
  1512 = 1715			PLY.Y	= DATAORIGIN+$0001
  1513 = 1716			PLY.HEAD	= DATAORIGIN+$0002
  1514 = 1717			PLY.COLOUR	= DATAORIGIN+$0003
  1515 = 1718			PLY.DIR	= DATAORIGIN+$0004
  1516 = 1719			PLY.BRAIN	= DATAORIGIN+$0005
  1517 = 171A			PLY.ISDEAD	= DATAORIGIN+$0006
  1518 = 1729			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1519 1704			.var PLAYER1	= adr.PLAYER1 .word
  1520 = 1729			PLAYER1.X	= DATAORIGIN+$0015
  1521 = 172A			PLAYER1.Y	= DATAORIGIN+$0016
  1522 = 172B			PLAYER1.HEAD	= DATAORIGIN+$0017
  1523 = 172C			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1524 = 172D			PLAYER1.DIR	= DATAORIGIN+$0019
  1525 = 172E			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1526 = 172F			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1527 = 1730			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1528 1704			.var PLAYER2	= adr.PLAYER2 .word
  1529 = 1730			PLAYER2.X	= DATAORIGIN+$001C
  1530 = 1731			PLAYER2.Y	= DATAORIGIN+$001D
  1531 = 1732			PLAYER2.HEAD	= DATAORIGIN+$001E
  1532 = 1733			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1533 = 1734			PLAYER2.DIR	= DATAORIGIN+$0020
  1534 = 1735			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1535 = 1736			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1536 = 1737			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1537 1704			.var PLAYER3	= adr.PLAYER3 .word
  1538 = 1737			PLAYER3.X	= DATAORIGIN+$0023
  1539 = 1738			PLAYER3.Y	= DATAORIGIN+$0024
  1540 = 1739			PLAYER3.HEAD	= DATAORIGIN+$0025
  1541 = 173A			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1542 = 173B			PLAYER3.DIR	= DATAORIGIN+$0027
  1543 = 173C			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1544 = 173D			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1545 = 173E			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1546 1704			.var PLAYER4	= adr.PLAYER4 .word
  1547 = 173E			PLAYER4.X	= DATAORIGIN+$002A
  1548 = 173F			PLAYER4.Y	= DATAORIGIN+$002B
  1549 = 1740			PLAYER4.HEAD	= DATAORIGIN+$002C
  1550 = 1741			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1551 = 1742			PLAYER4.DIR	= DATAORIGIN+$002E
  1552 = 1743			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1553 = 1744			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1554 1704			@exit
  1555
  1556 1704 A2 00		@halt	ldx #$00
  1557 1706 9A				txs
  1558
  1559 1707 60				rts
  1560
  1561 				; ------------------------------------------------------------
  1562
  1563 				; ------------------------------------------------------------
  1564
  1565 1708			.local	@DEFINES
  1566 1708			C4P
  1567 				.endl
  1568
  1569 1708			.local	@RESOURCE
  1570 				.endl
  1571
  1572 = 1708 0E 10		MUL40
  1572 = 170A 40 10		DIRECTION
  1572 = 170C 29 17		PLAYER1
  1572 = 170E 30 17		PLAYER2
  1572 = 1710 37 17		PLAYER3
  1572 = 1712 3E 17		PLAYER4
  1572 				.endl							; MAIN
  1573
  1574 				; ------------------------------------------------------------
  1575 				; ------------------------------------------------------------
  1576
  1577 				.macro	UNITINITIALIZATION
  1578 				
  1579 					.ifdef MAIN.SYSTEM.@UnitInit
  1580 					jsr MAIN.SYSTEM.@UnitInit
  1581 					eif
  1582 				.endm
  1583
  1584 				; ------------------------------------------------------------
  1585
  1586 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1587 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1587 				SYSTEM: $10D5..$1170
  1588 					eif
  1589
  1590 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1590 				CODE: $100E..$1707
  1591
  1592 				; ------------------------------------------------------------
  1593
  1594 1714				.align $04
  1595
  1596 1714			DATAORIGIN
  1597 1714 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1598
  1599 = 0006			VARINITSIZE	= *-DATAORIGIN
  1600 = 003E			VARDATASIZE	= 62
  1601
  1602 = 1752			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1603
  1604 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1604 				DATA: $1714..$1752
  1605
  1606 				; ------------------------------------------------------------
  1607
  1608 				.macro	STATICDATA
  1609 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1610 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1611 				.by  $C0 $03 $01 $02 $04 $08
  1612 				.endm
  1613
  1614 					end
