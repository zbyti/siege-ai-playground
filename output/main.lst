mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $105C..$1137
   102
   103 				; ------------------------------------------------------------
   104
   105 1138			START
   106 1138 BA				tsx
   107 1139 8E FA 2B			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 000B			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 308A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 113C A2 F5			ldx #256-VLEN
   120 113E A9 00			lda #$00
   121 1140 9D 95 2F E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 1146 A9 95 85 02 A9 30 + 	mwa #PROGRAMSTACK psptr
   127
   128 114E A2 00			ldx #$00
   129 1150 86 10			stx bp						; BP = 0
   130
   131 1152 CA				dex						; X = 255
   132
   133 1153				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 1153			.local	MAIN						; PROCEDURE
   136
   137 1153 4C C8 2B			jmp l_001F
   138
   139 				; ------------------------------------------------------------
   140
   141 1156			.local	SYSTEM						; UNIT
   142
   143 1156			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 1156 B5 18			lda :STACKORIGIN,x
   150 1158 85 08			sta A
   151 115A B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 115C 85 09			sta A+1
   153 115E CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 115F A0 00			ldy #0
   158 1161 B1 08 8D 1B 2C		mva (edx),y Result
   159
   160 1166			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 1166 E8				inx
   168 1167 AD 1B 2C 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2C1B			RESULT	= DATAORIGIN+$000B
   182
   183 = 2C1B			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 116C 60				rts						; ret
   187 				.endl
   188
   189 116D			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 116D B5 18			lda :STACKORIGIN,x
   196 116F 85 0C			sta VALUE
   197 1171 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 1172 B5 18			lda :STACKORIGIN,x
   204 1174 85 08			sta A
   205 1176 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 1178 85 09			sta A+1
   207 117A CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 117B A0 00			ldy #0
   212 117D A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1181			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1181 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1182			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1182 B5 18			lda :STACKORIGIN,x
   238 1184 85 0C			sta VALUE
   239 1186 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1188 85 0D			sta VALUE+1
   241 118A CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 118B B5 18			lda :STACKORIGIN,x
   248 118D 85 08			sta A
   249 118F B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1191 85 09			sta A+1
   251 1193 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1194 A0 00			ldy #0
   256 1196 A5 0C 91 08			mva value (edx),y
   257 119A C8				iny
   258 119B A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 119F			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 119F 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 11A0			.local	FILLCHAR_006E					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 11A0 20 DC 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 11A3			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 11A3 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 11A4			.local	MOVE_006F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   302
   303 				; ---------------------  ASM Block 026  ---------------------
   304
   305 11A4 20 87 10			jsr @move
   306
   307
   308 				; ------------------------------------------------------------
   309
   310 = 0008			SOURCE	= edx
   311 = 000C			DEST	= ecx
   312 = 0004			COUNT	= eax
   313 11A7			@exit
   314 					.ifdef @new
   315 					lda <@VarData
   316 					sta :ztmp
   317 					lda >@VarData
   318 					ldy #@VarDataSize-1
   319 					jmp @FreeMem
   320 					els
   321 11A7 60				rts						; ret
   322 					eif
   323 				.endl
   324
   325 11A8			.local	MOVE_0070					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   326
   327 				; ---------------------  ASM Block 028  ---------------------
   328
   329 11A8 20 87 10			jsr @move
   330
   331
   332 				; ------------------------------------------------------------
   333
   334 = 0008			SOURCE	= edx
   335 = 000C			DEST	= ecx
   336 = 0004			COUNT	= eax
   337 11AB			@exit
   338 					.ifdef @new
   339 					lda <@VarData
   340 					sta :ztmp
   341 					lda >@VarData
   342 					ldy #@VarDataSize-1
   343 					jmp @FreeMem
   344 					els
   345 11AB 60				rts						; ret
   346 					eif
   347 				.endl
   348
   349 11AC			.local	PAUSE_0085					; PROCEDURE | ASSEMBLER | OVERLOAD
   350
   351 				; ---------------------  ASM Block 034  ---------------------
   352
   353 11AC A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   354
   355 11B2			@exit
   356 					.ifdef @new
   357 					lda <@VarData
   358 					sta :ztmp
   359 					lda >@VarData
   360 					ldy #@VarDataSize-1
   361 					jmp @FreeMem
   362 					els
   363 11B2 60				rts						; ret
   364 					eif
   365 				.endl
   366
   367 11B3			.local	PAUSE_0086					; PROCEDURE | ASSEMBLER | OVERLOAD
   368
   369 				; ---------------------  ASM Block 035  ---------------------
   370
   371
   372 11B3 AD 1C 2C		loop  lda n
   373 11B6 0D 1D 2C		  ora n+1
   374 11B9 F0 14		  beq stop
   375
   376 11BB A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   377
   378 11C1 AD 1C 2C D0 03 CE +   dew n
   379
   380 11CC 4C B3 11		  jmp loop
   381 11CF			stop
   382
   383
   384 				; ------------------------------------------------------------
   385
   386 = 2C1C			N	= DATAORIGIN+$000C
   387
   388 = 2C1C			@VarData	= N
   389 = 0002			@VarDataSize	= 2
   390
   391 11CF			@exit
   392 					.ifdef @new
   393 					lda <@VarData
   394 					sta :ztmp
   395 					lda >@VarData
   396 					ldy #@VarDataSize-1
   397 					jmp @FreeMem
   398 					els
   399 11CF 60				rts						; ret
   400 					eif
   401 				.endl
   402
   403 11D0			.local	RANDOM_0087					; FUNCTION | ASSEMBLER | OVERLOAD
   404 11D0 8D 1E 2C			sta RANGE
   405
   406 				; ---------------------  ASM Block 039  ---------------------
   407
   408
   409 11D3 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   410 11D6 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   411 11D9 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   412 11DC 6D 1E FF		  adc ted_hcount    //Horizontal counter
   413 11DF 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   414 11E2 4D 1E FF		  eor ted_hcount    //Horizontal counter
   415 11E5 A8			  tay
   416
   417 11E6 AD 1E 2C		  lda range
   418 11E9 F0 08		  beq stop
   419
   420 11EB 85 0C		  sta ecx
   421 11ED 84 04		  sty eax
   422
   423 11EF 20 24 11		  jsr imulCL
   424 11F2 A8			  tay
   425
   426 11F3 8C 1F 2C		stop  sty Result
   427
   428 11F6			@exit
   429
   430 				; ------------------------------------------------------------
   431
   432 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   433 				; as Pointer
   434
   435 11F6 E8				inx
   436 11F7 AD 1F 2C 95 18		mva RESULT :STACKORIGIN,x
   437
   438 					.ifdef @new
   439 					lda <@VarData
   440 					sta :ztmp
   441 					lda >@VarData
   442 					ldy #@VarDataSize-1
   443 					jmp @FreeMem
   444 					eif
   445
   446 				; ------------------------------------------------------------
   447
   448 = 2C1E			RANGE	= DATAORIGIN+$000E
   449 = 2C1F			RESULT	= DATAORIGIN+$000F
   450
   451 = 2C1E			@VarData	= RANGE
   452 = 0002			@VarDataSize	= 2
   453
   454 11FC 60				rts						; ret
   455 				.endl
   456
   457 				; ------------------------------------------------------------
   458
   459 = 0101			__PORTB_BANKS	= $0101
   460 = 0648			M_PI_2	= $0648
   461 = 0192			D_PI_2	= $0192
   462 = 0004			D_PI_180	= $04
   463 = 0000			MGTIA	= $00
   464 = 0080			MVBXE	= $80
   465 = 0000			VBXE_XDLADR	= $00
   466 = 0100			VBXE_BCBADR	= $0100
   467 = 1000			VBXE_MAPADR	= $1000
   468 = 1000			VBXE_CHBASE	= $1000
   469 = 5000			VBXE_OVRADR	= $5000
   470 = B000			VBXE_WINDOW	= $B000
   471 = 0000			IDLI	= $00
   472 = 0001			IVBL	= $01
   473 = 00FE			CH_DELCHR	= $FE
   474 = 009B			CH_ENTER	= $9B
   475 = 001B			CH_ESC	= $1B
   476 = 001C			CH_CURS_UP	= $1C
   477 = 001D			CH_CURS_DOWN	= $1D
   478 = 001E			CH_CURS_LEFT	= $1E
   479 = 001F			CH_CURS_RIGHT	= $1F
   480 = 007F			CH_TAB	= $7F
   481 = 009B			CH_EOL	= $9B
   482 = 007D			CH_CLR	= $7D
   483 = 00FD			CH_BELL	= $FD
   484 = 007E			CH_DEL	= $7E
   485 = 009C			CH_DELLINE	= $9C
   486 = 009D			CH_INSLINE	= $9D
   487 = 0000			COLOR_BLACK	= $00
   488 = 000E			COLOR_WHITE	= $0E
   489 = 0032			COLOR_RED	= $32
   490 = 0096			COLOR_CYAN	= $96
   491 = 0068			COLOR_VIOLET	= $68
   492 = 00C4			COLOR_GREEN	= $C4
   493 = 0074			COLOR_BLUE	= $74
   494 = 00EE			COLOR_YELLOW	= $EE
   495 = 0028			COLOR_ORANGE	= $28
   496 = 00E4			COLOR_BROWN	= $E4
   497 = 003C			COLOR_LIGHTRED	= $3C
   498 = 0004			COLOR_GRAY1	= $04
   499 = 0006			COLOR_GRAY2	= $06
   500 = 000A			COLOR_GRAY3	= $0A
   501 = 00CC			COLOR_LIGHTGREEN	= $CC
   502 = 007C			COLOR_LIGHTBLUE	= $7C
   503 = 0004			FMOPENREAD	= $04
   504 = 0008			FMOPENWRITE	= $08
   505 = 0009			FMOPENAPPEND	= $09
   506 = 000C			FMOPENREADWRITE	= $0C
   507 = 2C10			SCREENWIDTH	= DATAORIGIN+$0000
   508 = 2C12			SCREENHEIGHT	= DATAORIGIN+$0002
   509 = 2C14			DATESEPARATOR	= DATAORIGIN+$0004
   510 = D20A			RND	= $D20A
   511 = 02C0			adr.PALETTE	= $02C0
   512 11FD			.var PALETTE	= adr.PALETTE .word
   513 = D012			adr.HPALETTE	= $D012
   514 11FD			.var HPALETTE	= adr.HPALETTE .word
   515 = 2C15			FILEMODE	= DATAORIGIN+$0005
   516 = 2C16			GRAPHMODE	= DATAORIGIN+$0006
   517 = 2C17			IORESULT	= DATAORIGIN+$0007
   518 = 2C18			EOLN	= DATAORIGIN+$0008
   519 = 2C19			RNDSEED	= DATAORIGIN+$0009
   520
   521 = 11FD C0 02		PALETTE
   521 = 11FF 12 D0		HPALETTE
   521 				.endl							; UNIT SYSTEM
   522
   523 1201			.local	PUTCHAR_008C					; PROCEDURE | OVERLOAD
   524
   525 				; optimize OK (tools.inc), line = 5
   526
   527 1201 AD 43 2C			lda Y
   528 1204 0A				asl @
   529 1205 A8				tay
   530 1206 B9 26 10			lda adr.MUL40,y
   531 1209 18 6D 42 2C			add X
   532 120D 85 5E			sta T0W
   533 120F B9 27 10			lda adr.MUL40+1,y
   534 1212 69 0C			adc #$0C
   535 1214 85 5F			sta T0W+1
   536 1216 A4 5F			ldy T0W+1
   537 1218 84 11			sty :bp+1
   538 121A A4 5E			ldy T0W
   539 121C AD 44 2C			lda V
   540 121F 91 10			sta (:bp),y
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2C42			X	= DATAORIGIN+$0032
   545 = 2C43			Y	= DATAORIGIN+$0033
   546 = 2C44			V	= DATAORIGIN+$0034
   547
   548 = 2C42			@VarData	= X
   549 = 0003			@VarDataSize	= 3
   550
   551 1221			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 1221 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 1222			.local	PUTCHAR_00A8					; PROCEDURE | OVERLOAD
   564
   565 				; optimize OK (tools.inc), line = 12
   566
   567 1222 AD 46 2C			lda Y
   568 1225 0A				asl @
   569 1226 A8				tay
   570 1227 B9 26 10			lda adr.MUL40,y
   571 122A 18 6D 45 2C			add X
   572 122E 85 5E			sta T0W
   573 1230 B9 27 10			lda adr.MUL40+1,y
   574 1233 69 08			adc #$08
   575 1235 85 5F			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 13
   578
   579 1237 85 11			sta :bp+1
   580 1239 A4 5E			ldy T0W
   581 123B AD 48 2C			lda C
   582 123E 91 10			sta (:bp),y
   583 1240 A5 5F			lda T0W+1
   584 1242 18 69 04			add #$04
   585 1245 85 11			sta :bp+1
   586 1247 AD 47 2C			lda V
   587 124A 91 10			sta (:bp),y
   588
   589 				; ------------------------------------------------------------
   590
   591 = 2C45			X	= DATAORIGIN+$0035
   592 = 2C46			Y	= DATAORIGIN+$0036
   593 = 2C47			V	= DATAORIGIN+$0037
   594 = 2C48			C	= DATAORIGIN+$0038
   595
   596 = 2C45			@VarData	= X
   597 = 0004			@VarDataSize	= 4
   598
   599 124C			@exit
   600 					.ifdef @new
   601 					lda <@VarData
   602 					sta :ztmp
   603 					lda >@VarData
   604 					ldy #@VarDataSize-1
   605 					jmp @FreeMem
   606 					els
   607 124C 60				rts						; ret
   608 					eif
   609 				.endl
   610
   611 124D			.local	SHOWSCORE					; PROCEDURE
   612
   613 				; optimize OK (tools.inc), line = 28
   614
   615 124D AD 29 2C			lda PLAYER1.ISALIVE
   616 1250 F0 19			jeq l_00DD
   617 1252 AD 25 2C			lda PLAYER1.COLOUR
   618 1255 8D 48 2C			sta PUTCHAR_00A8.C
   619 1258 AD 28 2C			lda PLAYER1.SCORE
   620 125B 8D 47 2C			sta PUTCHAR_00A8.V
   621 125E A9 00			lda #$00
   622 1260 8D 46 2C			sta PUTCHAR_00A8.Y
   623 1263 A9 1E			lda #$1E
   624 1265 8D 45 2C			sta PUTCHAR_00A8.X
   625 1268 20 22 12			jsr PUTCHAR_00A8
   626 126B			l_00DD
   627
   628 				; optimize OK (tools.inc), line = 29
   629
   630 126B AD 31 2C			lda PLAYER2.ISALIVE
   631 126E F0 19			jeq l_00F5
   632 1270 AD 2D 2C			lda PLAYER2.COLOUR
   633 1273 8D 48 2C			sta PUTCHAR_00A8.C
   634 1276 AD 30 2C			lda PLAYER2.SCORE
   635 1279 8D 47 2C			sta PUTCHAR_00A8.V
   636 127C A9 00			lda #$00
   637 127E 8D 46 2C			sta PUTCHAR_00A8.Y
   638 1281 A9 20			lda #$20
   639 1283 8D 45 2C			sta PUTCHAR_00A8.X
   640 1286 20 22 12			jsr PUTCHAR_00A8
   641 1289			l_00F5
   642
   643 				; optimize OK (tools.inc), line = 30
   644
   645 1289 AD 39 2C			lda PLAYER3.ISALIVE
   646 128C F0 19			jeq l_010D
   647 128E AD 35 2C			lda PLAYER3.COLOUR
   648 1291 8D 48 2C			sta PUTCHAR_00A8.C
   649 1294 AD 38 2C			lda PLAYER3.SCORE
   650 1297 8D 47 2C			sta PUTCHAR_00A8.V
   651 129A A9 00			lda #$00
   652 129C 8D 46 2C			sta PUTCHAR_00A8.Y
   653 129F A9 22			lda #$22
   654 12A1 8D 45 2C			sta PUTCHAR_00A8.X
   655 12A4 20 22 12			jsr PUTCHAR_00A8
   656 12A7			l_010D
   657
   658 				; optimize OK (tools.inc), line = 31
   659
   660 12A7 AD 41 2C			lda PLAYER4.ISALIVE
   661 12AA F0 19			jeq l_0125
   662 12AC AD 3D 2C			lda PLAYER4.COLOUR
   663 12AF 8D 48 2C			sta PUTCHAR_00A8.C
   664 12B2 AD 40 2C			lda PLAYER4.SCORE
   665 12B5 8D 47 2C			sta PUTCHAR_00A8.V
   666 12B8 A9 00			lda #$00
   667 12BA 8D 46 2C			sta PUTCHAR_00A8.Y
   668 12BD A9 24			lda #$24
   669 12BF 8D 45 2C			sta PUTCHAR_00A8.X
   670 12C2 20 22 12			jsr PUTCHAR_00A8
   671 12C5			l_0125
   672 12C5			@exit
   673 					.ifdef @new
   674 					lda <@VarData
   675 					sta :ztmp
   676 					lda >@VarData
   677 					ldy #@VarDataSize-1
   678 					jmp @FreeMem
   679 					els
   680 12C5 60				rts						; ret
   681 					eif
   682 				.endl
   683
   684 12C6			.local	UPDATESCORE					; PROCEDURE
   685
   686 				; optimize OK (tools.inc), line = 38
   687
   688 12C6 AD 29 2C			lda PLAYER1.ISALIVE
   689 12C9 F0 03			jeq l_0141
   690 12CB EE 28 2C			inc PLAYER1.SCORE
   691 12CE			l_0141
   692
   693 				; optimize OK (tools.inc), line = 39
   694
   695 12CE AD 31 2C			lda PLAYER2.ISALIVE
   696 12D1 F0 03			jeq l_0154
   697 12D3 EE 30 2C			inc PLAYER2.SCORE
   698 12D6			l_0154
   699
   700 				; optimize OK (tools.inc), line = 40
   701
   702 12D6 AD 39 2C			lda PLAYER3.ISALIVE
   703 12D9 F0 03			jeq l_0167
   704 12DB EE 38 2C			inc PLAYER3.SCORE
   705 12DE			l_0167
   706
   707 				; optimize OK (tools.inc), line = 41
   708
   709 12DE AD 41 2C			lda PLAYER4.ISALIVE
   710 12E1 F0 03			jeq l_017A
   711 12E3 EE 40 2C			inc PLAYER4.SCORE
   712 12E6			l_017A
   713 12E6			@exit
   714 					.ifdef @new
   715 					lda <@VarData
   716 					sta :ztmp
   717 					lda >@VarData
   718 					ldy #@VarDataSize-1
   719 					jmp @FreeMem
   720 					els
   721 12E6 60				rts						; ret
   722 					eif
   723 				.endl
   724
   725 12E7			.local	CHECKAVAILDIR					; PROCEDURE
   726
   727 				; optimize OK (tools.inc), line = 48
   728
   729 12E7 A9 00			lda #$00
   730 12E9 85 5C			sta AVAILDIR
   731
   732 				; optimize OK (tools.inc), line = 49
   733
   734 12EB AC 01 2C 84 12 AC + 	mwy PLY :bp2
   735 12F5 A0 01			ldy #PLY.Y-DATAORIGIN
   736 12F7 B1 12			lda (:bp2),y
   737 12F9 0A				asl @
   738 12FA A8				tay
   739 12FB A9 00			lda #$00
   740 12FD 18 79 26 10			add adr.MUL40,y
   741 1301 85 21			sta :STACKORIGIN+9
   742 1303 A9 0C			lda #$0C
   743 1305 79 27 10			adc adr.MUL40+1,y
   744 1308 85 31			sta :STACKORIGIN+STACKWIDTH+9
   745 130A A0 00			ldy #PLY.X-DATAORIGIN
   746 130C A5 21			lda :STACKORIGIN+9
   747 130E 18 71 12			add (:bp2),y
   748 1311 85 5E			sta T0W
   749 1313 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   750 1315 69 00			adc #$00
   751 1317 85 5F			sta T0W+1
   752
   753 				; optimize OK (tools.inc), line = 51
   754
   755 1319 A5 5E			lda T0W
   756 131B 38 E9 28			sub #$28
   757 131E 85 21			sta :STACKORIGIN+9
   758 1320 A5 5F			lda T0W+1
   759 1322 E9 00			sbc #$00
   760 1324 85 11			sta :bp+1
   761 1326 A4 21			ldy :STACKORIGIN+9
   762 1328 B1 10			lda (:bp),y
   763 132A C9 20			cmp #$20
   764 132C D0 06			jne l_01B1
   765 132E A5 5C			lda AVAILDIR
   766 1330 09 01			ora #$01
   767 1332 85 5C			sta AVAILDIR
   768 1334			l_01B1
   769
   770 				; optimize OK (tools.inc), line = 52
   771
   772 1334 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   773 133C A0 28			ldy #$28
   774 133E B1 12			lda (:bp2),y
   775 1340 C9 20			cmp #$20
   776 1342 D0 06			jne l_01D4
   777 1344 A5 5C			lda AVAILDIR
   778 1346 09 02			ora #$02
   779 1348 85 5C			sta AVAILDIR
   780 134A			l_01D4
   781
   782 				; optimize OK (tools.inc), line = 53
   783
   784 134A A5 5E			lda T0W
   785 134C 38 E9 01			sub #$01
   786 134F 85 21			sta :STACKORIGIN+9
   787 1351 A5 5F			lda T0W+1
   788 1353 E9 00			sbc #$00
   789 1355 85 11			sta :bp+1
   790 1357 A4 21			ldy :STACKORIGIN+9
   791 1359 B1 10			lda (:bp),y
   792 135B C9 20			cmp #$20
   793 135D D0 06			jne l_01F7
   794 135F A5 5C			lda AVAILDIR
   795 1361 09 04			ora #$04
   796 1363 85 5C			sta AVAILDIR
   797 1365			l_01F7
   798
   799 				; optimize OK (tools.inc), line = 54
   800
   801 1365 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   802 136D A0 01			ldy #$01
   803 136F B1 12			lda (:bp2),y
   804 1371 C9 20			cmp #$20
   805 1373 D0 06			jne l_021A
   806 1375 A5 5C			lda AVAILDIR
   807 1377 09 08			ora #$08
   808 1379 85 5C			sta AVAILDIR
   809 137B			l_021A
   810 137B			@exit
   811 					.ifdef @new
   812 					lda <@VarData
   813 					sta :ztmp
   814 					lda >@VarData
   815 					ldy #@VarDataSize-1
   816 					jmp @FreeMem
   817 					els
   818 137B 60				rts						; ret
   819 					eif
   820 				.endl
   821
   822 137C			.local	ANIMATEOBSTACLES				; PROCEDURE
   823
   824 				; optimize FAIL (0, tools.inc), line = 63
   825
   826 137C EE 49 2C			inc COUNTER
   827
   828 				; optimize OK (tools.inc), line = 64
   829
   830 137F AD 49 2C			lda COUNTER
   831 1382 29 01			and #$01
   832 1384 F0 08			jeq l_0245
   833 1386 A9 54			lda #$54
   834 1388 8D 4A 2C			sta OBST
   835 138B 4C 93 13			jmp l_0253
   836 138E			l_0245
   837 138E A9 55			lda #$55
   838 1390 8D 4A 2C			sta OBST
   839 1393			l_0253
   840
   841 				; optimize OK (tools.inc), line = 65
   842
   843 1393 A9 07			lda #$07
   844 1395 85 59			sta I0B
   845
   846 1397			l_0260
   847 				; --- ForToDoCondition
   848 1397 A5 59			lda I0B
   849 1399 0A				asl @
   850 139A A8				tay
   851 139B B9 60 00			lda adr.OBSTACLES,y
   852 139E 85 21			sta :STACKORIGIN+9
   853 13A0 B9 61 00			lda adr.OBSTACLES+1,y
   854 13A3 85 11			sta :bp+1
   855 13A5 A4 21			ldy :STACKORIGIN+9
   856 13A7 AD 4A 2C			lda OBST
   857 13AA 91 10			sta (:bp),y
   858 13AC C6 59			dec I0B
   859 13AE 10 E7			jpl l_0260
   860 13B0			l_026E
   861
   862 				; ------------------------------------------------------------
   863
   864 = 2C49			COUNTER	= DATAORIGIN+$0039
   865 = 2C4A			OBST	= DATAORIGIN+$003A
   866 = 0000			@FORTMP_025D	= $00
   867
   868 = 2C49			@VarData	= COUNTER
   869 = 0002			@VarDataSize	= 2
   870
   871 13B0			@exit
   872 					.ifdef @new
   873 					lda <@VarData
   874 					sta :ztmp
   875 					lda >@VarData
   876 					ldy #@VarDataSize-1
   877 					jmp @FreeMem
   878 					els
   879 13B0 60				rts						; ret
   880 					eif
   881 				.endl
   882
   883 13B1			.local	CALCOBSTACLEADDR				; FUNCTION
   884
   885 				; optimize OK (tools.inc), line = 72
   886
   887 13B1 AD 4C 2C			lda Y
   888 13B4 0A				asl @
   889 13B5 A8				tay
   890 13B6 AD 4B 2C			lda X
   891 13B9 18 79 26 10			add adr.MUL40,y
   892 13BD 8D 4D 2C			sta RESULT
   893 13C0 A9 0C			lda #$0C
   894 13C2 79 27 10			adc adr.MUL40+1,y
   895 13C5 8D 4E 2C			sta RESULT+1
   896 13C8			@exit
   897
   898 				; ------------------------------------------------------------
   899
   900 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   901 				; as Pointer
   902
   903 13C8 E8				inx
   904 13C9 AD 4D 2C 95 18		mva RESULT :STACKORIGIN,x
   905 13CE AD 4E 2C 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   906
   907 					.ifdef @new
   908 					lda <@VarData
   909 					sta :ztmp
   910 					lda >@VarData
   911 					ldy #@VarDataSize-1
   912 					jmp @FreeMem
   913 					eif
   914
   915 				; ------------------------------------------------------------
   916
   917 = 2C4B			X	= DATAORIGIN+$003B
   918 = 2C4C			Y	= DATAORIGIN+$003C
   919 = 2C4D			RESULT	= DATAORIGIN+$003D
   920
   921 = 2C4B			@VarData	= X
   922 = 0004			@VarDataSize	= 4
   923
   924 13D3 60				rts						; ret
   925 				.endl
   926
   927 13D4			.local	SAVEOBSTACLES					; PROCEDURE
   928
   929 				; optimize OK (tools.inc), line = 79
   930
   931 13D4 A9 07			lda #$07
   932 13D6 85 59			sta I0B
   933
   934 13D8			l_02A1
   935 				; --- ForToDoCondition
   936
   937 				; optimize OK (tools.inc), line = 80
   938
   939 13D8 A5 59			lda I0B
   940 13DA 0A				asl @
   941 13DB A8				tay
   942 13DC B9 61 00			lda adr.OBSTACLES+1,y
   943 13DF C9 00			cmp #$00
   944 13E1 D0 05			bne @+
   945 13E3 B9 60 00			lda adr.OBSTACLES,y
   946 13E6 C9 5E			cmp #$5E
   947 13E8			@
   948 13E8 F0 29			jeq l_02C3
   949
   950 				; optimize OK (tools.inc), line = 81
   951
   952 13EA B9 60 00			lda adr.OBSTACLES,y
   953 13ED 85 21			sta :STACKORIGIN+9
   954 13EF B9 61 00			lda adr.OBSTACLES+1,y
   955 13F2 85 11			sta :bp+1
   956 13F4 A4 21			ldy :STACKORIGIN+9
   957 13F6 A9 54			lda #$54
   958 13F8 91 10			sta (:bp),y
   959
   960 				; optimize OK (tools.inc), line = 82
   961
   962 13FA A5 59			lda I0B
   963 13FC 0A				asl @
   964 13FD A8				tay
   965 13FE B9 60 00			lda adr.OBSTACLES,y
   966 1401 38 E9 00			sub #$00
   967 1404 85 21			sta :STACKORIGIN+9
   968 1406 B9 61 00			lda adr.OBSTACLES+1,y
   969 1409 E9 04			sbc #$04
   970 140B 85 11			sta :bp+1
   971 140D A4 21			ldy :STACKORIGIN+9
   972 140F A9 65			lda #$65
   973 1411 91 10			sta (:bp),y
   974 1413			l_02C3
   975
   976 				; --- ForToDoEpilog
   977 1413 C6 59			dec I0B
   978 1415 10 C1			jpl l_02A1
   979 1417			l_02AF
   980
   981 				; ------------------------------------------------------------
   982
   983 = 0000			@FORTMP_029E	= $00
   984 1417			@exit
   985 					.ifdef @new
   986 					lda <@VarData
   987 					sta :ztmp
   988 					lda >@VarData
   989 					ldy #@VarDataSize-1
   990 					jmp @FreeMem
   991 					els
   992 1417 60				rts						; ret
   993 					eif
   994 				.endl
   995
   996 1418			.local	DRAWPLAYER					; PROCEDURE
   997
   998 				; optimize OK (tools.inc), line = 91
   999
  1000 1418 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1001 1422 A0 04			ldy #PLY.DIR-DATAORIGIN
  1002 1424 B1 12			lda (:bp2),y
  1003 1426 C5 5B			cmp NEWDIR
  1004 1428 D0 14			jne l_02F5
  1005
  1006 				; optimize OK (tools.inc), line = 92
  1007
  1008 142A A5 5B			lda NEWDIR
  1009 142C 29 0C			and #$0C
  1010 142E F0 07			jeq l_030C
  1011 1430 A9 40			lda #$40
  1012 1432 85 58			sta T0B
  1013 1434 4C 3B 14			jmp l_031A
  1014 1437			l_030C
  1015 1437 A9 42			lda #$42
  1016 1439 85 58			sta T0B
  1017 143B			l_031A
  1018 143B 4C AE 14			jmp l_0327
  1019 143E			l_02F5
  1020
  1021 				; optimize OK (tools.inc), line = 94
  1022
  1023 143E AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1024 1448 A0 04			ldy #PLY.DIR-DATAORIGIN
  1025 144A B1 12			lda (:bp2),y
  1026 144C 29 0A			and #$0A
  1027 144E F0 0A			jeq l_034D
  1028 1450 A5 5B			lda NEWDIR
  1029 1452 29 05			and #$05
  1030 1454 F0 04			jeq l_034D
  1031 1456 A9 7D			lda #$7D
  1032 1458 85 58			sta T0B
  1033 145A			l_034D
  1034
  1035 				; optimize OK (tools.inc), line = 95
  1036
  1037 145A AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1038 1464 A0 04			ldy #PLY.DIR-DATAORIGIN
  1039 1466 B1 12			lda (:bp2),y
  1040 1468 29 09			and #$09
  1041 146A F0 0A			jeq l_037A
  1042 146C A5 5B			lda NEWDIR
  1043 146E 29 06			and #$06
  1044 1470 F0 04			jeq l_037A
  1045 1472 A9 6E			lda #$6E
  1046 1474 85 58			sta T0B
  1047 1476			l_037A
  1048
  1049 				; optimize OK (tools.inc), line = 96
  1050
  1051 1476 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1052 1480 A0 04			ldy #PLY.DIR-DATAORIGIN
  1053 1482 B1 12			lda (:bp2),y
  1054 1484 29 06			and #$06
  1055 1486 F0 0A			jeq l_03A7
  1056 1488 A5 5B			lda NEWDIR
  1057 148A 29 09			and #$09
  1058 148C F0 04			jeq l_03A7
  1059 148E A9 6D			lda #$6D
  1060 1490 85 58			sta T0B
  1061 1492			l_03A7
  1062
  1063 				; optimize OK (tools.inc), line = 97
  1064
  1065 1492 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1066 149C A0 04			ldy #PLY.DIR-DATAORIGIN
  1067 149E B1 12			lda (:bp2),y
  1068 14A0 29 05			and #$05
  1069 14A2 F0 0A			jeq l_03D4
  1070 14A4 A5 5B			lda NEWDIR
  1071 14A6 29 0A			and #$0A
  1072 14A8 F0 04			jeq l_03D4
  1073 14AA A9 70			lda #$70
  1074 14AC 85 58			sta T0B
  1075 14AE			l_03D4
  1076 14AE			l_0327
  1077
  1078 				; optimize OK (tools.inc), line = 99
  1079
  1080 14AE AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1081 14B8 A0 00			ldy #PLY.X-DATAORIGIN
  1082 14BA B1 12			lda (:bp2),y
  1083 14BC 8D 42 2C			sta PUTCHAR_008C.X
  1084 14BF A0 01			ldy #PLY.Y-DATAORIGIN
  1085 14C1 B1 12			lda (:bp2),y
  1086 14C3 8D 43 2C			sta PUTCHAR_008C.Y
  1087 14C6 A5 58			lda T0B
  1088 14C8 8D 44 2C			sta PUTCHAR_008C.V
  1089 14CB 20 01 12			jsr PUTCHAR_008C
  1090
  1091 				; optimize OK (tools.inc), line = 101
  1092
  1093 14CE AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1094 14D8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1095 14DA A5 5B			lda NEWDIR
  1096 14DC 91 12			sta (:bp2),y
  1097
  1098 				; optimize OK (tools.inc), line = 103
  1099
  1100 14DE A5 5B			lda NEWDIR
  1101 14E0 8D 4F 2C			sta @CASETMP_0003
  1102 14E3 C9 01			cmp #$01
  1103 14E5 D0 1A			jne l_03F6
  1104 14E7			@
  1105
  1106 				; optimize OK (tools.inc), line = 104
  1107
  1108 14E7 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1109 14F1 A0 01			ldy #PLY.Y-DATAORIGIN
  1110 14F3 B1 12			lda (:bp2),y
  1111 14F5 38 E9 01			sub #$01
  1112 14F8 91 12			sta (:bp2),y
  1113 14FA A9 50			lda #$50
  1114 14FC 85 58			sta T0B
  1115
  1116 14FE 4C 58 15			jmp a_0003
  1117 1501			l_03F6
  1118 1501 C9 02			cmp #$02
  1119 1503 D0 1A			jne l_0404
  1120 1505			@
  1121
  1122 				; optimize OK (tools.inc), line = 105
  1123
  1124 1505 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1125 150F A0 01			ldy #PLY.Y-DATAORIGIN
  1126 1511 B1 12			lda (:bp2),y
  1127 1513 18 69 01			add #$01
  1128 1516 91 12			sta (:bp2),y
  1129 1518 A9 53			lda #$53
  1130 151A 85 58			sta T0B
  1131
  1132 151C 4C 58 15			jmp a_0003
  1133 151F			l_0404
  1134 151F C9 04			cmp #$04
  1135 1521 D0 1A			jne l_0412
  1136 1523			@
  1137
  1138 				; optimize OK (tools.inc), line = 106
  1139
  1140 1523 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1141 152D A0 00			ldy #PLY.X-DATAORIGIN
  1142 152F B1 12			lda (:bp2),y
  1143 1531 38 E9 01			sub #$01
  1144 1534 91 12			sta (:bp2),y
  1145 1536 A9 51			lda #$51
  1146 1538 85 58			sta T0B
  1147
  1148 153A 4C 58 15			jmp a_0003
  1149 153D			l_0412
  1150 153D C9 08			cmp #$08
  1151 153F D0 17			jne l_0420
  1152 1541			@
  1153
  1154 				; optimize OK (tools.inc), line = 107
  1155
  1156 1541 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1157 154B A0 00			ldy #PLY.X-DATAORIGIN
  1158 154D B1 12			lda (:bp2),y
  1159 154F 18 69 01			add #$01
  1160 1552 91 12			sta (:bp2),y
  1161 1554 A9 52			lda #$52
  1162 1556 85 58			sta T0B
  1163
  1164 1558			l_0420
  1165 1558			a_0003
  1166
  1167 				; optimize OK (tools.inc), line = 110
  1168
  1169 1558 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1170 1562 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1171 1564 A5 58			lda T0B
  1172 1566 91 12			sta (:bp2),y
  1173
  1174 				; optimize OK (tools.inc), line = 112
  1175
  1176 1568 A0 00			ldy #PLY.X-DATAORIGIN
  1177 156A B1 12			lda (:bp2),y
  1178 156C 8D 45 2C			sta PUTCHAR_00A8.X
  1179 156F A0 01			ldy #PLY.Y-DATAORIGIN
  1180 1571 B1 12			lda (:bp2),y
  1181 1573 8D 46 2C			sta PUTCHAR_00A8.Y
  1182 1576 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1183 1578 B1 12			lda (:bp2),y
  1184 157A 8D 47 2C			sta PUTCHAR_00A8.V
  1185 157D A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1186 157F B1 12			lda (:bp2),y
  1187 1581 8D 48 2C			sta PUTCHAR_00A8.C
  1188 1584 20 22 12			jsr PUTCHAR_00A8
  1189
  1190 				; ------------------------------------------------------------
  1191
  1192 = 2C4F			@CASETMP_0003	= DATAORIGIN+$003F
  1193
  1194 = 2C4F			@VarData	= @CASETMP_0003
  1195 = 0001			@VarDataSize	= 1
  1196
  1197 1587			@exit
  1198 					.ifdef @new
  1199 					lda <@VarData
  1200 					sta :ztmp
  1201 					lda >@VarData
  1202 					ldy #@VarDataSize-1
  1203 					jmp @FreeMem
  1204 					els
  1205 1587 60				rts						; ret
  1206 					eif
  1207 				.endl
  1208
  1209 1588			.local	PLAYERBUSTED					; PROCEDURE
  1210
  1211 				; optimize OK (tools.inc), line = 119
  1212
  1213 1588 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1214 1592 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1215 1594 A9 00			lda #$00
  1216 1596 91 12			sta (:bp2),y
  1217 1598 C6 5A			dec ALIVE
  1218
  1219 				; optimize OK (tools.inc), line = 120
  1220
  1221 159A A0 00			ldy #PLY.X-DATAORIGIN
  1222 159C B1 12			lda (:bp2),y
  1223 159E 8D 45 2C			sta PUTCHAR_00A8.X
  1224 15A1 A0 01			ldy #PLY.Y-DATAORIGIN
  1225 15A3 B1 12			lda (:bp2),y
  1226 15A5 8D 46 2C			sta PUTCHAR_00A8.Y
  1227 15A8 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1228 15AA B1 12			lda (:bp2),y
  1229 15AC 8D 47 2C			sta PUTCHAR_00A8.V
  1230 15AF A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1231 15B1 B1 12			lda (:bp2),y
  1232 15B3 18 69 80			add #$80
  1233 15B6 8D 48 2C			sta PUTCHAR_00A8.C
  1234 15B9 20 22 12			jsr PUTCHAR_00A8
  1235 15BC			@exit
  1236 					.ifdef @new
  1237 					lda <@VarData
  1238 					sta :ztmp
  1239 					lda >@VarData
  1240 					ldy #@VarDataSize-1
  1241 					jmp @FreeMem
  1242 					els
  1243 15BC 60				rts						; ret
  1244 					eif
  1245 				.endl
  1246
  1247 15BD			.local	CHECKJOYSTATUS					; PROCEDURE
  1248
  1249 				; optimize OK (tools.inc), line = 127
  1250
  1251 15BD A9 02			lda #$02
  1252 15BF 8D 08 FF			sta JOY
  1253 15C2 A9 FF			lda #$FF
  1254 15C4 8D 30 FD			sta KEYSCAN
  1255
  1256 				; optimize OK (tools.inc), line = 128
  1257
  1258 15C7 AD 08 FF			lda JOY
  1259 15CA 49 FF			eor #$FF
  1260 15CC 85 5D			sta JOYSTATUS
  1261 15CE			@exit
  1262 					.ifdef @new
  1263 					lda <@VarData
  1264 					sta :ztmp
  1265 					lda >@VarData
  1266 					ldy #@VarDataSize-1
  1267 					jmp @FreeMem
  1268 					els
  1269 15CE 60				rts						; ret
  1270 					eif
  1271 				.endl
  1272
  1273 15CF			.local	SETPLAYER					; PROCEDURE
  1274
  1275 				; optimize OK (tools.inc), line = 135
  1276
  1277 15CF AD 50 2C			lda P
  1278 15D2 8D 01 2C			sta PLY
  1279 15D5 AD 51 2C			lda P+1
  1280 15D8 8D 02 2C			sta PLY+1
  1281
  1282 				; optimize OK (tools.inc), line = 137
  1283
  1284 15DB AD 54 2C			lda DIR
  1285 15DE 8D 58 2C			sta @CASETMP_0004
  1286 15E1 C9 01			cmp #$01
  1287 15E3 D0 07			jne l_0487
  1288 15E5			@
  1289
  1290 				; optimize OK (tools.inc), line = 138
  1291
  1292 15E5 A9 50			lda #$50
  1293 15E7 85 58			sta T0B
  1294
  1295 15E9 4C 0A 16			jmp a_0004
  1296 15EC			l_0487
  1297 15EC C9 02			cmp #$02
  1298 15EE D0 07			jne l_0494
  1299 15F0			@
  1300
  1301 				; optimize OK (tools.inc), line = 139
  1302
  1303 15F0 A9 53			lda #$53
  1304 15F2 85 58			sta T0B
  1305
  1306 15F4 4C 0A 16			jmp a_0004
  1307 15F7			l_0494
  1308 15F7 C9 04			cmp #$04
  1309 15F9 D0 07			jne l_04A1
  1310 15FB			@
  1311
  1312 				; optimize OK (tools.inc), line = 140
  1313
  1314 15FB A9 51			lda #$51
  1315 15FD 85 58			sta T0B
  1316
  1317 15FF 4C 0A 16			jmp a_0004
  1318 1602			l_04A1
  1319 1602 C9 08			cmp #$08
  1320 1604 D0 04			jne l_04AE
  1321 1606			@
  1322
  1323 				; optimize OK (tools.inc), line = 141
  1324
  1325 1606 A9 52			lda #$52
  1326 1608 85 58			sta T0B
  1327
  1328 160A			l_04AE
  1329 160A			a_0004
  1330
  1331 				; optimize OK (tools.inc), line = 144
  1332
  1333 160A AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1334 1614 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1335 1616 AD 55 2C			lda BRAIN
  1336 1619 91 12			sta (:bp2),y
  1337 161B A0 00			ldy #PLY.X-DATAORIGIN
  1338 161D AD 52 2C			lda X
  1339 1620 91 12			sta (:bp2),y
  1340 1622 A0 01			ldy #PLY.Y-DATAORIGIN
  1341 1624 AD 53 2C			lda Y
  1342 1627 91 12			sta (:bp2),y
  1343 1629 A0 04			ldy #PLY.DIR-DATAORIGIN
  1344 162B AD 54 2C			lda DIR
  1345 162E 91 12			sta (:bp2),y
  1346
  1347 				; optimize OK (tools.inc), line = 145
  1348
  1349 1630 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1350 1632 A5 58			lda T0B
  1351 1634 91 12			sta (:bp2),y
  1352 1636 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1353 1638 AD 56 2C			lda COLOUR
  1354 163B 91 12			sta (:bp2),y
  1355 163D A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1356 163F AD 57 2C			lda ISALIVE
  1357 1642 91 12			sta (:bp2),y
  1358
  1359 				; optimize OK (tools.inc), line = 146
  1360
  1361 1644 AD 57 2C			lda ISALIVE
  1362 1647 F0 1C			jeq l_04F0
  1363
  1364 				; optimize FAIL (0, tools.inc), line = 147
  1365
  1366 1649 E6 5A			inc ALIVE
  1367 164B AD 56 2C			lda COLOUR
  1368 164E 8D 48 2C			sta PUTCHAR_00A8.C
  1369 1651 A5 58			lda T0B
  1370 1653 8D 47 2C			sta PUTCHAR_00A8.V
  1371 1656 AD 53 2C			lda Y
  1372 1659 8D 46 2C			sta PUTCHAR_00A8.Y
  1373 165C AD 52 2C			lda X
  1374 165F 8D 45 2C			sta PUTCHAR_00A8.X
  1375 1662 20 22 12			jsr PUTCHAR_00A8
  1376 1665			l_04F0
  1377
  1378 				; ------------------------------------------------------------
  1379
  1380 = 2C50			P	= DATAORIGIN+$0040
  1381 = 2C52			X	= DATAORIGIN+$0042
  1382 = 2C53			Y	= DATAORIGIN+$0043
  1383 = 2C54			DIR	= DATAORIGIN+$0044
  1384 = 2C55			BRAIN	= DATAORIGIN+$0045
  1385 = 2C56			COLOUR	= DATAORIGIN+$0046
  1386 = 2C57			ISALIVE	= DATAORIGIN+$0047
  1387 = 2C58			@CASETMP_0004	= DATAORIGIN+$0048
  1388
  1389 = 2C50			@VarData	= P
  1390 = 0009			@VarDataSize	= 9
  1391
  1392 1665			@exit
  1393 					.ifdef @new
  1394 					lda <@VarData
  1395 					sta :ztmp
  1396 					lda >@VarData
  1397 					ldy #@VarDataSize-1
  1398 					jmp @FreeMem
  1399 					els
  1400 1665 60				rts						; ret
  1401 					eif
  1402 				.endl
  1403
  1404 1666			.local	NEXTLEVEL					; PROCEDURE
  1405
  1406 				; optimize FAIL (0, tools.inc), line = 155
  1407
  1408 1666 EE 20 2C			inc LEVEL
  1409 1669 AD 20 2C			lda LEVEL
  1410 166C C9 08			cmp #$08
  1411 166E D0 05			jne l_051E
  1412 1670 A9 05			lda #$05
  1413 1672 8D 20 2C			sta LEVEL
  1414 1675			l_051E
  1415 1675			@exit
  1416 					.ifdef @new
  1417 					lda <@VarData
  1418 					sta :ztmp
  1419 					lda >@VarData
  1420 					ldy #@VarDataSize-1
  1421 					jmp @FreeMem
  1422 					els
  1423 1675 60				rts						; ret
  1424 					eif
  1425 				.endl
  1426
  1427 1676			.local	STARTSCREEN					; PROCEDURE
  1428
  1429 				; optimize OK (tools.inc), line = 164
  1430
  1431 1676 AC 59 2C			ldy adr.INFO
  1432 1679 B9 59 2C 99 01 0C + 	mva:rne adr.INFO+$01-$01,y $0C01,y-
  1433
  1434 				; optimize OK (tools.inc), line = 165
  1435
  1436 1682 AD 59 2C			lda adr.INFO
  1437 1685 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1438 1687 A9 F1			lda #$F1
  1439 1689 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1440 168B A9 00			lda #$00
  1441 168D 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1442 168F A9 02			lda #$02
  1443 1691 85 08			sta SYSTEM.FILLCHAR_006E.A
  1444 1693 A9 08			lda #$08
  1445 1695 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1446 1697 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1447
  1448 				; optimize OK (tools.inc), line = 166
  1449
  1450 169A AD 25 2C			lda PLAYER1.COLOUR
  1451 169D 18 69 80			add #$80
  1452 16A0 8D 48 2C			sta PUTCHAR_00A8.C
  1453 16A3 AD 24 2C			lda PLAYER1.HEAD
  1454 16A6 8D 47 2C			sta PUTCHAR_00A8.V
  1455 16A9 AD 23 2C			lda PLAYER1.Y
  1456 16AC 8D 46 2C			sta PUTCHAR_00A8.Y
  1457 16AF AD 22 2C			lda PLAYER1.X
  1458 16B2 8D 45 2C			sta PUTCHAR_00A8.X
  1459 16B5 20 22 12			jsr PUTCHAR_00A8
  1460
  1461 				; --- RepeatUntilProlog
  1462 16B8			l_0541
  1463
  1464 				; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 168
  1465
  1466 16B8 20 BD 15			jsr CHECKJOYSTATUS
  1467 16BB A5 5D			lda JOYSTATUS
  1468 16BD C9 40			cmp #$40
  1469 16BF D0 F7			jne l_0541
  1470
  1471 				; optimize OK (tools.inc), line = 170
  1472
  1473 16C1 AD 59 2C			lda adr.INFO
  1474 16C4 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1475 16C6 A9 A0			lda #$A0
  1476 16C8 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1477 16CA A9 00			lda #$00
  1478 16CC 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1479 16CE A9 02			lda #$02
  1480 16D0 85 08			sta SYSTEM.FILLCHAR_006E.A
  1481 16D2 A9 0C			lda #$0C
  1482 16D4 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1483 16D6 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1484
  1485 				; optimize OK (tools.inc), line = 171
  1486
  1487 16D9 AD 59 2C			lda adr.INFO
  1488 16DC 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1489 16DE A9 41			lda #$41
  1490 16E0 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1491 16E2 A9 00			lda #$00
  1492 16E4 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1493 16E6 A9 02			lda #$02
  1494 16E8 85 08			sta SYSTEM.FILLCHAR_006E.A
  1495 16EA A9 08			lda #$08
  1496 16EC 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1497 16EE 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1498
  1499 				; optimize OK (tools.inc), line = 172
  1500
  1501 16F1 AD 25 2C			lda PLAYER1.COLOUR
  1502 16F4 8D 48 2C			sta PUTCHAR_00A8.C
  1503 16F7 AD 24 2C			lda PLAYER1.HEAD
  1504 16FA 8D 47 2C			sta PUTCHAR_00A8.V
  1505 16FD AD 23 2C			lda PLAYER1.Y
  1506 1700 8D 46 2C			sta PUTCHAR_00A8.Y
  1507 1703 AD 22 2C			lda PLAYER1.X
  1508 1706 8D 45 2C			sta PUTCHAR_00A8.X
  1509 1709 20 22 12			jsr PUTCHAR_00A8
  1510
  1511 				; ------------------------------------------------------------
  1512
  1513 = 2C59			adr.INFO	= [DATAORIGIN+$0049] .array [256]
  1514 170C			.var INFO	= adr.INFO .word
  1515
  1516 = 170D			@VarData	= INFO
  1517 = 0100			@VarDataSize	= 256
  1518
  1519 170C			@exit
  1520 					.ifdef @new
  1521 					lda <@VarData
  1522 					sta :ztmp
  1523 					lda >@VarData
  1524 					ldy #@VarDataSize-1
  1525 					jmp @FreeMem
  1526 					els
  1527 170C 60				rts						; ret
  1528 					eif
  1529 = 170D 59 2C		INFO
  1529 				.endl
  1530
  1531 170F			.local	ENDSCREEN					; PROCEDURE
  1532
  1533 				; optimize OK (tools.inc), line = 183
  1534
  1535 170F AD 28 2C			lda PLAYER1.SCORE
  1536 1712 C9 39			cmp #$39
  1537 1714 D0 20			jne l_0578
  1538 1716 AD 78 17			lda WINNER
  1539 1719 85 08			sta @move.src
  1540 171B AD 79 17			lda WINNER+1
  1541 171E 85 09			sta @move.src+1
  1542 1720 AC 7C 17 84 12 AC + 	mwy TMP :bp2
  1543 172A A0 00			ldy #$00
  1544 172C B1 08 91 12 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  1545 1733 4C 53 17			jmp l_0584
  1546 1736			l_0578
  1547
  1548 				; optimize OK (tools.inc), line = 184
  1549
  1550 1736 AD 7A 17			lda LOSER
  1551 1739 85 08			sta @move.src
  1552 173B AD 7B 17			lda LOSER+1
  1553 173E 85 09			sta @move.src+1
  1554 1740 AC 7C 17 84 12 AC + 	mwy TMP :bp2
  1555 174A A0 00			ldy #$00
  1556 174C B1 08 91 12 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  1557 1753			l_0584
  1558
  1559 				; optimize OK (tools.inc), line = 186
  1560
  1561 1753 AC 59 2F			ldy adr.TMP
  1562 1756 B9 59 2F 99 01 0C + 	mva:rne adr.TMP+$01-$01,y $0C01,y-
  1563
  1564 				; optimize OK (tools.inc), line = 187
  1565
  1566 175F AD 59 2F			lda adr.TMP
  1567 1762 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1568 1764 A9 F1			lda #$F1
  1569 1766 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1570 1768 A9 00			lda #$00
  1571 176A 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1572 176C A9 02			lda #$02
  1573 176E 85 08			sta SYSTEM.FILLCHAR_006E.A
  1574 1770 A9 08			lda #$08
  1575 1772 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1576 1774 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1577
  1578 				; ------------------------------------------------------------
  1579
  1580 = 2D59			adr.WINNER	= [DATAORIGIN+$0149] .array [256]
  1581 1777			.var WINNER	= adr.WINNER .word
  1582 = 2E59			adr.LOSER	= [DATAORIGIN+$0249] .array [256]
  1583 1777			.var LOSER	= adr.LOSER .word
  1584 = 2F59			adr.TMP	= [DATAORIGIN+$0349] .array [256]
  1585 1777			.var TMP	= adr.TMP .word
  1586
  1587 = 1778			@VarData	= WINNER
  1588 = 0300			@VarDataSize	= 768
  1589
  1590 1777			@exit
  1591 					.ifdef @new
  1592 					lda <@VarData
  1593 					sta :ztmp
  1594 					lda >@VarData
  1595 					ldy #@VarDataSize-1
  1596 					jmp @FreeMem
  1597 					els
  1598 1777 60				rts						; ret
  1599 					eif
  1600 = 1778 59 2D		WINNER
  1600 = 177A 59 2E		LOSER
  1600 = 177C 59 2F		TMP
  1600 				.endl
  1601
  1602 177E			.local	ISGAMEOVER					; FUNCTION
  1603
  1604 				; optimize OK (tools.inc), line = 194
  1605
  1606 177E AD 28 2C			lda PLAYER1.SCORE
  1607 1781 C9 39			cmp #$39
  1608 1783 D0 05			jne l_05A2
  1609 1785 A9 01			lda #$01
  1610 1787 8D 21 2C			sta GAMEOVER
  1611 178A			l_05A2
  1612
  1613 				; optimize OK (tools.inc), line = 195
  1614
  1615 178A AD 30 2C			lda PLAYER2.SCORE
  1616 178D C9 39			cmp #$39
  1617 178F D0 05			jne l_05BB
  1618 1791 A9 01			lda #$01
  1619 1793 8D 21 2C			sta GAMEOVER
  1620 1796			l_05BB
  1621
  1622 				; optimize OK (tools.inc), line = 196
  1623
  1624 1796 AD 38 2C			lda PLAYER3.SCORE
  1625 1799 C9 39			cmp #$39
  1626 179B D0 05			jne l_05D4
  1627 179D A9 01			lda #$01
  1628 179F 8D 21 2C			sta GAMEOVER
  1629 17A2			l_05D4
  1630
  1631 				; optimize OK (tools.inc), line = 197
  1632
  1633 17A2 AD 40 2C			lda PLAYER4.SCORE
  1634 17A5 C9 39			cmp #$39
  1635 17A7 D0 05			jne l_05ED
  1636 17A9 A9 01			lda #$01
  1637 17AB 8D 21 2C			sta GAMEOVER
  1638 17AE			l_05ED
  1639
  1640 				; optimize OK (tools.inc), line = 198
  1641
  1642 17AE AD 21 2C			lda GAMEOVER
  1643 17B1 8D 59 30			sta RESULT
  1644 17B4			@exit
  1645
  1646 				; ------------------------------------------------------------
  1647
  1648 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1649 				; as Pointer
  1650
  1651 17B4 E8				inx
  1652 17B5 AD 59 30 95 18		mva RESULT :STACKORIGIN,x
  1653
  1654 					.ifdef @new
  1655 					lda <@VarData
  1656 					sta :ztmp
  1657 					lda >@VarData
  1658 					ldy #@VarDataSize-1
  1659 					jmp @FreeMem
  1660 					eif
  1661
  1662 				; ------------------------------------------------------------
  1663
  1664 = 3059			RESULT	= DATAORIGIN+$0449
  1665
  1666 = 3059			@VarData	= RESULT
  1667 = 0001			@VarDataSize	= 1
  1668
  1669 17BA 60				rts						; ret
  1670 				.endl
  1671
  1672 17BB			.local	ISONELEFT					; FUNCTION
  1673
  1674 				; optimize OK (tools.inc), line = 205
  1675
  1676 17BB A0 01			ldy #1
  1677 17BD A5 5A			lda ALIVE
  1678 17BF F0 01			beq @+
  1679 17C1 88				dey
  1680 17C2			@
  1681 17C2 84 21			sty :STACKORIGIN+9
  1682 17C4 A0 01			ldy #1
  1683 17C6 A5 5A			lda ALIVE
  1684 17C8 C9 FF			cmp #$FF
  1685 17CA F0 01			beq @+
  1686 17CC 88				dey
  1687 17CD			@
  1688 17CD 98				tya
  1689 17CE 05 21			ora :STACKORIGIN+9
  1690 17D0 8D 5A 30			sta RESULT
  1691 17D3			@exit
  1692
  1693 				; ------------------------------------------------------------
  1694
  1695 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1696 				; as Pointer
  1697
  1698 17D3 E8				inx
  1699 17D4 AD 5A 30 95 18		mva RESULT :STACKORIGIN,x
  1700
  1701 					.ifdef @new
  1702 					lda <@VarData
  1703 					sta :ztmp
  1704 					lda >@VarData
  1705 					ldy #@VarDataSize-1
  1706 					jmp @FreeMem
  1707 					eif
  1708
  1709 				; ------------------------------------------------------------
  1710
  1711 = 305A			RESULT	= DATAORIGIN+$044A
  1712
  1713 = 305A			@VarData	= RESULT
  1714 = 0001			@VarDataSize	= 1
  1715
  1716 17D9 60				rts						; ret
  1717 				.endl
  1718
  1719 17DA			.local	SETFONTS					; PROCEDURE
  1720
  1721 				; optimize OK (tools.inc), line = 220
  1722
  1723 17DA A9 00			lda #$00
  1724 17DC 85 04			sta SYSTEM.MOVE_006F.COUNT
  1725 17DE A9 04			lda #$04
  1726 17E0 85 05			sta SYSTEM.MOVE_006F.COUNT+1
  1727 17E2 A9 00			lda #$00
  1728 17E4 85 0C			sta SYSTEM.MOVE_006F.DEST
  1729 17E6 A9 60			lda #$60
  1730 17E8 85 0D			sta SYSTEM.MOVE_006F.DEST+1
  1731 17EA A9 00			lda #$00
  1732 17EC 85 08			sta SYSTEM.MOVE_006F.SOURCE
  1733 17EE A9 D0			lda #$D0
  1734 17F0 85 09			sta SYSTEM.MOVE_006F.SOURCE+1
  1735 17F2 20 A4 11			jsr SYSTEM.MOVE_006F
  1736
  1737 				; optimize OK (tools.inc), line = 221
  1738
  1739 17F5 AD 22 18			lda FONTS
  1740 17F8 85 12			sta :bp2
  1741 17FA AD 23 18			lda FONTS+1
  1742 17FD 85 13			sta :bp2+1
  1743 17FF A0 2F			ldy #$2F
  1744 1801 B1 12 99 80 62 88 + 	mva:rpl (:bp2),y $6280,y-
  1745
  1746 				; optimize OK (tools.inc), line = 224
  1747
  1748 1809 AD 12 FF			lda RAMROMSEL
  1749 180C 29 FB			and #$FB
  1750 180E 8D 12 FF			sta RAMROMSEL
  1751
  1752 				; optimize OK (tools.inc), line = 227
  1753
  1754 1811 AD 13 FF			lda CHBAS
  1755 1814 29 03			and #$03
  1756 1816 85 21			sta :STACKORIGIN+9
  1757 1818 A9 18			lda #$18
  1758 181A 0A				asl @
  1759 181B 0A				asl @
  1760 181C 05 21			ora :STACKORIGIN+9
  1761 181E 8D 13 FF			sta CHBAS
  1762
  1763 				; ------------------------------------------------------------
  1764
  1765 = 305B			adr.FONTS	= [DATAORIGIN+$044B] .array [48]
  1766 1821			.var FONTS	= adr.FONTS .word
  1767
  1768 = 1822			@VarData	= FONTS
  1769 = 0030			@VarDataSize	= 48
  1770
  1771 1821			@exit
  1772 					.ifdef @new
  1773 					lda <@VarData
  1774 					sta :ztmp
  1775 					lda >@VarData
  1776 					ldy #@VarDataSize-1
  1777 					jmp @FreeMem
  1778 					els
  1779 1821 60				rts						; ret
  1780 					eif
  1781 = 1822 5B 30		FONTS
  1781 				.endl
  1782
  1783 1824			.local	HUMAN						; PROCEDURE
  1784
  1785 				; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5
  1786
  1787 1824 20 BD 15			jsr CHECKJOYSTATUS
  1788 1827 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1789 1831 A0 04			ldy #PLY.DIR-DATAORIGIN
  1790 1833 B1 12			lda (:bp2),y
  1791 1835 85 5B			sta NEWDIR
  1792
  1793 				; optimize OK (ai.inc), line = 6
  1794
  1795 1837 A5 5D			lda JOYSTATUS
  1796 1839 8D 8B 30			sta @CASETMP_0005
  1797 183C C9 01			cmp #$01
  1798 183E D0 19			jne l_065B
  1799 1840			@
  1800
  1801 				; optimize OK (ai.inc), line = 7
  1802
  1803 1840 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1804 184A A0 04			ldy #PLY.DIR-DATAORIGIN
  1805 184C B1 12			lda (:bp2),y
  1806 184E C9 02			cmp #$02
  1807 1850 F0 04			jeq l_066D
  1808 1852 A9 01			lda #$01
  1809 1854 85 5B			sta NEWDIR
  1810 1856			l_066D
  1811
  1812 1856 4C AD 18			jmp a_0005
  1813 1859			l_065B
  1814 1859 C9 02			cmp #$02
  1815 185B D0 19			jne l_067D
  1816 185D			@
  1817
  1818 				; optimize OK (ai.inc), line = 8
  1819
  1820 185D AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1821 1867 A0 04			ldy #PLY.DIR-DATAORIGIN
  1822 1869 B1 12			lda (:bp2),y
  1823 186B C9 01			cmp #$01
  1824 186D F0 04			jeq l_068F
  1825 186F A9 02			lda #$02
  1826 1871 85 5B			sta NEWDIR
  1827 1873			l_068F
  1828
  1829 1873 4C AD 18			jmp a_0005
  1830 1876			l_067D
  1831 1876 C9 04			cmp #$04
  1832 1878 D0 19			jne l_069F
  1833 187A			@
  1834
  1835 				; optimize OK (ai.inc), line = 9
  1836
  1837 187A AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1838 1884 A0 04			ldy #PLY.DIR-DATAORIGIN
  1839 1886 B1 12			lda (:bp2),y
  1840 1888 C9 08			cmp #$08
  1841 188A F0 04			jeq l_06B1
  1842 188C A9 04			lda #$04
  1843 188E 85 5B			sta NEWDIR
  1844 1890			l_06B1
  1845
  1846 1890 4C AD 18			jmp a_0005
  1847 1893			l_069F
  1848 1893 C9 08			cmp #$08
  1849 1895 D0 16			jne l_06C1
  1850 1897			@
  1851
  1852 				; optimize OK (ai.inc), line = 10
  1853
  1854 1897 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1855 18A1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1856 18A3 B1 12			lda (:bp2),y
  1857 18A5 C9 04			cmp #$04
  1858 18A7 F0 04			jeq l_06D3
  1859 18A9 A9 08			lda #$08
  1860 18AB 85 5B			sta NEWDIR
  1861 18AD			l_06D3
  1862
  1863 18AD			l_06C1
  1864 18AD			a_0005
  1865
  1866 				; optimize OK (ai.inc), line = 13
  1867
  1868 18AD A5 5B			lda NEWDIR
  1869 18AF 25 5C			and AVAILDIR
  1870 18B1 D0 12			jne l_06FA
  1871
  1872 				; optimize OK (ai.inc), line = 14
  1873
  1874 18B3 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1875 18BD A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1876 18BF A9 00			lda #$00
  1877 18C1 91 12			sta (:bp2),y
  1878 18C3 C6 5A			dec ALIVE
  1879 18C5			l_06FA
  1880
  1881 				; ------------------------------------------------------------
  1882
  1883 = 308B			@CASETMP_0005	= DATAORIGIN+$047B
  1884
  1885 = 308B			@VarData	= @CASETMP_0005
  1886 = 0001			@VarDataSize	= 1
  1887
  1888 18C5			@exit
  1889 					.ifdef @new
  1890 					lda <@VarData
  1891 					sta :ztmp
  1892 					lda >@VarData
  1893 					ldy #@VarDataSize-1
  1894 					jmp @FreeMem
  1895 					els
  1896 18C5 60				rts						; ret
  1897 					eif
  1898 				.endl
  1899
  1900 18C6			.local	AISTRAIGHT					; PROCEDURE
  1901
  1902 				; optimize OK (ai.inc), line = 22
  1903
  1904 18C6 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  1905 18D0 A0 04			ldy #PLY.DIR-DATAORIGIN
  1906 18D2 B1 12			lda (:bp2),y
  1907 18D4 25 5C			and AVAILDIR
  1908 18D6 F0 07			jeq l_0721
  1909 18D8 B1 12			lda (:bp2),y
  1910 18DA 85 5B			sta NEWDIR
  1911 18DC 4C 42 19			jmp l_0731
  1912 18DF			l_0721
  1913
  1914 				; optimize OK (ai.inc), line = 24
  1915
  1916 18DF A5 5C			lda AVAILDIR
  1917 18E1 C9 03			cmp #$03
  1918 18E3 D0 10			jne l_0743
  1919 18E5 A9 02			lda #$02
  1920 18E7 20 D0 11			jsr SYSTEM.RANDOM_0087
  1921 18EA B4 18			ldy :STACKORIGIN,x
  1922 18EC B9 58 10			lda adr.DIRECTION,y
  1923 18EF 85 5B			sta NEWDIR
  1924 18F1 CA				dex
  1925 18F2 4C 0D 19			jmp l_0755
  1926 18F5			l_0743
  1927
  1928 				; optimize OK (ai.inc), line = 26
  1929
  1930 18F5 A5 5C			lda AVAILDIR
  1931 18F7 8D 8C 30			sta @CASETMP_0006
  1932 18FA C9 01			cmp #$01
  1933 18FC D0 07			jne l_0760
  1934 18FE			@
  1935
  1936 				; optimize OK (ai.inc), line = 27
  1937
  1938 18FE A9 01			lda #$01
  1939 1900 85 5B			sta NEWDIR
  1940
  1941 1902 4C 0D 19			jmp a_0006
  1942 1905			l_0760
  1943 1905 C9 02			cmp #$02
  1944 1907 D0 04			jne l_076D
  1945 1909			@
  1946
  1947 				; optimize OK (ai.inc), line = 28
  1948
  1949 1909 A9 02			lda #$02
  1950 190B 85 5B			sta NEWDIR
  1951
  1952 190D			l_076D
  1953 190D			a_0006
  1954 190D			l_0755
  1955
  1956 				; optimize OK (ai.inc), line = 31
  1957
  1958 190D A5 5C			lda AVAILDIR
  1959 190F C9 0C			cmp #$0C
  1960 1911 D0 17			jne l_0789
  1961 1913 A9 02			lda #$02
  1962 1915 20 D0 11			jsr SYSTEM.RANDOM_0087
  1963 1918 B5 18			lda :STACKORIGIN,x
  1964 191A 18 69 02			add #$02
  1965 191D 95 18			sta :STACKORIGIN,x
  1966 191F B4 18			ldy :STACKORIGIN,x
  1967 1921 B9 58 10			lda adr.DIRECTION,y
  1968 1924 85 5B			sta NEWDIR
  1969 1926 CA				dex
  1970 1927 4C 42 19			jmp l_079F
  1971 192A			l_0789
  1972
  1973 				; optimize OK (ai.inc), line = 33
  1974
  1975 192A A5 5C			lda AVAILDIR
  1976 192C 8D 8D 30			sta @CASETMP_0007
  1977 192F C9 04			cmp #$04
  1978 1931 D0 07			jne l_07AA
  1979 1933			@
  1980
  1981 				; optimize OK (ai.inc), line = 34
  1982
  1983 1933 A9 04			lda #$04
  1984 1935 85 5B			sta NEWDIR
  1985
  1986 1937 4C 42 19			jmp a_0007
  1987 193A			l_07AA
  1988 193A C9 08			cmp #$08
  1989 193C D0 04			jne l_07B7
  1990 193E			@
  1991
  1992 				; optimize OK (ai.inc), line = 35
  1993
  1994 193E A9 08			lda #$08
  1995 1940 85 5B			sta NEWDIR
  1996
  1997 1942			l_07B7
  1998 1942			a_0007
  1999 1942			l_079F
  2000 1942			l_0731
  2001
  2002 				; ------------------------------------------------------------
  2003
  2004 = 308C			@CASETMP_0006	= DATAORIGIN+$047C
  2005 = 308D			@CASETMP_0007	= DATAORIGIN+$047D
  2006
  2007 = 308C			@VarData	= @CASETMP_0006
  2008 = 0002			@VarDataSize	= 2
  2009
  2010 1942			@exit
  2011 					.ifdef @new
  2012 					lda <@VarData
  2013 					sta :ztmp
  2014 					lda >@VarData
  2015 					ldy #@VarDataSize-1
  2016 					jmp @FreeMem
  2017 					els
  2018 1942 60				rts						; ret
  2019 					eif
  2020 				.endl
  2021
  2022 1943			.local	AISAPPER					; PROCEDURE
  2023
  2024 				; optimize OK (ai.inc), line = 48
  2025
  2026 1943 A9 00			lda #$00
  2027 1945 8D 8E 30			sta L
  2028 1948 8D 8F 30			sta R
  2029 194B 8D 90 30			sta U
  2030 194E 8D 91 30			sta D
  2031
  2032 				; optimize OK (ai.inc), line = 49
  2033
  2034 1951 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2035 195B A0 01			ldy #PLY.Y-DATAORIGIN
  2036 195D B1 12			lda (:bp2),y
  2037 195F 0A				asl @
  2038 1960 A8				tay
  2039 1961 A9 00			lda #$00
  2040 1963 18 79 26 10			add adr.MUL40,y
  2041 1967 85 21			sta :STACKORIGIN+9
  2042 1969 A9 0C			lda #$0C
  2043 196B 79 27 10			adc adr.MUL40+1,y
  2044 196E 85 31			sta :STACKORIGIN+STACKWIDTH+9
  2045 1970 A0 00			ldy #PLY.X-DATAORIGIN
  2046 1972 A5 21			lda :STACKORIGIN+9
  2047 1974 18 71 12			add (:bp2),y
  2048 1977 85 5E			sta T0W
  2049 1979 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  2050 197B 69 00			adc #$00
  2051 197D 85 5F			sta T0W+1
  2052
  2053 				; optimize OK (ai.inc), line = 51
  2054
  2055 197F A5 5C			lda AVAILDIR
  2056 1981 29 01			and #$01
  2057 1983 F0 73			jeq l_07FD
  2058
  2059 				; optimize OK (ai.inc), line = 52
  2060
  2061 1985 A9 05			lda #$05
  2062 1987 85 59			sta I0B
  2063
  2064 1989			l_0807
  2065 				; --- ForToDoCondition
  2066 1989 A5 59			lda I0B
  2067 198B C9 01			cmp #$01
  2068 198D 90 69			jcc l_0815
  2069
  2070 				; optimize OK (ai.inc), line = 53
  2071
  2072 198F 0A				asl @
  2073 1990 A8				tay
  2074 1991 A5 5E			lda T0W
  2075 1993 38 F9 26 10			sub adr.MUL40,y
  2076 1997 85 21			sta :STACKORIGIN+9
  2077 1999 A5 5F			lda T0W+1
  2078 199B F9 27 10			sbc adr.MUL40+1,y
  2079 199E 85 11			sta :bp+1
  2080 19A0 A4 21			ldy :STACKORIGIN+9
  2081 19A2 B1 10			lda (:bp),y
  2082 19A4 C9 20			cmp #$20
  2083 19A6 D0 03			jne l_082F
  2084 19A8 EE 90 30			inc U
  2085 19AB			l_082F
  2086
  2087 				; optimize OK (ai.inc), line = 54
  2088
  2089 19AB A5 59			lda I0B
  2090 19AD 0A				asl @
  2091 19AE A8				tay
  2092 19AF A5 5E			lda T0W
  2093 19B1 38 F9 26 10			sub adr.MUL40,y
  2094 19B5 85 21			sta :STACKORIGIN+9
  2095 19B7 A5 5F			lda T0W+1
  2096 19B9 F9 27 10			sbc adr.MUL40+1,y
  2097 19BC 85 11			sta :bp+1
  2098 19BE A5 21			lda :STACKORIGIN+9
  2099 19C0 18 69 01			add #$01
  2100 19C3 A8				tay
  2101 19C4 90 02			scc
  2102 19C6 E6 11			inc :bp+1
  2103 19C8 B1 10			lda (:bp),y
  2104 19CA C9 20			cmp #$20
  2105 19CC D0 03			jne l_0854
  2106 19CE EE 90 30			inc U
  2107 19D1			l_0854
  2108
  2109 				; optimize OK (ai.inc), line = 55
  2110
  2111 19D1 A5 59			lda I0B
  2112 19D3 0A				asl @
  2113 19D4 A8				tay
  2114 19D5 A5 5E			lda T0W
  2115 19D7 38 F9 26 10			sub adr.MUL40,y
  2116 19DB 85 21			sta :STACKORIGIN+9
  2117 19DD A5 5F			lda T0W+1
  2118 19DF F9 27 10			sbc adr.MUL40+1,y
  2119 19E2 85 11			sta :bp+1
  2120 19E4 A4 21			ldy :STACKORIGIN+9
  2121 19E6 88				dey
  2122 19E7 B0 02			scs
  2123 19E9 C6 11			dec :bp+1
  2124 19EB B1 10			lda (:bp),y
  2125 19ED C9 20			cmp #$20
  2126 19EF D0 03			jne l_0879
  2127 19F1 EE 90 30			inc U
  2128 19F4			l_0879
  2129
  2130 				; --- ForToDoEpilog
  2131 19F4 C6 59			dec I0B
  2132 19F6 10 91			jpl l_0807
  2133 19F8			l_0815
  2134 19F8			l_07FD
  2135
  2136 				; optimize OK (ai.inc), line = 59
  2137
  2138 19F8 A5 5C			lda AVAILDIR
  2139 19FA 29 02			and #$02
  2140 19FC F0 73			jeq l_089D
  2141
  2142 				; optimize OK (ai.inc), line = 60
  2143
  2144 19FE A9 05			lda #$05
  2145 1A00 85 59			sta I0B
  2146
  2147 1A02			l_08A7
  2148 				; --- ForToDoCondition
  2149 1A02 A5 59			lda I0B
  2150 1A04 C9 01			cmp #$01
  2151 1A06 90 69			jcc l_08B5
  2152
  2153 				; optimize OK (ai.inc), line = 61
  2154
  2155 1A08 0A				asl @
  2156 1A09 A8				tay
  2157 1A0A A5 5E			lda T0W
  2158 1A0C 18 79 26 10			add adr.MUL40,y
  2159 1A10 85 21			sta :STACKORIGIN+9
  2160 1A12 A5 5F			lda T0W+1
  2161 1A14 79 27 10			adc adr.MUL40+1,y
  2162 1A17 85 11			sta :bp+1
  2163 1A19 A4 21			ldy :STACKORIGIN+9
  2164 1A1B B1 10			lda (:bp),y
  2165 1A1D C9 20			cmp #$20
  2166 1A1F D0 03			jne l_08CF
  2167 1A21 EE 91 30			inc D
  2168 1A24			l_08CF
  2169
  2170 				; optimize OK (ai.inc), line = 62
  2171
  2172 1A24 A5 59			lda I0B
  2173 1A26 0A				asl @
  2174 1A27 A8				tay
  2175 1A28 A5 5E			lda T0W
  2176 1A2A 18 79 26 10			add adr.MUL40,y
  2177 1A2E 85 21			sta :STACKORIGIN+9
  2178 1A30 A5 5F			lda T0W+1
  2179 1A32 79 27 10			adc adr.MUL40+1,y
  2180 1A35 85 11			sta :bp+1
  2181 1A37 A5 21			lda :STACKORIGIN+9
  2182 1A39 18 69 01			add #$01
  2183 1A3C A8				tay
  2184 1A3D 90 02			scc
  2185 1A3F E6 11			inc :bp+1
  2186 1A41 B1 10			lda (:bp),y
  2187 1A43 C9 20			cmp #$20
  2188 1A45 D0 03			jne l_08F4
  2189 1A47 EE 91 30			inc D
  2190 1A4A			l_08F4
  2191
  2192 				; optimize OK (ai.inc), line = 63
  2193
  2194 1A4A A5 59			lda I0B
  2195 1A4C 0A				asl @
  2196 1A4D A8				tay
  2197 1A4E A5 5E			lda T0W
  2198 1A50 18 79 26 10			add adr.MUL40,y
  2199 1A54 85 21			sta :STACKORIGIN+9
  2200 1A56 A5 5F			lda T0W+1
  2201 1A58 79 27 10			adc adr.MUL40+1,y
  2202 1A5B 85 11			sta :bp+1
  2203 1A5D A4 21			ldy :STACKORIGIN+9
  2204 1A5F 88				dey
  2205 1A60 B0 02			scs
  2206 1A62 C6 11			dec :bp+1
  2207 1A64 B1 10			lda (:bp),y
  2208 1A66 C9 20			cmp #$20
  2209 1A68 D0 03			jne l_0919
  2210 1A6A EE 91 30			inc D
  2211 1A6D			l_0919
  2212
  2213 				; --- ForToDoEpilog
  2214 1A6D C6 59			dec I0B
  2215 1A6F 10 91			jpl l_08A7
  2216 1A71			l_08B5
  2217 1A71			l_089D
  2218
  2219 				; optimize OK (ai.inc), line = 67
  2220
  2221 1A71 A5 5C			lda AVAILDIR
  2222 1A73 29 04			and #$04
  2223 1A75 F0 5F			jeq l_093D
  2224
  2225 				; optimize OK (ai.inc), line = 68
  2226
  2227 1A77 A9 05			lda #$05
  2228 1A79 85 59			sta I0B
  2229
  2230 1A7B			l_0947
  2231 				; --- ForToDoCondition
  2232 1A7B A5 59			lda I0B
  2233 1A7D C9 01			cmp #$01
  2234 1A7F 90 55			jcc l_0955
  2235
  2236 				; optimize OK (ai.inc), line = 69
  2237
  2238 1A81 A5 5E			lda T0W
  2239 1A83 38 E5 59			sub I0B
  2240 1A86 A8				tay
  2241 1A87 A5 5F			lda T0W+1
  2242 1A89 E9 00			sbc #$00
  2243 1A8B 85 11			sta :bp+1
  2244 1A8D B1 10			lda (:bp),y
  2245 1A8F C9 20			cmp #$20
  2246 1A91 D0 03			jne l_096D
  2247 1A93 EE 8E 30			inc L
  2248 1A96			l_096D
  2249
  2250 				; optimize OK (ai.inc), line = 70
  2251
  2252 1A96 A5 5E			lda T0W
  2253 1A98 38 E5 59			sub I0B
  2254 1A9B A8				tay
  2255 1A9C A5 5F			lda T0W+1
  2256 1A9E E9 00			sbc #$00
  2257 1AA0 85 11			sta :bp+1
  2258 1AA2 98				tya
  2259 1AA3 18 69 28			add #$28
  2260 1AA6 A8				tay
  2261 1AA7 90 02			scc
  2262 1AA9 E6 11			inc :bp+1
  2263 1AAB B1 10			lda (:bp),y
  2264 1AAD C9 20			cmp #$20
  2265 1AAF D0 03			jne l_0990
  2266 1AB1 EE 8E 30			inc L
  2267 1AB4			l_0990
  2268
  2269 				; optimize OK (ai.inc), line = 71
  2270
  2271 1AB4 A5 5E			lda T0W
  2272 1AB6 38 E5 59			sub I0B
  2273 1AB9 A8				tay
  2274 1ABA A5 5F			lda T0W+1
  2275 1ABC E9 00			sbc #$00
  2276 1ABE 85 11			sta :bp+1
  2277 1AC0 98				tya
  2278 1AC1 38 E9 28			sub #$28
  2279 1AC4 A8				tay
  2280 1AC5 B0 02			scs
  2281 1AC7 C6 11			dec :bp+1
  2282 1AC9 B1 10			lda (:bp),y
  2283 1ACB C9 20			cmp #$20
  2284 1ACD D0 03			jne l_09B3
  2285 1ACF EE 8E 30			inc L
  2286 1AD2			l_09B3
  2287
  2288 				; --- ForToDoEpilog
  2289 1AD2 C6 59			dec I0B
  2290 1AD4 10 A5			jpl l_0947
  2291 1AD6			l_0955
  2292 1AD6			l_093D
  2293
  2294 				; optimize OK (ai.inc), line = 75
  2295
  2296 1AD6 A5 5C			lda AVAILDIR
  2297 1AD8 29 08			and #$08
  2298 1ADA F0 5D			jeq l_09D7
  2299
  2300 				; optimize OK (ai.inc), line = 76
  2301
  2302 1ADC A9 05			lda #$05
  2303 1ADE 85 59			sta I0B
  2304
  2305 1AE0			l_09E1
  2306 				; --- ForToDoCondition
  2307 1AE0 A5 59			lda I0B
  2308 1AE2 C9 01			cmp #$01
  2309 1AE4 90 53			jcc l_09EF
  2310
  2311 				; optimize OK (ai.inc), line = 77
  2312
  2313 1AE6 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
  2314 1AEE A4 59			ldy I0B
  2315 1AF0 B1 12			lda (:bp2),y
  2316 1AF2 C9 20			cmp #$20
  2317 1AF4 D0 03			jne l_0A07
  2318 1AF6 EE 8F 30			inc R
  2319 1AF9			l_0A07
  2320
  2321 				; optimize OK (ai.inc), line = 78
  2322
  2323 1AF9 A5 5E			lda T0W
  2324 1AFB 18 65 59			add I0B
  2325 1AFE A8				tay
  2326 1AFF A5 5F			lda T0W+1
  2327 1B01 69 00			adc #$00
  2328 1B03 85 11			sta :bp+1
  2329 1B05 98				tya
  2330 1B06 18 69 28			add #$28
  2331 1B09 A8				tay
  2332 1B0A 90 02			scc
  2333 1B0C E6 11			inc :bp+1
  2334 1B0E B1 10			lda (:bp),y
  2335 1B10 C9 20			cmp #$20
  2336 1B12 D0 03			jne l_0A2A
  2337 1B14 EE 8F 30			inc R
  2338 1B17			l_0A2A
  2339
  2340 				; optimize OK (ai.inc), line = 79
  2341
  2342 1B17 A5 5E			lda T0W
  2343 1B19 18 65 59			add I0B
  2344 1B1C A8				tay
  2345 1B1D A5 5F			lda T0W+1
  2346 1B1F 69 00			adc #$00
  2347 1B21 85 11			sta :bp+1
  2348 1B23 98				tya
  2349 1B24 38 E9 28			sub #$28
  2350 1B27 A8				tay
  2351 1B28 B0 02			scs
  2352 1B2A C6 11			dec :bp+1
  2353 1B2C B1 10			lda (:bp),y
  2354 1B2E C9 20			cmp #$20
  2355 1B30 D0 03			jne l_0A4D
  2356 1B32 EE 8F 30			inc R
  2357 1B35			l_0A4D
  2358
  2359 				; --- ForToDoEpilog
  2360 1B35 C6 59			dec I0B
  2361 1B37 10 A7			jpl l_09E1
  2362 1B39			l_09EF
  2363 1B39			l_09D7
  2364
  2365 				; optimize OK (ai.inc), line = 83
  2366
  2367 1B39 AD 91 30			lda D
  2368 1B3C 85 58			sta T0B
  2369
  2370 				; optimize OK (ai.inc), line = 84
  2371
  2372 1B3E CD 90 30			cmp U
  2373 1B41 B0 05			jcs l_0A75
  2374 1B43 AD 90 30			lda U
  2375 1B46 85 58			sta T0B
  2376 1B48			l_0A75
  2377
  2378 				; optimize OK (ai.inc), line = 85
  2379
  2380 1B48 A5 58			lda T0B
  2381 1B4A CD 8E 30			cmp L
  2382 1B4D B0 05			jcs l_0A92
  2383 1B4F AD 8E 30			lda L
  2384 1B52 85 58			sta T0B
  2385 1B54			l_0A92
  2386
  2387 				; optimize OK (ai.inc), line = 86
  2388
  2389 1B54 A5 58			lda T0B
  2390 1B56 CD 8F 30			cmp R
  2391 1B59 B0 05			jcs l_0AAF
  2392 1B5B AD 8F 30			lda R
  2393 1B5E 85 58			sta T0B
  2394 1B60			l_0AAF
  2395
  2396 				; optimize OK (ai.inc), line = 88
  2397
  2398 1B60 A5 58			lda T0B
  2399 1B62 CD 91 30			cmp D
  2400 1B65 D0 04			jne l_0ACC
  2401 1B67 A9 02			lda #$02
  2402 1B69 85 58			sta T0B
  2403 1B6B			l_0ACC
  2404
  2405 				; optimize OK (ai.inc), line = 89
  2406
  2407 1B6B A5 58			lda T0B
  2408 1B6D CD 90 30			cmp U
  2409 1B70 D0 04			jne l_0AE7
  2410 1B72 A9 01			lda #$01
  2411 1B74 85 58			sta T0B
  2412 1B76			l_0AE7
  2413
  2414 				; optimize OK (ai.inc), line = 90
  2415
  2416 1B76 A5 58			lda T0B
  2417 1B78 CD 8E 30			cmp L
  2418 1B7B D0 04			jne l_0B02
  2419 1B7D A9 04			lda #$04
  2420 1B7F 85 58			sta T0B
  2421 1B81			l_0B02
  2422
  2423 				; optimize OK (ai.inc), line = 91
  2424
  2425 1B81 A5 58			lda T0B
  2426 1B83 CD 8F 30			cmp R
  2427 1B86 D0 04			jne l_0B1D
  2428 1B88 A9 08			lda #$08
  2429 1B8A 85 58			sta T0B
  2430 1B8C			l_0B1D
  2431
  2432 				; optimize OK (ai.inc), line = 93
  2433
  2434 1B8C A5 5C			lda AVAILDIR
  2435 1B8E 25 58			and T0B
  2436 1B90 F0 07			jeq l_0B3C
  2437 1B92 A5 58			lda T0B
  2438 1B94 85 5B			sta NEWDIR
  2439 1B96 4C 9C 1B			jmp l_0B4C
  2440 1B99			l_0B3C
  2441
  2442 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94
  2443
  2444 1B99 20 C6 18			jsr AISTRAIGHT
  2445 1B9C			l_0B4C
  2446
  2447 				; ------------------------------------------------------------
  2448
  2449 = 308E			L	= DATAORIGIN+$047E
  2450 = 308F			R	= DATAORIGIN+$047F
  2451 = 3090			U	= DATAORIGIN+$0480
  2452 = 3091			D	= DATAORIGIN+$0481
  2453 = 0001			@FORTMP_0804	= $01
  2454 = 0001			@FORTMP_08A4	= $01
  2455 = 0001			@FORTMP_0944	= $01
  2456 = 0001			@FORTMP_09DE	= $01
  2457
  2458 = 308E			@VarData	= L
  2459 = 0004			@VarDataSize	= 4
  2460
  2461 1B9C			@exit
  2462 					.ifdef @new
  2463 					lda <@VarData
  2464 					sta :ztmp
  2465 					lda >@VarData
  2466 					ldy #@VarDataSize-1
  2467 					jmp @FreeMem
  2468 					els
  2469 1B9C 60				rts						; ret
  2470 					eif
  2471 				.endl
  2472
  2473 1B9D			.local	AIBULLY						; PROCEDURE
  2474
  2475 				; optimize OK (ai.inc), line = 101
  2476
  2477 1B9D AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2478 1BA7 A0 04			ldy #PLY.DIR-DATAORIGIN
  2479 1BA9 B1 12			lda (:bp2),y
  2480 1BAB 85 58			sta T0B
  2481
  2482 				; optimize OK (ai.inc), line = 103
  2483
  2484 1BAD AD 29 2C			lda PLAYER1.ISALIVE
  2485 1BB0 0D 31 2C			ora PLAYER2.ISALIVE
  2486 1BB3 D0 03 4C 5A 1C		jeq l_0B69
  2487
  2488 				; optimize OK (ai.inc), line = 105
  2489
  2490 1BB8 AD 29 2C			lda PLAYER1.ISALIVE
  2491 1BBB F0 0F			jeq l_0B76
  2492 1BBD AD 07 2C			lda PLAYER1
  2493 1BC0 8D 03 2C			sta TMPPLY
  2494 1BC3 AD 08 2C			lda PLAYER1+1
  2495 1BC6 8D 04 2C			sta TMPPLY+1
  2496 1BC9 4C D8 1B			jmp l_0B85
  2497 1BCC			l_0B76
  2498 1BCC AD 09 2C			lda PLAYER2
  2499 1BCF 8D 03 2C			sta TMPPLY
  2500 1BD2 AD 0A 2C			lda PLAYER2+1
  2501 1BD5 8D 04 2C			sta TMPPLY+1
  2502 1BD8			l_0B85
  2503
  2504 				; optimize OK (ai.inc), line = 107
  2505
  2506 1BD8 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2507 1BE2 A0 01			ldy #PLY.Y-DATAORIGIN
  2508 1BE4 B1 12			lda (:bp2),y
  2509 1BE6 85 21			sta :STACKORIGIN+9
  2510 1BE8 AC 03 2C 84 12 AC + 	mwy TMPPLY :bp2
  2511 1BF2 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2512 1BF4 B1 12			lda (:bp2),y
  2513 1BF6 C5 21			cmp :STACKORIGIN+9
  2514 1BF8 B0 07			jcs l_0B9E
  2515 1BFA A9 01			lda #$01
  2516 1BFC 85 58			sta T0B
  2517 1BFE 4C 05 1C			jmp l_0BAC
  2518 1C01			l_0B9E
  2519 1C01 A9 02			lda #$02
  2520 1C03 85 58			sta T0B
  2521 1C05			l_0BAC
  2522
  2523 				; optimize OK (ai.inc), line = 108
  2524
  2525 1C05 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2526 1C0F A0 01			ldy #PLY.Y-DATAORIGIN
  2527 1C11 B1 12			lda (:bp2),y
  2528 1C13 85 21			sta :STACKORIGIN+9
  2529 1C15 AC 03 2C 84 12 AC + 	mwy TMPPLY :bp2
  2530 1C1F A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2531 1C21 B1 12			lda (:bp2),y
  2532 1C23 C5 21			cmp :STACKORIGIN+9
  2533 1C25 F0 06			jeq l_0BD6x
  2534 1C27 A5 5C			lda AVAILDIR
  2535 1C29 25 58			and T0B
  2536 1C2B D0 2D			jne l_0BD6
  2537 1C2D			l_0BD6x
  2538
  2539 				; optimize OK (ai.inc), line = 109
  2540
  2541 1C2D AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2542 1C37 A0 00			ldy #PLY.X-DATAORIGIN
  2543 1C39 B1 12			lda (:bp2),y
  2544 1C3B 85 21			sta :STACKORIGIN+9
  2545 1C3D AC 03 2C 84 12 AC + 	mwy TMPPLY :bp2
  2546 1C47 A0 00			ldy #TMPPLY.X-DATAORIGIN
  2547 1C49 B1 12			lda (:bp2),y
  2548 1C4B C5 21			cmp :STACKORIGIN+9
  2549 1C4D B0 07			jcs l_0BEB
  2550 1C4F A9 04			lda #$04
  2551 1C51 85 58			sta T0B
  2552 1C53 4C 5A 1C			jmp l_0BF9
  2553 1C56			l_0BEB
  2554 1C56 A9 08			lda #$08
  2555 1C58 85 58			sta T0B
  2556 1C5A			l_0BF9
  2557 1C5A			l_0BD6
  2558 1C5A			l_0B69
  2559
  2560 				; optimize OK (ai.inc), line = 113
  2561
  2562 1C5A A5 5C			lda AVAILDIR
  2563 1C5C 25 58			and T0B
  2564 1C5E F0 07			jeq l_0C19
  2565 1C60 A5 58			lda T0B
  2566 1C62 85 5B			sta NEWDIR
  2567 1C64 4C 6A 1C			jmp l_0C29
  2568 1C67			l_0C19
  2569
  2570 				; optimize FAIL ('AISAPPER', ai.inc), line = 114
  2571
  2572 1C67 20 43 19			jsr AISAPPER
  2573 1C6A			l_0C29
  2574 1C6A			@exit
  2575 					.ifdef @new
  2576 					lda <@VarData
  2577 					sta :ztmp
  2578 					lda >@VarData
  2579 					ldy #@VarDataSize-1
  2580 					jmp @FreeMem
  2581 					els
  2582 1C6A 60				rts						; ret
  2583 					eif
  2584 				.endl
  2585
  2586 1C6B			.local	AIMIRROR					; PROCEDURE
  2587
  2588 				; optimize OK (ai.inc), line = 122
  2589
  2590 1C6B AC 01 2C 84 12 AC + 	mwy PLY :bp2
  2591 1C75 A0 04			ldy #PLY.DIR-DATAORIGIN
  2592 1C77 B1 12			lda (:bp2),y
  2593 1C79 85 58			sta T0B
  2594
  2595 				; optimize OK (ai.inc), line = 124
  2596
  2597 1C7B AD 29 2C			lda PLAYER1.ISALIVE
  2598 1C7E F0 2F			jeq l_0C40
  2599
  2600 				; optimize OK (ai.inc), line = 125
  2601
  2602 1C80 AD 26 2C			lda PLAYER1.DIR
  2603 1C83 8D 92 30			sta @CASETMP_0008
  2604 1C86 C9 01			cmp #$01
  2605 1C88 D0 07			jne l_0C4C
  2606 1C8A			@
  2607
  2608 				; optimize OK (ai.inc), line = 126
  2609
  2610 1C8A A9 02			lda #$02
  2611 1C8C 85 58			sta T0B
  2612
  2613 1C8E 4C AF 1C			jmp a_0008
  2614 1C91			l_0C4C
  2615 1C91 C9 02			cmp #$02
  2616 1C93 D0 07			jne l_0C59
  2617 1C95			@
  2618
  2619 				; optimize OK (ai.inc), line = 127
  2620
  2621 1C95 A9 01			lda #$01
  2622 1C97 85 58			sta T0B
  2623
  2624 1C99 4C AF 1C			jmp a_0008
  2625 1C9C			l_0C59
  2626 1C9C C9 04			cmp #$04
  2627 1C9E D0 07			jne l_0C66
  2628 1CA0			@
  2629
  2630 				; optimize OK (ai.inc), line = 128
  2631
  2632 1CA0 A9 08			lda #$08
  2633 1CA2 85 58			sta T0B
  2634
  2635 1CA4 4C AF 1C			jmp a_0008
  2636 1CA7			l_0C66
  2637 1CA7 C9 08			cmp #$08
  2638 1CA9 D0 04			jne l_0C73
  2639 1CAB			@
  2640
  2641 				; optimize OK (ai.inc), line = 129
  2642
  2643 1CAB A9 04			lda #$04
  2644 1CAD 85 58			sta T0B
  2645
  2646 1CAF			l_0C73
  2647 1CAF			a_0008
  2648 1CAF			l_0C40
  2649
  2650 				; optimize OK (ai.inc), line = 133
  2651
  2652 1CAF A5 5C			lda AVAILDIR
  2653 1CB1 25 58			and T0B
  2654 1CB3 F0 07			jeq l_0C99
  2655 1CB5 A5 58			lda T0B
  2656 1CB7 85 5B			sta NEWDIR
  2657 1CB9 4C BF 1C			jmp l_0CA9
  2658 1CBC			l_0C99
  2659
  2660 				; optimize FAIL ('AISAPPER', ai.inc), line = 134
  2661
  2662 1CBC 20 43 19			jsr AISAPPER
  2663 1CBF			l_0CA9
  2664
  2665 				; ------------------------------------------------------------
  2666
  2667 = 3092			@CASETMP_0008	= DATAORIGIN+$0482
  2668
  2669 = 3092			@VarData	= @CASETMP_0008
  2670 = 0001			@VarDataSize	= 1
  2671
  2672 1CBF			@exit
  2673 					.ifdef @new
  2674 					lda <@VarData
  2675 					sta :ztmp
  2676 					lda >@VarData
  2677 					ldy #@VarDataSize-1
  2678 					jmp @FreeMem
  2679 					els
  2680 1CBF 60				rts						; ret
  2681 					eif
  2682 				.endl
  2683
  2684 1CC0			.local	SETLEVEL00					; PROCEDURE
  2685
  2686 				; optimize OK (levels.inc), line = 5
  2687
  2688 1CC0 A9 01			lda #$01
  2689 1CC2 8D 57 2C			sta SETPLAYER.ISALIVE
  2690 1CC5 A9 62			lda #$62
  2691 1CC7 8D 56 2C			sta SETPLAYER.COLOUR
  2692 1CCA A9 00			lda #$00
  2693 1CCC 8D 55 2C			sta SETPLAYER.BRAIN
  2694 1CCF A9 08			lda #$08
  2695 1CD1 8D 54 2C			sta SETPLAYER.DIR
  2696 1CD4 A9 0C			lda #$0C
  2697 1CD6 8D 53 2C			sta SETPLAYER.Y
  2698 1CD9 A9 0A			lda #$0A
  2699 1CDB 8D 52 2C			sta SETPLAYER.X
  2700 1CDE AD 07 2C			lda PLAYER1
  2701 1CE1 8D 50 2C			sta SETPLAYER.P
  2702 1CE4 AD 08 2C			lda PLAYER1+1
  2703 1CE7 8D 51 2C			sta SETPLAYER.P+1
  2704 1CEA 20 CF 15			jsr SETPLAYER
  2705
  2706 				; optimize OK (levels.inc), line = 6
  2707
  2708 1CED A9 01			lda #$01
  2709 1CEF 8D 57 2C			sta SETPLAYER.ISALIVE
  2710 1CF2 A9 5D			lda #$5D
  2711 1CF4 8D 56 2C			sta SETPLAYER.COLOUR
  2712 1CF7 A9 01			lda #$01
  2713 1CF9 8D 55 2C			sta SETPLAYER.BRAIN
  2714 1CFC A9 04			lda #$04
  2715 1CFE 8D 54 2C			sta SETPLAYER.DIR
  2716 1D01 A9 0C			lda #$0C
  2717 1D03 8D 53 2C			sta SETPLAYER.Y
  2718 1D06 A9 1E			lda #$1E
  2719 1D08 8D 52 2C			sta SETPLAYER.X
  2720 1D0B AD 09 2C			lda PLAYER2
  2721 1D0E 8D 50 2C			sta SETPLAYER.P
  2722 1D11 AD 0A 2C			lda PLAYER2+1
  2723 1D14 8D 51 2C			sta SETPLAYER.P+1
  2724 1D17 20 CF 15			jsr SETPLAYER
  2725
  2726 				; optimize FAIL (1, levels.inc), line = 8
  2727
  2728 1D1A E8				inx
  2729 1D1B A9 00 95 18			mva #$00 :STACKORIGIN,x
  2730 1D1F 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2731 1D21 A9 06			lda #$06
  2732 1D23 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2733 1D26 A9 0A			lda #$0A
  2734 1D28 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2735 1D2B 20 B1 13			jsr CALCOBSTACLEADDR
  2736 1D2E B4 17			ldy :STACKORIGIN-1,x
  2737 1D30 B5 18			lda :STACKORIGIN,x
  2738 1D32 99 60 00			sta adr.OBSTACLES,y
  2739 1D35 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2740 1D37 99 61 00			sta adr.OBSTACLES+1,y
  2741 1D3A CA				dex
  2742 1D3B A9 02 95 18			mva #$02 :STACKORIGIN,x
  2743 1D3F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2744 1D43 A9 06			lda #$06
  2745 1D45 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2746 1D48 A9 1E			lda #$1E
  2747 1D4A 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2748 1D4D 20 B1 13			jsr CALCOBSTACLEADDR
  2749 1D50 B4 17			ldy :STACKORIGIN-1,x
  2750 1D52 B5 18			lda :STACKORIGIN,x
  2751 1D54 99 60 00			sta adr.OBSTACLES,y
  2752 1D57 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2753 1D59 99 61 00			sta adr.OBSTACLES+1,y
  2754 1D5C CA				dex
  2755
  2756 				; optimize FAIL (1, levels.inc), line = 9
  2757
  2758 1D5D A9 04 95 18			mva #$04 :STACKORIGIN,x
  2759 1D61 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2760 1D65 A9 12			lda #$12
  2761 1D67 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2762 1D6A A9 0A			lda #$0A
  2763 1D6C 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2764 1D6F 20 B1 13			jsr CALCOBSTACLEADDR
  2765 1D72 B4 17			ldy :STACKORIGIN-1,x
  2766 1D74 B5 18			lda :STACKORIGIN,x
  2767 1D76 99 60 00			sta adr.OBSTACLES,y
  2768 1D79 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2769 1D7B 99 61 00			sta adr.OBSTACLES+1,y
  2770 1D7E CA				dex
  2771 1D7F A9 06 95 18			mva #$06 :STACKORIGIN,x
  2772 1D83 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2773 1D87 A9 12			lda #$12
  2774 1D89 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2775 1D8C A9 1E			lda #$1E
  2776 1D8E 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2777 1D91 20 B1 13			jsr CALCOBSTACLEADDR
  2778 1D94 B4 17			ldy :STACKORIGIN-1,x
  2779 1D96 B5 18			lda :STACKORIGIN,x
  2780 1D98 99 60 00			sta adr.OBSTACLES,y
  2781 1D9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2782 1D9D 99 61 00			sta adr.OBSTACLES+1,y
  2783 1DA0 CA				dex
  2784
  2785 				; optimize FAIL (1, levels.inc), line = 10
  2786
  2787 1DA1 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2788 1DA5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2789 1DA9 A9 02			lda #$02
  2790 1DAB 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2791 1DAE A9 14			lda #$14
  2792 1DB0 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2793 1DB3 20 B1 13			jsr CALCOBSTACLEADDR
  2794 1DB6 B4 17			ldy :STACKORIGIN-1,x
  2795 1DB8 B5 18			lda :STACKORIGIN,x
  2796 1DBA 99 60 00			sta adr.OBSTACLES,y
  2797 1DBD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2798 1DBF 99 61 00			sta adr.OBSTACLES+1,y
  2799 1DC2 CA				dex
  2800 1DC3 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2801 1DC7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2802 1DCB A9 16			lda #$16
  2803 1DCD 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2804 1DD0 A9 14			lda #$14
  2805 1DD2 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2806 1DD5 20 B1 13			jsr CALCOBSTACLEADDR
  2807 1DD8 B4 17			ldy :STACKORIGIN-1,x
  2808 1DDA B5 18			lda :STACKORIGIN,x
  2809 1DDC 99 60 00			sta adr.OBSTACLES,y
  2810 1DDF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2811 1DE1 99 61 00			sta adr.OBSTACLES+1,y
  2812 1DE4 CA				dex
  2813 1DE5 CA				dex
  2814 1DE6			@exit
  2815 					.ifdef @new
  2816 					lda <@VarData
  2817 					sta :ztmp
  2818 					lda >@VarData
  2819 					ldy #@VarDataSize-1
  2820 					jmp @FreeMem
  2821 					els
  2822 1DE6 60				rts						; ret
  2823 					eif
  2824 				.endl
  2825
  2826 1DE7			.local	SETLEVEL01					; PROCEDURE
  2827
  2828 				; optimize OK (levels.inc), line = 17
  2829
  2830 1DE7 A9 01			lda #$01
  2831 1DE9 8D 57 2C			sta SETPLAYER.ISALIVE
  2832 1DEC A9 62			lda #$62
  2833 1DEE 8D 56 2C			sta SETPLAYER.COLOUR
  2834 1DF1 A9 00			lda #$00
  2835 1DF3 8D 55 2C			sta SETPLAYER.BRAIN
  2836 1DF6 A9 08			lda #$08
  2837 1DF8 8D 54 2C			sta SETPLAYER.DIR
  2838 1DFB A9 0C			lda #$0C
  2839 1DFD 8D 53 2C			sta SETPLAYER.Y
  2840 1E00 A9 0A			lda #$0A
  2841 1E02 8D 52 2C			sta SETPLAYER.X
  2842 1E05 AD 07 2C			lda PLAYER1
  2843 1E08 8D 50 2C			sta SETPLAYER.P
  2844 1E0B AD 08 2C			lda PLAYER1+1
  2845 1E0E 8D 51 2C			sta SETPLAYER.P+1
  2846 1E11 20 CF 15			jsr SETPLAYER
  2847
  2848 				; optimize OK (levels.inc), line = 18
  2849
  2850 1E14 A9 01			lda #$01
  2851 1E16 8D 57 2C			sta SETPLAYER.ISALIVE
  2852 1E19 A9 5D			lda #$5D
  2853 1E1B 8D 56 2C			sta SETPLAYER.COLOUR
  2854 1E1E A9 01			lda #$01
  2855 1E20 8D 55 2C			sta SETPLAYER.BRAIN
  2856 1E23 A9 04			lda #$04
  2857 1E25 8D 54 2C			sta SETPLAYER.DIR
  2858 1E28 A9 0C			lda #$0C
  2859 1E2A 8D 53 2C			sta SETPLAYER.Y
  2860 1E2D A9 1E			lda #$1E
  2861 1E2F 8D 52 2C			sta SETPLAYER.X
  2862 1E32 AD 09 2C			lda PLAYER2
  2863 1E35 8D 50 2C			sta SETPLAYER.P
  2864 1E38 AD 0A 2C			lda PLAYER2+1
  2865 1E3B 8D 51 2C			sta SETPLAYER.P+1
  2866 1E3E 20 CF 15			jsr SETPLAYER
  2867
  2868 				; optimize FAIL (1, levels.inc), line = 20
  2869
  2870 1E41 E8				inx
  2871 1E42 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2872 1E46 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2873 1E48 A9 06			lda #$06
  2874 1E4A 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2875 1E4D A9 0A			lda #$0A
  2876 1E4F 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2877 1E52 20 B1 13			jsr CALCOBSTACLEADDR
  2878 1E55 B4 17			ldy :STACKORIGIN-1,x
  2879 1E57 B5 18			lda :STACKORIGIN,x
  2880 1E59 99 60 00			sta adr.OBSTACLES,y
  2881 1E5C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2882 1E5E 99 61 00			sta adr.OBSTACLES+1,y
  2883 1E61 CA				dex
  2884 1E62 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2885 1E66 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2886 1E6A A9 06			lda #$06
  2887 1E6C 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2888 1E6F A9 1E			lda #$1E
  2889 1E71 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2890 1E74 20 B1 13			jsr CALCOBSTACLEADDR
  2891 1E77 B4 17			ldy :STACKORIGIN-1,x
  2892 1E79 B5 18			lda :STACKORIGIN,x
  2893 1E7B 99 60 00			sta adr.OBSTACLES,y
  2894 1E7E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2895 1E80 99 61 00			sta adr.OBSTACLES+1,y
  2896 1E83 CA				dex
  2897
  2898 				; optimize FAIL (1, levels.inc), line = 21
  2899
  2900 1E84 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2901 1E88 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2902 1E8C A9 12			lda #$12
  2903 1E8E 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2904 1E91 A9 0A			lda #$0A
  2905 1E93 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2906 1E96 20 B1 13			jsr CALCOBSTACLEADDR
  2907 1E99 B4 17			ldy :STACKORIGIN-1,x
  2908 1E9B B5 18			lda :STACKORIGIN,x
  2909 1E9D 99 60 00			sta adr.OBSTACLES,y
  2910 1EA0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2911 1EA2 99 61 00			sta adr.OBSTACLES+1,y
  2912 1EA5 CA				dex
  2913 1EA6 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2914 1EAA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2915 1EAE A9 12			lda #$12
  2916 1EB0 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2917 1EB3 A9 1E			lda #$1E
  2918 1EB5 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2919 1EB8 20 B1 13			jsr CALCOBSTACLEADDR
  2920 1EBB B4 17			ldy :STACKORIGIN-1,x
  2921 1EBD B5 18			lda :STACKORIGIN,x
  2922 1EBF 99 60 00			sta adr.OBSTACLES,y
  2923 1EC2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2924 1EC4 99 61 00			sta adr.OBSTACLES+1,y
  2925 1EC7 CA				dex
  2926
  2927 				; optimize FAIL (1, levels.inc), line = 22
  2928
  2929 1EC8 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2930 1ECC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2931 1ED0 A9 02			lda #$02
  2932 1ED2 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2933 1ED5 A9 14			lda #$14
  2934 1ED7 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2935 1EDA 20 B1 13			jsr CALCOBSTACLEADDR
  2936 1EDD B4 17			ldy :STACKORIGIN-1,x
  2937 1EDF B5 18			lda :STACKORIGIN,x
  2938 1EE1 99 60 00			sta adr.OBSTACLES,y
  2939 1EE4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2940 1EE6 99 61 00			sta adr.OBSTACLES+1,y
  2941 1EE9 CA				dex
  2942 1EEA A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2943 1EEE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2944 1EF2 A9 16			lda #$16
  2945 1EF4 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  2946 1EF7 A9 14			lda #$14
  2947 1EF9 8D 4B 2C			sta CALCOBSTACLEADDR.X
  2948 1EFC 20 B1 13			jsr CALCOBSTACLEADDR
  2949 1EFF B4 17			ldy :STACKORIGIN-1,x
  2950 1F01 B5 18			lda :STACKORIGIN,x
  2951 1F03 99 60 00			sta adr.OBSTACLES,y
  2952 1F06 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2953 1F08 99 61 00			sta adr.OBSTACLES+1,y
  2954 1F0B CA				dex
  2955 1F0C CA				dex
  2956 1F0D			@exit
  2957 					.ifdef @new
  2958 					lda <@VarData
  2959 					sta :ztmp
  2960 					lda >@VarData
  2961 					ldy #@VarDataSize-1
  2962 					jmp @FreeMem
  2963 					els
  2964 1F0D 60				rts						; ret
  2965 					eif
  2966 				.endl
  2967
  2968 1F0E			.local	SETLEVEL02					; PROCEDURE
  2969
  2970 				; optimize OK (levels.inc), line = 29
  2971
  2972 1F0E A9 01			lda #$01
  2973 1F10 8D 57 2C			sta SETPLAYER.ISALIVE
  2974 1F13 A9 62			lda #$62
  2975 1F15 8D 56 2C			sta SETPLAYER.COLOUR
  2976 1F18 A9 00			lda #$00
  2977 1F1A 8D 55 2C			sta SETPLAYER.BRAIN
  2978 1F1D A9 08			lda #$08
  2979 1F1F 8D 54 2C			sta SETPLAYER.DIR
  2980 1F22 A9 0C			lda #$0C
  2981 1F24 8D 53 2C			sta SETPLAYER.Y
  2982 1F27 A9 0A			lda #$0A
  2983 1F29 8D 52 2C			sta SETPLAYER.X
  2984 1F2C AD 07 2C			lda PLAYER1
  2985 1F2F 8D 50 2C			sta SETPLAYER.P
  2986 1F32 AD 08 2C			lda PLAYER1+1
  2987 1F35 8D 51 2C			sta SETPLAYER.P+1
  2988 1F38 20 CF 15			jsr SETPLAYER
  2989
  2990 				; optimize OK (levels.inc), line = 30
  2991
  2992 1F3B A9 01			lda #$01
  2993 1F3D 8D 57 2C			sta SETPLAYER.ISALIVE
  2994 1F40 A9 5D			lda #$5D
  2995 1F42 8D 56 2C			sta SETPLAYER.COLOUR
  2996 1F45 A9 03			lda #$03
  2997 1F47 8D 55 2C			sta SETPLAYER.BRAIN
  2998 1F4A A9 04			lda #$04
  2999 1F4C 8D 54 2C			sta SETPLAYER.DIR
  3000 1F4F A9 0C			lda #$0C
  3001 1F51 8D 53 2C			sta SETPLAYER.Y
  3002 1F54 A9 1E			lda #$1E
  3003 1F56 8D 52 2C			sta SETPLAYER.X
  3004 1F59 AD 09 2C			lda PLAYER2
  3005 1F5C 8D 50 2C			sta SETPLAYER.P
  3006 1F5F AD 0A 2C			lda PLAYER2+1
  3007 1F62 8D 51 2C			sta SETPLAYER.P+1
  3008 1F65 20 CF 15			jsr SETPLAYER
  3009
  3010 				; optimize FAIL (1, levels.inc), line = 32
  3011
  3012 1F68 E8				inx
  3013 1F69 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3014 1F6D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3015 1F6F A9 06			lda #$06
  3016 1F71 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3017 1F74 A9 0A			lda #$0A
  3018 1F76 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3019 1F79 20 B1 13			jsr CALCOBSTACLEADDR
  3020 1F7C B4 17			ldy :STACKORIGIN-1,x
  3021 1F7E B5 18			lda :STACKORIGIN,x
  3022 1F80 99 60 00			sta adr.OBSTACLES,y
  3023 1F83 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3024 1F85 99 61 00			sta adr.OBSTACLES+1,y
  3025 1F88 CA				dex
  3026 1F89 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3027 1F8D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3028 1F91 A9 06			lda #$06
  3029 1F93 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3030 1F96 A9 1E			lda #$1E
  3031 1F98 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3032 1F9B 20 B1 13			jsr CALCOBSTACLEADDR
  3033 1F9E B4 17			ldy :STACKORIGIN-1,x
  3034 1FA0 B5 18			lda :STACKORIGIN,x
  3035 1FA2 99 60 00			sta adr.OBSTACLES,y
  3036 1FA5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3037 1FA7 99 61 00			sta adr.OBSTACLES+1,y
  3038 1FAA CA				dex
  3039
  3040 				; optimize FAIL (1, levels.inc), line = 33
  3041
  3042 1FAB A9 04 95 18			mva #$04 :STACKORIGIN,x
  3043 1FAF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3044 1FB3 A9 12			lda #$12
  3045 1FB5 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3046 1FB8 A9 0A			lda #$0A
  3047 1FBA 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3048 1FBD 20 B1 13			jsr CALCOBSTACLEADDR
  3049 1FC0 B4 17			ldy :STACKORIGIN-1,x
  3050 1FC2 B5 18			lda :STACKORIGIN,x
  3051 1FC4 99 60 00			sta adr.OBSTACLES,y
  3052 1FC7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3053 1FC9 99 61 00			sta adr.OBSTACLES+1,y
  3054 1FCC CA				dex
  3055 1FCD A9 06 95 18			mva #$06 :STACKORIGIN,x
  3056 1FD1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3057 1FD5 A9 12			lda #$12
  3058 1FD7 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3059 1FDA A9 1E			lda #$1E
  3060 1FDC 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3061 1FDF 20 B1 13			jsr CALCOBSTACLEADDR
  3062 1FE2 B4 17			ldy :STACKORIGIN-1,x
  3063 1FE4 B5 18			lda :STACKORIGIN,x
  3064 1FE6 99 60 00			sta adr.OBSTACLES,y
  3065 1FE9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3066 1FEB 99 61 00			sta adr.OBSTACLES+1,y
  3067 1FEE CA				dex
  3068
  3069 				; optimize FAIL (1, levels.inc), line = 34
  3070
  3071 1FEF A9 08 95 18			mva #$08 :STACKORIGIN,x
  3072 1FF3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3073 1FF7 A9 02			lda #$02
  3074 1FF9 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3075 1FFC A9 14			lda #$14
  3076 1FFE 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3077 2001 20 B1 13			jsr CALCOBSTACLEADDR
  3078 2004 B4 17			ldy :STACKORIGIN-1,x
  3079 2006 B5 18			lda :STACKORIGIN,x
  3080 2008 99 60 00			sta adr.OBSTACLES,y
  3081 200B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3082 200D 99 61 00			sta adr.OBSTACLES+1,y
  3083 2010 CA				dex
  3084 2011 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3085 2015 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3086 2019 A9 16			lda #$16
  3087 201B 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3088 201E A9 14			lda #$14
  3089 2020 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3090 2023 20 B1 13			jsr CALCOBSTACLEADDR
  3091 2026 B4 17			ldy :STACKORIGIN-1,x
  3092 2028 B5 18			lda :STACKORIGIN,x
  3093 202A 99 60 00			sta adr.OBSTACLES,y
  3094 202D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3095 202F 99 61 00			sta adr.OBSTACLES+1,y
  3096 2032 CA				dex
  3097 2033 CA				dex
  3098 2034			@exit
  3099 					.ifdef @new
  3100 					lda <@VarData
  3101 					sta :ztmp
  3102 					lda >@VarData
  3103 					ldy #@VarDataSize-1
  3104 					jmp @FreeMem
  3105 					els
  3106 2034 60				rts						; ret
  3107 					eif
  3108 				.endl
  3109
  3110 2035			.local	SETLEVEL03					; PROCEDURE
  3111
  3112 				; optimize OK (levels.inc), line = 41
  3113
  3114 2035 A9 01			lda #$01
  3115 2037 8D 57 2C			sta SETPLAYER.ISALIVE
  3116 203A A9 62			lda #$62
  3117 203C 8D 56 2C			sta SETPLAYER.COLOUR
  3118 203F A9 00			lda #$00
  3119 2041 8D 55 2C			sta SETPLAYER.BRAIN
  3120 2044 A9 08			lda #$08
  3121 2046 8D 54 2C			sta SETPLAYER.DIR
  3122 2049 A9 0C			lda #$0C
  3123 204B 8D 53 2C			sta SETPLAYER.Y
  3124 204E A9 0A			lda #$0A
  3125 2050 8D 52 2C			sta SETPLAYER.X
  3126 2053 AD 07 2C			lda PLAYER1
  3127 2056 8D 50 2C			sta SETPLAYER.P
  3128 2059 AD 08 2C			lda PLAYER1+1
  3129 205C 8D 51 2C			sta SETPLAYER.P+1
  3130 205F 20 CF 15			jsr SETPLAYER
  3131
  3132 				; optimize OK (levels.inc), line = 42
  3133
  3134 2062 A9 01			lda #$01
  3135 2064 8D 57 2C			sta SETPLAYER.ISALIVE
  3136 2067 A9 5D			lda #$5D
  3137 2069 8D 56 2C			sta SETPLAYER.COLOUR
  3138 206C A9 02			lda #$02
  3139 206E 8D 55 2C			sta SETPLAYER.BRAIN
  3140 2071 A9 04			lda #$04
  3141 2073 8D 54 2C			sta SETPLAYER.DIR
  3142 2076 A9 0C			lda #$0C
  3143 2078 8D 53 2C			sta SETPLAYER.Y
  3144 207B A9 1E			lda #$1E
  3145 207D 8D 52 2C			sta SETPLAYER.X
  3146 2080 AD 09 2C			lda PLAYER2
  3147 2083 8D 50 2C			sta SETPLAYER.P
  3148 2086 AD 0A 2C			lda PLAYER2+1
  3149 2089 8D 51 2C			sta SETPLAYER.P+1
  3150 208C 20 CF 15			jsr SETPLAYER
  3151
  3152 				; optimize FAIL (1, levels.inc), line = 44
  3153
  3154 208F E8				inx
  3155 2090 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3156 2094 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3157 2096 A9 06			lda #$06
  3158 2098 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3159 209B A9 0A			lda #$0A
  3160 209D 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3161 20A0 20 B1 13			jsr CALCOBSTACLEADDR
  3162 20A3 B4 17			ldy :STACKORIGIN-1,x
  3163 20A5 B5 18			lda :STACKORIGIN,x
  3164 20A7 99 60 00			sta adr.OBSTACLES,y
  3165 20AA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3166 20AC 99 61 00			sta adr.OBSTACLES+1,y
  3167 20AF CA				dex
  3168 20B0 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3169 20B4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3170 20B8 A9 06			lda #$06
  3171 20BA 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3172 20BD A9 1E			lda #$1E
  3173 20BF 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3174 20C2 20 B1 13			jsr CALCOBSTACLEADDR
  3175 20C5 B4 17			ldy :STACKORIGIN-1,x
  3176 20C7 B5 18			lda :STACKORIGIN,x
  3177 20C9 99 60 00			sta adr.OBSTACLES,y
  3178 20CC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3179 20CE 99 61 00			sta adr.OBSTACLES+1,y
  3180 20D1 CA				dex
  3181
  3182 				; optimize FAIL (1, levels.inc), line = 45
  3183
  3184 20D2 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3185 20D6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3186 20DA A9 12			lda #$12
  3187 20DC 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3188 20DF A9 0A			lda #$0A
  3189 20E1 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3190 20E4 20 B1 13			jsr CALCOBSTACLEADDR
  3191 20E7 B4 17			ldy :STACKORIGIN-1,x
  3192 20E9 B5 18			lda :STACKORIGIN,x
  3193 20EB 99 60 00			sta adr.OBSTACLES,y
  3194 20EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3195 20F0 99 61 00			sta adr.OBSTACLES+1,y
  3196 20F3 CA				dex
  3197 20F4 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3198 20F8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3199 20FC A9 12			lda #$12
  3200 20FE 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3201 2101 A9 1E			lda #$1E
  3202 2103 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3203 2106 20 B1 13			jsr CALCOBSTACLEADDR
  3204 2109 B4 17			ldy :STACKORIGIN-1,x
  3205 210B B5 18			lda :STACKORIGIN,x
  3206 210D 99 60 00			sta adr.OBSTACLES,y
  3207 2110 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3208 2112 99 61 00			sta adr.OBSTACLES+1,y
  3209 2115 CA				dex
  3210
  3211 				; optimize FAIL (1, levels.inc), line = 46
  3212
  3213 2116 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3214 211A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3215 211E A9 0C			lda #$0C
  3216 2120 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3217 2123 A9 01			lda #$01
  3218 2125 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3219 2128 20 B1 13			jsr CALCOBSTACLEADDR
  3220 212B B4 17			ldy :STACKORIGIN-1,x
  3221 212D B5 18			lda :STACKORIGIN,x
  3222 212F 99 60 00			sta adr.OBSTACLES,y
  3223 2132 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3224 2134 99 61 00			sta adr.OBSTACLES+1,y
  3225 2137 CA				dex
  3226 2138 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3227 213C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3228 2140 A9 02			lda #$02
  3229 2142 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3230 2145 A9 14			lda #$14
  3231 2147 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3232 214A 20 B1 13			jsr CALCOBSTACLEADDR
  3233 214D B4 17			ldy :STACKORIGIN-1,x
  3234 214F B5 18			lda :STACKORIGIN,x
  3235 2151 99 60 00			sta adr.OBSTACLES,y
  3236 2154 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3237 2156 99 61 00			sta adr.OBSTACLES+1,y
  3238 2159 CA				dex
  3239
  3240 				; optimize FAIL (1, levels.inc), line = 47
  3241
  3242 215A A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3243 215E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3244 2162 A9 16			lda #$16
  3245 2164 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3246 2167 A9 14			lda #$14
  3247 2169 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3248 216C 20 B1 13			jsr CALCOBSTACLEADDR
  3249 216F B4 17			ldy :STACKORIGIN-1,x
  3250 2171 B5 18			lda :STACKORIGIN,x
  3251 2173 99 60 00			sta adr.OBSTACLES,y
  3252 2176 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3253 2178 99 61 00			sta adr.OBSTACLES+1,y
  3254 217B CA				dex
  3255 217C CA				dex
  3256 217D			@exit
  3257 					.ifdef @new
  3258 					lda <@VarData
  3259 					sta :ztmp
  3260 					lda >@VarData
  3261 					ldy #@VarDataSize-1
  3262 					jmp @FreeMem
  3263 					els
  3264 217D 60				rts						; ret
  3265 					eif
  3266 				.endl
  3267
  3268 217E			.local	SETLEVEL04					; PROCEDURE
  3269
  3270 				; optimize OK (levels.inc), line = 54
  3271
  3272 217E A9 01			lda #$01
  3273 2180 8D 57 2C			sta SETPLAYER.ISALIVE
  3274 2183 A9 62			lda #$62
  3275 2185 8D 56 2C			sta SETPLAYER.COLOUR
  3276 2188 A9 00			lda #$00
  3277 218A 8D 55 2C			sta SETPLAYER.BRAIN
  3278 218D A9 04			lda #$04
  3279 218F 8D 54 2C			sta SETPLAYER.DIR
  3280 2192 A9 0C			lda #$0C
  3281 2194 8D 53 2C			sta SETPLAYER.Y
  3282 2197 A9 12			lda #$12
  3283 2199 8D 52 2C			sta SETPLAYER.X
  3284 219C AD 07 2C			lda PLAYER1
  3285 219F 8D 50 2C			sta SETPLAYER.P
  3286 21A2 AD 08 2C			lda PLAYER1+1
  3287 21A5 8D 51 2C			sta SETPLAYER.P+1
  3288 21A8 20 CF 15			jsr SETPLAYER
  3289
  3290 				; optimize OK (levels.inc), line = 55
  3291
  3292 21AB A9 01			lda #$01
  3293 21AD 8D 57 2C			sta SETPLAYER.ISALIVE
  3294 21B0 A9 5D			lda #$5D
  3295 21B2 8D 56 2C			sta SETPLAYER.COLOUR
  3296 21B5 A9 04			lda #$04
  3297 21B7 8D 55 2C			sta SETPLAYER.BRAIN
  3298 21BA A9 08			lda #$08
  3299 21BC 8D 54 2C			sta SETPLAYER.DIR
  3300 21BF A9 0C			lda #$0C
  3301 21C1 8D 53 2C			sta SETPLAYER.Y
  3302 21C4 A9 16			lda #$16
  3303 21C6 8D 52 2C			sta SETPLAYER.X
  3304 21C9 AD 09 2C			lda PLAYER2
  3305 21CC 8D 50 2C			sta SETPLAYER.P
  3306 21CF AD 0A 2C			lda PLAYER2+1
  3307 21D2 8D 51 2C			sta SETPLAYER.P+1
  3308 21D5 20 CF 15			jsr SETPLAYER
  3309
  3310 				; optimize FAIL (1, levels.inc), line = 57
  3311
  3312 21D8 E8				inx
  3313 21D9 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3314 21DD 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3315 21DF A9 06			lda #$06
  3316 21E1 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3317 21E4 A9 0A			lda #$0A
  3318 21E6 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3319 21E9 20 B1 13			jsr CALCOBSTACLEADDR
  3320 21EC B4 17			ldy :STACKORIGIN-1,x
  3321 21EE B5 18			lda :STACKORIGIN,x
  3322 21F0 99 60 00			sta adr.OBSTACLES,y
  3323 21F3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3324 21F5 99 61 00			sta adr.OBSTACLES+1,y
  3325 21F8 CA				dex
  3326 21F9 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3327 21FD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3328 2201 A9 06			lda #$06
  3329 2203 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3330 2206 A9 1E			lda #$1E
  3331 2208 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3332 220B 20 B1 13			jsr CALCOBSTACLEADDR
  3333 220E B4 17			ldy :STACKORIGIN-1,x
  3334 2210 B5 18			lda :STACKORIGIN,x
  3335 2212 99 60 00			sta adr.OBSTACLES,y
  3336 2215 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3337 2217 99 61 00			sta adr.OBSTACLES+1,y
  3338 221A CA				dex
  3339
  3340 				; optimize FAIL (1, levels.inc), line = 58
  3341
  3342 221B A9 04 95 18			mva #$04 :STACKORIGIN,x
  3343 221F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3344 2223 A9 12			lda #$12
  3345 2225 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3346 2228 A9 0A			lda #$0A
  3347 222A 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3348 222D 20 B1 13			jsr CALCOBSTACLEADDR
  3349 2230 B4 17			ldy :STACKORIGIN-1,x
  3350 2232 B5 18			lda :STACKORIGIN,x
  3351 2234 99 60 00			sta adr.OBSTACLES,y
  3352 2237 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3353 2239 99 61 00			sta adr.OBSTACLES+1,y
  3354 223C CA				dex
  3355 223D A9 06 95 18			mva #$06 :STACKORIGIN,x
  3356 2241 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3357 2245 A9 12			lda #$12
  3358 2247 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3359 224A A9 1E			lda #$1E
  3360 224C 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3361 224F 20 B1 13			jsr CALCOBSTACLEADDR
  3362 2252 B4 17			ldy :STACKORIGIN-1,x
  3363 2254 B5 18			lda :STACKORIGIN,x
  3364 2256 99 60 00			sta adr.OBSTACLES,y
  3365 2259 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3366 225B 99 61 00			sta adr.OBSTACLES+1,y
  3367 225E CA				dex
  3368
  3369 				; optimize FAIL (1, levels.inc), line = 59
  3370
  3371 225F A9 08 95 18			mva #$08 :STACKORIGIN,x
  3372 2263 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3373 2267 A9 0C			lda #$0C
  3374 2269 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3375 226C A9 01			lda #$01
  3376 226E 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3377 2271 20 B1 13			jsr CALCOBSTACLEADDR
  3378 2274 B4 17			ldy :STACKORIGIN-1,x
  3379 2276 B5 18			lda :STACKORIGIN,x
  3380 2278 99 60 00			sta adr.OBSTACLES,y
  3381 227B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3382 227D 99 61 00			sta adr.OBSTACLES+1,y
  3383 2280 CA				dex
  3384 2281 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3385 2285 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3386 2289 A9 02			lda #$02
  3387 228B 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3388 228E A9 14			lda #$14
  3389 2290 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3390 2293 20 B1 13			jsr CALCOBSTACLEADDR
  3391 2296 B4 17			ldy :STACKORIGIN-1,x
  3392 2298 B5 18			lda :STACKORIGIN,x
  3393 229A 99 60 00			sta adr.OBSTACLES,y
  3394 229D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3395 229F 99 61 00			sta adr.OBSTACLES+1,y
  3396 22A2 CA				dex
  3397
  3398 				; optimize FAIL (1, levels.inc), line = 60
  3399
  3400 22A3 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3401 22A7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3402 22AB A9 16			lda #$16
  3403 22AD 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3404 22B0 A9 14			lda #$14
  3405 22B2 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3406 22B5 20 B1 13			jsr CALCOBSTACLEADDR
  3407 22B8 B4 17			ldy :STACKORIGIN-1,x
  3408 22BA B5 18			lda :STACKORIGIN,x
  3409 22BC 99 60 00			sta adr.OBSTACLES,y
  3410 22BF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3411 22C1 99 61 00			sta adr.OBSTACLES+1,y
  3412 22C4 CA				dex
  3413 22C5 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3414 22C9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3415 22CD A9 0C			lda #$0C
  3416 22CF 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3417 22D2 A9 14			lda #$14
  3418 22D4 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3419 22D7 20 B1 13			jsr CALCOBSTACLEADDR
  3420 22DA B4 17			ldy :STACKORIGIN-1,x
  3421 22DC B5 18			lda :STACKORIGIN,x
  3422 22DE 99 60 00			sta adr.OBSTACLES,y
  3423 22E1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3424 22E3 99 61 00			sta adr.OBSTACLES+1,y
  3425 22E6 CA				dex
  3426 22E7 CA				dex
  3427 22E8			@exit
  3428 					.ifdef @new
  3429 					lda <@VarData
  3430 					sta :ztmp
  3431 					lda >@VarData
  3432 					ldy #@VarDataSize-1
  3433 					jmp @FreeMem
  3434 					els
  3435 22E8 60				rts						; ret
  3436 					eif
  3437 				.endl
  3438
  3439 22E9			.local	SETLEVEL05					; PROCEDURE
  3440
  3441 				; optimize OK (levels.inc), line = 67
  3442
  3443 22E9 A9 01			lda #$01
  3444 22EB 8D 57 2C			sta SETPLAYER.ISALIVE
  3445 22EE A9 62			lda #$62
  3446 22F0 8D 56 2C			sta SETPLAYER.COLOUR
  3447 22F3 A9 00			lda #$00
  3448 22F5 8D 55 2C			sta SETPLAYER.BRAIN
  3449 22F8 A9 08			lda #$08
  3450 22FA 8D 54 2C			sta SETPLAYER.DIR
  3451 22FD A9 0C			lda #$0C
  3452 22FF 8D 53 2C			sta SETPLAYER.Y
  3453 2302 A9 0A			lda #$0A
  3454 2304 8D 52 2C			sta SETPLAYER.X
  3455 2307 AD 07 2C			lda PLAYER1
  3456 230A 8D 50 2C			sta SETPLAYER.P
  3457 230D AD 08 2C			lda PLAYER1+1
  3458 2310 8D 51 2C			sta SETPLAYER.P+1
  3459 2313 20 CF 15			jsr SETPLAYER
  3460
  3461 				; optimize OK (levels.inc), line = 68
  3462
  3463 2316 A9 01			lda #$01
  3464 2318 8D 57 2C			sta SETPLAYER.ISALIVE
  3465 231B A9 5D			lda #$5D
  3466 231D 8D 56 2C			sta SETPLAYER.COLOUR
  3467 2320 A9 04			lda #$04
  3468 2322 8D 55 2C			sta SETPLAYER.BRAIN
  3469 2325 8D 54 2C			sta SETPLAYER.DIR
  3470 2328 A9 0C			lda #$0C
  3471 232A 8D 53 2C			sta SETPLAYER.Y
  3472 232D A9 1E			lda #$1E
  3473 232F 8D 52 2C			sta SETPLAYER.X
  3474 2332 AD 09 2C			lda PLAYER2
  3475 2335 8D 50 2C			sta SETPLAYER.P
  3476 2338 AD 0A 2C			lda PLAYER2+1
  3477 233B 8D 51 2C			sta SETPLAYER.P+1
  3478 233E 20 CF 15			jsr SETPLAYER
  3479
  3480 				; optimize OK (levels.inc), line = 69
  3481
  3482 2341 A9 01			lda #$01
  3483 2343 8D 57 2C			sta SETPLAYER.ISALIVE
  3484 2346 A9 71			lda #$71
  3485 2348 8D 56 2C			sta SETPLAYER.COLOUR
  3486 234B A9 03			lda #$03
  3487 234D 8D 55 2C			sta SETPLAYER.BRAIN
  3488 2350 A9 02			lda #$02
  3489 2352 8D 54 2C			sta SETPLAYER.DIR
  3490 2355 A9 04			lda #$04
  3491 2357 8D 53 2C			sta SETPLAYER.Y
  3492 235A A9 14			lda #$14
  3493 235C 8D 52 2C			sta SETPLAYER.X
  3494 235F AD 0B 2C			lda PLAYER3
  3495 2362 8D 50 2C			sta SETPLAYER.P
  3496 2365 AD 0C 2C			lda PLAYER3+1
  3497 2368 8D 51 2C			sta SETPLAYER.P+1
  3498 236B 20 CF 15			jsr SETPLAYER
  3499
  3500 				; optimize OK (levels.inc), line = 70
  3501
  3502 236E A9 01			lda #$01
  3503 2370 8D 57 2C			sta SETPLAYER.ISALIVE
  3504 2373 A9 55			lda #$55
  3505 2375 8D 56 2C			sta SETPLAYER.COLOUR
  3506 2378 A9 02			lda #$02
  3507 237A 8D 55 2C			sta SETPLAYER.BRAIN
  3508 237D A9 01			lda #$01
  3509 237F 8D 54 2C			sta SETPLAYER.DIR
  3510 2382 A9 12			lda #$12
  3511 2384 8D 53 2C			sta SETPLAYER.Y
  3512 2387 A9 14			lda #$14
  3513 2389 8D 52 2C			sta SETPLAYER.X
  3514 238C AD 0D 2C			lda PLAYER4
  3515 238F 8D 50 2C			sta SETPLAYER.P
  3516 2392 AD 0E 2C			lda PLAYER4+1
  3517 2395 8D 51 2C			sta SETPLAYER.P+1
  3518 2398 20 CF 15			jsr SETPLAYER
  3519
  3520 				; optimize FAIL (1, levels.inc), line = 72
  3521
  3522 239B E8				inx
  3523 239C A9 00 95 18			mva #$00 :STACKORIGIN,x
  3524 23A0 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3525 23A2 A9 06			lda #$06
  3526 23A4 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3527 23A7 A9 0A			lda #$0A
  3528 23A9 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3529 23AC 20 B1 13			jsr CALCOBSTACLEADDR
  3530 23AF B4 17			ldy :STACKORIGIN-1,x
  3531 23B1 B5 18			lda :STACKORIGIN,x
  3532 23B3 99 60 00			sta adr.OBSTACLES,y
  3533 23B6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3534 23B8 99 61 00			sta adr.OBSTACLES+1,y
  3535 23BB CA				dex
  3536 23BC A9 02 95 18			mva #$02 :STACKORIGIN,x
  3537 23C0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3538 23C4 A9 06			lda #$06
  3539 23C6 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3540 23C9 A9 1E			lda #$1E
  3541 23CB 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3542 23CE 20 B1 13			jsr CALCOBSTACLEADDR
  3543 23D1 B4 17			ldy :STACKORIGIN-1,x
  3544 23D3 B5 18			lda :STACKORIGIN,x
  3545 23D5 99 60 00			sta adr.OBSTACLES,y
  3546 23D8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3547 23DA 99 61 00			sta adr.OBSTACLES+1,y
  3548 23DD CA				dex
  3549
  3550 				; optimize FAIL (1, levels.inc), line = 73
  3551
  3552 23DE A9 04 95 18			mva #$04 :STACKORIGIN,x
  3553 23E2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3554 23E6 A9 12			lda #$12
  3555 23E8 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3556 23EB A9 0A			lda #$0A
  3557 23ED 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3558 23F0 20 B1 13			jsr CALCOBSTACLEADDR
  3559 23F3 B4 17			ldy :STACKORIGIN-1,x
  3560 23F5 B5 18			lda :STACKORIGIN,x
  3561 23F7 99 60 00			sta adr.OBSTACLES,y
  3562 23FA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3563 23FC 99 61 00			sta adr.OBSTACLES+1,y
  3564 23FF CA				dex
  3565 2400 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3566 2404 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3567 2408 A9 12			lda #$12
  3568 240A 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3569 240D A9 1E			lda #$1E
  3570 240F 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3571 2412 20 B1 13			jsr CALCOBSTACLEADDR
  3572 2415 B4 17			ldy :STACKORIGIN-1,x
  3573 2417 B5 18			lda :STACKORIGIN,x
  3574 2419 99 60 00			sta adr.OBSTACLES,y
  3575 241C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3576 241E 99 61 00			sta adr.OBSTACLES+1,y
  3577 2421 CA				dex
  3578
  3579 				; optimize FAIL (1, levels.inc), line = 74
  3580
  3581 2422 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3582 2426 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3583 242A A9 0C			lda #$0C
  3584 242C 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3585 242F A9 01			lda #$01
  3586 2431 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3587 2434 20 B1 13			jsr CALCOBSTACLEADDR
  3588 2437 B4 17			ldy :STACKORIGIN-1,x
  3589 2439 B5 18			lda :STACKORIGIN,x
  3590 243B 99 60 00			sta adr.OBSTACLES,y
  3591 243E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3592 2440 99 61 00			sta adr.OBSTACLES+1,y
  3593 2443 CA				dex
  3594 2444 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3595 2448 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3596 244C A9 02			lda #$02
  3597 244E 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3598 2451 A9 14			lda #$14
  3599 2453 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3600 2456 20 B1 13			jsr CALCOBSTACLEADDR
  3601 2459 B4 17			ldy :STACKORIGIN-1,x
  3602 245B B5 18			lda :STACKORIGIN,x
  3603 245D 99 60 00			sta adr.OBSTACLES,y
  3604 2460 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3605 2462 99 61 00			sta adr.OBSTACLES+1,y
  3606 2465 CA				dex
  3607
  3608 				; optimize FAIL (1, levels.inc), line = 75
  3609
  3610 2466 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3611 246A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3612 246E A9 16			lda #$16
  3613 2470 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3614 2473 A9 14			lda #$14
  3615 2475 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3616 2478 20 B1 13			jsr CALCOBSTACLEADDR
  3617 247B B4 17			ldy :STACKORIGIN-1,x
  3618 247D B5 18			lda :STACKORIGIN,x
  3619 247F 99 60 00			sta adr.OBSTACLES,y
  3620 2482 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3621 2484 99 61 00			sta adr.OBSTACLES+1,y
  3622 2487 CA				dex
  3623 2488 CA				dex
  3624 2489			@exit
  3625 					.ifdef @new
  3626 					lda <@VarData
  3627 					sta :ztmp
  3628 					lda >@VarData
  3629 					ldy #@VarDataSize-1
  3630 					jmp @FreeMem
  3631 					els
  3632 2489 60				rts						; ret
  3633 					eif
  3634 				.endl
  3635
  3636 248A			.local	SETLEVEL06					; PROCEDURE
  3637
  3638 				; optimize OK (levels.inc), line = 82
  3639
  3640 248A A9 01			lda #$01
  3641 248C 8D 57 2C			sta SETPLAYER.ISALIVE
  3642 248F A9 62			lda #$62
  3643 2491 8D 56 2C			sta SETPLAYER.COLOUR
  3644 2494 A9 00			lda #$00
  3645 2496 8D 55 2C			sta SETPLAYER.BRAIN
  3646 2499 A9 04			lda #$04
  3647 249B 8D 54 2C			sta SETPLAYER.DIR
  3648 249E A9 0C			lda #$0C
  3649 24A0 8D 53 2C			sta SETPLAYER.Y
  3650 24A3 A9 12			lda #$12
  3651 24A5 8D 52 2C			sta SETPLAYER.X
  3652 24A8 AD 07 2C			lda PLAYER1
  3653 24AB 8D 50 2C			sta SETPLAYER.P
  3654 24AE AD 08 2C			lda PLAYER1+1
  3655 24B1 8D 51 2C			sta SETPLAYER.P+1
  3656 24B4 20 CF 15			jsr SETPLAYER
  3657
  3658 				; optimize OK (levels.inc), line = 83
  3659
  3660 24B7 A9 01			lda #$01
  3661 24B9 8D 57 2C			sta SETPLAYER.ISALIVE
  3662 24BC A9 5D			lda #$5D
  3663 24BE 8D 56 2C			sta SETPLAYER.COLOUR
  3664 24C1 A9 02			lda #$02
  3665 24C3 8D 55 2C			sta SETPLAYER.BRAIN
  3666 24C6 A9 08			lda #$08
  3667 24C8 8D 54 2C			sta SETPLAYER.DIR
  3668 24CB A9 0C			lda #$0C
  3669 24CD 8D 53 2C			sta SETPLAYER.Y
  3670 24D0 A9 16			lda #$16
  3671 24D2 8D 52 2C			sta SETPLAYER.X
  3672 24D5 AD 09 2C			lda PLAYER2
  3673 24D8 8D 50 2C			sta SETPLAYER.P
  3674 24DB AD 0A 2C			lda PLAYER2+1
  3675 24DE 8D 51 2C			sta SETPLAYER.P+1
  3676 24E1 20 CF 15			jsr SETPLAYER
  3677
  3678 				; optimize OK (levels.inc), line = 84
  3679
  3680 24E4 A9 01			lda #$01
  3681 24E6 8D 57 2C			sta SETPLAYER.ISALIVE
  3682 24E9 A9 71			lda #$71
  3683 24EB 8D 56 2C			sta SETPLAYER.COLOUR
  3684 24EE A9 02			lda #$02
  3685 24F0 8D 55 2C			sta SETPLAYER.BRAIN
  3686 24F3 8D 54 2C			sta SETPLAYER.DIR
  3687 24F6 A9 06			lda #$06
  3688 24F8 8D 53 2C			sta SETPLAYER.Y
  3689 24FB 8D 52 2C			sta SETPLAYER.X
  3690 24FE AD 0B 2C			lda PLAYER3
  3691 2501 8D 50 2C			sta SETPLAYER.P
  3692 2504 AD 0C 2C			lda PLAYER3+1
  3693 2507 8D 51 2C			sta SETPLAYER.P+1
  3694 250A 20 CF 15			jsr SETPLAYER
  3695
  3696 				; optimize OK (levels.inc), line = 85
  3697
  3698 250D A9 01			lda #$01
  3699 250F 8D 57 2C			sta SETPLAYER.ISALIVE
  3700 2512 A9 55			lda #$55
  3701 2514 8D 56 2C			sta SETPLAYER.COLOUR
  3702 2517 A9 03			lda #$03
  3703 2519 8D 55 2C			sta SETPLAYER.BRAIN
  3704 251C A9 08			lda #$08
  3705 251E 8D 54 2C			sta SETPLAYER.DIR
  3706 2521 A9 12			lda #$12
  3707 2523 8D 53 2C			sta SETPLAYER.Y
  3708 2526 A9 24			lda #$24
  3709 2528 8D 52 2C			sta SETPLAYER.X
  3710 252B AD 0D 2C			lda PLAYER4
  3711 252E 8D 50 2C			sta SETPLAYER.P
  3712 2531 AD 0E 2C			lda PLAYER4+1
  3713 2534 8D 51 2C			sta SETPLAYER.P+1
  3714 2537 20 CF 15			jsr SETPLAYER
  3715
  3716 				; optimize FAIL (1, levels.inc), line = 87
  3717
  3718 253A E8				inx
  3719 253B A9 00 95 18			mva #$00 :STACKORIGIN,x
  3720 253F 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3721 2541 A9 06			lda #$06
  3722 2543 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3723 2546 A9 0A			lda #$0A
  3724 2548 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3725 254B 20 B1 13			jsr CALCOBSTACLEADDR
  3726 254E B4 17			ldy :STACKORIGIN-1,x
  3727 2550 B5 18			lda :STACKORIGIN,x
  3728 2552 99 60 00			sta adr.OBSTACLES,y
  3729 2555 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3730 2557 99 61 00			sta adr.OBSTACLES+1,y
  3731 255A CA				dex
  3732 255B A9 02 95 18			mva #$02 :STACKORIGIN,x
  3733 255F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3734 2563 A9 06			lda #$06
  3735 2565 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3736 2568 A9 1E			lda #$1E
  3737 256A 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3738 256D 20 B1 13			jsr CALCOBSTACLEADDR
  3739 2570 B4 17			ldy :STACKORIGIN-1,x
  3740 2572 B5 18			lda :STACKORIGIN,x
  3741 2574 99 60 00			sta adr.OBSTACLES,y
  3742 2577 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3743 2579 99 61 00			sta adr.OBSTACLES+1,y
  3744 257C CA				dex
  3745
  3746 				; optimize FAIL (1, levels.inc), line = 88
  3747
  3748 257D A9 04 95 18			mva #$04 :STACKORIGIN,x
  3749 2581 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3750 2585 A9 12			lda #$12
  3751 2587 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3752 258A A9 0A			lda #$0A
  3753 258C 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3754 258F 20 B1 13			jsr CALCOBSTACLEADDR
  3755 2592 B4 17			ldy :STACKORIGIN-1,x
  3756 2594 B5 18			lda :STACKORIGIN,x
  3757 2596 99 60 00			sta adr.OBSTACLES,y
  3758 2599 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3759 259B 99 61 00			sta adr.OBSTACLES+1,y
  3760 259E CA				dex
  3761 259F A9 06 95 18			mva #$06 :STACKORIGIN,x
  3762 25A3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3763 25A7 A9 12			lda #$12
  3764 25A9 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3765 25AC A9 1E			lda #$1E
  3766 25AE 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3767 25B1 20 B1 13			jsr CALCOBSTACLEADDR
  3768 25B4 B4 17			ldy :STACKORIGIN-1,x
  3769 25B6 B5 18			lda :STACKORIGIN,x
  3770 25B8 99 60 00			sta adr.OBSTACLES,y
  3771 25BB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3772 25BD 99 61 00			sta adr.OBSTACLES+1,y
  3773 25C0 CA				dex
  3774
  3775 				; optimize FAIL (1, levels.inc), line = 89
  3776
  3777 25C1 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3778 25C5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3779 25C9 A9 0C			lda #$0C
  3780 25CB 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3781 25CE A9 01			lda #$01
  3782 25D0 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3783 25D3 20 B1 13			jsr CALCOBSTACLEADDR
  3784 25D6 B4 17			ldy :STACKORIGIN-1,x
  3785 25D8 B5 18			lda :STACKORIGIN,x
  3786 25DA 99 60 00			sta adr.OBSTACLES,y
  3787 25DD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3788 25DF 99 61 00			sta adr.OBSTACLES+1,y
  3789 25E2 CA				dex
  3790 25E3 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3791 25E7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3792 25EB A9 02			lda #$02
  3793 25ED 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3794 25F0 A9 14			lda #$14
  3795 25F2 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3796 25F5 20 B1 13			jsr CALCOBSTACLEADDR
  3797 25F8 B4 17			ldy :STACKORIGIN-1,x
  3798 25FA B5 18			lda :STACKORIGIN,x
  3799 25FC 99 60 00			sta adr.OBSTACLES,y
  3800 25FF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3801 2601 99 61 00			sta adr.OBSTACLES+1,y
  3802 2604 CA				dex
  3803
  3804 				; optimize FAIL (1, levels.inc), line = 90
  3805
  3806 2605 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3807 2609 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3808 260D A9 16			lda #$16
  3809 260F 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3810 2612 A9 14			lda #$14
  3811 2614 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3812 2617 20 B1 13			jsr CALCOBSTACLEADDR
  3813 261A B4 17			ldy :STACKORIGIN-1,x
  3814 261C B5 18			lda :STACKORIGIN,x
  3815 261E 99 60 00			sta adr.OBSTACLES,y
  3816 2621 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3817 2623 99 61 00			sta adr.OBSTACLES+1,y
  3818 2626 CA				dex
  3819 2627 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3820 262B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3821 262F A9 0C			lda #$0C
  3822 2631 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3823 2634 A9 14			lda #$14
  3824 2636 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3825 2639 20 B1 13			jsr CALCOBSTACLEADDR
  3826 263C B4 17			ldy :STACKORIGIN-1,x
  3827 263E B5 18			lda :STACKORIGIN,x
  3828 2640 99 60 00			sta adr.OBSTACLES,y
  3829 2643 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3830 2645 99 61 00			sta adr.OBSTACLES+1,y
  3831 2648 CA				dex
  3832 2649 CA				dex
  3833 264A			@exit
  3834 					.ifdef @new
  3835 					lda <@VarData
  3836 					sta :ztmp
  3837 					lda >@VarData
  3838 					ldy #@VarDataSize-1
  3839 					jmp @FreeMem
  3840 					els
  3841 264A 60				rts						; ret
  3842 					eif
  3843 				.endl
  3844
  3845 264B			.local	SETLEVEL07					; PROCEDURE
  3846
  3847 				; optimize OK (levels.inc), line = 97
  3848
  3849 264B A9 01			lda #$01
  3850 264D 8D 57 2C			sta SETPLAYER.ISALIVE
  3851 2650 A9 62			lda #$62
  3852 2652 8D 56 2C			sta SETPLAYER.COLOUR
  3853 2655 A9 00			lda #$00
  3854 2657 8D 55 2C			sta SETPLAYER.BRAIN
  3855 265A A9 04			lda #$04
  3856 265C 8D 54 2C			sta SETPLAYER.DIR
  3857 265F A9 0C			lda #$0C
  3858 2661 8D 53 2C			sta SETPLAYER.Y
  3859 2664 A9 12			lda #$12
  3860 2666 8D 52 2C			sta SETPLAYER.X
  3861 2669 AD 07 2C			lda PLAYER1
  3862 266C 8D 50 2C			sta SETPLAYER.P
  3863 266F AD 08 2C			lda PLAYER1+1
  3864 2672 8D 51 2C			sta SETPLAYER.P+1
  3865 2675 20 CF 15			jsr SETPLAYER
  3866
  3867 				; optimize OK (levels.inc), line = 98
  3868
  3869 2678 A9 01			lda #$01
  3870 267A 8D 57 2C			sta SETPLAYER.ISALIVE
  3871 267D A9 5D			lda #$5D
  3872 267F 8D 56 2C			sta SETPLAYER.COLOUR
  3873 2682 A9 03			lda #$03
  3874 2684 8D 55 2C			sta SETPLAYER.BRAIN
  3875 2687 A9 08			lda #$08
  3876 2689 8D 54 2C			sta SETPLAYER.DIR
  3877 268C A9 17			lda #$17
  3878 268E 8D 53 2C			sta SETPLAYER.Y
  3879 2691 A9 01			lda #$01
  3880 2693 8D 52 2C			sta SETPLAYER.X
  3881 2696 AD 09 2C			lda PLAYER2
  3882 2699 8D 50 2C			sta SETPLAYER.P
  3883 269C AD 0A 2C			lda PLAYER2+1
  3884 269F 8D 51 2C			sta SETPLAYER.P+1
  3885 26A2 20 CF 15			jsr SETPLAYER
  3886
  3887 				; optimize OK (levels.inc), line = 99
  3888
  3889 26A5 A9 01			lda #$01
  3890 26A7 8D 57 2C			sta SETPLAYER.ISALIVE
  3891 26AA A9 71			lda #$71
  3892 26AC 8D 56 2C			sta SETPLAYER.COLOUR
  3893 26AF A9 03			lda #$03
  3894 26B1 8D 55 2C			sta SETPLAYER.BRAIN
  3895 26B4 A9 02			lda #$02
  3896 26B6 8D 54 2C			sta SETPLAYER.DIR
  3897 26B9 A9 04			lda #$04
  3898 26BB 8D 53 2C			sta SETPLAYER.Y
  3899 26BE A9 1E			lda #$1E
  3900 26C0 8D 52 2C			sta SETPLAYER.X
  3901 26C3 AD 0B 2C			lda PLAYER3
  3902 26C6 8D 50 2C			sta SETPLAYER.P
  3903 26C9 AD 0C 2C			lda PLAYER3+1
  3904 26CC 8D 51 2C			sta SETPLAYER.P+1
  3905 26CF 20 CF 15			jsr SETPLAYER
  3906
  3907 				; optimize OK (levels.inc), line = 100
  3908
  3909 26D2 A9 01			lda #$01
  3910 26D4 8D 57 2C			sta SETPLAYER.ISALIVE
  3911 26D7 A9 55			lda #$55
  3912 26D9 8D 56 2C			sta SETPLAYER.COLOUR
  3913 26DC A9 02			lda #$02
  3914 26DE 8D 55 2C			sta SETPLAYER.BRAIN
  3915 26E1 A9 01			lda #$01
  3916 26E3 8D 54 2C			sta SETPLAYER.DIR
  3917 26E6 A9 15			lda #$15
  3918 26E8 8D 53 2C			sta SETPLAYER.Y
  3919 26EB A9 24			lda #$24
  3920 26ED 8D 52 2C			sta SETPLAYER.X
  3921 26F0 AD 0D 2C			lda PLAYER4
  3922 26F3 8D 50 2C			sta SETPLAYER.P
  3923 26F6 AD 0E 2C			lda PLAYER4+1
  3924 26F9 8D 51 2C			sta SETPLAYER.P+1
  3925 26FC 20 CF 15			jsr SETPLAYER
  3926
  3927 				; optimize FAIL (1, levels.inc), line = 102
  3928
  3929 26FF E8				inx
  3930 2700 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3931 2704 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3932 2706 A9 06			lda #$06
  3933 2708 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3934 270B A9 0A			lda #$0A
  3935 270D 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3936 2710 20 B1 13			jsr CALCOBSTACLEADDR
  3937 2713 B4 17			ldy :STACKORIGIN-1,x
  3938 2715 B5 18			lda :STACKORIGIN,x
  3939 2717 99 60 00			sta adr.OBSTACLES,y
  3940 271A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3941 271C 99 61 00			sta adr.OBSTACLES+1,y
  3942 271F CA				dex
  3943 2720 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3944 2724 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3945 2728 A9 06			lda #$06
  3946 272A 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3947 272D A9 1E			lda #$1E
  3948 272F 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3949 2732 20 B1 13			jsr CALCOBSTACLEADDR
  3950 2735 B4 17			ldy :STACKORIGIN-1,x
  3951 2737 B5 18			lda :STACKORIGIN,x
  3952 2739 99 60 00			sta adr.OBSTACLES,y
  3953 273C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3954 273E 99 61 00			sta adr.OBSTACLES+1,y
  3955 2741 CA				dex
  3956
  3957 				; optimize FAIL (1, levels.inc), line = 103
  3958
  3959 2742 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3960 2746 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3961 274A A9 12			lda #$12
  3962 274C 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3963 274F A9 0A			lda #$0A
  3964 2751 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3965 2754 20 B1 13			jsr CALCOBSTACLEADDR
  3966 2757 B4 17			ldy :STACKORIGIN-1,x
  3967 2759 B5 18			lda :STACKORIGIN,x
  3968 275B 99 60 00			sta adr.OBSTACLES,y
  3969 275E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3970 2760 99 61 00			sta adr.OBSTACLES+1,y
  3971 2763 CA				dex
  3972 2764 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3973 2768 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3974 276C A9 12			lda #$12
  3975 276E 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3976 2771 A9 1E			lda #$1E
  3977 2773 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3978 2776 20 B1 13			jsr CALCOBSTACLEADDR
  3979 2779 B4 17			ldy :STACKORIGIN-1,x
  3980 277B B5 18			lda :STACKORIGIN,x
  3981 277D 99 60 00			sta adr.OBSTACLES,y
  3982 2780 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3983 2782 99 61 00			sta adr.OBSTACLES+1,y
  3984 2785 CA				dex
  3985
  3986 				; optimize FAIL (1, levels.inc), line = 104
  3987
  3988 2786 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3989 278A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3990 278E A9 0C			lda #$0C
  3991 2790 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  3992 2793 A9 01			lda #$01
  3993 2795 8D 4B 2C			sta CALCOBSTACLEADDR.X
  3994 2798 20 B1 13			jsr CALCOBSTACLEADDR
  3995 279B B4 17			ldy :STACKORIGIN-1,x
  3996 279D B5 18			lda :STACKORIGIN,x
  3997 279F 99 60 00			sta adr.OBSTACLES,y
  3998 27A2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3999 27A4 99 61 00			sta adr.OBSTACLES+1,y
  4000 27A7 CA				dex
  4001 27A8 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4002 27AC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4003 27B0 A9 02			lda #$02
  4004 27B2 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4005 27B5 A9 14			lda #$14
  4006 27B7 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4007 27BA 20 B1 13			jsr CALCOBSTACLEADDR
  4008 27BD B4 17			ldy :STACKORIGIN-1,x
  4009 27BF B5 18			lda :STACKORIGIN,x
  4010 27C1 99 60 00			sta adr.OBSTACLES,y
  4011 27C4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4012 27C6 99 61 00			sta adr.OBSTACLES+1,y
  4013 27C9 CA				dex
  4014
  4015 				; optimize FAIL (1, levels.inc), line = 105
  4016
  4017 27CA A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4018 27CE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4019 27D2 A9 16			lda #$16
  4020 27D4 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4021 27D7 A9 14			lda #$14
  4022 27D9 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4023 27DC 20 B1 13			jsr CALCOBSTACLEADDR
  4024 27DF B4 17			ldy :STACKORIGIN-1,x
  4025 27E1 B5 18			lda :STACKORIGIN,x
  4026 27E3 99 60 00			sta adr.OBSTACLES,y
  4027 27E6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4028 27E8 99 61 00			sta adr.OBSTACLES+1,y
  4029 27EB CA				dex
  4030 27EC A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4031 27F0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4032 27F4 A9 0C			lda #$0C
  4033 27F6 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4034 27F9 A9 14			lda #$14
  4035 27FB 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4036 27FE 20 B1 13			jsr CALCOBSTACLEADDR
  4037 2801 B4 17			ldy :STACKORIGIN-1,x
  4038 2803 B5 18			lda :STACKORIGIN,x
  4039 2805 99 60 00			sta adr.OBSTACLES,y
  4040 2808 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4041 280A 99 61 00			sta adr.OBSTACLES+1,y
  4042 280D CA				dex
  4043 280E CA				dex
  4044 280F			@exit
  4045 					.ifdef @new
  4046 					lda <@VarData
  4047 					sta :ztmp
  4048 					lda >@VarData
  4049 					ldy #@VarDataSize-1
  4050 					jmp @FreeMem
  4051 					els
  4052 280F 60				rts						; ret
  4053 					eif
  4054 				.endl
  4055
  4056 2810			.local	SETLEVEL08					; PROCEDURE
  4057
  4058 				; optimize OK (levels.inc), line = 112
  4059
  4060 2810 A9 01			lda #$01
  4061 2812 8D 57 2C			sta SETPLAYER.ISALIVE
  4062 2815 A9 62			lda #$62
  4063 2817 8D 56 2C			sta SETPLAYER.COLOUR
  4064 281A A9 00			lda #$00
  4065 281C 8D 55 2C			sta SETPLAYER.BRAIN
  4066 281F A9 08			lda #$08
  4067 2821 8D 54 2C			sta SETPLAYER.DIR
  4068 2824 A9 17			lda #$17
  4069 2826 8D 53 2C			sta SETPLAYER.Y
  4070 2829 A9 01			lda #$01
  4071 282B 8D 52 2C			sta SETPLAYER.X
  4072 282E AD 07 2C			lda PLAYER1
  4073 2831 8D 50 2C			sta SETPLAYER.P
  4074 2834 AD 08 2C			lda PLAYER1+1
  4075 2837 8D 51 2C			sta SETPLAYER.P+1
  4076 283A 20 CF 15			jsr SETPLAYER
  4077
  4078 				; optimize OK (levels.inc), line = 113
  4079
  4080 283D A9 01			lda #$01
  4081 283F 8D 57 2C			sta SETPLAYER.ISALIVE
  4082 2842 A9 5D			lda #$5D
  4083 2844 8D 56 2C			sta SETPLAYER.COLOUR
  4084 2847 A9 03			lda #$03
  4085 2849 8D 55 2C			sta SETPLAYER.BRAIN
  4086 284C A9 04			lda #$04
  4087 284E 8D 54 2C			sta SETPLAYER.DIR
  4088 2851 A9 17			lda #$17
  4089 2853 8D 53 2C			sta SETPLAYER.Y
  4090 2856 A9 26			lda #$26
  4091 2858 8D 52 2C			sta SETPLAYER.X
  4092 285B AD 09 2C			lda PLAYER2
  4093 285E 8D 50 2C			sta SETPLAYER.P
  4094 2861 AD 0A 2C			lda PLAYER2+1
  4095 2864 8D 51 2C			sta SETPLAYER.P+1
  4096 2867 20 CF 15			jsr SETPLAYER
  4097
  4098 				; optimize OK (levels.inc), line = 114
  4099
  4100 286A A9 01			lda #$01
  4101 286C 8D 57 2C			sta SETPLAYER.ISALIVE
  4102 286F A9 71			lda #$71
  4103 2871 8D 56 2C			sta SETPLAYER.COLOUR
  4104 2874 A9 02			lda #$02
  4105 2876 8D 55 2C			sta SETPLAYER.BRAIN
  4106 2879 8D 54 2C			sta SETPLAYER.DIR
  4107 287C A9 01			lda #$01
  4108 287E 8D 53 2C			sta SETPLAYER.Y
  4109 2881 A9 0A			lda #$0A
  4110 2883 8D 52 2C			sta SETPLAYER.X
  4111 2886 AD 0B 2C			lda PLAYER3
  4112 2889 8D 50 2C			sta SETPLAYER.P
  4113 288C AD 0C 2C			lda PLAYER3+1
  4114 288F 8D 51 2C			sta SETPLAYER.P+1
  4115 2892 20 CF 15			jsr SETPLAYER
  4116
  4117 				; optimize OK (levels.inc), line = 115
  4118
  4119 2895 A9 01			lda #$01
  4120 2897 8D 57 2C			sta SETPLAYER.ISALIVE
  4121 289A A9 55			lda #$55
  4122 289C 8D 56 2C			sta SETPLAYER.COLOUR
  4123 289F A9 04			lda #$04
  4124 28A1 8D 55 2C			sta SETPLAYER.BRAIN
  4125 28A4 8D 54 2C			sta SETPLAYER.DIR
  4126 28A7 A9 01			lda #$01
  4127 28A9 8D 53 2C			sta SETPLAYER.Y
  4128 28AC A9 26			lda #$26
  4129 28AE 8D 52 2C			sta SETPLAYER.X
  4130 28B1 AD 0D 2C			lda PLAYER4
  4131 28B4 8D 50 2C			sta SETPLAYER.P
  4132 28B7 AD 0E 2C			lda PLAYER4+1
  4133 28BA 8D 51 2C			sta SETPLAYER.P+1
  4134 28BD 20 CF 15			jsr SETPLAYER
  4135
  4136 				; optimize FAIL (1, levels.inc), line = 117
  4137
  4138 28C0 E8				inx
  4139 28C1 A9 00 95 18			mva #$00 :STACKORIGIN,x
  4140 28C5 95 28			sta :STACKORIGIN+STACKWIDTH,x
  4141 28C7 A9 06			lda #$06
  4142 28C9 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4143 28CC A9 0A			lda #$0A
  4144 28CE 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4145 28D1 20 B1 13			jsr CALCOBSTACLEADDR
  4146 28D4 B4 17			ldy :STACKORIGIN-1,x
  4147 28D6 B5 18			lda :STACKORIGIN,x
  4148 28D8 99 60 00			sta adr.OBSTACLES,y
  4149 28DB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4150 28DD 99 61 00			sta adr.OBSTACLES+1,y
  4151 28E0 CA				dex
  4152 28E1 A9 02 95 18			mva #$02 :STACKORIGIN,x
  4153 28E5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4154 28E9 A9 06			lda #$06
  4155 28EB 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4156 28EE A9 1E			lda #$1E
  4157 28F0 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4158 28F3 20 B1 13			jsr CALCOBSTACLEADDR
  4159 28F6 B4 17			ldy :STACKORIGIN-1,x
  4160 28F8 B5 18			lda :STACKORIGIN,x
  4161 28FA 99 60 00			sta adr.OBSTACLES,y
  4162 28FD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4163 28FF 99 61 00			sta adr.OBSTACLES+1,y
  4164 2902 CA				dex
  4165
  4166 				; optimize FAIL (1, levels.inc), line = 118
  4167
  4168 2903 A9 04 95 18			mva #$04 :STACKORIGIN,x
  4169 2907 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4170 290B A9 12			lda #$12
  4171 290D 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4172 2910 A9 0A			lda #$0A
  4173 2912 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4174 2915 20 B1 13			jsr CALCOBSTACLEADDR
  4175 2918 B4 17			ldy :STACKORIGIN-1,x
  4176 291A B5 18			lda :STACKORIGIN,x
  4177 291C 99 60 00			sta adr.OBSTACLES,y
  4178 291F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4179 2921 99 61 00			sta adr.OBSTACLES+1,y
  4180 2924 CA				dex
  4181 2925 A9 06 95 18			mva #$06 :STACKORIGIN,x
  4182 2929 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4183 292D A9 12			lda #$12
  4184 292F 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4185 2932 A9 1E			lda #$1E
  4186 2934 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4187 2937 20 B1 13			jsr CALCOBSTACLEADDR
  4188 293A B4 17			ldy :STACKORIGIN-1,x
  4189 293C B5 18			lda :STACKORIGIN,x
  4190 293E 99 60 00			sta adr.OBSTACLES,y
  4191 2941 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4192 2943 99 61 00			sta adr.OBSTACLES+1,y
  4193 2946 CA				dex
  4194
  4195 				; optimize FAIL (1, levels.inc), line = 119
  4196
  4197 2947 A9 08 95 18			mva #$08 :STACKORIGIN,x
  4198 294B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4199 294F A9 0C			lda #$0C
  4200 2951 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4201 2954 A9 01			lda #$01
  4202 2956 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4203 2959 20 B1 13			jsr CALCOBSTACLEADDR
  4204 295C B4 17			ldy :STACKORIGIN-1,x
  4205 295E B5 18			lda :STACKORIGIN,x
  4206 2960 99 60 00			sta adr.OBSTACLES,y
  4207 2963 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4208 2965 99 61 00			sta adr.OBSTACLES+1,y
  4209 2968 CA				dex
  4210 2969 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4211 296D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4212 2971 A9 02			lda #$02
  4213 2973 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4214 2976 A9 14			lda #$14
  4215 2978 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4216 297B 20 B1 13			jsr CALCOBSTACLEADDR
  4217 297E B4 17			ldy :STACKORIGIN-1,x
  4218 2980 B5 18			lda :STACKORIGIN,x
  4219 2982 99 60 00			sta adr.OBSTACLES,y
  4220 2985 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4221 2987 99 61 00			sta adr.OBSTACLES+1,y
  4222 298A CA				dex
  4223
  4224 				; optimize FAIL (1, levels.inc), line = 120
  4225
  4226 298B A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4227 298F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4228 2993 A9 16			lda #$16
  4229 2995 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4230 2998 A9 14			lda #$14
  4231 299A 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4232 299D 20 B1 13			jsr CALCOBSTACLEADDR
  4233 29A0 B4 17			ldy :STACKORIGIN-1,x
  4234 29A2 B5 18			lda :STACKORIGIN,x
  4235 29A4 99 60 00			sta adr.OBSTACLES,y
  4236 29A7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4237 29A9 99 61 00			sta adr.OBSTACLES+1,y
  4238 29AC CA				dex
  4239 29AD A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4240 29B1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4241 29B5 A9 0C			lda #$0C
  4242 29B7 8D 4C 2C			sta CALCOBSTACLEADDR.Y
  4243 29BA A9 14			lda #$14
  4244 29BC 8D 4B 2C			sta CALCOBSTACLEADDR.X
  4245 29BF 20 B1 13			jsr CALCOBSTACLEADDR
  4246 29C2 B4 17			ldy :STACKORIGIN-1,x
  4247 29C4 B5 18			lda :STACKORIGIN,x
  4248 29C6 99 60 00			sta adr.OBSTACLES,y
  4249 29C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4250 29CB 99 61 00			sta adr.OBSTACLES+1,y
  4251 29CE CA				dex
  4252 29CF CA				dex
  4253 29D0			@exit
  4254 					.ifdef @new
  4255 					lda <@VarData
  4256 					sta :ztmp
  4257 					lda >@VarData
  4258 					ldy #@VarDataSize-1
  4259 					jmp @FreeMem
  4260 					els
  4261 29D0 60				rts						; ret
  4262 					eif
  4263 				.endl
  4264
  4265 29D1			.local	INITPLAYFIELD					; PROCEDURE
  4266
  4267 				; optimize OK (init.inc), line = 5
  4268
  4269 29D1 A9 1F			lda #$1F
  4270 29D3 8D 15 FF			sta BACKGROUND
  4271 29D6 A9 00			lda #$00
  4272 29D8 8D 19 FF			sta BOREDER
  4273
  4274 				; optimize OK (init.inc), line = 6
  4275
  4276 29DB A9 20			lda #$20
  4277 29DD 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  4278 29DF A9 C0			lda #$C0
  4279 29E1 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  4280 29E3 A9 03			lda #$03
  4281 29E5 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  4282 29E7 A9 00			lda #$00
  4283 29E9 85 08			sta SYSTEM.FILLCHAR_006E.A
  4284 29EB A9 0C			lda #$0C
  4285 29ED 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  4286 29EF 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  4287
  4288 				; optimize OK (init.inc), line = 8
  4289
  4290 29F2 A9 27			lda #$27
  4291 29F4 85 58			sta T0B
  4292
  4293 29F6			l_0F91
  4294 				; --- ForToDoCondition
  4295
  4296 				; optimize OK (init.inc), line = 9
  4297
  4298 29F6 A4 58			ldy T0B
  4299 29F8 A9 A0			lda #$A0
  4300 29FA 99 00 0C			sta $0C00,y
  4301
  4302 				; optimize OK (init.inc), line = 10
  4303
  4304 29FD 99 C0 0F			sta $0FC0,y
  4305
  4306 				; optimize OK (init.inc), line = 11
  4307
  4308 2A00 A9 41			lda #$41
  4309 2A02 99 00 08			sta $0800,y
  4310
  4311 				; optimize OK (init.inc), line = 12
  4312
  4313 2A05 99 C0 0B			sta $0BC0,y
  4314
  4315 				; --- ForToDoEpilog
  4316 2A08 C6 58			dec T0B
  4317 2A0A 10 EA			jpl l_0F91
  4318 2A0C			l_0F9F
  4319
  4320 				; optimize OK (init.inc), line = 15
  4321
  4322 2A0C A9 18			lda #$18
  4323 2A0E 85 58			sta T0B
  4324
  4325 2A10			l_0FD1
  4326 				; --- ForToDoCondition
  4327 2A10 A5 58			lda T0B
  4328 2A12 C9 01			cmp #$01
  4329 2A14 90 3A			jcc l_0FDF
  4330
  4331 				; optimize OK (init.inc), line = 16
  4332
  4333 2A16 0A				asl @
  4334 2A17 A8				tay
  4335 2A18 A9 FF			lda #$FF
  4336 2A1A 18 79 26 10			add adr.MUL40,y
  4337 2A1E 85 12			sta :bp2
  4338 2A20 A9 0B			lda #$0B
  4339 2A22 79 27 10			adc adr.MUL40+1,y
  4340 2A25 85 13			sta :bp2+1
  4341 2A27 A0 00			ldy #$00
  4342 2A29 A9 A0			lda #$A0
  4343 2A2B 91 12			sta (:bp2),y
  4344 2A2D C8				iny
  4345 2A2E 91 12			sta (:bp2),y
  4346
  4347 				; optimize OK (init.inc), line = 17
  4348
  4349 2A30 A5 58			lda T0B
  4350 2A32 0A				asl @
  4351 2A33 A8				tay
  4352 2A34 A9 FF			lda #$FF
  4353 2A36 18 79 26 10			add adr.MUL40,y
  4354 2A3A 85 12			sta :bp2
  4355 2A3C A9 07			lda #$07
  4356 2A3E 79 27 10			adc adr.MUL40+1,y
  4357 2A41 85 13			sta :bp2+1
  4358 2A43 A0 00			ldy #$00
  4359 2A45 A9 41			lda #$41
  4360 2A47 91 12			sta (:bp2),y
  4361 2A49 C8				iny
  4362 2A4A 91 12			sta (:bp2),y
  4363
  4364 				; --- ForToDoEpilog
  4365 2A4C C6 58			dec T0B
  4366 2A4E 10 C0			jpl l_0FD1
  4367 2A50			l_0FDF
  4368
  4369 				; optimize OK (init.inc), line = 20
  4370
  4371 2A50 A9 07			lda #$07
  4372 2A52 85 59			sta I0B
  4373
  4374 2A54			l_1003
  4375 				; --- ForToDoCondition
  4376 2A54 A5 59			lda I0B
  4377 2A56 0A				asl @
  4378 2A57 A8				tay
  4379 2A58 A9 5E			lda #$5E
  4380 2A5A 99 60 00			sta adr.OBSTACLES,y
  4381 2A5D A9 00			lda #$00
  4382 2A5F 99 61 00			sta adr.OBSTACLES+1,y
  4383
  4384 				; --- ForToDoEpilog
  4385 2A62 C6 59			dec I0B
  4386 2A64 10 EE			jpl l_1003
  4387 2A66			l_1011
  4388
  4389 				; ------------------------------------------------------------
  4390
  4391 = 0000			@FORTMP_0F8E	= $00
  4392 = 0001			@FORTMP_0FCE	= $01
  4393 = 0000			@FORTMP_1000	= $00
  4394 2A66			@exit
  4395 					.ifdef @new
  4396 					lda <@VarData
  4397 					sta :ztmp
  4398 					lda >@VarData
  4399 					ldy #@VarDataSize-1
  4400 					jmp @FreeMem
  4401 					els
  4402 2A66 60				rts						; ret
  4403 					eif
  4404 				.endl
  4405
  4406 2A67			.local	INITPLAYERS					; PROCEDURE
  4407
  4408 				; optimize OK (init.inc), line = 27
  4409
  4410 2A67 A9 FF			lda #$FF
  4411 2A69 85 5A			sta ALIVE
  4412
  4413 				; optimize OK (init.inc), line = 28
  4414
  4415 2A6B A9 00			lda #$00
  4416 2A6D 8D 29 2C			sta PLAYER1.ISALIVE
  4417 2A70 8D 31 2C			sta PLAYER2.ISALIVE
  4418
  4419 				; optimize OK (init.inc), line = 29
  4420
  4421 2A73 8D 39 2C			sta PLAYER3.ISALIVE
  4422 2A76 8D 41 2C			sta PLAYER4.ISALIVE
  4423 2A79			@exit
  4424 					.ifdef @new
  4425 					lda <@VarData
  4426 					sta :ztmp
  4427 					lda >@VarData
  4428 					ldy #@VarDataSize-1
  4429 					jmp @FreeMem
  4430 					els
  4431 2A79 60				rts						; ret
  4432 					eif
  4433 				.endl
  4434
  4435 2A7A			.local	INITSCORE					; PROCEDURE
  4436
  4437 				; optimize OK (init.inc), line = 36
  4438
  4439 2A7A A9 30			lda #$30
  4440 2A7C 8D 28 2C			sta PLAYER1.SCORE
  4441 2A7F 8D 30 2C			sta PLAYER2.SCORE
  4442
  4443 				; optimize OK (init.inc), line = 37
  4444
  4445 2A82 8D 38 2C			sta PLAYER3.SCORE
  4446 2A85 8D 40 2C			sta PLAYER4.SCORE
  4447 2A88			@exit
  4448 					.ifdef @new
  4449 					lda <@VarData
  4450 					sta :ztmp
  4451 					lda >@VarData
  4452 					ldy #@VarDataSize-1
  4453 					jmp @FreeMem
  4454 					els
  4455 2A88 60				rts						; ret
  4456 					eif
  4457 				.endl
  4458
  4459 2A89			.local	INITARENA					; PROCEDURE
  4460
  4461 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  4462
  4463 2A89 20 D1 29			jsr INITPLAYFIELD
  4464 2A8C 20 67 2A			jsr INITPLAYERS
  4465
  4466 				; optimize OK (init.inc), line = 46
  4467
  4468 2A8F AD 20 2C			lda LEVEL
  4469 2A92 8D 93 30			sta @CASETMP_0009
  4470 2A95 C9 00			cmp #$00
  4471 2A97 D0 06			jne l_105A
  4472 2A99			@
  4473
  4474 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  4475
  4476 2A99 20 C0 1C			jsr SETLEVEL00
  4477 2A9C 4C EC 2A			jmp a_0009
  4478 2A9F			l_105A
  4479 2A9F C9 01			cmp #$01
  4480 2AA1 D0 06			jne l_1064
  4481 2AA3			@
  4482
  4483 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4484
  4485 2AA3 20 E7 1D			jsr SETLEVEL01
  4486 2AA6 4C EC 2A			jmp a_0009
  4487 2AA9			l_1064
  4488 2AA9 C9 02			cmp #$02
  4489 2AAB D0 06			jne l_106E
  4490 2AAD			@
  4491
  4492 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4493
  4494 2AAD 20 0E 1F			jsr SETLEVEL02
  4495 2AB0 4C EC 2A			jmp a_0009
  4496 2AB3			l_106E
  4497 2AB3 C9 03			cmp #$03
  4498 2AB5 D0 06			jne l_1078
  4499 2AB7			@
  4500
  4501 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4502
  4503 2AB7 20 35 20			jsr SETLEVEL03
  4504 2ABA 4C EC 2A			jmp a_0009
  4505 2ABD			l_1078
  4506 2ABD C9 04			cmp #$04
  4507 2ABF D0 06			jne l_1082
  4508 2AC1			@
  4509
  4510 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4511
  4512 2AC1 20 7E 21			jsr SETLEVEL04
  4513 2AC4 4C EC 2A			jmp a_0009
  4514 2AC7			l_1082
  4515 2AC7 C9 05			cmp #$05
  4516 2AC9 D0 06			jne l_108C
  4517 2ACB			@
  4518
  4519 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4520
  4521 2ACB 20 E9 22			jsr SETLEVEL05
  4522 2ACE 4C EC 2A			jmp a_0009
  4523 2AD1			l_108C
  4524 2AD1 C9 06			cmp #$06
  4525 2AD3 D0 06			jne l_1096
  4526 2AD5			@
  4527
  4528 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4529
  4530 2AD5 20 8A 24			jsr SETLEVEL06
  4531 2AD8 4C EC 2A			jmp a_0009
  4532 2ADB			l_1096
  4533 2ADB C9 07			cmp #$07
  4534 2ADD D0 06			jne l_10A0
  4535 2ADF			@
  4536
  4537 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4538
  4539 2ADF 20 4B 26			jsr SETLEVEL07
  4540 2AE2 4C EC 2A			jmp a_0009
  4541 2AE5			l_10A0
  4542 2AE5 C9 08			cmp #$08
  4543 2AE7 D0 03			jne l_10AA
  4544 2AE9			@
  4545
  4546 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4547
  4548 2AE9 20 10 28			jsr SETLEVEL08
  4549 2AEC			l_10AA
  4550 2AEC			a_0009
  4551
  4552 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4553
  4554 2AEC 20 D4 13			jsr SAVEOBSTACLES
  4555 2AEF 20 7C 13			jsr ANIMATEOBSTACLES
  4556 2AF2 20 4D 12			jsr SHOWSCORE
  4557
  4558 				; ------------------------------------------------------------
  4559
  4560 = 3093			@CASETMP_0009	= DATAORIGIN+$0483
  4561
  4562 = 3093			@VarData	= @CASETMP_0009
  4563 = 0001			@VarDataSize	= 1
  4564
  4565 2AF5			@exit
  4566 					.ifdef @new
  4567 					lda <@VarData
  4568 					sta :ztmp
  4569 					lda >@VarData
  4570 					ldy #@VarDataSize-1
  4571 					jmp @FreeMem
  4572 					els
  4573 2AF5 60				rts						; ret
  4574 					eif
  4575 				.endl
  4576
  4577 2AF6			.local	PLAYERMOVE					; PROCEDURE
  4578
  4579 				; optimize OK (main.pas), line = 15
  4580
  4581 2AF6 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  4582 2B00 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4583 2B02 B1 12			lda (:bp2),y
  4584 2B04 F0 50			jeq l_10CB
  4585
  4586 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17
  4587
  4588 2B06 20 E7 12			jsr CHECKAVAILDIR
  4589
  4590 				; optimize OK (main.pas), line = 18
  4591
  4592 2B09 A5 5C			lda AVAILDIR
  4593 2B0B D0 06			jne l_10DF
  4594
  4595 				; optimize FAIL ('PLAYERBUSTED', main.pas), line = 19
  4596
  4597 2B0D 20 88 15			jsr PLAYERBUSTED
  4598 2B10 4C 56 2B			jmp l_10EA
  4599 2B13			l_10DF
  4600
  4601 				; optimize OK (main.pas), line = 21
  4602
  4603 2B13 AC 01 2C 84 12 AC + 	mwy PLY :bp2
  4604 2B1D A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4605 2B1F B1 12			lda (:bp2),y
  4606 2B21 8D 94 30			sta @CASETMP_000A
  4607 2B24 C9 00			cmp #$00
  4608 2B26 D0 06			jne l_10F5
  4609 2B28			@
  4610
  4611 				; optimize FAIL ('HUMAN', main.pas), line = 22
  4612
  4613 2B28 20 24 18			jsr HUMAN
  4614 2B2B 4C 53 2B			jmp a_000A
  4615 2B2E			l_10F5
  4616 2B2E C9 01			cmp #$01
  4617 2B30 D0 06			jne l_10FF
  4618 2B32			@
  4619
  4620 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 23
  4621
  4622 2B32 20 C6 18			jsr AISTRAIGHT
  4623 2B35 4C 53 2B			jmp a_000A
  4624 2B38			l_10FF
  4625 2B38 C9 02			cmp #$02
  4626 2B3A D0 06			jne l_1109
  4627 2B3C			@
  4628
  4629 				; optimize FAIL ('AISAPPER', main.pas), line = 24
  4630
  4631 2B3C 20 43 19			jsr AISAPPER
  4632 2B3F 4C 53 2B			jmp a_000A
  4633 2B42			l_1109
  4634 2B42 C9 03			cmp #$03
  4635 2B44 D0 06			jne l_1113
  4636 2B46			@
  4637
  4638 				; optimize FAIL ('AIBULLY', main.pas), line = 25
  4639
  4640 2B46 20 9D 1B			jsr AIBULLY
  4641 2B49 4C 53 2B			jmp a_000A
  4642 2B4C			l_1113
  4643 2B4C C9 04			cmp #$04
  4644 2B4E D0 03			jne l_111D
  4645 2B50			@
  4646
  4647 				; optimize FAIL ('AIMIRROR', main.pas), line = 26
  4648
  4649 2B50 20 6B 1C			jsr AIMIRROR
  4650 2B53			l_111D
  4651 2B53			a_000A
  4652
  4653 				; optimize FAIL ('DRAWPLAYER', main.pas), line = 29
  4654
  4655 2B53 20 18 14			jsr DRAWPLAYER
  4656 2B56			l_10EA
  4657 2B56			l_10CB
  4658
  4659 				; ------------------------------------------------------------
  4660
  4661 = 3094			@CASETMP_000A	= DATAORIGIN+$0484
  4662
  4663 = 3094			@VarData	= @CASETMP_000A
  4664 = 0001			@VarDataSize	= 1
  4665
  4666 2B56			@exit
  4667 					.ifdef @new
  4668 					lda <@VarData
  4669 					sta :ztmp
  4670 					lda >@VarData
  4671 					ldy #@VarDataSize-1
  4672 					jmp @FreeMem
  4673 					els
  4674 2B56 60				rts						; ret
  4675 					eif
  4676 				.endl
  4677
  4678 2B57			.local	MAINLOOP					; PROCEDURE
  4679
  4680 				; optimize FAIL ('INITARENA', main.pas), line = 39
  4681
  4682 2B57 20 89 2A			jsr INITARENA
  4683 2B5A 20 76 16			jsr STARTSCREEN
  4684
  4685 				; --- RepeatUntilProlog
  4686 2B5D			l_1131
  4687
  4688 				; optimize FAIL ('SYSTEM.PAUSE_0085', main.pas), line = 42
  4689
  4690 2B5D 20 AC 11			jsr SYSTEM.PAUSE_0085
  4691 2B60 AD 07 2C			lda PLAYER1
  4692 2B63 8D 01 2C			sta PLY
  4693 2B66 AD 08 2C			lda PLAYER1+1
  4694 2B69 8D 02 2C			sta PLY+1
  4695 2B6C 20 F6 2A			jsr PLAYERMOVE
  4696
  4697 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44
  4698
  4699 2B6F 20 7C 13			jsr ANIMATEOBSTACLES
  4700
  4701 				; optimize OK (main.pas), line = 46
  4702
  4703 2B72 A9 02			lda #$02
  4704 2B74 8D 1C 2C			sta SYSTEM.PAUSE_0086.N
  4705 2B77 A9 00			lda #$00
  4706 2B79 8D 1D 2C			sta SYSTEM.PAUSE_0086.N+1
  4707 2B7C 20 B3 11			jsr SYSTEM.PAUSE_0086
  4708
  4709 				; optimize OK (main.pas), line = 47
  4710
  4711 2B7F AD 09 2C			lda PLAYER2
  4712 2B82 8D 01 2C			sta PLY
  4713 2B85 AD 0A 2C			lda PLAYER2+1
  4714 2B88 8D 02 2C			sta PLY+1
  4715 2B8B 20 F6 2A			jsr PLAYERMOVE
  4716
  4717 				; optimize OK (main.pas), line = 48
  4718
  4719 2B8E AD 0B 2C			lda PLAYER3
  4720 2B91 8D 01 2C			sta PLY
  4721 2B94 AD 0C 2C			lda PLAYER3+1
  4722 2B97 8D 02 2C			sta PLY+1
  4723 2B9A 20 F6 2A			jsr PLAYERMOVE
  4724
  4725 				; optimize OK (main.pas), line = 49
  4726
  4727 2B9D AD 0D 2C			lda PLAYER4
  4728 2BA0 8D 01 2C			sta PLY
  4729 2BA3 AD 0E 2C			lda PLAYER4+1
  4730 2BA6 8D 02 2C			sta PLY+1
  4731 2BA9 20 F6 2A			jsr PLAYERMOVE
  4732
  4733 				; optimize FAIL ('ISONELEFT', main.pas), line = 50
  4734
  4735 2BAC 20 BB 17			jsr ISONELEFT
  4736 2BAF CA				dex
  4737 2BB0 B5 19			lda :STACKORIGIN+1,x
  4738 2BB2 F0 A9			jeq l_1131
  4739
  4740 				; optimize FAIL ('UPDATESCORE', main.pas), line = 52
  4741
  4742 2BB4 20 C6 12			jsr UPDATESCORE
  4743 2BB7 A9 64			lda #$64
  4744 2BB9 8D 1C 2C			sta SYSTEM.PAUSE_0086.N
  4745 2BBC A9 00			lda #$00
  4746 2BBE 8D 1D 2C			sta SYSTEM.PAUSE_0086.N+1
  4747 2BC1 20 B3 11			jsr SYSTEM.PAUSE_0086
  4748 2BC4 20 66 16			jsr NEXTLEVEL
  4749 2BC7			@exit
  4750 					.ifdef @new
  4751 					lda <@VarData
  4752 					sta :ztmp
  4753 					lda >@VarData
  4754 					ldy #@VarDataSize-1
  4755 					jmp @FreeMem
  4756 					els
  4757 2BC7 60				rts						; ret
  4758 					eif
  4759 				.endl
  4760 2BC8			l_001F
  4761
  4762 				; optimize FAIL ('SETFONTS', main.pas), line = 58
  4763
  4764 2BC8 20 DA 17			jsr SETFONTS
  4765
  4766 				; --- RepeatUntilProlog
  4767 2BCB			l_1159
  4768
  4769 				; optimize FAIL ('INITSCORE', main.pas), line = 61
  4770
  4771 2BCB 20 7A 2A			jsr INITSCORE
  4772 2BCE A9 00			lda #$00
  4773 2BD0 8D 21 2C			sta GAMEOVER
  4774 2BD3 A9 01			lda #$01
  4775 2BD5 8D 20 2C			sta LEVEL
  4776
  4777 				; --- RepeatUntilProlog
  4778 2BD8			l_1163
  4779
  4780 				; optimize FAIL ('MAINLOOP', main.pas), line = 63
  4781
  4782 2BD8 20 57 2B			jsr MAINLOOP
  4783 2BDB 20 7E 17			jsr ISGAMEOVER
  4784 2BDE CA				dex
  4785 2BDF B5 19			lda :STACKORIGIN+1,x
  4786 2BE1 F0 F5			jeq l_1163
  4787
  4788 				; optimize FAIL ('SHOWSCORE', main.pas), line = 65
  4789
  4790 2BE3 20 4D 12			jsr SHOWSCORE
  4791 2BE6 20 0F 17			jsr ENDSCREEN
  4792 2BE9 A9 C8			lda #$C8
  4793 2BEB 8D 1C 2C			sta SYSTEM.PAUSE_0086.N
  4794 2BEE A9 00			lda #$00
  4795 2BF0 8D 1D 2C			sta SYSTEM.PAUSE_0086.N+1
  4796 2BF3 20 B3 11			jsr SYSTEM.PAUSE_0086
  4797
  4798 				; optimize OK (main.pas), line = 66
  4799
  4800 2BF6 4C CB 2B			jmp l_1159
  4801
  4802 				; ------------------------------------------------------------
  4803
  4804 = 0800			ATTRIBUTE_ADDR	= $0800
  4805 = 0C00			SCREEN_ADDR	= $0C00
  4806 = 001F			BACKGROUND_COLOUR	= $1F
  4807 = 0000			BOREDER_COLOUR	= $00
  4808 = 0007			OBST_QUANTITY	= $07
  4809 = 0009			VICTORIES	= $09
  4810 = 005E			TRASH	= $5E
  4811 = 0005			LOOK_AHEAD	= $05
  4812 = 0020			EMPTY	= $20
  4813 = 00A0			WALL	= $A0
  4814 = 0041			WALL_COLOUR	= $41
  4815 = 0030			ZERO	= $30
  4816 = 0054			OBSTACLE_1	= $54
  4817 = 0055			OBSTACLE_2	= $55
  4818 = 0065			OBST_COLOUR	= $65
  4819 = 0050			PLY_HEAD_UP	= $50
  4820 = 0051			PLY_HEAD_LEFT	= $51
  4821 = 0052			PLY_HEAD_RIGHT	= $52
  4822 = 0053			PLY_HEAD_DOWN	= $53
  4823 = 002A			PLY_CRASH	= $2A
  4824 = 0057			PLY_BUSTED	= $57
  4825 = 0042			PLY_TAIL_UD	= $42
  4826 = 0040			PLY_TAIL_LR	= $40
  4827 = 007D			PLY_TAIL_RD	= $7D
  4828 = 006E			PLY_TAIL_RU	= $6E
  4829 = 006D			PLY_TAIL_LD	= $6D
  4830 = 0070			PLY_TAIL_LU	= $70
  4831 = 0062			PLY1_COLOUR	= $62
  4832 = 005D			PLY2_COLOUR	= $5D
  4833 = 0071			PLY3_COLOUR	= $71
  4834 = 0055			PLY4_COLOUR	= $55
  4835 = 0000			PLY_CTRL	= $00
  4836 = 0001			AI_STRAIGHT	= $01
  4837 = 0002			AI_SAPPER	= $02
  4838 = 0003			AI_BULLY	= $03
  4839 = 0004			AI_MIRROR	= $04
  4840 = 0001			JOY_UP	= $01
  4841 = 0002			JOY_DOWN	= $02
  4842 = 0004			JOY_LEFT	= $04
  4843 = 0008			JOY_RIGHT	= $08
  4844 = 0040			JOY_FIRE	= $40
  4845 = 0002			JOY_SELECT_1	= $02
  4846 = 0004			JOY_SELECT_2	= $04
  4847 = 1026			adr.MUL40	= CODEORIGIN+$0018
  4848 2BF9			.var MUL40	= adr.MUL40 .word
  4849 = 1058			adr.DIRECTION	= CODEORIGIN+$004A
  4850 2BF9			.var DIRECTION	= adr.DIRECTION .word
  4851 = FD30			KEYSCAN	= $FD30
  4852 = FF08			JOY	= $FF08
  4853 = FF12			RAMROMSEL	= $FF12
  4854 = FF13			CHBAS	= $FF13
  4855 = FF15			BACKGROUND	= $FF15
  4856 = FF19			BOREDER	= $FF19
  4857 = 0058			T0B	= $58
  4858 = 0059			I0B	= $59
  4859 = 005A			ALIVE	= $5A
  4860 = 005B			NEWDIR	= $5B
  4861 = 005C			AVAILDIR	= $5C
  4862 = 005D			JOYSTATUS	= $5D
  4863 = 005E			T0W	= $5E
  4864 = 0070			adr.PLY	= $70
  4865 2BF9			.var PLY	= adr.PLY .word
  4866 = 2C10			PLY.X	= DATAORIGIN+$0000
  4867 = 2C11			PLY.Y	= DATAORIGIN+$0001
  4868 = 2C12			PLY.HEAD	= DATAORIGIN+$0002
  4869 = 2C13			PLY.COLOUR	= DATAORIGIN+$0003
  4870 = 2C14			PLY.DIR	= DATAORIGIN+$0004
  4871 = 2C15			PLY.BRAIN	= DATAORIGIN+$0005
  4872 = 2C16			PLY.SCORE	= DATAORIGIN+$0006
  4873 = 2C17			PLY.ISALIVE	= DATAORIGIN+$0007
  4874 = 0072			adr.TMPPLY	= $72
  4875 2BF9			.var TMPPLY	= adr.TMPPLY .word
  4876 = 2C10			TMPPLY.X	= DATAORIGIN+$0000
  4877 = 2C11			TMPPLY.Y	= DATAORIGIN+$0001
  4878 = 2C12			TMPPLY.HEAD	= DATAORIGIN+$0002
  4879 = 2C13			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4880 = 2C14			TMPPLY.DIR	= DATAORIGIN+$0004
  4881 = 2C15			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4882 = 2C16			TMPPLY.SCORE	= DATAORIGIN+$0006
  4883 = 2C17			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4884 = 0060			adr.OBSTACLES	= $60
  4885 2BF9			.var OBSTACLES	= adr.OBSTACLES .word
  4886 = 2C20			LEVEL	= DATAORIGIN+$0010
  4887 = 2C21			GAMEOVER	= DATAORIGIN+$0011
  4888 = 2C22			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4889 2BF9			.var PLAYER1	= adr.PLAYER1 .word
  4890 = 2C22			PLAYER1.X	= DATAORIGIN+$0012
  4891 = 2C23			PLAYER1.Y	= DATAORIGIN+$0013
  4892 = 2C24			PLAYER1.HEAD	= DATAORIGIN+$0014
  4893 = 2C25			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4894 = 2C26			PLAYER1.DIR	= DATAORIGIN+$0016
  4895 = 2C27			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4896 = 2C28			PLAYER1.SCORE	= DATAORIGIN+$0018
  4897 = 2C29			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4898 = 2C2A			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4899 2BF9			.var PLAYER2	= adr.PLAYER2 .word
  4900 = 2C2A			PLAYER2.X	= DATAORIGIN+$001A
  4901 = 2C2B			PLAYER2.Y	= DATAORIGIN+$001B
  4902 = 2C2C			PLAYER2.HEAD	= DATAORIGIN+$001C
  4903 = 2C2D			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4904 = 2C2E			PLAYER2.DIR	= DATAORIGIN+$001E
  4905 = 2C2F			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4906 = 2C30			PLAYER2.SCORE	= DATAORIGIN+$0020
  4907 = 2C31			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4908 = 2C32			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4909 2BF9			.var PLAYER3	= adr.PLAYER3 .word
  4910 = 2C32			PLAYER3.X	= DATAORIGIN+$0022
  4911 = 2C33			PLAYER3.Y	= DATAORIGIN+$0023
  4912 = 2C34			PLAYER3.HEAD	= DATAORIGIN+$0024
  4913 = 2C35			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4914 = 2C36			PLAYER3.DIR	= DATAORIGIN+$0026
  4915 = 2C37			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4916 = 2C38			PLAYER3.SCORE	= DATAORIGIN+$0028
  4917 = 2C39			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4918 = 2C3A			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4919 2BF9			.var PLAYER4	= adr.PLAYER4 .word
  4920 = 2C3A			PLAYER4.X	= DATAORIGIN+$002A
  4921 = 2C3B			PLAYER4.Y	= DATAORIGIN+$002B
  4922 = 2C3C			PLAYER4.HEAD	= DATAORIGIN+$002C
  4923 = 2C3D			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4924 = 2C3E			PLAYER4.DIR	= DATAORIGIN+$002E
  4925 = 2C3F			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4926 = 2C40			PLAYER4.SCORE	= DATAORIGIN+$0030
  4927 = 2C41			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4928 2BF9			@exit
  4929
  4930 2BF9 A2 00		@halt	ldx #$00
  4931 2BFB 9A				txs
  4932
  4933 2BFC 60				rts
  4934
  4935 				; ------------------------------------------------------------
  4936
  4937 				; ------------------------------------------------------------
  4938
  4939 2BFD			.local	@DEFINES
  4940 2BFD			C4P
  4941 				.endl
  4942
  4943 2BFD			.local	@RESOURCE
  4944 				.endl
  4945
  4946 = 2BFD 26 10		MUL40
  4946 = 2BFF 58 10		DIRECTION
  4946 = 2C01 70 00		PLY
  4946 = 2C03 72 00		TMPPLY
  4946 = 2C05 60 00		OBSTACLES
  4946 = 2C07 22 2C		PLAYER1
  4946 = 2C09 2A 2C		PLAYER2
  4946 = 2C0B 32 2C		PLAYER3
  4946 = 2C0D 3A 2C		PLAYER4
  4946 				.endl							; MAIN
  4947
  4948 				; ------------------------------------------------------------
  4949 				; ------------------------------------------------------------
  4950
  4951 				.macro	UNITINITIALIZATION
  4952 				
  4953 					.ifdef MAIN.SYSTEM.@UnitInit
  4954 					jsr MAIN.SYSTEM.@UnitInit
  4955 					eif
  4956 				.endm
  4957
  4958 				; ------------------------------------------------------------
  4959
  4960 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4961 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4961 				SYSTEM: $1156..$1200
  4962 					eif
  4963
  4964 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4964 				CODE: $100E..$2BFC
  4965
  4966 				; ------------------------------------------------------------
  4967
  4968 2C0F				.align $04
  4969
  4970 2C10			DATAORIGIN
  4971 2C10 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4972 2C28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4973 2C40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4974 2C58 00 05 06 09 12 05 + .by  $00 $05 $06 $09 $12 $05 $21 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4975 2C70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4976 2C88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4977 2CA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4978 2CB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4979 2CD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4980 2CE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4981 2D00 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4982 2D18 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4983 2D30 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4984 2D48 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $07 $17 $09 $0E $0E $05 $12
  4985 2D60 21 00 00 00 00 00 + .by  $21 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4986 2D78 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4987 2D90 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4988 2DA8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4989 2DC0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4990 2DD8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4991 2DF0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4992 2E08 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4993 2E20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4994 2E38 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4995 2E50 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $06 $0C $0F $13 $05 $12 $21  $00 $00 $00 $00 $00 $00 $00 $00
  4996 2E68 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4997 2E80 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4998 2E98 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4999 2EB0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5000 2EC8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5001 2EE0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5002 2EF8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5003 2F10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5004 2F28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5005 2F40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5006 2F58 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5007 2F70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5008 2F88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5009 2FA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5010 2FB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5011 2FD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5012 2FE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5013 3000 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5014 3018 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5015 3030 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5016 3048 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $18 $18 $24 $24 $24
  5017 3060 3C 66 5A 00 03 3E + .by  $3C $66 $5A $00 $03 $3E $C5 $C5  $3E $03 $00 $00 $C0 $7C $A3 $A3  $7C $C0 $00 $5A $66 $3C $24 $24
  5018 3078 24 18 18 00 3C 6E + .by  $24 $18 $18 $00 $3C $6E $62 $46  $76 $3C $00 $00 $3C $76 $46 $62  $6E $3C
  5019
  5020 = 047A			VARINITSIZE	= *-DATAORIGIN
  5021 = 0485			VARDATASIZE	= 1157
  5022
  5023 = 3095			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  5024
  5025 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  5025 				DATA: $2C10..$3095
  5026
  5027 				; ------------------------------------------------------------
  5028
  5029 				.macro	STATICDATA
  5030 				.by  $05 $06 $09 $12 $05 $21 $00 $07  $17 $09 $0E $0E $05 $12 $21 $00  $06 $0C $0F $13 $05 $12 $21 $00
  5031 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  5032 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  5033 				.by  $C0 $03 $01 $02 $04 $08
  5034 				.endm
  5035
  5036 					end
