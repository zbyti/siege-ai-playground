mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E B4 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0060			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AD2			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A0			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 32 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 32 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 4C 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D D7 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD D7 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AD7			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AD7			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD D8 2A		loop  lda n
   325 112D 0D D9 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD D8 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AD8			N	= DATAORIGIN+$000C
   339
   340 = 2AD8			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D DA 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD DA 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C DB 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD DB 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2ADA			RANGE	= DATAORIGIN+$000E
   401 = 2ADB			RESULT	= DATAORIGIN+$000F
   402
   403 = 2ADA			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2ACC			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2ACE			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AD0			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AD1			FILEMODE	= DATAORIGIN+$0005
   468 = 2AD2			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AD3			IORESULT	= DATAORIGIN+$0007
   470 = 2AD4			EOLN	= DATAORIGIN+$0008
   471 = 2AD5			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 0F 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 0E 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 10 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B0E			X	= DATAORIGIN+$0042
   497 = 2B0F			Y	= DATAORIGIN+$0043
   498 = 2B10			V	= DATAORIGIN+$0044
   499
   500 = 2B0E			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 12 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 11 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 14 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 13 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B11			X	= DATAORIGIN+$0045
   544 = 2B12			Y	= DATAORIGIN+$0046
   545 = 2B13			V	= DATAORIGIN+$0047
   546 = 2B14			C	= DATAORIGIN+$0048
   547
   548 = 2B11			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 16 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 15 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 17 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 17 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B15			X	= DATAORIGIN+$0049
   604 = 2B16			Y	= DATAORIGIN+$004A
   605 = 2B17			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B15			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD E5 2A			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD E1 2A			lda PLAYER1.COLOUR
   620 11F1 8D 14 2B			sta PUTCHAR_008E.C
   621 11F4 AD E4 2A			lda PLAYER1.SCORE
   622 11F7 8D 13 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 12 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 11 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD ED 2A			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD E9 2A			lda PLAYER2.COLOUR
   635 120F 8D 14 2B			sta PUTCHAR_008E.C
   636 1212 AD EC 2A			lda PLAYER2.SCORE
   637 1215 8D 13 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 12 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 11 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD F5 2A			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD F1 2A			lda PLAYER3.COLOUR
   650 122D 8D 14 2B			sta PUTCHAR_008E.C
   651 1230 AD F4 2A			lda PLAYER3.SCORE
   652 1233 8D 13 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 12 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 11 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD FD 2A			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD F9 2A			lda PLAYER4.COLOUR
   665 124B 8D 14 2B			sta PUTCHAR_008E.C
   666 124E AD FC 2A			lda PLAYER4.SCORE
   667 1251 8D 13 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 12 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 11 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 AD E5 2A			lda PLAYER1.ISALIVE
   691 1265 F0 03			jeq l_0146
   692 1267 EE E4 2A			inc PLAYER1.SCORE
   693 126A			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 126A AD ED 2A			lda PLAYER2.ISALIVE
   698 126D F0 03			jeq l_0159
   699 126F EE EC 2A			inc PLAYER2.SCORE
   700 1272			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 1272 AD F5 2A			lda PLAYER3.ISALIVE
   705 1275 F0 03			jeq l_016C
   706 1277 EE F4 2A			inc PLAYER3.SCORE
   707 127A			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 127A AD FD 2A			lda PLAYER4.ISALIVE
   712 127D F0 03			jeq l_017F
   713 127F EE FC 2A			inc PLAYER4.SCORE
   714 1282			l_017F
   715 1282			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 1282 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 1283			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 1283 A9 00			lda #$00
   732 1285 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1287 AC BB 2A 84 12 AC + 	mwy PLY :bp2
   737 1291 A0 01			ldy #PLY.Y-DATAORIGIN
   738 1293 B1 12			lda (:bp2),y
   739 1295 0A				asl @
   740 1296 A8				tay
   741 1297 A9 00			lda #$00
   742 1299 18 79 0E 10			add adr.MUL40,y
   743 129D 85 21			sta :STACKORIGIN+9
   744 129F A9 0C			lda #$0C
   745 12A1 79 0F 10			adc adr.MUL40+1,y
   746 12A4 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 12A6 A0 00			ldy #PLY.X-DATAORIGIN
   748 12A8 A5 21			lda :STACKORIGIN+9
   749 12AA 18 71 12			add (:bp2),y
   750 12AD 85 5D			sta T0W
   751 12AF A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 12B1 69 00			adc #$00
   753 12B3 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 12B5 A5 5D			lda T0W
   758 12B7 38 E9 28			sub #$28
   759 12BA 85 21			sta :STACKORIGIN+9
   760 12BC A5 5E			lda T0W+1
   761 12BE E9 00			sbc #$00
   762 12C0 85 11			sta :bp+1
   763 12C2 A4 21			ldy :STACKORIGIN+9
   764 12C4 B1 10			lda (:bp),y
   765 12C6 C9 20			cmp #$20
   766 12C8 D0 06			jne l_01B6
   767 12CA A5 5C			lda AVAILDIR
   768 12CC 09 01			ora #$01
   769 12CE 85 5C			sta AVAILDIR
   770 12D0			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12D0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12D8 A0 28			ldy #$28
   776 12DA B1 12			lda (:bp2),y
   777 12DC C9 20			cmp #$20
   778 12DE D0 06			jne l_01D9
   779 12E0 A5 5C			lda AVAILDIR
   780 12E2 09 02			ora #$02
   781 12E4 85 5C			sta AVAILDIR
   782 12E6			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12E6 A5 5D			lda T0W
   787 12E8 38 E9 01			sub #$01
   788 12EB 85 21			sta :STACKORIGIN+9
   789 12ED A5 5E			lda T0W+1
   790 12EF E9 00			sbc #$00
   791 12F1 85 11			sta :bp+1
   792 12F3 A4 21			ldy :STACKORIGIN+9
   793 12F5 B1 10			lda (:bp),y
   794 12F7 C9 20			cmp #$20
   795 12F9 D0 06			jne l_01FC
   796 12FB A5 5C			lda AVAILDIR
   797 12FD 09 04			ora #$04
   798 12FF 85 5C			sta AVAILDIR
   799 1301			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 1301 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 1309 A0 01			ldy #$01
   805 130B B1 12			lda (:bp2),y
   806 130D C9 20			cmp #$20
   807 130F D0 06			jne l_021F
   808 1311 A5 5C			lda AVAILDIR
   809 1313 09 08			ora #$08
   810 1315 85 5C			sta AVAILDIR
   811 1317			l_021F
   812 1317			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1317 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1318			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1318 EE 18 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 131B AD 18 2B			lda COUNTER
   833 131E 29 01			and #$01
   834 1320 F0 08			jeq l_024A
   835 1322 A9 56			lda #$56
   836 1324 8D 19 2B			sta OBST
   837 1327 4C 2F 13			jmp l_0258
   838 132A			l_024A
   839 132A A9 5B			lda #$5B
   840 132C 8D 19 2B			sta OBST
   841 132F			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 132F A9 07			lda #$07
   846 1331 85 59			sta I0B
   847
   848 1333			l_0265
   849 				; --- ForToDoCondition
   850 1333 A5 59			lda I0B
   851 1335 0A				asl @
   852 1336 A8				tay
   853 1337 B9 FE 2A			lda adr.OBSTACLES,y
   854 133A 85 21			sta :STACKORIGIN+9
   855 133C B9 FF 2A			lda adr.OBSTACLES+1,y
   856 133F 85 11			sta :bp+1
   857 1341 A4 21			ldy :STACKORIGIN+9
   858 1343 AD 19 2B			lda OBST
   859 1346 91 10			sta (:bp),y
   860 1348 C6 59			dec I0B
   861 134A 10 E7			jpl l_0265
   862 134C			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B18			COUNTER	= DATAORIGIN+$004C
   867 = 2B19			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B18			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 134C			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 134C 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 134D			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 134D AD 1B 2B			lda Y
   890 1350 0A				asl @
   891 1351 A8				tay
   892 1352 AD 1A 2B			lda X
   893 1355 18 79 0E 10			add adr.MUL40,y
   894 1359 8D 1C 2B			sta RESULT
   895 135C A9 0C			lda #$0C
   896 135E 79 0F 10			adc adr.MUL40+1,y
   897 1361 8D 1D 2B			sta RESULT+1
   898 1364			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 1364 E8				inx
   906 1365 AD 1C 2B 95 18		mva RESULT :STACKORIGIN,x
   907 136A AD 1D 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B1A			X	= DATAORIGIN+$004E
   920 = 2B1B			Y	= DATAORIGIN+$004F
   921 = 2B1C			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B1A			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 136F 60				rts						; ret
   927 				.endl
   928
   929 1370			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1370 A9 07			lda #$07
   934 1372 85 59			sta I0B
   935
   936 1374			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 1374 A5 59			lda I0B
   942 1376 0A				asl @
   943 1377 A8				tay
   944 1378 B9 FF 2A			lda adr.OBSTACLES+1,y
   945 137B C9 00			cmp #$00
   946 137D D0 05			bne @+
   947 137F B9 FE 2A			lda adr.OBSTACLES,y
   948 1382 C9 7E			cmp #$7E
   949 1384			@
   950 1384 F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 1386 B9 FE 2A			lda adr.OBSTACLES,y
   955 1389 85 21			sta :STACKORIGIN+9
   956 138B B9 FF 2A			lda adr.OBSTACLES+1,y
   957 138E 85 11			sta :bp+1
   958 1390 A4 21			ldy :STACKORIGIN+9
   959 1392 A9 56			lda #$56
   960 1394 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 1396 A5 59			lda I0B
   965 1398 0A				asl @
   966 1399 A8				tay
   967 139A B9 FE 2A			lda adr.OBSTACLES,y
   968 139D 38 E9 00			sub #$00
   969 13A0 85 21			sta :STACKORIGIN+9
   970 13A2 B9 FF 2A			lda adr.OBSTACLES+1,y
   971 13A5 E9 04			sbc #$04
   972 13A7 85 11			sta :bp+1
   973 13A9 A4 21			ldy :STACKORIGIN+9
   974 13AB A9 35			lda #$35
   975 13AD 91 10			sta (:bp),y
   976 13AF			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 13AF C6 59			dec I0B
   980 13B1 10 C1			jpl l_02A6
   981 13B3			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 13B3			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 13B3 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 13B4			.local	DRAWTAIL					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 13B4 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1003 13BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13C0 B1 12			lda (:bp2),y
  1005 13C2 C5 5B			cmp NEWDIR
  1006 13C4 D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13C6 A5 5B			lda NEWDIR
  1011 13C8 29 0C			and #$0C
  1012 13CA F0 07			jeq l_0311
  1013 13CC A9 40			lda #$40
  1014 13CE 85 58			sta T0B
  1015 13D0 4C D7 13			jmp l_031F
  1016 13D3			l_0311
  1017 13D3 A9 42			lda #$42
  1018 13D5 85 58			sta T0B
  1019 13D7			l_031F
  1020 13D7 4C 4A 14			jmp l_032C
  1021 13DA			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13DA AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1026 13E4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13E6 B1 12			lda (:bp2),y
  1028 13E8 29 0A			and #$0A
  1029 13EA F0 0A			jeq l_0352
  1030 13EC A5 5B			lda NEWDIR
  1031 13EE 29 05			and #$05
  1032 13F0 F0 04			jeq l_0352
  1033 13F2 A9 7D			lda #$7D
  1034 13F4 85 58			sta T0B
  1035 13F6			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13F6 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1040 1400 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 1402 B1 12			lda (:bp2),y
  1042 1404 29 09			and #$09
  1043 1406 F0 0A			jeq l_037F
  1044 1408 A5 5B			lda NEWDIR
  1045 140A 29 06			and #$06
  1046 140C F0 04			jeq l_037F
  1047 140E A9 6E			lda #$6E
  1048 1410 85 58			sta T0B
  1049 1412			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 1412 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1054 141C A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 141E B1 12			lda (:bp2),y
  1056 1420 29 06			and #$06
  1057 1422 F0 0A			jeq l_03AC
  1058 1424 A5 5B			lda NEWDIR
  1059 1426 29 09			and #$09
  1060 1428 F0 04			jeq l_03AC
  1061 142A A9 6D			lda #$6D
  1062 142C 85 58			sta T0B
  1063 142E			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 142E AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1068 1438 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 143A B1 12			lda (:bp2),y
  1070 143C 29 05			and #$05
  1071 143E F0 0A			jeq l_03D9
  1072 1440 A5 5B			lda NEWDIR
  1073 1442 29 0A			and #$0A
  1074 1444 F0 04			jeq l_03D9
  1075 1446 A9 70			lda #$70
  1076 1448 85 58			sta T0B
  1077 144A			l_03D9
  1078 144A			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 100
  1081
  1082 144A AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1083 1454 A0 00			ldy #PLY.X-DATAORIGIN
  1084 1456 B1 12			lda (:bp2),y
  1085 1458 8D 15 2B			sta GETCHAR.X
  1086 145B A0 01			ldy #PLY.Y-DATAORIGIN
  1087 145D B1 12			lda (:bp2),y
  1088 145F 8D 16 2B			sta GETCHAR.Y
  1089 1462 20 C4 11			jsr GETCHAR
  1090 1465 CA				dex
  1091 1466 B5 19			lda :STACKORIGIN+1,x
  1092 1468 C9 2A			cmp #$2A
  1093 146A F0 20			jeq l_03F6
  1094 146C			@
  1095 146C AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1096 1476 A0 00			ldy #PLY.X-DATAORIGIN
  1097 1478 B1 12			lda (:bp2),y
  1098 147A 8D 0E 2B			sta PUTCHAR_0072.X
  1099 147D A0 01			ldy #PLY.Y-DATAORIGIN
  1100 147F B1 12			lda (:bp2),y
  1101 1481 8D 0F 2B			sta PUTCHAR_0072.Y
  1102 1484 A5 58			lda T0B
  1103 1486 8D 10 2B			sta PUTCHAR_0072.V
  1104 1489 20 78 11			jsr PUTCHAR_0072
  1105 148C			l_03F6
  1106 148C			@exit
  1107 					.ifdef @new
  1108 					lda <@VarData
  1109 					sta :ztmp
  1110 					lda >@VarData
  1111 					ldy #@VarDataSize-1
  1112 					jmp @FreeMem
  1113 					els
  1114 148C 60				rts						; ret
  1115 					eif
  1116 				.endl
  1117
  1118 148D			.local	CHECKJOYSTATUS					; PROCEDURE
  1119
  1120 				; optimize OK (tools.inc), line = 107
  1121
  1122 148D A9 02			lda #$02
  1123 148F 8D 08 FF			sta JOY
  1124 1492 A9 FF			lda #$FF
  1125 1494 8D 30 FD			sta KEYSCAN
  1126
  1127 				; optimize OK (tools.inc), line = 108
  1128
  1129 1497 AD 08 FF			lda JOY
  1130 149A 49 FF			eor #$FF
  1131 149C 85 63			sta JOYSTATUS
  1132 149E			@exit
  1133 					.ifdef @new
  1134 					lda <@VarData
  1135 					sta :ztmp
  1136 					lda >@VarData
  1137 					ldy #@VarDataSize-1
  1138 					jmp @FreeMem
  1139 					els
  1140 149E 60				rts						; ret
  1141 					eif
  1142 				.endl
  1143
  1144 149F			.local	SETPLAYER					; PROCEDURE
  1145
  1146 				; optimize OK (tools.inc), line = 115
  1147
  1148 149F AD 1E 2B			lda P
  1149 14A2 8D BB 2A			sta PLY
  1150 14A5 85 12			sta :bp2
  1151 14A7 AD 1F 2B			lda P+1
  1152 14AA 8D BC 2A			sta PLY+1
  1153 14AD 85 13			sta :bp2+1
  1154 				; optimize OK (tools.inc), line = 116
  1155 14AF A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1156 14B1 AD 23 2B			lda BRAIN
  1157 14B4 91 12			sta (:bp2),y
  1158 14B6 A0 00			ldy #PLY.X-DATAORIGIN
  1159 14B8 AD 20 2B			lda X
  1160 14BB 91 12			sta (:bp2),y
  1161 14BD A0 01			ldy #PLY.Y-DATAORIGIN
  1162 14BF AD 21 2B			lda Y
  1163 14C2 91 12			sta (:bp2),y
  1164 14C4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1165 14C6 AD 22 2B			lda DIR
  1166 14C9 91 12			sta (:bp2),y
  1167
  1168 				; optimize OK (tools.inc), line = 117
  1169
  1170 14CB A0 02			ldy #PLY.HEAD-DATAORIGIN
  1171 14CD AD 24 2B			lda HEAD
  1172 14D0 91 12			sta (:bp2),y
  1173 14D2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1174 14D4 AD 25 2B			lda COLOUR
  1175 14D7 91 12			sta (:bp2),y
  1176 14D9 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1177 14DB AD 26 2B			lda ISALIVE
  1178 14DE 91 12			sta (:bp2),y
  1179
  1180 				; optimize OK (tools.inc), line = 118
  1181
  1182 14E0 AD 26 2B			lda ISALIVE
  1183 14E3 F0 1D			jeq l_0458
  1184
  1185 				; optimize FAIL (0, tools.inc), line = 119
  1186
  1187 14E5 E6 5A			inc ALIVE
  1188 14E7 AD 25 2B			lda COLOUR
  1189 14EA 8D 14 2B			sta PUTCHAR_008E.C
  1190 14ED AD 24 2B			lda HEAD
  1191 14F0 8D 13 2B			sta PUTCHAR_008E.V
  1192 14F3 AD 21 2B			lda Y
  1193 14F6 8D 12 2B			sta PUTCHAR_008E.Y
  1194 14F9 AD 20 2B			lda X
  1195 14FC 8D 11 2B			sta PUTCHAR_008E.X
  1196 14FF 20 99 11			jsr PUTCHAR_008E
  1197 1502			l_0458
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 = 2B1E			P	= DATAORIGIN+$0052
  1202 = 2B20			X	= DATAORIGIN+$0054
  1203 = 2B21			Y	= DATAORIGIN+$0055
  1204 = 2B22			DIR	= DATAORIGIN+$0056
  1205 = 2B23			BRAIN	= DATAORIGIN+$0057
  1206 = 2B24			HEAD	= DATAORIGIN+$0058
  1207 = 2B25			COLOUR	= DATAORIGIN+$0059
  1208 = 2B26			ISALIVE	= DATAORIGIN+$005A
  1209
  1210 = 2B1E			@VarData	= P
  1211 = 0009			@VarDataSize	= 9
  1212
  1213 1502			@exit
  1214 					.ifdef @new
  1215 					lda <@VarData
  1216 					sta :ztmp
  1217 					lda >@VarData
  1218 					ldy #@VarDataSize-1
  1219 					jmp @FreeMem
  1220 					els
  1221 1502 60				rts						; ret
  1222 					eif
  1223 				.endl
  1224
  1225 1503			.local	AISTRAIGHT					; PROCEDURE
  1226
  1227 				; optimize OK (ai.inc), line = 5
  1228
  1229 1503 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1230 150D A0 04			ldy #PLY.DIR-DATAORIGIN
  1231 150F B1 12			lda (:bp2),y
  1232 1511 25 5C			and AVAILDIR
  1233 1513 F0 07			jeq l_0488
  1234 1515 B1 12			lda (:bp2),y
  1235 1517 85 5B			sta NEWDIR
  1236 1519 4C 87 15			jmp l_0498
  1237 151C			l_0488
  1238
  1239 				; optimize OK (ai.inc), line = 7
  1240
  1241 151C A5 5C			lda AVAILDIR
  1242 151E C9 03			cmp #$03
  1243 1520 D0 10			jne l_04AA
  1244 1522 A9 02			lda #$02
  1245 1524 20 47 11			jsr SYSTEM.RANDOM_006D
  1246 1527 B4 18			ldy :STACKORIGIN,x
  1247 1529 B9 40 10			lda adr.DIRECTION,y
  1248 152C 85 5B			sta NEWDIR
  1249 152E CA				dex
  1250 152F 4C 4A 15			jmp l_04BC
  1251 1532			l_04AA
  1252
  1253 				; optimize OK (ai.inc), line = 9
  1254
  1255 1532 A5 5C			lda AVAILDIR
  1256 1534 8D 27 2B			sta @CASETMP_0003
  1257 1537 C9 01			cmp #$01
  1258 1539 D0 07			jne l_04C7
  1259 153B			@
  1260
  1261 				; optimize OK (ai.inc), line = 10
  1262
  1263 153B A9 01			lda #$01
  1264 153D 85 5B			sta NEWDIR
  1265
  1266 153F 4C 4A 15			jmp a_0003
  1267 1542			l_04C7
  1268 1542 C9 02			cmp #$02
  1269 1544 D0 04			jne l_04D4
  1270 1546			@
  1271
  1272 				; optimize OK (ai.inc), line = 11
  1273
  1274 1546 A9 02			lda #$02
  1275 1548 85 5B			sta NEWDIR
  1276
  1277 154A			l_04D4
  1278 154A			a_0003
  1279 154A			l_04BC
  1280
  1281 				; optimize OK (ai.inc), line = 14
  1282
  1283 154A A5 5C			lda AVAILDIR
  1284 154C C9 0C			cmp #$0C
  1285 154E D0 1F			jne l_04F0
  1286 1550 A9 02			lda #$02
  1287 1552 20 47 11			jsr SYSTEM.RANDOM_006D
  1288 1555 E8				inx
  1289 1556 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1290 155A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1291 155E 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1292 1560 20 44 10			jsr addAX_CX
  1293 1563 CA				dex
  1294 1564 B4 18			ldy :STACKORIGIN,x
  1295 1566 B9 40 10			lda adr.DIRECTION,y
  1296 1569 85 5B			sta NEWDIR
  1297 156B CA				dex
  1298 156C 4C 87 15			jmp l_0506
  1299 156F			l_04F0
  1300
  1301 				; optimize OK (ai.inc), line = 16
  1302
  1303 156F A5 5C			lda AVAILDIR
  1304 1571 8D 28 2B			sta @CASETMP_0004
  1305 1574 C9 04			cmp #$04
  1306 1576 D0 07			jne l_0511
  1307 1578			@
  1308
  1309 				; optimize OK (ai.inc), line = 17
  1310
  1311 1578 A9 04			lda #$04
  1312 157A 85 5B			sta NEWDIR
  1313
  1314 157C 4C 87 15			jmp a_0004
  1315 157F			l_0511
  1316 157F C9 08			cmp #$08
  1317 1581 D0 04			jne l_051E
  1318 1583			@
  1319
  1320 				; optimize OK (ai.inc), line = 18
  1321
  1322 1583 A9 08			lda #$08
  1323 1585 85 5B			sta NEWDIR
  1324
  1325 1587			l_051E
  1326 1587			a_0004
  1327 1587			l_0506
  1328 1587			l_0498
  1329
  1330 				; ------------------------------------------------------------
  1331
  1332 = 2B27			@CASETMP_0003	= DATAORIGIN+$005B
  1333 = 2B28			@CASETMP_0004	= DATAORIGIN+$005C
  1334
  1335 = 2B27			@VarData	= @CASETMP_0003
  1336 = 0002			@VarDataSize	= 2
  1337
  1338 1587			@exit
  1339 					.ifdef @new
  1340 					lda <@VarData
  1341 					sta :ztmp
  1342 					lda >@VarData
  1343 					ldy #@VarDataSize-1
  1344 					jmp @FreeMem
  1345 					els
  1346 1587 60				rts						; ret
  1347 					eif
  1348 				.endl
  1349
  1350 1588			.local	AISAPPER					; PROCEDURE
  1351
  1352 				; optimize OK (ai.inc), line = 31
  1353
  1354 1588 A9 00			lda #$00
  1355 158A 8D 29 2B			sta L
  1356 158D 8D 2A 2B			sta R
  1357 1590 8D 2B 2B			sta U
  1358 1593 8D 2C 2B			sta D
  1359
  1360 				; optimize OK (ai.inc), line = 32
  1361
  1362 1596 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1363 15A0 A0 01			ldy #PLY.Y-DATAORIGIN
  1364 15A2 B1 12			lda (:bp2),y
  1365 15A4 0A				asl @
  1366 15A5 A8				tay
  1367 15A6 A9 00			lda #$00
  1368 15A8 18 79 0E 10			add adr.MUL40,y
  1369 15AC 85 21			sta :STACKORIGIN+9
  1370 15AE A9 0C			lda #$0C
  1371 15B0 79 0F 10			adc adr.MUL40+1,y
  1372 15B3 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1373 15B5 A0 00			ldy #PLY.X-DATAORIGIN
  1374 15B7 A5 21			lda :STACKORIGIN+9
  1375 15B9 18 71 12			add (:bp2),y
  1376 15BC 85 5D			sta T0W
  1377 15BE A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1378 15C0 69 00			adc #$00
  1379 15C2 85 5E			sta T0W+1
  1380
  1381 				; optimize OK (ai.inc), line = 34
  1382
  1383 15C4 A5 5C			lda AVAILDIR
  1384 15C6 29 01			and #$01
  1385 15C8 F0 73			jeq l_0564
  1386
  1387 				; optimize OK (ai.inc), line = 35
  1388
  1389 15CA A9 05			lda #$05
  1390 15CC 85 59			sta I0B
  1391
  1392 15CE			l_056E
  1393 				; --- ForToDoCondition
  1394 15CE A5 59			lda I0B
  1395 15D0 C9 01			cmp #$01
  1396 15D2 90 69			jcc l_057C
  1397
  1398 				; optimize OK (ai.inc), line = 36
  1399
  1400 15D4 0A				asl @
  1401 15D5 A8				tay
  1402 15D6 A5 5D			lda T0W
  1403 15D8 38 F9 0E 10			sub adr.MUL40,y
  1404 15DC 85 21			sta :STACKORIGIN+9
  1405 15DE A5 5E			lda T0W+1
  1406 15E0 F9 0F 10			sbc adr.MUL40+1,y
  1407 15E3 85 11			sta :bp+1
  1408 15E5 A4 21			ldy :STACKORIGIN+9
  1409 15E7 B1 10			lda (:bp),y
  1410 15E9 C9 20			cmp #$20
  1411 15EB D0 03			jne l_0596
  1412 15ED EE 2B 2B			inc U
  1413 15F0			l_0596
  1414
  1415 				; optimize OK (ai.inc), line = 37
  1416
  1417 15F0 A5 59			lda I0B
  1418 15F2 0A				asl @
  1419 15F3 A8				tay
  1420 15F4 A5 5D			lda T0W
  1421 15F6 38 F9 0E 10			sub adr.MUL40,y
  1422 15FA 85 21			sta :STACKORIGIN+9
  1423 15FC A5 5E			lda T0W+1
  1424 15FE F9 0F 10			sbc adr.MUL40+1,y
  1425 1601 85 11			sta :bp+1
  1426 1603 A5 21			lda :STACKORIGIN+9
  1427 1605 18 69 01			add #$01
  1428 1608 A8				tay
  1429 1609 90 02			scc
  1430 160B E6 11			inc :bp+1
  1431 160D B1 10			lda (:bp),y
  1432 160F C9 20			cmp #$20
  1433 1611 D0 03			jne l_05BB
  1434 1613 EE 2B 2B			inc U
  1435 1616			l_05BB
  1436
  1437 				; optimize OK (ai.inc), line = 38
  1438
  1439 1616 A5 59			lda I0B
  1440 1618 0A				asl @
  1441 1619 A8				tay
  1442 161A A5 5D			lda T0W
  1443 161C 38 F9 0E 10			sub adr.MUL40,y
  1444 1620 85 21			sta :STACKORIGIN+9
  1445 1622 A5 5E			lda T0W+1
  1446 1624 F9 0F 10			sbc adr.MUL40+1,y
  1447 1627 85 11			sta :bp+1
  1448 1629 A4 21			ldy :STACKORIGIN+9
  1449 162B 88				dey
  1450 162C B0 02			scs
  1451 162E C6 11			dec :bp+1
  1452 1630 B1 10			lda (:bp),y
  1453 1632 C9 20			cmp #$20
  1454 1634 D0 03			jne l_05E0
  1455 1636 EE 2B 2B			inc U
  1456 1639			l_05E0
  1457
  1458 				; --- ForToDoEpilog
  1459 1639 C6 59			dec I0B
  1460 163B 10 91			jpl l_056E
  1461 163D			l_057C
  1462 163D			l_0564
  1463
  1464 				; optimize OK (ai.inc), line = 42
  1465
  1466 163D A5 5C			lda AVAILDIR
  1467 163F 29 02			and #$02
  1468 1641 F0 73			jeq l_0604
  1469
  1470 				; optimize OK (ai.inc), line = 43
  1471
  1472 1643 A9 05			lda #$05
  1473 1645 85 59			sta I0B
  1474
  1475 1647			l_060E
  1476 				; --- ForToDoCondition
  1477 1647 A5 59			lda I0B
  1478 1649 C9 01			cmp #$01
  1479 164B 90 69			jcc l_061C
  1480
  1481 				; optimize OK (ai.inc), line = 44
  1482
  1483 164D 0A				asl @
  1484 164E A8				tay
  1485 164F A5 5D			lda T0W
  1486 1651 18 79 0E 10			add adr.MUL40,y
  1487 1655 85 21			sta :STACKORIGIN+9
  1488 1657 A5 5E			lda T0W+1
  1489 1659 79 0F 10			adc adr.MUL40+1,y
  1490 165C 85 11			sta :bp+1
  1491 165E A4 21			ldy :STACKORIGIN+9
  1492 1660 B1 10			lda (:bp),y
  1493 1662 C9 20			cmp #$20
  1494 1664 D0 03			jne l_0636
  1495 1666 EE 2C 2B			inc D
  1496 1669			l_0636
  1497
  1498 				; optimize OK (ai.inc), line = 45
  1499
  1500 1669 A5 59			lda I0B
  1501 166B 0A				asl @
  1502 166C A8				tay
  1503 166D A5 5D			lda T0W
  1504 166F 18 79 0E 10			add adr.MUL40,y
  1505 1673 85 21			sta :STACKORIGIN+9
  1506 1675 A5 5E			lda T0W+1
  1507 1677 79 0F 10			adc adr.MUL40+1,y
  1508 167A 85 11			sta :bp+1
  1509 167C A5 21			lda :STACKORIGIN+9
  1510 167E 18 69 01			add #$01
  1511 1681 A8				tay
  1512 1682 90 02			scc
  1513 1684 E6 11			inc :bp+1
  1514 1686 B1 10			lda (:bp),y
  1515 1688 C9 20			cmp #$20
  1516 168A D0 03			jne l_065B
  1517 168C EE 2C 2B			inc D
  1518 168F			l_065B
  1519
  1520 				; optimize OK (ai.inc), line = 46
  1521
  1522 168F A5 59			lda I0B
  1523 1691 0A				asl @
  1524 1692 A8				tay
  1525 1693 A5 5D			lda T0W
  1526 1695 18 79 0E 10			add adr.MUL40,y
  1527 1699 85 21			sta :STACKORIGIN+9
  1528 169B A5 5E			lda T0W+1
  1529 169D 79 0F 10			adc adr.MUL40+1,y
  1530 16A0 85 11			sta :bp+1
  1531 16A2 A4 21			ldy :STACKORIGIN+9
  1532 16A4 88				dey
  1533 16A5 B0 02			scs
  1534 16A7 C6 11			dec :bp+1
  1535 16A9 B1 10			lda (:bp),y
  1536 16AB C9 20			cmp #$20
  1537 16AD D0 03			jne l_0680
  1538 16AF EE 2C 2B			inc D
  1539 16B2			l_0680
  1540
  1541 				; --- ForToDoEpilog
  1542 16B2 C6 59			dec I0B
  1543 16B4 10 91			jpl l_060E
  1544 16B6			l_061C
  1545 16B6			l_0604
  1546
  1547 				; optimize OK (ai.inc), line = 50
  1548
  1549 16B6 A5 5C			lda AVAILDIR
  1550 16B8 29 04			and #$04
  1551 16BA F0 5F			jeq l_06A4
  1552
  1553 				; optimize OK (ai.inc), line = 51
  1554
  1555 16BC A9 05			lda #$05
  1556 16BE 85 59			sta I0B
  1557
  1558 16C0			l_06AE
  1559 				; --- ForToDoCondition
  1560 16C0 A5 59			lda I0B
  1561 16C2 C9 01			cmp #$01
  1562 16C4 90 55			jcc l_06BC
  1563
  1564 				; optimize OK (ai.inc), line = 52
  1565
  1566 16C6 A5 5D			lda T0W
  1567 16C8 38 E5 59			sub I0B
  1568 16CB A8				tay
  1569 16CC A5 5E			lda T0W+1
  1570 16CE E9 00			sbc #$00
  1571 16D0 85 11			sta :bp+1
  1572 16D2 B1 10			lda (:bp),y
  1573 16D4 C9 20			cmp #$20
  1574 16D6 D0 03			jne l_06D4
  1575 16D8 EE 29 2B			inc L
  1576 16DB			l_06D4
  1577
  1578 				; optimize OK (ai.inc), line = 53
  1579
  1580 16DB A5 5D			lda T0W
  1581 16DD 38 E5 59			sub I0B
  1582 16E0 A8				tay
  1583 16E1 A5 5E			lda T0W+1
  1584 16E3 E9 00			sbc #$00
  1585 16E5 85 11			sta :bp+1
  1586 16E7 98				tya
  1587 16E8 18 69 28			add #$28
  1588 16EB A8				tay
  1589 16EC 90 02			scc
  1590 16EE E6 11			inc :bp+1
  1591 16F0 B1 10			lda (:bp),y
  1592 16F2 C9 20			cmp #$20
  1593 16F4 D0 03			jne l_06F7
  1594 16F6 EE 29 2B			inc L
  1595 16F9			l_06F7
  1596
  1597 				; optimize OK (ai.inc), line = 54
  1598
  1599 16F9 A5 5D			lda T0W
  1600 16FB 38 E5 59			sub I0B
  1601 16FE A8				tay
  1602 16FF A5 5E			lda T0W+1
  1603 1701 E9 00			sbc #$00
  1604 1703 85 11			sta :bp+1
  1605 1705 98				tya
  1606 1706 38 E9 28			sub #$28
  1607 1709 A8				tay
  1608 170A B0 02			scs
  1609 170C C6 11			dec :bp+1
  1610 170E B1 10			lda (:bp),y
  1611 1710 C9 20			cmp #$20
  1612 1712 D0 03			jne l_071A
  1613 1714 EE 29 2B			inc L
  1614 1717			l_071A
  1615
  1616 				; --- ForToDoEpilog
  1617 1717 C6 59			dec I0B
  1618 1719 10 A5			jpl l_06AE
  1619 171B			l_06BC
  1620 171B			l_06A4
  1621
  1622 				; optimize OK (ai.inc), line = 58
  1623
  1624 171B A5 5C			lda AVAILDIR
  1625 171D 29 08			and #$08
  1626 171F F0 5D			jeq l_073E
  1627
  1628 				; optimize OK (ai.inc), line = 59
  1629
  1630 1721 A9 05			lda #$05
  1631 1723 85 59			sta I0B
  1632
  1633 1725			l_0748
  1634 				; --- ForToDoCondition
  1635 1725 A5 59			lda I0B
  1636 1727 C9 01			cmp #$01
  1637 1729 90 53			jcc l_0756
  1638
  1639 				; optimize OK (ai.inc), line = 60
  1640
  1641 172B A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1642 1733 A4 59			ldy I0B
  1643 1735 B1 12			lda (:bp2),y
  1644 1737 C9 20			cmp #$20
  1645 1739 D0 03			jne l_076E
  1646 173B EE 2A 2B			inc R
  1647 173E			l_076E
  1648
  1649 				; optimize OK (ai.inc), line = 61
  1650
  1651 173E A5 5D			lda T0W
  1652 1740 18 65 59			add I0B
  1653 1743 A8				tay
  1654 1744 A5 5E			lda T0W+1
  1655 1746 69 00			adc #$00
  1656 1748 85 11			sta :bp+1
  1657 174A 98				tya
  1658 174B 18 69 28			add #$28
  1659 174E A8				tay
  1660 174F 90 02			scc
  1661 1751 E6 11			inc :bp+1
  1662 1753 B1 10			lda (:bp),y
  1663 1755 C9 20			cmp #$20
  1664 1757 D0 03			jne l_0791
  1665 1759 EE 2A 2B			inc R
  1666 175C			l_0791
  1667
  1668 				; optimize OK (ai.inc), line = 62
  1669
  1670 175C A5 5D			lda T0W
  1671 175E 18 65 59			add I0B
  1672 1761 A8				tay
  1673 1762 A5 5E			lda T0W+1
  1674 1764 69 00			adc #$00
  1675 1766 85 11			sta :bp+1
  1676 1768 98				tya
  1677 1769 38 E9 28			sub #$28
  1678 176C A8				tay
  1679 176D B0 02			scs
  1680 176F C6 11			dec :bp+1
  1681 1771 B1 10			lda (:bp),y
  1682 1773 C9 20			cmp #$20
  1683 1775 D0 03			jne l_07B4
  1684 1777 EE 2A 2B			inc R
  1685 177A			l_07B4
  1686
  1687 				; --- ForToDoEpilog
  1688 177A C6 59			dec I0B
  1689 177C 10 A7			jpl l_0748
  1690 177E			l_0756
  1691 177E			l_073E
  1692
  1693 				; optimize OK (ai.inc), line = 66
  1694
  1695 177E AD 2C 2B			lda D
  1696 1781 85 58			sta T0B
  1697
  1698 				; optimize OK (ai.inc), line = 67
  1699
  1700 1783 CD 2B 2B			cmp U
  1701 1786 B0 05			jcs l_07DC
  1702 1788 AD 2B 2B			lda U
  1703 178B 85 58			sta T0B
  1704 178D			l_07DC
  1705
  1706 				; optimize OK (ai.inc), line = 68
  1707
  1708 178D A5 58			lda T0B
  1709 178F CD 29 2B			cmp L
  1710 1792 B0 05			jcs l_07F9
  1711 1794 AD 29 2B			lda L
  1712 1797 85 58			sta T0B
  1713 1799			l_07F9
  1714
  1715 				; optimize OK (ai.inc), line = 69
  1716
  1717 1799 A5 58			lda T0B
  1718 179B CD 2A 2B			cmp R
  1719 179E B0 05			jcs l_0816
  1720 17A0 AD 2A 2B			lda R
  1721 17A3 85 58			sta T0B
  1722 17A5			l_0816
  1723
  1724 				; optimize OK (ai.inc), line = 71
  1725
  1726 17A5 A5 58			lda T0B
  1727 17A7 CD 2C 2B			cmp D
  1728 17AA D0 04			jne l_0833
  1729 17AC A9 02			lda #$02
  1730 17AE 85 58			sta T0B
  1731 17B0			l_0833
  1732
  1733 				; optimize OK (ai.inc), line = 72
  1734
  1735 17B0 A5 58			lda T0B
  1736 17B2 CD 2B 2B			cmp U
  1737 17B5 D0 04			jne l_084E
  1738 17B7 A9 01			lda #$01
  1739 17B9 85 58			sta T0B
  1740 17BB			l_084E
  1741
  1742 				; optimize OK (ai.inc), line = 73
  1743
  1744 17BB A5 58			lda T0B
  1745 17BD CD 29 2B			cmp L
  1746 17C0 D0 04			jne l_0869
  1747 17C2 A9 04			lda #$04
  1748 17C4 85 58			sta T0B
  1749 17C6			l_0869
  1750
  1751 				; optimize OK (ai.inc), line = 74
  1752
  1753 17C6 A5 58			lda T0B
  1754 17C8 CD 2A 2B			cmp R
  1755 17CB D0 04			jne l_0884
  1756 17CD A9 08			lda #$08
  1757 17CF 85 58			sta T0B
  1758 17D1			l_0884
  1759
  1760 				; optimize OK (ai.inc), line = 76
  1761
  1762 17D1 A5 5C			lda AVAILDIR
  1763 17D3 25 58			and T0B
  1764 17D5 F0 07			jeq l_08A3
  1765 17D7 A5 58			lda T0B
  1766 17D9 85 5B			sta NEWDIR
  1767 17DB 4C E1 17			jmp l_08B3
  1768 17DE			l_08A3
  1769
  1770 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1771
  1772 17DE 20 03 15			jsr AISTRAIGHT
  1773 17E1			l_08B3
  1774
  1775 				; ------------------------------------------------------------
  1776
  1777 = 2B29			L	= DATAORIGIN+$005D
  1778 = 2B2A			R	= DATAORIGIN+$005E
  1779 = 2B2B			U	= DATAORIGIN+$005F
  1780 = 2B2C			D	= DATAORIGIN+$0060
  1781 = 0001			@FORTMP_056B	= $01
  1782 = 0001			@FORTMP_060B	= $01
  1783 = 0001			@FORTMP_06AB	= $01
  1784 = 0001			@FORTMP_0745	= $01
  1785
  1786 = 2B29			@VarData	= L
  1787 = 0004			@VarDataSize	= 4
  1788
  1789 17E1			@exit
  1790 					.ifdef @new
  1791 					lda <@VarData
  1792 					sta :ztmp
  1793 					lda >@VarData
  1794 					ldy #@VarDataSize-1
  1795 					jmp @FreeMem
  1796 					els
  1797 17E1 60				rts						; ret
  1798 					eif
  1799 				.endl
  1800
  1801 17E2			.local	AIBULLY						; PROCEDURE
  1802
  1803 				; optimize OK (ai.inc), line = 84
  1804
  1805 17E2 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1806 17EC A0 04			ldy #PLY.DIR-DATAORIGIN
  1807 17EE B1 12			lda (:bp2),y
  1808 17F0 85 58			sta T0B
  1809
  1810 				; optimize OK (ai.inc), line = 86
  1811
  1812 17F2 AD E5 2A			lda PLAYER1.ISALIVE
  1813 17F5 0D ED 2A			ora PLAYER2.ISALIVE
  1814 17F8 D0 03 4C 9F 18		jeq l_08D0
  1815
  1816 				; optimize OK (ai.inc), line = 88
  1817
  1818 17FD AD E5 2A			lda PLAYER1.ISALIVE
  1819 1800 F0 0F			jeq l_08DD
  1820 1802 AD BF 2A			lda PLAYER1
  1821 1805 8D BD 2A			sta TMPPLY
  1822 1808 AD C0 2A			lda PLAYER1+1
  1823 180B 8D BE 2A			sta TMPPLY+1
  1824 180E 4C 1D 18			jmp l_08EC
  1825 1811			l_08DD
  1826 1811 AD C1 2A			lda PLAYER2
  1827 1814 8D BD 2A			sta TMPPLY
  1828 1817 AD C2 2A			lda PLAYER2+1
  1829 181A 8D BE 2A			sta TMPPLY+1
  1830 181D			l_08EC
  1831
  1832 				; optimize OK (ai.inc), line = 90
  1833
  1834 181D AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1835 1827 A0 01			ldy #PLY.Y-DATAORIGIN
  1836 1829 B1 12			lda (:bp2),y
  1837 182B 85 21			sta :STACKORIGIN+9
  1838 182D AC BD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1839 1837 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1840 1839 B1 12			lda (:bp2),y
  1841 183B C5 21			cmp :STACKORIGIN+9
  1842 183D B0 07			jcs l_0905
  1843 183F A9 01			lda #$01
  1844 1841 85 58			sta T0B
  1845 1843 4C 4A 18			jmp l_0913
  1846 1846			l_0905
  1847 1846 A9 02			lda #$02
  1848 1848 85 58			sta T0B
  1849 184A			l_0913
  1850
  1851 				; optimize OK (ai.inc), line = 91
  1852
  1853 184A AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1854 1854 A0 01			ldy #PLY.Y-DATAORIGIN
  1855 1856 B1 12			lda (:bp2),y
  1856 1858 85 21			sta :STACKORIGIN+9
  1857 185A AC BD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1858 1864 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1859 1866 B1 12			lda (:bp2),y
  1860 1868 C5 21			cmp :STACKORIGIN+9
  1861 186A F0 06			jeq l_093Dx
  1862 186C A5 5C			lda AVAILDIR
  1863 186E 25 58			and T0B
  1864 1870 D0 2D			jne l_093D
  1865 1872			l_093Dx
  1866
  1867 				; optimize OK (ai.inc), line = 92
  1868
  1869 1872 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1870 187C A0 00			ldy #PLY.X-DATAORIGIN
  1871 187E B1 12			lda (:bp2),y
  1872 1880 85 21			sta :STACKORIGIN+9
  1873 1882 AC BD 2A 84 12 AC + 	mwy TMPPLY :bp2
  1874 188C A0 00			ldy #TMPPLY.X-DATAORIGIN
  1875 188E B1 12			lda (:bp2),y
  1876 1890 C5 21			cmp :STACKORIGIN+9
  1877 1892 B0 07			jcs l_0952
  1878 1894 A9 04			lda #$04
  1879 1896 85 58			sta T0B
  1880 1898 4C 9F 18			jmp l_0960
  1881 189B			l_0952
  1882 189B A9 08			lda #$08
  1883 189D 85 58			sta T0B
  1884 189F			l_0960
  1885 189F			l_093D
  1886 189F			l_08D0
  1887
  1888 				; optimize OK (ai.inc), line = 96
  1889
  1890 189F A5 5C			lda AVAILDIR
  1891 18A1 25 58			and T0B
  1892 18A3 F0 07			jeq l_0980
  1893 18A5 A5 58			lda T0B
  1894 18A7 85 5B			sta NEWDIR
  1895 18A9 4C AF 18			jmp l_0990
  1896 18AC			l_0980
  1897
  1898 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1899
  1900 18AC 20 88 15			jsr AISAPPER
  1901 18AF			l_0990
  1902 18AF			@exit
  1903 					.ifdef @new
  1904 					lda <@VarData
  1905 					sta :ztmp
  1906 					lda >@VarData
  1907 					ldy #@VarDataSize-1
  1908 					jmp @FreeMem
  1909 					els
  1910 18AF 60				rts						; ret
  1911 					eif
  1912 				.endl
  1913
  1914 18B0			.local	AIMIRROR					; PROCEDURE
  1915
  1916 				; optimize OK (ai.inc), line = 105
  1917
  1918 18B0 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  1919 18BA A0 04			ldy #PLY.DIR-DATAORIGIN
  1920 18BC B1 12			lda (:bp2),y
  1921 18BE 85 58			sta T0B
  1922
  1923 				; optimize OK (ai.inc), line = 107
  1924
  1925 18C0 AD E5 2A			lda PLAYER1.ISALIVE
  1926 18C3 F0 2F			jeq l_09A7
  1927
  1928 				; optimize OK (ai.inc), line = 108
  1929
  1930 18C5 AD E2 2A			lda PLAYER1.DIR
  1931 18C8 8D 2D 2B			sta @CASETMP_0005
  1932 18CB C9 01			cmp #$01
  1933 18CD D0 07			jne l_09B3
  1934 18CF			@
  1935
  1936 				; optimize OK (ai.inc), line = 109
  1937
  1938 18CF A9 02			lda #$02
  1939 18D1 85 58			sta T0B
  1940
  1941 18D3 4C F4 18			jmp a_0005
  1942 18D6			l_09B3
  1943 18D6 C9 02			cmp #$02
  1944 18D8 D0 07			jne l_09C0
  1945 18DA			@
  1946
  1947 				; optimize OK (ai.inc), line = 110
  1948
  1949 18DA A9 01			lda #$01
  1950 18DC 85 58			sta T0B
  1951
  1952 18DE 4C F4 18			jmp a_0005
  1953 18E1			l_09C0
  1954 18E1 C9 04			cmp #$04
  1955 18E3 D0 07			jne l_09CD
  1956 18E5			@
  1957
  1958 				; optimize OK (ai.inc), line = 111
  1959
  1960 18E5 A9 08			lda #$08
  1961 18E7 85 58			sta T0B
  1962
  1963 18E9 4C F4 18			jmp a_0005
  1964 18EC			l_09CD
  1965 18EC C9 08			cmp #$08
  1966 18EE D0 04			jne l_09DA
  1967 18F0			@
  1968
  1969 				; optimize OK (ai.inc), line = 112
  1970
  1971 18F0 A9 04			lda #$04
  1972 18F2 85 58			sta T0B
  1973
  1974 18F4			l_09DA
  1975 18F4			a_0005
  1976 18F4			l_09A7
  1977
  1978 				; optimize OK (ai.inc), line = 116
  1979
  1980 18F4 A5 5C			lda AVAILDIR
  1981 18F6 25 58			and T0B
  1982 18F8 F0 07			jeq l_0A00
  1983 18FA A5 58			lda T0B
  1984 18FC 85 5B			sta NEWDIR
  1985 18FE 4C 04 19			jmp l_0A10
  1986 1901			l_0A00
  1987
  1988 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  1989
  1990 1901 20 88 15			jsr AISAPPER
  1991 1904			l_0A10
  1992
  1993 				; ------------------------------------------------------------
  1994
  1995 = 2B2D			@CASETMP_0005	= DATAORIGIN+$0061
  1996
  1997 = 2B2D			@VarData	= @CASETMP_0005
  1998 = 0001			@VarDataSize	= 1
  1999
  2000 1904			@exit
  2001 					.ifdef @new
  2002 					lda <@VarData
  2003 					sta :ztmp
  2004 					lda >@VarData
  2005 					ldy #@VarDataSize-1
  2006 					jmp @FreeMem
  2007 					els
  2008 1904 60				rts						; ret
  2009 					eif
  2010 				.endl
  2011
  2012 1905			.local	SETLEVEL00					; PROCEDURE
  2013
  2014 				; optimize OK (levels.inc), line = 5
  2015
  2016 1905 A9 01			lda #$01
  2017 1907 8D 26 2B			sta SETPLAYER.ISALIVE
  2018 190A A9 62			lda #$62
  2019 190C 8D 25 2B			sta SETPLAYER.COLOUR
  2020 190F A9 51			lda #$51
  2021 1911 8D 24 2B			sta SETPLAYER.HEAD
  2022 1914 A9 00			lda #$00
  2023 1916 8D 23 2B			sta SETPLAYER.BRAIN
  2024 1919 A9 08			lda #$08
  2025 191B 8D 22 2B			sta SETPLAYER.DIR
  2026 191E A9 0C			lda #$0C
  2027 1920 8D 21 2B			sta SETPLAYER.Y
  2028 1923 A9 0A			lda #$0A
  2029 1925 8D 20 2B			sta SETPLAYER.X
  2030 1928 AD BF 2A			lda PLAYER1
  2031 192B 8D 1E 2B			sta SETPLAYER.P
  2032 192E AD C0 2A			lda PLAYER1+1
  2033 1931 8D 1F 2B			sta SETPLAYER.P+1
  2034 1934 20 9F 14			jsr SETPLAYER
  2035
  2036 				; optimize OK (levels.inc), line = 6
  2037
  2038 1937 A9 01			lda #$01
  2039 1939 8D 26 2B			sta SETPLAYER.ISALIVE
  2040 193C A9 5D			lda #$5D
  2041 193E 8D 25 2B			sta SETPLAYER.COLOUR
  2042 1941 A9 51			lda #$51
  2043 1943 8D 24 2B			sta SETPLAYER.HEAD
  2044 1946 A9 01			lda #$01
  2045 1948 8D 23 2B			sta SETPLAYER.BRAIN
  2046 194B A9 04			lda #$04
  2047 194D 8D 22 2B			sta SETPLAYER.DIR
  2048 1950 A9 0C			lda #$0C
  2049 1952 8D 21 2B			sta SETPLAYER.Y
  2050 1955 A9 1E			lda #$1E
  2051 1957 8D 20 2B			sta SETPLAYER.X
  2052 195A AD C1 2A			lda PLAYER2
  2053 195D 8D 1E 2B			sta SETPLAYER.P
  2054 1960 AD C2 2A			lda PLAYER2+1
  2055 1963 8D 1F 2B			sta SETPLAYER.P+1
  2056 1966 20 9F 14			jsr SETPLAYER
  2057
  2058 				; optimize FAIL (1, levels.inc), line = 8
  2059
  2060 1969 E8				inx
  2061 196A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2062 196E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2063 1970 A9 06			lda #$06
  2064 1972 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2065 1975 A9 0A			lda #$0A
  2066 1977 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2067 197A 20 4D 13			jsr CALCOBSTACLEADDR
  2068 197D B4 17			ldy :STACKORIGIN-1,x
  2069 197F B5 18			lda :STACKORIGIN,x
  2070 1981 99 FE 2A			sta adr.OBSTACLES,y
  2071 1984 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2072 1986 99 FF 2A			sta adr.OBSTACLES+1,y
  2073 1989 CA				dex
  2074 198A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2075 198E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2076 1992 A9 06			lda #$06
  2077 1994 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2078 1997 A9 1E			lda #$1E
  2079 1999 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2080 199C 20 4D 13			jsr CALCOBSTACLEADDR
  2081 199F B4 17			ldy :STACKORIGIN-1,x
  2082 19A1 B5 18			lda :STACKORIGIN,x
  2083 19A3 99 FE 2A			sta adr.OBSTACLES,y
  2084 19A6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2085 19A8 99 FF 2A			sta adr.OBSTACLES+1,y
  2086 19AB CA				dex
  2087
  2088 				; optimize FAIL (1, levels.inc), line = 9
  2089
  2090 19AC A9 04 95 18			mva #$04 :STACKORIGIN,x
  2091 19B0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2092 19B4 A9 12			lda #$12
  2093 19B6 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2094 19B9 A9 0A			lda #$0A
  2095 19BB 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2096 19BE 20 4D 13			jsr CALCOBSTACLEADDR
  2097 19C1 B4 17			ldy :STACKORIGIN-1,x
  2098 19C3 B5 18			lda :STACKORIGIN,x
  2099 19C5 99 FE 2A			sta adr.OBSTACLES,y
  2100 19C8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2101 19CA 99 FF 2A			sta adr.OBSTACLES+1,y
  2102 19CD CA				dex
  2103 19CE A9 06 95 18			mva #$06 :STACKORIGIN,x
  2104 19D2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2105 19D6 A9 12			lda #$12
  2106 19D8 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2107 19DB A9 1E			lda #$1E
  2108 19DD 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2109 19E0 20 4D 13			jsr CALCOBSTACLEADDR
  2110 19E3 B4 17			ldy :STACKORIGIN-1,x
  2111 19E5 B5 18			lda :STACKORIGIN,x
  2112 19E7 99 FE 2A			sta adr.OBSTACLES,y
  2113 19EA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2114 19EC 99 FF 2A			sta adr.OBSTACLES+1,y
  2115 19EF CA				dex
  2116
  2117 				; optimize FAIL (1, levels.inc), line = 10
  2118
  2119 19F0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2120 19F4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2121 19F8 A9 02			lda #$02
  2122 19FA 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2123 19FD A9 14			lda #$14
  2124 19FF 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2125 1A02 20 4D 13			jsr CALCOBSTACLEADDR
  2126 1A05 B4 17			ldy :STACKORIGIN-1,x
  2127 1A07 B5 18			lda :STACKORIGIN,x
  2128 1A09 99 FE 2A			sta adr.OBSTACLES,y
  2129 1A0C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2130 1A0E 99 FF 2A			sta adr.OBSTACLES+1,y
  2131 1A11 CA				dex
  2132 1A12 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2133 1A16 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2134 1A1A A9 16			lda #$16
  2135 1A1C 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2136 1A1F A9 14			lda #$14
  2137 1A21 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2138 1A24 20 4D 13			jsr CALCOBSTACLEADDR
  2139 1A27 B4 17			ldy :STACKORIGIN-1,x
  2140 1A29 B5 18			lda :STACKORIGIN,x
  2141 1A2B 99 FE 2A			sta adr.OBSTACLES,y
  2142 1A2E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2143 1A30 99 FF 2A			sta adr.OBSTACLES+1,y
  2144 1A33 CA				dex
  2145 1A34 CA				dex
  2146 1A35			@exit
  2147 					.ifdef @new
  2148 					lda <@VarData
  2149 					sta :ztmp
  2150 					lda >@VarData
  2151 					ldy #@VarDataSize-1
  2152 					jmp @FreeMem
  2153 					els
  2154 1A35 60				rts						; ret
  2155 					eif
  2156 				.endl
  2157
  2158 1A36			.local	SETLEVEL01					; PROCEDURE
  2159
  2160 				; optimize OK (levels.inc), line = 17
  2161
  2162 1A36 A9 01			lda #$01
  2163 1A38 8D 26 2B			sta SETPLAYER.ISALIVE
  2164 1A3B A9 62			lda #$62
  2165 1A3D 8D 25 2B			sta SETPLAYER.COLOUR
  2166 1A40 A9 51			lda #$51
  2167 1A42 8D 24 2B			sta SETPLAYER.HEAD
  2168 1A45 A9 00			lda #$00
  2169 1A47 8D 23 2B			sta SETPLAYER.BRAIN
  2170 1A4A A9 08			lda #$08
  2171 1A4C 8D 22 2B			sta SETPLAYER.DIR
  2172 1A4F A9 0C			lda #$0C
  2173 1A51 8D 21 2B			sta SETPLAYER.Y
  2174 1A54 A9 0A			lda #$0A
  2175 1A56 8D 20 2B			sta SETPLAYER.X
  2176 1A59 AD BF 2A			lda PLAYER1
  2177 1A5C 8D 1E 2B			sta SETPLAYER.P
  2178 1A5F AD C0 2A			lda PLAYER1+1
  2179 1A62 8D 1F 2B			sta SETPLAYER.P+1
  2180 1A65 20 9F 14			jsr SETPLAYER
  2181
  2182 				; optimize OK (levels.inc), line = 18
  2183
  2184 1A68 A9 01			lda #$01
  2185 1A6A 8D 26 2B			sta SETPLAYER.ISALIVE
  2186 1A6D A9 5D			lda #$5D
  2187 1A6F 8D 25 2B			sta SETPLAYER.COLOUR
  2188 1A72 A9 51			lda #$51
  2189 1A74 8D 24 2B			sta SETPLAYER.HEAD
  2190 1A77 A9 01			lda #$01
  2191 1A79 8D 23 2B			sta SETPLAYER.BRAIN
  2192 1A7C A9 04			lda #$04
  2193 1A7E 8D 22 2B			sta SETPLAYER.DIR
  2194 1A81 A9 0C			lda #$0C
  2195 1A83 8D 21 2B			sta SETPLAYER.Y
  2196 1A86 A9 1E			lda #$1E
  2197 1A88 8D 20 2B			sta SETPLAYER.X
  2198 1A8B AD C1 2A			lda PLAYER2
  2199 1A8E 8D 1E 2B			sta SETPLAYER.P
  2200 1A91 AD C2 2A			lda PLAYER2+1
  2201 1A94 8D 1F 2B			sta SETPLAYER.P+1
  2202 1A97 20 9F 14			jsr SETPLAYER
  2203
  2204 				; optimize FAIL (1, levels.inc), line = 20
  2205
  2206 1A9A E8				inx
  2207 1A9B A9 00 95 18			mva #$00 :STACKORIGIN,x
  2208 1A9F 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2209 1AA1 A9 06			lda #$06
  2210 1AA3 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2211 1AA6 A9 0A			lda #$0A
  2212 1AA8 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2213 1AAB 20 4D 13			jsr CALCOBSTACLEADDR
  2214 1AAE B4 17			ldy :STACKORIGIN-1,x
  2215 1AB0 B5 18			lda :STACKORIGIN,x
  2216 1AB2 99 FE 2A			sta adr.OBSTACLES,y
  2217 1AB5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2218 1AB7 99 FF 2A			sta adr.OBSTACLES+1,y
  2219 1ABA CA				dex
  2220 1ABB A9 02 95 18			mva #$02 :STACKORIGIN,x
  2221 1ABF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2222 1AC3 A9 06			lda #$06
  2223 1AC5 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2224 1AC8 A9 1E			lda #$1E
  2225 1ACA 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2226 1ACD 20 4D 13			jsr CALCOBSTACLEADDR
  2227 1AD0 B4 17			ldy :STACKORIGIN-1,x
  2228 1AD2 B5 18			lda :STACKORIGIN,x
  2229 1AD4 99 FE 2A			sta adr.OBSTACLES,y
  2230 1AD7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2231 1AD9 99 FF 2A			sta adr.OBSTACLES+1,y
  2232 1ADC CA				dex
  2233
  2234 				; optimize FAIL (1, levels.inc), line = 21
  2235
  2236 1ADD A9 04 95 18			mva #$04 :STACKORIGIN,x
  2237 1AE1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2238 1AE5 A9 12			lda #$12
  2239 1AE7 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2240 1AEA A9 0A			lda #$0A
  2241 1AEC 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2242 1AEF 20 4D 13			jsr CALCOBSTACLEADDR
  2243 1AF2 B4 17			ldy :STACKORIGIN-1,x
  2244 1AF4 B5 18			lda :STACKORIGIN,x
  2245 1AF6 99 FE 2A			sta adr.OBSTACLES,y
  2246 1AF9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2247 1AFB 99 FF 2A			sta adr.OBSTACLES+1,y
  2248 1AFE CA				dex
  2249 1AFF A9 06 95 18			mva #$06 :STACKORIGIN,x
  2250 1B03 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2251 1B07 A9 12			lda #$12
  2252 1B09 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2253 1B0C A9 1E			lda #$1E
  2254 1B0E 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2255 1B11 20 4D 13			jsr CALCOBSTACLEADDR
  2256 1B14 B4 17			ldy :STACKORIGIN-1,x
  2257 1B16 B5 18			lda :STACKORIGIN,x
  2258 1B18 99 FE 2A			sta adr.OBSTACLES,y
  2259 1B1B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2260 1B1D 99 FF 2A			sta adr.OBSTACLES+1,y
  2261 1B20 CA				dex
  2262
  2263 				; optimize FAIL (1, levels.inc), line = 22
  2264
  2265 1B21 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2266 1B25 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2267 1B29 A9 02			lda #$02
  2268 1B2B 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2269 1B2E A9 14			lda #$14
  2270 1B30 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2271 1B33 20 4D 13			jsr CALCOBSTACLEADDR
  2272 1B36 B4 17			ldy :STACKORIGIN-1,x
  2273 1B38 B5 18			lda :STACKORIGIN,x
  2274 1B3A 99 FE 2A			sta adr.OBSTACLES,y
  2275 1B3D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2276 1B3F 99 FF 2A			sta adr.OBSTACLES+1,y
  2277 1B42 CA				dex
  2278 1B43 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2279 1B47 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2280 1B4B A9 16			lda #$16
  2281 1B4D 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2282 1B50 A9 14			lda #$14
  2283 1B52 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2284 1B55 20 4D 13			jsr CALCOBSTACLEADDR
  2285 1B58 B4 17			ldy :STACKORIGIN-1,x
  2286 1B5A B5 18			lda :STACKORIGIN,x
  2287 1B5C 99 FE 2A			sta adr.OBSTACLES,y
  2288 1B5F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2289 1B61 99 FF 2A			sta adr.OBSTACLES+1,y
  2290 1B64 CA				dex
  2291 1B65 CA				dex
  2292 1B66			@exit
  2293 					.ifdef @new
  2294 					lda <@VarData
  2295 					sta :ztmp
  2296 					lda >@VarData
  2297 					ldy #@VarDataSize-1
  2298 					jmp @FreeMem
  2299 					els
  2300 1B66 60				rts						; ret
  2301 					eif
  2302 				.endl
  2303
  2304 1B67			.local	SETLEVEL02					; PROCEDURE
  2305
  2306 				; optimize OK (levels.inc), line = 29
  2307
  2308 1B67 A9 01			lda #$01
  2309 1B69 8D 26 2B			sta SETPLAYER.ISALIVE
  2310 1B6C A9 62			lda #$62
  2311 1B6E 8D 25 2B			sta SETPLAYER.COLOUR
  2312 1B71 A9 51			lda #$51
  2313 1B73 8D 24 2B			sta SETPLAYER.HEAD
  2314 1B76 A9 00			lda #$00
  2315 1B78 8D 23 2B			sta SETPLAYER.BRAIN
  2316 1B7B A9 08			lda #$08
  2317 1B7D 8D 22 2B			sta SETPLAYER.DIR
  2318 1B80 A9 0C			lda #$0C
  2319 1B82 8D 21 2B			sta SETPLAYER.Y
  2320 1B85 A9 0A			lda #$0A
  2321 1B87 8D 20 2B			sta SETPLAYER.X
  2322 1B8A AD BF 2A			lda PLAYER1
  2323 1B8D 8D 1E 2B			sta SETPLAYER.P
  2324 1B90 AD C0 2A			lda PLAYER1+1
  2325 1B93 8D 1F 2B			sta SETPLAYER.P+1
  2326 1B96 20 9F 14			jsr SETPLAYER
  2327
  2328 				; optimize OK (levels.inc), line = 30
  2329
  2330 1B99 A9 01			lda #$01
  2331 1B9B 8D 26 2B			sta SETPLAYER.ISALIVE
  2332 1B9E A9 5D			lda #$5D
  2333 1BA0 8D 25 2B			sta SETPLAYER.COLOUR
  2334 1BA3 A9 51			lda #$51
  2335 1BA5 8D 24 2B			sta SETPLAYER.HEAD
  2336 1BA8 A9 03			lda #$03
  2337 1BAA 8D 23 2B			sta SETPLAYER.BRAIN
  2338 1BAD A9 04			lda #$04
  2339 1BAF 8D 22 2B			sta SETPLAYER.DIR
  2340 1BB2 A9 0C			lda #$0C
  2341 1BB4 8D 21 2B			sta SETPLAYER.Y
  2342 1BB7 A9 1E			lda #$1E
  2343 1BB9 8D 20 2B			sta SETPLAYER.X
  2344 1BBC AD C1 2A			lda PLAYER2
  2345 1BBF 8D 1E 2B			sta SETPLAYER.P
  2346 1BC2 AD C2 2A			lda PLAYER2+1
  2347 1BC5 8D 1F 2B			sta SETPLAYER.P+1
  2348 1BC8 20 9F 14			jsr SETPLAYER
  2349
  2350 				; optimize FAIL (1, levels.inc), line = 32
  2351
  2352 1BCB E8				inx
  2353 1BCC A9 00 95 18			mva #$00 :STACKORIGIN,x
  2354 1BD0 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2355 1BD2 A9 06			lda #$06
  2356 1BD4 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2357 1BD7 A9 0A			lda #$0A
  2358 1BD9 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2359 1BDC 20 4D 13			jsr CALCOBSTACLEADDR
  2360 1BDF B4 17			ldy :STACKORIGIN-1,x
  2361 1BE1 B5 18			lda :STACKORIGIN,x
  2362 1BE3 99 FE 2A			sta adr.OBSTACLES,y
  2363 1BE6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2364 1BE8 99 FF 2A			sta adr.OBSTACLES+1,y
  2365 1BEB CA				dex
  2366 1BEC A9 02 95 18			mva #$02 :STACKORIGIN,x
  2367 1BF0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2368 1BF4 A9 06			lda #$06
  2369 1BF6 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2370 1BF9 A9 1E			lda #$1E
  2371 1BFB 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2372 1BFE 20 4D 13			jsr CALCOBSTACLEADDR
  2373 1C01 B4 17			ldy :STACKORIGIN-1,x
  2374 1C03 B5 18			lda :STACKORIGIN,x
  2375 1C05 99 FE 2A			sta adr.OBSTACLES,y
  2376 1C08 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2377 1C0A 99 FF 2A			sta adr.OBSTACLES+1,y
  2378 1C0D CA				dex
  2379
  2380 				; optimize FAIL (1, levels.inc), line = 33
  2381
  2382 1C0E A9 04 95 18			mva #$04 :STACKORIGIN,x
  2383 1C12 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2384 1C16 A9 12			lda #$12
  2385 1C18 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2386 1C1B A9 0A			lda #$0A
  2387 1C1D 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2388 1C20 20 4D 13			jsr CALCOBSTACLEADDR
  2389 1C23 B4 17			ldy :STACKORIGIN-1,x
  2390 1C25 B5 18			lda :STACKORIGIN,x
  2391 1C27 99 FE 2A			sta adr.OBSTACLES,y
  2392 1C2A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2393 1C2C 99 FF 2A			sta adr.OBSTACLES+1,y
  2394 1C2F CA				dex
  2395 1C30 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2396 1C34 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2397 1C38 A9 12			lda #$12
  2398 1C3A 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2399 1C3D A9 1E			lda #$1E
  2400 1C3F 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2401 1C42 20 4D 13			jsr CALCOBSTACLEADDR
  2402 1C45 B4 17			ldy :STACKORIGIN-1,x
  2403 1C47 B5 18			lda :STACKORIGIN,x
  2404 1C49 99 FE 2A			sta adr.OBSTACLES,y
  2405 1C4C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2406 1C4E 99 FF 2A			sta adr.OBSTACLES+1,y
  2407 1C51 CA				dex
  2408
  2409 				; optimize FAIL (1, levels.inc), line = 34
  2410
  2411 1C52 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2412 1C56 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2413 1C5A A9 02			lda #$02
  2414 1C5C 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2415 1C5F A9 14			lda #$14
  2416 1C61 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2417 1C64 20 4D 13			jsr CALCOBSTACLEADDR
  2418 1C67 B4 17			ldy :STACKORIGIN-1,x
  2419 1C69 B5 18			lda :STACKORIGIN,x
  2420 1C6B 99 FE 2A			sta adr.OBSTACLES,y
  2421 1C6E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2422 1C70 99 FF 2A			sta adr.OBSTACLES+1,y
  2423 1C73 CA				dex
  2424 1C74 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2425 1C78 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2426 1C7C A9 16			lda #$16
  2427 1C7E 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2428 1C81 A9 14			lda #$14
  2429 1C83 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2430 1C86 20 4D 13			jsr CALCOBSTACLEADDR
  2431 1C89 B4 17			ldy :STACKORIGIN-1,x
  2432 1C8B B5 18			lda :STACKORIGIN,x
  2433 1C8D 99 FE 2A			sta adr.OBSTACLES,y
  2434 1C90 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2435 1C92 99 FF 2A			sta adr.OBSTACLES+1,y
  2436 1C95 CA				dex
  2437 1C96 CA				dex
  2438 1C97			@exit
  2439 					.ifdef @new
  2440 					lda <@VarData
  2441 					sta :ztmp
  2442 					lda >@VarData
  2443 					ldy #@VarDataSize-1
  2444 					jmp @FreeMem
  2445 					els
  2446 1C97 60				rts						; ret
  2447 					eif
  2448 				.endl
  2449
  2450 1C98			.local	SETLEVEL03					; PROCEDURE
  2451
  2452 				; optimize OK (levels.inc), line = 41
  2453
  2454 1C98 A9 01			lda #$01
  2455 1C9A 8D 26 2B			sta SETPLAYER.ISALIVE
  2456 1C9D A9 62			lda #$62
  2457 1C9F 8D 25 2B			sta SETPLAYER.COLOUR
  2458 1CA2 A9 51			lda #$51
  2459 1CA4 8D 24 2B			sta SETPLAYER.HEAD
  2460 1CA7 A9 00			lda #$00
  2461 1CA9 8D 23 2B			sta SETPLAYER.BRAIN
  2462 1CAC A9 08			lda #$08
  2463 1CAE 8D 22 2B			sta SETPLAYER.DIR
  2464 1CB1 A9 0C			lda #$0C
  2465 1CB3 8D 21 2B			sta SETPLAYER.Y
  2466 1CB6 A9 0A			lda #$0A
  2467 1CB8 8D 20 2B			sta SETPLAYER.X
  2468 1CBB AD BF 2A			lda PLAYER1
  2469 1CBE 8D 1E 2B			sta SETPLAYER.P
  2470 1CC1 AD C0 2A			lda PLAYER1+1
  2471 1CC4 8D 1F 2B			sta SETPLAYER.P+1
  2472 1CC7 20 9F 14			jsr SETPLAYER
  2473
  2474 				; optimize OK (levels.inc), line = 42
  2475
  2476 1CCA A9 01			lda #$01
  2477 1CCC 8D 26 2B			sta SETPLAYER.ISALIVE
  2478 1CCF A9 5D			lda #$5D
  2479 1CD1 8D 25 2B			sta SETPLAYER.COLOUR
  2480 1CD4 A9 51			lda #$51
  2481 1CD6 8D 24 2B			sta SETPLAYER.HEAD
  2482 1CD9 A9 02			lda #$02
  2483 1CDB 8D 23 2B			sta SETPLAYER.BRAIN
  2484 1CDE A9 04			lda #$04
  2485 1CE0 8D 22 2B			sta SETPLAYER.DIR
  2486 1CE3 A9 0C			lda #$0C
  2487 1CE5 8D 21 2B			sta SETPLAYER.Y
  2488 1CE8 A9 1E			lda #$1E
  2489 1CEA 8D 20 2B			sta SETPLAYER.X
  2490 1CED AD C1 2A			lda PLAYER2
  2491 1CF0 8D 1E 2B			sta SETPLAYER.P
  2492 1CF3 AD C2 2A			lda PLAYER2+1
  2493 1CF6 8D 1F 2B			sta SETPLAYER.P+1
  2494 1CF9 20 9F 14			jsr SETPLAYER
  2495
  2496 				; optimize FAIL (1, levels.inc), line = 44
  2497
  2498 1CFC E8				inx
  2499 1CFD A9 00 95 18			mva #$00 :STACKORIGIN,x
  2500 1D01 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2501 1D03 A9 06			lda #$06
  2502 1D05 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2503 1D08 A9 0A			lda #$0A
  2504 1D0A 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2505 1D0D 20 4D 13			jsr CALCOBSTACLEADDR
  2506 1D10 B4 17			ldy :STACKORIGIN-1,x
  2507 1D12 B5 18			lda :STACKORIGIN,x
  2508 1D14 99 FE 2A			sta adr.OBSTACLES,y
  2509 1D17 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2510 1D19 99 FF 2A			sta adr.OBSTACLES+1,y
  2511 1D1C CA				dex
  2512 1D1D A9 02 95 18			mva #$02 :STACKORIGIN,x
  2513 1D21 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2514 1D25 A9 06			lda #$06
  2515 1D27 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2516 1D2A A9 1E			lda #$1E
  2517 1D2C 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2518 1D2F 20 4D 13			jsr CALCOBSTACLEADDR
  2519 1D32 B4 17			ldy :STACKORIGIN-1,x
  2520 1D34 B5 18			lda :STACKORIGIN,x
  2521 1D36 99 FE 2A			sta adr.OBSTACLES,y
  2522 1D39 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2523 1D3B 99 FF 2A			sta adr.OBSTACLES+1,y
  2524 1D3E CA				dex
  2525
  2526 				; optimize FAIL (1, levels.inc), line = 45
  2527
  2528 1D3F A9 04 95 18			mva #$04 :STACKORIGIN,x
  2529 1D43 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2530 1D47 A9 12			lda #$12
  2531 1D49 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2532 1D4C A9 0A			lda #$0A
  2533 1D4E 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2534 1D51 20 4D 13			jsr CALCOBSTACLEADDR
  2535 1D54 B4 17			ldy :STACKORIGIN-1,x
  2536 1D56 B5 18			lda :STACKORIGIN,x
  2537 1D58 99 FE 2A			sta adr.OBSTACLES,y
  2538 1D5B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2539 1D5D 99 FF 2A			sta adr.OBSTACLES+1,y
  2540 1D60 CA				dex
  2541 1D61 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2542 1D65 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2543 1D69 A9 12			lda #$12
  2544 1D6B 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2545 1D6E A9 1E			lda #$1E
  2546 1D70 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2547 1D73 20 4D 13			jsr CALCOBSTACLEADDR
  2548 1D76 B4 17			ldy :STACKORIGIN-1,x
  2549 1D78 B5 18			lda :STACKORIGIN,x
  2550 1D7A 99 FE 2A			sta adr.OBSTACLES,y
  2551 1D7D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2552 1D7F 99 FF 2A			sta adr.OBSTACLES+1,y
  2553 1D82 CA				dex
  2554
  2555 				; optimize FAIL (1, levels.inc), line = 46
  2556
  2557 1D83 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2558 1D87 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2559 1D8B A9 0C			lda #$0C
  2560 1D8D 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2561 1D90 A9 01			lda #$01
  2562 1D92 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2563 1D95 20 4D 13			jsr CALCOBSTACLEADDR
  2564 1D98 B4 17			ldy :STACKORIGIN-1,x
  2565 1D9A B5 18			lda :STACKORIGIN,x
  2566 1D9C 99 FE 2A			sta adr.OBSTACLES,y
  2567 1D9F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2568 1DA1 99 FF 2A			sta adr.OBSTACLES+1,y
  2569 1DA4 CA				dex
  2570 1DA5 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2571 1DA9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2572 1DAD A9 02			lda #$02
  2573 1DAF 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2574 1DB2 A9 14			lda #$14
  2575 1DB4 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2576 1DB7 20 4D 13			jsr CALCOBSTACLEADDR
  2577 1DBA B4 17			ldy :STACKORIGIN-1,x
  2578 1DBC B5 18			lda :STACKORIGIN,x
  2579 1DBE 99 FE 2A			sta adr.OBSTACLES,y
  2580 1DC1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2581 1DC3 99 FF 2A			sta adr.OBSTACLES+1,y
  2582 1DC6 CA				dex
  2583
  2584 				; optimize FAIL (1, levels.inc), line = 47
  2585
  2586 1DC7 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2587 1DCB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2588 1DCF A9 16			lda #$16
  2589 1DD1 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2590 1DD4 A9 14			lda #$14
  2591 1DD6 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2592 1DD9 20 4D 13			jsr CALCOBSTACLEADDR
  2593 1DDC B4 17			ldy :STACKORIGIN-1,x
  2594 1DDE B5 18			lda :STACKORIGIN,x
  2595 1DE0 99 FE 2A			sta adr.OBSTACLES,y
  2596 1DE3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2597 1DE5 99 FF 2A			sta adr.OBSTACLES+1,y
  2598 1DE8 CA				dex
  2599 1DE9 CA				dex
  2600 1DEA			@exit
  2601 					.ifdef @new
  2602 					lda <@VarData
  2603 					sta :ztmp
  2604 					lda >@VarData
  2605 					ldy #@VarDataSize-1
  2606 					jmp @FreeMem
  2607 					els
  2608 1DEA 60				rts						; ret
  2609 					eif
  2610 				.endl
  2611
  2612 1DEB			.local	SETLEVEL04					; PROCEDURE
  2613
  2614 				; optimize OK (levels.inc), line = 54
  2615
  2616 1DEB A9 01			lda #$01
  2617 1DED 8D 26 2B			sta SETPLAYER.ISALIVE
  2618 1DF0 A9 62			lda #$62
  2619 1DF2 8D 25 2B			sta SETPLAYER.COLOUR
  2620 1DF5 A9 51			lda #$51
  2621 1DF7 8D 24 2B			sta SETPLAYER.HEAD
  2622 1DFA A9 00			lda #$00
  2623 1DFC 8D 23 2B			sta SETPLAYER.BRAIN
  2624 1DFF A9 04			lda #$04
  2625 1E01 8D 22 2B			sta SETPLAYER.DIR
  2626 1E04 A9 0C			lda #$0C
  2627 1E06 8D 21 2B			sta SETPLAYER.Y
  2628 1E09 A9 12			lda #$12
  2629 1E0B 8D 20 2B			sta SETPLAYER.X
  2630 1E0E AD BF 2A			lda PLAYER1
  2631 1E11 8D 1E 2B			sta SETPLAYER.P
  2632 1E14 AD C0 2A			lda PLAYER1+1
  2633 1E17 8D 1F 2B			sta SETPLAYER.P+1
  2634 1E1A 20 9F 14			jsr SETPLAYER
  2635
  2636 				; optimize OK (levels.inc), line = 55
  2637
  2638 1E1D A9 01			lda #$01
  2639 1E1F 8D 26 2B			sta SETPLAYER.ISALIVE
  2640 1E22 A9 5D			lda #$5D
  2641 1E24 8D 25 2B			sta SETPLAYER.COLOUR
  2642 1E27 A9 51			lda #$51
  2643 1E29 8D 24 2B			sta SETPLAYER.HEAD
  2644 1E2C A9 04			lda #$04
  2645 1E2E 8D 23 2B			sta SETPLAYER.BRAIN
  2646 1E31 A9 08			lda #$08
  2647 1E33 8D 22 2B			sta SETPLAYER.DIR
  2648 1E36 A9 0C			lda #$0C
  2649 1E38 8D 21 2B			sta SETPLAYER.Y
  2650 1E3B A9 16			lda #$16
  2651 1E3D 8D 20 2B			sta SETPLAYER.X
  2652 1E40 AD C1 2A			lda PLAYER2
  2653 1E43 8D 1E 2B			sta SETPLAYER.P
  2654 1E46 AD C2 2A			lda PLAYER2+1
  2655 1E49 8D 1F 2B			sta SETPLAYER.P+1
  2656 1E4C 20 9F 14			jsr SETPLAYER
  2657
  2658 				; optimize FAIL (1, levels.inc), line = 57
  2659
  2660 1E4F E8				inx
  2661 1E50 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2662 1E54 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2663 1E56 A9 06			lda #$06
  2664 1E58 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2665 1E5B A9 0A			lda #$0A
  2666 1E5D 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2667 1E60 20 4D 13			jsr CALCOBSTACLEADDR
  2668 1E63 B4 17			ldy :STACKORIGIN-1,x
  2669 1E65 B5 18			lda :STACKORIGIN,x
  2670 1E67 99 FE 2A			sta adr.OBSTACLES,y
  2671 1E6A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2672 1E6C 99 FF 2A			sta adr.OBSTACLES+1,y
  2673 1E6F CA				dex
  2674 1E70 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2675 1E74 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2676 1E78 A9 06			lda #$06
  2677 1E7A 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2678 1E7D A9 1E			lda #$1E
  2679 1E7F 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2680 1E82 20 4D 13			jsr CALCOBSTACLEADDR
  2681 1E85 B4 17			ldy :STACKORIGIN-1,x
  2682 1E87 B5 18			lda :STACKORIGIN,x
  2683 1E89 99 FE 2A			sta adr.OBSTACLES,y
  2684 1E8C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2685 1E8E 99 FF 2A			sta adr.OBSTACLES+1,y
  2686 1E91 CA				dex
  2687
  2688 				; optimize FAIL (1, levels.inc), line = 58
  2689
  2690 1E92 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2691 1E96 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2692 1E9A A9 12			lda #$12
  2693 1E9C 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2694 1E9F A9 0A			lda #$0A
  2695 1EA1 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2696 1EA4 20 4D 13			jsr CALCOBSTACLEADDR
  2697 1EA7 B4 17			ldy :STACKORIGIN-1,x
  2698 1EA9 B5 18			lda :STACKORIGIN,x
  2699 1EAB 99 FE 2A			sta adr.OBSTACLES,y
  2700 1EAE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2701 1EB0 99 FF 2A			sta adr.OBSTACLES+1,y
  2702 1EB3 CA				dex
  2703 1EB4 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2704 1EB8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2705 1EBC A9 12			lda #$12
  2706 1EBE 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2707 1EC1 A9 1E			lda #$1E
  2708 1EC3 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2709 1EC6 20 4D 13			jsr CALCOBSTACLEADDR
  2710 1EC9 B4 17			ldy :STACKORIGIN-1,x
  2711 1ECB B5 18			lda :STACKORIGIN,x
  2712 1ECD 99 FE 2A			sta adr.OBSTACLES,y
  2713 1ED0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2714 1ED2 99 FF 2A			sta adr.OBSTACLES+1,y
  2715 1ED5 CA				dex
  2716
  2717 				; optimize FAIL (1, levels.inc), line = 59
  2718
  2719 1ED6 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2720 1EDA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2721 1EDE A9 0C			lda #$0C
  2722 1EE0 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2723 1EE3 A9 01			lda #$01
  2724 1EE5 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2725 1EE8 20 4D 13			jsr CALCOBSTACLEADDR
  2726 1EEB B4 17			ldy :STACKORIGIN-1,x
  2727 1EED B5 18			lda :STACKORIGIN,x
  2728 1EEF 99 FE 2A			sta adr.OBSTACLES,y
  2729 1EF2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2730 1EF4 99 FF 2A			sta adr.OBSTACLES+1,y
  2731 1EF7 CA				dex
  2732 1EF8 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2733 1EFC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2734 1F00 A9 02			lda #$02
  2735 1F02 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2736 1F05 A9 14			lda #$14
  2737 1F07 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2738 1F0A 20 4D 13			jsr CALCOBSTACLEADDR
  2739 1F0D B4 17			ldy :STACKORIGIN-1,x
  2740 1F0F B5 18			lda :STACKORIGIN,x
  2741 1F11 99 FE 2A			sta adr.OBSTACLES,y
  2742 1F14 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2743 1F16 99 FF 2A			sta adr.OBSTACLES+1,y
  2744 1F19 CA				dex
  2745
  2746 				; optimize FAIL (1, levels.inc), line = 60
  2747
  2748 1F1A A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2749 1F1E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2750 1F22 A9 16			lda #$16
  2751 1F24 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2752 1F27 A9 14			lda #$14
  2753 1F29 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2754 1F2C 20 4D 13			jsr CALCOBSTACLEADDR
  2755 1F2F B4 17			ldy :STACKORIGIN-1,x
  2756 1F31 B5 18			lda :STACKORIGIN,x
  2757 1F33 99 FE 2A			sta adr.OBSTACLES,y
  2758 1F36 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2759 1F38 99 FF 2A			sta adr.OBSTACLES+1,y
  2760 1F3B CA				dex
  2761 1F3C A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2762 1F40 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2763 1F44 A9 0C			lda #$0C
  2764 1F46 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2765 1F49 A9 14			lda #$14
  2766 1F4B 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2767 1F4E 20 4D 13			jsr CALCOBSTACLEADDR
  2768 1F51 B4 17			ldy :STACKORIGIN-1,x
  2769 1F53 B5 18			lda :STACKORIGIN,x
  2770 1F55 99 FE 2A			sta adr.OBSTACLES,y
  2771 1F58 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2772 1F5A 99 FF 2A			sta adr.OBSTACLES+1,y
  2773 1F5D CA				dex
  2774 1F5E CA				dex
  2775 1F5F			@exit
  2776 					.ifdef @new
  2777 					lda <@VarData
  2778 					sta :ztmp
  2779 					lda >@VarData
  2780 					ldy #@VarDataSize-1
  2781 					jmp @FreeMem
  2782 					els
  2783 1F5F 60				rts						; ret
  2784 					eif
  2785 				.endl
  2786
  2787 1F60			.local	SETLEVEL05					; PROCEDURE
  2788
  2789 				; optimize OK (levels.inc), line = 67
  2790
  2791 1F60 A9 01			lda #$01
  2792 1F62 8D 26 2B			sta SETPLAYER.ISALIVE
  2793 1F65 A9 62			lda #$62
  2794 1F67 8D 25 2B			sta SETPLAYER.COLOUR
  2795 1F6A A9 51			lda #$51
  2796 1F6C 8D 24 2B			sta SETPLAYER.HEAD
  2797 1F6F A9 00			lda #$00
  2798 1F71 8D 23 2B			sta SETPLAYER.BRAIN
  2799 1F74 A9 08			lda #$08
  2800 1F76 8D 22 2B			sta SETPLAYER.DIR
  2801 1F79 A9 0C			lda #$0C
  2802 1F7B 8D 21 2B			sta SETPLAYER.Y
  2803 1F7E A9 0A			lda #$0A
  2804 1F80 8D 20 2B			sta SETPLAYER.X
  2805 1F83 AD BF 2A			lda PLAYER1
  2806 1F86 8D 1E 2B			sta SETPLAYER.P
  2807 1F89 AD C0 2A			lda PLAYER1+1
  2808 1F8C 8D 1F 2B			sta SETPLAYER.P+1
  2809 1F8F 20 9F 14			jsr SETPLAYER
  2810
  2811 				; optimize OK (levels.inc), line = 68
  2812
  2813 1F92 A9 01			lda #$01
  2814 1F94 8D 26 2B			sta SETPLAYER.ISALIVE
  2815 1F97 A9 5D			lda #$5D
  2816 1F99 8D 25 2B			sta SETPLAYER.COLOUR
  2817 1F9C A9 51			lda #$51
  2818 1F9E 8D 24 2B			sta SETPLAYER.HEAD
  2819 1FA1 A9 04			lda #$04
  2820 1FA3 8D 23 2B			sta SETPLAYER.BRAIN
  2821 1FA6 8D 22 2B			sta SETPLAYER.DIR
  2822 1FA9 A9 0C			lda #$0C
  2823 1FAB 8D 21 2B			sta SETPLAYER.Y
  2824 1FAE A9 1E			lda #$1E
  2825 1FB0 8D 20 2B			sta SETPLAYER.X
  2826 1FB3 AD C1 2A			lda PLAYER2
  2827 1FB6 8D 1E 2B			sta SETPLAYER.P
  2828 1FB9 AD C2 2A			lda PLAYER2+1
  2829 1FBC 8D 1F 2B			sta SETPLAYER.P+1
  2830 1FBF 20 9F 14			jsr SETPLAYER
  2831
  2832 				; optimize OK (levels.inc), line = 69
  2833
  2834 1FC2 A9 01			lda #$01
  2835 1FC4 8D 26 2B			sta SETPLAYER.ISALIVE
  2836 1FC7 A9 71			lda #$71
  2837 1FC9 8D 25 2B			sta SETPLAYER.COLOUR
  2838 1FCC A9 51			lda #$51
  2839 1FCE 8D 24 2B			sta SETPLAYER.HEAD
  2840 1FD1 A9 03			lda #$03
  2841 1FD3 8D 23 2B			sta SETPLAYER.BRAIN
  2842 1FD6 A9 02			lda #$02
  2843 1FD8 8D 22 2B			sta SETPLAYER.DIR
  2844 1FDB A9 04			lda #$04
  2845 1FDD 8D 21 2B			sta SETPLAYER.Y
  2846 1FE0 A9 14			lda #$14
  2847 1FE2 8D 20 2B			sta SETPLAYER.X
  2848 1FE5 AD C3 2A			lda PLAYER3
  2849 1FE8 8D 1E 2B			sta SETPLAYER.P
  2850 1FEB AD C4 2A			lda PLAYER3+1
  2851 1FEE 8D 1F 2B			sta SETPLAYER.P+1
  2852 1FF1 20 9F 14			jsr SETPLAYER
  2853
  2854 				; optimize OK (levels.inc), line = 70
  2855
  2856 1FF4 A9 01			lda #$01
  2857 1FF6 8D 26 2B			sta SETPLAYER.ISALIVE
  2858 1FF9 A9 55			lda #$55
  2859 1FFB 8D 25 2B			sta SETPLAYER.COLOUR
  2860 1FFE A9 51			lda #$51
  2861 2000 8D 24 2B			sta SETPLAYER.HEAD
  2862 2003 A9 02			lda #$02
  2863 2005 8D 23 2B			sta SETPLAYER.BRAIN
  2864 2008 A9 01			lda #$01
  2865 200A 8D 22 2B			sta SETPLAYER.DIR
  2866 200D A9 12			lda #$12
  2867 200F 8D 21 2B			sta SETPLAYER.Y
  2868 2012 A9 14			lda #$14
  2869 2014 8D 20 2B			sta SETPLAYER.X
  2870 2017 AD C5 2A			lda PLAYER4
  2871 201A 8D 1E 2B			sta SETPLAYER.P
  2872 201D AD C6 2A			lda PLAYER4+1
  2873 2020 8D 1F 2B			sta SETPLAYER.P+1
  2874 2023 20 9F 14			jsr SETPLAYER
  2875
  2876 				; optimize FAIL (1, levels.inc), line = 72
  2877
  2878 2026 E8				inx
  2879 2027 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2880 202B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2881 202D A9 06			lda #$06
  2882 202F 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2883 2032 A9 0A			lda #$0A
  2884 2034 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2885 2037 20 4D 13			jsr CALCOBSTACLEADDR
  2886 203A B4 17			ldy :STACKORIGIN-1,x
  2887 203C B5 18			lda :STACKORIGIN,x
  2888 203E 99 FE 2A			sta adr.OBSTACLES,y
  2889 2041 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2890 2043 99 FF 2A			sta adr.OBSTACLES+1,y
  2891 2046 CA				dex
  2892 2047 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2893 204B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2894 204F A9 06			lda #$06
  2895 2051 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2896 2054 A9 1E			lda #$1E
  2897 2056 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2898 2059 20 4D 13			jsr CALCOBSTACLEADDR
  2899 205C B4 17			ldy :STACKORIGIN-1,x
  2900 205E B5 18			lda :STACKORIGIN,x
  2901 2060 99 FE 2A			sta adr.OBSTACLES,y
  2902 2063 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2903 2065 99 FF 2A			sta adr.OBSTACLES+1,y
  2904 2068 CA				dex
  2905
  2906 				; optimize FAIL (1, levels.inc), line = 73
  2907
  2908 2069 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2909 206D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2910 2071 A9 12			lda #$12
  2911 2073 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2912 2076 A9 0A			lda #$0A
  2913 2078 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2914 207B 20 4D 13			jsr CALCOBSTACLEADDR
  2915 207E B4 17			ldy :STACKORIGIN-1,x
  2916 2080 B5 18			lda :STACKORIGIN,x
  2917 2082 99 FE 2A			sta adr.OBSTACLES,y
  2918 2085 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2919 2087 99 FF 2A			sta adr.OBSTACLES+1,y
  2920 208A CA				dex
  2921 208B A9 06 95 18			mva #$06 :STACKORIGIN,x
  2922 208F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2923 2093 A9 12			lda #$12
  2924 2095 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2925 2098 A9 1E			lda #$1E
  2926 209A 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2927 209D 20 4D 13			jsr CALCOBSTACLEADDR
  2928 20A0 B4 17			ldy :STACKORIGIN-1,x
  2929 20A2 B5 18			lda :STACKORIGIN,x
  2930 20A4 99 FE 2A			sta adr.OBSTACLES,y
  2931 20A7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2932 20A9 99 FF 2A			sta adr.OBSTACLES+1,y
  2933 20AC CA				dex
  2934
  2935 				; optimize FAIL (1, levels.inc), line = 74
  2936
  2937 20AD A9 08 95 18			mva #$08 :STACKORIGIN,x
  2938 20B1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2939 20B5 A9 0C			lda #$0C
  2940 20B7 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2941 20BA A9 01			lda #$01
  2942 20BC 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2943 20BF 20 4D 13			jsr CALCOBSTACLEADDR
  2944 20C2 B4 17			ldy :STACKORIGIN-1,x
  2945 20C4 B5 18			lda :STACKORIGIN,x
  2946 20C6 99 FE 2A			sta adr.OBSTACLES,y
  2947 20C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2948 20CB 99 FF 2A			sta adr.OBSTACLES+1,y
  2949 20CE CA				dex
  2950 20CF A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2951 20D3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2952 20D7 A9 02			lda #$02
  2953 20D9 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2954 20DC A9 14			lda #$14
  2955 20DE 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2956 20E1 20 4D 13			jsr CALCOBSTACLEADDR
  2957 20E4 B4 17			ldy :STACKORIGIN-1,x
  2958 20E6 B5 18			lda :STACKORIGIN,x
  2959 20E8 99 FE 2A			sta adr.OBSTACLES,y
  2960 20EB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2961 20ED 99 FF 2A			sta adr.OBSTACLES+1,y
  2962 20F0 CA				dex
  2963
  2964 				; optimize FAIL (1, levels.inc), line = 75
  2965
  2966 20F1 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2967 20F5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2968 20F9 A9 16			lda #$16
  2969 20FB 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  2970 20FE A9 14			lda #$14
  2971 2100 8D 1A 2B			sta CALCOBSTACLEADDR.X
  2972 2103 20 4D 13			jsr CALCOBSTACLEADDR
  2973 2106 B4 17			ldy :STACKORIGIN-1,x
  2974 2108 B5 18			lda :STACKORIGIN,x
  2975 210A 99 FE 2A			sta adr.OBSTACLES,y
  2976 210D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2977 210F 99 FF 2A			sta adr.OBSTACLES+1,y
  2978 2112 CA				dex
  2979 2113 CA				dex
  2980 2114			@exit
  2981 					.ifdef @new
  2982 					lda <@VarData
  2983 					sta :ztmp
  2984 					lda >@VarData
  2985 					ldy #@VarDataSize-1
  2986 					jmp @FreeMem
  2987 					els
  2988 2114 60				rts						; ret
  2989 					eif
  2990 				.endl
  2991
  2992 2115			.local	SETLEVEL06					; PROCEDURE
  2993
  2994 				; optimize OK (levels.inc), line = 82
  2995
  2996 2115 A9 01			lda #$01
  2997 2117 8D 26 2B			sta SETPLAYER.ISALIVE
  2998 211A A9 62			lda #$62
  2999 211C 8D 25 2B			sta SETPLAYER.COLOUR
  3000 211F A9 51			lda #$51
  3001 2121 8D 24 2B			sta SETPLAYER.HEAD
  3002 2124 A9 00			lda #$00
  3003 2126 8D 23 2B			sta SETPLAYER.BRAIN
  3004 2129 A9 04			lda #$04
  3005 212B 8D 22 2B			sta SETPLAYER.DIR
  3006 212E A9 0C			lda #$0C
  3007 2130 8D 21 2B			sta SETPLAYER.Y
  3008 2133 A9 12			lda #$12
  3009 2135 8D 20 2B			sta SETPLAYER.X
  3010 2138 AD BF 2A			lda PLAYER1
  3011 213B 8D 1E 2B			sta SETPLAYER.P
  3012 213E AD C0 2A			lda PLAYER1+1
  3013 2141 8D 1F 2B			sta SETPLAYER.P+1
  3014 2144 20 9F 14			jsr SETPLAYER
  3015
  3016 				; optimize OK (levels.inc), line = 83
  3017
  3018 2147 A9 01			lda #$01
  3019 2149 8D 26 2B			sta SETPLAYER.ISALIVE
  3020 214C A9 5D			lda #$5D
  3021 214E 8D 25 2B			sta SETPLAYER.COLOUR
  3022 2151 A9 51			lda #$51
  3023 2153 8D 24 2B			sta SETPLAYER.HEAD
  3024 2156 A9 02			lda #$02
  3025 2158 8D 23 2B			sta SETPLAYER.BRAIN
  3026 215B A9 08			lda #$08
  3027 215D 8D 22 2B			sta SETPLAYER.DIR
  3028 2160 A9 0C			lda #$0C
  3029 2162 8D 21 2B			sta SETPLAYER.Y
  3030 2165 A9 16			lda #$16
  3031 2167 8D 20 2B			sta SETPLAYER.X
  3032 216A AD C1 2A			lda PLAYER2
  3033 216D 8D 1E 2B			sta SETPLAYER.P
  3034 2170 AD C2 2A			lda PLAYER2+1
  3035 2173 8D 1F 2B			sta SETPLAYER.P+1
  3036 2176 20 9F 14			jsr SETPLAYER
  3037
  3038 				; optimize OK (levels.inc), line = 84
  3039
  3040 2179 A9 01			lda #$01
  3041 217B 8D 26 2B			sta SETPLAYER.ISALIVE
  3042 217E A9 71			lda #$71
  3043 2180 8D 25 2B			sta SETPLAYER.COLOUR
  3044 2183 A9 51			lda #$51
  3045 2185 8D 24 2B			sta SETPLAYER.HEAD
  3046 2188 A9 02			lda #$02
  3047 218A 8D 23 2B			sta SETPLAYER.BRAIN
  3048 218D 8D 22 2B			sta SETPLAYER.DIR
  3049 2190 A9 06			lda #$06
  3050 2192 8D 21 2B			sta SETPLAYER.Y
  3051 2195 8D 20 2B			sta SETPLAYER.X
  3052 2198 AD C3 2A			lda PLAYER3
  3053 219B 8D 1E 2B			sta SETPLAYER.P
  3054 219E AD C4 2A			lda PLAYER3+1
  3055 21A1 8D 1F 2B			sta SETPLAYER.P+1
  3056 21A4 20 9F 14			jsr SETPLAYER
  3057
  3058 				; optimize OK (levels.inc), line = 85
  3059
  3060 21A7 A9 01			lda #$01
  3061 21A9 8D 26 2B			sta SETPLAYER.ISALIVE
  3062 21AC A9 55			lda #$55
  3063 21AE 8D 25 2B			sta SETPLAYER.COLOUR
  3064 21B1 A9 51			lda #$51
  3065 21B3 8D 24 2B			sta SETPLAYER.HEAD
  3066 21B6 A9 03			lda #$03
  3067 21B8 8D 23 2B			sta SETPLAYER.BRAIN
  3068 21BB A9 08			lda #$08
  3069 21BD 8D 22 2B			sta SETPLAYER.DIR
  3070 21C0 A9 12			lda #$12
  3071 21C2 8D 21 2B			sta SETPLAYER.Y
  3072 21C5 A9 24			lda #$24
  3073 21C7 8D 20 2B			sta SETPLAYER.X
  3074 21CA AD C5 2A			lda PLAYER4
  3075 21CD 8D 1E 2B			sta SETPLAYER.P
  3076 21D0 AD C6 2A			lda PLAYER4+1
  3077 21D3 8D 1F 2B			sta SETPLAYER.P+1
  3078 21D6 20 9F 14			jsr SETPLAYER
  3079
  3080 				; optimize FAIL (1, levels.inc), line = 87
  3081
  3082 21D9 E8				inx
  3083 21DA A9 00 95 18			mva #$00 :STACKORIGIN,x
  3084 21DE 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3085 21E0 A9 06			lda #$06
  3086 21E2 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3087 21E5 A9 0A			lda #$0A
  3088 21E7 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3089 21EA 20 4D 13			jsr CALCOBSTACLEADDR
  3090 21ED B4 17			ldy :STACKORIGIN-1,x
  3091 21EF B5 18			lda :STACKORIGIN,x
  3092 21F1 99 FE 2A			sta adr.OBSTACLES,y
  3093 21F4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3094 21F6 99 FF 2A			sta adr.OBSTACLES+1,y
  3095 21F9 CA				dex
  3096 21FA A9 02 95 18			mva #$02 :STACKORIGIN,x
  3097 21FE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3098 2202 A9 06			lda #$06
  3099 2204 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3100 2207 A9 1E			lda #$1E
  3101 2209 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3102 220C 20 4D 13			jsr CALCOBSTACLEADDR
  3103 220F B4 17			ldy :STACKORIGIN-1,x
  3104 2211 B5 18			lda :STACKORIGIN,x
  3105 2213 99 FE 2A			sta adr.OBSTACLES,y
  3106 2216 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3107 2218 99 FF 2A			sta adr.OBSTACLES+1,y
  3108 221B CA				dex
  3109
  3110 				; optimize FAIL (1, levels.inc), line = 88
  3111
  3112 221C A9 04 95 18			mva #$04 :STACKORIGIN,x
  3113 2220 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3114 2224 A9 12			lda #$12
  3115 2226 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3116 2229 A9 0A			lda #$0A
  3117 222B 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3118 222E 20 4D 13			jsr CALCOBSTACLEADDR
  3119 2231 B4 17			ldy :STACKORIGIN-1,x
  3120 2233 B5 18			lda :STACKORIGIN,x
  3121 2235 99 FE 2A			sta adr.OBSTACLES,y
  3122 2238 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3123 223A 99 FF 2A			sta adr.OBSTACLES+1,y
  3124 223D CA				dex
  3125 223E A9 06 95 18			mva #$06 :STACKORIGIN,x
  3126 2242 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3127 2246 A9 12			lda #$12
  3128 2248 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3129 224B A9 1E			lda #$1E
  3130 224D 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3131 2250 20 4D 13			jsr CALCOBSTACLEADDR
  3132 2253 B4 17			ldy :STACKORIGIN-1,x
  3133 2255 B5 18			lda :STACKORIGIN,x
  3134 2257 99 FE 2A			sta adr.OBSTACLES,y
  3135 225A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3136 225C 99 FF 2A			sta adr.OBSTACLES+1,y
  3137 225F CA				dex
  3138
  3139 				; optimize FAIL (1, levels.inc), line = 89
  3140
  3141 2260 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3142 2264 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3143 2268 A9 0C			lda #$0C
  3144 226A 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3145 226D A9 01			lda #$01
  3146 226F 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3147 2272 20 4D 13			jsr CALCOBSTACLEADDR
  3148 2275 B4 17			ldy :STACKORIGIN-1,x
  3149 2277 B5 18			lda :STACKORIGIN,x
  3150 2279 99 FE 2A			sta adr.OBSTACLES,y
  3151 227C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3152 227E 99 FF 2A			sta adr.OBSTACLES+1,y
  3153 2281 CA				dex
  3154 2282 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3155 2286 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3156 228A A9 02			lda #$02
  3157 228C 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3158 228F A9 14			lda #$14
  3159 2291 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3160 2294 20 4D 13			jsr CALCOBSTACLEADDR
  3161 2297 B4 17			ldy :STACKORIGIN-1,x
  3162 2299 B5 18			lda :STACKORIGIN,x
  3163 229B 99 FE 2A			sta adr.OBSTACLES,y
  3164 229E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3165 22A0 99 FF 2A			sta adr.OBSTACLES+1,y
  3166 22A3 CA				dex
  3167
  3168 				; optimize FAIL (1, levels.inc), line = 90
  3169
  3170 22A4 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3171 22A8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3172 22AC A9 16			lda #$16
  3173 22AE 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3174 22B1 A9 14			lda #$14
  3175 22B3 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3176 22B6 20 4D 13			jsr CALCOBSTACLEADDR
  3177 22B9 B4 17			ldy :STACKORIGIN-1,x
  3178 22BB B5 18			lda :STACKORIGIN,x
  3179 22BD 99 FE 2A			sta adr.OBSTACLES,y
  3180 22C0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3181 22C2 99 FF 2A			sta adr.OBSTACLES+1,y
  3182 22C5 CA				dex
  3183 22C6 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3184 22CA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3185 22CE A9 0C			lda #$0C
  3186 22D0 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3187 22D3 A9 14			lda #$14
  3188 22D5 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3189 22D8 20 4D 13			jsr CALCOBSTACLEADDR
  3190 22DB B4 17			ldy :STACKORIGIN-1,x
  3191 22DD B5 18			lda :STACKORIGIN,x
  3192 22DF 99 FE 2A			sta adr.OBSTACLES,y
  3193 22E2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3194 22E4 99 FF 2A			sta adr.OBSTACLES+1,y
  3195 22E7 CA				dex
  3196 22E8 CA				dex
  3197 22E9			@exit
  3198 					.ifdef @new
  3199 					lda <@VarData
  3200 					sta :ztmp
  3201 					lda >@VarData
  3202 					ldy #@VarDataSize-1
  3203 					jmp @FreeMem
  3204 					els
  3205 22E9 60				rts						; ret
  3206 					eif
  3207 				.endl
  3208
  3209 22EA			.local	SETLEVEL07					; PROCEDURE
  3210
  3211 				; optimize OK (levels.inc), line = 97
  3212
  3213 22EA A9 01			lda #$01
  3214 22EC 8D 26 2B			sta SETPLAYER.ISALIVE
  3215 22EF A9 62			lda #$62
  3216 22F1 8D 25 2B			sta SETPLAYER.COLOUR
  3217 22F4 A9 51			lda #$51
  3218 22F6 8D 24 2B			sta SETPLAYER.HEAD
  3219 22F9 A9 00			lda #$00
  3220 22FB 8D 23 2B			sta SETPLAYER.BRAIN
  3221 22FE A9 04			lda #$04
  3222 2300 8D 22 2B			sta SETPLAYER.DIR
  3223 2303 A9 0C			lda #$0C
  3224 2305 8D 21 2B			sta SETPLAYER.Y
  3225 2308 A9 12			lda #$12
  3226 230A 8D 20 2B			sta SETPLAYER.X
  3227 230D AD BF 2A			lda PLAYER1
  3228 2310 8D 1E 2B			sta SETPLAYER.P
  3229 2313 AD C0 2A			lda PLAYER1+1
  3230 2316 8D 1F 2B			sta SETPLAYER.P+1
  3231 2319 20 9F 14			jsr SETPLAYER
  3232
  3233 				; optimize OK (levels.inc), line = 98
  3234
  3235 231C A9 01			lda #$01
  3236 231E 8D 26 2B			sta SETPLAYER.ISALIVE
  3237 2321 A9 5D			lda #$5D
  3238 2323 8D 25 2B			sta SETPLAYER.COLOUR
  3239 2326 A9 51			lda #$51
  3240 2328 8D 24 2B			sta SETPLAYER.HEAD
  3241 232B A9 03			lda #$03
  3242 232D 8D 23 2B			sta SETPLAYER.BRAIN
  3243 2330 A9 08			lda #$08
  3244 2332 8D 22 2B			sta SETPLAYER.DIR
  3245 2335 A9 17			lda #$17
  3246 2337 8D 21 2B			sta SETPLAYER.Y
  3247 233A A9 01			lda #$01
  3248 233C 8D 20 2B			sta SETPLAYER.X
  3249 233F AD C1 2A			lda PLAYER2
  3250 2342 8D 1E 2B			sta SETPLAYER.P
  3251 2345 AD C2 2A			lda PLAYER2+1
  3252 2348 8D 1F 2B			sta SETPLAYER.P+1
  3253 234B 20 9F 14			jsr SETPLAYER
  3254
  3255 				; optimize OK (levels.inc), line = 99
  3256
  3257 234E A9 01			lda #$01
  3258 2350 8D 26 2B			sta SETPLAYER.ISALIVE
  3259 2353 A9 71			lda #$71
  3260 2355 8D 25 2B			sta SETPLAYER.COLOUR
  3261 2358 A9 51			lda #$51
  3262 235A 8D 24 2B			sta SETPLAYER.HEAD
  3263 235D A9 03			lda #$03
  3264 235F 8D 23 2B			sta SETPLAYER.BRAIN
  3265 2362 A9 02			lda #$02
  3266 2364 8D 22 2B			sta SETPLAYER.DIR
  3267 2367 A9 04			lda #$04
  3268 2369 8D 21 2B			sta SETPLAYER.Y
  3269 236C A9 1E			lda #$1E
  3270 236E 8D 20 2B			sta SETPLAYER.X
  3271 2371 AD C3 2A			lda PLAYER3
  3272 2374 8D 1E 2B			sta SETPLAYER.P
  3273 2377 AD C4 2A			lda PLAYER3+1
  3274 237A 8D 1F 2B			sta SETPLAYER.P+1
  3275 237D 20 9F 14			jsr SETPLAYER
  3276
  3277 				; optimize OK (levels.inc), line = 100
  3278
  3279 2380 A9 01			lda #$01
  3280 2382 8D 26 2B			sta SETPLAYER.ISALIVE
  3281 2385 A9 55			lda #$55
  3282 2387 8D 25 2B			sta SETPLAYER.COLOUR
  3283 238A A9 51			lda #$51
  3284 238C 8D 24 2B			sta SETPLAYER.HEAD
  3285 238F A9 02			lda #$02
  3286 2391 8D 23 2B			sta SETPLAYER.BRAIN
  3287 2394 A9 01			lda #$01
  3288 2396 8D 22 2B			sta SETPLAYER.DIR
  3289 2399 A9 15			lda #$15
  3290 239B 8D 21 2B			sta SETPLAYER.Y
  3291 239E A9 24			lda #$24
  3292 23A0 8D 20 2B			sta SETPLAYER.X
  3293 23A3 AD C5 2A			lda PLAYER4
  3294 23A6 8D 1E 2B			sta SETPLAYER.P
  3295 23A9 AD C6 2A			lda PLAYER4+1
  3296 23AC 8D 1F 2B			sta SETPLAYER.P+1
  3297 23AF 20 9F 14			jsr SETPLAYER
  3298
  3299 				; optimize FAIL (1, levels.inc), line = 102
  3300
  3301 23B2 E8				inx
  3302 23B3 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3303 23B7 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3304 23B9 A9 06			lda #$06
  3305 23BB 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3306 23BE A9 0A			lda #$0A
  3307 23C0 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3308 23C3 20 4D 13			jsr CALCOBSTACLEADDR
  3309 23C6 B4 17			ldy :STACKORIGIN-1,x
  3310 23C8 B5 18			lda :STACKORIGIN,x
  3311 23CA 99 FE 2A			sta adr.OBSTACLES,y
  3312 23CD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3313 23CF 99 FF 2A			sta adr.OBSTACLES+1,y
  3314 23D2 CA				dex
  3315 23D3 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3316 23D7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3317 23DB A9 06			lda #$06
  3318 23DD 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3319 23E0 A9 1E			lda #$1E
  3320 23E2 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3321 23E5 20 4D 13			jsr CALCOBSTACLEADDR
  3322 23E8 B4 17			ldy :STACKORIGIN-1,x
  3323 23EA B5 18			lda :STACKORIGIN,x
  3324 23EC 99 FE 2A			sta adr.OBSTACLES,y
  3325 23EF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3326 23F1 99 FF 2A			sta adr.OBSTACLES+1,y
  3327 23F4 CA				dex
  3328
  3329 				; optimize FAIL (1, levels.inc), line = 103
  3330
  3331 23F5 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3332 23F9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3333 23FD A9 12			lda #$12
  3334 23FF 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3335 2402 A9 0A			lda #$0A
  3336 2404 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3337 2407 20 4D 13			jsr CALCOBSTACLEADDR
  3338 240A B4 17			ldy :STACKORIGIN-1,x
  3339 240C B5 18			lda :STACKORIGIN,x
  3340 240E 99 FE 2A			sta adr.OBSTACLES,y
  3341 2411 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3342 2413 99 FF 2A			sta adr.OBSTACLES+1,y
  3343 2416 CA				dex
  3344 2417 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3345 241B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3346 241F A9 12			lda #$12
  3347 2421 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3348 2424 A9 1E			lda #$1E
  3349 2426 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3350 2429 20 4D 13			jsr CALCOBSTACLEADDR
  3351 242C B4 17			ldy :STACKORIGIN-1,x
  3352 242E B5 18			lda :STACKORIGIN,x
  3353 2430 99 FE 2A			sta adr.OBSTACLES,y
  3354 2433 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3355 2435 99 FF 2A			sta adr.OBSTACLES+1,y
  3356 2438 CA				dex
  3357
  3358 				; optimize FAIL (1, levels.inc), line = 104
  3359
  3360 2439 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3361 243D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3362 2441 A9 0C			lda #$0C
  3363 2443 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3364 2446 A9 01			lda #$01
  3365 2448 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3366 244B 20 4D 13			jsr CALCOBSTACLEADDR
  3367 244E B4 17			ldy :STACKORIGIN-1,x
  3368 2450 B5 18			lda :STACKORIGIN,x
  3369 2452 99 FE 2A			sta adr.OBSTACLES,y
  3370 2455 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3371 2457 99 FF 2A			sta adr.OBSTACLES+1,y
  3372 245A CA				dex
  3373 245B A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3374 245F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3375 2463 A9 02			lda #$02
  3376 2465 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3377 2468 A9 14			lda #$14
  3378 246A 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3379 246D 20 4D 13			jsr CALCOBSTACLEADDR
  3380 2470 B4 17			ldy :STACKORIGIN-1,x
  3381 2472 B5 18			lda :STACKORIGIN,x
  3382 2474 99 FE 2A			sta adr.OBSTACLES,y
  3383 2477 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3384 2479 99 FF 2A			sta adr.OBSTACLES+1,y
  3385 247C CA				dex
  3386
  3387 				; optimize FAIL (1, levels.inc), line = 105
  3388
  3389 247D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3390 2481 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3391 2485 A9 16			lda #$16
  3392 2487 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3393 248A A9 14			lda #$14
  3394 248C 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3395 248F 20 4D 13			jsr CALCOBSTACLEADDR
  3396 2492 B4 17			ldy :STACKORIGIN-1,x
  3397 2494 B5 18			lda :STACKORIGIN,x
  3398 2496 99 FE 2A			sta adr.OBSTACLES,y
  3399 2499 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3400 249B 99 FF 2A			sta adr.OBSTACLES+1,y
  3401 249E CA				dex
  3402 249F A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3403 24A3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3404 24A7 A9 0C			lda #$0C
  3405 24A9 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3406 24AC A9 14			lda #$14
  3407 24AE 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3408 24B1 20 4D 13			jsr CALCOBSTACLEADDR
  3409 24B4 B4 17			ldy :STACKORIGIN-1,x
  3410 24B6 B5 18			lda :STACKORIGIN,x
  3411 24B8 99 FE 2A			sta adr.OBSTACLES,y
  3412 24BB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3413 24BD 99 FF 2A			sta adr.OBSTACLES+1,y
  3414 24C0 CA				dex
  3415 24C1 CA				dex
  3416 24C2			@exit
  3417 					.ifdef @new
  3418 					lda <@VarData
  3419 					sta :ztmp
  3420 					lda >@VarData
  3421 					ldy #@VarDataSize-1
  3422 					jmp @FreeMem
  3423 					els
  3424 24C2 60				rts						; ret
  3425 					eif
  3426 				.endl
  3427
  3428 24C3			.local	SETLEVEL08					; PROCEDURE
  3429
  3430 				; optimize OK (levels.inc), line = 112
  3431
  3432 24C3 A9 01			lda #$01
  3433 24C5 8D 26 2B			sta SETPLAYER.ISALIVE
  3434 24C8 A9 62			lda #$62
  3435 24CA 8D 25 2B			sta SETPLAYER.COLOUR
  3436 24CD A9 51			lda #$51
  3437 24CF 8D 24 2B			sta SETPLAYER.HEAD
  3438 24D2 A9 00			lda #$00
  3439 24D4 8D 23 2B			sta SETPLAYER.BRAIN
  3440 24D7 A9 08			lda #$08
  3441 24D9 8D 22 2B			sta SETPLAYER.DIR
  3442 24DC A9 17			lda #$17
  3443 24DE 8D 21 2B			sta SETPLAYER.Y
  3444 24E1 A9 01			lda #$01
  3445 24E3 8D 20 2B			sta SETPLAYER.X
  3446 24E6 AD BF 2A			lda PLAYER1
  3447 24E9 8D 1E 2B			sta SETPLAYER.P
  3448 24EC AD C0 2A			lda PLAYER1+1
  3449 24EF 8D 1F 2B			sta SETPLAYER.P+1
  3450 24F2 20 9F 14			jsr SETPLAYER
  3451
  3452 				; optimize OK (levels.inc), line = 113
  3453
  3454 24F5 A9 01			lda #$01
  3455 24F7 8D 26 2B			sta SETPLAYER.ISALIVE
  3456 24FA A9 5D			lda #$5D
  3457 24FC 8D 25 2B			sta SETPLAYER.COLOUR
  3458 24FF A9 51			lda #$51
  3459 2501 8D 24 2B			sta SETPLAYER.HEAD
  3460 2504 A9 03			lda #$03
  3461 2506 8D 23 2B			sta SETPLAYER.BRAIN
  3462 2509 A9 04			lda #$04
  3463 250B 8D 22 2B			sta SETPLAYER.DIR
  3464 250E A9 17			lda #$17
  3465 2510 8D 21 2B			sta SETPLAYER.Y
  3466 2513 A9 26			lda #$26
  3467 2515 8D 20 2B			sta SETPLAYER.X
  3468 2518 AD C1 2A			lda PLAYER2
  3469 251B 8D 1E 2B			sta SETPLAYER.P
  3470 251E AD C2 2A			lda PLAYER2+1
  3471 2521 8D 1F 2B			sta SETPLAYER.P+1
  3472 2524 20 9F 14			jsr SETPLAYER
  3473
  3474 				; optimize OK (levels.inc), line = 114
  3475
  3476 2527 A9 01			lda #$01
  3477 2529 8D 26 2B			sta SETPLAYER.ISALIVE
  3478 252C A9 71			lda #$71
  3479 252E 8D 25 2B			sta SETPLAYER.COLOUR
  3480 2531 A9 51			lda #$51
  3481 2533 8D 24 2B			sta SETPLAYER.HEAD
  3482 2536 A9 02			lda #$02
  3483 2538 8D 23 2B			sta SETPLAYER.BRAIN
  3484 253B 8D 22 2B			sta SETPLAYER.DIR
  3485 253E A9 01			lda #$01
  3486 2540 8D 21 2B			sta SETPLAYER.Y
  3487 2543 A9 0A			lda #$0A
  3488 2545 8D 20 2B			sta SETPLAYER.X
  3489 2548 AD C3 2A			lda PLAYER3
  3490 254B 8D 1E 2B			sta SETPLAYER.P
  3491 254E AD C4 2A			lda PLAYER3+1
  3492 2551 8D 1F 2B			sta SETPLAYER.P+1
  3493 2554 20 9F 14			jsr SETPLAYER
  3494
  3495 				; optimize OK (levels.inc), line = 115
  3496
  3497 2557 A9 01			lda #$01
  3498 2559 8D 26 2B			sta SETPLAYER.ISALIVE
  3499 255C A9 55			lda #$55
  3500 255E 8D 25 2B			sta SETPLAYER.COLOUR
  3501 2561 A9 51			lda #$51
  3502 2563 8D 24 2B			sta SETPLAYER.HEAD
  3503 2566 A9 04			lda #$04
  3504 2568 8D 23 2B			sta SETPLAYER.BRAIN
  3505 256B 8D 22 2B			sta SETPLAYER.DIR
  3506 256E A9 01			lda #$01
  3507 2570 8D 21 2B			sta SETPLAYER.Y
  3508 2573 A9 26			lda #$26
  3509 2575 8D 20 2B			sta SETPLAYER.X
  3510 2578 AD C5 2A			lda PLAYER4
  3511 257B 8D 1E 2B			sta SETPLAYER.P
  3512 257E AD C6 2A			lda PLAYER4+1
  3513 2581 8D 1F 2B			sta SETPLAYER.P+1
  3514 2584 20 9F 14			jsr SETPLAYER
  3515
  3516 				; optimize FAIL (1, levels.inc), line = 117
  3517
  3518 2587 E8				inx
  3519 2588 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3520 258C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3521 258E A9 06			lda #$06
  3522 2590 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3523 2593 A9 0A			lda #$0A
  3524 2595 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3525 2598 20 4D 13			jsr CALCOBSTACLEADDR
  3526 259B B4 17			ldy :STACKORIGIN-1,x
  3527 259D B5 18			lda :STACKORIGIN,x
  3528 259F 99 FE 2A			sta adr.OBSTACLES,y
  3529 25A2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3530 25A4 99 FF 2A			sta adr.OBSTACLES+1,y
  3531 25A7 CA				dex
  3532 25A8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3533 25AC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3534 25B0 A9 06			lda #$06
  3535 25B2 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3536 25B5 A9 1E			lda #$1E
  3537 25B7 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3538 25BA 20 4D 13			jsr CALCOBSTACLEADDR
  3539 25BD B4 17			ldy :STACKORIGIN-1,x
  3540 25BF B5 18			lda :STACKORIGIN,x
  3541 25C1 99 FE 2A			sta adr.OBSTACLES,y
  3542 25C4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3543 25C6 99 FF 2A			sta adr.OBSTACLES+1,y
  3544 25C9 CA				dex
  3545
  3546 				; optimize FAIL (1, levels.inc), line = 118
  3547
  3548 25CA A9 04 95 18			mva #$04 :STACKORIGIN,x
  3549 25CE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3550 25D2 A9 12			lda #$12
  3551 25D4 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3552 25D7 A9 0A			lda #$0A
  3553 25D9 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3554 25DC 20 4D 13			jsr CALCOBSTACLEADDR
  3555 25DF B4 17			ldy :STACKORIGIN-1,x
  3556 25E1 B5 18			lda :STACKORIGIN,x
  3557 25E3 99 FE 2A			sta adr.OBSTACLES,y
  3558 25E6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3559 25E8 99 FF 2A			sta adr.OBSTACLES+1,y
  3560 25EB CA				dex
  3561 25EC A9 06 95 18			mva #$06 :STACKORIGIN,x
  3562 25F0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3563 25F4 A9 12			lda #$12
  3564 25F6 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3565 25F9 A9 1E			lda #$1E
  3566 25FB 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3567 25FE 20 4D 13			jsr CALCOBSTACLEADDR
  3568 2601 B4 17			ldy :STACKORIGIN-1,x
  3569 2603 B5 18			lda :STACKORIGIN,x
  3570 2605 99 FE 2A			sta adr.OBSTACLES,y
  3571 2608 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3572 260A 99 FF 2A			sta adr.OBSTACLES+1,y
  3573 260D CA				dex
  3574
  3575 				; optimize FAIL (1, levels.inc), line = 119
  3576
  3577 260E A9 08 95 18			mva #$08 :STACKORIGIN,x
  3578 2612 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3579 2616 A9 0C			lda #$0C
  3580 2618 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3581 261B A9 01			lda #$01
  3582 261D 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3583 2620 20 4D 13			jsr CALCOBSTACLEADDR
  3584 2623 B4 17			ldy :STACKORIGIN-1,x
  3585 2625 B5 18			lda :STACKORIGIN,x
  3586 2627 99 FE 2A			sta adr.OBSTACLES,y
  3587 262A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3588 262C 99 FF 2A			sta adr.OBSTACLES+1,y
  3589 262F CA				dex
  3590 2630 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3591 2634 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3592 2638 A9 02			lda #$02
  3593 263A 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3594 263D A9 14			lda #$14
  3595 263F 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3596 2642 20 4D 13			jsr CALCOBSTACLEADDR
  3597 2645 B4 17			ldy :STACKORIGIN-1,x
  3598 2647 B5 18			lda :STACKORIGIN,x
  3599 2649 99 FE 2A			sta adr.OBSTACLES,y
  3600 264C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3601 264E 99 FF 2A			sta adr.OBSTACLES+1,y
  3602 2651 CA				dex
  3603
  3604 				; optimize FAIL (1, levels.inc), line = 120
  3605
  3606 2652 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3607 2656 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3608 265A A9 16			lda #$16
  3609 265C 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3610 265F A9 14			lda #$14
  3611 2661 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3612 2664 20 4D 13			jsr CALCOBSTACLEADDR
  3613 2667 B4 17			ldy :STACKORIGIN-1,x
  3614 2669 B5 18			lda :STACKORIGIN,x
  3615 266B 99 FE 2A			sta adr.OBSTACLES,y
  3616 266E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3617 2670 99 FF 2A			sta adr.OBSTACLES+1,y
  3618 2673 CA				dex
  3619 2674 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3620 2678 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3621 267C A9 0C			lda #$0C
  3622 267E 8D 1B 2B			sta CALCOBSTACLEADDR.Y
  3623 2681 A9 14			lda #$14
  3624 2683 8D 1A 2B			sta CALCOBSTACLEADDR.X
  3625 2686 20 4D 13			jsr CALCOBSTACLEADDR
  3626 2689 B4 17			ldy :STACKORIGIN-1,x
  3627 268B B5 18			lda :STACKORIGIN,x
  3628 268D 99 FE 2A			sta adr.OBSTACLES,y
  3629 2690 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3630 2692 99 FF 2A			sta adr.OBSTACLES+1,y
  3631 2695 CA				dex
  3632 2696 CA				dex
  3633 2697			@exit
  3634 					.ifdef @new
  3635 					lda <@VarData
  3636 					sta :ztmp
  3637 					lda >@VarData
  3638 					ldy #@VarDataSize-1
  3639 					jmp @FreeMem
  3640 					els
  3641 2697 60				rts						; ret
  3642 					eif
  3643 				.endl
  3644
  3645 2698			.local	INITPLAYFIELD					; PROCEDURE
  3646
  3647 				; optimize OK (init.inc), line = 5
  3648
  3649 2698 A9 1F			lda #$1F
  3650 269A 8D 15 FF			sta BACKGROUND
  3651 269D A9 00			lda #$00
  3652 269F 8D 19 FF			sta BOREDER
  3653
  3654 				; optimize OK (init.inc), line = 6
  3655
  3656 26A2 A9 20			lda #$20
  3657 26A4 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3658 26A6 A9 C0			lda #$C0
  3659 26A8 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3660 26AA A9 03			lda #$03
  3661 26AC 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3662 26AE A9 00			lda #$00
  3663 26B0 85 08			sta SYSTEM.FILLCHAR_0056.A
  3664 26B2 A9 0C			lda #$0C
  3665 26B4 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3666 26B6 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3667
  3668 				; optimize OK (init.inc), line = 8
  3669
  3670 26B9 A9 27			lda #$27
  3671 26BB 85 58			sta T0B
  3672
  3673 26BD			l_0D12
  3674 				; --- ForToDoCondition
  3675
  3676 				; optimize OK (init.inc), line = 9
  3677
  3678 26BD A4 58			ldy T0B
  3679 26BF A9 A0			lda #$A0
  3680 26C1 99 00 0C			sta $0C00,y
  3681
  3682 				; optimize OK (init.inc), line = 10
  3683
  3684 26C4 99 C0 0F			sta $0FC0,y
  3685
  3686 				; optimize OK (init.inc), line = 11
  3687
  3688 26C7 A9 41			lda #$41
  3689 26C9 99 00 08			sta $0800,y
  3690
  3691 				; optimize OK (init.inc), line = 12
  3692
  3693 26CC 99 C0 0B			sta $0BC0,y
  3694
  3695 				; --- ForToDoEpilog
  3696 26CF C6 58			dec T0B
  3697 26D1 10 EA			jpl l_0D12
  3698 26D3			l_0D20
  3699
  3700 				; optimize OK (init.inc), line = 15
  3701
  3702 26D3 A9 18			lda #$18
  3703 26D5 85 58			sta T0B
  3704
  3705 26D7			l_0D52
  3706 				; --- ForToDoCondition
  3707 26D7 A5 58			lda T0B
  3708 26D9 C9 01			cmp #$01
  3709 26DB 90 3A			jcc l_0D60
  3710
  3711 				; optimize OK (init.inc), line = 16
  3712
  3713 26DD 0A				asl @
  3714 26DE A8				tay
  3715 26DF A9 FF			lda #$FF
  3716 26E1 18 79 0E 10			add adr.MUL40,y
  3717 26E5 85 12			sta :bp2
  3718 26E7 A9 0B			lda #$0B
  3719 26E9 79 0F 10			adc adr.MUL40+1,y
  3720 26EC 85 13			sta :bp2+1
  3721 26EE A0 00			ldy #$00
  3722 26F0 A9 A0			lda #$A0
  3723 26F2 91 12			sta (:bp2),y
  3724 26F4 C8				iny
  3725 26F5 91 12			sta (:bp2),y
  3726
  3727 				; optimize OK (init.inc), line = 17
  3728
  3729 26F7 A5 58			lda T0B
  3730 26F9 0A				asl @
  3731 26FA A8				tay
  3732 26FB A9 FF			lda #$FF
  3733 26FD 18 79 0E 10			add adr.MUL40,y
  3734 2701 85 12			sta :bp2
  3735 2703 A9 07			lda #$07
  3736 2705 79 0F 10			adc adr.MUL40+1,y
  3737 2708 85 13			sta :bp2+1
  3738 270A A0 00			ldy #$00
  3739 270C A9 41			lda #$41
  3740 270E 91 12			sta (:bp2),y
  3741 2710 C8				iny
  3742 2711 91 12			sta (:bp2),y
  3743
  3744 				; --- ForToDoEpilog
  3745 2713 C6 58			dec T0B
  3746 2715 10 C0			jpl l_0D52
  3747 2717			l_0D60
  3748
  3749 				; optimize OK (init.inc), line = 20
  3750
  3751 2717 A9 07			lda #$07
  3752 2719 85 59			sta I0B
  3753
  3754 271B			l_0D84
  3755 				; --- ForToDoCondition
  3756 271B A5 59			lda I0B
  3757 271D 0A				asl @
  3758 271E A8				tay
  3759 271F A9 7E			lda #$7E
  3760 2721 99 FE 2A			sta adr.OBSTACLES,y
  3761 2724 A9 00			lda #$00
  3762 2726 99 FF 2A			sta adr.OBSTACLES+1,y
  3763
  3764 				; --- ForToDoEpilog
  3765 2729 C6 59			dec I0B
  3766 272B 10 EE			jpl l_0D84
  3767 272D			l_0D92
  3768
  3769 				; ------------------------------------------------------------
  3770
  3771 = 0000			@FORTMP_0D0F	= $00
  3772 = 0001			@FORTMP_0D4F	= $01
  3773 = 0000			@FORTMP_0D81	= $00
  3774 272D			@exit
  3775 					.ifdef @new
  3776 					lda <@VarData
  3777 					sta :ztmp
  3778 					lda >@VarData
  3779 					ldy #@VarDataSize-1
  3780 					jmp @FreeMem
  3781 					els
  3782 272D 60				rts						; ret
  3783 					eif
  3784 				.endl
  3785
  3786 272E			.local	INITPLAYERS					; PROCEDURE
  3787
  3788 				; optimize OK (init.inc), line = 27
  3789
  3790 272E A9 00			lda #$00
  3791 2730 8D E5 2A			sta PLAYER1.ISALIVE
  3792 2733 8D ED 2A			sta PLAYER2.ISALIVE
  3793
  3794 				; optimize OK (init.inc), line = 28
  3795
  3796 2736 8D F5 2A			sta PLAYER3.ISALIVE
  3797 2739 8D FD 2A			sta PLAYER4.ISALIVE
  3798 273C			@exit
  3799 					.ifdef @new
  3800 					lda <@VarData
  3801 					sta :ztmp
  3802 					lda >@VarData
  3803 					ldy #@VarDataSize-1
  3804 					jmp @FreeMem
  3805 					els
  3806 273C 60				rts						; ret
  3807 					eif
  3808 				.endl
  3809
  3810 273D			.local	INITSCORE					; PROCEDURE
  3811
  3812 				; optimize OK (init.inc), line = 35
  3813
  3814 273D A9 30			lda #$30
  3815 273F 8D E4 2A			sta PLAYER1.SCORE
  3816 2742 8D EC 2A			sta PLAYER2.SCORE
  3817
  3818 				; optimize OK (init.inc), line = 36
  3819
  3820 2745 8D F4 2A			sta PLAYER3.SCORE
  3821 2748 8D FC 2A			sta PLAYER4.SCORE
  3822 274B			@exit
  3823 					.ifdef @new
  3824 					lda <@VarData
  3825 					sta :ztmp
  3826 					lda >@VarData
  3827 					ldy #@VarDataSize-1
  3828 					jmp @FreeMem
  3829 					els
  3830 274B 60				rts						; ret
  3831 					eif
  3832 				.endl
  3833
  3834 274C			.local	INITARENA					; PROCEDURE
  3835
  3836 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 43
  3837
  3838 274C 20 98 26			jsr INITPLAYFIELD
  3839 274F 20 2E 27			jsr INITPLAYERS
  3840
  3841 				; optimize OK (init.inc), line = 45
  3842
  3843 2752 AD DC 2A			lda LEVEL
  3844 2755 8D 2E 2B			sta @CASETMP_0006
  3845 2758 C9 00			cmp #$00
  3846 275A D0 06			jne l_0DD7
  3847 275C			@
  3848
  3849 				; optimize FAIL ('SETLEVEL00', init.inc), line = 46
  3850
  3851 275C 20 05 19			jsr SETLEVEL00
  3852 275F 4C AF 27			jmp a_0006
  3853 2762			l_0DD7
  3854 2762 C9 01			cmp #$01
  3855 2764 D0 06			jne l_0DE1
  3856 2766			@
  3857
  3858 				; optimize FAIL ('SETLEVEL01', init.inc), line = 47
  3859
  3860 2766 20 36 1A			jsr SETLEVEL01
  3861 2769 4C AF 27			jmp a_0006
  3862 276C			l_0DE1
  3863 276C C9 02			cmp #$02
  3864 276E D0 06			jne l_0DEB
  3865 2770			@
  3866
  3867 				; optimize FAIL ('SETLEVEL02', init.inc), line = 48
  3868
  3869 2770 20 67 1B			jsr SETLEVEL02
  3870 2773 4C AF 27			jmp a_0006
  3871 2776			l_0DEB
  3872 2776 C9 03			cmp #$03
  3873 2778 D0 06			jne l_0DF5
  3874 277A			@
  3875
  3876 				; optimize FAIL ('SETLEVEL03', init.inc), line = 49
  3877
  3878 277A 20 98 1C			jsr SETLEVEL03
  3879 277D 4C AF 27			jmp a_0006
  3880 2780			l_0DF5
  3881 2780 C9 04			cmp #$04
  3882 2782 D0 06			jne l_0DFF
  3883 2784			@
  3884
  3885 				; optimize FAIL ('SETLEVEL04', init.inc), line = 50
  3886
  3887 2784 20 EB 1D			jsr SETLEVEL04
  3888 2787 4C AF 27			jmp a_0006
  3889 278A			l_0DFF
  3890 278A C9 05			cmp #$05
  3891 278C D0 06			jne l_0E09
  3892 278E			@
  3893
  3894 				; optimize FAIL ('SETLEVEL05', init.inc), line = 51
  3895
  3896 278E 20 60 1F			jsr SETLEVEL05
  3897 2791 4C AF 27			jmp a_0006
  3898 2794			l_0E09
  3899 2794 C9 06			cmp #$06
  3900 2796 D0 06			jne l_0E13
  3901 2798			@
  3902
  3903 				; optimize FAIL ('SETLEVEL06', init.inc), line = 52
  3904
  3905 2798 20 15 21			jsr SETLEVEL06
  3906 279B 4C AF 27			jmp a_0006
  3907 279E			l_0E13
  3908 279E C9 07			cmp #$07
  3909 27A0 D0 06			jne l_0E1D
  3910 27A2			@
  3911
  3912 				; optimize FAIL ('SETLEVEL07', init.inc), line = 53
  3913
  3914 27A2 20 EA 22			jsr SETLEVEL07
  3915 27A5 4C AF 27			jmp a_0006
  3916 27A8			l_0E1D
  3917 27A8 C9 08			cmp #$08
  3918 27AA D0 03			jne l_0E27
  3919 27AC			@
  3920
  3921 				; optimize FAIL ('SETLEVEL08', init.inc), line = 54
  3922
  3923 27AC 20 C3 24			jsr SETLEVEL08
  3924 27AF			l_0E27
  3925 27AF			a_0006
  3926
  3927 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 57
  3928
  3929 27AF 20 70 13			jsr SAVEOBSTACLES
  3930 27B2 20 18 13			jsr ANIMATEOBSTACLES
  3931 27B5 20 E9 11			jsr SHOWSCORE
  3932
  3933 				; ------------------------------------------------------------
  3934
  3935 = 2B2E			@CASETMP_0006	= DATAORIGIN+$0062
  3936
  3937 = 2B2E			@VarData	= @CASETMP_0006
  3938 = 0001			@VarDataSize	= 1
  3939
  3940 27B8			@exit
  3941 					.ifdef @new
  3942 					lda <@VarData
  3943 					sta :ztmp
  3944 					lda >@VarData
  3945 					ldy #@VarDataSize-1
  3946 					jmp @FreeMem
  3947 					els
  3948 27B8 60				rts						; ret
  3949 					eif
  3950 				.endl
  3951
  3952 27B9			.local	HUMAN						; PROCEDURE
  3953
  3954 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3955
  3956 27B9 20 8D 14			jsr CHECKJOYSTATUS
  3957 27BC AC BB 2A 84 12 AC + 	mwy PLY :bp2
  3958 27C6 A0 04			ldy #PLY.DIR-DATAORIGIN
  3959 27C8 B1 12			lda (:bp2),y
  3960 27CA 85 5B			sta NEWDIR
  3961
  3962 				; optimize OK (main.pas), line = 16
  3963
  3964 27CC A5 63			lda JOYSTATUS
  3965 27CE 8D 2F 2B			sta @CASETMP_0007
  3966 27D1 C9 01			cmp #$01
  3967 27D3 D0 19			jne l_0E4E
  3968 27D5			@
  3969
  3970 				; optimize OK (main.pas), line = 17
  3971
  3972 27D5 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  3973 27DF A0 04			ldy #PLY.DIR-DATAORIGIN
  3974 27E1 B1 12			lda (:bp2),y
  3975 27E3 C9 02			cmp #$02
  3976 27E5 F0 04			jeq l_0E60
  3977 27E7 A9 01			lda #$01
  3978 27E9 85 5B			sta NEWDIR
  3979 27EB			l_0E60
  3980
  3981 27EB 4C 42 28			jmp a_0007
  3982 27EE			l_0E4E
  3983 27EE C9 02			cmp #$02
  3984 27F0 D0 19			jne l_0E70
  3985 27F2			@
  3986
  3987 				; optimize OK (main.pas), line = 18
  3988
  3989 27F2 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  3990 27FC A0 04			ldy #PLY.DIR-DATAORIGIN
  3991 27FE B1 12			lda (:bp2),y
  3992 2800 C9 01			cmp #$01
  3993 2802 F0 04			jeq l_0E82
  3994 2804 A9 02			lda #$02
  3995 2806 85 5B			sta NEWDIR
  3996 2808			l_0E82
  3997
  3998 2808 4C 42 28			jmp a_0007
  3999 280B			l_0E70
  4000 280B C9 04			cmp #$04
  4001 280D D0 19			jne l_0E92
  4002 280F			@
  4003
  4004 				; optimize OK (main.pas), line = 19
  4005
  4006 280F AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4007 2819 A0 04			ldy #PLY.DIR-DATAORIGIN
  4008 281B B1 12			lda (:bp2),y
  4009 281D C9 08			cmp #$08
  4010 281F F0 04			jeq l_0EA4
  4011 2821 A9 04			lda #$04
  4012 2823 85 5B			sta NEWDIR
  4013 2825			l_0EA4
  4014
  4015 2825 4C 42 28			jmp a_0007
  4016 2828			l_0E92
  4017 2828 C9 08			cmp #$08
  4018 282A D0 16			jne l_0EB4
  4019 282C			@
  4020
  4021 				; optimize OK (main.pas), line = 20
  4022
  4023 282C AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4024 2836 A0 04			ldy #PLY.DIR-DATAORIGIN
  4025 2838 B1 12			lda (:bp2),y
  4026 283A C9 04			cmp #$04
  4027 283C F0 04			jeq l_0EC6
  4028 283E A9 08			lda #$08
  4029 2840 85 5B			sta NEWDIR
  4030 2842			l_0EC6
  4031
  4032 2842			l_0EB4
  4033 2842			a_0007
  4034
  4035 				; optimize OK (main.pas), line = 23
  4036
  4037 2842 A5 5B			lda NEWDIR
  4038 2844 25 5C			and AVAILDIR
  4039 2846 D0 18			jne l_0EED
  4040
  4041 				; optimize OK (main.pas), line = 24
  4042
  4043 2848 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4044 2852 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4045 2854 A9 00			lda #$00
  4046 2856 91 12			sta (:bp2),y
  4047 2858 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4048 285A A9 2A			lda #$2A
  4049 285C 91 12			sta (:bp2),y
  4050 285E C6 5A			dec ALIVE
  4051 2860			l_0EED
  4052
  4053 				; ------------------------------------------------------------
  4054
  4055 = 2B2F			@CASETMP_0007	= DATAORIGIN+$0063
  4056
  4057 = 2B2F			@VarData	= @CASETMP_0007
  4058 = 0001			@VarDataSize	= 1
  4059
  4060 2860			@exit
  4061 					.ifdef @new
  4062 					lda <@VarData
  4063 					sta :ztmp
  4064 					lda >@VarData
  4065 					ldy #@VarDataSize-1
  4066 					jmp @FreeMem
  4067 					els
  4068 2860 60				rts						; ret
  4069 					eif
  4070 				.endl
  4071
  4072 2861			.local	PLAYERMOVE					; PROCEDURE
  4073
  4074 				; optimize OK (main.pas), line = 32
  4075
  4076 2861 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4077 286B A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4078 286D B1 12			lda (:bp2),y
  4079 286F D0 03 4C 96 29		jeq l_0F0C
  4080
  4081 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4082
  4083 2874 20 83 12			jsr CHECKAVAILDIR
  4084
  4085 				; optimize OK (main.pas), line = 35
  4086
  4087 2877 A5 5C			lda AVAILDIR
  4088 2879 D0 35			jne l_0F20
  4089
  4090 				; optimize OK (main.pas), line = 36
  4091
  4092 287B AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4093 2885 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4094 2887 A9 00			lda #$00
  4095 2889 91 12			sta (:bp2),y
  4096 288B C6 5A			dec ALIVE
  4097
  4098 				; optimize OK (main.pas), line = 37
  4099
  4100 288D A0 00			ldy #PLY.X-DATAORIGIN
  4101 288F B1 12			lda (:bp2),y
  4102 2891 8D 11 2B			sta PUTCHAR_008E.X
  4103 2894 A0 01			ldy #PLY.Y-DATAORIGIN
  4104 2896 B1 12			lda (:bp2),y
  4105 2898 8D 12 2B			sta PUTCHAR_008E.Y
  4106 289B A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4107 289D B1 12			lda (:bp2),y
  4108 289F 18 69 80			add #$80
  4109 28A2 8D 14 2B			sta PUTCHAR_008E.C
  4110 28A5 A9 57			lda #$57
  4111 28A7 8D 13 2B			sta PUTCHAR_008E.V
  4112 28AA 20 99 11			jsr PUTCHAR_008E
  4113 28AD 4C 96 29			jmp l_0F41
  4114 28B0			l_0F20
  4115
  4116 				; optimize OK (main.pas), line = 40
  4117
  4118 28B0 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4119 28BA A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4120 28BC B1 12			lda (:bp2),y
  4121 28BE 8D 30 2B			sta @CASETMP_0008
  4122 28C1 C9 00			cmp #$00
  4123 28C3 D0 06			jne l_0F4C
  4124 28C5			@
  4125
  4126 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4127
  4128 28C5 20 B9 27			jsr HUMAN
  4129 28C8 4C F0 28			jmp a_0008
  4130 28CB			l_0F4C
  4131 28CB C9 01			cmp #$01
  4132 28CD D0 06			jne l_0F56
  4133 28CF			@
  4134
  4135 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4136
  4137 28CF 20 03 15			jsr AISTRAIGHT
  4138 28D2 4C F0 28			jmp a_0008
  4139 28D5			l_0F56
  4140 28D5 C9 02			cmp #$02
  4141 28D7 D0 06			jne l_0F60
  4142 28D9			@
  4143
  4144 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4145
  4146 28D9 20 88 15			jsr AISAPPER
  4147 28DC 4C F0 28			jmp a_0008
  4148 28DF			l_0F60
  4149 28DF C9 03			cmp #$03
  4150 28E1 D0 06			jne l_0F6A
  4151 28E3			@
  4152
  4153 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4154
  4155 28E3 20 E2 17			jsr AIBULLY
  4156 28E6 4C F0 28			jmp a_0008
  4157 28E9			l_0F6A
  4158 28E9 C9 04			cmp #$04
  4159 28EB D0 03			jne l_0F74
  4160 28ED			@
  4161
  4162 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4163
  4164 28ED 20 B0 18			jsr AIMIRROR
  4165 28F0			l_0F74
  4166 28F0			a_0008
  4167
  4168 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4169
  4170 28F0 20 B4 13			jsr DRAWTAIL
  4171 28F3 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4172 28FD A0 04			ldy #PLY.DIR-DATAORIGIN
  4173 28FF A5 5B			lda NEWDIR
  4174 2901 91 12			sta (:bp2),y
  4175
  4176 				; optimize OK (main.pas), line = 50
  4177
  4178 2903 A5 5B			lda NEWDIR
  4179 2905 8D 31 2B			sta @CASETMP_0009
  4180 2908 C9 01			cmp #$01
  4181 290A D0 16			jne l_0F90
  4182 290C			@
  4183
  4184 				; optimize OK (main.pas), line = 51
  4185
  4186 290C AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4187 2916 A0 01			ldy #PLY.Y-DATAORIGIN
  4188 2918 B1 12			lda (:bp2),y
  4189 291A 38 E9 01			sub #$01
  4190 291D 91 12			sta (:bp2),y
  4191
  4192 291F 4C 6D 29			jmp a_0009
  4193 2922			l_0F90
  4194 2922 C9 02			cmp #$02
  4195 2924 D0 16			jne l_0F9A
  4196 2926			@
  4197
  4198 				; optimize OK (main.pas), line = 52
  4199
  4200 2926 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4201 2930 A0 01			ldy #PLY.Y-DATAORIGIN
  4202 2932 B1 12			lda (:bp2),y
  4203 2934 18 69 01			add #$01
  4204 2937 91 12			sta (:bp2),y
  4205
  4206 2939 4C 6D 29			jmp a_0009
  4207 293C			l_0F9A
  4208 293C C9 04			cmp #$04
  4209 293E D0 16			jne l_0FA4
  4210 2940			@
  4211
  4212 				; optimize OK (main.pas), line = 53
  4213
  4214 2940 AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4215 294A A0 00			ldy #PLY.X-DATAORIGIN
  4216 294C B1 12			lda (:bp2),y
  4217 294E 38 E9 01			sub #$01
  4218 2951 91 12			sta (:bp2),y
  4219
  4220 2953 4C 6D 29			jmp a_0009
  4221 2956			l_0FA4
  4222 2956 C9 08			cmp #$08
  4223 2958 D0 13			jne l_0FAE
  4224 295A			@
  4225
  4226 				; optimize OK (main.pas), line = 54
  4227
  4228 295A AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4229 2964 A0 00			ldy #PLY.X-DATAORIGIN
  4230 2966 B1 12			lda (:bp2),y
  4231 2968 18 69 01			add #$01
  4232 296B 91 12			sta (:bp2),y
  4233
  4234 296D			l_0FAE
  4235 296D			a_0009
  4236
  4237 				; optimize OK (main.pas), line = 57
  4238
  4239 296D AC BB 2A 84 12 AC + 	mwy PLY :bp2
  4240 2977 A0 00			ldy #PLY.X-DATAORIGIN
  4241 2979 B1 12			lda (:bp2),y
  4242 297B 8D 11 2B			sta PUTCHAR_008E.X
  4243 297E A0 01			ldy #PLY.Y-DATAORIGIN
  4244 2980 B1 12			lda (:bp2),y
  4245 2982 8D 12 2B			sta PUTCHAR_008E.Y
  4246 2985 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4247 2987 B1 12			lda (:bp2),y
  4248 2989 8D 13 2B			sta PUTCHAR_008E.V
  4249 298C A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4250 298E B1 12			lda (:bp2),y
  4251 2990 8D 14 2B			sta PUTCHAR_008E.C
  4252 2993 20 99 11			jsr PUTCHAR_008E
  4253 2996			l_0F41
  4254 2996			l_0F0C
  4255
  4256 				; ------------------------------------------------------------
  4257
  4258 = 2B30			@CASETMP_0008	= DATAORIGIN+$0064
  4259 = 2B31			@CASETMP_0009	= DATAORIGIN+$0065
  4260
  4261 = 2B30			@VarData	= @CASETMP_0008
  4262 = 0002			@VarDataSize	= 2
  4263
  4264 2996			@exit
  4265 					.ifdef @new
  4266 					lda <@VarData
  4267 					sta :ztmp
  4268 					lda >@VarData
  4269 					ldy #@VarDataSize-1
  4270 					jmp @FreeMem
  4271 					els
  4272 2996 60				rts						; ret
  4273 					eif
  4274 				.endl
  4275
  4276 2997			.local	STARTSCREEN					; PROCEDURE
  4277
  4278 				; optimize OK (main.pas), line = 68
  4279
  4280 2997 AD E1 2A			lda PLAYER1.COLOUR
  4281 299A 18 69 80			add #$80
  4282 299D 8D 14 2B			sta PUTCHAR_008E.C
  4283 29A0 AD E0 2A			lda PLAYER1.HEAD
  4284 29A3 8D 13 2B			sta PUTCHAR_008E.V
  4285 29A6 AD DF 2A			lda PLAYER1.Y
  4286 29A9 8D 12 2B			sta PUTCHAR_008E.Y
  4287 29AC AD DE 2A			lda PLAYER1.X
  4288 29AF 8D 11 2B			sta PUTCHAR_008E.X
  4289 29B2 20 99 11			jsr PUTCHAR_008E
  4290
  4291 				; --- RepeatUntilProlog
  4292 29B5			l_0FDC
  4293
  4294 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4295
  4296 29B5 20 8D 14			jsr CHECKJOYSTATUS
  4297 29B8 A5 63			lda JOYSTATUS
  4298 29BA C9 40			cmp #$40
  4299 29BC D0 F7			jne l_0FDC
  4300
  4301 				; optimize OK (main.pas), line = 70
  4302
  4303 29BE AD E1 2A			lda PLAYER1.COLOUR
  4304 29C1 8D 14 2B			sta PUTCHAR_008E.C
  4305 29C4 AD E0 2A			lda PLAYER1.HEAD
  4306 29C7 8D 13 2B			sta PUTCHAR_008E.V
  4307 29CA AD DF 2A			lda PLAYER1.Y
  4308 29CD 8D 12 2B			sta PUTCHAR_008E.Y
  4309 29D0 AD DE 2A			lda PLAYER1.X
  4310 29D3 8D 11 2B			sta PUTCHAR_008E.X
  4311 29D6 20 99 11			jsr PUTCHAR_008E
  4312 29D9			@exit
  4313 					.ifdef @new
  4314 					lda <@VarData
  4315 					sta :ztmp
  4316 					lda >@VarData
  4317 					ldy #@VarDataSize-1
  4318 					jmp @FreeMem
  4319 					els
  4320 29D9 60				rts						; ret
  4321 					eif
  4322 				.endl
  4323
  4324 29DA			.local	MAINLOOP					; PROCEDURE
  4325
  4326 				; optimize OK (main.pas), line = 77
  4327
  4328 29DA A9 FF			lda #$FF
  4329 29DC 85 5A			sta ALIVE
  4330
  4331 				; optimize FAIL ('INITARENA', main.pas), line = 79
  4332
  4333 29DE 20 4C 27			jsr INITARENA
  4334 29E1 20 97 29			jsr STARTSCREEN
  4335
  4336 				; --- RepeatUntilProlog
  4337 29E4			l_1002
  4338
  4339 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 82
  4340
  4341 29E4 20 23 11			jsr SYSTEM.PAUSE_006B
  4342
  4343 				; optimize OK (main.pas), line = 83
  4344
  4345 29E7 AD BF 2A			lda PLAYER1
  4346 29EA 8D BB 2A			sta PLY
  4347 29ED AD C0 2A			lda PLAYER1+1
  4348 29F0 8D BC 2A			sta PLY+1
  4349 29F3 20 61 28			jsr PLAYERMOVE
  4350
  4351 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 85
  4352
  4353 29F6 20 18 13			jsr ANIMATEOBSTACLES
  4354
  4355 				; optimize OK (main.pas), line = 87
  4356
  4357 29F9 A9 02			lda #$02
  4358 29FB 8D D8 2A			sta SYSTEM.PAUSE_006C.N
  4359 29FE A9 00			lda #$00
  4360 2A00 8D D9 2A			sta SYSTEM.PAUSE_006C.N+1
  4361 2A03 20 2A 11			jsr SYSTEM.PAUSE_006C
  4362
  4363 				; optimize OK (main.pas), line = 88
  4364
  4365 2A06 AD C1 2A			lda PLAYER2
  4366 2A09 8D BB 2A			sta PLY
  4367 2A0C AD C2 2A			lda PLAYER2+1
  4368 2A0F 8D BC 2A			sta PLY+1
  4369 2A12 20 61 28			jsr PLAYERMOVE
  4370
  4371 				; optimize OK (main.pas), line = 89
  4372
  4373 2A15 AD C3 2A			lda PLAYER3
  4374 2A18 8D BB 2A			sta PLY
  4375 2A1B AD C4 2A			lda PLAYER3+1
  4376 2A1E 8D BC 2A			sta PLY+1
  4377 2A21 20 61 28			jsr PLAYERMOVE
  4378
  4379 				; optimize OK (main.pas), line = 90
  4380
  4381 2A24 AD C5 2A			lda PLAYER4
  4382 2A27 8D BB 2A			sta PLY
  4383 2A2A AD C6 2A			lda PLAYER4+1
  4384 2A2D 8D BC 2A			sta PLY+1
  4385 2A30 20 61 28			jsr PLAYERMOVE
  4386
  4387 				; optimize OK (main.pas), line = 91
  4388
  4389 2A33 A5 5A			lda ALIVE
  4390 2A35 F0 04			jeq l_1002x
  4391 2A37 C9 FF			cmp #$FF
  4392 2A39 D0 A9			jne l_1002
  4393 2A3B			l_1002x
  4394
  4395 				; optimize FAIL ('UPDATESCORE', main.pas), line = 93
  4396
  4397 2A3B 20 62 12			jsr UPDATESCORE
  4398
  4399 				; optimize OK (main.pas), line = 95
  4400
  4401 2A3E A9 64			lda #$64
  4402 2A40 8D D8 2A			sta SYSTEM.PAUSE_006C.N
  4403 2A43 A9 00			lda #$00
  4404 2A45 8D D9 2A			sta SYSTEM.PAUSE_006C.N+1
  4405 2A48 20 2A 11			jsr SYSTEM.PAUSE_006C
  4406 2A4B			@exit
  4407 					.ifdef @new
  4408 					lda <@VarData
  4409 					sta :ztmp
  4410 					lda >@VarData
  4411 					ldy #@VarDataSize-1
  4412 					jmp @FreeMem
  4413 					els
  4414 2A4B 60				rts						; ret
  4415 					eif
  4416 				.endl
  4417 2A4C			l_0007
  4418
  4419 				; --- RepeatUntilProlog
  4420 2A4C			l_103C
  4421
  4422 				; optimize FAIL ('INITSCORE', main.pas), line = 102
  4423
  4424 2A4C 20 3D 27			jsr INITSCORE
  4425 2A4F A9 01			lda #$01
  4426 2A51 8D DC 2A			sta LEVEL
  4427
  4428 				; optimize OK (main.pas), line = 104
  4429
  4430 2A54 A9 00			lda #$00
  4431 2A56 8D DD 2A			sta GAMEOVER
  4432
  4433 				; --- RepeatUntilProlog
  4434 2A59			l_1046
  4435
  4436 				; optimize FAIL ('MAINLOOP', main.pas), line = 106
  4437
  4438 2A59 20 DA 29			jsr MAINLOOP
  4439
  4440 				; optimize FAIL (0, main.pas), line = 107
  4441
  4442 2A5C EE DC 2A			inc LEVEL
  4443 2A5F AD DC 2A			lda LEVEL
  4444 2A62 C9 08			cmp #$08
  4445 2A64 D0 05			jne l_105D
  4446 2A66 A9 05			lda #$05
  4447 2A68 8D DC 2A			sta LEVEL
  4448 2A6B			l_105D
  4449
  4450 				; optimize OK (main.pas), line = 108
  4451
  4452 2A6B AD E4 2A			lda PLAYER1.SCORE
  4453 2A6E C9 39			cmp #$39
  4454 2A70 D0 05			jne l_1076
  4455 2A72 A9 01			lda #$01
  4456 2A74 8D DD 2A			sta GAMEOVER
  4457 2A77			l_1076
  4458
  4459 				; optimize OK (main.pas), line = 109
  4460
  4461 2A77 AD EC 2A			lda PLAYER2.SCORE
  4462 2A7A C9 39			cmp #$39
  4463 2A7C D0 05			jne l_108F
  4464 2A7E A9 01			lda #$01
  4465 2A80 8D DD 2A			sta GAMEOVER
  4466 2A83			l_108F
  4467
  4468 				; optimize OK (main.pas), line = 110
  4469
  4470 2A83 AD F4 2A			lda PLAYER3.SCORE
  4471 2A86 C9 39			cmp #$39
  4472 2A88 D0 05			jne l_10A8
  4473 2A8A A9 01			lda #$01
  4474 2A8C 8D DD 2A			sta GAMEOVER
  4475 2A8F			l_10A8
  4476
  4477 				; optimize OK (main.pas), line = 111
  4478
  4479 2A8F AD FC 2A			lda PLAYER4.SCORE
  4480 2A92 C9 39			cmp #$39
  4481 2A94 D0 05			jne l_10C1
  4482 2A96 A9 01			lda #$01
  4483 2A98 8D DD 2A			sta GAMEOVER
  4484 2A9B			l_10C1
  4485
  4486 				; optimize OK (main.pas), line = 112
  4487
  4488 2A9B AD DD 2A			lda GAMEOVER
  4489 2A9E F0 B9			jeq l_1046
  4490
  4491 				; optimize FAIL ('SHOWSCORE', main.pas), line = 114
  4492
  4493 2AA0 20 E9 11			jsr SHOWSCORE
  4494
  4495 				; optimize OK (main.pas), line = 116
  4496
  4497 2AA3 A9 C8			lda #$C8
  4498 2AA5 8D D8 2A			sta SYSTEM.PAUSE_006C.N
  4499 2AA8 A9 00			lda #$00
  4500 2AAA 8D D9 2A			sta SYSTEM.PAUSE_006C.N+1
  4501 2AAD 20 2A 11			jsr SYSTEM.PAUSE_006C
  4502
  4503 				; optimize OK (main.pas), line = 117
  4504
  4505 2AB0 4C 4C 2A			jmp l_103C
  4506
  4507 				; ------------------------------------------------------------
  4508
  4509 = 0800			ATTRIBUTE_ADDR	= $0800
  4510 = 0C00			SCREEN_ADDR	= $0C00
  4511 = 001F			BACKGROUND_COLOUR	= $1F
  4512 = 0000			BOREDER_COLOUR	= $00
  4513 = 0009			VICTORIES	= $09
  4514 = 0005			LOOK_AHEAD	= $05
  4515 = 007E			TRASH	= $7E
  4516 = 0020			EMPTY	= $20
  4517 = 00A0			WALL	= $A0
  4518 = 0041			WALL_COLOUR	= $41
  4519 = 0030			ZERO	= $30
  4520 = 0056			OBSTACLE_1	= $56
  4521 = 005B			OBSTACLE_2	= $5B
  4522 = 0035			OBST_COLOUR	= $35
  4523 = 0007			OBST_QUANTITY	= $07
  4524 = 0051			PLY_HEAD	= $51
  4525 = 002A			PLY_CRASH	= $2A
  4526 = 0057			PLY_BUSTED	= $57
  4527 = 0042			PLY_TAIL_UD	= $42
  4528 = 0040			PLY_TAIL_LR	= $40
  4529 = 007D			PLY_TAIL_RD	= $7D
  4530 = 006E			PLY_TAIL_RU	= $6E
  4531 = 006D			PLY_TAIL_LD	= $6D
  4532 = 0070			PLY_TAIL_LU	= $70
  4533 = 0062			PLY1_COLOUR	= $62
  4534 = 005D			PLY2_COLOUR	= $5D
  4535 = 0071			PLY3_COLOUR	= $71
  4536 = 0055			PLY4_COLOUR	= $55
  4537 = 0000			PLY_CTRL	= $00
  4538 = 0001			AI_STRAIGHT	= $01
  4539 = 0002			AI_SAPPER	= $02
  4540 = 0003			AI_BULLY	= $03
  4541 = 0004			AI_MIRROR	= $04
  4542 = 0001			JOY_UP	= $01
  4543 = 0002			JOY_DOWN	= $02
  4544 = 0004			JOY_LEFT	= $04
  4545 = 0008			JOY_RIGHT	= $08
  4546 = 0040			JOY_FIRE	= $40
  4547 = 0002			JOY_SELECT_1	= $02
  4548 = 0004			JOY_SELECT_2	= $04
  4549 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4550 2AB3			.var MUL40	= adr.MUL40 .word
  4551 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4552 2AB3			.var DIRECTION	= adr.DIRECTION .word
  4553 = FD30			KEYSCAN	= $FD30
  4554 = FF08			JOY	= $FF08
  4555 = FF15			BACKGROUND	= $FF15
  4556 = FF19			BOREDER	= $FF19
  4557 = 0058			T0B	= $58
  4558 = 0059			I0B	= $59
  4559 = 005A			ALIVE	= $5A
  4560 = 005B			NEWDIR	= $5B
  4561 = 005C			AVAILDIR	= $5C
  4562 = 005D			T0W	= $5D
  4563 = 005F			adr.PLY	= $5F
  4564 2AB3			.var PLY	= adr.PLY .word
  4565 = 2ACC			PLY.X	= DATAORIGIN+$0000
  4566 = 2ACD			PLY.Y	= DATAORIGIN+$0001
  4567 = 2ACE			PLY.HEAD	= DATAORIGIN+$0002
  4568 = 2ACF			PLY.COLOUR	= DATAORIGIN+$0003
  4569 = 2AD0			PLY.DIR	= DATAORIGIN+$0004
  4570 = 2AD1			PLY.BRAIN	= DATAORIGIN+$0005
  4571 = 2AD2			PLY.SCORE	= DATAORIGIN+$0006
  4572 = 2AD3			PLY.ISALIVE	= DATAORIGIN+$0007
  4573 = 0061			adr.TMPPLY	= $61
  4574 2AB3			.var TMPPLY	= adr.TMPPLY .word
  4575 = 2ACC			TMPPLY.X	= DATAORIGIN+$0000
  4576 = 2ACD			TMPPLY.Y	= DATAORIGIN+$0001
  4577 = 2ACE			TMPPLY.HEAD	= DATAORIGIN+$0002
  4578 = 2ACF			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4579 = 2AD0			TMPPLY.DIR	= DATAORIGIN+$0004
  4580 = 2AD1			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4581 = 2AD2			TMPPLY.SCORE	= DATAORIGIN+$0006
  4582 = 2AD3			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4583 = 0063			JOYSTATUS	= $63
  4584 = 2ADC			LEVEL	= DATAORIGIN+$0010
  4585 = 2ADD			GAMEOVER	= DATAORIGIN+$0011
  4586 = 2ADE			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4587 2AB3			.var PLAYER1	= adr.PLAYER1 .word
  4588 = 2ADE			PLAYER1.X	= DATAORIGIN+$0012
  4589 = 2ADF			PLAYER1.Y	= DATAORIGIN+$0013
  4590 = 2AE0			PLAYER1.HEAD	= DATAORIGIN+$0014
  4591 = 2AE1			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4592 = 2AE2			PLAYER1.DIR	= DATAORIGIN+$0016
  4593 = 2AE3			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4594 = 2AE4			PLAYER1.SCORE	= DATAORIGIN+$0018
  4595 = 2AE5			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4596 = 2AE6			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4597 2AB3			.var PLAYER2	= adr.PLAYER2 .word
  4598 = 2AE6			PLAYER2.X	= DATAORIGIN+$001A
  4599 = 2AE7			PLAYER2.Y	= DATAORIGIN+$001B
  4600 = 2AE8			PLAYER2.HEAD	= DATAORIGIN+$001C
  4601 = 2AE9			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4602 = 2AEA			PLAYER2.DIR	= DATAORIGIN+$001E
  4603 = 2AEB			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4604 = 2AEC			PLAYER2.SCORE	= DATAORIGIN+$0020
  4605 = 2AED			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4606 = 2AEE			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4607 2AB3			.var PLAYER3	= adr.PLAYER3 .word
  4608 = 2AEE			PLAYER3.X	= DATAORIGIN+$0022
  4609 = 2AEF			PLAYER3.Y	= DATAORIGIN+$0023
  4610 = 2AF0			PLAYER3.HEAD	= DATAORIGIN+$0024
  4611 = 2AF1			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4612 = 2AF2			PLAYER3.DIR	= DATAORIGIN+$0026
  4613 = 2AF3			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4614 = 2AF4			PLAYER3.SCORE	= DATAORIGIN+$0028
  4615 = 2AF5			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4616 = 2AF6			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4617 2AB3			.var PLAYER4	= adr.PLAYER4 .word
  4618 = 2AF6			PLAYER4.X	= DATAORIGIN+$002A
  4619 = 2AF7			PLAYER4.Y	= DATAORIGIN+$002B
  4620 = 2AF8			PLAYER4.HEAD	= DATAORIGIN+$002C
  4621 = 2AF9			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4622 = 2AFA			PLAYER4.DIR	= DATAORIGIN+$002E
  4623 = 2AFB			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4624 = 2AFC			PLAYER4.SCORE	= DATAORIGIN+$0030
  4625 = 2AFD			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4626 = 2AFE			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4627 2AB3			.var OBSTACLES	= adr.OBSTACLES .word
  4628 2AB3			@exit
  4629
  4630 2AB3 A2 00		@halt	ldx #$00
  4631 2AB5 9A				txs
  4632
  4633 2AB6 60				rts
  4634
  4635 				; ------------------------------------------------------------
  4636
  4637 				; ------------------------------------------------------------
  4638
  4639 2AB7			.local	@DEFINES
  4640 2AB7			C4P
  4641 				.endl
  4642
  4643 2AB7			.local	@RESOURCE
  4644 				.endl
  4645
  4646 = 2AB7 0E 10		MUL40
  4646 = 2AB9 40 10		DIRECTION
  4646 = 2ABB 5F 00		PLY
  4646 = 2ABD 61 00		TMPPLY
  4646 = 2ABF DE 2A		PLAYER1
  4646 = 2AC1 E6 2A		PLAYER2
  4646 = 2AC3 EE 2A		PLAYER3
  4646 = 2AC5 F6 2A		PLAYER4
  4646 = 2AC7 FE 2A		OBSTACLES
  4646 				.endl							; MAIN
  4647
  4648 				; ------------------------------------------------------------
  4649 				; ------------------------------------------------------------
  4650
  4651 				.macro	UNITINITIALIZATION
  4652 				
  4653 					.ifdef MAIN.SYSTEM.@UnitInit
  4654 					jsr MAIN.SYSTEM.@UnitInit
  4655 					eif
  4656 				.endm
  4657
  4658 				; ------------------------------------------------------------
  4659
  4660 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4661 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4661 				SYSTEM: $10D5..$1177
  4662 					eif
  4663
  4664 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4664 				CODE: $100E..$2AB6
  4665
  4666 				; ------------------------------------------------------------
  4667
  4668 2AC9				.align $04
  4669
  4670 2ACC			DATAORIGIN
  4671 2ACC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4672
  4673 = 0006			VARINITSIZE	= *-DATAORIGIN
  4674 = 0066			VARDATASIZE	= 102
  4675
  4676 = 2B32			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4677
  4678 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4678 				DATA: $2ACC..$2B32
  4679
  4680 				; ------------------------------------------------------------
  4681
  4682 				.macro	STATICDATA
  4683 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4684 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4685 				.by  $C0 $03 $01 $02 $04 $08
  4686 				.endm
  4687
  4688 					end
