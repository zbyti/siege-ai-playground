mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 6C 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 005D			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2A8A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A3			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D E7 29 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 E7 85 02 A9 2A + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 04 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 8F 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 8F 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2A8F			RESULT	= DATAORIGIN+$000B
   182
   183 = 2A8F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD 90 2A		loop  lda n
   325 112D 0D 91 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD 90 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2A90			N	= DATAORIGIN+$000C
   339
   340 = 2A90			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D 92 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD 92 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C 93 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD 93 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2A92			RANGE	= DATAORIGIN+$000E
   401 = 2A93			RESULT	= DATAORIGIN+$000F
   402
   403 = 2A92			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2A84			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2A86			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2A88			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2A89			FILEMODE	= DATAORIGIN+$0005
   468 = 2A8A			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2A8B			IORESULT	= DATAORIGIN+$0007
   470 = 2A8C			EOLN	= DATAORIGIN+$0008
   471 = 2A8D			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD C7 2A			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D C6 2A			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 08			adc #$08
   487 118B 85 5E			sta T0W+1
   488
   489 				; optimize OK (tools.inc), line = 6
   490
   491 118D 85 11			sta :bp+1
   492 118F A4 5D			ldy T0W
   493 1191 AD C9 2A			lda C
   494 1194 91 10			sta (:bp),y
   495 1196 A5 5E			lda T0W+1
   496 1198 18 69 04			add #$04
   497 119B 85 11			sta :bp+1
   498 119D AD C8 2A			lda V
   499 11A0 91 10			sta (:bp),y
   500
   501 				; ------------------------------------------------------------
   502
   503 = 2AC6			X	= DATAORIGIN+$0042
   504 = 2AC7			Y	= DATAORIGIN+$0043
   505 = 2AC8			V	= DATAORIGIN+$0044
   506 = 2AC9			C	= DATAORIGIN+$0045
   507
   508 = 2AC6			@VarData	= X
   509 = 0004			@VarDataSize	= 4
   510
   511 11A2			@exit
   512 					.ifdef @new
   513 					lda <@VarData
   514 					sta :ztmp
   515 					lda >@VarData
   516 					ldy #@VarDataSize-1
   517 					jmp @FreeMem
   518 					els
   519 11A2 60				rts						; ret
   520 					eif
   521 				.endl
   522
   523 11A3			.local	PUTCHAR_0098					; PROCEDURE | OVERLOAD
   524
   525 				; optimize OK (tools.inc), line = 11
   526
   527 11A3 AD CB 2A			lda Y
   528 11A6 0A				asl @
   529 11A7 A8				tay
   530 11A8 B9 0E 10			lda adr.MUL40,y
   531 11AB 18 6D CA 2A			add X
   532 11AF 85 5D			sta T0W
   533 11B1 B9 0F 10			lda adr.MUL40+1,y
   534 11B4 69 0C			adc #$0C
   535 11B6 85 5E			sta T0W+1
   536 11B8 A4 5E			ldy T0W+1
   537 11BA 84 11			sty :bp+1
   538 11BC A4 5D			ldy T0W
   539 11BE AD CC 2A			lda V
   540 11C1 91 10			sta (:bp),y
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2ACA			X	= DATAORIGIN+$0046
   545 = 2ACB			Y	= DATAORIGIN+$0047
   546 = 2ACC			V	= DATAORIGIN+$0048
   547
   548 = 2ACA			@VarData	= X
   549 = 0003			@VarDataSize	= 3
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	SHOWSCORE					; PROCEDURE
   564
   565 				; optimize OK (tools.inc), line = 18
   566
   567 11C4 AD 99 2A			lda PLAYER1.COLOUR
   568 11C7 8D C9 2A			sta PUTCHAR_0072.C
   569 11CA AD 9C 2A			lda PLAYER1.SCORE
   570 11CD 8D C8 2A			sta PUTCHAR_0072.V
   571 11D0 A9 00			lda #$00
   572 11D2 8D C7 2A			sta PUTCHAR_0072.Y
   573 11D5 A9 1E			lda #$1E
   574 11D7 8D C6 2A			sta PUTCHAR_0072.X
   575 11DA 20 78 11			jsr PUTCHAR_0072
   576
   577 				; optimize OK (tools.inc), line = 19
   578
   579 11DD AD A1 2A			lda PLAYER2.COLOUR
   580 11E0 8D C9 2A			sta PUTCHAR_0072.C
   581 11E3 AD A4 2A			lda PLAYER2.SCORE
   582 11E6 8D C8 2A			sta PUTCHAR_0072.V
   583 11E9 A9 00			lda #$00
   584 11EB 8D C7 2A			sta PUTCHAR_0072.Y
   585 11EE A9 20			lda #$20
   586 11F0 8D C6 2A			sta PUTCHAR_0072.X
   587 11F3 20 78 11			jsr PUTCHAR_0072
   588
   589 				; optimize OK (tools.inc), line = 20
   590
   591 11F6 AD A9 2A			lda PLAYER3.COLOUR
   592 11F9 8D C9 2A			sta PUTCHAR_0072.C
   593 11FC AD AC 2A			lda PLAYER3.SCORE
   594 11FF 8D C8 2A			sta PUTCHAR_0072.V
   595 1202 A9 00			lda #$00
   596 1204 8D C7 2A			sta PUTCHAR_0072.Y
   597 1207 A9 22			lda #$22
   598 1209 8D C6 2A			sta PUTCHAR_0072.X
   599 120C 20 78 11			jsr PUTCHAR_0072
   600
   601 				; optimize OK (tools.inc), line = 21
   602
   603 120F AD B1 2A			lda PLAYER4.COLOUR
   604 1212 8D C9 2A			sta PUTCHAR_0072.C
   605 1215 AD B4 2A			lda PLAYER4.SCORE
   606 1218 8D C8 2A			sta PUTCHAR_0072.V
   607 121B A9 00			lda #$00
   608 121D 8D C7 2A			sta PUTCHAR_0072.Y
   609 1220 A9 24			lda #$24
   610 1222 8D C6 2A			sta PUTCHAR_0072.X
   611 1225 20 78 11			jsr PUTCHAR_0072
   612 1228			@exit
   613 					.ifdef @new
   614 					lda <@VarData
   615 					sta :ztmp
   616 					lda >@VarData
   617 					ldy #@VarDataSize-1
   618 					jmp @FreeMem
   619 					els
   620 1228 60				rts						; ret
   621 					eif
   622 				.endl
   623
   624 1229			.local	CHECKAVAILDIR					; PROCEDURE
   625
   626 				; optimize OK (tools.inc), line = 28
   627
   628 1229 A9 00			lda #$00
   629 122B 85 5C			sta AVAILDIR
   630
   631 				; optimize OK (tools.inc), line = 29
   632
   633 122D AC 73 2A 84 12 AC + 	mwy PLY :bp2
   634 1237 A0 01			ldy #PLY.Y-DATAORIGIN
   635 1239 B1 12			lda (:bp2),y
   636 123B 0A				asl @
   637 123C A8				tay
   638 123D A9 00			lda #$00
   639 123F 18 79 0E 10			add adr.MUL40,y
   640 1243 85 21			sta :STACKORIGIN+9
   641 1245 A9 0C			lda #$0C
   642 1247 79 0F 10			adc adr.MUL40+1,y
   643 124A 85 31			sta :STACKORIGIN+STACKWIDTH+9
   644 124C A0 00			ldy #PLY.X-DATAORIGIN
   645 124E A5 21			lda :STACKORIGIN+9
   646 1250 18 71 12			add (:bp2),y
   647 1253 85 5D			sta T0W
   648 1255 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   649 1257 69 00			adc #$00
   650 1259 85 5E			sta T0W+1
   651
   652 				; optimize OK (tools.inc), line = 31
   653
   654 125B A5 5D			lda T0W
   655 125D 38 E9 28			sub #$28
   656 1260 85 21			sta :STACKORIGIN+9
   657 1262 A5 5E			lda T0W+1
   658 1264 E9 00			sbc #$00
   659 1266 85 11			sta :bp+1
   660 1268 A4 21			ldy :STACKORIGIN+9
   661 126A B1 10			lda (:bp),y
   662 126C C9 20			cmp #$20
   663 126E D0 06			jne l_010B
   664 1270 A5 5C			lda AVAILDIR
   665 1272 09 01			ora #$01
   666 1274 85 5C			sta AVAILDIR
   667 1276			l_010B
   668
   669 				; optimize OK (tools.inc), line = 32
   670
   671 1276 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   672 127E A0 28			ldy #$28
   673 1280 B1 12			lda (:bp2),y
   674 1282 C9 20			cmp #$20
   675 1284 D0 06			jne l_012E
   676 1286 A5 5C			lda AVAILDIR
   677 1288 09 02			ora #$02
   678 128A 85 5C			sta AVAILDIR
   679 128C			l_012E
   680
   681 				; optimize OK (tools.inc), line = 33
   682
   683 128C A5 5D			lda T0W
   684 128E 38 E9 01			sub #$01
   685 1291 85 21			sta :STACKORIGIN+9
   686 1293 A5 5E			lda T0W+1
   687 1295 E9 00			sbc #$00
   688 1297 85 11			sta :bp+1
   689 1299 A4 21			ldy :STACKORIGIN+9
   690 129B B1 10			lda (:bp),y
   691 129D C9 20			cmp #$20
   692 129F D0 06			jne l_0151
   693 12A1 A5 5C			lda AVAILDIR
   694 12A3 09 04			ora #$04
   695 12A5 85 5C			sta AVAILDIR
   696 12A7			l_0151
   697
   698 				; optimize OK (tools.inc), line = 34
   699
   700 12A7 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   701 12AF A0 01			ldy #$01
   702 12B1 B1 12			lda (:bp2),y
   703 12B3 C9 20			cmp #$20
   704 12B5 D0 06			jne l_0174
   705 12B7 A5 5C			lda AVAILDIR
   706 12B9 09 08			ora #$08
   707 12BB 85 5C			sta AVAILDIR
   708 12BD			l_0174
   709 12BD			@exit
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					els
   717 12BD 60				rts						; ret
   718 					eif
   719 				.endl
   720
   721 12BE			.local	ANIMATEOBSTACLES				; PROCEDURE
   722
   723 				; optimize FAIL (0, tools.inc), line = 43
   724
   725 12BE EE CD 2A			inc COUNTER
   726
   727 				; optimize OK (tools.inc), line = 44
   728
   729 12C1 AD CD 2A			lda COUNTER
   730 12C4 29 01			and #$01
   731 12C6 F0 08			jeq l_019F
   732 12C8 A9 56			lda #$56
   733 12CA 8D CE 2A			sta OBST
   734 12CD 4C D5 12			jmp l_01AD
   735 12D0			l_019F
   736 12D0 A9 5B			lda #$5B
   737 12D2 8D CE 2A			sta OBST
   738 12D5			l_01AD
   739
   740 				; optimize OK (tools.inc), line = 45
   741
   742 12D5 A9 07			lda #$07
   743 12D7 85 59			sta I0B
   744
   745 12D9			l_01BA
   746 				; --- ForToDoCondition
   747 12D9 A5 59			lda I0B
   748 12DB 0A				asl @
   749 12DC A8				tay
   750 12DD B9 B6 2A			lda adr.OBSTACLES,y
   751 12E0 85 21			sta :STACKORIGIN+9
   752 12E2 B9 B7 2A			lda adr.OBSTACLES+1,y
   753 12E5 85 11			sta :bp+1
   754 12E7 A4 21			ldy :STACKORIGIN+9
   755 12E9 AD CE 2A			lda OBST
   756 12EC 91 10			sta (:bp),y
   757 12EE C6 59			dec I0B
   758 12F0 10 E7			jpl l_01BA
   759 12F2			l_01C8
   760
   761 				; ------------------------------------------------------------
   762
   763 = 2ACD			COUNTER	= DATAORIGIN+$0049
   764 = 2ACE			OBST	= DATAORIGIN+$004A
   765 = 0000			@FORTMP_01B7	= $00
   766
   767 = 2ACD			@VarData	= COUNTER
   768 = 0002			@VarDataSize	= 2
   769
   770 12F2			@exit
   771 					.ifdef @new
   772 					lda <@VarData
   773 					sta :ztmp
   774 					lda >@VarData
   775 					ldy #@VarDataSize-1
   776 					jmp @FreeMem
   777 					els
   778 12F2 60				rts						; ret
   779 					eif
   780 				.endl
   781
   782 12F3			.local	CALCOBSTACLEADDR				; FUNCTION
   783
   784 				; optimize OK (tools.inc), line = 52
   785
   786 12F3 AD D0 2A			lda Y
   787 12F6 0A				asl @
   788 12F7 A8				tay
   789 12F8 AD CF 2A			lda X
   790 12FB 18 79 0E 10			add adr.MUL40,y
   791 12FF 8D D1 2A			sta RESULT
   792 1302 A9 0C			lda #$0C
   793 1304 79 0F 10			adc adr.MUL40+1,y
   794 1307 8D D2 2A			sta RESULT+1
   795 130A			@exit
   796
   797 				; ------------------------------------------------------------
   798
   799 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   800 				; as Pointer
   801
   802 130A E8				inx
   803 130B AD D1 2A 95 18		mva RESULT :STACKORIGIN,x
   804 1310 AD D2 2A 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   805
   806 					.ifdef @new
   807 					lda <@VarData
   808 					sta :ztmp
   809 					lda >@VarData
   810 					ldy #@VarDataSize-1
   811 					jmp @FreeMem
   812 					eif
   813
   814 				; ------------------------------------------------------------
   815
   816 = 2ACF			X	= DATAORIGIN+$004B
   817 = 2AD0			Y	= DATAORIGIN+$004C
   818 = 2AD1			RESULT	= DATAORIGIN+$004D
   819
   820 = 2ACF			@VarData	= X
   821 = 0004			@VarDataSize	= 4
   822
   823 1315 60				rts						; ret
   824 				.endl
   825
   826 1316			.local	SAVEOBSTACLES					; PROCEDURE
   827
   828 				; optimize OK (tools.inc), line = 59
   829
   830 1316 A9 07			lda #$07
   831 1318 85 59			sta I0B
   832
   833 131A			l_01FB
   834 				; --- ForToDoCondition
   835
   836 				; optimize OK (tools.inc), line = 60
   837
   838 131A A5 59			lda I0B
   839 131C 0A				asl @
   840 131D A8				tay
   841 131E B9 B7 2A			lda adr.OBSTACLES+1,y
   842 1321 C9 00			cmp #$00
   843 1323 D0 05			bne @+
   844 1325 B9 B6 2A			lda adr.OBSTACLES,y
   845 1328 C9 7E			cmp #$7E
   846 132A			@
   847 132A F0 29			jeq l_021D
   848
   849 				; optimize OK (tools.inc), line = 61
   850
   851 132C B9 B6 2A			lda adr.OBSTACLES,y
   852 132F 85 21			sta :STACKORIGIN+9
   853 1331 B9 B7 2A			lda adr.OBSTACLES+1,y
   854 1334 85 11			sta :bp+1
   855 1336 A4 21			ldy :STACKORIGIN+9
   856 1338 A9 56			lda #$56
   857 133A 91 10			sta (:bp),y
   858
   859 				; optimize OK (tools.inc), line = 62
   860
   861 133C A5 59			lda I0B
   862 133E 0A				asl @
   863 133F A8				tay
   864 1340 B9 B6 2A			lda adr.OBSTACLES,y
   865 1343 38 E9 00			sub #$00
   866 1346 85 21			sta :STACKORIGIN+9
   867 1348 B9 B7 2A			lda adr.OBSTACLES+1,y
   868 134B E9 04			sbc #$04
   869 134D 85 11			sta :bp+1
   870 134F A4 21			ldy :STACKORIGIN+9
   871 1351 A9 35			lda #$35
   872 1353 91 10			sta (:bp),y
   873 1355			l_021D
   874
   875 				; --- ForToDoEpilog
   876 1355 C6 59			dec I0B
   877 1357 10 C1			jpl l_01FB
   878 1359			l_0209
   879
   880 				; ------------------------------------------------------------
   881
   882 = 0000			@FORTMP_01F8	= $00
   883 1359			@exit
   884 					.ifdef @new
   885 					lda <@VarData
   886 					sta :ztmp
   887 					lda >@VarData
   888 					ldy #@VarDataSize-1
   889 					jmp @FreeMem
   890 					els
   891 1359 60				rts						; ret
   892 					eif
   893 				.endl
   894
   895 135A			.local	DRAWTAIL					; PROCEDURE
   896
   897 				; optimize OK (tools.inc), line = 71
   898
   899 135A AC 73 2A 84 12 AC + 	mwy PLY :bp2
   900 1364 A0 04			ldy #PLY.DIR-DATAORIGIN
   901 1366 B1 12			lda (:bp2),y
   902 1368 C5 5B			cmp NEWDIR
   903 136A D0 14			jne l_024F
   904
   905 				; optimize OK (tools.inc), line = 72
   906
   907 136C A5 5B			lda NEWDIR
   908 136E 29 0C			and #$0C
   909 1370 F0 07			jeq l_0266
   910 1372 A9 40			lda #$40
   911 1374 85 58			sta T0B
   912 1376 4C 7D 13			jmp l_0274
   913 1379			l_0266
   914 1379 A9 42			lda #$42
   915 137B 85 58			sta T0B
   916 137D			l_0274
   917 137D 4C F0 13			jmp l_0281
   918 1380			l_024F
   919
   920 				; optimize OK (tools.inc), line = 74
   921
   922 1380 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   923 138A A0 04			ldy #PLY.DIR-DATAORIGIN
   924 138C B1 12			lda (:bp2),y
   925 138E 29 0A			and #$0A
   926 1390 F0 0A			jeq l_02A7
   927 1392 A5 5B			lda NEWDIR
   928 1394 29 05			and #$05
   929 1396 F0 04			jeq l_02A7
   930 1398 A9 7D			lda #$7D
   931 139A 85 58			sta T0B
   932 139C			l_02A7
   933
   934 				; optimize OK (tools.inc), line = 75
   935
   936 139C AC 73 2A 84 12 AC + 	mwy PLY :bp2
   937 13A6 A0 04			ldy #PLY.DIR-DATAORIGIN
   938 13A8 B1 12			lda (:bp2),y
   939 13AA 29 09			and #$09
   940 13AC F0 0A			jeq l_02D4
   941 13AE A5 5B			lda NEWDIR
   942 13B0 29 06			and #$06
   943 13B2 F0 04			jeq l_02D4
   944 13B4 A9 6E			lda #$6E
   945 13B6 85 58			sta T0B
   946 13B8			l_02D4
   947
   948 				; optimize OK (tools.inc), line = 76
   949
   950 13B8 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   951 13C2 A0 04			ldy #PLY.DIR-DATAORIGIN
   952 13C4 B1 12			lda (:bp2),y
   953 13C6 29 06			and #$06
   954 13C8 F0 0A			jeq l_0301
   955 13CA A5 5B			lda NEWDIR
   956 13CC 29 09			and #$09
   957 13CE F0 04			jeq l_0301
   958 13D0 A9 6D			lda #$6D
   959 13D2 85 58			sta T0B
   960 13D4			l_0301
   961
   962 				; optimize OK (tools.inc), line = 77
   963
   964 13D4 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   965 13DE A0 04			ldy #PLY.DIR-DATAORIGIN
   966 13E0 B1 12			lda (:bp2),y
   967 13E2 29 05			and #$05
   968 13E4 F0 0A			jeq l_032E
   969 13E6 A5 5B			lda NEWDIR
   970 13E8 29 0A			and #$0A
   971 13EA F0 04			jeq l_032E
   972 13EC A9 70			lda #$70
   973 13EE 85 58			sta T0B
   974 13F0			l_032E
   975 13F0			l_0281
   976
   977 				; optimize OK (tools.inc), line = 79
   978
   979 13F0 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   980 13FA A0 00			ldy #PLY.X-DATAORIGIN
   981 13FC B1 12			lda (:bp2),y
   982 13FE 8D CA 2A			sta PUTCHAR_0098.X
   983 1401 A0 01			ldy #PLY.Y-DATAORIGIN
   984 1403 B1 12			lda (:bp2),y
   985 1405 8D CB 2A			sta PUTCHAR_0098.Y
   986 1408 A5 58			lda T0B
   987 140A 8D CC 2A			sta PUTCHAR_0098.V
   988 140D 20 A3 11			jsr PUTCHAR_0098
   989 1410			@exit
   990 					.ifdef @new
   991 					lda <@VarData
   992 					sta :ztmp
   993 					lda >@VarData
   994 					ldy #@VarDataSize-1
   995 					jmp @FreeMem
   996 					els
   997 1410 60				rts						; ret
   998 					eif
   999 				.endl
  1000
  1001 1411			.local	CHECKJOYSTATUS					; PROCEDURE
  1002
  1003 				; optimize OK (tools.inc), line = 86
  1004
  1005 1411 A9 02			lda #$02
  1006 1413 8D 08 FF			sta JOY
  1007 1416 A9 FF			lda #$FF
  1008 1418 8D 30 FD			sta KEYSCAN
  1009
  1010 				; optimize OK (tools.inc), line = 87
  1011
  1012 141B AD 08 FF			lda JOY
  1013 141E 49 FF			eor #$FF
  1014 1420 85 63			sta JOYSTATUS
  1015 1422			@exit
  1016 					.ifdef @new
  1017 					lda <@VarData
  1018 					sta :ztmp
  1019 					lda >@VarData
  1020 					ldy #@VarDataSize-1
  1021 					jmp @FreeMem
  1022 					els
  1023 1422 60				rts						; ret
  1024 					eif
  1025 				.endl
  1026
  1027 1423			.local	SETPLAYER					; PROCEDURE
  1028
  1029 				; optimize OK (tools.inc), line = 94
  1030
  1031 1423 AD D3 2A			lda P
  1032 1426 8D 73 2A			sta PLY
  1033 1429 85 12			sta :bp2
  1034 142B AD D4 2A			lda P+1
  1035 142E 8D 74 2A			sta PLY+1
  1036 1431 85 13			sta :bp2+1
  1037 				; optimize OK (tools.inc), line = 95
  1038 1433 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1039 1435 AD D8 2A			lda BRAIN
  1040 1438 91 12			sta (:bp2),y
  1041 143A A0 00			ldy #PLY.X-DATAORIGIN
  1042 143C AD D5 2A			lda X
  1043 143F 91 12			sta (:bp2),y
  1044 1441 A0 01			ldy #PLY.Y-DATAORIGIN
  1045 1443 AD D6 2A			lda Y
  1046 1446 91 12			sta (:bp2),y
  1047 1448 A0 04			ldy #PLY.DIR-DATAORIGIN
  1048 144A AD D7 2A			lda DIR
  1049 144D 91 12			sta (:bp2),y
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 144F A0 02			ldy #PLY.HEAD-DATAORIGIN
  1054 1451 AD D9 2A			lda HEAD
  1055 1454 91 12			sta (:bp2),y
  1056 1456 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1057 1458 AD DA 2A			lda COLOUR
  1058 145B 91 12			sta (:bp2),y
  1059 145D A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1060 145F AD DB 2A			lda ISALIVE
  1061 1462 91 12			sta (:bp2),y
  1062
  1063 				; optimize OK (tools.inc), line = 97
  1064
  1065 1464 AD DB 2A			lda ISALIVE
  1066 1467 F0 1D			jeq l_0394
  1067
  1068 				; optimize FAIL (0, tools.inc), line = 98
  1069
  1070 1469 E6 5A			inc ALIVE
  1071 146B AD DA 2A			lda COLOUR
  1072 146E 8D C9 2A			sta PUTCHAR_0072.C
  1073 1471 AD D9 2A			lda HEAD
  1074 1474 8D C8 2A			sta PUTCHAR_0072.V
  1075 1477 AD D6 2A			lda Y
  1076 147A 8D C7 2A			sta PUTCHAR_0072.Y
  1077 147D AD D5 2A			lda X
  1078 1480 8D C6 2A			sta PUTCHAR_0072.X
  1079 1483 20 78 11			jsr PUTCHAR_0072
  1080 1486			l_0394
  1081
  1082 				; ------------------------------------------------------------
  1083
  1084 = 2AD3			P	= DATAORIGIN+$004F
  1085 = 2AD5			X	= DATAORIGIN+$0051
  1086 = 2AD6			Y	= DATAORIGIN+$0052
  1087 = 2AD7			DIR	= DATAORIGIN+$0053
  1088 = 2AD8			BRAIN	= DATAORIGIN+$0054
  1089 = 2AD9			HEAD	= DATAORIGIN+$0055
  1090 = 2ADA			COLOUR	= DATAORIGIN+$0056
  1091 = 2ADB			ISALIVE	= DATAORIGIN+$0057
  1092
  1093 = 2AD3			@VarData	= P
  1094 = 0009			@VarDataSize	= 9
  1095
  1096 1486			@exit
  1097 					.ifdef @new
  1098 					lda <@VarData
  1099 					sta :ztmp
  1100 					lda >@VarData
  1101 					ldy #@VarDataSize-1
  1102 					jmp @FreeMem
  1103 					els
  1104 1486 60				rts						; ret
  1105 					eif
  1106 				.endl
  1107
  1108 1487			.local	AISTRAIGHT					; PROCEDURE
  1109
  1110 				; optimize OK (ai.inc), line = 5
  1111
  1112 1487 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1113 1491 A0 04			ldy #PLY.DIR-DATAORIGIN
  1114 1493 B1 12			lda (:bp2),y
  1115 1495 25 5C			and AVAILDIR
  1116 1497 F0 07			jeq l_03C4
  1117 1499 B1 12			lda (:bp2),y
  1118 149B 85 5B			sta NEWDIR
  1119 149D 4C 0B 15			jmp l_03D4
  1120 14A0			l_03C4
  1121
  1122 				; optimize OK (ai.inc), line = 7
  1123
  1124 14A0 A5 5C			lda AVAILDIR
  1125 14A2 C9 03			cmp #$03
  1126 14A4 D0 10			jne l_03E6
  1127 14A6 A9 02			lda #$02
  1128 14A8 20 47 11			jsr SYSTEM.RANDOM_006D
  1129 14AB B4 18			ldy :STACKORIGIN,x
  1130 14AD B9 40 10			lda adr.DIRECTION,y
  1131 14B0 85 5B			sta NEWDIR
  1132 14B2 CA				dex
  1133 14B3 4C CE 14			jmp l_03F8
  1134 14B6			l_03E6
  1135
  1136 				; optimize OK (ai.inc), line = 9
  1137
  1138 14B6 A5 5C			lda AVAILDIR
  1139 14B8 8D DC 2A			sta @CASETMP_0003
  1140 14BB C9 01			cmp #$01
  1141 14BD D0 07			jne l_0403
  1142 14BF			@
  1143
  1144 				; optimize OK (ai.inc), line = 10
  1145
  1146 14BF A9 01			lda #$01
  1147 14C1 85 5B			sta NEWDIR
  1148
  1149 14C3 4C CE 14			jmp a_0003
  1150 14C6			l_0403
  1151 14C6 C9 02			cmp #$02
  1152 14C8 D0 04			jne l_0410
  1153 14CA			@
  1154
  1155 				; optimize OK (ai.inc), line = 11
  1156
  1157 14CA A9 02			lda #$02
  1158 14CC 85 5B			sta NEWDIR
  1159
  1160 14CE			l_0410
  1161 14CE			a_0003
  1162 14CE			l_03F8
  1163
  1164 				; optimize OK (ai.inc), line = 14
  1165
  1166 14CE A5 5C			lda AVAILDIR
  1167 14D0 C9 0C			cmp #$0C
  1168 14D2 D0 1F			jne l_042C
  1169 14D4 A9 02			lda #$02
  1170 14D6 20 47 11			jsr SYSTEM.RANDOM_006D
  1171 14D9 E8				inx
  1172 14DA A9 02 95 18			mva #$02 :STACKORIGIN,x
  1173 14DE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1174 14E2 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1175 14E4 20 44 10			jsr addAX_CX
  1176 14E7 CA				dex
  1177 14E8 B4 18			ldy :STACKORIGIN,x
  1178 14EA B9 40 10			lda adr.DIRECTION,y
  1179 14ED 85 5B			sta NEWDIR
  1180 14EF CA				dex
  1181 14F0 4C 0B 15			jmp l_0442
  1182 14F3			l_042C
  1183
  1184 				; optimize OK (ai.inc), line = 16
  1185
  1186 14F3 A5 5C			lda AVAILDIR
  1187 14F5 8D DD 2A			sta @CASETMP_0004
  1188 14F8 C9 04			cmp #$04
  1189 14FA D0 07			jne l_044D
  1190 14FC			@
  1191
  1192 				; optimize OK (ai.inc), line = 17
  1193
  1194 14FC A9 04			lda #$04
  1195 14FE 85 5B			sta NEWDIR
  1196
  1197 1500 4C 0B 15			jmp a_0004
  1198 1503			l_044D
  1199 1503 C9 08			cmp #$08
  1200 1505 D0 04			jne l_045A
  1201 1507			@
  1202
  1203 				; optimize OK (ai.inc), line = 18
  1204
  1205 1507 A9 08			lda #$08
  1206 1509 85 5B			sta NEWDIR
  1207
  1208 150B			l_045A
  1209 150B			a_0004
  1210 150B			l_0442
  1211 150B			l_03D4
  1212
  1213 				; ------------------------------------------------------------
  1214
  1215 = 2ADC			@CASETMP_0003	= DATAORIGIN+$0058
  1216 = 2ADD			@CASETMP_0004	= DATAORIGIN+$0059
  1217
  1218 = 2ADC			@VarData	= @CASETMP_0003
  1219 = 0002			@VarDataSize	= 2
  1220
  1221 150B			@exit
  1222 					.ifdef @new
  1223 					lda <@VarData
  1224 					sta :ztmp
  1225 					lda >@VarData
  1226 					ldy #@VarDataSize-1
  1227 					jmp @FreeMem
  1228 					els
  1229 150B 60				rts						; ret
  1230 					eif
  1231 				.endl
  1232
  1233 150C			.local	AISAPPER					; PROCEDURE
  1234
  1235 				; optimize OK (ai.inc), line = 31
  1236
  1237 150C A9 00			lda #$00
  1238 150E 8D DE 2A			sta L
  1239 1511 8D DF 2A			sta R
  1240 1514 8D E0 2A			sta U
  1241 1517 8D E1 2A			sta D
  1242
  1243 				; optimize OK (ai.inc), line = 32
  1244
  1245 151A AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1246 1524 A0 01			ldy #PLY.Y-DATAORIGIN
  1247 1526 B1 12			lda (:bp2),y
  1248 1528 0A				asl @
  1249 1529 A8				tay
  1250 152A A9 00			lda #$00
  1251 152C 18 79 0E 10			add adr.MUL40,y
  1252 1530 85 21			sta :STACKORIGIN+9
  1253 1532 A9 0C			lda #$0C
  1254 1534 79 0F 10			adc adr.MUL40+1,y
  1255 1537 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1256 1539 A0 00			ldy #PLY.X-DATAORIGIN
  1257 153B A5 21			lda :STACKORIGIN+9
  1258 153D 18 71 12			add (:bp2),y
  1259 1540 85 5D			sta T0W
  1260 1542 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1261 1544 69 00			adc #$00
  1262 1546 85 5E			sta T0W+1
  1263
  1264 				; optimize OK (ai.inc), line = 34
  1265
  1266 1548 A5 5C			lda AVAILDIR
  1267 154A 29 01			and #$01
  1268 154C F0 73			jeq l_04A0
  1269
  1270 				; optimize OK (ai.inc), line = 35
  1271
  1272 154E A9 05			lda #$05
  1273 1550 85 59			sta I0B
  1274
  1275 1552			l_04AA
  1276 				; --- ForToDoCondition
  1277 1552 A5 59			lda I0B
  1278 1554 C9 01			cmp #$01
  1279 1556 90 69			jcc l_04B8
  1280
  1281 				; optimize OK (ai.inc), line = 36
  1282
  1283 1558 0A				asl @
  1284 1559 A8				tay
  1285 155A A5 5D			lda T0W
  1286 155C 38 F9 0E 10			sub adr.MUL40,y
  1287 1560 85 21			sta :STACKORIGIN+9
  1288 1562 A5 5E			lda T0W+1
  1289 1564 F9 0F 10			sbc adr.MUL40+1,y
  1290 1567 85 11			sta :bp+1
  1291 1569 A4 21			ldy :STACKORIGIN+9
  1292 156B B1 10			lda (:bp),y
  1293 156D C9 20			cmp #$20
  1294 156F D0 03			jne l_04D2
  1295 1571 EE E0 2A			inc U
  1296 1574			l_04D2
  1297
  1298 				; optimize OK (ai.inc), line = 37
  1299
  1300 1574 A5 59			lda I0B
  1301 1576 0A				asl @
  1302 1577 A8				tay
  1303 1578 A5 5D			lda T0W
  1304 157A 38 F9 0E 10			sub adr.MUL40,y
  1305 157E 85 21			sta :STACKORIGIN+9
  1306 1580 A5 5E			lda T0W+1
  1307 1582 F9 0F 10			sbc adr.MUL40+1,y
  1308 1585 85 11			sta :bp+1
  1309 1587 A5 21			lda :STACKORIGIN+9
  1310 1589 18 69 01			add #$01
  1311 158C A8				tay
  1312 158D 90 02			scc
  1313 158F E6 11			inc :bp+1
  1314 1591 B1 10			lda (:bp),y
  1315 1593 C9 20			cmp #$20
  1316 1595 D0 03			jne l_04F7
  1317 1597 EE E0 2A			inc U
  1318 159A			l_04F7
  1319
  1320 				; optimize OK (ai.inc), line = 38
  1321
  1322 159A A5 59			lda I0B
  1323 159C 0A				asl @
  1324 159D A8				tay
  1325 159E A5 5D			lda T0W
  1326 15A0 38 F9 0E 10			sub adr.MUL40,y
  1327 15A4 85 21			sta :STACKORIGIN+9
  1328 15A6 A5 5E			lda T0W+1
  1329 15A8 F9 0F 10			sbc adr.MUL40+1,y
  1330 15AB 85 11			sta :bp+1
  1331 15AD A4 21			ldy :STACKORIGIN+9
  1332 15AF 88				dey
  1333 15B0 B0 02			scs
  1334 15B2 C6 11			dec :bp+1
  1335 15B4 B1 10			lda (:bp),y
  1336 15B6 C9 20			cmp #$20
  1337 15B8 D0 03			jne l_051C
  1338 15BA EE E0 2A			inc U
  1339 15BD			l_051C
  1340
  1341 				; --- ForToDoEpilog
  1342 15BD C6 59			dec I0B
  1343 15BF 10 91			jpl l_04AA
  1344 15C1			l_04B8
  1345 15C1			l_04A0
  1346
  1347 				; optimize OK (ai.inc), line = 42
  1348
  1349 15C1 A5 5C			lda AVAILDIR
  1350 15C3 29 02			and #$02
  1351 15C5 F0 73			jeq l_0540
  1352
  1353 				; optimize OK (ai.inc), line = 43
  1354
  1355 15C7 A9 05			lda #$05
  1356 15C9 85 59			sta I0B
  1357
  1358 15CB			l_054A
  1359 				; --- ForToDoCondition
  1360 15CB A5 59			lda I0B
  1361 15CD C9 01			cmp #$01
  1362 15CF 90 69			jcc l_0558
  1363
  1364 				; optimize OK (ai.inc), line = 44
  1365
  1366 15D1 0A				asl @
  1367 15D2 A8				tay
  1368 15D3 A5 5D			lda T0W
  1369 15D5 18 79 0E 10			add adr.MUL40,y
  1370 15D9 85 21			sta :STACKORIGIN+9
  1371 15DB A5 5E			lda T0W+1
  1372 15DD 79 0F 10			adc adr.MUL40+1,y
  1373 15E0 85 11			sta :bp+1
  1374 15E2 A4 21			ldy :STACKORIGIN+9
  1375 15E4 B1 10			lda (:bp),y
  1376 15E6 C9 20			cmp #$20
  1377 15E8 D0 03			jne l_0572
  1378 15EA EE E1 2A			inc D
  1379 15ED			l_0572
  1380
  1381 				; optimize OK (ai.inc), line = 45
  1382
  1383 15ED A5 59			lda I0B
  1384 15EF 0A				asl @
  1385 15F0 A8				tay
  1386 15F1 A5 5D			lda T0W
  1387 15F3 18 79 0E 10			add adr.MUL40,y
  1388 15F7 85 21			sta :STACKORIGIN+9
  1389 15F9 A5 5E			lda T0W+1
  1390 15FB 79 0F 10			adc adr.MUL40+1,y
  1391 15FE 85 11			sta :bp+1
  1392 1600 A5 21			lda :STACKORIGIN+9
  1393 1602 18 69 01			add #$01
  1394 1605 A8				tay
  1395 1606 90 02			scc
  1396 1608 E6 11			inc :bp+1
  1397 160A B1 10			lda (:bp),y
  1398 160C C9 20			cmp #$20
  1399 160E D0 03			jne l_0597
  1400 1610 EE E1 2A			inc D
  1401 1613			l_0597
  1402
  1403 				; optimize OK (ai.inc), line = 46
  1404
  1405 1613 A5 59			lda I0B
  1406 1615 0A				asl @
  1407 1616 A8				tay
  1408 1617 A5 5D			lda T0W
  1409 1619 18 79 0E 10			add adr.MUL40,y
  1410 161D 85 21			sta :STACKORIGIN+9
  1411 161F A5 5E			lda T0W+1
  1412 1621 79 0F 10			adc adr.MUL40+1,y
  1413 1624 85 11			sta :bp+1
  1414 1626 A4 21			ldy :STACKORIGIN+9
  1415 1628 88				dey
  1416 1629 B0 02			scs
  1417 162B C6 11			dec :bp+1
  1418 162D B1 10			lda (:bp),y
  1419 162F C9 20			cmp #$20
  1420 1631 D0 03			jne l_05BC
  1421 1633 EE E1 2A			inc D
  1422 1636			l_05BC
  1423
  1424 				; --- ForToDoEpilog
  1425 1636 C6 59			dec I0B
  1426 1638 10 91			jpl l_054A
  1427 163A			l_0558
  1428 163A			l_0540
  1429
  1430 				; optimize OK (ai.inc), line = 50
  1431
  1432 163A A5 5C			lda AVAILDIR
  1433 163C 29 04			and #$04
  1434 163E F0 5F			jeq l_05E0
  1435
  1436 				; optimize OK (ai.inc), line = 51
  1437
  1438 1640 A9 05			lda #$05
  1439 1642 85 59			sta I0B
  1440
  1441 1644			l_05EA
  1442 				; --- ForToDoCondition
  1443 1644 A5 59			lda I0B
  1444 1646 C9 01			cmp #$01
  1445 1648 90 55			jcc l_05F8
  1446
  1447 				; optimize OK (ai.inc), line = 52
  1448
  1449 164A A5 5D			lda T0W
  1450 164C 38 E5 59			sub I0B
  1451 164F A8				tay
  1452 1650 A5 5E			lda T0W+1
  1453 1652 E9 00			sbc #$00
  1454 1654 85 11			sta :bp+1
  1455 1656 B1 10			lda (:bp),y
  1456 1658 C9 20			cmp #$20
  1457 165A D0 03			jne l_0610
  1458 165C EE DE 2A			inc L
  1459 165F			l_0610
  1460
  1461 				; optimize OK (ai.inc), line = 53
  1462
  1463 165F A5 5D			lda T0W
  1464 1661 38 E5 59			sub I0B
  1465 1664 A8				tay
  1466 1665 A5 5E			lda T0W+1
  1467 1667 E9 00			sbc #$00
  1468 1669 85 11			sta :bp+1
  1469 166B 98				tya
  1470 166C 18 69 28			add #$28
  1471 166F A8				tay
  1472 1670 90 02			scc
  1473 1672 E6 11			inc :bp+1
  1474 1674 B1 10			lda (:bp),y
  1475 1676 C9 20			cmp #$20
  1476 1678 D0 03			jne l_0633
  1477 167A EE DE 2A			inc L
  1478 167D			l_0633
  1479
  1480 				; optimize OK (ai.inc), line = 54
  1481
  1482 167D A5 5D			lda T0W
  1483 167F 38 E5 59			sub I0B
  1484 1682 A8				tay
  1485 1683 A5 5E			lda T0W+1
  1486 1685 E9 00			sbc #$00
  1487 1687 85 11			sta :bp+1
  1488 1689 98				tya
  1489 168A 38 E9 28			sub #$28
  1490 168D A8				tay
  1491 168E B0 02			scs
  1492 1690 C6 11			dec :bp+1
  1493 1692 B1 10			lda (:bp),y
  1494 1694 C9 20			cmp #$20
  1495 1696 D0 03			jne l_0656
  1496 1698 EE DE 2A			inc L
  1497 169B			l_0656
  1498
  1499 				; --- ForToDoEpilog
  1500 169B C6 59			dec I0B
  1501 169D 10 A5			jpl l_05EA
  1502 169F			l_05F8
  1503 169F			l_05E0
  1504
  1505 				; optimize OK (ai.inc), line = 58
  1506
  1507 169F A5 5C			lda AVAILDIR
  1508 16A1 29 08			and #$08
  1509 16A3 F0 5D			jeq l_067A
  1510
  1511 				; optimize OK (ai.inc), line = 59
  1512
  1513 16A5 A9 05			lda #$05
  1514 16A7 85 59			sta I0B
  1515
  1516 16A9			l_0684
  1517 				; --- ForToDoCondition
  1518 16A9 A5 59			lda I0B
  1519 16AB C9 01			cmp #$01
  1520 16AD 90 53			jcc l_0692
  1521
  1522 				; optimize OK (ai.inc), line = 60
  1523
  1524 16AF A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1525 16B7 A4 59			ldy I0B
  1526 16B9 B1 12			lda (:bp2),y
  1527 16BB C9 20			cmp #$20
  1528 16BD D0 03			jne l_06AA
  1529 16BF EE DF 2A			inc R
  1530 16C2			l_06AA
  1531
  1532 				; optimize OK (ai.inc), line = 61
  1533
  1534 16C2 A5 5D			lda T0W
  1535 16C4 18 65 59			add I0B
  1536 16C7 A8				tay
  1537 16C8 A5 5E			lda T0W+1
  1538 16CA 69 00			adc #$00
  1539 16CC 85 11			sta :bp+1
  1540 16CE 98				tya
  1541 16CF 18 69 28			add #$28
  1542 16D2 A8				tay
  1543 16D3 90 02			scc
  1544 16D5 E6 11			inc :bp+1
  1545 16D7 B1 10			lda (:bp),y
  1546 16D9 C9 20			cmp #$20
  1547 16DB D0 03			jne l_06CD
  1548 16DD EE DF 2A			inc R
  1549 16E0			l_06CD
  1550
  1551 				; optimize OK (ai.inc), line = 62
  1552
  1553 16E0 A5 5D			lda T0W
  1554 16E2 18 65 59			add I0B
  1555 16E5 A8				tay
  1556 16E6 A5 5E			lda T0W+1
  1557 16E8 69 00			adc #$00
  1558 16EA 85 11			sta :bp+1
  1559 16EC 98				tya
  1560 16ED 38 E9 28			sub #$28
  1561 16F0 A8				tay
  1562 16F1 B0 02			scs
  1563 16F3 C6 11			dec :bp+1
  1564 16F5 B1 10			lda (:bp),y
  1565 16F7 C9 20			cmp #$20
  1566 16F9 D0 03			jne l_06F0
  1567 16FB EE DF 2A			inc R
  1568 16FE			l_06F0
  1569
  1570 				; --- ForToDoEpilog
  1571 16FE C6 59			dec I0B
  1572 1700 10 A7			jpl l_0684
  1573 1702			l_0692
  1574 1702			l_067A
  1575
  1576 				; optimize OK (ai.inc), line = 66
  1577
  1578 1702 AD E1 2A			lda D
  1579 1705 85 58			sta T0B
  1580
  1581 				; optimize OK (ai.inc), line = 67
  1582
  1583 1707 CD E0 2A			cmp U
  1584 170A B0 05			jcs l_0718
  1585 170C AD E0 2A			lda U
  1586 170F 85 58			sta T0B
  1587 1711			l_0718
  1588
  1589 				; optimize OK (ai.inc), line = 68
  1590
  1591 1711 A5 58			lda T0B
  1592 1713 CD DE 2A			cmp L
  1593 1716 B0 05			jcs l_0735
  1594 1718 AD DE 2A			lda L
  1595 171B 85 58			sta T0B
  1596 171D			l_0735
  1597
  1598 				; optimize OK (ai.inc), line = 69
  1599
  1600 171D A5 58			lda T0B
  1601 171F CD DF 2A			cmp R
  1602 1722 B0 05			jcs l_0752
  1603 1724 AD DF 2A			lda R
  1604 1727 85 58			sta T0B
  1605 1729			l_0752
  1606
  1607 				; optimize OK (ai.inc), line = 71
  1608
  1609 1729 A5 58			lda T0B
  1610 172B CD E1 2A			cmp D
  1611 172E D0 04			jne l_076F
  1612 1730 A9 02			lda #$02
  1613 1732 85 58			sta T0B
  1614 1734			l_076F
  1615
  1616 				; optimize OK (ai.inc), line = 72
  1617
  1618 1734 A5 58			lda T0B
  1619 1736 CD E0 2A			cmp U
  1620 1739 D0 04			jne l_078A
  1621 173B A9 01			lda #$01
  1622 173D 85 58			sta T0B
  1623 173F			l_078A
  1624
  1625 				; optimize OK (ai.inc), line = 73
  1626
  1627 173F A5 58			lda T0B
  1628 1741 CD DE 2A			cmp L
  1629 1744 D0 04			jne l_07A5
  1630 1746 A9 04			lda #$04
  1631 1748 85 58			sta T0B
  1632 174A			l_07A5
  1633
  1634 				; optimize OK (ai.inc), line = 74
  1635
  1636 174A A5 58			lda T0B
  1637 174C CD DF 2A			cmp R
  1638 174F D0 04			jne l_07C0
  1639 1751 A9 08			lda #$08
  1640 1753 85 58			sta T0B
  1641 1755			l_07C0
  1642
  1643 				; optimize OK (ai.inc), line = 76
  1644
  1645 1755 A5 5C			lda AVAILDIR
  1646 1757 25 58			and T0B
  1647 1759 F0 07			jeq l_07DF
  1648 175B A5 58			lda T0B
  1649 175D 85 5B			sta NEWDIR
  1650 175F 4C 65 17			jmp l_07EF
  1651 1762			l_07DF
  1652
  1653 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1654
  1655 1762 20 87 14			jsr AISTRAIGHT
  1656 1765			l_07EF
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 = 2ADE			L	= DATAORIGIN+$005A
  1661 = 2ADF			R	= DATAORIGIN+$005B
  1662 = 2AE0			U	= DATAORIGIN+$005C
  1663 = 2AE1			D	= DATAORIGIN+$005D
  1664 = 0001			@FORTMP_04A7	= $01
  1665 = 0001			@FORTMP_0547	= $01
  1666 = 0001			@FORTMP_05E7	= $01
  1667 = 0001			@FORTMP_0681	= $01
  1668
  1669 = 2ADE			@VarData	= L
  1670 = 0004			@VarDataSize	= 4
  1671
  1672 1765			@exit
  1673 					.ifdef @new
  1674 					lda <@VarData
  1675 					sta :ztmp
  1676 					lda >@VarData
  1677 					ldy #@VarDataSize-1
  1678 					jmp @FreeMem
  1679 					els
  1680 1765 60				rts						; ret
  1681 					eif
  1682 				.endl
  1683
  1684 1766			.local	AIBULLY						; PROCEDURE
  1685
  1686 				; optimize OK (ai.inc), line = 84
  1687
  1688 1766 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1689 1770 A0 04			ldy #PLY.DIR-DATAORIGIN
  1690 1772 B1 12			lda (:bp2),y
  1691 1774 85 58			sta T0B
  1692
  1693 				; optimize OK (ai.inc), line = 86
  1694
  1695 1776 AD 9D 2A			lda PLAYER1.ISALIVE
  1696 1779 0D A5 2A			ora PLAYER2.ISALIVE
  1697 177C D0 03 4C 23 18		jeq l_080C
  1698
  1699 				; optimize OK (ai.inc), line = 88
  1700
  1701 1781 AD 9D 2A			lda PLAYER1.ISALIVE
  1702 1784 F0 0F			jeq l_0819
  1703 1786 AD 77 2A			lda PLAYER1
  1704 1789 8D 75 2A			sta TMPPLY
  1705 178C AD 78 2A			lda PLAYER1+1
  1706 178F 8D 76 2A			sta TMPPLY+1
  1707 1792 4C A1 17			jmp l_0828
  1708 1795			l_0819
  1709 1795 AD 79 2A			lda PLAYER2
  1710 1798 8D 75 2A			sta TMPPLY
  1711 179B AD 7A 2A			lda PLAYER2+1
  1712 179E 8D 76 2A			sta TMPPLY+1
  1713 17A1			l_0828
  1714
  1715 				; optimize OK (ai.inc), line = 90
  1716
  1717 17A1 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1718 17AB A0 01			ldy #PLY.Y-DATAORIGIN
  1719 17AD B1 12			lda (:bp2),y
  1720 17AF 85 21			sta :STACKORIGIN+9
  1721 17B1 AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1722 17BB A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1723 17BD B1 12			lda (:bp2),y
  1724 17BF C5 21			cmp :STACKORIGIN+9
  1725 17C1 B0 07			jcs l_0841
  1726 17C3 A9 01			lda #$01
  1727 17C5 85 58			sta T0B
  1728 17C7 4C CE 17			jmp l_084F
  1729 17CA			l_0841
  1730 17CA A9 02			lda #$02
  1731 17CC 85 58			sta T0B
  1732 17CE			l_084F
  1733
  1734 				; optimize OK (ai.inc), line = 91
  1735
  1736 17CE AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1737 17D8 A0 01			ldy #PLY.Y-DATAORIGIN
  1738 17DA B1 12			lda (:bp2),y
  1739 17DC 85 21			sta :STACKORIGIN+9
  1740 17DE AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1741 17E8 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1742 17EA B1 12			lda (:bp2),y
  1743 17EC C5 21			cmp :STACKORIGIN+9
  1744 17EE F0 06			jeq l_0879x
  1745 17F0 A5 5C			lda AVAILDIR
  1746 17F2 25 58			and T0B
  1747 17F4 D0 2D			jne l_0879
  1748 17F6			l_0879x
  1749
  1750 				; optimize OK (ai.inc), line = 92
  1751
  1752 17F6 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1753 1800 A0 00			ldy #PLY.X-DATAORIGIN
  1754 1802 B1 12			lda (:bp2),y
  1755 1804 85 21			sta :STACKORIGIN+9
  1756 1806 AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1757 1810 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1758 1812 B1 12			lda (:bp2),y
  1759 1814 C5 21			cmp :STACKORIGIN+9
  1760 1816 B0 07			jcs l_088E
  1761 1818 A9 04			lda #$04
  1762 181A 85 58			sta T0B
  1763 181C 4C 23 18			jmp l_089C
  1764 181F			l_088E
  1765 181F A9 08			lda #$08
  1766 1821 85 58			sta T0B
  1767 1823			l_089C
  1768 1823			l_0879
  1769 1823			l_080C
  1770
  1771 				; optimize OK (ai.inc), line = 96
  1772
  1773 1823 A5 5C			lda AVAILDIR
  1774 1825 25 58			and T0B
  1775 1827 F0 07			jeq l_08BC
  1776 1829 A5 58			lda T0B
  1777 182B 85 5B			sta NEWDIR
  1778 182D 4C 33 18			jmp l_08CC
  1779 1830			l_08BC
  1780
  1781 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1782
  1783 1830 20 0C 15			jsr AISAPPER
  1784 1833			l_08CC
  1785 1833			@exit
  1786 					.ifdef @new
  1787 					lda <@VarData
  1788 					sta :ztmp
  1789 					lda >@VarData
  1790 					ldy #@VarDataSize-1
  1791 					jmp @FreeMem
  1792 					els
  1793 1833 60				rts						; ret
  1794 					eif
  1795 				.endl
  1796
  1797 1834			.local	AIMIRROR					; PROCEDURE
  1798
  1799 				; optimize OK (ai.inc), line = 105
  1800
  1801 1834 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1802 183E A0 04			ldy #PLY.DIR-DATAORIGIN
  1803 1840 B1 12			lda (:bp2),y
  1804 1842 85 58			sta T0B
  1805
  1806 				; optimize OK (ai.inc), line = 107
  1807
  1808 1844 AD 9D 2A			lda PLAYER1.ISALIVE
  1809 1847 F0 2F			jeq l_08E3
  1810
  1811 				; optimize OK (ai.inc), line = 108
  1812
  1813 1849 AD 9A 2A			lda PLAYER1.DIR
  1814 184C 8D E2 2A			sta @CASETMP_0005
  1815 184F C9 01			cmp #$01
  1816 1851 D0 07			jne l_08EF
  1817 1853			@
  1818
  1819 				; optimize OK (ai.inc), line = 109
  1820
  1821 1853 A9 02			lda #$02
  1822 1855 85 58			sta T0B
  1823
  1824 1857 4C 78 18			jmp a_0005
  1825 185A			l_08EF
  1826 185A C9 02			cmp #$02
  1827 185C D0 07			jne l_08FC
  1828 185E			@
  1829
  1830 				; optimize OK (ai.inc), line = 110
  1831
  1832 185E A9 01			lda #$01
  1833 1860 85 58			sta T0B
  1834
  1835 1862 4C 78 18			jmp a_0005
  1836 1865			l_08FC
  1837 1865 C9 04			cmp #$04
  1838 1867 D0 07			jne l_0909
  1839 1869			@
  1840
  1841 				; optimize OK (ai.inc), line = 111
  1842
  1843 1869 A9 08			lda #$08
  1844 186B 85 58			sta T0B
  1845
  1846 186D 4C 78 18			jmp a_0005
  1847 1870			l_0909
  1848 1870 C9 08			cmp #$08
  1849 1872 D0 04			jne l_0916
  1850 1874			@
  1851
  1852 				; optimize OK (ai.inc), line = 112
  1853
  1854 1874 A9 04			lda #$04
  1855 1876 85 58			sta T0B
  1856
  1857 1878			l_0916
  1858 1878			a_0005
  1859 1878			l_08E3
  1860
  1861 				; optimize OK (ai.inc), line = 116
  1862
  1863 1878 A5 5C			lda AVAILDIR
  1864 187A 25 58			and T0B
  1865 187C F0 07			jeq l_093C
  1866 187E A5 58			lda T0B
  1867 1880 85 5B			sta NEWDIR
  1868 1882 4C 88 18			jmp l_094C
  1869 1885			l_093C
  1870
  1871 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  1872
  1873 1885 20 0C 15			jsr AISAPPER
  1874 1888			l_094C
  1875
  1876 				; ------------------------------------------------------------
  1877
  1878 = 2AE2			@CASETMP_0005	= DATAORIGIN+$005E
  1879
  1880 = 2AE2			@VarData	= @CASETMP_0005
  1881 = 0001			@VarDataSize	= 1
  1882
  1883 1888			@exit
  1884 					.ifdef @new
  1885 					lda <@VarData
  1886 					sta :ztmp
  1887 					lda >@VarData
  1888 					ldy #@VarDataSize-1
  1889 					jmp @FreeMem
  1890 					els
  1891 1888 60				rts						; ret
  1892 					eif
  1893 				.endl
  1894
  1895 1889			.local	SETLEVEL00					; PROCEDURE
  1896
  1897 				; optimize OK (levels.inc), line = 5
  1898
  1899 1889 A9 01			lda #$01
  1900 188B 8D DB 2A			sta SETPLAYER.ISALIVE
  1901 188E A9 62			lda #$62
  1902 1890 8D DA 2A			sta SETPLAYER.COLOUR
  1903 1893 A9 51			lda #$51
  1904 1895 8D D9 2A			sta SETPLAYER.HEAD
  1905 1898 A9 00			lda #$00
  1906 189A 8D D8 2A			sta SETPLAYER.BRAIN
  1907 189D A9 08			lda #$08
  1908 189F 8D D7 2A			sta SETPLAYER.DIR
  1909 18A2 A9 0C			lda #$0C
  1910 18A4 8D D6 2A			sta SETPLAYER.Y
  1911 18A7 A9 0A			lda #$0A
  1912 18A9 8D D5 2A			sta SETPLAYER.X
  1913 18AC AD 77 2A			lda PLAYER1
  1914 18AF 8D D3 2A			sta SETPLAYER.P
  1915 18B2 AD 78 2A			lda PLAYER1+1
  1916 18B5 8D D4 2A			sta SETPLAYER.P+1
  1917 18B8 20 23 14			jsr SETPLAYER
  1918
  1919 				; optimize OK (levels.inc), line = 6
  1920
  1921 18BB A9 01			lda #$01
  1922 18BD 8D DB 2A			sta SETPLAYER.ISALIVE
  1923 18C0 A9 5D			lda #$5D
  1924 18C2 8D DA 2A			sta SETPLAYER.COLOUR
  1925 18C5 A9 51			lda #$51
  1926 18C7 8D D9 2A			sta SETPLAYER.HEAD
  1927 18CA A9 01			lda #$01
  1928 18CC 8D D8 2A			sta SETPLAYER.BRAIN
  1929 18CF A9 04			lda #$04
  1930 18D1 8D D7 2A			sta SETPLAYER.DIR
  1931 18D4 A9 0C			lda #$0C
  1932 18D6 8D D6 2A			sta SETPLAYER.Y
  1933 18D9 A9 1E			lda #$1E
  1934 18DB 8D D5 2A			sta SETPLAYER.X
  1935 18DE AD 79 2A			lda PLAYER2
  1936 18E1 8D D3 2A			sta SETPLAYER.P
  1937 18E4 AD 7A 2A			lda PLAYER2+1
  1938 18E7 8D D4 2A			sta SETPLAYER.P+1
  1939 18EA 20 23 14			jsr SETPLAYER
  1940
  1941 				; optimize FAIL (1, levels.inc), line = 8
  1942
  1943 18ED E8				inx
  1944 18EE A9 00 95 18			mva #$00 :STACKORIGIN,x
  1945 18F2 95 28			sta :STACKORIGIN+STACKWIDTH,x
  1946 18F4 A9 06			lda #$06
  1947 18F6 8D D0 2A			sta CALCOBSTACLEADDR.Y
  1948 18F9 A9 0A			lda #$0A
  1949 18FB 8D CF 2A			sta CALCOBSTACLEADDR.X
  1950 18FE 20 F3 12			jsr CALCOBSTACLEADDR
  1951 1901 B4 17			ldy :STACKORIGIN-1,x
  1952 1903 B5 18			lda :STACKORIGIN,x
  1953 1905 99 B6 2A			sta adr.OBSTACLES,y
  1954 1908 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  1955 190A 99 B7 2A			sta adr.OBSTACLES+1,y
  1956 190D CA				dex
  1957
  1958 				; optimize FAIL (1, levels.inc), line = 9
  1959
  1960 190E A9 02 95 18			mva #$02 :STACKORIGIN,x
  1961 1912 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1962 1916 A9 06			lda #$06
  1963 1918 8D D0 2A			sta CALCOBSTACLEADDR.Y
  1964 191B A9 1E			lda #$1E
  1965 191D 8D CF 2A			sta CALCOBSTACLEADDR.X
  1966 1920 20 F3 12			jsr CALCOBSTACLEADDR
  1967 1923 B4 17			ldy :STACKORIGIN-1,x
  1968 1925 B5 18			lda :STACKORIGIN,x
  1969 1927 99 B6 2A			sta adr.OBSTACLES,y
  1970 192A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  1971 192C 99 B7 2A			sta adr.OBSTACLES+1,y
  1972 192F CA				dex
  1973
  1974 				; optimize FAIL (1, levels.inc), line = 10
  1975
  1976 1930 A9 04 95 18			mva #$04 :STACKORIGIN,x
  1977 1934 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1978 1938 A9 12			lda #$12
  1979 193A 8D D0 2A			sta CALCOBSTACLEADDR.Y
  1980 193D A9 0A			lda #$0A
  1981 193F 8D CF 2A			sta CALCOBSTACLEADDR.X
  1982 1942 20 F3 12			jsr CALCOBSTACLEADDR
  1983 1945 B4 17			ldy :STACKORIGIN-1,x
  1984 1947 B5 18			lda :STACKORIGIN,x
  1985 1949 99 B6 2A			sta adr.OBSTACLES,y
  1986 194C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  1987 194E 99 B7 2A			sta adr.OBSTACLES+1,y
  1988 1951 CA				dex
  1989
  1990 				; optimize FAIL (1, levels.inc), line = 11
  1991
  1992 1952 A9 06 95 18			mva #$06 :STACKORIGIN,x
  1993 1956 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1994 195A A9 12			lda #$12
  1995 195C 8D D0 2A			sta CALCOBSTACLEADDR.Y
  1996 195F A9 1E			lda #$1E
  1997 1961 8D CF 2A			sta CALCOBSTACLEADDR.X
  1998 1964 20 F3 12			jsr CALCOBSTACLEADDR
  1999 1967 B4 17			ldy :STACKORIGIN-1,x
  2000 1969 B5 18			lda :STACKORIGIN,x
  2001 196B 99 B6 2A			sta adr.OBSTACLES,y
  2002 196E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2003 1970 99 B7 2A			sta adr.OBSTACLES+1,y
  2004 1973 CA				dex
  2005
  2006 				; optimize FAIL (1, levels.inc), line = 12
  2007
  2008 1974 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2009 1978 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2010 197C A9 02			lda #$02
  2011 197E 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2012 1981 A9 14			lda #$14
  2013 1983 8D CF 2A			sta CALCOBSTACLEADDR.X
  2014 1986 20 F3 12			jsr CALCOBSTACLEADDR
  2015 1989 B4 17			ldy :STACKORIGIN-1,x
  2016 198B B5 18			lda :STACKORIGIN,x
  2017 198D 99 B6 2A			sta adr.OBSTACLES,y
  2018 1990 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2019 1992 99 B7 2A			sta adr.OBSTACLES+1,y
  2020 1995 CA				dex
  2021
  2022 				; optimize FAIL (1, levels.inc), line = 13
  2023
  2024 1996 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2025 199A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2026 199E A9 16			lda #$16
  2027 19A0 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2028 19A3 A9 14			lda #$14
  2029 19A5 8D CF 2A			sta CALCOBSTACLEADDR.X
  2030 19A8 20 F3 12			jsr CALCOBSTACLEADDR
  2031 19AB B4 17			ldy :STACKORIGIN-1,x
  2032 19AD B5 18			lda :STACKORIGIN,x
  2033 19AF 99 B6 2A			sta adr.OBSTACLES,y
  2034 19B2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2035 19B4 99 B7 2A			sta adr.OBSTACLES+1,y
  2036 19B7 CA				dex
  2037 19B8 CA				dex
  2038 19B9			@exit
  2039 					.ifdef @new
  2040 					lda <@VarData
  2041 					sta :ztmp
  2042 					lda >@VarData
  2043 					ldy #@VarDataSize-1
  2044 					jmp @FreeMem
  2045 					els
  2046 19B9 60				rts						; ret
  2047 					eif
  2048 				.endl
  2049
  2050 19BA			.local	SETLEVEL01					; PROCEDURE
  2051
  2052 				; optimize OK (levels.inc), line = 20
  2053
  2054 19BA A9 01			lda #$01
  2055 19BC 8D DB 2A			sta SETPLAYER.ISALIVE
  2056 19BF A9 62			lda #$62
  2057 19C1 8D DA 2A			sta SETPLAYER.COLOUR
  2058 19C4 A9 51			lda #$51
  2059 19C6 8D D9 2A			sta SETPLAYER.HEAD
  2060 19C9 A9 00			lda #$00
  2061 19CB 8D D8 2A			sta SETPLAYER.BRAIN
  2062 19CE A9 08			lda #$08
  2063 19D0 8D D7 2A			sta SETPLAYER.DIR
  2064 19D3 A9 0C			lda #$0C
  2065 19D5 8D D6 2A			sta SETPLAYER.Y
  2066 19D8 A9 0A			lda #$0A
  2067 19DA 8D D5 2A			sta SETPLAYER.X
  2068 19DD AD 77 2A			lda PLAYER1
  2069 19E0 8D D3 2A			sta SETPLAYER.P
  2070 19E3 AD 78 2A			lda PLAYER1+1
  2071 19E6 8D D4 2A			sta SETPLAYER.P+1
  2072 19E9 20 23 14			jsr SETPLAYER
  2073
  2074 				; optimize OK (levels.inc), line = 21
  2075
  2076 19EC A9 01			lda #$01
  2077 19EE 8D DB 2A			sta SETPLAYER.ISALIVE
  2078 19F1 A9 5D			lda #$5D
  2079 19F3 8D DA 2A			sta SETPLAYER.COLOUR
  2080 19F6 A9 51			lda #$51
  2081 19F8 8D D9 2A			sta SETPLAYER.HEAD
  2082 19FB A9 01			lda #$01
  2083 19FD 8D D8 2A			sta SETPLAYER.BRAIN
  2084 1A00 A9 04			lda #$04
  2085 1A02 8D D7 2A			sta SETPLAYER.DIR
  2086 1A05 A9 0C			lda #$0C
  2087 1A07 8D D6 2A			sta SETPLAYER.Y
  2088 1A0A A9 1E			lda #$1E
  2089 1A0C 8D D5 2A			sta SETPLAYER.X
  2090 1A0F AD 79 2A			lda PLAYER2
  2091 1A12 8D D3 2A			sta SETPLAYER.P
  2092 1A15 AD 7A 2A			lda PLAYER2+1
  2093 1A18 8D D4 2A			sta SETPLAYER.P+1
  2094 1A1B 20 23 14			jsr SETPLAYER
  2095
  2096 				; optimize FAIL (1, levels.inc), line = 23
  2097
  2098 1A1E E8				inx
  2099 1A1F A9 00 95 18			mva #$00 :STACKORIGIN,x
  2100 1A23 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2101 1A25 A9 06			lda #$06
  2102 1A27 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2103 1A2A A9 0A			lda #$0A
  2104 1A2C 8D CF 2A			sta CALCOBSTACLEADDR.X
  2105 1A2F 20 F3 12			jsr CALCOBSTACLEADDR
  2106 1A32 B4 17			ldy :STACKORIGIN-1,x
  2107 1A34 B5 18			lda :STACKORIGIN,x
  2108 1A36 99 B6 2A			sta adr.OBSTACLES,y
  2109 1A39 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2110 1A3B 99 B7 2A			sta adr.OBSTACLES+1,y
  2111 1A3E CA				dex
  2112
  2113 				; optimize FAIL (1, levels.inc), line = 24
  2114
  2115 1A3F A9 02 95 18			mva #$02 :STACKORIGIN,x
  2116 1A43 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2117 1A47 A9 06			lda #$06
  2118 1A49 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2119 1A4C A9 1E			lda #$1E
  2120 1A4E 8D CF 2A			sta CALCOBSTACLEADDR.X
  2121 1A51 20 F3 12			jsr CALCOBSTACLEADDR
  2122 1A54 B4 17			ldy :STACKORIGIN-1,x
  2123 1A56 B5 18			lda :STACKORIGIN,x
  2124 1A58 99 B6 2A			sta adr.OBSTACLES,y
  2125 1A5B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2126 1A5D 99 B7 2A			sta adr.OBSTACLES+1,y
  2127 1A60 CA				dex
  2128
  2129 				; optimize FAIL (1, levels.inc), line = 25
  2130
  2131 1A61 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2132 1A65 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2133 1A69 A9 12			lda #$12
  2134 1A6B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2135 1A6E A9 0A			lda #$0A
  2136 1A70 8D CF 2A			sta CALCOBSTACLEADDR.X
  2137 1A73 20 F3 12			jsr CALCOBSTACLEADDR
  2138 1A76 B4 17			ldy :STACKORIGIN-1,x
  2139 1A78 B5 18			lda :STACKORIGIN,x
  2140 1A7A 99 B6 2A			sta adr.OBSTACLES,y
  2141 1A7D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2142 1A7F 99 B7 2A			sta adr.OBSTACLES+1,y
  2143 1A82 CA				dex
  2144
  2145 				; optimize FAIL (1, levels.inc), line = 26
  2146
  2147 1A83 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2148 1A87 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2149 1A8B A9 12			lda #$12
  2150 1A8D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2151 1A90 A9 1E			lda #$1E
  2152 1A92 8D CF 2A			sta CALCOBSTACLEADDR.X
  2153 1A95 20 F3 12			jsr CALCOBSTACLEADDR
  2154 1A98 B4 17			ldy :STACKORIGIN-1,x
  2155 1A9A B5 18			lda :STACKORIGIN,x
  2156 1A9C 99 B6 2A			sta adr.OBSTACLES,y
  2157 1A9F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2158 1AA1 99 B7 2A			sta adr.OBSTACLES+1,y
  2159 1AA4 CA				dex
  2160
  2161 				; optimize FAIL (1, levels.inc), line = 27
  2162
  2163 1AA5 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2164 1AA9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2165 1AAD A9 02			lda #$02
  2166 1AAF 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2167 1AB2 A9 14			lda #$14
  2168 1AB4 8D CF 2A			sta CALCOBSTACLEADDR.X
  2169 1AB7 20 F3 12			jsr CALCOBSTACLEADDR
  2170 1ABA B4 17			ldy :STACKORIGIN-1,x
  2171 1ABC B5 18			lda :STACKORIGIN,x
  2172 1ABE 99 B6 2A			sta adr.OBSTACLES,y
  2173 1AC1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2174 1AC3 99 B7 2A			sta adr.OBSTACLES+1,y
  2175 1AC6 CA				dex
  2176
  2177 				; optimize FAIL (1, levels.inc), line = 28
  2178
  2179 1AC7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2180 1ACB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2181 1ACF A9 16			lda #$16
  2182 1AD1 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2183 1AD4 A9 14			lda #$14
  2184 1AD6 8D CF 2A			sta CALCOBSTACLEADDR.X
  2185 1AD9 20 F3 12			jsr CALCOBSTACLEADDR
  2186 1ADC B4 17			ldy :STACKORIGIN-1,x
  2187 1ADE B5 18			lda :STACKORIGIN,x
  2188 1AE0 99 B6 2A			sta adr.OBSTACLES,y
  2189 1AE3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2190 1AE5 99 B7 2A			sta adr.OBSTACLES+1,y
  2191 1AE8 CA				dex
  2192 1AE9 CA				dex
  2193 1AEA			@exit
  2194 					.ifdef @new
  2195 					lda <@VarData
  2196 					sta :ztmp
  2197 					lda >@VarData
  2198 					ldy #@VarDataSize-1
  2199 					jmp @FreeMem
  2200 					els
  2201 1AEA 60				rts						; ret
  2202 					eif
  2203 				.endl
  2204
  2205 1AEB			.local	SETLEVEL02					; PROCEDURE
  2206
  2207 				; optimize OK (levels.inc), line = 35
  2208
  2209 1AEB A9 01			lda #$01
  2210 1AED 8D DB 2A			sta SETPLAYER.ISALIVE
  2211 1AF0 A9 62			lda #$62
  2212 1AF2 8D DA 2A			sta SETPLAYER.COLOUR
  2213 1AF5 A9 51			lda #$51
  2214 1AF7 8D D9 2A			sta SETPLAYER.HEAD
  2215 1AFA A9 00			lda #$00
  2216 1AFC 8D D8 2A			sta SETPLAYER.BRAIN
  2217 1AFF A9 08			lda #$08
  2218 1B01 8D D7 2A			sta SETPLAYER.DIR
  2219 1B04 A9 0C			lda #$0C
  2220 1B06 8D D6 2A			sta SETPLAYER.Y
  2221 1B09 A9 0A			lda #$0A
  2222 1B0B 8D D5 2A			sta SETPLAYER.X
  2223 1B0E AD 77 2A			lda PLAYER1
  2224 1B11 8D D3 2A			sta SETPLAYER.P
  2225 1B14 AD 78 2A			lda PLAYER1+1
  2226 1B17 8D D4 2A			sta SETPLAYER.P+1
  2227 1B1A 20 23 14			jsr SETPLAYER
  2228
  2229 				; optimize OK (levels.inc), line = 36
  2230
  2231 1B1D A9 01			lda #$01
  2232 1B1F 8D DB 2A			sta SETPLAYER.ISALIVE
  2233 1B22 A9 5D			lda #$5D
  2234 1B24 8D DA 2A			sta SETPLAYER.COLOUR
  2235 1B27 A9 51			lda #$51
  2236 1B29 8D D9 2A			sta SETPLAYER.HEAD
  2237 1B2C A9 03			lda #$03
  2238 1B2E 8D D8 2A			sta SETPLAYER.BRAIN
  2239 1B31 A9 04			lda #$04
  2240 1B33 8D D7 2A			sta SETPLAYER.DIR
  2241 1B36 A9 0C			lda #$0C
  2242 1B38 8D D6 2A			sta SETPLAYER.Y
  2243 1B3B A9 1E			lda #$1E
  2244 1B3D 8D D5 2A			sta SETPLAYER.X
  2245 1B40 AD 79 2A			lda PLAYER2
  2246 1B43 8D D3 2A			sta SETPLAYER.P
  2247 1B46 AD 7A 2A			lda PLAYER2+1
  2248 1B49 8D D4 2A			sta SETPLAYER.P+1
  2249 1B4C 20 23 14			jsr SETPLAYER
  2250
  2251 				; optimize FAIL (1, levels.inc), line = 38
  2252
  2253 1B4F E8				inx
  2254 1B50 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2255 1B54 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2256 1B56 A9 06			lda #$06
  2257 1B58 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2258 1B5B A9 0A			lda #$0A
  2259 1B5D 8D CF 2A			sta CALCOBSTACLEADDR.X
  2260 1B60 20 F3 12			jsr CALCOBSTACLEADDR
  2261 1B63 B4 17			ldy :STACKORIGIN-1,x
  2262 1B65 B5 18			lda :STACKORIGIN,x
  2263 1B67 99 B6 2A			sta adr.OBSTACLES,y
  2264 1B6A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2265 1B6C 99 B7 2A			sta adr.OBSTACLES+1,y
  2266 1B6F CA				dex
  2267
  2268 				; optimize FAIL (1, levels.inc), line = 39
  2269
  2270 1B70 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2271 1B74 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2272 1B78 A9 06			lda #$06
  2273 1B7A 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2274 1B7D A9 1E			lda #$1E
  2275 1B7F 8D CF 2A			sta CALCOBSTACLEADDR.X
  2276 1B82 20 F3 12			jsr CALCOBSTACLEADDR
  2277 1B85 B4 17			ldy :STACKORIGIN-1,x
  2278 1B87 B5 18			lda :STACKORIGIN,x
  2279 1B89 99 B6 2A			sta adr.OBSTACLES,y
  2280 1B8C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2281 1B8E 99 B7 2A			sta adr.OBSTACLES+1,y
  2282 1B91 CA				dex
  2283
  2284 				; optimize FAIL (1, levels.inc), line = 40
  2285
  2286 1B92 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2287 1B96 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2288 1B9A A9 12			lda #$12
  2289 1B9C 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2290 1B9F A9 0A			lda #$0A
  2291 1BA1 8D CF 2A			sta CALCOBSTACLEADDR.X
  2292 1BA4 20 F3 12			jsr CALCOBSTACLEADDR
  2293 1BA7 B4 17			ldy :STACKORIGIN-1,x
  2294 1BA9 B5 18			lda :STACKORIGIN,x
  2295 1BAB 99 B6 2A			sta adr.OBSTACLES,y
  2296 1BAE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2297 1BB0 99 B7 2A			sta adr.OBSTACLES+1,y
  2298 1BB3 CA				dex
  2299
  2300 				; optimize FAIL (1, levels.inc), line = 41
  2301
  2302 1BB4 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2303 1BB8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2304 1BBC A9 12			lda #$12
  2305 1BBE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2306 1BC1 A9 1E			lda #$1E
  2307 1BC3 8D CF 2A			sta CALCOBSTACLEADDR.X
  2308 1BC6 20 F3 12			jsr CALCOBSTACLEADDR
  2309 1BC9 B4 17			ldy :STACKORIGIN-1,x
  2310 1BCB B5 18			lda :STACKORIGIN,x
  2311 1BCD 99 B6 2A			sta adr.OBSTACLES,y
  2312 1BD0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2313 1BD2 99 B7 2A			sta adr.OBSTACLES+1,y
  2314 1BD5 CA				dex
  2315
  2316 				; optimize FAIL (1, levels.inc), line = 42
  2317
  2318 1BD6 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2319 1BDA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2320 1BDE A9 02			lda #$02
  2321 1BE0 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2322 1BE3 A9 14			lda #$14
  2323 1BE5 8D CF 2A			sta CALCOBSTACLEADDR.X
  2324 1BE8 20 F3 12			jsr CALCOBSTACLEADDR
  2325 1BEB B4 17			ldy :STACKORIGIN-1,x
  2326 1BED B5 18			lda :STACKORIGIN,x
  2327 1BEF 99 B6 2A			sta adr.OBSTACLES,y
  2328 1BF2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2329 1BF4 99 B7 2A			sta adr.OBSTACLES+1,y
  2330 1BF7 CA				dex
  2331
  2332 				; optimize FAIL (1, levels.inc), line = 43
  2333
  2334 1BF8 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2335 1BFC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2336 1C00 A9 16			lda #$16
  2337 1C02 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2338 1C05 A9 14			lda #$14
  2339 1C07 8D CF 2A			sta CALCOBSTACLEADDR.X
  2340 1C0A 20 F3 12			jsr CALCOBSTACLEADDR
  2341 1C0D B4 17			ldy :STACKORIGIN-1,x
  2342 1C0F B5 18			lda :STACKORIGIN,x
  2343 1C11 99 B6 2A			sta adr.OBSTACLES,y
  2344 1C14 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2345 1C16 99 B7 2A			sta adr.OBSTACLES+1,y
  2346 1C19 CA				dex
  2347 1C1A CA				dex
  2348 1C1B			@exit
  2349 					.ifdef @new
  2350 					lda <@VarData
  2351 					sta :ztmp
  2352 					lda >@VarData
  2353 					ldy #@VarDataSize-1
  2354 					jmp @FreeMem
  2355 					els
  2356 1C1B 60				rts						; ret
  2357 					eif
  2358 				.endl
  2359
  2360 1C1C			.local	SETLEVEL03					; PROCEDURE
  2361
  2362 				; optimize OK (levels.inc), line = 50
  2363
  2364 1C1C A9 01			lda #$01
  2365 1C1E 8D DB 2A			sta SETPLAYER.ISALIVE
  2366 1C21 A9 62			lda #$62
  2367 1C23 8D DA 2A			sta SETPLAYER.COLOUR
  2368 1C26 A9 51			lda #$51
  2369 1C28 8D D9 2A			sta SETPLAYER.HEAD
  2370 1C2B A9 00			lda #$00
  2371 1C2D 8D D8 2A			sta SETPLAYER.BRAIN
  2372 1C30 A9 08			lda #$08
  2373 1C32 8D D7 2A			sta SETPLAYER.DIR
  2374 1C35 A9 0C			lda #$0C
  2375 1C37 8D D6 2A			sta SETPLAYER.Y
  2376 1C3A A9 0A			lda #$0A
  2377 1C3C 8D D5 2A			sta SETPLAYER.X
  2378 1C3F AD 77 2A			lda PLAYER1
  2379 1C42 8D D3 2A			sta SETPLAYER.P
  2380 1C45 AD 78 2A			lda PLAYER1+1
  2381 1C48 8D D4 2A			sta SETPLAYER.P+1
  2382 1C4B 20 23 14			jsr SETPLAYER
  2383
  2384 				; optimize OK (levels.inc), line = 51
  2385
  2386 1C4E A9 01			lda #$01
  2387 1C50 8D DB 2A			sta SETPLAYER.ISALIVE
  2388 1C53 A9 5D			lda #$5D
  2389 1C55 8D DA 2A			sta SETPLAYER.COLOUR
  2390 1C58 A9 51			lda #$51
  2391 1C5A 8D D9 2A			sta SETPLAYER.HEAD
  2392 1C5D A9 02			lda #$02
  2393 1C5F 8D D8 2A			sta SETPLAYER.BRAIN
  2394 1C62 A9 04			lda #$04
  2395 1C64 8D D7 2A			sta SETPLAYER.DIR
  2396 1C67 A9 0C			lda #$0C
  2397 1C69 8D D6 2A			sta SETPLAYER.Y
  2398 1C6C A9 1E			lda #$1E
  2399 1C6E 8D D5 2A			sta SETPLAYER.X
  2400 1C71 AD 79 2A			lda PLAYER2
  2401 1C74 8D D3 2A			sta SETPLAYER.P
  2402 1C77 AD 7A 2A			lda PLAYER2+1
  2403 1C7A 8D D4 2A			sta SETPLAYER.P+1
  2404 1C7D 20 23 14			jsr SETPLAYER
  2405
  2406 				; optimize FAIL (1, levels.inc), line = 53
  2407
  2408 1C80 E8				inx
  2409 1C81 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2410 1C85 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2411 1C87 A9 06			lda #$06
  2412 1C89 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2413 1C8C A9 0A			lda #$0A
  2414 1C8E 8D CF 2A			sta CALCOBSTACLEADDR.X
  2415 1C91 20 F3 12			jsr CALCOBSTACLEADDR
  2416 1C94 B4 17			ldy :STACKORIGIN-1,x
  2417 1C96 B5 18			lda :STACKORIGIN,x
  2418 1C98 99 B6 2A			sta adr.OBSTACLES,y
  2419 1C9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2420 1C9D 99 B7 2A			sta adr.OBSTACLES+1,y
  2421 1CA0 CA				dex
  2422
  2423 				; optimize FAIL (1, levels.inc), line = 54
  2424
  2425 1CA1 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2426 1CA5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2427 1CA9 A9 06			lda #$06
  2428 1CAB 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2429 1CAE A9 1E			lda #$1E
  2430 1CB0 8D CF 2A			sta CALCOBSTACLEADDR.X
  2431 1CB3 20 F3 12			jsr CALCOBSTACLEADDR
  2432 1CB6 B4 17			ldy :STACKORIGIN-1,x
  2433 1CB8 B5 18			lda :STACKORIGIN,x
  2434 1CBA 99 B6 2A			sta adr.OBSTACLES,y
  2435 1CBD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2436 1CBF 99 B7 2A			sta adr.OBSTACLES+1,y
  2437 1CC2 CA				dex
  2438
  2439 				; optimize FAIL (1, levels.inc), line = 55
  2440
  2441 1CC3 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2442 1CC7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2443 1CCB A9 12			lda #$12
  2444 1CCD 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2445 1CD0 A9 0A			lda #$0A
  2446 1CD2 8D CF 2A			sta CALCOBSTACLEADDR.X
  2447 1CD5 20 F3 12			jsr CALCOBSTACLEADDR
  2448 1CD8 B4 17			ldy :STACKORIGIN-1,x
  2449 1CDA B5 18			lda :STACKORIGIN,x
  2450 1CDC 99 B6 2A			sta adr.OBSTACLES,y
  2451 1CDF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2452 1CE1 99 B7 2A			sta adr.OBSTACLES+1,y
  2453 1CE4 CA				dex
  2454
  2455 				; optimize FAIL (1, levels.inc), line = 56
  2456
  2457 1CE5 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2458 1CE9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2459 1CED A9 12			lda #$12
  2460 1CEF 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2461 1CF2 A9 1E			lda #$1E
  2462 1CF4 8D CF 2A			sta CALCOBSTACLEADDR.X
  2463 1CF7 20 F3 12			jsr CALCOBSTACLEADDR
  2464 1CFA B4 17			ldy :STACKORIGIN-1,x
  2465 1CFC B5 18			lda :STACKORIGIN,x
  2466 1CFE 99 B6 2A			sta adr.OBSTACLES,y
  2467 1D01 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2468 1D03 99 B7 2A			sta adr.OBSTACLES+1,y
  2469 1D06 CA				dex
  2470
  2471 				; optimize FAIL (1, levels.inc), line = 57
  2472
  2473 1D07 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2474 1D0B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2475 1D0F A9 0C			lda #$0C
  2476 1D11 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2477 1D14 A9 01			lda #$01
  2478 1D16 8D CF 2A			sta CALCOBSTACLEADDR.X
  2479 1D19 20 F3 12			jsr CALCOBSTACLEADDR
  2480 1D1C B4 17			ldy :STACKORIGIN-1,x
  2481 1D1E B5 18			lda :STACKORIGIN,x
  2482 1D20 99 B6 2A			sta adr.OBSTACLES,y
  2483 1D23 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2484 1D25 99 B7 2A			sta adr.OBSTACLES+1,y
  2485 1D28 CA				dex
  2486
  2487 				; optimize FAIL (1, levels.inc), line = 58
  2488
  2489 1D29 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2490 1D2D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2491 1D31 A9 02			lda #$02
  2492 1D33 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2493 1D36 A9 14			lda #$14
  2494 1D38 8D CF 2A			sta CALCOBSTACLEADDR.X
  2495 1D3B 20 F3 12			jsr CALCOBSTACLEADDR
  2496 1D3E B4 17			ldy :STACKORIGIN-1,x
  2497 1D40 B5 18			lda :STACKORIGIN,x
  2498 1D42 99 B6 2A			sta adr.OBSTACLES,y
  2499 1D45 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2500 1D47 99 B7 2A			sta adr.OBSTACLES+1,y
  2501 1D4A CA				dex
  2502
  2503 				; optimize FAIL (1, levels.inc), line = 59
  2504
  2505 1D4B A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2506 1D4F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2507 1D53 A9 16			lda #$16
  2508 1D55 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2509 1D58 A9 14			lda #$14
  2510 1D5A 8D CF 2A			sta CALCOBSTACLEADDR.X
  2511 1D5D 20 F3 12			jsr CALCOBSTACLEADDR
  2512 1D60 B4 17			ldy :STACKORIGIN-1,x
  2513 1D62 B5 18			lda :STACKORIGIN,x
  2514 1D64 99 B6 2A			sta adr.OBSTACLES,y
  2515 1D67 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2516 1D69 99 B7 2A			sta adr.OBSTACLES+1,y
  2517 1D6C CA				dex
  2518 1D6D CA				dex
  2519 1D6E			@exit
  2520 					.ifdef @new
  2521 					lda <@VarData
  2522 					sta :ztmp
  2523 					lda >@VarData
  2524 					ldy #@VarDataSize-1
  2525 					jmp @FreeMem
  2526 					els
  2527 1D6E 60				rts						; ret
  2528 					eif
  2529 				.endl
  2530
  2531 1D6F			.local	SETLEVEL04					; PROCEDURE
  2532
  2533 				; optimize OK (levels.inc), line = 66
  2534
  2535 1D6F A9 01			lda #$01
  2536 1D71 8D DB 2A			sta SETPLAYER.ISALIVE
  2537 1D74 A9 62			lda #$62
  2538 1D76 8D DA 2A			sta SETPLAYER.COLOUR
  2539 1D79 A9 51			lda #$51
  2540 1D7B 8D D9 2A			sta SETPLAYER.HEAD
  2541 1D7E A9 00			lda #$00
  2542 1D80 8D D8 2A			sta SETPLAYER.BRAIN
  2543 1D83 A9 04			lda #$04
  2544 1D85 8D D7 2A			sta SETPLAYER.DIR
  2545 1D88 A9 0C			lda #$0C
  2546 1D8A 8D D6 2A			sta SETPLAYER.Y
  2547 1D8D A9 12			lda #$12
  2548 1D8F 8D D5 2A			sta SETPLAYER.X
  2549 1D92 AD 77 2A			lda PLAYER1
  2550 1D95 8D D3 2A			sta SETPLAYER.P
  2551 1D98 AD 78 2A			lda PLAYER1+1
  2552 1D9B 8D D4 2A			sta SETPLAYER.P+1
  2553 1D9E 20 23 14			jsr SETPLAYER
  2554
  2555 				; optimize OK (levels.inc), line = 67
  2556
  2557 1DA1 A9 01			lda #$01
  2558 1DA3 8D DB 2A			sta SETPLAYER.ISALIVE
  2559 1DA6 A9 5D			lda #$5D
  2560 1DA8 8D DA 2A			sta SETPLAYER.COLOUR
  2561 1DAB A9 51			lda #$51
  2562 1DAD 8D D9 2A			sta SETPLAYER.HEAD
  2563 1DB0 A9 04			lda #$04
  2564 1DB2 8D D8 2A			sta SETPLAYER.BRAIN
  2565 1DB5 A9 08			lda #$08
  2566 1DB7 8D D7 2A			sta SETPLAYER.DIR
  2567 1DBA A9 0C			lda #$0C
  2568 1DBC 8D D6 2A			sta SETPLAYER.Y
  2569 1DBF A9 16			lda #$16
  2570 1DC1 8D D5 2A			sta SETPLAYER.X
  2571 1DC4 AD 79 2A			lda PLAYER2
  2572 1DC7 8D D3 2A			sta SETPLAYER.P
  2573 1DCA AD 7A 2A			lda PLAYER2+1
  2574 1DCD 8D D4 2A			sta SETPLAYER.P+1
  2575 1DD0 20 23 14			jsr SETPLAYER
  2576
  2577 				; optimize FAIL (1, levels.inc), line = 69
  2578
  2579 1DD3 E8				inx
  2580 1DD4 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2581 1DD8 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2582 1DDA A9 06			lda #$06
  2583 1DDC 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2584 1DDF A9 0A			lda #$0A
  2585 1DE1 8D CF 2A			sta CALCOBSTACLEADDR.X
  2586 1DE4 20 F3 12			jsr CALCOBSTACLEADDR
  2587 1DE7 B4 17			ldy :STACKORIGIN-1,x
  2588 1DE9 B5 18			lda :STACKORIGIN,x
  2589 1DEB 99 B6 2A			sta adr.OBSTACLES,y
  2590 1DEE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2591 1DF0 99 B7 2A			sta adr.OBSTACLES+1,y
  2592 1DF3 CA				dex
  2593
  2594 				; optimize FAIL (1, levels.inc), line = 70
  2595
  2596 1DF4 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2597 1DF8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2598 1DFC A9 06			lda #$06
  2599 1DFE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2600 1E01 A9 1E			lda #$1E
  2601 1E03 8D CF 2A			sta CALCOBSTACLEADDR.X
  2602 1E06 20 F3 12			jsr CALCOBSTACLEADDR
  2603 1E09 B4 17			ldy :STACKORIGIN-1,x
  2604 1E0B B5 18			lda :STACKORIGIN,x
  2605 1E0D 99 B6 2A			sta adr.OBSTACLES,y
  2606 1E10 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2607 1E12 99 B7 2A			sta adr.OBSTACLES+1,y
  2608 1E15 CA				dex
  2609
  2610 				; optimize FAIL (1, levels.inc), line = 71
  2611
  2612 1E16 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2613 1E1A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2614 1E1E A9 12			lda #$12
  2615 1E20 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2616 1E23 A9 0A			lda #$0A
  2617 1E25 8D CF 2A			sta CALCOBSTACLEADDR.X
  2618 1E28 20 F3 12			jsr CALCOBSTACLEADDR
  2619 1E2B B4 17			ldy :STACKORIGIN-1,x
  2620 1E2D B5 18			lda :STACKORIGIN,x
  2621 1E2F 99 B6 2A			sta adr.OBSTACLES,y
  2622 1E32 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2623 1E34 99 B7 2A			sta adr.OBSTACLES+1,y
  2624 1E37 CA				dex
  2625
  2626 				; optimize FAIL (1, levels.inc), line = 72
  2627
  2628 1E38 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2629 1E3C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2630 1E40 A9 12			lda #$12
  2631 1E42 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2632 1E45 A9 1E			lda #$1E
  2633 1E47 8D CF 2A			sta CALCOBSTACLEADDR.X
  2634 1E4A 20 F3 12			jsr CALCOBSTACLEADDR
  2635 1E4D B4 17			ldy :STACKORIGIN-1,x
  2636 1E4F B5 18			lda :STACKORIGIN,x
  2637 1E51 99 B6 2A			sta adr.OBSTACLES,y
  2638 1E54 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2639 1E56 99 B7 2A			sta adr.OBSTACLES+1,y
  2640 1E59 CA				dex
  2641
  2642 				; optimize FAIL (1, levels.inc), line = 73
  2643
  2644 1E5A A9 08 95 18			mva #$08 :STACKORIGIN,x
  2645 1E5E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2646 1E62 A9 0C			lda #$0C
  2647 1E64 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2648 1E67 A9 01			lda #$01
  2649 1E69 8D CF 2A			sta CALCOBSTACLEADDR.X
  2650 1E6C 20 F3 12			jsr CALCOBSTACLEADDR
  2651 1E6F B4 17			ldy :STACKORIGIN-1,x
  2652 1E71 B5 18			lda :STACKORIGIN,x
  2653 1E73 99 B6 2A			sta adr.OBSTACLES,y
  2654 1E76 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2655 1E78 99 B7 2A			sta adr.OBSTACLES+1,y
  2656 1E7B CA				dex
  2657
  2658 				; optimize FAIL (1, levels.inc), line = 74
  2659
  2660 1E7C A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2661 1E80 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2662 1E84 A9 02			lda #$02
  2663 1E86 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2664 1E89 A9 14			lda #$14
  2665 1E8B 8D CF 2A			sta CALCOBSTACLEADDR.X
  2666 1E8E 20 F3 12			jsr CALCOBSTACLEADDR
  2667 1E91 B4 17			ldy :STACKORIGIN-1,x
  2668 1E93 B5 18			lda :STACKORIGIN,x
  2669 1E95 99 B6 2A			sta adr.OBSTACLES,y
  2670 1E98 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2671 1E9A 99 B7 2A			sta adr.OBSTACLES+1,y
  2672 1E9D CA				dex
  2673
  2674 				; optimize FAIL (1, levels.inc), line = 75
  2675
  2676 1E9E A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2677 1EA2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2678 1EA6 A9 16			lda #$16
  2679 1EA8 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2680 1EAB A9 14			lda #$14
  2681 1EAD 8D CF 2A			sta CALCOBSTACLEADDR.X
  2682 1EB0 20 F3 12			jsr CALCOBSTACLEADDR
  2683 1EB3 B4 17			ldy :STACKORIGIN-1,x
  2684 1EB5 B5 18			lda :STACKORIGIN,x
  2685 1EB7 99 B6 2A			sta adr.OBSTACLES,y
  2686 1EBA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2687 1EBC 99 B7 2A			sta adr.OBSTACLES+1,y
  2688 1EBF CA				dex
  2689
  2690 				; optimize FAIL (1, levels.inc), line = 76
  2691
  2692 1EC0 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2693 1EC4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2694 1EC8 A9 0C			lda #$0C
  2695 1ECA 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2696 1ECD A9 14			lda #$14
  2697 1ECF 8D CF 2A			sta CALCOBSTACLEADDR.X
  2698 1ED2 20 F3 12			jsr CALCOBSTACLEADDR
  2699 1ED5 B4 17			ldy :STACKORIGIN-1,x
  2700 1ED7 B5 18			lda :STACKORIGIN,x
  2701 1ED9 99 B6 2A			sta adr.OBSTACLES,y
  2702 1EDC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2703 1EDE 99 B7 2A			sta adr.OBSTACLES+1,y
  2704 1EE1 CA				dex
  2705 1EE2 CA				dex
  2706 1EE3			@exit
  2707 					.ifdef @new
  2708 					lda <@VarData
  2709 					sta :ztmp
  2710 					lda >@VarData
  2711 					ldy #@VarDataSize-1
  2712 					jmp @FreeMem
  2713 					els
  2714 1EE3 60				rts						; ret
  2715 					eif
  2716 				.endl
  2717
  2718 1EE4			.local	SETLEVEL05					; PROCEDURE
  2719
  2720 				; optimize OK (levels.inc), line = 83
  2721
  2722 1EE4 A9 01			lda #$01
  2723 1EE6 8D DB 2A			sta SETPLAYER.ISALIVE
  2724 1EE9 A9 62			lda #$62
  2725 1EEB 8D DA 2A			sta SETPLAYER.COLOUR
  2726 1EEE A9 51			lda #$51
  2727 1EF0 8D D9 2A			sta SETPLAYER.HEAD
  2728 1EF3 A9 00			lda #$00
  2729 1EF5 8D D8 2A			sta SETPLAYER.BRAIN
  2730 1EF8 A9 08			lda #$08
  2731 1EFA 8D D7 2A			sta SETPLAYER.DIR
  2732 1EFD A9 0C			lda #$0C
  2733 1EFF 8D D6 2A			sta SETPLAYER.Y
  2734 1F02 A9 0A			lda #$0A
  2735 1F04 8D D5 2A			sta SETPLAYER.X
  2736 1F07 AD 77 2A			lda PLAYER1
  2737 1F0A 8D D3 2A			sta SETPLAYER.P
  2738 1F0D AD 78 2A			lda PLAYER1+1
  2739 1F10 8D D4 2A			sta SETPLAYER.P+1
  2740 1F13 20 23 14			jsr SETPLAYER
  2741
  2742 				; optimize OK (levels.inc), line = 84
  2743
  2744 1F16 A9 01			lda #$01
  2745 1F18 8D DB 2A			sta SETPLAYER.ISALIVE
  2746 1F1B A9 5D			lda #$5D
  2747 1F1D 8D DA 2A			sta SETPLAYER.COLOUR
  2748 1F20 A9 51			lda #$51
  2749 1F22 8D D9 2A			sta SETPLAYER.HEAD
  2750 1F25 A9 04			lda #$04
  2751 1F27 8D D8 2A			sta SETPLAYER.BRAIN
  2752 1F2A 8D D7 2A			sta SETPLAYER.DIR
  2753 1F2D A9 0C			lda #$0C
  2754 1F2F 8D D6 2A			sta SETPLAYER.Y
  2755 1F32 A9 1E			lda #$1E
  2756 1F34 8D D5 2A			sta SETPLAYER.X
  2757 1F37 AD 79 2A			lda PLAYER2
  2758 1F3A 8D D3 2A			sta SETPLAYER.P
  2759 1F3D AD 7A 2A			lda PLAYER2+1
  2760 1F40 8D D4 2A			sta SETPLAYER.P+1
  2761 1F43 20 23 14			jsr SETPLAYER
  2762
  2763 				; optimize OK (levels.inc), line = 85
  2764
  2765 1F46 A9 01			lda #$01
  2766 1F48 8D DB 2A			sta SETPLAYER.ISALIVE
  2767 1F4B A9 71			lda #$71
  2768 1F4D 8D DA 2A			sta SETPLAYER.COLOUR
  2769 1F50 A9 51			lda #$51
  2770 1F52 8D D9 2A			sta SETPLAYER.HEAD
  2771 1F55 A9 03			lda #$03
  2772 1F57 8D D8 2A			sta SETPLAYER.BRAIN
  2773 1F5A A9 02			lda #$02
  2774 1F5C 8D D7 2A			sta SETPLAYER.DIR
  2775 1F5F A9 04			lda #$04
  2776 1F61 8D D6 2A			sta SETPLAYER.Y
  2777 1F64 A9 14			lda #$14
  2778 1F66 8D D5 2A			sta SETPLAYER.X
  2779 1F69 AD 7B 2A			lda PLAYER3
  2780 1F6C 8D D3 2A			sta SETPLAYER.P
  2781 1F6F AD 7C 2A			lda PLAYER3+1
  2782 1F72 8D D4 2A			sta SETPLAYER.P+1
  2783 1F75 20 23 14			jsr SETPLAYER
  2784
  2785 				; optimize OK (levels.inc), line = 86
  2786
  2787 1F78 A9 01			lda #$01
  2788 1F7A 8D DB 2A			sta SETPLAYER.ISALIVE
  2789 1F7D A9 55			lda #$55
  2790 1F7F 8D DA 2A			sta SETPLAYER.COLOUR
  2791 1F82 A9 51			lda #$51
  2792 1F84 8D D9 2A			sta SETPLAYER.HEAD
  2793 1F87 A9 02			lda #$02
  2794 1F89 8D D8 2A			sta SETPLAYER.BRAIN
  2795 1F8C A9 01			lda #$01
  2796 1F8E 8D D7 2A			sta SETPLAYER.DIR
  2797 1F91 A9 12			lda #$12
  2798 1F93 8D D6 2A			sta SETPLAYER.Y
  2799 1F96 A9 14			lda #$14
  2800 1F98 8D D5 2A			sta SETPLAYER.X
  2801 1F9B AD 7D 2A			lda PLAYER4
  2802 1F9E 8D D3 2A			sta SETPLAYER.P
  2803 1FA1 AD 7E 2A			lda PLAYER4+1
  2804 1FA4 8D D4 2A			sta SETPLAYER.P+1
  2805 1FA7 20 23 14			jsr SETPLAYER
  2806
  2807 				; optimize FAIL (1, levels.inc), line = 88
  2808
  2809 1FAA E8				inx
  2810 1FAB A9 00 95 18			mva #$00 :STACKORIGIN,x
  2811 1FAF 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2812 1FB1 A9 06			lda #$06
  2813 1FB3 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2814 1FB6 A9 0A			lda #$0A
  2815 1FB8 8D CF 2A			sta CALCOBSTACLEADDR.X
  2816 1FBB 20 F3 12			jsr CALCOBSTACLEADDR
  2817 1FBE B4 17			ldy :STACKORIGIN-1,x
  2818 1FC0 B5 18			lda :STACKORIGIN,x
  2819 1FC2 99 B6 2A			sta adr.OBSTACLES,y
  2820 1FC5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2821 1FC7 99 B7 2A			sta adr.OBSTACLES+1,y
  2822 1FCA CA				dex
  2823
  2824 				; optimize FAIL (1, levels.inc), line = 89
  2825
  2826 1FCB A9 02 95 18			mva #$02 :STACKORIGIN,x
  2827 1FCF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2828 1FD3 A9 06			lda #$06
  2829 1FD5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2830 1FD8 A9 1E			lda #$1E
  2831 1FDA 8D CF 2A			sta CALCOBSTACLEADDR.X
  2832 1FDD 20 F3 12			jsr CALCOBSTACLEADDR
  2833 1FE0 B4 17			ldy :STACKORIGIN-1,x
  2834 1FE2 B5 18			lda :STACKORIGIN,x
  2835 1FE4 99 B6 2A			sta adr.OBSTACLES,y
  2836 1FE7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2837 1FE9 99 B7 2A			sta adr.OBSTACLES+1,y
  2838 1FEC CA				dex
  2839
  2840 				; optimize FAIL (1, levels.inc), line = 90
  2841
  2842 1FED A9 04 95 18			mva #$04 :STACKORIGIN,x
  2843 1FF1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2844 1FF5 A9 12			lda #$12
  2845 1FF7 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2846 1FFA A9 0A			lda #$0A
  2847 1FFC 8D CF 2A			sta CALCOBSTACLEADDR.X
  2848 1FFF 20 F3 12			jsr CALCOBSTACLEADDR
  2849 2002 B4 17			ldy :STACKORIGIN-1,x
  2850 2004 B5 18			lda :STACKORIGIN,x
  2851 2006 99 B6 2A			sta adr.OBSTACLES,y
  2852 2009 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2853 200B 99 B7 2A			sta adr.OBSTACLES+1,y
  2854 200E CA				dex
  2855
  2856 				; optimize FAIL (1, levels.inc), line = 91
  2857
  2858 200F A9 06 95 18			mva #$06 :STACKORIGIN,x
  2859 2013 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2860 2017 A9 12			lda #$12
  2861 2019 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2862 201C A9 1E			lda #$1E
  2863 201E 8D CF 2A			sta CALCOBSTACLEADDR.X
  2864 2021 20 F3 12			jsr CALCOBSTACLEADDR
  2865 2024 B4 17			ldy :STACKORIGIN-1,x
  2866 2026 B5 18			lda :STACKORIGIN,x
  2867 2028 99 B6 2A			sta adr.OBSTACLES,y
  2868 202B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2869 202D 99 B7 2A			sta adr.OBSTACLES+1,y
  2870 2030 CA				dex
  2871
  2872 				; optimize FAIL (1, levels.inc), line = 92
  2873
  2874 2031 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2875 2035 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2876 2039 A9 0C			lda #$0C
  2877 203B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2878 203E A9 01			lda #$01
  2879 2040 8D CF 2A			sta CALCOBSTACLEADDR.X
  2880 2043 20 F3 12			jsr CALCOBSTACLEADDR
  2881 2046 B4 17			ldy :STACKORIGIN-1,x
  2882 2048 B5 18			lda :STACKORIGIN,x
  2883 204A 99 B6 2A			sta adr.OBSTACLES,y
  2884 204D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2885 204F 99 B7 2A			sta adr.OBSTACLES+1,y
  2886 2052 CA				dex
  2887
  2888 				; optimize FAIL (1, levels.inc), line = 93
  2889
  2890 2053 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2891 2057 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2892 205B A9 02			lda #$02
  2893 205D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2894 2060 A9 14			lda #$14
  2895 2062 8D CF 2A			sta CALCOBSTACLEADDR.X
  2896 2065 20 F3 12			jsr CALCOBSTACLEADDR
  2897 2068 B4 17			ldy :STACKORIGIN-1,x
  2898 206A B5 18			lda :STACKORIGIN,x
  2899 206C 99 B6 2A			sta adr.OBSTACLES,y
  2900 206F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2901 2071 99 B7 2A			sta adr.OBSTACLES+1,y
  2902 2074 CA				dex
  2903
  2904 				; optimize FAIL (1, levels.inc), line = 94
  2905
  2906 2075 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2907 2079 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2908 207D A9 16			lda #$16
  2909 207F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2910 2082 A9 14			lda #$14
  2911 2084 8D CF 2A			sta CALCOBSTACLEADDR.X
  2912 2087 20 F3 12			jsr CALCOBSTACLEADDR
  2913 208A B4 17			ldy :STACKORIGIN-1,x
  2914 208C B5 18			lda :STACKORIGIN,x
  2915 208E 99 B6 2A			sta adr.OBSTACLES,y
  2916 2091 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2917 2093 99 B7 2A			sta adr.OBSTACLES+1,y
  2918 2096 CA				dex
  2919 2097 CA				dex
  2920 2098			@exit
  2921 					.ifdef @new
  2922 					lda <@VarData
  2923 					sta :ztmp
  2924 					lda >@VarData
  2925 					ldy #@VarDataSize-1
  2926 					jmp @FreeMem
  2927 					els
  2928 2098 60				rts						; ret
  2929 					eif
  2930 				.endl
  2931
  2932 2099			.local	SETLEVEL06					; PROCEDURE
  2933
  2934 				; optimize OK (levels.inc), line = 101
  2935
  2936 2099 A9 01			lda #$01
  2937 209B 8D DB 2A			sta SETPLAYER.ISALIVE
  2938 209E A9 62			lda #$62
  2939 20A0 8D DA 2A			sta SETPLAYER.COLOUR
  2940 20A3 A9 51			lda #$51
  2941 20A5 8D D9 2A			sta SETPLAYER.HEAD
  2942 20A8 A9 00			lda #$00
  2943 20AA 8D D8 2A			sta SETPLAYER.BRAIN
  2944 20AD A9 04			lda #$04
  2945 20AF 8D D7 2A			sta SETPLAYER.DIR
  2946 20B2 A9 0C			lda #$0C
  2947 20B4 8D D6 2A			sta SETPLAYER.Y
  2948 20B7 A9 12			lda #$12
  2949 20B9 8D D5 2A			sta SETPLAYER.X
  2950 20BC AD 77 2A			lda PLAYER1
  2951 20BF 8D D3 2A			sta SETPLAYER.P
  2952 20C2 AD 78 2A			lda PLAYER1+1
  2953 20C5 8D D4 2A			sta SETPLAYER.P+1
  2954 20C8 20 23 14			jsr SETPLAYER
  2955
  2956 				; optimize OK (levels.inc), line = 102
  2957
  2958 20CB A9 01			lda #$01
  2959 20CD 8D DB 2A			sta SETPLAYER.ISALIVE
  2960 20D0 A9 5D			lda #$5D
  2961 20D2 8D DA 2A			sta SETPLAYER.COLOUR
  2962 20D5 A9 51			lda #$51
  2963 20D7 8D D9 2A			sta SETPLAYER.HEAD
  2964 20DA A9 02			lda #$02
  2965 20DC 8D D8 2A			sta SETPLAYER.BRAIN
  2966 20DF A9 08			lda #$08
  2967 20E1 8D D7 2A			sta SETPLAYER.DIR
  2968 20E4 A9 0C			lda #$0C
  2969 20E6 8D D6 2A			sta SETPLAYER.Y
  2970 20E9 A9 16			lda #$16
  2971 20EB 8D D5 2A			sta SETPLAYER.X
  2972 20EE AD 79 2A			lda PLAYER2
  2973 20F1 8D D3 2A			sta SETPLAYER.P
  2974 20F4 AD 7A 2A			lda PLAYER2+1
  2975 20F7 8D D4 2A			sta SETPLAYER.P+1
  2976 20FA 20 23 14			jsr SETPLAYER
  2977
  2978 				; optimize OK (levels.inc), line = 103
  2979
  2980 20FD A9 01			lda #$01
  2981 20FF 8D DB 2A			sta SETPLAYER.ISALIVE
  2982 2102 A9 71			lda #$71
  2983 2104 8D DA 2A			sta SETPLAYER.COLOUR
  2984 2107 A9 51			lda #$51
  2985 2109 8D D9 2A			sta SETPLAYER.HEAD
  2986 210C A9 02			lda #$02
  2987 210E 8D D8 2A			sta SETPLAYER.BRAIN
  2988 2111 8D D7 2A			sta SETPLAYER.DIR
  2989 2114 A9 06			lda #$06
  2990 2116 8D D6 2A			sta SETPLAYER.Y
  2991 2119 8D D5 2A			sta SETPLAYER.X
  2992 211C AD 7B 2A			lda PLAYER3
  2993 211F 8D D3 2A			sta SETPLAYER.P
  2994 2122 AD 7C 2A			lda PLAYER3+1
  2995 2125 8D D4 2A			sta SETPLAYER.P+1
  2996 2128 20 23 14			jsr SETPLAYER
  2997
  2998 				; optimize OK (levels.inc), line = 104
  2999
  3000 212B A9 01			lda #$01
  3001 212D 8D DB 2A			sta SETPLAYER.ISALIVE
  3002 2130 A9 55			lda #$55
  3003 2132 8D DA 2A			sta SETPLAYER.COLOUR
  3004 2135 A9 51			lda #$51
  3005 2137 8D D9 2A			sta SETPLAYER.HEAD
  3006 213A A9 03			lda #$03
  3007 213C 8D D8 2A			sta SETPLAYER.BRAIN
  3008 213F A9 08			lda #$08
  3009 2141 8D D7 2A			sta SETPLAYER.DIR
  3010 2144 A9 12			lda #$12
  3011 2146 8D D6 2A			sta SETPLAYER.Y
  3012 2149 A9 24			lda #$24
  3013 214B 8D D5 2A			sta SETPLAYER.X
  3014 214E AD 7D 2A			lda PLAYER4
  3015 2151 8D D3 2A			sta SETPLAYER.P
  3016 2154 AD 7E 2A			lda PLAYER4+1
  3017 2157 8D D4 2A			sta SETPLAYER.P+1
  3018 215A 20 23 14			jsr SETPLAYER
  3019
  3020 				; optimize FAIL (1, levels.inc), line = 106
  3021
  3022 215D E8				inx
  3023 215E A9 00 95 18			mva #$00 :STACKORIGIN,x
  3024 2162 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3025 2164 A9 06			lda #$06
  3026 2166 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3027 2169 A9 0A			lda #$0A
  3028 216B 8D CF 2A			sta CALCOBSTACLEADDR.X
  3029 216E 20 F3 12			jsr CALCOBSTACLEADDR
  3030 2171 B4 17			ldy :STACKORIGIN-1,x
  3031 2173 B5 18			lda :STACKORIGIN,x
  3032 2175 99 B6 2A			sta adr.OBSTACLES,y
  3033 2178 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3034 217A 99 B7 2A			sta adr.OBSTACLES+1,y
  3035 217D CA				dex
  3036
  3037 				; optimize FAIL (1, levels.inc), line = 107
  3038
  3039 217E A9 02 95 18			mva #$02 :STACKORIGIN,x
  3040 2182 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3041 2186 A9 06			lda #$06
  3042 2188 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3043 218B A9 1E			lda #$1E
  3044 218D 8D CF 2A			sta CALCOBSTACLEADDR.X
  3045 2190 20 F3 12			jsr CALCOBSTACLEADDR
  3046 2193 B4 17			ldy :STACKORIGIN-1,x
  3047 2195 B5 18			lda :STACKORIGIN,x
  3048 2197 99 B6 2A			sta adr.OBSTACLES,y
  3049 219A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3050 219C 99 B7 2A			sta adr.OBSTACLES+1,y
  3051 219F CA				dex
  3052
  3053 				; optimize FAIL (1, levels.inc), line = 108
  3054
  3055 21A0 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3056 21A4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3057 21A8 A9 12			lda #$12
  3058 21AA 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3059 21AD A9 0A			lda #$0A
  3060 21AF 8D CF 2A			sta CALCOBSTACLEADDR.X
  3061 21B2 20 F3 12			jsr CALCOBSTACLEADDR
  3062 21B5 B4 17			ldy :STACKORIGIN-1,x
  3063 21B7 B5 18			lda :STACKORIGIN,x
  3064 21B9 99 B6 2A			sta adr.OBSTACLES,y
  3065 21BC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3066 21BE 99 B7 2A			sta adr.OBSTACLES+1,y
  3067 21C1 CA				dex
  3068
  3069 				; optimize FAIL (1, levels.inc), line = 109
  3070
  3071 21C2 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3072 21C6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3073 21CA A9 12			lda #$12
  3074 21CC 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3075 21CF A9 1E			lda #$1E
  3076 21D1 8D CF 2A			sta CALCOBSTACLEADDR.X
  3077 21D4 20 F3 12			jsr CALCOBSTACLEADDR
  3078 21D7 B4 17			ldy :STACKORIGIN-1,x
  3079 21D9 B5 18			lda :STACKORIGIN,x
  3080 21DB 99 B6 2A			sta adr.OBSTACLES,y
  3081 21DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3082 21E0 99 B7 2A			sta adr.OBSTACLES+1,y
  3083 21E3 CA				dex
  3084
  3085 				; optimize FAIL (1, levels.inc), line = 110
  3086
  3087 21E4 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3088 21E8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3089 21EC A9 0C			lda #$0C
  3090 21EE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3091 21F1 A9 01			lda #$01
  3092 21F3 8D CF 2A			sta CALCOBSTACLEADDR.X
  3093 21F6 20 F3 12			jsr CALCOBSTACLEADDR
  3094 21F9 B4 17			ldy :STACKORIGIN-1,x
  3095 21FB B5 18			lda :STACKORIGIN,x
  3096 21FD 99 B6 2A			sta adr.OBSTACLES,y
  3097 2200 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3098 2202 99 B7 2A			sta adr.OBSTACLES+1,y
  3099 2205 CA				dex
  3100
  3101 				; optimize FAIL (1, levels.inc), line = 111
  3102
  3103 2206 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3104 220A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3105 220E A9 02			lda #$02
  3106 2210 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3107 2213 A9 14			lda #$14
  3108 2215 8D CF 2A			sta CALCOBSTACLEADDR.X
  3109 2218 20 F3 12			jsr CALCOBSTACLEADDR
  3110 221B B4 17			ldy :STACKORIGIN-1,x
  3111 221D B5 18			lda :STACKORIGIN,x
  3112 221F 99 B6 2A			sta adr.OBSTACLES,y
  3113 2222 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3114 2224 99 B7 2A			sta adr.OBSTACLES+1,y
  3115 2227 CA				dex
  3116
  3117 				; optimize FAIL (1, levels.inc), line = 112
  3118
  3119 2228 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3120 222C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3121 2230 A9 16			lda #$16
  3122 2232 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3123 2235 A9 14			lda #$14
  3124 2237 8D CF 2A			sta CALCOBSTACLEADDR.X
  3125 223A 20 F3 12			jsr CALCOBSTACLEADDR
  3126 223D B4 17			ldy :STACKORIGIN-1,x
  3127 223F B5 18			lda :STACKORIGIN,x
  3128 2241 99 B6 2A			sta adr.OBSTACLES,y
  3129 2244 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3130 2246 99 B7 2A			sta adr.OBSTACLES+1,y
  3131 2249 CA				dex
  3132
  3133 				; optimize FAIL (1, levels.inc), line = 113
  3134
  3135 224A A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3136 224E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3137 2252 A9 0C			lda #$0C
  3138 2254 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3139 2257 A9 14			lda #$14
  3140 2259 8D CF 2A			sta CALCOBSTACLEADDR.X
  3141 225C 20 F3 12			jsr CALCOBSTACLEADDR
  3142 225F B4 17			ldy :STACKORIGIN-1,x
  3143 2261 B5 18			lda :STACKORIGIN,x
  3144 2263 99 B6 2A			sta adr.OBSTACLES,y
  3145 2266 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3146 2268 99 B7 2A			sta adr.OBSTACLES+1,y
  3147 226B CA				dex
  3148 226C CA				dex
  3149 226D			@exit
  3150 					.ifdef @new
  3151 					lda <@VarData
  3152 					sta :ztmp
  3153 					lda >@VarData
  3154 					ldy #@VarDataSize-1
  3155 					jmp @FreeMem
  3156 					els
  3157 226D 60				rts						; ret
  3158 					eif
  3159 				.endl
  3160
  3161 226E			.local	SETLEVEL07					; PROCEDURE
  3162
  3163 				; optimize OK (levels.inc), line = 120
  3164
  3165 226E A9 01			lda #$01
  3166 2270 8D DB 2A			sta SETPLAYER.ISALIVE
  3167 2273 A9 62			lda #$62
  3168 2275 8D DA 2A			sta SETPLAYER.COLOUR
  3169 2278 A9 51			lda #$51
  3170 227A 8D D9 2A			sta SETPLAYER.HEAD
  3171 227D A9 00			lda #$00
  3172 227F 8D D8 2A			sta SETPLAYER.BRAIN
  3173 2282 A9 04			lda #$04
  3174 2284 8D D7 2A			sta SETPLAYER.DIR
  3175 2287 A9 0C			lda #$0C
  3176 2289 8D D6 2A			sta SETPLAYER.Y
  3177 228C A9 12			lda #$12
  3178 228E 8D D5 2A			sta SETPLAYER.X
  3179 2291 AD 77 2A			lda PLAYER1
  3180 2294 8D D3 2A			sta SETPLAYER.P
  3181 2297 AD 78 2A			lda PLAYER1+1
  3182 229A 8D D4 2A			sta SETPLAYER.P+1
  3183 229D 20 23 14			jsr SETPLAYER
  3184
  3185 				; optimize OK (levels.inc), line = 121
  3186
  3187 22A0 A9 01			lda #$01
  3188 22A2 8D DB 2A			sta SETPLAYER.ISALIVE
  3189 22A5 A9 5D			lda #$5D
  3190 22A7 8D DA 2A			sta SETPLAYER.COLOUR
  3191 22AA A9 51			lda #$51
  3192 22AC 8D D9 2A			sta SETPLAYER.HEAD
  3193 22AF A9 03			lda #$03
  3194 22B1 8D D8 2A			sta SETPLAYER.BRAIN
  3195 22B4 A9 08			lda #$08
  3196 22B6 8D D7 2A			sta SETPLAYER.DIR
  3197 22B9 A9 17			lda #$17
  3198 22BB 8D D6 2A			sta SETPLAYER.Y
  3199 22BE A9 01			lda #$01
  3200 22C0 8D D5 2A			sta SETPLAYER.X
  3201 22C3 AD 79 2A			lda PLAYER2
  3202 22C6 8D D3 2A			sta SETPLAYER.P
  3203 22C9 AD 7A 2A			lda PLAYER2+1
  3204 22CC 8D D4 2A			sta SETPLAYER.P+1
  3205 22CF 20 23 14			jsr SETPLAYER
  3206
  3207 				; optimize OK (levels.inc), line = 122
  3208
  3209 22D2 A9 01			lda #$01
  3210 22D4 8D DB 2A			sta SETPLAYER.ISALIVE
  3211 22D7 A9 71			lda #$71
  3212 22D9 8D DA 2A			sta SETPLAYER.COLOUR
  3213 22DC A9 51			lda #$51
  3214 22DE 8D D9 2A			sta SETPLAYER.HEAD
  3215 22E1 A9 03			lda #$03
  3216 22E3 8D D8 2A			sta SETPLAYER.BRAIN
  3217 22E6 A9 02			lda #$02
  3218 22E8 8D D7 2A			sta SETPLAYER.DIR
  3219 22EB A9 04			lda #$04
  3220 22ED 8D D6 2A			sta SETPLAYER.Y
  3221 22F0 A9 1E			lda #$1E
  3222 22F2 8D D5 2A			sta SETPLAYER.X
  3223 22F5 AD 7B 2A			lda PLAYER3
  3224 22F8 8D D3 2A			sta SETPLAYER.P
  3225 22FB AD 7C 2A			lda PLAYER3+1
  3226 22FE 8D D4 2A			sta SETPLAYER.P+1
  3227 2301 20 23 14			jsr SETPLAYER
  3228
  3229 				; optimize OK (levels.inc), line = 123
  3230
  3231 2304 A9 01			lda #$01
  3232 2306 8D DB 2A			sta SETPLAYER.ISALIVE
  3233 2309 A9 55			lda #$55
  3234 230B 8D DA 2A			sta SETPLAYER.COLOUR
  3235 230E A9 51			lda #$51
  3236 2310 8D D9 2A			sta SETPLAYER.HEAD
  3237 2313 A9 02			lda #$02
  3238 2315 8D D8 2A			sta SETPLAYER.BRAIN
  3239 2318 A9 01			lda #$01
  3240 231A 8D D7 2A			sta SETPLAYER.DIR
  3241 231D A9 15			lda #$15
  3242 231F 8D D6 2A			sta SETPLAYER.Y
  3243 2322 A9 24			lda #$24
  3244 2324 8D D5 2A			sta SETPLAYER.X
  3245 2327 AD 7D 2A			lda PLAYER4
  3246 232A 8D D3 2A			sta SETPLAYER.P
  3247 232D AD 7E 2A			lda PLAYER4+1
  3248 2330 8D D4 2A			sta SETPLAYER.P+1
  3249 2333 20 23 14			jsr SETPLAYER
  3250
  3251 				; optimize FAIL (1, levels.inc), line = 125
  3252
  3253 2336 E8				inx
  3254 2337 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3255 233B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3256 233D A9 06			lda #$06
  3257 233F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3258 2342 A9 0A			lda #$0A
  3259 2344 8D CF 2A			sta CALCOBSTACLEADDR.X
  3260 2347 20 F3 12			jsr CALCOBSTACLEADDR
  3261 234A B4 17			ldy :STACKORIGIN-1,x
  3262 234C B5 18			lda :STACKORIGIN,x
  3263 234E 99 B6 2A			sta adr.OBSTACLES,y
  3264 2351 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3265 2353 99 B7 2A			sta adr.OBSTACLES+1,y
  3266 2356 CA				dex
  3267
  3268 				; optimize FAIL (1, levels.inc), line = 126
  3269
  3270 2357 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3271 235B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3272 235F A9 06			lda #$06
  3273 2361 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3274 2364 A9 1E			lda #$1E
  3275 2366 8D CF 2A			sta CALCOBSTACLEADDR.X
  3276 2369 20 F3 12			jsr CALCOBSTACLEADDR
  3277 236C B4 17			ldy :STACKORIGIN-1,x
  3278 236E B5 18			lda :STACKORIGIN,x
  3279 2370 99 B6 2A			sta adr.OBSTACLES,y
  3280 2373 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3281 2375 99 B7 2A			sta adr.OBSTACLES+1,y
  3282 2378 CA				dex
  3283
  3284 				; optimize FAIL (1, levels.inc), line = 127
  3285
  3286 2379 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3287 237D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3288 2381 A9 12			lda #$12
  3289 2383 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3290 2386 A9 0A			lda #$0A
  3291 2388 8D CF 2A			sta CALCOBSTACLEADDR.X
  3292 238B 20 F3 12			jsr CALCOBSTACLEADDR
  3293 238E B4 17			ldy :STACKORIGIN-1,x
  3294 2390 B5 18			lda :STACKORIGIN,x
  3295 2392 99 B6 2A			sta adr.OBSTACLES,y
  3296 2395 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3297 2397 99 B7 2A			sta adr.OBSTACLES+1,y
  3298 239A CA				dex
  3299
  3300 				; optimize FAIL (1, levels.inc), line = 128
  3301
  3302 239B A9 06 95 18			mva #$06 :STACKORIGIN,x
  3303 239F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3304 23A3 A9 12			lda #$12
  3305 23A5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3306 23A8 A9 1E			lda #$1E
  3307 23AA 8D CF 2A			sta CALCOBSTACLEADDR.X
  3308 23AD 20 F3 12			jsr CALCOBSTACLEADDR
  3309 23B0 B4 17			ldy :STACKORIGIN-1,x
  3310 23B2 B5 18			lda :STACKORIGIN,x
  3311 23B4 99 B6 2A			sta adr.OBSTACLES,y
  3312 23B7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3313 23B9 99 B7 2A			sta adr.OBSTACLES+1,y
  3314 23BC CA				dex
  3315
  3316 				; optimize FAIL (1, levels.inc), line = 129
  3317
  3318 23BD A9 08 95 18			mva #$08 :STACKORIGIN,x
  3319 23C1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3320 23C5 A9 0C			lda #$0C
  3321 23C7 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3322 23CA A9 01			lda #$01
  3323 23CC 8D CF 2A			sta CALCOBSTACLEADDR.X
  3324 23CF 20 F3 12			jsr CALCOBSTACLEADDR
  3325 23D2 B4 17			ldy :STACKORIGIN-1,x
  3326 23D4 B5 18			lda :STACKORIGIN,x
  3327 23D6 99 B6 2A			sta adr.OBSTACLES,y
  3328 23D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3329 23DB 99 B7 2A			sta adr.OBSTACLES+1,y
  3330 23DE CA				dex
  3331
  3332 				; optimize FAIL (1, levels.inc), line = 130
  3333
  3334 23DF A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3335 23E3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3336 23E7 A9 02			lda #$02
  3337 23E9 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3338 23EC A9 14			lda #$14
  3339 23EE 8D CF 2A			sta CALCOBSTACLEADDR.X
  3340 23F1 20 F3 12			jsr CALCOBSTACLEADDR
  3341 23F4 B4 17			ldy :STACKORIGIN-1,x
  3342 23F6 B5 18			lda :STACKORIGIN,x
  3343 23F8 99 B6 2A			sta adr.OBSTACLES,y
  3344 23FB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3345 23FD 99 B7 2A			sta adr.OBSTACLES+1,y
  3346 2400 CA				dex
  3347
  3348 				; optimize FAIL (1, levels.inc), line = 131
  3349
  3350 2401 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3351 2405 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3352 2409 A9 16			lda #$16
  3353 240B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3354 240E A9 14			lda #$14
  3355 2410 8D CF 2A			sta CALCOBSTACLEADDR.X
  3356 2413 20 F3 12			jsr CALCOBSTACLEADDR
  3357 2416 B4 17			ldy :STACKORIGIN-1,x
  3358 2418 B5 18			lda :STACKORIGIN,x
  3359 241A 99 B6 2A			sta adr.OBSTACLES,y
  3360 241D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3361 241F 99 B7 2A			sta adr.OBSTACLES+1,y
  3362 2422 CA				dex
  3363
  3364 				; optimize FAIL (1, levels.inc), line = 132
  3365
  3366 2423 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3367 2427 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3368 242B A9 0C			lda #$0C
  3369 242D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3370 2430 A9 14			lda #$14
  3371 2432 8D CF 2A			sta CALCOBSTACLEADDR.X
  3372 2435 20 F3 12			jsr CALCOBSTACLEADDR
  3373 2438 B4 17			ldy :STACKORIGIN-1,x
  3374 243A B5 18			lda :STACKORIGIN,x
  3375 243C 99 B6 2A			sta adr.OBSTACLES,y
  3376 243F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3377 2441 99 B7 2A			sta adr.OBSTACLES+1,y
  3378 2444 CA				dex
  3379 2445 CA				dex
  3380 2446			@exit
  3381 					.ifdef @new
  3382 					lda <@VarData
  3383 					sta :ztmp
  3384 					lda >@VarData
  3385 					ldy #@VarDataSize-1
  3386 					jmp @FreeMem
  3387 					els
  3388 2446 60				rts						; ret
  3389 					eif
  3390 				.endl
  3391
  3392 2447			.local	SETLEVEL08					; PROCEDURE
  3393
  3394 				; optimize OK (levels.inc), line = 139
  3395
  3396 2447 A9 01			lda #$01
  3397 2449 8D DB 2A			sta SETPLAYER.ISALIVE
  3398 244C A9 62			lda #$62
  3399 244E 8D DA 2A			sta SETPLAYER.COLOUR
  3400 2451 A9 51			lda #$51
  3401 2453 8D D9 2A			sta SETPLAYER.HEAD
  3402 2456 A9 00			lda #$00
  3403 2458 8D D8 2A			sta SETPLAYER.BRAIN
  3404 245B A9 08			lda #$08
  3405 245D 8D D7 2A			sta SETPLAYER.DIR
  3406 2460 A9 17			lda #$17
  3407 2462 8D D6 2A			sta SETPLAYER.Y
  3408 2465 A9 01			lda #$01
  3409 2467 8D D5 2A			sta SETPLAYER.X
  3410 246A AD 77 2A			lda PLAYER1
  3411 246D 8D D3 2A			sta SETPLAYER.P
  3412 2470 AD 78 2A			lda PLAYER1+1
  3413 2473 8D D4 2A			sta SETPLAYER.P+1
  3414 2476 20 23 14			jsr SETPLAYER
  3415
  3416 				; optimize OK (levels.inc), line = 140
  3417
  3418 2479 A9 01			lda #$01
  3419 247B 8D DB 2A			sta SETPLAYER.ISALIVE
  3420 247E A9 5D			lda #$5D
  3421 2480 8D DA 2A			sta SETPLAYER.COLOUR
  3422 2483 A9 51			lda #$51
  3423 2485 8D D9 2A			sta SETPLAYER.HEAD
  3424 2488 A9 03			lda #$03
  3425 248A 8D D8 2A			sta SETPLAYER.BRAIN
  3426 248D A9 04			lda #$04
  3427 248F 8D D7 2A			sta SETPLAYER.DIR
  3428 2492 A9 17			lda #$17
  3429 2494 8D D6 2A			sta SETPLAYER.Y
  3430 2497 A9 26			lda #$26
  3431 2499 8D D5 2A			sta SETPLAYER.X
  3432 249C AD 79 2A			lda PLAYER2
  3433 249F 8D D3 2A			sta SETPLAYER.P
  3434 24A2 AD 7A 2A			lda PLAYER2+1
  3435 24A5 8D D4 2A			sta SETPLAYER.P+1
  3436 24A8 20 23 14			jsr SETPLAYER
  3437
  3438 				; optimize OK (levels.inc), line = 141
  3439
  3440 24AB A9 01			lda #$01
  3441 24AD 8D DB 2A			sta SETPLAYER.ISALIVE
  3442 24B0 A9 71			lda #$71
  3443 24B2 8D DA 2A			sta SETPLAYER.COLOUR
  3444 24B5 A9 51			lda #$51
  3445 24B7 8D D9 2A			sta SETPLAYER.HEAD
  3446 24BA A9 02			lda #$02
  3447 24BC 8D D8 2A			sta SETPLAYER.BRAIN
  3448 24BF 8D D7 2A			sta SETPLAYER.DIR
  3449 24C2 A9 01			lda #$01
  3450 24C4 8D D6 2A			sta SETPLAYER.Y
  3451 24C7 A9 0A			lda #$0A
  3452 24C9 8D D5 2A			sta SETPLAYER.X
  3453 24CC AD 7B 2A			lda PLAYER3
  3454 24CF 8D D3 2A			sta SETPLAYER.P
  3455 24D2 AD 7C 2A			lda PLAYER3+1
  3456 24D5 8D D4 2A			sta SETPLAYER.P+1
  3457 24D8 20 23 14			jsr SETPLAYER
  3458
  3459 				; optimize OK (levels.inc), line = 142
  3460
  3461 24DB A9 01			lda #$01
  3462 24DD 8D DB 2A			sta SETPLAYER.ISALIVE
  3463 24E0 A9 55			lda #$55
  3464 24E2 8D DA 2A			sta SETPLAYER.COLOUR
  3465 24E5 A9 51			lda #$51
  3466 24E7 8D D9 2A			sta SETPLAYER.HEAD
  3467 24EA A9 04			lda #$04
  3468 24EC 8D D8 2A			sta SETPLAYER.BRAIN
  3469 24EF 8D D7 2A			sta SETPLAYER.DIR
  3470 24F2 A9 01			lda #$01
  3471 24F4 8D D6 2A			sta SETPLAYER.Y
  3472 24F7 A9 26			lda #$26
  3473 24F9 8D D5 2A			sta SETPLAYER.X
  3474 24FC AD 7D 2A			lda PLAYER4
  3475 24FF 8D D3 2A			sta SETPLAYER.P
  3476 2502 AD 7E 2A			lda PLAYER4+1
  3477 2505 8D D4 2A			sta SETPLAYER.P+1
  3478 2508 20 23 14			jsr SETPLAYER
  3479
  3480 				; optimize FAIL (1, levels.inc), line = 144
  3481
  3482 250B E8				inx
  3483 250C A9 00 95 18			mva #$00 :STACKORIGIN,x
  3484 2510 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3485 2512 A9 06			lda #$06
  3486 2514 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3487 2517 A9 0A			lda #$0A
  3488 2519 8D CF 2A			sta CALCOBSTACLEADDR.X
  3489 251C 20 F3 12			jsr CALCOBSTACLEADDR
  3490 251F B4 17			ldy :STACKORIGIN-1,x
  3491 2521 B5 18			lda :STACKORIGIN,x
  3492 2523 99 B6 2A			sta adr.OBSTACLES,y
  3493 2526 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3494 2528 99 B7 2A			sta adr.OBSTACLES+1,y
  3495 252B CA				dex
  3496
  3497 				; optimize FAIL (1, levels.inc), line = 145
  3498
  3499 252C A9 02 95 18			mva #$02 :STACKORIGIN,x
  3500 2530 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3501 2534 A9 06			lda #$06
  3502 2536 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3503 2539 A9 1E			lda #$1E
  3504 253B 8D CF 2A			sta CALCOBSTACLEADDR.X
  3505 253E 20 F3 12			jsr CALCOBSTACLEADDR
  3506 2541 B4 17			ldy :STACKORIGIN-1,x
  3507 2543 B5 18			lda :STACKORIGIN,x
  3508 2545 99 B6 2A			sta adr.OBSTACLES,y
  3509 2548 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3510 254A 99 B7 2A			sta adr.OBSTACLES+1,y
  3511 254D CA				dex
  3512
  3513 				; optimize FAIL (1, levels.inc), line = 146
  3514
  3515 254E A9 04 95 18			mva #$04 :STACKORIGIN,x
  3516 2552 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3517 2556 A9 12			lda #$12
  3518 2558 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3519 255B A9 0A			lda #$0A
  3520 255D 8D CF 2A			sta CALCOBSTACLEADDR.X
  3521 2560 20 F3 12			jsr CALCOBSTACLEADDR
  3522 2563 B4 17			ldy :STACKORIGIN-1,x
  3523 2565 B5 18			lda :STACKORIGIN,x
  3524 2567 99 B6 2A			sta adr.OBSTACLES,y
  3525 256A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3526 256C 99 B7 2A			sta adr.OBSTACLES+1,y
  3527 256F CA				dex
  3528
  3529 				; optimize FAIL (1, levels.inc), line = 147
  3530
  3531 2570 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3532 2574 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3533 2578 A9 12			lda #$12
  3534 257A 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3535 257D A9 1E			lda #$1E
  3536 257F 8D CF 2A			sta CALCOBSTACLEADDR.X
  3537 2582 20 F3 12			jsr CALCOBSTACLEADDR
  3538 2585 B4 17			ldy :STACKORIGIN-1,x
  3539 2587 B5 18			lda :STACKORIGIN,x
  3540 2589 99 B6 2A			sta adr.OBSTACLES,y
  3541 258C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3542 258E 99 B7 2A			sta adr.OBSTACLES+1,y
  3543 2591 CA				dex
  3544
  3545 				; optimize FAIL (1, levels.inc), line = 148
  3546
  3547 2592 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3548 2596 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3549 259A A9 0C			lda #$0C
  3550 259C 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3551 259F A9 01			lda #$01
  3552 25A1 8D CF 2A			sta CALCOBSTACLEADDR.X
  3553 25A4 20 F3 12			jsr CALCOBSTACLEADDR
  3554 25A7 B4 17			ldy :STACKORIGIN-1,x
  3555 25A9 B5 18			lda :STACKORIGIN,x
  3556 25AB 99 B6 2A			sta adr.OBSTACLES,y
  3557 25AE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3558 25B0 99 B7 2A			sta adr.OBSTACLES+1,y
  3559 25B3 CA				dex
  3560
  3561 				; optimize FAIL (1, levels.inc), line = 149
  3562
  3563 25B4 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3564 25B8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3565 25BC A9 02			lda #$02
  3566 25BE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3567 25C1 A9 14			lda #$14
  3568 25C3 8D CF 2A			sta CALCOBSTACLEADDR.X
  3569 25C6 20 F3 12			jsr CALCOBSTACLEADDR
  3570 25C9 B4 17			ldy :STACKORIGIN-1,x
  3571 25CB B5 18			lda :STACKORIGIN,x
  3572 25CD 99 B6 2A			sta adr.OBSTACLES,y
  3573 25D0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3574 25D2 99 B7 2A			sta adr.OBSTACLES+1,y
  3575 25D5 CA				dex
  3576
  3577 				; optimize FAIL (1, levels.inc), line = 150
  3578
  3579 25D6 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3580 25DA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3581 25DE A9 16			lda #$16
  3582 25E0 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3583 25E3 A9 14			lda #$14
  3584 25E5 8D CF 2A			sta CALCOBSTACLEADDR.X
  3585 25E8 20 F3 12			jsr CALCOBSTACLEADDR
  3586 25EB B4 17			ldy :STACKORIGIN-1,x
  3587 25ED B5 18			lda :STACKORIGIN,x
  3588 25EF 99 B6 2A			sta adr.OBSTACLES,y
  3589 25F2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3590 25F4 99 B7 2A			sta adr.OBSTACLES+1,y
  3591 25F7 CA				dex
  3592
  3593 				; optimize FAIL (1, levels.inc), line = 151
  3594
  3595 25F8 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3596 25FC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3597 2600 A9 0C			lda #$0C
  3598 2602 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3599 2605 A9 14			lda #$14
  3600 2607 8D CF 2A			sta CALCOBSTACLEADDR.X
  3601 260A 20 F3 12			jsr CALCOBSTACLEADDR
  3602 260D B4 17			ldy :STACKORIGIN-1,x
  3603 260F B5 18			lda :STACKORIGIN,x
  3604 2611 99 B6 2A			sta adr.OBSTACLES,y
  3605 2614 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3606 2616 99 B7 2A			sta adr.OBSTACLES+1,y
  3607 2619 CA				dex
  3608 261A CA				dex
  3609 261B			@exit
  3610 					.ifdef @new
  3611 					lda <@VarData
  3612 					sta :ztmp
  3613 					lda >@VarData
  3614 					ldy #@VarDataSize-1
  3615 					jmp @FreeMem
  3616 					els
  3617 261B 60				rts						; ret
  3618 					eif
  3619 				.endl
  3620
  3621 261C			.local	INITPLAYFIELD					; PROCEDURE
  3622
  3623 				; optimize OK (init.inc), line = 5
  3624
  3625 261C A9 1F			lda #$1F
  3626 261E 8D 15 FF			sta BACKGROUND
  3627 2621 A9 00			lda #$00
  3628 2623 8D 19 FF			sta BOREDER
  3629
  3630 				; optimize OK (init.inc), line = 6
  3631
  3632 2626 A9 20			lda #$20
  3633 2628 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3634 262A A9 C0			lda #$C0
  3635 262C 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3636 262E A9 03			lda #$03
  3637 2630 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3638 2632 A9 00			lda #$00
  3639 2634 85 08			sta SYSTEM.FILLCHAR_0056.A
  3640 2636 A9 0C			lda #$0C
  3641 2638 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3642 263A 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3643
  3644 				; optimize OK (init.inc), line = 8
  3645
  3646 263D A9 27			lda #$27
  3647 263F 85 58			sta T0B
  3648
  3649 2641			l_0C4E
  3650 				; --- ForToDoCondition
  3651
  3652 				; optimize OK (init.inc), line = 9
  3653
  3654 2641 A4 58			ldy T0B
  3655 2643 A9 A0			lda #$A0
  3656 2645 99 00 0C			sta $0C00,y
  3657
  3658 				; optimize OK (init.inc), line = 10
  3659
  3660 2648 99 C0 0F			sta $0FC0,y
  3661
  3662 				; optimize OK (init.inc), line = 11
  3663
  3664 264B A9 41			lda #$41
  3665 264D 99 00 08			sta $0800,y
  3666
  3667 				; optimize OK (init.inc), line = 12
  3668
  3669 2650 99 C0 0B			sta $0BC0,y
  3670
  3671 				; --- ForToDoEpilog
  3672 2653 C6 58			dec T0B
  3673 2655 10 EA			jpl l_0C4E
  3674 2657			l_0C5C
  3675
  3676 				; optimize OK (init.inc), line = 15
  3677
  3678 2657 A9 18			lda #$18
  3679 2659 85 58			sta T0B
  3680
  3681 265B			l_0C8E
  3682 				; --- ForToDoCondition
  3683 265B A5 58			lda T0B
  3684 265D C9 01			cmp #$01
  3685 265F 90 3A			jcc l_0C9C
  3686
  3687 				; optimize OK (init.inc), line = 16
  3688
  3689 2661 0A				asl @
  3690 2662 A8				tay
  3691 2663 A9 FF			lda #$FF
  3692 2665 18 79 0E 10			add adr.MUL40,y
  3693 2669 85 12			sta :bp2
  3694 266B A9 0B			lda #$0B
  3695 266D 79 0F 10			adc adr.MUL40+1,y
  3696 2670 85 13			sta :bp2+1
  3697 2672 A0 00			ldy #$00
  3698 2674 A9 A0			lda #$A0
  3699 2676 91 12			sta (:bp2),y
  3700 2678 C8				iny
  3701 2679 91 12			sta (:bp2),y
  3702
  3703 				; optimize OK (init.inc), line = 17
  3704
  3705 267B A5 58			lda T0B
  3706 267D 0A				asl @
  3707 267E A8				tay
  3708 267F A9 FF			lda #$FF
  3709 2681 18 79 0E 10			add adr.MUL40,y
  3710 2685 85 12			sta :bp2
  3711 2687 A9 07			lda #$07
  3712 2689 79 0F 10			adc adr.MUL40+1,y
  3713 268C 85 13			sta :bp2+1
  3714 268E A0 00			ldy #$00
  3715 2690 A9 41			lda #$41
  3716 2692 91 12			sta (:bp2),y
  3717 2694 C8				iny
  3718 2695 91 12			sta (:bp2),y
  3719
  3720 				; --- ForToDoEpilog
  3721 2697 C6 58			dec T0B
  3722 2699 10 C0			jpl l_0C8E
  3723 269B			l_0C9C
  3724
  3725 				; optimize OK (init.inc), line = 20
  3726
  3727 269B A9 07			lda #$07
  3728 269D 85 59			sta I0B
  3729
  3730 269F			l_0CC0
  3731 				; --- ForToDoCondition
  3732 269F A5 59			lda I0B
  3733 26A1 0A				asl @
  3734 26A2 A8				tay
  3735 26A3 A9 7E			lda #$7E
  3736 26A5 99 B6 2A			sta adr.OBSTACLES,y
  3737 26A8 A9 00			lda #$00
  3738 26AA 99 B7 2A			sta adr.OBSTACLES+1,y
  3739
  3740 				; --- ForToDoEpilog
  3741 26AD C6 59			dec I0B
  3742 26AF 10 EE			jpl l_0CC0
  3743 26B1			l_0CCE
  3744
  3745 				; optimize OK (init.inc), line = 22
  3746
  3747 26B1 AD 94 2A			lda LEVEL
  3748 26B4 8D E3 2A			sta @CASETMP_0006
  3749 26B7 C9 00			cmp #$00
  3750 26B9 D0 06			jne l_0CE5
  3751 26BB			@
  3752
  3753 				; optimize FAIL ('SETLEVEL00', init.inc), line = 23
  3754
  3755 26BB 20 89 18			jsr SETLEVEL00
  3756 26BE 4C 0E 27			jmp a_0006
  3757 26C1			l_0CE5
  3758 26C1 C9 01			cmp #$01
  3759 26C3 D0 06			jne l_0CEF
  3760 26C5			@
  3761
  3762 				; optimize FAIL ('SETLEVEL01', init.inc), line = 24
  3763
  3764 26C5 20 BA 19			jsr SETLEVEL01
  3765 26C8 4C 0E 27			jmp a_0006
  3766 26CB			l_0CEF
  3767 26CB C9 02			cmp #$02
  3768 26CD D0 06			jne l_0CF9
  3769 26CF			@
  3770
  3771 				; optimize FAIL ('SETLEVEL02', init.inc), line = 25
  3772
  3773 26CF 20 EB 1A			jsr SETLEVEL02
  3774 26D2 4C 0E 27			jmp a_0006
  3775 26D5			l_0CF9
  3776 26D5 C9 03			cmp #$03
  3777 26D7 D0 06			jne l_0D03
  3778 26D9			@
  3779
  3780 				; optimize FAIL ('SETLEVEL03', init.inc), line = 26
  3781
  3782 26D9 20 1C 1C			jsr SETLEVEL03
  3783 26DC 4C 0E 27			jmp a_0006
  3784 26DF			l_0D03
  3785 26DF C9 04			cmp #$04
  3786 26E1 D0 06			jne l_0D0D
  3787 26E3			@
  3788
  3789 				; optimize FAIL ('SETLEVEL04', init.inc), line = 27
  3790
  3791 26E3 20 6F 1D			jsr SETLEVEL04
  3792 26E6 4C 0E 27			jmp a_0006
  3793 26E9			l_0D0D
  3794 26E9 C9 05			cmp #$05
  3795 26EB D0 06			jne l_0D17
  3796 26ED			@
  3797
  3798 				; optimize FAIL ('SETLEVEL05', init.inc), line = 28
  3799
  3800 26ED 20 E4 1E			jsr SETLEVEL05
  3801 26F0 4C 0E 27			jmp a_0006
  3802 26F3			l_0D17
  3803 26F3 C9 06			cmp #$06
  3804 26F5 D0 06			jne l_0D21
  3805 26F7			@
  3806
  3807 				; optimize FAIL ('SETLEVEL06', init.inc), line = 29
  3808
  3809 26F7 20 99 20			jsr SETLEVEL06
  3810 26FA 4C 0E 27			jmp a_0006
  3811 26FD			l_0D21
  3812 26FD C9 07			cmp #$07
  3813 26FF D0 06			jne l_0D2B
  3814 2701			@
  3815
  3816 				; optimize FAIL ('SETLEVEL07', init.inc), line = 30
  3817
  3818 2701 20 6E 22			jsr SETLEVEL07
  3819 2704 4C 0E 27			jmp a_0006
  3820 2707			l_0D2B
  3821 2707 C9 08			cmp #$08
  3822 2709 D0 03			jne l_0D35
  3823 270B			@
  3824
  3825 				; optimize FAIL ('SETLEVEL08', init.inc), line = 31
  3826
  3827 270B 20 47 24			jsr SETLEVEL08
  3828 270E			l_0D35
  3829 270E			a_0006
  3830
  3831 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 34
  3832
  3833 270E 20 16 13			jsr SAVEOBSTACLES
  3834 2711 20 BE 12			jsr ANIMATEOBSTACLES
  3835 2714 20 C4 11			jsr SHOWSCORE
  3836
  3837 				; ------------------------------------------------------------
  3838
  3839 = 0000			@FORTMP_0C4B	= $00
  3840 = 0001			@FORTMP_0C8B	= $01
  3841 = 0000			@FORTMP_0CBD	= $00
  3842 = 2AE3			@CASETMP_0006	= DATAORIGIN+$005F
  3843
  3844 = 2AE3			@VarData	= @CASETMP_0006
  3845 = 0001			@VarDataSize	= 1
  3846
  3847 2717			@exit
  3848 					.ifdef @new
  3849 					lda <@VarData
  3850 					sta :ztmp
  3851 					lda >@VarData
  3852 					ldy #@VarDataSize-1
  3853 					jmp @FreeMem
  3854 					els
  3855 2717 60				rts						; ret
  3856 					eif
  3857 				.endl
  3858
  3859 2718			.local	INITPLAYERS					; PROCEDURE
  3860
  3861 				; optimize OK (init.inc), line = 41
  3862
  3863 2718 A9 30			lda #$30
  3864 271A 8D 9C 2A			sta PLAYER1.SCORE
  3865 271D 8D A4 2A			sta PLAYER2.SCORE
  3866
  3867 				; optimize OK (init.inc), line = 42
  3868
  3869 2720 8D AC 2A			sta PLAYER3.SCORE
  3870 2723 8D B4 2A			sta PLAYER4.SCORE
  3871
  3872 				; optimize OK (init.inc), line = 44
  3873
  3874 2726 A9 00			lda #$00
  3875 2728 8D 9D 2A			sta PLAYER1.ISALIVE
  3876 272B 8D A5 2A			sta PLAYER2.ISALIVE
  3877
  3878 				; optimize OK (init.inc), line = 45
  3879
  3880 272E 8D AD 2A			sta PLAYER3.ISALIVE
  3881 2731 8D B5 2A			sta PLAYER4.ISALIVE
  3882 2734			@exit
  3883 					.ifdef @new
  3884 					lda <@VarData
  3885 					sta :ztmp
  3886 					lda >@VarData
  3887 					ldy #@VarDataSize-1
  3888 					jmp @FreeMem
  3889 					els
  3890 2734 60				rts						; ret
  3891 					eif
  3892 				.endl
  3893
  3894 2735			.local	HUMAN						; PROCEDURE
  3895
  3896 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3897
  3898 2735 20 11 14			jsr CHECKJOYSTATUS
  3899 2738 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3900 2742 A0 04			ldy #PLY.DIR-DATAORIGIN
  3901 2744 B1 12			lda (:bp2),y
  3902 2746 85 5B			sta NEWDIR
  3903
  3904 				; optimize OK (main.pas), line = 16
  3905
  3906 2748 A5 63			lda JOYSTATUS
  3907 274A 8D E4 2A			sta @CASETMP_0007
  3908 274D C9 01			cmp #$01
  3909 274F D0 19			jne l_0D80
  3910 2751			@
  3911
  3912 				; optimize OK (main.pas), line = 17
  3913
  3914 2751 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3915 275B A0 04			ldy #PLY.DIR-DATAORIGIN
  3916 275D B1 12			lda (:bp2),y
  3917 275F C9 02			cmp #$02
  3918 2761 F0 04			jeq l_0D92
  3919 2763 A9 01			lda #$01
  3920 2765 85 5B			sta NEWDIR
  3921 2767			l_0D92
  3922
  3923 2767 4C BE 27			jmp a_0007
  3924 276A			l_0D80
  3925 276A C9 02			cmp #$02
  3926 276C D0 19			jne l_0DA2
  3927 276E			@
  3928
  3929 				; optimize OK (main.pas), line = 18
  3930
  3931 276E AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3932 2778 A0 04			ldy #PLY.DIR-DATAORIGIN
  3933 277A B1 12			lda (:bp2),y
  3934 277C C9 01			cmp #$01
  3935 277E F0 04			jeq l_0DB4
  3936 2780 A9 02			lda #$02
  3937 2782 85 5B			sta NEWDIR
  3938 2784			l_0DB4
  3939
  3940 2784 4C BE 27			jmp a_0007
  3941 2787			l_0DA2
  3942 2787 C9 04			cmp #$04
  3943 2789 D0 19			jne l_0DC4
  3944 278B			@
  3945
  3946 				; optimize OK (main.pas), line = 19
  3947
  3948 278B AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3949 2795 A0 04			ldy #PLY.DIR-DATAORIGIN
  3950 2797 B1 12			lda (:bp2),y
  3951 2799 C9 08			cmp #$08
  3952 279B F0 04			jeq l_0DD6
  3953 279D A9 04			lda #$04
  3954 279F 85 5B			sta NEWDIR
  3955 27A1			l_0DD6
  3956
  3957 27A1 4C BE 27			jmp a_0007
  3958 27A4			l_0DC4
  3959 27A4 C9 08			cmp #$08
  3960 27A6 D0 16			jne l_0DE6
  3961 27A8			@
  3962
  3963 				; optimize OK (main.pas), line = 20
  3964
  3965 27A8 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3966 27B2 A0 04			ldy #PLY.DIR-DATAORIGIN
  3967 27B4 B1 12			lda (:bp2),y
  3968 27B6 C9 04			cmp #$04
  3969 27B8 F0 04			jeq l_0DF8
  3970 27BA A9 08			lda #$08
  3971 27BC 85 5B			sta NEWDIR
  3972 27BE			l_0DF8
  3973
  3974 27BE			l_0DE6
  3975 27BE			a_0007
  3976
  3977 				; optimize OK (main.pas), line = 23
  3978
  3979 27BE A5 5B			lda NEWDIR
  3980 27C0 25 5C			and AVAILDIR
  3981 27C2 D0 18			jne l_0E1F
  3982
  3983 				; optimize OK (main.pas), line = 24
  3984
  3985 27C4 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3986 27CE A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3987 27D0 A9 00			lda #$00
  3988 27D2 91 12			sta (:bp2),y
  3989 27D4 A0 02			ldy #PLY.HEAD-DATAORIGIN
  3990 27D6 A9 2A			lda #$2A
  3991 27D8 91 12			sta (:bp2),y
  3992 27DA C6 5A			dec ALIVE
  3993 27DC			l_0E1F
  3994
  3995 				; ------------------------------------------------------------
  3996
  3997 = 2AE4			@CASETMP_0007	= DATAORIGIN+$0060
  3998
  3999 = 2AE4			@VarData	= @CASETMP_0007
  4000 = 0001			@VarDataSize	= 1
  4001
  4002 27DC			@exit
  4003 					.ifdef @new
  4004 					lda <@VarData
  4005 					sta :ztmp
  4006 					lda >@VarData
  4007 					ldy #@VarDataSize-1
  4008 					jmp @FreeMem
  4009 					els
  4010 27DC 60				rts						; ret
  4011 					eif
  4012 				.endl
  4013
  4014 27DD			.local	PLAYERMOVE					; PROCEDURE
  4015
  4016 				; optimize OK (main.pas), line = 32
  4017
  4018 27DD AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4019 27E7 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4020 27E9 B1 12			lda (:bp2),y
  4021 27EB D0 03 4C 31 29		jeq l_0E3E
  4022
  4023 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4024
  4025 27F0 20 29 12			jsr CHECKAVAILDIR
  4026
  4027 				; optimize OK (main.pas), line = 35
  4028
  4029 27F3 A5 5C			lda AVAILDIR
  4030 27F5 D0 35			jne l_0E52
  4031
  4032 				; optimize OK (main.pas), line = 36
  4033
  4034 27F7 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4035 2801 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4036 2803 A9 00			lda #$00
  4037 2805 91 12			sta (:bp2),y
  4038 2807 C6 5A			dec ALIVE
  4039
  4040 				; optimize OK (main.pas), line = 37
  4041
  4042 2809 A0 00			ldy #PLY.X-DATAORIGIN
  4043 280B B1 12			lda (:bp2),y
  4044 280D 8D C6 2A			sta PUTCHAR_0072.X
  4045 2810 A0 01			ldy #PLY.Y-DATAORIGIN
  4046 2812 B1 12			lda (:bp2),y
  4047 2814 8D C7 2A			sta PUTCHAR_0072.Y
  4048 2817 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4049 2819 B1 12			lda (:bp2),y
  4050 281B 18 69 80			add #$80
  4051 281E 8D C9 2A			sta PUTCHAR_0072.C
  4052 2821 A9 57			lda #$57
  4053 2823 8D C8 2A			sta PUTCHAR_0072.V
  4054 2826 20 78 11			jsr PUTCHAR_0072
  4055 2829 4C 31 29			jmp l_0E73
  4056 282C			l_0E52
  4057
  4058 				; optimize OK (main.pas), line = 40
  4059
  4060 282C AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4061 2836 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4062 2838 B1 12			lda (:bp2),y
  4063 283A 8D E5 2A			sta @CASETMP_0008
  4064 283D C9 00			cmp #$00
  4065 283F D0 06			jne l_0E7E
  4066 2841			@
  4067
  4068 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4069
  4070 2841 20 35 27			jsr HUMAN
  4071 2844 4C 6C 28			jmp a_0008
  4072 2847			l_0E7E
  4073 2847 C9 01			cmp #$01
  4074 2849 D0 06			jne l_0E88
  4075 284B			@
  4076
  4077 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4078
  4079 284B 20 87 14			jsr AISTRAIGHT
  4080 284E 4C 6C 28			jmp a_0008
  4081 2851			l_0E88
  4082 2851 C9 02			cmp #$02
  4083 2853 D0 06			jne l_0E92
  4084 2855			@
  4085
  4086 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4087
  4088 2855 20 0C 15			jsr AISAPPER
  4089 2858 4C 6C 28			jmp a_0008
  4090 285B			l_0E92
  4091 285B C9 03			cmp #$03
  4092 285D D0 06			jne l_0E9C
  4093 285F			@
  4094
  4095 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4096
  4097 285F 20 66 17			jsr AIBULLY
  4098 2862 4C 6C 28			jmp a_0008
  4099 2865			l_0E9C
  4100 2865 C9 04			cmp #$04
  4101 2867 D0 03			jne l_0EA6
  4102 2869			@
  4103
  4104 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4105
  4106 2869 20 34 18			jsr AIMIRROR
  4107 286C			l_0EA6
  4108 286C			a_0008
  4109
  4110 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4111
  4112 286C 20 5A 13			jsr DRAWTAIL
  4113 286F AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4114 2879 A0 04			ldy #PLY.DIR-DATAORIGIN
  4115 287B A5 5B			lda NEWDIR
  4116 287D 91 12			sta (:bp2),y
  4117
  4118 				; optimize OK (main.pas), line = 50
  4119
  4120 287F A5 5B			lda NEWDIR
  4121 2881 8D E6 2A			sta @CASETMP_0009
  4122 2884 C9 01			cmp #$01
  4123 2886 D0 16			jne l_0EC2
  4124 2888			@
  4125
  4126 				; optimize OK (main.pas), line = 51
  4127
  4128 2888 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4129 2892 A0 01			ldy #PLY.Y-DATAORIGIN
  4130 2894 B1 12			lda (:bp2),y
  4131 2896 38 E9 01			sub #$01
  4132 2899 91 12			sta (:bp2),y
  4133
  4134 289B 4C E9 28			jmp a_0009
  4135 289E			l_0EC2
  4136 289E C9 02			cmp #$02
  4137 28A0 D0 16			jne l_0ECC
  4138 28A2			@
  4139
  4140 				; optimize OK (main.pas), line = 52
  4141
  4142 28A2 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4143 28AC A0 01			ldy #PLY.Y-DATAORIGIN
  4144 28AE B1 12			lda (:bp2),y
  4145 28B0 18 69 01			add #$01
  4146 28B3 91 12			sta (:bp2),y
  4147
  4148 28B5 4C E9 28			jmp a_0009
  4149 28B8			l_0ECC
  4150 28B8 C9 04			cmp #$04
  4151 28BA D0 16			jne l_0ED6
  4152 28BC			@
  4153
  4154 				; optimize OK (main.pas), line = 53
  4155
  4156 28BC AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4157 28C6 A0 00			ldy #PLY.X-DATAORIGIN
  4158 28C8 B1 12			lda (:bp2),y
  4159 28CA 38 E9 01			sub #$01
  4160 28CD 91 12			sta (:bp2),y
  4161
  4162 28CF 4C E9 28			jmp a_0009
  4163 28D2			l_0ED6
  4164 28D2 C9 08			cmp #$08
  4165 28D4 D0 13			jne l_0EE0
  4166 28D6			@
  4167
  4168 				; optimize OK (main.pas), line = 54
  4169
  4170 28D6 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4171 28E0 A0 00			ldy #PLY.X-DATAORIGIN
  4172 28E2 B1 12			lda (:bp2),y
  4173 28E4 18 69 01			add #$01
  4174 28E7 91 12			sta (:bp2),y
  4175
  4176 28E9			l_0EE0
  4177 28E9			a_0009
  4178
  4179 				; optimize OK (main.pas), line = 57
  4180
  4181 28E9 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4182 28F3 A0 00			ldy #PLY.X-DATAORIGIN
  4183 28F5 B1 12			lda (:bp2),y
  4184 28F7 8D C6 2A			sta PUTCHAR_0072.X
  4185 28FA A0 01			ldy #PLY.Y-DATAORIGIN
  4186 28FC B1 12			lda (:bp2),y
  4187 28FE 8D C7 2A			sta PUTCHAR_0072.Y
  4188 2901 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4189 2903 B1 12			lda (:bp2),y
  4190 2905 8D C8 2A			sta PUTCHAR_0072.V
  4191 2908 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4192 290A B1 12			lda (:bp2),y
  4193 290C 8D C9 2A			sta PUTCHAR_0072.C
  4194 290F 20 78 11			jsr PUTCHAR_0072
  4195
  4196 				; optimize OK (main.pas), line = 60
  4197
  4198 2912 AD 9D 2A			lda PLAYER1.ISALIVE
  4199 2915 D0 1A			jne l_0F05
  4200 2917 AD 99 2A			lda PLAYER1.COLOUR
  4201 291A 8D C9 2A			sta PUTCHAR_0072.C
  4202 291D A9 2A			lda #$2A
  4203 291F 8D C8 2A			sta PUTCHAR_0072.V
  4204 2922 AD 97 2A			lda PLAYER1.Y
  4205 2925 8D C7 2A			sta PUTCHAR_0072.Y
  4206 2928 AD 96 2A			lda PLAYER1.X
  4207 292B 8D C6 2A			sta PUTCHAR_0072.X
  4208 292E 20 78 11			jsr PUTCHAR_0072
  4209 2931			l_0F05
  4210 2931			l_0E73
  4211 2931			l_0E3E
  4212
  4213 				; ------------------------------------------------------------
  4214
  4215 = 2AE5			@CASETMP_0008	= DATAORIGIN+$0061
  4216 = 2AE6			@CASETMP_0009	= DATAORIGIN+$0062
  4217
  4218 = 2AE5			@VarData	= @CASETMP_0008
  4219 = 0002			@VarDataSize	= 2
  4220
  4221 2931			@exit
  4222 					.ifdef @new
  4223 					lda <@VarData
  4224 					sta :ztmp
  4225 					lda >@VarData
  4226 					ldy #@VarDataSize-1
  4227 					jmp @FreeMem
  4228 					els
  4229 2931 60				rts						; ret
  4230 					eif
  4231 				.endl
  4232
  4233 2932			.local	STARTSCREEN					; PROCEDURE
  4234
  4235 				; optimize OK (main.pas), line = 71
  4236
  4237 2932 AD 99 2A			lda PLAYER1.COLOUR
  4238 2935 18 69 80			add #$80
  4239 2938 8D C9 2A			sta PUTCHAR_0072.C
  4240 293B AD 98 2A			lda PLAYER1.HEAD
  4241 293E 8D C8 2A			sta PUTCHAR_0072.V
  4242 2941 AD 97 2A			lda PLAYER1.Y
  4243 2944 8D C7 2A			sta PUTCHAR_0072.Y
  4244 2947 AD 96 2A			lda PLAYER1.X
  4245 294A 8D C6 2A			sta PUTCHAR_0072.X
  4246 294D 20 78 11			jsr PUTCHAR_0072
  4247
  4248 				; --- RepeatUntilProlog
  4249 2950			l_0F2B
  4250
  4251 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 72
  4252
  4253 2950 20 11 14			jsr CHECKJOYSTATUS
  4254 2953 A5 63			lda JOYSTATUS
  4255 2955 C9 40			cmp #$40
  4256 2957 D0 F7			jne l_0F2B
  4257
  4258 				; optimize OK (main.pas), line = 73
  4259
  4260 2959 AD 99 2A			lda PLAYER1.COLOUR
  4261 295C 8D C9 2A			sta PUTCHAR_0072.C
  4262 295F AD 98 2A			lda PLAYER1.HEAD
  4263 2962 8D C8 2A			sta PUTCHAR_0072.V
  4264 2965 AD 97 2A			lda PLAYER1.Y
  4265 2968 8D C7 2A			sta PUTCHAR_0072.Y
  4266 296B AD 96 2A			lda PLAYER1.X
  4267 296E 8D C6 2A			sta PUTCHAR_0072.X
  4268 2971 20 78 11			jsr PUTCHAR_0072
  4269 2974			@exit
  4270 					.ifdef @new
  4271 					lda <@VarData
  4272 					sta :ztmp
  4273 					lda >@VarData
  4274 					ldy #@VarDataSize-1
  4275 					jmp @FreeMem
  4276 					els
  4277 2974 60				rts						; ret
  4278 					eif
  4279 				.endl
  4280
  4281 2975			.local	MAINLOOP					; PROCEDURE
  4282
  4283 				; optimize OK (main.pas), line = 80
  4284
  4285 2975 A9 FF			lda #$FF
  4286 2977 85 5A			sta ALIVE
  4287
  4288 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 82
  4289
  4290 2979 20 1C 26			jsr INITPLAYFIELD
  4291 297C 20 32 29			jsr STARTSCREEN
  4292
  4293 				; --- RepeatUntilProlog
  4294 297F			l_0F51
  4295
  4296 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 85
  4297
  4298 297F 20 23 11			jsr SYSTEM.PAUSE_006B
  4299
  4300 				; optimize OK (main.pas), line = 86
  4301
  4302 2982 AD 77 2A			lda PLAYER1
  4303 2985 8D 73 2A			sta PLY
  4304 2988 AD 78 2A			lda PLAYER1+1
  4305 298B 8D 74 2A			sta PLY+1
  4306 298E 20 DD 27			jsr PLAYERMOVE
  4307
  4308 				; optimize OK (main.pas), line = 88
  4309
  4310 2991 A9 02			lda #$02
  4311 2993 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4312 2996 A9 00			lda #$00
  4313 2998 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4314 299B 20 2A 11			jsr SYSTEM.PAUSE_006C
  4315
  4316 				; optimize OK (main.pas), line = 89
  4317
  4318 299E AD 79 2A			lda PLAYER2
  4319 29A1 8D 73 2A			sta PLY
  4320 29A4 AD 7A 2A			lda PLAYER2+1
  4321 29A7 8D 74 2A			sta PLY+1
  4322 29AA 20 DD 27			jsr PLAYERMOVE
  4323
  4324 				; optimize OK (main.pas), line = 90
  4325
  4326 29AD AD 7B 2A			lda PLAYER3
  4327 29B0 8D 73 2A			sta PLY
  4328 29B3 AD 7C 2A			lda PLAYER3+1
  4329 29B6 8D 74 2A			sta PLY+1
  4330 29B9 20 DD 27			jsr PLAYERMOVE
  4331
  4332 				; optimize OK (main.pas), line = 91
  4333
  4334 29BC AD 7D 2A			lda PLAYER4
  4335 29BF 8D 73 2A			sta PLY
  4336 29C2 AD 7E 2A			lda PLAYER4+1
  4337 29C5 8D 74 2A			sta PLY+1
  4338 29C8 20 DD 27			jsr PLAYERMOVE
  4339
  4340 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 92
  4341
  4342 29CB 20 BE 12			jsr ANIMATEOBSTACLES
  4343
  4344 				; optimize OK (main.pas), line = 93
  4345
  4346 29CE A5 5A			lda ALIVE
  4347 29D0 F0 04			jeq l_0F51x
  4348 29D2 C9 FF			cmp #$FF
  4349 29D4 D0 A9			jne l_0F51
  4350 29D6			l_0F51x
  4351
  4352 				; optimize OK (main.pas), line = 95
  4353
  4354 29D6 AD 9D 2A			lda PLAYER1.ISALIVE
  4355 29D9 F0 03			jeq l_0F92
  4356 29DB EE 9C 2A			inc PLAYER1.SCORE
  4357 29DE			l_0F92
  4358
  4359 				; optimize OK (main.pas), line = 96
  4360
  4361 29DE AD A5 2A			lda PLAYER2.ISALIVE
  4362 29E1 F0 03			jeq l_0FA5
  4363 29E3 EE A4 2A			inc PLAYER2.SCORE
  4364 29E6			l_0FA5
  4365
  4366 				; optimize OK (main.pas), line = 97
  4367
  4368 29E6 AD AD 2A			lda PLAYER3.ISALIVE
  4369 29E9 F0 03			jeq l_0FB8
  4370 29EB EE AC 2A			inc PLAYER3.SCORE
  4371 29EE			l_0FB8
  4372
  4373 				; optimize OK (main.pas), line = 98
  4374
  4375 29EE AD B5 2A			lda PLAYER4.ISALIVE
  4376 29F1 F0 03			jeq l_0FCB
  4377 29F3 EE B4 2A			inc PLAYER4.SCORE
  4378 29F6			l_0FCB
  4379
  4380 				; optimize OK (main.pas), line = 100
  4381
  4382 29F6 A9 64			lda #$64
  4383 29F8 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4384 29FB A9 00			lda #$00
  4385 29FD 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4386 2A00 20 2A 11			jsr SYSTEM.PAUSE_006C
  4387 2A03			@exit
  4388 					.ifdef @new
  4389 					lda <@VarData
  4390 					sta :ztmp
  4391 					lda >@VarData
  4392 					ldy #@VarDataSize-1
  4393 					jmp @FreeMem
  4394 					els
  4395 2A03 60				rts						; ret
  4396 					eif
  4397 				.endl
  4398 2A04			l_0007
  4399
  4400 				; --- RepeatUntilProlog
  4401 2A04			l_0FD6
  4402
  4403 				; optimize OK (main.pas), line = 107
  4404
  4405 2A04 A9 01			lda #$01
  4406 2A06 8D 94 2A			sta LEVEL
  4407 2A09 20 18 27			jsr INITPLAYERS
  4408
  4409 				; optimize OK (main.pas), line = 109
  4410
  4411 2A0C A9 00			lda #$00
  4412 2A0E 8D 95 2A			sta GAMEOVER
  4413
  4414 				; --- RepeatUntilProlog
  4415 2A11			l_0FE0
  4416
  4417 				; optimize FAIL ('MAINLOOP', main.pas), line = 111
  4418
  4419 2A11 20 75 29			jsr MAINLOOP
  4420
  4421 				; optimize FAIL (0, main.pas), line = 112
  4422
  4423 2A14 EE 94 2A			inc LEVEL
  4424 2A17 AD 94 2A			lda LEVEL
  4425 2A1A C9 08			cmp #$08
  4426 2A1C D0 05			jne l_0FF7
  4427 2A1E A9 05			lda #$05
  4428 2A20 8D 94 2A			sta LEVEL
  4429 2A23			l_0FF7
  4430
  4431 				; optimize OK (main.pas), line = 113
  4432
  4433 2A23 AD 9C 2A			lda PLAYER1.SCORE
  4434 2A26 C9 39			cmp #$39
  4435 2A28 D0 05			jne l_1010
  4436 2A2A A9 01			lda #$01
  4437 2A2C 8D 95 2A			sta GAMEOVER
  4438 2A2F			l_1010
  4439
  4440 				; optimize OK (main.pas), line = 114
  4441
  4442 2A2F AD A4 2A			lda PLAYER2.SCORE
  4443 2A32 C9 39			cmp #$39
  4444 2A34 D0 05			jne l_1029
  4445 2A36 A9 01			lda #$01
  4446 2A38 8D 95 2A			sta GAMEOVER
  4447 2A3B			l_1029
  4448
  4449 				; optimize OK (main.pas), line = 115
  4450
  4451 2A3B AD AC 2A			lda PLAYER3.SCORE
  4452 2A3E C9 39			cmp #$39
  4453 2A40 D0 05			jne l_1042
  4454 2A42 A9 01			lda #$01
  4455 2A44 8D 95 2A			sta GAMEOVER
  4456 2A47			l_1042
  4457
  4458 				; optimize OK (main.pas), line = 116
  4459
  4460 2A47 AD B4 2A			lda PLAYER4.SCORE
  4461 2A4A C9 39			cmp #$39
  4462 2A4C D0 05			jne l_105B
  4463 2A4E A9 01			lda #$01
  4464 2A50 8D 95 2A			sta GAMEOVER
  4465 2A53			l_105B
  4466
  4467 				; optimize OK (main.pas), line = 117
  4468
  4469 2A53 AD 95 2A			lda GAMEOVER
  4470 2A56 F0 B9			jeq l_0FE0
  4471
  4472 				; optimize FAIL ('SHOWSCORE', main.pas), line = 119
  4473
  4474 2A58 20 C4 11			jsr SHOWSCORE
  4475
  4476 				; optimize OK (main.pas), line = 121
  4477
  4478 2A5B A9 C8			lda #$C8
  4479 2A5D 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4480 2A60 A9 00			lda #$00
  4481 2A62 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4482 2A65 20 2A 11			jsr SYSTEM.PAUSE_006C
  4483
  4484 				; optimize OK (main.pas), line = 122
  4485
  4486 2A68 4C 04 2A			jmp l_0FD6
  4487
  4488 				; ------------------------------------------------------------
  4489
  4490 = 0800			ATTRIBUTE_ADDR	= $0800
  4491 = 0C00			SCREEN_ADDR	= $0C00
  4492 = 001F			BACKGROUND_COLOUR	= $1F
  4493 = 0000			BOREDER_COLOUR	= $00
  4494 = 0009			VICTORIES	= $09
  4495 = 0005			LOOK_AHEAD	= $05
  4496 = 007E			TRASH	= $7E
  4497 = 0020			EMPTY	= $20
  4498 = 00A0			WALL	= $A0
  4499 = 0041			WALL_COLOUR	= $41
  4500 = 0030			ZERO	= $30
  4501 = 0056			OBSTACLE_1	= $56
  4502 = 005B			OBSTACLE_2	= $5B
  4503 = 0035			OBST_COLOUR	= $35
  4504 = 0007			OBST_QUANTITY	= $07
  4505 = 0051			PLY_HEAD	= $51
  4506 = 002A			PLY_CRASH	= $2A
  4507 = 0057			PLY_BUSTED	= $57
  4508 = 0042			PLY_TAIL_UD	= $42
  4509 = 0040			PLY_TAIL_LR	= $40
  4510 = 007D			PLY_TAIL_RD	= $7D
  4511 = 006E			PLY_TAIL_RU	= $6E
  4512 = 006D			PLY_TAIL_LD	= $6D
  4513 = 0070			PLY_TAIL_LU	= $70
  4514 = 0062			PLY1_COLOUR	= $62
  4515 = 005D			PLY2_COLOUR	= $5D
  4516 = 0071			PLY3_COLOUR	= $71
  4517 = 0055			PLY4_COLOUR	= $55
  4518 = 0000			PLY_CTRL	= $00
  4519 = 0001			AI_STRAIGHT	= $01
  4520 = 0002			AI_SAPPER	= $02
  4521 = 0003			AI_BULLY	= $03
  4522 = 0004			AI_MIRROR	= $04
  4523 = 0001			JOY_UP	= $01
  4524 = 0002			JOY_DOWN	= $02
  4525 = 0004			JOY_LEFT	= $04
  4526 = 0008			JOY_RIGHT	= $08
  4527 = 0040			JOY_FIRE	= $40
  4528 = 0002			JOY_SELECT_1	= $02
  4529 = 0004			JOY_SELECT_2	= $04
  4530 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4531 2A6B			.var MUL40	= adr.MUL40 .word
  4532 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4533 2A6B			.var DIRECTION	= adr.DIRECTION .word
  4534 = FD30			KEYSCAN	= $FD30
  4535 = FF08			JOY	= $FF08
  4536 = FF15			BACKGROUND	= $FF15
  4537 = FF19			BOREDER	= $FF19
  4538 = 0058			T0B	= $58
  4539 = 0059			I0B	= $59
  4540 = 005A			ALIVE	= $5A
  4541 = 005B			NEWDIR	= $5B
  4542 = 005C			AVAILDIR	= $5C
  4543 = 005D			T0W	= $5D
  4544 = 005F			adr.PLY	= $5F
  4545 2A6B			.var PLY	= adr.PLY .word
  4546 = 2A84			PLY.X	= DATAORIGIN+$0000
  4547 = 2A85			PLY.Y	= DATAORIGIN+$0001
  4548 = 2A86			PLY.HEAD	= DATAORIGIN+$0002
  4549 = 2A87			PLY.COLOUR	= DATAORIGIN+$0003
  4550 = 2A88			PLY.DIR	= DATAORIGIN+$0004
  4551 = 2A89			PLY.BRAIN	= DATAORIGIN+$0005
  4552 = 2A8A			PLY.SCORE	= DATAORIGIN+$0006
  4553 = 2A8B			PLY.ISALIVE	= DATAORIGIN+$0007
  4554 = 0061			adr.TMPPLY	= $61
  4555 2A6B			.var TMPPLY	= adr.TMPPLY .word
  4556 = 2A84			TMPPLY.X	= DATAORIGIN+$0000
  4557 = 2A85			TMPPLY.Y	= DATAORIGIN+$0001
  4558 = 2A86			TMPPLY.HEAD	= DATAORIGIN+$0002
  4559 = 2A87			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4560 = 2A88			TMPPLY.DIR	= DATAORIGIN+$0004
  4561 = 2A89			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4562 = 2A8A			TMPPLY.SCORE	= DATAORIGIN+$0006
  4563 = 2A8B			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4564 = 0063			JOYSTATUS	= $63
  4565 = 2A94			LEVEL	= DATAORIGIN+$0010
  4566 = 2A95			GAMEOVER	= DATAORIGIN+$0011
  4567 = 2A96			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4568 2A6B			.var PLAYER1	= adr.PLAYER1 .word
  4569 = 2A96			PLAYER1.X	= DATAORIGIN+$0012
  4570 = 2A97			PLAYER1.Y	= DATAORIGIN+$0013
  4571 = 2A98			PLAYER1.HEAD	= DATAORIGIN+$0014
  4572 = 2A99			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4573 = 2A9A			PLAYER1.DIR	= DATAORIGIN+$0016
  4574 = 2A9B			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4575 = 2A9C			PLAYER1.SCORE	= DATAORIGIN+$0018
  4576 = 2A9D			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4577 = 2A9E			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4578 2A6B			.var PLAYER2	= adr.PLAYER2 .word
  4579 = 2A9E			PLAYER2.X	= DATAORIGIN+$001A
  4580 = 2A9F			PLAYER2.Y	= DATAORIGIN+$001B
  4581 = 2AA0			PLAYER2.HEAD	= DATAORIGIN+$001C
  4582 = 2AA1			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4583 = 2AA2			PLAYER2.DIR	= DATAORIGIN+$001E
  4584 = 2AA3			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4585 = 2AA4			PLAYER2.SCORE	= DATAORIGIN+$0020
  4586 = 2AA5			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4587 = 2AA6			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4588 2A6B			.var PLAYER3	= adr.PLAYER3 .word
  4589 = 2AA6			PLAYER3.X	= DATAORIGIN+$0022
  4590 = 2AA7			PLAYER3.Y	= DATAORIGIN+$0023
  4591 = 2AA8			PLAYER3.HEAD	= DATAORIGIN+$0024
  4592 = 2AA9			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4593 = 2AAA			PLAYER3.DIR	= DATAORIGIN+$0026
  4594 = 2AAB			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4595 = 2AAC			PLAYER3.SCORE	= DATAORIGIN+$0028
  4596 = 2AAD			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4597 = 2AAE			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4598 2A6B			.var PLAYER4	= adr.PLAYER4 .word
  4599 = 2AAE			PLAYER4.X	= DATAORIGIN+$002A
  4600 = 2AAF			PLAYER4.Y	= DATAORIGIN+$002B
  4601 = 2AB0			PLAYER4.HEAD	= DATAORIGIN+$002C
  4602 = 2AB1			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4603 = 2AB2			PLAYER4.DIR	= DATAORIGIN+$002E
  4604 = 2AB3			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4605 = 2AB4			PLAYER4.SCORE	= DATAORIGIN+$0030
  4606 = 2AB5			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4607 = 2AB6			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4608 2A6B			.var OBSTACLES	= adr.OBSTACLES .word
  4609 2A6B			@exit
  4610
  4611 2A6B A2 00		@halt	ldx #$00
  4612 2A6D 9A				txs
  4613
  4614 2A6E 60				rts
  4615
  4616 				; ------------------------------------------------------------
  4617
  4618 				; ------------------------------------------------------------
  4619
  4620 2A6F			.local	@DEFINES
  4621 2A6F			C4P
  4622 				.endl
  4623
  4624 2A6F			.local	@RESOURCE
  4625 				.endl
  4626
  4627 = 2A6F 0E 10		MUL40
  4627 = 2A71 40 10		DIRECTION
  4627 = 2A73 5F 00		PLY
  4627 = 2A75 61 00		TMPPLY
  4627 = 2A77 96 2A		PLAYER1
  4627 = 2A79 9E 2A		PLAYER2
  4627 = 2A7B A6 2A		PLAYER3
  4627 = 2A7D AE 2A		PLAYER4
  4627 = 2A7F B6 2A		OBSTACLES
  4627 				.endl							; MAIN
  4628
  4629 				; ------------------------------------------------------------
  4630 				; ------------------------------------------------------------
  4631
  4632 				.macro	UNITINITIALIZATION
  4633 				
  4634 					.ifdef MAIN.SYSTEM.@UnitInit
  4635 					jsr MAIN.SYSTEM.@UnitInit
  4636 					eif
  4637 				.endm
  4638
  4639 				; ------------------------------------------------------------
  4640
  4641 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4642 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4642 				SYSTEM: $10D5..$1177
  4643 					eif
  4644
  4645 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4645 				CODE: $100E..$2A6E
  4646
  4647 				; ------------------------------------------------------------
  4648
  4649 2A81				.align $04
  4650
  4651 2A84			DATAORIGIN
  4652 2A84 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4653
  4654 = 0006			VARINITSIZE	= *-DATAORIGIN
  4655 = 0063			VARDATASIZE	= 99
  4656
  4657 = 2AE7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4658
  4659 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4659 				DATA: $2A84..$2AE7
  4660
  4661 				; ------------------------------------------------------------
  4662
  4663 				.macro	STATICDATA
  4664 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4665 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4666 				.by  $C0 $03 $01 $02 $04 $08
  4667 				.endm
  4668
  4669 					end
