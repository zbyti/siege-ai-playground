mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10A6
   102
   103 				; ------------------------------------------------------------
   104
   105 10A7			START
   106 10A7 BA				tsx
   107 10A8 8E 77 17			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0036			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 178E			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10AB A2 CA			ldx #256-VLEN
   120 10AD A9 00			lda #$00
   121 10AF 9D C4 16 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10B5 A9 C4 85 02 A9 17 + 	mwa #PROGRAMSTACK psptr
   127
   128 10BD A2 00			ldx #$00
   129 10BF 86 10			stx bp						; BP = 0
   130
   131 10C1 CA				dex						; X = 255
   132
   133 10C2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10C2			.local	MAIN						; PROCEDURE
   136
   137 10C2 4C C4 16			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10C5			.local	SYSTEM						; UNIT
   142
   143 10C5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10C5 B5 18			lda :STACKORIGIN,x
   150 10C7 85 08			sta A
   151 10C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10CB 85 09			sta A+1
   153 10CD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10CE A0 00			ldy #0
   158 10D0 B1 08 8D 93 17		mva (edx),y Result
   159
   160 10D5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10D5 E8				inx
   168 10D6 AD 93 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1793			RESULT	= DATAORIGIN+$000B
   182
   183 = 1793			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10DB 60				rts						; ret
   187 				.endl
   188
   189 10DC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10DC B5 18			lda :STACKORIGIN,x
   196 10DE 85 0C			sta VALUE
   197 10E0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10E1 B5 18			lda :STACKORIGIN,x
   204 10E3 85 08			sta A
   205 10E5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E7 85 09			sta A+1
   207 10E9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10EA A0 00			ldy #0
   212 10EC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10F0			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10F0 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10F1			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10F1 B5 18			lda :STACKORIGIN,x
   238 10F3 85 0C			sta VALUE
   239 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F7 85 0D			sta VALUE+1
   241 10F9 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10FA B5 18			lda :STACKORIGIN,x
   248 10FC 85 08			sta A
   249 10FE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1100 85 09			sta A+1
   251 1102 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1103 A0 00			ldy #0
   256 1105 A5 0C 91 08			mva value (edx),y
   257 1109 C8				iny
   258 110A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 110E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 110E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 110F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 110F 20 4B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1112			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1112 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1113			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1113 AD 94 17		loop  lda n
   307 1116 0D 95 17		  ora n+1
   308 1119 F0 14		  beq stop
   309
   310 111B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1121 AD 94 17 D0 03 CE +   dew n
   313
   314 112C 4C 13 11		  jmp loop
   315 112F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1794			N	= DATAORIGIN+$000C
   321
   322 = 1794			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 112F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 112F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1130			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1130 8D 96 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1133 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1136 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1139 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 113C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 113F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1142 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1145 A8			  tay
   350
   351 1146 AD 96 17		  lda range
   352 1149 F0 08		  beq stop
   353
   354 114B 85 0C		  sta ecx
   355 114D 84 04		  sty eax
   356
   357 114F 20 93 10		  jsr imulCL
   358 1152 A8			  tay
   359
   360 1153 8C 97 17		stop  sty Result
   361
   362 1156			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1156 E8				inx
   370 1157 AD 97 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1796			RANGE	= DATAORIGIN+$000E
   383 = 1797			RESULT	= DATAORIGIN+$000F
   384
   385 = 1796			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 115C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1788			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 178A			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 178C			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 115D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 115D			.var HPALETTE	= adr.HPALETTE .word
   449 = 178D			FILEMODE	= DATAORIGIN+$0005
   450 = 178E			GRAPHMODE	= DATAORIGIN+$0006
   451 = 178F			IORESULT	= DATAORIGIN+$0007
   452 = 1790			EOLN	= DATAORIGIN+$0008
   453 = 1791			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 115D C0 02		PALETTE
   455 = 115F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1161			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 1161 A9 1F			lda #$1F
   462 1163 8D 15 FF			sta BORDERCOLOR
   463 1166 A9 00			lda #$00
   464 1168 8D 19 FF			sta BGCOLOR
   465
   466 				; optimize OK (main.pas), line = 66
   467
   468 116B A9 20			lda #$20
   469 116D 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   470 116F A9 C0			lda #$C0
   471 1171 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   472 1173 A9 03			lda #$03
   473 1175 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   474 1177 A9 00			lda #$00
   475 1179 85 08			sta SYSTEM.FILLCHAR_0056.A
   476 117B A9 0C			lda #$0C
   477 117D 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   478 117F 20 0F 11			jsr SYSTEM.FILLCHAR_0056
   479
   480 				; optimize OK (main.pas), line = 68
   481
   482 1182 A9 27			lda #$27
   483 1184 85 58			sta T0B
   484
   485 1186			l_0089
   486 				; --- ForToDoCondition
   487
   488 				; optimize OK (main.pas), line = 69
   489
   490 1186 A4 58			ldy T0B
   491 1188 A9 A0			lda #$A0
   492 118A 99 00 0C			sta $0C00,y
   493
   494 				; optimize OK (main.pas), line = 70
   495
   496 118D 99 C0 0F			sta $0FC0,y
   497
   498 				; optimize OK (main.pas), line = 71
   499
   500 1190 A9 41			lda #$41
   501 1192 99 00 08			sta $0800,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 1195 99 C0 0B			sta $0BC0,y
   506
   507 				; --- ForToDoEpilog
   508 1198 C6 58			dec T0B
   509 119A 10 EA			jpl l_0089
   510 119C			l_0097
   511
   512 				; optimize OK (main.pas), line = 75
   513
   514 119C A9 18			lda #$18
   515 119E 85 58			sta T0B
   516
   517 11A0			l_00C9
   518 				; --- ForToDoCondition
   519 11A0 A5 58			lda T0B
   520 11A2 C9 01			cmp #$01
   521 11A4 90 3A			jcc l_00D7
   522
   523 				; optimize OK (main.pas), line = 76
   524
   525 11A6 0A				asl @
   526 11A7 A8				tay
   527 11A8 A9 FF			lda #$FF
   528 11AA 18 79 0E 10			add adr.MUL40,y
   529 11AE 85 12			sta :bp2
   530 11B0 A9 0B			lda #$0B
   531 11B2 79 0F 10			adc adr.MUL40+1,y
   532 11B5 85 13			sta :bp2+1
   533 11B7 A0 00			ldy #$00
   534 11B9 A9 A0			lda #$A0
   535 11BB 91 12			sta (:bp2),y
   536 11BD C8				iny
   537 11BE 91 12			sta (:bp2),y
   538
   539 				; optimize OK (main.pas), line = 77
   540
   541 11C0 A5 58			lda T0B
   542 11C2 0A				asl @
   543 11C3 A8				tay
   544 11C4 A9 FF			lda #$FF
   545 11C6 18 79 0E 10			add adr.MUL40,y
   546 11CA 85 12			sta :bp2
   547 11CC A9 07			lda #$07
   548 11CE 79 0F 10			adc adr.MUL40+1,y
   549 11D1 85 13			sta :bp2+1
   550 11D3 A0 00			ldy #$00
   551 11D5 A9 41			lda #$41
   552 11D7 91 12			sta (:bp2),y
   553 11D9 C8				iny
   554 11DA 91 12			sta (:bp2),y
   555
   556 				; --- ForToDoEpilog
   557 11DC C6 58			dec T0B
   558 11DE 10 C0			jpl l_00C9
   559 11E0			l_00D7
   560
   561 				; ------------------------------------------------------------
   562
   563 = 0000			@FORTMP_0086	= $00
   564 = 0001			@FORTMP_00C6	= $01
   565 11E0			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 11E0 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 11E1			.local	INITPLAYERS					; PROCEDURE
   578
   579 				; optimize OK (main.pas), line = 83
   580
   581 11E1 A9 01			lda #$01
   582 11E3 8D A2 17			sta PLAYER1.BRAIN
   583 11E6 A9 0A			lda #$0A
   584 11E8 8D 9D 17			sta PLAYER1.X
   585 11EB 8D 9E 17			sta PLAYER1.Y
   586 11EE A9 51			lda #$51
   587 11F0 8D 9F 17			sta PLAYER1.HEAD
   588
   589 				; optimize OK (main.pas), line = 84
   590
   591 11F3 A9 5F			lda #$5F
   592 11F5 8D A0 17			sta PLAYER1.COLOUR
   593 11F8 A9 00			lda #$00
   594 11FA 8D A3 17			sta PLAYER1.ISDEAD
   595 11FD A9 08			lda #$08
   596 11FF 8D A1 17			sta PLAYER1.DIR
   597
   598 				; optimize OK (main.pas), line = 86
   599
   600 1202 A9 01			lda #$01
   601 1204 8D A9 17			sta PLAYER2.BRAIN
   602 1207 A9 1E			lda #$1E
   603 1209 8D A4 17			sta PLAYER2.X
   604 120C A9 0A			lda #$0A
   605 120E 8D A5 17			sta PLAYER2.Y
   606 1211 A9 51			lda #$51
   607 1213 8D A6 17			sta PLAYER2.HEAD
   608
   609 				; optimize OK (main.pas), line = 87
   610
   611 1216 A9 5D			lda #$5D
   612 1218 8D A7 17			sta PLAYER2.COLOUR
   613 121B A9 00			lda #$00
   614 121D 8D AA 17			sta PLAYER2.ISDEAD
   615 1220 A9 04			lda #$04
   616 1222 8D A8 17			sta PLAYER2.DIR
   617
   618 				; optimize OK (main.pas), line = 89
   619
   620 1225 A9 01			lda #$01
   621 1227 8D B0 17			sta PLAYER3.BRAIN
   622 122A A9 14			lda #$14
   623 122C 8D AB 17			sta PLAYER3.X
   624 122F A9 06			lda #$06
   625 1231 8D AC 17			sta PLAYER3.Y
   626 1234 A9 51			lda #$51
   627 1236 8D AD 17			sta PLAYER3.HEAD
   628
   629 				; optimize OK (main.pas), line = 90
   630
   631 1239 A9 71			lda #$71
   632 123B 8D AE 17			sta PLAYER3.COLOUR
   633 123E A9 00			lda #$00
   634 1240 8D B1 17			sta PLAYER3.ISDEAD
   635 1243 A9 02			lda #$02
   636 1245 8D AF 17			sta PLAYER3.DIR
   637
   638 				; optimize OK (main.pas), line = 92
   639
   640 1248 A9 01			lda #$01
   641 124A 8D B7 17			sta PLAYER4.BRAIN
   642 124D A9 14			lda #$14
   643 124F 8D B2 17			sta PLAYER4.X
   644 1252 A9 12			lda #$12
   645 1254 8D B3 17			sta PLAYER4.Y
   646 1257 A9 51			lda #$51
   647 1259 8D B4 17			sta PLAYER4.HEAD
   648
   649 				; optimize OK (main.pas), line = 93
   650
   651 125C A9 55			lda #$55
   652 125E 8D B5 17			sta PLAYER4.COLOUR
   653 1261 A9 00			lda #$00
   654 1263 8D B8 17			sta PLAYER4.ISDEAD
   655 1266 A9 01			lda #$01
   656 1268 8D B6 17			sta PLAYER4.DIR
   657 126B			@exit
   658 					.ifdef @new
   659 					lda <@VarData
   660 					sta :ztmp
   661 					lda >@VarData
   662 					ldy #@VarDataSize-1
   663 					jmp @FreeMem
   664 					els
   665 126B 60				rts						; ret
   666 					eif
   667 				.endl
   668
   669 126C			.local	PUTCHAR						; PROCEDURE
   670
   671 				; optimize OK (main.pas), line = 100
   672
   673 126C AD BA 17			lda Y
   674 126F 0A				asl @
   675 1270 A8				tay
   676 1271 B9 0E 10			lda adr.MUL40,y
   677 1274 18 6D B9 17			add X
   678 1278 85 5B			sta T0W
   679 127A B9 0F 10			lda adr.MUL40+1,y
   680 127D 69 08			adc #$08
   681 127F 85 5C			sta T0W+1
   682
   683 				; optimize OK (main.pas), line = 101
   684
   685 1281 85 11			sta :bp+1
   686 1283 A4 5B			ldy T0W
   687 1285 AD BC 17			lda C
   688 1288 91 10			sta (:bp),y
   689 128A A5 5C			lda T0W+1
   690 128C 18 69 04			add #$04
   691 128F 85 11			sta :bp+1
   692 1291 AD BB 17			lda V
   693 1294 91 10			sta (:bp),y
   694
   695 				; ------------------------------------------------------------
   696
   697 = 17B9			X	= DATAORIGIN+$0031
   698 = 17BA			Y	= DATAORIGIN+$0032
   699 = 17BB			V	= DATAORIGIN+$0033
   700 = 17BC			C	= DATAORIGIN+$0034
   701
   702 = 17B9			@VarData	= X
   703 = 0004			@VarDataSize	= 4
   704
   705 1296			@exit
   706 					.ifdef @new
   707 					lda <@VarData
   708 					sta :ztmp
   709 					lda >@VarData
   710 					ldy #@VarDataSize-1
   711 					jmp @FreeMem
   712 					els
   713 1296 60				rts						; ret
   714 					eif
   715 				.endl
   716
   717 1297			.local	CHECKAVAILDIR					; PROCEDURE
   718
   719 				; optimize OK (main.pas), line = 106
   720
   721 1297 A9 00			lda #$00
   722 1299 8D 99 17			sta AVAILDIR
   723
   724 				; optimize OK (main.pas), line = 107
   725
   726 129C AD BE 17			lda Y
   727 129F 0A				asl @
   728 12A0 A8				tay
   729 12A1 B9 0E 10			lda adr.MUL40,y
   730 12A4 18 6D BD 17			add X
   731 12A8 85 5B			sta T0W
   732 12AA B9 0F 10			lda adr.MUL40+1,y
   733 12AD 69 0C			adc #$0C
   734 12AF 85 5C			sta T0W+1
   735
   736 				; optimize OK (main.pas), line = 109
   737
   738 12B1 A5 5B			lda T0W
   739 12B3 38 E9 28			sub #$28
   740 12B6 85 21			sta :STACKORIGIN+9
   741 12B8 A5 5C			lda T0W+1
   742 12BA E9 00			sbc #$00
   743 12BC 85 11			sta :bp+1
   744 12BE A4 21			ldy :STACKORIGIN+9
   745 12C0 B1 10			lda (:bp),y
   746 12C2 C9 20			cmp #$20
   747 12C4 D0 08			jne l_01BC
   748 12C6 AD 99 17			lda AVAILDIR
   749 12C9 09 01			ora #$01
   750 12CB 8D 99 17			sta AVAILDIR
   751 12CE			l_01BC
   752
   753 				; optimize OK (main.pas), line = 110
   754
   755 12CE A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   756 12D6 A0 28			ldy #$28
   757 12D8 B1 12			lda (:bp2),y
   758 12DA C9 20			cmp #$20
   759 12DC D0 08			jne l_01DF
   760 12DE AD 99 17			lda AVAILDIR
   761 12E1 09 02			ora #$02
   762 12E3 8D 99 17			sta AVAILDIR
   763 12E6			l_01DF
   764
   765 				; optimize OK (main.pas), line = 111
   766
   767 12E6 A5 5B			lda T0W
   768 12E8 38 E9 01			sub #$01
   769 12EB 85 21			sta :STACKORIGIN+9
   770 12ED A5 5C			lda T0W+1
   771 12EF E9 00			sbc #$00
   772 12F1 85 11			sta :bp+1
   773 12F3 A4 21			ldy :STACKORIGIN+9
   774 12F5 B1 10			lda (:bp),y
   775 12F7 C9 20			cmp #$20
   776 12F9 D0 08			jne l_0202
   777 12FB AD 99 17			lda AVAILDIR
   778 12FE 09 04			ora #$04
   779 1300 8D 99 17			sta AVAILDIR
   780 1303			l_0202
   781
   782 				; optimize OK (main.pas), line = 112
   783
   784 1303 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   785 130B A0 01			ldy #$01
   786 130D B1 12			lda (:bp2),y
   787 130F C9 20			cmp #$20
   788 1311 D0 08			jne l_0225
   789 1313 AD 99 17			lda AVAILDIR
   790 1316 09 08			ora #$08
   791 1318 8D 99 17			sta AVAILDIR
   792 131B			l_0225
   793
   794 				; ------------------------------------------------------------
   795
   796 = 17BD			X	= DATAORIGIN+$0035
   797 = 17BE			Y	= DATAORIGIN+$0036
   798
   799 = 17BD			@VarData	= X
   800 = 0002			@VarDataSize	= 2
   801
   802 131B			@exit
   803 					.ifdef @new
   804 					lda <@VarData
   805 					sta :ztmp
   806 					lda >@VarData
   807 					ldy #@VarDataSize-1
   808 					jmp @FreeMem
   809 					els
   810 131B 60				rts						; ret
   811 					eif
   812 				.endl
   813
   814 131C			.local	HUMAN						; PROCEDURE
   815
   816 				; optimize OK (main.pas), line = 120
   817
   818 131C AC 9B 17 84 12 AC + 	mwy PLY :bp2
   819 1326 A0 04			ldy #PLY.DIR-DATAORIGIN
   820 1328 B1 12			lda (:bp2),y
   821 132A 85 59			sta NEWDIR
   822
   823 				; optimize OK (main.pas), line = 121
   824
   825 132C A9 02			lda #$02
   826 132E 8D 08 FF			sta JOY
   827 1331 A9 FF			lda #$FF
   828 1333 8D 30 FD			sta KEY_PIO
   829 1336 AD 08 FF			lda JOY
   830 1339 49 FF			eor #$FF
   831 133B 85 58			sta T0B
   832
   833 				; optimize OK (main.pas), line = 123
   834
   835 133D 8D BF 17			sta @CASETMP_0003
   836 1340 C9 01			cmp #$01
   837 1342 D0 07			jne l_0259
   838 1344			@
   839
   840 				; optimize OK (main.pas), line = 124
   841
   842 1344 A5 58			lda T0B
   843 1346 85 59			sta NEWDIR
   844
   845 1348 4C 69 13			jmp a_0003
   846 134B			l_0259
   847 134B C9 02			cmp #$02
   848 134D D0 07			jne l_0268
   849 134F			@
   850
   851 				; optimize OK (main.pas), line = 125
   852
   853 134F A5 58			lda T0B
   854 1351 85 59			sta NEWDIR
   855
   856 1353 4C 69 13			jmp a_0003
   857 1356			l_0268
   858 1356 C9 04			cmp #$04
   859 1358 D0 07			jne l_0277
   860 135A			@
   861
   862 				; optimize OK (main.pas), line = 126
   863
   864 135A A5 58			lda T0B
   865 135C 85 59			sta NEWDIR
   866
   867 135E 4C 69 13			jmp a_0003
   868 1361			l_0277
   869 1361 C9 08			cmp #$08
   870 1363 D0 04			jne l_0286
   871 1365			@
   872
   873 				; optimize OK (main.pas), line = 127
   874
   875 1365 A5 58			lda T0B
   876 1367 85 59			sta NEWDIR
   877
   878 1369			l_0286
   879 1369			a_0003
   880
   881 				; optimize OK (main.pas), line = 130
   882
   883 1369 A5 59			lda NEWDIR
   884 136B 2D 99 17			and AVAILDIR
   885 136E D0 1B			jne l_02AC
   886
   887 				; optimize OK (main.pas), line = 131
   888
   889 1370 AC 9B 17 84 12 AC + 	mwy PLY :bp2
   890 137A A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   891 137C A9 01			lda #$01
   892 137E 91 12			sta (:bp2),y
   893 1380 A9 00			lda #$00
   894 1382 8D 9A 17			sta ALIVE
   895 1385 A0 02			ldy #PLY.HEAD-DATAORIGIN
   896 1387 A9 57			lda #$57
   897 1389 91 12			sta (:bp2),y
   898 138B			l_02AC
   899
   900 				; ------------------------------------------------------------
   901
   902 = 17BF			@CASETMP_0003	= DATAORIGIN+$0037
   903
   904 = 17BF			@VarData	= @CASETMP_0003
   905 = 0001			@VarDataSize	= 1
   906
   907 138B			@exit
   908 					.ifdef @new
   909 					lda <@VarData
   910 					sta :ztmp
   911 					lda >@VarData
   912 					ldy #@VarDataSize-1
   913 					jmp @FreeMem
   914 					els
   915 138B 60				rts						; ret
   916 					eif
   917 				.endl
   918
   919 138C			.local	AI_SIMPLERANDOM					; PROCEDURE
   920
   921 				; optimize OK (main.pas), line = 138
   922
   923 138C A9 00			lda #$00
   924 138E 85 5A			sta T0N
   925
   926 				; --- RepeatUntilProlog
   927 1390			l_02C4
   928
   929 				; optimize FAIL (0, main.pas), line = 140
   930
   931 1390 A9 04			lda #$04
   932 1392 20 30 11			jsr SYSTEM.RANDOM_006C
   933 1395 B4 18			ldy :STACKORIGIN,x
   934 1397 B9 40 10			lda adr.DIRECTION,y
   935 139A 85 59			sta NEWDIR
   936 139C CA				dex
   937
   938 				; optimize OK (main.pas), line = 141
   939
   940 139D AD 99 17			lda AVAILDIR
   941 13A0 25 59			and NEWDIR
   942 13A2 F0 04			jeq l_02E4
   943 13A4 A9 01			lda #$01
   944 13A6 85 5A			sta T0N
   945 13A8			l_02E4
   946
   947 				; optimize OK (main.pas), line = 142
   948
   949 13A8 A5 5A			lda T0N
   950 13AA F0 E4			jeq l_02C4
   951 13AC			@exit
   952 					.ifdef @new
   953 					lda <@VarData
   954 					sta :ztmp
   955 					lda >@VarData
   956 					ldy #@VarDataSize-1
   957 					jmp @FreeMem
   958 					els
   959 13AC 60				rts						; ret
   960 					eif
   961 				.endl
   962
   963 13AD			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   964
   965 				; optimize OK (main.pas), line = 148
   966
   967 13AD AC 9B 17 84 12 AC + 	mwy PLY :bp2
   968 13B7 A0 04			ldy #PLY.DIR-DATAORIGIN
   969 13B9 B1 12			lda (:bp2),y
   970 13BB 2D 99 17			and AVAILDIR
   971 13BE F0 07			jeq l_030E
   972 13C0 B1 12			lda (:bp2),y
   973 13C2 85 59			sta NEWDIR
   974 13C4 4C E7 13			jmp l_031E
   975 13C7			l_030E
   976
   977 				; optimize OK (main.pas), line = 150
   978
   979 13C7 A9 00			lda #$00
   980 13C9 85 5A			sta T0N
   981
   982 				; --- RepeatUntilProlog
   983 13CB			l_0323
   984
   985 				; optimize FAIL (0, main.pas), line = 152
   986
   987 13CB A9 04			lda #$04
   988 13CD 20 30 11			jsr SYSTEM.RANDOM_006C
   989 13D0 B4 18			ldy :STACKORIGIN,x
   990 13D2 B9 40 10			lda adr.DIRECTION,y
   991 13D5 85 59			sta NEWDIR
   992 13D7 CA				dex
   993
   994 				; optimize OK (main.pas), line = 153
   995
   996 13D8 AD 99 17			lda AVAILDIR
   997 13DB 25 59			and NEWDIR
   998 13DD F0 04			jeq l_0343
   999 13DF A9 01			lda #$01
  1000 13E1 85 5A			sta T0N
  1001 13E3			l_0343
  1002
  1003 				; optimize OK (main.pas), line = 154
  1004
  1005 13E3 A5 5A			lda T0N
  1006 13E5 F0 E4			jeq l_0323
  1007 13E7			l_031E
  1008 13E7			@exit
  1009 					.ifdef @new
  1010 					lda <@VarData
  1011 					sta :ztmp
  1012 					lda >@VarData
  1013 					ldy #@VarDataSize-1
  1014 					jmp @FreeMem
  1015 					els
  1016 13E7 60				rts						; ret
  1017 					eif
  1018 				.endl
  1019
  1020 13E8			.local	AI_SWINGER					; PROCEDURE
  1021
  1022 				; optimize FAIL (1, main.pas), line = 161
  1023
  1024 13E8 E8				inx
  1025 13E9 AD 99 17 95 18		mva AVAILDIR :STACKORIGIN,x
  1026 13EE E8				inx
  1027 13EF AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1028 13F9 A0 04			ldy #PLY.DIR-DATAORIGIN
  1029 13FB B1 12 95 18			mva (:bp2),y :STACKORIGIN,x
  1030 13FF 20 44 10			jsr andAL_CL
  1031 1402 A0 01			ldy #1
  1032 1404 B5 17			lda :STACKORIGIN-1,x
  1033 1406 D0 01			bne @+
  1034 1408 88				dey
  1035 1409			@
  1036 1409 94 17			sty :STACKORIGIN-1,x
  1037 140B CA				dex
  1038 140C A9 03			lda #$03
  1039 140E 20 30 11			jsr SYSTEM.RANDOM_006C
  1040 1411 CA				dex
  1041 1412 A0 01			ldy #1
  1042 1414 B5 19			lda :STACKORIGIN+1,x
  1043 1416 F0 01			beq @+
  1044 1418 88				dey
  1045 1419			@
  1046 1419 CA				dex
  1047 141A 98				tya
  1048 141B 35 19			and :STACKORIGIN+1,x
  1049 141D F0 13			jeq l_0378
  1050 141F AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1051 1429 A0 04			ldy #PLY.DIR-DATAORIGIN
  1052 142B B1 12			lda (:bp2),y
  1053 142D 85 59			sta NEWDIR
  1054 142F 4C 52 14			jmp l_0388
  1055 1432			l_0378
  1056
  1057 				; optimize OK (main.pas), line = 163
  1058
  1059 1432 A9 00			lda #$00
  1060 1434 85 5A			sta T0N
  1061
  1062 				; --- RepeatUntilProlog
  1063 1436			l_038D
  1064
  1065 				; optimize FAIL (0, main.pas), line = 165
  1066
  1067 1436 A9 04			lda #$04
  1068 1438 20 30 11			jsr SYSTEM.RANDOM_006C
  1069 143B B4 18			ldy :STACKORIGIN,x
  1070 143D B9 40 10			lda adr.DIRECTION,y
  1071 1440 85 59			sta NEWDIR
  1072 1442 CA				dex
  1073
  1074 				; optimize OK (main.pas), line = 166
  1075
  1076 1443 AD 99 17			lda AVAILDIR
  1077 1446 25 59			and NEWDIR
  1078 1448 F0 04			jeq l_03AD
  1079 144A A9 01			lda #$01
  1080 144C 85 5A			sta T0N
  1081 144E			l_03AD
  1082
  1083 				; optimize OK (main.pas), line = 167
  1084
  1085 144E A5 5A			lda T0N
  1086 1450 F0 E4			jeq l_038D
  1087 1452			l_0388
  1088 1452			@exit
  1089 					.ifdef @new
  1090 					lda <@VarData
  1091 					sta :ztmp
  1092 					lda >@VarData
  1093 					ldy #@VarDataSize-1
  1094 					jmp @FreeMem
  1095 					els
  1096 1452 60				rts						; ret
  1097 					eif
  1098 				.endl
  1099
  1100 1453			.local	AI_SLOWSWINGER					; PROCEDURE
  1101
  1102 				; optimize FAIL (1, main.pas), line = 174
  1103
  1104 1453 E8				inx
  1105 1454 AD 99 17 95 18		mva AVAILDIR :STACKORIGIN,x
  1106 1459 E8				inx
  1107 145A AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1108 1464 A0 04			ldy #PLY.DIR-DATAORIGIN
  1109 1466 B1 12 95 18			mva (:bp2),y :STACKORIGIN,x
  1110 146A 20 44 10			jsr andAL_CL
  1111 146D A0 01			ldy #1
  1112 146F B5 17			lda :STACKORIGIN-1,x
  1113 1471 D0 01			bne @+
  1114 1473 88				dey
  1115 1474			@
  1116 1474 94 17			sty :STACKORIGIN-1,x
  1117 1476 CA				dex
  1118 1477 A9 20			lda #$20
  1119 1479 20 30 11			jsr SYSTEM.RANDOM_006C
  1120 147C CA				dex
  1121 147D A0 01			ldy #1
  1122 147F B5 19			lda :STACKORIGIN+1,x
  1123 1481 F0 01			beq @+
  1124 1483 88				dey
  1125 1484			@
  1126 1484 CA				dex
  1127 1485 98				tya
  1128 1486 35 19			and :STACKORIGIN+1,x
  1129 1488 F0 13			jeq l_03E2
  1130 148A AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1131 1494 A0 04			ldy #PLY.DIR-DATAORIGIN
  1132 1496 B1 12			lda (:bp2),y
  1133 1498 85 59			sta NEWDIR
  1134 149A 4C BD 14			jmp l_03F2
  1135 149D			l_03E2
  1136
  1137 				; optimize OK (main.pas), line = 176
  1138
  1139 149D A9 00			lda #$00
  1140 149F 85 5A			sta T0N
  1141
  1142 				; --- RepeatUntilProlog
  1143 14A1			l_03F7
  1144
  1145 				; optimize FAIL (0, main.pas), line = 178
  1146
  1147 14A1 A9 04			lda #$04
  1148 14A3 20 30 11			jsr SYSTEM.RANDOM_006C
  1149 14A6 B4 18			ldy :STACKORIGIN,x
  1150 14A8 B9 40 10			lda adr.DIRECTION,y
  1151 14AB 85 59			sta NEWDIR
  1152 14AD CA				dex
  1153
  1154 				; optimize OK (main.pas), line = 179
  1155
  1156 14AE AD 99 17			lda AVAILDIR
  1157 14B1 25 59			and NEWDIR
  1158 14B3 F0 04			jeq l_0417
  1159 14B5 A9 01			lda #$01
  1160 14B7 85 5A			sta T0N
  1161 14B9			l_0417
  1162
  1163 				; optimize OK (main.pas), line = 180
  1164
  1165 14B9 A5 5A			lda T0N
  1166 14BB F0 E4			jeq l_03F7
  1167 14BD			l_03F2
  1168 14BD			@exit
  1169 					.ifdef @new
  1170 					lda <@VarData
  1171 					sta :ztmp
  1172 					lda >@VarData
  1173 					ldy #@VarDataSize-1
  1174 					jmp @FreeMem
  1175 					els
  1176 14BD 60				rts						; ret
  1177 					eif
  1178 				.endl
  1179
  1180 14BE			.local	PLAYERMOVE					; PROCEDURE
  1181
  1182 				; optimize OK (main.pas), line = 188
  1183
  1184 14BE AD C0 17			lda P
  1185 14C1 8D 9B 17			sta PLY
  1186 14C4 85 12			sta :bp2
  1187 14C6 AD C1 17			lda P+1
  1188 14C9 8D 9C 17			sta PLY+1
  1189 14CC 85 13			sta :bp2+1
  1190 				; optimize OK (main.pas), line = 190
  1191 14CE A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1192 14D0 B1 12			lda (:bp2),y
  1193 14D2 F0 03 4C C3 16		jne l_043D
  1194
  1195 				; optimize OK (main.pas), line = 192
  1196
  1197 14D7 A0 00			ldy #PLY.X-DATAORIGIN
  1198 14D9 B1 12			lda (:bp2),y
  1199 14DB 8D BD 17			sta CHECKAVAILDIR.X
  1200 14DE A0 01			ldy #PLY.Y-DATAORIGIN
  1201 14E0 B1 12			lda (:bp2),y
  1202 14E2 8D BE 17			sta CHECKAVAILDIR.Y
  1203 14E5 20 97 12			jsr CHECKAVAILDIR
  1204
  1205 				; optimize OK (main.pas), line = 194
  1206
  1207 14E8 AD 99 17			lda AVAILDIR
  1208 14EB D0 36			jne l_0457
  1209
  1210 				; optimize OK (main.pas), line = 195
  1211
  1212 14ED AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1213 14F7 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1214 14F9 A9 01			lda #$01
  1215 14FB 91 12			sta (:bp2),y
  1216 14FD CE 9A 17			dec ALIVE
  1217
  1218 				; optimize OK (main.pas), line = 196
  1219
  1220 1500 A0 00			ldy #PLY.X-DATAORIGIN
  1221 1502 B1 12			lda (:bp2),y
  1222 1504 8D B9 17			sta PUTCHAR.X
  1223 1507 A0 01			ldy #PLY.Y-DATAORIGIN
  1224 1509 B1 12			lda (:bp2),y
  1225 150B 8D BA 17			sta PUTCHAR.Y
  1226 150E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1227 1510 B1 12			lda (:bp2),y
  1228 1512 18 69 80			add #$80
  1229 1515 8D BC 17			sta PUTCHAR.C
  1230 1518 A9 57			lda #$57
  1231 151A 8D BB 17			sta PUTCHAR.V
  1232 151D 20 6C 12			jsr PUTCHAR
  1233 1520 4C C3 16			jmp l_0478
  1234 1523			l_0457
  1235
  1236 				; optimize OK (main.pas), line = 199
  1237
  1238 1523 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1239 152D A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1240 152F B1 12			lda (:bp2),y
  1241 1531 8D C2 17			sta @CASETMP_0004
  1242 1534 C9 00			cmp #$00
  1243 1536 D0 06			jne l_0483
  1244 1538			@
  1245
  1246 				; optimize FAIL ('HUMAN', main.pas), line = 200
  1247
  1248 1538 20 1C 13			jsr HUMAN
  1249 153B 4C 63 15			jmp a_0004
  1250 153E			l_0483
  1251 153E C9 01			cmp #$01
  1252 1540 D0 06			jne l_048D
  1253 1542			@
  1254
  1255 				; optimize FAIL ('AI_SIMPLERANDOM', main.pas), line = 201
  1256
  1257 1542 20 8C 13			jsr AI_SIMPLERANDOM
  1258 1545 4C 63 15			jmp a_0004
  1259 1548			l_048D
  1260 1548 C9 02			cmp #$02
  1261 154A D0 06			jne l_0497
  1262 154C			@
  1263
  1264 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 202
  1265
  1266 154C 20 AD 13			jsr AI_STRAIGHTFORWARD
  1267 154F 4C 63 15			jmp a_0004
  1268 1552			l_0497
  1269 1552 C9 03			cmp #$03
  1270 1554 D0 06			jne l_04A1
  1271 1556			@
  1272
  1273 				; optimize FAIL ('AI_SWINGER', main.pas), line = 203
  1274
  1275 1556 20 E8 13			jsr AI_SWINGER
  1276 1559 4C 63 15			jmp a_0004
  1277 155C			l_04A1
  1278 155C C9 04			cmp #$04
  1279 155E D0 03			jne l_04AB
  1280 1560			@
  1281
  1282 				; optimize FAIL ('AI_SLOWSWINGER', main.pas), line = 204
  1283
  1284 1560 20 53 14			jsr AI_SLOWSWINGER
  1285 1563			l_04AB
  1286 1563			a_0004
  1287
  1288 				; optimize OK (main.pas), line = 207
  1289
  1290 1563 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1291 156D A0 04			ldy #PLY.DIR-DATAORIGIN
  1292 156F B1 12			lda (:bp2),y
  1293 1571 C5 59			cmp NEWDIR
  1294 1573 D0 14			jne l_04C9
  1295
  1296 				; optimize OK (main.pas), line = 208
  1297
  1298 1575 A5 59			lda NEWDIR
  1299 1577 29 0C			and #$0C
  1300 1579 F0 07			jeq l_04E0
  1301 157B A9 40			lda #$40
  1302 157D 85 58			sta T0B
  1303 157F 4C 86 15			jmp l_04EE
  1304 1582			l_04E0
  1305 1582 A9 42			lda #$42
  1306 1584 85 58			sta T0B
  1307 1586			l_04EE
  1308 1586 4C F9 15			jmp l_04FB
  1309 1589			l_04C9
  1310
  1311 				; optimize OK (main.pas), line = 210
  1312
  1313 1589 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1314 1593 A0 04			ldy #PLY.DIR-DATAORIGIN
  1315 1595 B1 12			lda (:bp2),y
  1316 1597 29 0A			and #$0A
  1317 1599 F0 0A			jeq l_0521
  1318 159B A5 59			lda NEWDIR
  1319 159D 29 05			and #$05
  1320 159F F0 04			jeq l_0521
  1321 15A1 A9 7D			lda #$7D
  1322 15A3 85 58			sta T0B
  1323 15A5			l_0521
  1324
  1325 				; optimize OK (main.pas), line = 211
  1326
  1327 15A5 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1328 15AF A0 04			ldy #PLY.DIR-DATAORIGIN
  1329 15B1 B1 12			lda (:bp2),y
  1330 15B3 29 09			and #$09
  1331 15B5 F0 0A			jeq l_054E
  1332 15B7 A5 59			lda NEWDIR
  1333 15B9 29 06			and #$06
  1334 15BB F0 04			jeq l_054E
  1335 15BD A9 6E			lda #$6E
  1336 15BF 85 58			sta T0B
  1337 15C1			l_054E
  1338
  1339 				; optimize OK (main.pas), line = 212
  1340
  1341 15C1 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1342 15CB A0 04			ldy #PLY.DIR-DATAORIGIN
  1343 15CD B1 12			lda (:bp2),y
  1344 15CF 29 06			and #$06
  1345 15D1 F0 0A			jeq l_057B
  1346 15D3 A5 59			lda NEWDIR
  1347 15D5 29 09			and #$09
  1348 15D7 F0 04			jeq l_057B
  1349 15D9 A9 6D			lda #$6D
  1350 15DB 85 58			sta T0B
  1351 15DD			l_057B
  1352
  1353 				; optimize OK (main.pas), line = 213
  1354
  1355 15DD AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1356 15E7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1357 15E9 B1 12			lda (:bp2),y
  1358 15EB 29 05			and #$05
  1359 15ED F0 0A			jeq l_05A8
  1360 15EF A5 59			lda NEWDIR
  1361 15F1 29 0A			and #$0A
  1362 15F3 F0 04			jeq l_05A8
  1363 15F5 A9 70			lda #$70
  1364 15F7 85 58			sta T0B
  1365 15F9			l_05A8
  1366 15F9			l_04FB
  1367
  1368 				; optimize OK (main.pas), line = 215
  1369
  1370 15F9 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1371 1603 A0 00			ldy #PLY.X-DATAORIGIN
  1372 1605 B1 12			lda (:bp2),y
  1373 1607 8D B9 17			sta PUTCHAR.X
  1374 160A A0 01			ldy #PLY.Y-DATAORIGIN
  1375 160C B1 12			lda (:bp2),y
  1376 160E 8D BA 17			sta PUTCHAR.Y
  1377 1611 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1378 1613 B1 12			lda (:bp2),y
  1379 1615 8D BC 17			sta PUTCHAR.C
  1380 1618 A5 58			lda T0B
  1381 161A 8D BB 17			sta PUTCHAR.V
  1382 161D 20 6C 12			jsr PUTCHAR
  1383
  1384 				; optimize OK (main.pas), line = 217
  1385
  1386 1620 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1387 162A A0 04			ldy #PLY.DIR-DATAORIGIN
  1388 162C A5 59			lda NEWDIR
  1389 162E 91 12			sta (:bp2),y
  1390
  1391 				; optimize OK (main.pas), line = 219
  1392
  1393 1630 A5 59			lda NEWDIR
  1394 1632 8D C3 17			sta @CASETMP_0005
  1395 1635 C9 01			cmp #$01
  1396 1637 D0 16			jne l_05CD
  1397 1639			@
  1398
  1399 				; optimize OK (main.pas), line = 220
  1400
  1401 1639 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1402 1643 A0 01			ldy #PLY.Y-DATAORIGIN
  1403 1645 B1 12			lda (:bp2),y
  1404 1647 38 E9 01			sub #$01
  1405 164A 91 12			sta (:bp2),y
  1406
  1407 164C 4C 9A 16			jmp a_0005
  1408 164F			l_05CD
  1409 164F C9 02			cmp #$02
  1410 1651 D0 16			jne l_05D7
  1411 1653			@
  1412
  1413 				; optimize OK (main.pas), line = 221
  1414
  1415 1653 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1416 165D A0 01			ldy #PLY.Y-DATAORIGIN
  1417 165F B1 12			lda (:bp2),y
  1418 1661 18 69 01			add #$01
  1419 1664 91 12			sta (:bp2),y
  1420
  1421 1666 4C 9A 16			jmp a_0005
  1422 1669			l_05D7
  1423 1669 C9 04			cmp #$04
  1424 166B D0 16			jne l_05E1
  1425 166D			@
  1426
  1427 				; optimize OK (main.pas), line = 222
  1428
  1429 166D AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1430 1677 A0 00			ldy #PLY.X-DATAORIGIN
  1431 1679 B1 12			lda (:bp2),y
  1432 167B 38 E9 01			sub #$01
  1433 167E 91 12			sta (:bp2),y
  1434
  1435 1680 4C 9A 16			jmp a_0005
  1436 1683			l_05E1
  1437 1683 C9 08			cmp #$08
  1438 1685 D0 13			jne l_05EB
  1439 1687			@
  1440
  1441 				; optimize OK (main.pas), line = 223
  1442
  1443 1687 AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1444 1691 A0 00			ldy #PLY.X-DATAORIGIN
  1445 1693 B1 12			lda (:bp2),y
  1446 1695 18 69 01			add #$01
  1447 1698 91 12			sta (:bp2),y
  1448
  1449 169A			l_05EB
  1450 169A			a_0005
  1451
  1452 				; optimize OK (main.pas), line = 226
  1453
  1454 169A AC 9B 17 84 12 AC + 	mwy PLY :bp2
  1455 16A4 A0 00			ldy #PLY.X-DATAORIGIN
  1456 16A6 B1 12			lda (:bp2),y
  1457 16A8 8D B9 17			sta PUTCHAR.X
  1458 16AB A0 01			ldy #PLY.Y-DATAORIGIN
  1459 16AD B1 12			lda (:bp2),y
  1460 16AF 8D BA 17			sta PUTCHAR.Y
  1461 16B2 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1462 16B4 B1 12			lda (:bp2),y
  1463 16B6 8D BB 17			sta PUTCHAR.V
  1464 16B9 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1465 16BB B1 12			lda (:bp2),y
  1466 16BD 8D BC 17			sta PUTCHAR.C
  1467 16C0 20 6C 12			jsr PUTCHAR
  1468 16C3			l_0478
  1469 16C3			l_043D
  1470
  1471 				; ------------------------------------------------------------
  1472
  1473 = 17C0			P	= DATAORIGIN+$0038
  1474 = 17C2			@CASETMP_0004	= DATAORIGIN+$003A
  1475 = 17C3			@CASETMP_0005	= DATAORIGIN+$003B
  1476
  1477 = 17C0			@VarData	= P
  1478 = 0004			@VarDataSize	= 4
  1479
  1480 16C3			@exit
  1481 					.ifdef @new
  1482 					lda <@VarData
  1483 					sta :ztmp
  1484 					lda >@VarData
  1485 					ldy #@VarDataSize-1
  1486 					jmp @FreeMem
  1487 					els
  1488 16C3 60				rts						; ret
  1489 					eif
  1490 				.endl
  1491 16C4			l_0007
  1492
  1493 				; optimize OK (main.pas), line = 237
  1494
  1495 16C4 A9 00			lda #$00
  1496 16C6 8D 98 17			sta GAMEOVER
  1497
  1498 				; --- RepeatUntilProlog
  1499 16C9			l_0609
  1500
  1501 				; optimize OK (main.pas), line = 240
  1502
  1503 16C9 A9 03			lda #$03
  1504 16CB 8D 9A 17			sta ALIVE
  1505
  1506 				; optimize FAIL ('INITPLAYERS', main.pas), line = 241
  1507
  1508 16CE 20 E1 11			jsr INITPLAYERS
  1509
  1510 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 242
  1511
  1512 16D1 20 61 11			jsr INITPLAYFIELD
  1513
  1514 				; optimize OK (main.pas), line = 244
  1515
  1516 16D4 A9 03			lda #$03
  1517 16D6 8D A2 17			sta PLAYER1.BRAIN
  1518
  1519 				; optimize OK (main.pas), line = 245
  1520
  1521 16D9 A9 01			lda #$01
  1522 16DB 8D A9 17			sta PLAYER2.BRAIN
  1523
  1524 				; optimize OK (main.pas), line = 246
  1525
  1526 16DE A9 02			lda #$02
  1527 16E0 8D B0 17			sta PLAYER3.BRAIN
  1528
  1529 				; optimize OK (main.pas), line = 247
  1530
  1531 16E3 A9 04			lda #$04
  1532 16E5 8D B7 17			sta PLAYER4.BRAIN
  1533
  1534 				; --- RepeatUntilProlog
  1535 16E8			l_0620
  1536
  1537 				; optimize OK (main.pas), line = 250
  1538
  1539 16E8 A9 01			lda #$01
  1540 16EA 8D 94 17			sta SYSTEM.PAUSE_006B.N
  1541 16ED A9 00			lda #$00
  1542 16EF 8D 95 17			sta SYSTEM.PAUSE_006B.N+1
  1543 16F2 20 13 11			jsr SYSTEM.PAUSE_006B
  1544 16F5 AD 7E 17			lda PLAYER1
  1545 16F8 8D C0 17			sta PLAYERMOVE.P
  1546 16FB AD 7F 17			lda PLAYER1+1
  1547 16FE 8D C1 17			sta PLAYERMOVE.P+1
  1548 1701 20 BE 14			jsr PLAYERMOVE
  1549
  1550 				; optimize OK (main.pas), line = 251
  1551
  1552 1704 A9 01			lda #$01
  1553 1706 8D 94 17			sta SYSTEM.PAUSE_006B.N
  1554 1709 A9 00			lda #$00
  1555 170B 8D 95 17			sta SYSTEM.PAUSE_006B.N+1
  1556 170E 20 13 11			jsr SYSTEM.PAUSE_006B
  1557 1711 AD 80 17			lda PLAYER2
  1558 1714 8D C0 17			sta PLAYERMOVE.P
  1559 1717 AD 81 17			lda PLAYER2+1
  1560 171A 8D C1 17			sta PLAYERMOVE.P+1
  1561 171D 20 BE 14			jsr PLAYERMOVE
  1562
  1563 				; optimize OK (main.pas), line = 252
  1564
  1565 1720 A9 01			lda #$01
  1566 1722 8D 94 17			sta SYSTEM.PAUSE_006B.N
  1567 1725 A9 00			lda #$00
  1568 1727 8D 95 17			sta SYSTEM.PAUSE_006B.N+1
  1569 172A 20 13 11			jsr SYSTEM.PAUSE_006B
  1570 172D AD 82 17			lda PLAYER3
  1571 1730 8D C0 17			sta PLAYERMOVE.P
  1572 1733 AD 83 17			lda PLAYER3+1
  1573 1736 8D C1 17			sta PLAYERMOVE.P+1
  1574 1739 20 BE 14			jsr PLAYERMOVE
  1575
  1576 				; optimize OK (main.pas), line = 253
  1577
  1578 173C A9 01			lda #$01
  1579 173E 8D 94 17			sta SYSTEM.PAUSE_006B.N
  1580 1741 A9 00			lda #$00
  1581 1743 8D 95 17			sta SYSTEM.PAUSE_006B.N+1
  1582 1746 20 13 11			jsr SYSTEM.PAUSE_006B
  1583 1749 AD 84 17			lda PLAYER4
  1584 174C 8D C0 17			sta PLAYERMOVE.P
  1585 174F AD 85 17			lda PLAYER4+1
  1586 1752 8D C1 17			sta PLAYERMOVE.P+1
  1587 1755 20 BE 14			jsr PLAYERMOVE
  1588
  1589 				; optimize OK (main.pas), line = 254
  1590
  1591 1758 AD 9A 17			lda ALIVE
  1592 175B F0 04			jeq l_0620x
  1593 175D C9 FF			cmp #$FF
  1594 175F D0 87			jne l_0620
  1595 1761			l_0620x
  1596
  1597 				; optimize OK (main.pas), line = 256
  1598
  1599 1761 A9 64			lda #$64
  1600 1763 8D 94 17			sta SYSTEM.PAUSE_006B.N
  1601 1766 A9 00			lda #$00
  1602 1768 8D 95 17			sta SYSTEM.PAUSE_006B.N+1
  1603 176B 20 13 11			jsr SYSTEM.PAUSE_006B
  1604
  1605 				; optimize OK (main.pas), line = 257
  1606
  1607 176E AD 98 17			lda GAMEOVER
  1608 1771 D0 03 4C C9 16		jeq l_0609
  1609
  1610 				; ------------------------------------------------------------
  1611
  1612 = 0800			ATTRIBUTE_ADDR	= $0800
  1613 = 0C00			SCREEN_ADDR	= $0C00
  1614 = 0020			EMPTY	= $20
  1615 = 00A0			WALL	= $A0
  1616 = 0041			WALL_COLOUR	= $41
  1617 = 0051			PLY_HEAD	= $51
  1618 = 0057			PLY_CRASH	= $57
  1619 = 0042			PLY_TAIL_UD	= $42
  1620 = 0040			PLY_TAIL_LR	= $40
  1621 = 007D			PLY_TAIL_RD	= $7D
  1622 = 006E			PLY_TAIL_RU	= $6E
  1623 = 006D			PLY_TAIL_LD	= $6D
  1624 = 0070			PLY_TAIL_LU	= $70
  1625 = 005F			PLY1_COLOUR	= $5F
  1626 = 005D			PLY2_COLOUR	= $5D
  1627 = 0071			PLY3_COLOUR	= $71
  1628 = 0055			PLY4_COLOUR	= $55
  1629 = 0001			JOY_UP	= $01
  1630 = 0002			JOY_DOWN	= $02
  1631 = 0004			JOY_LEFT	= $04
  1632 = 0008			JOY_RIGHT	= $08
  1633 = 0040			JOY_FIRE	= $40
  1634 = 0002			JOY_SELECT_1	= $02
  1635 = 0004			JOY_SELECT_2	= $04
  1636 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1637 1776			.var MUL40	= adr.MUL40 .word
  1638 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1639 1776			.var DIRECTION	= adr.DIRECTION .word
  1640 = FD30			KEY_PIO	= $FD30
  1641 = FF08			JOY	= $FF08
  1642 = FF15			BORDERCOLOR	= $FF15
  1643 = FF19			BGCOLOR	= $FF19
  1644 = 0058			T0B	= $58
  1645 = 0059			NEWDIR	= $59
  1646 = 005A			T0N	= $5A
  1647 = 005B			T0W	= $5B
  1648 = 1798			GAMEOVER	= DATAORIGIN+$0010
  1649 = 1799			AVAILDIR	= DATAORIGIN+$0011
  1650 = 179A			ALIVE	= DATAORIGIN+$0012
  1651 = 179B			PLY	= DATAORIGIN+$0013
  1652 = 1788			PLY.X	= DATAORIGIN+$0000
  1653 = 1789			PLY.Y	= DATAORIGIN+$0001
  1654 = 178A			PLY.HEAD	= DATAORIGIN+$0002
  1655 = 178B			PLY.COLOUR	= DATAORIGIN+$0003
  1656 = 178C			PLY.DIR	= DATAORIGIN+$0004
  1657 = 178D			PLY.BRAIN	= DATAORIGIN+$0005
  1658 = 178E			PLY.ISDEAD	= DATAORIGIN+$0006
  1659 = 179D			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1660 1776			.var PLAYER1	= adr.PLAYER1 .word
  1661 = 179D			PLAYER1.X	= DATAORIGIN+$0015
  1662 = 179E			PLAYER1.Y	= DATAORIGIN+$0016
  1663 = 179F			PLAYER1.HEAD	= DATAORIGIN+$0017
  1664 = 17A0			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1665 = 17A1			PLAYER1.DIR	= DATAORIGIN+$0019
  1666 = 17A2			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1667 = 17A3			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1668 = 17A4			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1669 1776			.var PLAYER2	= adr.PLAYER2 .word
  1670 = 17A4			PLAYER2.X	= DATAORIGIN+$001C
  1671 = 17A5			PLAYER2.Y	= DATAORIGIN+$001D
  1672 = 17A6			PLAYER2.HEAD	= DATAORIGIN+$001E
  1673 = 17A7			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1674 = 17A8			PLAYER2.DIR	= DATAORIGIN+$0020
  1675 = 17A9			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1676 = 17AA			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1677 = 17AB			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1678 1776			.var PLAYER3	= adr.PLAYER3 .word
  1679 = 17AB			PLAYER3.X	= DATAORIGIN+$0023
  1680 = 17AC			PLAYER3.Y	= DATAORIGIN+$0024
  1681 = 17AD			PLAYER3.HEAD	= DATAORIGIN+$0025
  1682 = 17AE			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1683 = 17AF			PLAYER3.DIR	= DATAORIGIN+$0027
  1684 = 17B0			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1685 = 17B1			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1686 = 17B2			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1687 1776			.var PLAYER4	= adr.PLAYER4 .word
  1688 = 17B2			PLAYER4.X	= DATAORIGIN+$002A
  1689 = 17B3			PLAYER4.Y	= DATAORIGIN+$002B
  1690 = 17B4			PLAYER4.HEAD	= DATAORIGIN+$002C
  1691 = 17B5			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1692 = 17B6			PLAYER4.DIR	= DATAORIGIN+$002E
  1693 = 17B7			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1694 = 17B8			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1695 1776			@exit
  1696
  1697 1776 A2 00		@halt	ldx #$00
  1698 1778 9A				txs
  1699
  1700 1779 60				rts
  1701
  1702 				; ------------------------------------------------------------
  1703
  1704 				; ------------------------------------------------------------
  1705
  1706 177A			.local	@DEFINES
  1707 177A			C4P
  1708 				.endl
  1709
  1710 177A			.local	@RESOURCE
  1711 				.endl
  1712
  1713 = 177A 0E 10		MUL40
  1713 = 177C 40 10		DIRECTION
  1713 = 177E 9D 17		PLAYER1
  1713 = 1780 A4 17		PLAYER2
  1713 = 1782 AB 17		PLAYER3
  1713 = 1784 B2 17		PLAYER4
  1713 				.endl							; MAIN
  1714
  1715 				; ------------------------------------------------------------
  1716 				; ------------------------------------------------------------
  1717
  1718 				.macro	UNITINITIALIZATION
  1719 				
  1720 					.ifdef MAIN.SYSTEM.@UnitInit
  1721 					jsr MAIN.SYSTEM.@UnitInit
  1722 					eif
  1723 				.endm
  1724
  1725 				; ------------------------------------------------------------
  1726
  1727 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1728 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1728 				SYSTEM: $10C5..$1160
  1729 					eif
  1730
  1731 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1731 				CODE: $100E..$1779
  1732
  1733 				; ------------------------------------------------------------
  1734
  1735 1786				.align $04
  1736
  1737 1788			DATAORIGIN
  1738 1788 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1739
  1740 = 0006			VARINITSIZE	= *-DATAORIGIN
  1741 = 003C			VARDATASIZE	= 60
  1742
  1743 = 17C4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1744
  1745 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1745 				DATA: $1788..$17C4
  1746
  1747 				; ------------------------------------------------------------
  1748
  1749 				.macro	STATICDATA
  1750 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1751 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1752 				.by  $C0 $03 $01 $02 $04 $08
  1753 				.endm
  1754
  1755 					end
