mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10A6
   102
   103 				; ------------------------------------------------------------
   104
   105 10A7			START
   106 10A7 BA				tsx
   107 10A8 8E CB 17			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0046			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 17E2			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10AB A2 BA			ldx #256-VLEN
   120 10AD A9 00			lda #$00
   121 10AF 9D 28 17 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10B5 A9 28 85 02 A9 18 + 	mwa #PROGRAMSTACK psptr
   127
   128 10BD A2 00			ldx #$00
   129 10BF 86 10			stx bp						; BP = 0
   130
   131 10C1 CA				dex						; X = 255
   132
   133 10C2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10C2			.local	MAIN						; PROCEDURE
   136
   137 10C2 4C 1D 17			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10C5			.local	SYSTEM						; UNIT
   142
   143 10C5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10C5 B5 18			lda :STACKORIGIN,x
   150 10C7 85 08			sta A
   151 10C9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10CB 85 09			sta A+1
   153 10CD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10CE A0 00			ldy #0
   158 10D0 B1 08 8D E7 17		mva (edx),y Result
   159
   160 10D5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10D5 E8				inx
   168 10D6 AD E7 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 17E7			RESULT	= DATAORIGIN+$000B
   182
   183 = 17E7			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10DB 60				rts						; ret
   187 				.endl
   188
   189 10DC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10DC B5 18			lda :STACKORIGIN,x
   196 10DE 85 0C			sta VALUE
   197 10E0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10E1 B5 18			lda :STACKORIGIN,x
   204 10E3 85 08			sta A
   205 10E5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E7 85 09			sta A+1
   207 10E9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10EA A0 00			ldy #0
   212 10EC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10F0			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10F0 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10F1			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10F1 B5 18			lda :STACKORIGIN,x
   238 10F3 85 0C			sta VALUE
   239 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F7 85 0D			sta VALUE+1
   241 10F9 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10FA B5 18			lda :STACKORIGIN,x
   248 10FC 85 08			sta A
   249 10FE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1100 85 09			sta A+1
   251 1102 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1103 A0 00			ldy #0
   256 1105 A5 0C 91 08			mva value (edx),y
   257 1109 C8				iny
   258 110A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 110E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 110E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 110F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 110F 20 4B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1112			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1112 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1113			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1113 AD E8 17		loop  lda n
   307 1116 0D E9 17		  ora n+1
   308 1119 F0 14		  beq stop
   309
   310 111B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1121 AD E8 17 D0 03 CE +   dew n
   313
   314 112C 4C 13 11		  jmp loop
   315 112F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 17E8			N	= DATAORIGIN+$000C
   321
   322 = 17E8			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 112F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 112F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1130			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1130 8D EA 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1133 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1136 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1139 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 113C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 113F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1142 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1145 A8			  tay
   350
   351 1146 AD EA 17		  lda range
   352 1149 F0 08		  beq stop
   353
   354 114B 85 0C		  sta ecx
   355 114D 84 04		  sty eax
   356
   357 114F 20 93 10		  jsr imulCL
   358 1152 A8			  tay
   359
   360 1153 8C EB 17		stop  sty Result
   361
   362 1156			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1156 E8				inx
   370 1157 AD EB 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 17EA			RANGE	= DATAORIGIN+$000E
   383 = 17EB			RESULT	= DATAORIGIN+$000F
   384
   385 = 17EA			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 115C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 17DC			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 17DE			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 17E0			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 115D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 115D			.var HPALETTE	= adr.HPALETTE .word
   449 = 17E1			FILEMODE	= DATAORIGIN+$0005
   450 = 17E2			GRAPHMODE	= DATAORIGIN+$0006
   451 = 17E3			IORESULT	= DATAORIGIN+$0007
   452 = 17E4			EOLN	= DATAORIGIN+$0008
   453 = 17E5			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 115D C0 02		PALETTE
   455 = 115F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1161			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 64
   460
   461 1161 A9 03			lda #$03
   462 1163 8D EE 17			sta ALIVE
   463
   464 				; optimize OK (main.pas), line = 66
   465
   466 1166 A9 1F			lda #$1F
   467 1168 8D 15 FF			sta BORDERCOLOR
   468 116B A9 00			lda #$00
   469 116D 8D 19 FF			sta BGCOLOR
   470
   471 				; optimize OK (main.pas), line = 67
   472
   473 1170 A9 20			lda #$20
   474 1172 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   475 1174 A9 C0			lda #$C0
   476 1176 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   477 1178 A9 03			lda #$03
   478 117A 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   479 117C A9 00			lda #$00
   480 117E 85 08			sta SYSTEM.FILLCHAR_0056.A
   481 1180 A9 0C			lda #$0C
   482 1182 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   483 1184 20 0F 11			jsr SYSTEM.FILLCHAR_0056
   484
   485 				; optimize OK (main.pas), line = 69
   486
   487 1187 A9 27			lda #$27
   488 1189 85 58			sta T0B
   489
   490 118B			l_008D
   491 				; --- ForToDoCondition
   492
   493 				; optimize OK (main.pas), line = 70
   494
   495 118B A4 58			ldy T0B
   496 118D A9 A0			lda #$A0
   497 118F 99 00 0C			sta $0C00,y
   498
   499 				; optimize OK (main.pas), line = 71
   500
   501 1192 99 C0 0F			sta $0FC0,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 1195 A9 41			lda #$41
   506 1197 99 00 08			sta $0800,y
   507
   508 				; optimize OK (main.pas), line = 73
   509
   510 119A 99 C0 0B			sta $0BC0,y
   511
   512 				; --- ForToDoEpilog
   513 119D C6 58			dec T0B
   514 119F 10 EA			jpl l_008D
   515 11A1			l_009B
   516
   517 				; optimize OK (main.pas), line = 76
   518
   519 11A1 A9 18			lda #$18
   520 11A3 85 58			sta T0B
   521
   522 11A5			l_00CD
   523 				; --- ForToDoCondition
   524 11A5 A5 58			lda T0B
   525 11A7 C9 01			cmp #$01
   526 11A9 90 3A			jcc l_00DB
   527
   528 				; optimize OK (main.pas), line = 77
   529
   530 11AB 0A				asl @
   531 11AC A8				tay
   532 11AD A9 FF			lda #$FF
   533 11AF 18 79 0E 10			add adr.MUL40,y
   534 11B3 85 12			sta :bp2
   535 11B5 A9 0B			lda #$0B
   536 11B7 79 0F 10			adc adr.MUL40+1,y
   537 11BA 85 13			sta :bp2+1
   538 11BC A0 00			ldy #$00
   539 11BE A9 A0			lda #$A0
   540 11C0 91 12			sta (:bp2),y
   541 11C2 C8				iny
   542 11C3 91 12			sta (:bp2),y
   543
   544 				; optimize OK (main.pas), line = 78
   545
   546 11C5 A5 58			lda T0B
   547 11C7 0A				asl @
   548 11C8 A8				tay
   549 11C9 A9 FF			lda #$FF
   550 11CB 18 79 0E 10			add adr.MUL40,y
   551 11CF 85 12			sta :bp2
   552 11D1 A9 07			lda #$07
   553 11D3 79 0F 10			adc adr.MUL40+1,y
   554 11D6 85 13			sta :bp2+1
   555 11D8 A0 00			ldy #$00
   556 11DA A9 41			lda #$41
   557 11DC 91 12			sta (:bp2),y
   558 11DE C8				iny
   559 11DF 91 12			sta (:bp2),y
   560
   561 				; --- ForToDoEpilog
   562 11E1 C6 58			dec T0B
   563 11E3 10 C0			jpl l_00CD
   564 11E5			l_00DB
   565
   566 				; ------------------------------------------------------------
   567
   568 = 0000			@FORTMP_008A	= $00
   569 = 0001			@FORTMP_00CA	= $01
   570 11E5			@exit
   571 					.ifdef @new
   572 					lda <@VarData
   573 					sta :ztmp
   574 					lda >@VarData
   575 					ldy #@VarDataSize-1
   576 					jmp @FreeMem
   577 					els
   578 11E5 60				rts						; ret
   579 					eif
   580 				.endl
   581
   582 11E6			.local	INITPLAYERS					; PROCEDURE
   583
   584 				; optimize OK (main.pas), line = 84
   585
   586 11E6 A9 01			lda #$01
   587 11E8 8D F4 17			sta PLAYER1.BRAIN
   588 11EB A9 0A			lda #$0A
   589 11ED 8D EF 17			sta PLAYER1.X
   590 11F0 8D F0 17			sta PLAYER1.Y
   591 11F3 A9 51			lda #$51
   592 11F5 8D F1 17			sta PLAYER1.HEAD
   593
   594 				; optimize OK (main.pas), line = 85
   595
   596 11F8 A9 5F			lda #$5F
   597 11FA 8D F2 17			sta PLAYER1.COLOUR
   598 11FD A9 00			lda #$00
   599 11FF 8D F5 17			sta PLAYER1.ISDEAD
   600 1202 A9 08			lda #$08
   601 1204 8D F3 17			sta PLAYER1.DIR
   602
   603 				; optimize OK (main.pas), line = 87
   604
   605 1207 A9 01			lda #$01
   606 1209 8D FB 17			sta PLAYER2.BRAIN
   607 120C A9 1E			lda #$1E
   608 120E 8D F6 17			sta PLAYER2.X
   609 1211 A9 0A			lda #$0A
   610 1213 8D F7 17			sta PLAYER2.Y
   611 1216 A9 51			lda #$51
   612 1218 8D F8 17			sta PLAYER2.HEAD
   613
   614 				; optimize OK (main.pas), line = 88
   615
   616 121B A9 5D			lda #$5D
   617 121D 8D F9 17			sta PLAYER2.COLOUR
   618 1220 A9 00			lda #$00
   619 1222 8D FC 17			sta PLAYER2.ISDEAD
   620 1225 A9 04			lda #$04
   621 1227 8D FA 17			sta PLAYER2.DIR
   622
   623 				; optimize OK (main.pas), line = 90
   624
   625 122A A9 01			lda #$01
   626 122C 8D 02 18			sta PLAYER3.BRAIN
   627 122F A9 14			lda #$14
   628 1231 8D FD 17			sta PLAYER3.X
   629 1234 A9 06			lda #$06
   630 1236 8D FE 17			sta PLAYER3.Y
   631 1239 A9 51			lda #$51
   632 123B 8D FF 17			sta PLAYER3.HEAD
   633
   634 				; optimize OK (main.pas), line = 91
   635
   636 123E A9 71			lda #$71
   637 1240 8D 00 18			sta PLAYER3.COLOUR
   638 1243 A9 00			lda #$00
   639 1245 8D 03 18			sta PLAYER3.ISDEAD
   640 1248 A9 02			lda #$02
   641 124A 8D 01 18			sta PLAYER3.DIR
   642
   643 				; optimize OK (main.pas), line = 93
   644
   645 124D A9 01			lda #$01
   646 124F 8D 09 18			sta PLAYER4.BRAIN
   647 1252 A9 14			lda #$14
   648 1254 8D 04 18			sta PLAYER4.X
   649 1257 A9 12			lda #$12
   650 1259 8D 05 18			sta PLAYER4.Y
   651 125C A9 51			lda #$51
   652 125E 8D 06 18			sta PLAYER4.HEAD
   653
   654 				; optimize OK (main.pas), line = 94
   655
   656 1261 A9 55			lda #$55
   657 1263 8D 07 18			sta PLAYER4.COLOUR
   658 1266 A9 00			lda #$00
   659 1268 8D 0A 18			sta PLAYER4.ISDEAD
   660 126B A9 01			lda #$01
   661 126D 8D 08 18			sta PLAYER4.DIR
   662 1270			@exit
   663 					.ifdef @new
   664 					lda <@VarData
   665 					sta :ztmp
   666 					lda >@VarData
   667 					ldy #@VarDataSize-1
   668 					jmp @FreeMem
   669 					els
   670 1270 60				rts						; ret
   671 					eif
   672 				.endl
   673
   674 1271			.local	PUTCHAR						; PROCEDURE
   675
   676 				; optimize OK (main.pas), line = 101
   677
   678 1271 AD 0C 18			lda Y
   679 1274 0A				asl @
   680 1275 A8				tay
   681 1276 B9 0E 10			lda adr.MUL40,y
   682 1279 18 6D 0B 18			add X
   683 127D 85 5B			sta T0W
   684 127F B9 0F 10			lda adr.MUL40+1,y
   685 1282 69 08			adc #$08
   686 1284 85 5C			sta T0W+1
   687
   688 				; optimize OK (main.pas), line = 102
   689
   690 1286 85 11			sta :bp+1
   691 1288 A4 5B			ldy T0W
   692 128A AD 0E 18			lda C
   693 128D 91 10			sta (:bp),y
   694 128F A5 5C			lda T0W+1
   695 1291 18 69 04			add #$04
   696 1294 85 11			sta :bp+1
   697 1296 AD 0D 18			lda V
   698 1299 91 10			sta (:bp),y
   699
   700 				; ------------------------------------------------------------
   701
   702 = 180B			X	= DATAORIGIN+$002F
   703 = 180C			Y	= DATAORIGIN+$0030
   704 = 180D			V	= DATAORIGIN+$0031
   705 = 180E			C	= DATAORIGIN+$0032
   706
   707 = 180B			@VarData	= X
   708 = 0004			@VarDataSize	= 4
   709
   710 129B			@exit
   711 					.ifdef @new
   712 					lda <@VarData
   713 					sta :ztmp
   714 					lda >@VarData
   715 					ldy #@VarDataSize-1
   716 					jmp @FreeMem
   717 					els
   718 129B 60				rts						; ret
   719 					eif
   720 				.endl
   721
   722 129C			.local	CHECKAVAILDIR					; PROCEDURE
   723
   724 				; optimize OK (main.pas), line = 107
   725
   726 129C A9 00			lda #$00
   727 129E 8D ED 17			sta AVAILDIR
   728
   729 				; optimize OK (main.pas), line = 108
   730
   731 12A1 AD 10 18			lda Y
   732 12A4 0A				asl @
   733 12A5 A8				tay
   734 12A6 B9 0E 10			lda adr.MUL40,y
   735 12A9 18 6D 0F 18			add X
   736 12AD 85 5B			sta T0W
   737 12AF B9 0F 10			lda adr.MUL40+1,y
   738 12B2 69 0C			adc #$0C
   739 12B4 85 5C			sta T0W+1
   740
   741 				; optimize OK (main.pas), line = 110
   742
   743 12B6 A5 5B			lda T0W
   744 12B8 38 E9 28			sub #$28
   745 12BB 85 21			sta :STACKORIGIN+9
   746 12BD A5 5C			lda T0W+1
   747 12BF E9 00			sbc #$00
   748 12C1 85 11			sta :bp+1
   749 12C3 A4 21			ldy :STACKORIGIN+9
   750 12C5 B1 10			lda (:bp),y
   751 12C7 C9 20			cmp #$20
   752 12C9 D0 08			jne l_01C0
   753 12CB AD ED 17			lda AVAILDIR
   754 12CE 09 01			ora #$01
   755 12D0 8D ED 17			sta AVAILDIR
   756 12D3			l_01C0
   757
   758 				; optimize OK (main.pas), line = 111
   759
   760 12D3 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   761 12DB A0 28			ldy #$28
   762 12DD B1 12			lda (:bp2),y
   763 12DF C9 20			cmp #$20
   764 12E1 D0 08			jne l_01E3
   765 12E3 AD ED 17			lda AVAILDIR
   766 12E6 09 02			ora #$02
   767 12E8 8D ED 17			sta AVAILDIR
   768 12EB			l_01E3
   769
   770 				; optimize OK (main.pas), line = 112
   771
   772 12EB A5 5B			lda T0W
   773 12ED 38 E9 01			sub #$01
   774 12F0 85 21			sta :STACKORIGIN+9
   775 12F2 A5 5C			lda T0W+1
   776 12F4 E9 00			sbc #$00
   777 12F6 85 11			sta :bp+1
   778 12F8 A4 21			ldy :STACKORIGIN+9
   779 12FA B1 10			lda (:bp),y
   780 12FC C9 20			cmp #$20
   781 12FE D0 08			jne l_0206
   782 1300 AD ED 17			lda AVAILDIR
   783 1303 09 04			ora #$04
   784 1305 8D ED 17			sta AVAILDIR
   785 1308			l_0206
   786
   787 				; optimize OK (main.pas), line = 113
   788
   789 1308 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   790 1310 A0 01			ldy #$01
   791 1312 B1 12			lda (:bp2),y
   792 1314 C9 20			cmp #$20
   793 1316 D0 08			jne l_0229
   794 1318 AD ED 17			lda AVAILDIR
   795 131B 09 08			ora #$08
   796 131D 8D ED 17			sta AVAILDIR
   797 1320			l_0229
   798
   799 				; ------------------------------------------------------------
   800
   801 = 180F			X	= DATAORIGIN+$0033
   802 = 1810			Y	= DATAORIGIN+$0034
   803
   804 = 180F			@VarData	= X
   805 = 0002			@VarDataSize	= 2
   806
   807 1320			@exit
   808 					.ifdef @new
   809 					lda <@VarData
   810 					sta :ztmp
   811 					lda >@VarData
   812 					ldy #@VarDataSize-1
   813 					jmp @FreeMem
   814 					els
   815 1320 60				rts						; ret
   816 					eif
   817 				.endl
   818
   819 1321			.local	HUMAN						; PROCEDURE
   820
   821 				; optimize OK (main.pas), line = 123
   822
   823 1321 AD 11 18			lda P
   824 1324 8D 13 18			sta PLY
   825 1327 85 12			sta :bp2
   826 1329 AD 12 18			lda P+1
   827 132C 8D 14 18			sta PLY+1
   828 132F 85 13			sta :bp2+1
   829 				; optimize OK (main.pas), line = 124
   830 1331 A0 04			ldy #PLY.DIR-DATAORIGIN
   831 1333 B1 12			lda (:bp2),y
   832 1335 85 59			sta NEWDIR
   833
   834 				; optimize OK (main.pas), line = 125
   835
   836 1337 A9 02			lda #$02
   837 1339 8D 08 FF			sta JOY
   838 133C A9 FF			lda #$FF
   839 133E 8D 30 FD			sta KEY_PIO
   840 1341 AD 08 FF			lda JOY
   841 1344 49 FF			eor #$FF
   842 1346 85 58			sta T0B
   843
   844 				; optimize OK (main.pas), line = 127
   845
   846 1348 8D 15 18			sta @CASETMP_0003
   847 134B C9 01			cmp #$01
   848 134D D0 07			jne l_0262
   849 134F			@
   850
   851 				; optimize OK (main.pas), line = 128
   852
   853 134F A5 58			lda T0B
   854 1351 85 59			sta NEWDIR
   855
   856 1353 4C 74 13			jmp a_0003
   857 1356			l_0262
   858 1356 C9 02			cmp #$02
   859 1358 D0 07			jne l_0271
   860 135A			@
   861
   862 				; optimize OK (main.pas), line = 129
   863
   864 135A A5 58			lda T0B
   865 135C 85 59			sta NEWDIR
   866
   867 135E 4C 74 13			jmp a_0003
   868 1361			l_0271
   869 1361 C9 04			cmp #$04
   870 1363 D0 07			jne l_0280
   871 1365			@
   872
   873 				; optimize OK (main.pas), line = 130
   874
   875 1365 A5 58			lda T0B
   876 1367 85 59			sta NEWDIR
   877
   878 1369 4C 74 13			jmp a_0003
   879 136C			l_0280
   880 136C C9 08			cmp #$08
   881 136E D0 04			jne l_028F
   882 1370			@
   883
   884 				; optimize OK (main.pas), line = 131
   885
   886 1370 A5 58			lda T0B
   887 1372 85 59			sta NEWDIR
   888
   889 1374			l_028F
   890 1374			a_0003
   891
   892 				; optimize OK (main.pas), line = 134
   893
   894 1374 A5 59			lda NEWDIR
   895 1376 2D ED 17			and AVAILDIR
   896 1379 D0 1B			jne l_02B5
   897
   898 				; optimize OK (main.pas), line = 135
   899
   900 137B AC 13 18 84 12 AC + 	mwy PLY :bp2
   901 1385 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   902 1387 A9 01			lda #$01
   903 1389 91 12			sta (:bp2),y
   904 138B A9 00			lda #$00
   905 138D 8D EE 17			sta ALIVE
   906 1390 A0 02			ldy #PLY.HEAD-DATAORIGIN
   907 1392 A9 57			lda #$57
   908 1394 91 12			sta (:bp2),y
   909 1396			l_02B5
   910
   911 				; ------------------------------------------------------------
   912
   913 = 1811			P	= DATAORIGIN+$0035
   914 = 1813			PLY	= DATAORIGIN+$0037
   915 = 17DC			PLY.X	= DATAORIGIN+$0000
   916 = 17DD			PLY.Y	= DATAORIGIN+$0001
   917 = 17DE			PLY.HEAD	= DATAORIGIN+$0002
   918 = 17DF			PLY.COLOUR	= DATAORIGIN+$0003
   919 = 17E0			PLY.DIR	= DATAORIGIN+$0004
   920 = 17E1			PLY.BRAIN	= DATAORIGIN+$0005
   921 = 17E2			PLY.ISDEAD	= DATAORIGIN+$0006
   922 = 1815			@CASETMP_0003	= DATAORIGIN+$0039
   923
   924 = 1811			@VarData	= P
   925 = 000F			@VarDataSize	= 15
   926
   927 1396			@exit
   928 					.ifdef @new
   929 					lda <@VarData
   930 					sta :ztmp
   931 					lda >@VarData
   932 					ldy #@VarDataSize-1
   933 					jmp @FreeMem
   934 					els
   935 1396 60				rts						; ret
   936 					eif
   937 				.endl
   938
   939 1397			.local	AI_SIMPLERANDOM					; PROCEDURE
   940
   941 				; optimize OK (main.pas), line = 142
   942
   943 1397 A9 00			lda #$00
   944 1399 85 5A			sta T0N
   945
   946 				; --- RepeatUntilProlog
   947 139B			l_02CD
   948
   949 				; optimize FAIL (0, main.pas), line = 144
   950
   951 139B A9 04			lda #$04
   952 139D 20 30 11			jsr SYSTEM.RANDOM_006C
   953 13A0 B4 18			ldy :STACKORIGIN,x
   954 13A2 B9 40 10			lda adr.DIRECTION,y
   955 13A5 85 59			sta NEWDIR
   956 13A7 CA				dex
   957
   958 				; optimize OK (main.pas), line = 145
   959
   960 13A8 AD ED 17			lda AVAILDIR
   961 13AB 25 59			and NEWDIR
   962 13AD F0 04			jeq l_02ED
   963 13AF A9 01			lda #$01
   964 13B1 85 5A			sta T0N
   965 13B3			l_02ED
   966
   967 				; optimize OK (main.pas), line = 146
   968
   969 13B3 A5 5A			lda T0N
   970 13B5 F0 E4			jeq l_02CD
   971 13B7			@exit
   972 					.ifdef @new
   973 					lda <@VarData
   974 					sta :ztmp
   975 					lda >@VarData
   976 					ldy #@VarDataSize-1
   977 					jmp @FreeMem
   978 					els
   979 13B7 60				rts						; ret
   980 					eif
   981 				.endl
   982
   983 13B8			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   984
   985 				; optimize OK (main.pas), line = 154
   986
   987 13B8 AD 16 18			lda P
   988 13BB 8D 18 18			sta PLY
   989 13BE 85 12			sta :bp2
   990 13C0 AD 17 18			lda P+1
   991 13C3 8D 19 18			sta PLY+1
   992 13C6 85 13			sta :bp2+1
   993 				; optimize OK (main.pas), line = 155
   994 13C8 A0 04			ldy #PLY.DIR-DATAORIGIN
   995 13CA B1 12			lda (:bp2),y
   996 13CC 2D ED 17			and AVAILDIR
   997 13CF F0 07			jeq l_031C
   998 13D1 B1 12			lda (:bp2),y
   999 13D3 85 59			sta NEWDIR
  1000 13D5 4C F8 13			jmp l_032C
  1001 13D8			l_031C
  1002
  1003 				; optimize OK (main.pas), line = 157
  1004
  1005 13D8 A9 00			lda #$00
  1006 13DA 85 5A			sta T0N
  1007
  1008 				; --- RepeatUntilProlog
  1009 13DC			l_0331
  1010
  1011 				; optimize FAIL (0, main.pas), line = 159
  1012
  1013 13DC A9 04			lda #$04
  1014 13DE 20 30 11			jsr SYSTEM.RANDOM_006C
  1015 13E1 B4 18			ldy :STACKORIGIN,x
  1016 13E3 B9 40 10			lda adr.DIRECTION,y
  1017 13E6 85 59			sta NEWDIR
  1018 13E8 CA				dex
  1019
  1020 				; optimize OK (main.pas), line = 160
  1021
  1022 13E9 AD ED 17			lda AVAILDIR
  1023 13EC 25 59			and NEWDIR
  1024 13EE F0 04			jeq l_0351
  1025 13F0 A9 01			lda #$01
  1026 13F2 85 5A			sta T0N
  1027 13F4			l_0351
  1028
  1029 				; optimize OK (main.pas), line = 161
  1030
  1031 13F4 A5 5A			lda T0N
  1032 13F6 F0 E4			jeq l_0331
  1033 13F8			l_032C
  1034
  1035 				; ------------------------------------------------------------
  1036
  1037 = 1816			P	= DATAORIGIN+$003A
  1038 = 1818			PLY	= DATAORIGIN+$003C
  1039 = 17DC			PLY.X	= DATAORIGIN+$0000
  1040 = 17DD			PLY.Y	= DATAORIGIN+$0001
  1041 = 17DE			PLY.HEAD	= DATAORIGIN+$0002
  1042 = 17DF			PLY.COLOUR	= DATAORIGIN+$0003
  1043 = 17E0			PLY.DIR	= DATAORIGIN+$0004
  1044 = 17E1			PLY.BRAIN	= DATAORIGIN+$0005
  1045 = 17E2			PLY.ISDEAD	= DATAORIGIN+$0006
  1046
  1047 = 1816			@VarData	= P
  1048 = 000E			@VarDataSize	= 14
  1049
  1050 13F8			@exit
  1051 					.ifdef @new
  1052 					lda <@VarData
  1053 					sta :ztmp
  1054 					lda >@VarData
  1055 					ldy #@VarDataSize-1
  1056 					jmp @FreeMem
  1057 					els
  1058 13F8 60				rts						; ret
  1059 					eif
  1060 				.endl
  1061
  1062 13F9			.local	AI_SWINGER					; PROCEDURE
  1063
  1064 				; optimize OK (main.pas), line = 170
  1065
  1066 13F9 AD 1A 18			lda P
  1067 13FC 8D 1C 18			sta PLY
  1068 13FF AD 1B 18			lda P+1
  1069 1402 8D 1D 18			sta PLY+1
  1070
  1071 				; optimize FAIL (1, main.pas), line = 171
  1072
  1073 1405 E8				inx
  1074 1406 AD ED 17 95 18		mva AVAILDIR :STACKORIGIN,x
  1075 140B E8				inx
  1076 140C AC 1C 18 84 12 AC + 	mwy PLY :bp2
  1077 1416 A0 04			ldy #PLY.DIR-DATAORIGIN
  1078 1418 B1 12 95 18			mva (:bp2),y :STACKORIGIN,x
  1079 141C 20 44 10			jsr andAL_CL
  1080 141F A0 01			ldy #1
  1081 1421 B5 17			lda :STACKORIGIN-1,x
  1082 1423 D0 01			bne @+
  1083 1425 88				dey
  1084 1426			@
  1085 1426 94 17			sty :STACKORIGIN-1,x
  1086 1428 CA				dex
  1087 1429 A9 03			lda #$03
  1088 142B 20 30 11			jsr SYSTEM.RANDOM_006C
  1089 142E CA				dex
  1090 142F A0 01			ldy #1
  1091 1431 B5 19			lda :STACKORIGIN+1,x
  1092 1433 F0 01			beq @+
  1093 1435 88				dey
  1094 1436			@
  1095 1436 CA				dex
  1096 1437 98				tya
  1097 1438 35 19			and :STACKORIGIN+1,x
  1098 143A F0 13			jeq l_038B
  1099 143C AC 1C 18 84 12 AC + 	mwy PLY :bp2
  1100 1446 A0 04			ldy #PLY.DIR-DATAORIGIN
  1101 1448 B1 12			lda (:bp2),y
  1102 144A 85 59			sta NEWDIR
  1103 144C 4C 6F 14			jmp l_039B
  1104 144F			l_038B
  1105
  1106 				; optimize OK (main.pas), line = 173
  1107
  1108 144F A9 00			lda #$00
  1109 1451 85 5A			sta T0N
  1110
  1111 				; --- RepeatUntilProlog
  1112 1453			l_03A0
  1113
  1114 				; optimize FAIL (0, main.pas), line = 175
  1115
  1116 1453 A9 04			lda #$04
  1117 1455 20 30 11			jsr SYSTEM.RANDOM_006C
  1118 1458 B4 18			ldy :STACKORIGIN,x
  1119 145A B9 40 10			lda adr.DIRECTION,y
  1120 145D 85 59			sta NEWDIR
  1121 145F CA				dex
  1122
  1123 				; optimize OK (main.pas), line = 176
  1124
  1125 1460 AD ED 17			lda AVAILDIR
  1126 1463 25 59			and NEWDIR
  1127 1465 F0 04			jeq l_03C0
  1128 1467 A9 01			lda #$01
  1129 1469 85 5A			sta T0N
  1130 146B			l_03C0
  1131
  1132 				; optimize OK (main.pas), line = 177
  1133
  1134 146B A5 5A			lda T0N
  1135 146D F0 E4			jeq l_03A0
  1136 146F			l_039B
  1137
  1138 				; ------------------------------------------------------------
  1139
  1140 = 181A			P	= DATAORIGIN+$003E
  1141 = 181C			PLY	= DATAORIGIN+$0040
  1142 = 17DC			PLY.X	= DATAORIGIN+$0000
  1143 = 17DD			PLY.Y	= DATAORIGIN+$0001
  1144 = 17DE			PLY.HEAD	= DATAORIGIN+$0002
  1145 = 17DF			PLY.COLOUR	= DATAORIGIN+$0003
  1146 = 17E0			PLY.DIR	= DATAORIGIN+$0004
  1147 = 17E1			PLY.BRAIN	= DATAORIGIN+$0005
  1148 = 17E2			PLY.ISDEAD	= DATAORIGIN+$0006
  1149
  1150 = 181A			@VarData	= P
  1151 = 000E			@VarDataSize	= 14
  1152
  1153 146F			@exit
  1154 					.ifdef @new
  1155 					lda <@VarData
  1156 					sta :ztmp
  1157 					lda >@VarData
  1158 					ldy #@VarDataSize-1
  1159 					jmp @FreeMem
  1160 					els
  1161 146F 60				rts						; ret
  1162 					eif
  1163 				.endl
  1164
  1165 1470			.local	AI_SLOWSWINGER					; PROCEDURE
  1166
  1167 				; optimize OK (main.pas), line = 186
  1168
  1169 1470 AD 1E 18			lda P
  1170 1473 8D 20 18			sta PLY
  1171 1476 AD 1F 18			lda P+1
  1172 1479 8D 21 18			sta PLY+1
  1173
  1174 				; optimize FAIL (1, main.pas), line = 187
  1175
  1176 147C E8				inx
  1177 147D AD ED 17 95 18		mva AVAILDIR :STACKORIGIN,x
  1178 1482 E8				inx
  1179 1483 AC 20 18 84 12 AC + 	mwy PLY :bp2
  1180 148D A0 04			ldy #PLY.DIR-DATAORIGIN
  1181 148F B1 12 95 18			mva (:bp2),y :STACKORIGIN,x
  1182 1493 20 44 10			jsr andAL_CL
  1183 1496 A0 01			ldy #1
  1184 1498 B5 17			lda :STACKORIGIN-1,x
  1185 149A D0 01			bne @+
  1186 149C 88				dey
  1187 149D			@
  1188 149D 94 17			sty :STACKORIGIN-1,x
  1189 149F CA				dex
  1190 14A0 A9 10			lda #$10
  1191 14A2 20 30 11			jsr SYSTEM.RANDOM_006C
  1192 14A5 CA				dex
  1193 14A6 A0 01			ldy #1
  1194 14A8 B5 19			lda :STACKORIGIN+1,x
  1195 14AA F0 01			beq @+
  1196 14AC 88				dey
  1197 14AD			@
  1198 14AD CA				dex
  1199 14AE 98				tya
  1200 14AF 35 19			and :STACKORIGIN+1,x
  1201 14B1 F0 13			jeq l_03FA
  1202 14B3 AC 20 18 84 12 AC + 	mwy PLY :bp2
  1203 14BD A0 04			ldy #PLY.DIR-DATAORIGIN
  1204 14BF B1 12			lda (:bp2),y
  1205 14C1 85 59			sta NEWDIR
  1206 14C3 4C E6 14			jmp l_040A
  1207 14C6			l_03FA
  1208
  1209 				; optimize OK (main.pas), line = 189
  1210
  1211 14C6 A9 00			lda #$00
  1212 14C8 85 5A			sta T0N
  1213
  1214 				; --- RepeatUntilProlog
  1215 14CA			l_040F
  1216
  1217 				; optimize FAIL (0, main.pas), line = 191
  1218
  1219 14CA A9 04			lda #$04
  1220 14CC 20 30 11			jsr SYSTEM.RANDOM_006C
  1221 14CF B4 18			ldy :STACKORIGIN,x
  1222 14D1 B9 40 10			lda adr.DIRECTION,y
  1223 14D4 85 59			sta NEWDIR
  1224 14D6 CA				dex
  1225
  1226 				; optimize OK (main.pas), line = 192
  1227
  1228 14D7 AD ED 17			lda AVAILDIR
  1229 14DA 25 59			and NEWDIR
  1230 14DC F0 04			jeq l_042F
  1231 14DE A9 01			lda #$01
  1232 14E0 85 5A			sta T0N
  1233 14E2			l_042F
  1234
  1235 				; optimize OK (main.pas), line = 193
  1236
  1237 14E2 A5 5A			lda T0N
  1238 14E4 F0 E4			jeq l_040F
  1239 14E6			l_040A
  1240
  1241 				; ------------------------------------------------------------
  1242
  1243 = 181E			P	= DATAORIGIN+$0042
  1244 = 1820			PLY	= DATAORIGIN+$0044
  1245 = 17DC			PLY.X	= DATAORIGIN+$0000
  1246 = 17DD			PLY.Y	= DATAORIGIN+$0001
  1247 = 17DE			PLY.HEAD	= DATAORIGIN+$0002
  1248 = 17DF			PLY.COLOUR	= DATAORIGIN+$0003
  1249 = 17E0			PLY.DIR	= DATAORIGIN+$0004
  1250 = 17E1			PLY.BRAIN	= DATAORIGIN+$0005
  1251 = 17E2			PLY.ISDEAD	= DATAORIGIN+$0006
  1252
  1253 = 181E			@VarData	= P
  1254 = 000E			@VarDataSize	= 14
  1255
  1256 14E6			@exit
  1257 					.ifdef @new
  1258 					lda <@VarData
  1259 					sta :ztmp
  1260 					lda >@VarData
  1261 					ldy #@VarDataSize-1
  1262 					jmp @FreeMem
  1263 					els
  1264 14E6 60				rts						; ret
  1265 					eif
  1266 				.endl
  1267
  1268 14E7			.local	PLAYERMOVE					; PROCEDURE
  1269
  1270 				; optimize OK (main.pas), line = 203
  1271
  1272 14E7 AD 22 18			lda P
  1273 14EA 8D 24 18			sta PLY
  1274 14ED 85 12			sta :bp2
  1275 14EF AD 23 18			lda P+1
  1276 14F2 8D 25 18			sta PLY+1
  1277 14F5 85 13			sta :bp2+1
  1278 				; optimize OK (main.pas), line = 205
  1279 14F7 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1280 14F9 B1 12			lda (:bp2),y
  1281 14FB F0 03 4C 1C 17		jne l_0455
  1282
  1283 				; optimize OK (main.pas), line = 207
  1284
  1285 1500 A0 00			ldy #PLY.X-DATAORIGIN
  1286 1502 B1 12			lda (:bp2),y
  1287 1504 8D 0F 18			sta CHECKAVAILDIR.X
  1288 1507 A0 01			ldy #PLY.Y-DATAORIGIN
  1289 1509 B1 12			lda (:bp2),y
  1290 150B 8D 10 18			sta CHECKAVAILDIR.Y
  1291 150E 20 9C 12			jsr CHECKAVAILDIR
  1292
  1293 				; optimize OK (main.pas), line = 209
  1294
  1295 1511 AD ED 17			lda AVAILDIR
  1296 1514 D0 36			jne l_046F
  1297
  1298 				; optimize OK (main.pas), line = 210
  1299
  1300 1516 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1301 1520 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1302 1522 A9 01			lda #$01
  1303 1524 91 12			sta (:bp2),y
  1304 1526 CE EE 17			dec ALIVE
  1305
  1306 				; optimize OK (main.pas), line = 211
  1307
  1308 1529 A0 00			ldy #PLY.X-DATAORIGIN
  1309 152B B1 12			lda (:bp2),y
  1310 152D 8D 0B 18			sta PUTCHAR.X
  1311 1530 A0 01			ldy #PLY.Y-DATAORIGIN
  1312 1532 B1 12			lda (:bp2),y
  1313 1534 8D 0C 18			sta PUTCHAR.Y
  1314 1537 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1315 1539 B1 12			lda (:bp2),y
  1316 153B 18 69 80			add #$80
  1317 153E 8D 0E 18			sta PUTCHAR.C
  1318 1541 A9 57			lda #$57
  1319 1543 8D 0D 18			sta PUTCHAR.V
  1320 1546 20 71 12			jsr PUTCHAR
  1321 1549 4C 1C 17			jmp l_0490
  1322 154C			l_046F
  1323
  1324 				; optimize OK (main.pas), line = 214
  1325
  1326 154C AC 24 18 84 12 AC + 	mwy PLY :bp2
  1327 1556 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1328 1558 B1 12			lda (:bp2),y
  1329 155A 8D 26 18			sta @CASETMP_0004
  1330 155D C9 00			cmp #$00
  1331 155F D0 12			jne l_049B
  1332 1561			@
  1333
  1334 				; optimize OK (main.pas), line = 215
  1335
  1336 1561 AD 22 18			lda P
  1337 1564 8D 11 18			sta HUMAN.P
  1338 1567 AD 23 18			lda P+1
  1339 156A 8D 12 18			sta HUMAN.P+1
  1340 156D 20 21 13			jsr HUMAN
  1341
  1342 1570 4C BC 15			jmp a_0004
  1343 1573			l_049B
  1344 1573 C9 01			cmp #$01
  1345 1575 D0 06			jne l_04A7
  1346 1577			@
  1347
  1348 				; optimize FAIL ('AI_SIMPLERANDOM', main.pas), line = 216
  1349
  1350 1577 20 97 13			jsr AI_SIMPLERANDOM
  1351 157A 4C BC 15			jmp a_0004
  1352 157D			l_04A7
  1353 157D C9 02			cmp #$02
  1354 157F D0 12			jne l_04B1
  1355 1581			@
  1356
  1357 				; optimize OK (main.pas), line = 217
  1358
  1359 1581 AD 22 18			lda P
  1360 1584 8D 16 18			sta AI_STRAIGHTFORWARD.P
  1361 1587 AD 23 18			lda P+1
  1362 158A 8D 17 18			sta AI_STRAIGHTFORWARD.P+1
  1363 158D 20 B8 13			jsr AI_STRAIGHTFORWARD
  1364
  1365 1590 4C BC 15			jmp a_0004
  1366 1593			l_04B1
  1367 1593 C9 03			cmp #$03
  1368 1595 D0 12			jne l_04BD
  1369 1597			@
  1370
  1371 				; optimize OK (main.pas), line = 218
  1372
  1373 1597 AD 22 18			lda P
  1374 159A 8D 1A 18			sta AI_SWINGER.P
  1375 159D AD 23 18			lda P+1
  1376 15A0 8D 1B 18			sta AI_SWINGER.P+1
  1377 15A3 20 F9 13			jsr AI_SWINGER
  1378
  1379 15A6 4C BC 15			jmp a_0004
  1380 15A9			l_04BD
  1381 15A9 C9 04			cmp #$04
  1382 15AB D0 0F			jne l_04C9
  1383 15AD			@
  1384
  1385 				; optimize OK (main.pas), line = 219
  1386
  1387 15AD AD 22 18			lda P
  1388 15B0 8D 1E 18			sta AI_SLOWSWINGER.P
  1389 15B3 AD 23 18			lda P+1
  1390 15B6 8D 1F 18			sta AI_SLOWSWINGER.P+1
  1391 15B9 20 70 14			jsr AI_SLOWSWINGER
  1392
  1393 15BC			l_04C9
  1394 15BC			a_0004
  1395
  1396 				; optimize OK (main.pas), line = 222
  1397
  1398 15BC AC 24 18 84 12 AC + 	mwy PLY :bp2
  1399 15C6 A0 04			ldy #PLY.DIR-DATAORIGIN
  1400 15C8 B1 12			lda (:bp2),y
  1401 15CA C5 59			cmp NEWDIR
  1402 15CC D0 14			jne l_04E9
  1403
  1404 				; optimize OK (main.pas), line = 223
  1405
  1406 15CE A5 59			lda NEWDIR
  1407 15D0 29 0C			and #$0C
  1408 15D2 F0 07			jeq l_0500
  1409 15D4 A9 40			lda #$40
  1410 15D6 85 58			sta T0B
  1411 15D8 4C DF 15			jmp l_050E
  1412 15DB			l_0500
  1413 15DB A9 42			lda #$42
  1414 15DD 85 58			sta T0B
  1415 15DF			l_050E
  1416 15DF 4C 52 16			jmp l_051B
  1417 15E2			l_04E9
  1418
  1419 				; optimize OK (main.pas), line = 225
  1420
  1421 15E2 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1422 15EC A0 04			ldy #PLY.DIR-DATAORIGIN
  1423 15EE B1 12			lda (:bp2),y
  1424 15F0 29 0A			and #$0A
  1425 15F2 F0 0A			jeq l_0541
  1426 15F4 A5 59			lda NEWDIR
  1427 15F6 29 05			and #$05
  1428 15F8 F0 04			jeq l_0541
  1429 15FA A9 7D			lda #$7D
  1430 15FC 85 58			sta T0B
  1431 15FE			l_0541
  1432
  1433 				; optimize OK (main.pas), line = 226
  1434
  1435 15FE AC 24 18 84 12 AC + 	mwy PLY :bp2
  1436 1608 A0 04			ldy #PLY.DIR-DATAORIGIN
  1437 160A B1 12			lda (:bp2),y
  1438 160C 29 09			and #$09
  1439 160E F0 0A			jeq l_056E
  1440 1610 A5 59			lda NEWDIR
  1441 1612 29 06			and #$06
  1442 1614 F0 04			jeq l_056E
  1443 1616 A9 6E			lda #$6E
  1444 1618 85 58			sta T0B
  1445 161A			l_056E
  1446
  1447 				; optimize OK (main.pas), line = 227
  1448
  1449 161A AC 24 18 84 12 AC + 	mwy PLY :bp2
  1450 1624 A0 04			ldy #PLY.DIR-DATAORIGIN
  1451 1626 B1 12			lda (:bp2),y
  1452 1628 29 06			and #$06
  1453 162A F0 0A			jeq l_059B
  1454 162C A5 59			lda NEWDIR
  1455 162E 29 09			and #$09
  1456 1630 F0 04			jeq l_059B
  1457 1632 A9 6D			lda #$6D
  1458 1634 85 58			sta T0B
  1459 1636			l_059B
  1460
  1461 				; optimize OK (main.pas), line = 228
  1462
  1463 1636 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1464 1640 A0 04			ldy #PLY.DIR-DATAORIGIN
  1465 1642 B1 12			lda (:bp2),y
  1466 1644 29 05			and #$05
  1467 1646 F0 0A			jeq l_05C8
  1468 1648 A5 59			lda NEWDIR
  1469 164A 29 0A			and #$0A
  1470 164C F0 04			jeq l_05C8
  1471 164E A9 70			lda #$70
  1472 1650 85 58			sta T0B
  1473 1652			l_05C8
  1474 1652			l_051B
  1475
  1476 				; optimize OK (main.pas), line = 230
  1477
  1478 1652 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1479 165C A0 00			ldy #PLY.X-DATAORIGIN
  1480 165E B1 12			lda (:bp2),y
  1481 1660 8D 0B 18			sta PUTCHAR.X
  1482 1663 A0 01			ldy #PLY.Y-DATAORIGIN
  1483 1665 B1 12			lda (:bp2),y
  1484 1667 8D 0C 18			sta PUTCHAR.Y
  1485 166A A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1486 166C B1 12			lda (:bp2),y
  1487 166E 8D 0E 18			sta PUTCHAR.C
  1488 1671 A5 58			lda T0B
  1489 1673 8D 0D 18			sta PUTCHAR.V
  1490 1676 20 71 12			jsr PUTCHAR
  1491
  1492 				; optimize OK (main.pas), line = 232
  1493
  1494 1679 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1495 1683 A0 04			ldy #PLY.DIR-DATAORIGIN
  1496 1685 A5 59			lda NEWDIR
  1497 1687 91 12			sta (:bp2),y
  1498
  1499 				; optimize OK (main.pas), line = 234
  1500
  1501 1689 A5 59			lda NEWDIR
  1502 168B 8D 27 18			sta @CASETMP_0005
  1503 168E C9 01			cmp #$01
  1504 1690 D0 16			jne l_05ED
  1505 1692			@
  1506
  1507 				; optimize OK (main.pas), line = 235
  1508
  1509 1692 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1510 169C A0 01			ldy #PLY.Y-DATAORIGIN
  1511 169E B1 12			lda (:bp2),y
  1512 16A0 38 E9 01			sub #$01
  1513 16A3 91 12			sta (:bp2),y
  1514
  1515 16A5 4C F3 16			jmp a_0005
  1516 16A8			l_05ED
  1517 16A8 C9 02			cmp #$02
  1518 16AA D0 16			jne l_05F7
  1519 16AC			@
  1520
  1521 				; optimize OK (main.pas), line = 236
  1522
  1523 16AC AC 24 18 84 12 AC + 	mwy PLY :bp2
  1524 16B6 A0 01			ldy #PLY.Y-DATAORIGIN
  1525 16B8 B1 12			lda (:bp2),y
  1526 16BA 18 69 01			add #$01
  1527 16BD 91 12			sta (:bp2),y
  1528
  1529 16BF 4C F3 16			jmp a_0005
  1530 16C2			l_05F7
  1531 16C2 C9 04			cmp #$04
  1532 16C4 D0 16			jne l_0601
  1533 16C6			@
  1534
  1535 				; optimize OK (main.pas), line = 237
  1536
  1537 16C6 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1538 16D0 A0 00			ldy #PLY.X-DATAORIGIN
  1539 16D2 B1 12			lda (:bp2),y
  1540 16D4 38 E9 01			sub #$01
  1541 16D7 91 12			sta (:bp2),y
  1542
  1543 16D9 4C F3 16			jmp a_0005
  1544 16DC			l_0601
  1545 16DC C9 08			cmp #$08
  1546 16DE D0 13			jne l_060B
  1547 16E0			@
  1548
  1549 				; optimize OK (main.pas), line = 238
  1550
  1551 16E0 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1552 16EA A0 00			ldy #PLY.X-DATAORIGIN
  1553 16EC B1 12			lda (:bp2),y
  1554 16EE 18 69 01			add #$01
  1555 16F1 91 12			sta (:bp2),y
  1556
  1557 16F3			l_060B
  1558 16F3			a_0005
  1559
  1560 				; optimize OK (main.pas), line = 241
  1561
  1562 16F3 AC 24 18 84 12 AC + 	mwy PLY :bp2
  1563 16FD A0 00			ldy #PLY.X-DATAORIGIN
  1564 16FF B1 12			lda (:bp2),y
  1565 1701 8D 0B 18			sta PUTCHAR.X
  1566 1704 A0 01			ldy #PLY.Y-DATAORIGIN
  1567 1706 B1 12			lda (:bp2),y
  1568 1708 8D 0C 18			sta PUTCHAR.Y
  1569 170B A0 02			ldy #PLY.HEAD-DATAORIGIN
  1570 170D B1 12			lda (:bp2),y
  1571 170F 8D 0D 18			sta PUTCHAR.V
  1572 1712 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1573 1714 B1 12			lda (:bp2),y
  1574 1716 8D 0E 18			sta PUTCHAR.C
  1575 1719 20 71 12			jsr PUTCHAR
  1576 171C			l_0490
  1577 171C			l_0455
  1578
  1579 				; ------------------------------------------------------------
  1580
  1581 = 1822			P	= DATAORIGIN+$0046
  1582 = 1824			PLY	= DATAORIGIN+$0048
  1583 = 17DC			PLY.X	= DATAORIGIN+$0000
  1584 = 17DD			PLY.Y	= DATAORIGIN+$0001
  1585 = 17DE			PLY.HEAD	= DATAORIGIN+$0002
  1586 = 17DF			PLY.COLOUR	= DATAORIGIN+$0003
  1587 = 17E0			PLY.DIR	= DATAORIGIN+$0004
  1588 = 17E1			PLY.BRAIN	= DATAORIGIN+$0005
  1589 = 17E2			PLY.ISDEAD	= DATAORIGIN+$0006
  1590 = 1826			@CASETMP_0004	= DATAORIGIN+$004A
  1591 = 1827			@CASETMP_0005	= DATAORIGIN+$004B
  1592
  1593 = 1822			@VarData	= P
  1594 = 0010			@VarDataSize	= 16
  1595
  1596 171C			@exit
  1597 					.ifdef @new
  1598 					lda <@VarData
  1599 					sta :ztmp
  1600 					lda >@VarData
  1601 					ldy #@VarDataSize-1
  1602 					jmp @FreeMem
  1603 					els
  1604 171C 60				rts						; ret
  1605 					eif
  1606 				.endl
  1607 171D			l_0007
  1608
  1609 				; optimize OK (main.pas), line = 252
  1610
  1611 171D A9 00			lda #$00
  1612 171F 8D EC 17			sta GAMEOVER
  1613
  1614 				; --- RepeatUntilProlog
  1615 1722			l_0629
  1616
  1617 				; optimize FAIL ('INITPLAYERS', main.pas), line = 255
  1618
  1619 1722 20 E6 11			jsr INITPLAYERS
  1620
  1621 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 256
  1622
  1623 1725 20 61 11			jsr INITPLAYFIELD
  1624
  1625 				; optimize OK (main.pas), line = 258
  1626
  1627 1728 A9 03			lda #$03
  1628 172A 8D F4 17			sta PLAYER1.BRAIN
  1629
  1630 				; optimize OK (main.pas), line = 259
  1631
  1632 172D A9 01			lda #$01
  1633 172F 8D FB 17			sta PLAYER2.BRAIN
  1634
  1635 				; optimize OK (main.pas), line = 260
  1636
  1637 1732 A9 02			lda #$02
  1638 1734 8D 02 18			sta PLAYER3.BRAIN
  1639
  1640 				; optimize OK (main.pas), line = 261
  1641
  1642 1737 A9 04			lda #$04
  1643 1739 8D 09 18			sta PLAYER4.BRAIN
  1644
  1645 				; --- RepeatUntilProlog
  1646 173C			l_063C
  1647
  1648 				; optimize OK (main.pas), line = 264
  1649
  1650 173C A9 01			lda #$01
  1651 173E 8D E8 17			sta SYSTEM.PAUSE_006B.N
  1652 1741 A9 00			lda #$00
  1653 1743 8D E9 17			sta SYSTEM.PAUSE_006B.N+1
  1654 1746 20 13 11			jsr SYSTEM.PAUSE_006B
  1655 1749 AD D2 17			lda PLAYER1
  1656 174C 8D 22 18			sta PLAYERMOVE.P
  1657 174F AD D3 17			lda PLAYER1+1
  1658 1752 8D 23 18			sta PLAYERMOVE.P+1
  1659 1755 20 E7 14			jsr PLAYERMOVE
  1660
  1661 				; optimize OK (main.pas), line = 265
  1662
  1663 1758 A9 01			lda #$01
  1664 175A 8D E8 17			sta SYSTEM.PAUSE_006B.N
  1665 175D A9 00			lda #$00
  1666 175F 8D E9 17			sta SYSTEM.PAUSE_006B.N+1
  1667 1762 20 13 11			jsr SYSTEM.PAUSE_006B
  1668 1765 AD D4 17			lda PLAYER2
  1669 1768 8D 22 18			sta PLAYERMOVE.P
  1670 176B AD D5 17			lda PLAYER2+1
  1671 176E 8D 23 18			sta PLAYERMOVE.P+1
  1672 1771 20 E7 14			jsr PLAYERMOVE
  1673
  1674 				; optimize OK (main.pas), line = 266
  1675
  1676 1774 A9 01			lda #$01
  1677 1776 8D E8 17			sta SYSTEM.PAUSE_006B.N
  1678 1779 A9 00			lda #$00
  1679 177B 8D E9 17			sta SYSTEM.PAUSE_006B.N+1
  1680 177E 20 13 11			jsr SYSTEM.PAUSE_006B
  1681 1781 AD D6 17			lda PLAYER3
  1682 1784 8D 22 18			sta PLAYERMOVE.P
  1683 1787 AD D7 17			lda PLAYER3+1
  1684 178A 8D 23 18			sta PLAYERMOVE.P+1
  1685 178D 20 E7 14			jsr PLAYERMOVE
  1686
  1687 				; optimize OK (main.pas), line = 267
  1688
  1689 1790 A9 01			lda #$01
  1690 1792 8D E8 17			sta SYSTEM.PAUSE_006B.N
  1691 1795 A9 00			lda #$00
  1692 1797 8D E9 17			sta SYSTEM.PAUSE_006B.N+1
  1693 179A 20 13 11			jsr SYSTEM.PAUSE_006B
  1694 179D AD D8 17			lda PLAYER4
  1695 17A0 8D 22 18			sta PLAYERMOVE.P
  1696 17A3 AD D9 17			lda PLAYER4+1
  1697 17A6 8D 23 18			sta PLAYERMOVE.P+1
  1698 17A9 20 E7 14			jsr PLAYERMOVE
  1699
  1700 				; optimize OK (main.pas), line = 268
  1701
  1702 17AC AD EE 17			lda ALIVE
  1703 17AF F0 04			jeq l_063Cx
  1704 17B1 C9 FF			cmp #$FF
  1705 17B3 D0 87			jne l_063C
  1706 17B5			l_063Cx
  1707
  1708 				; optimize OK (main.pas), line = 270
  1709
  1710 17B5 A9 64			lda #$64
  1711 17B7 8D E8 17			sta SYSTEM.PAUSE_006B.N
  1712 17BA A9 00			lda #$00
  1713 17BC 8D E9 17			sta SYSTEM.PAUSE_006B.N+1
  1714 17BF 20 13 11			jsr SYSTEM.PAUSE_006B
  1715
  1716 				; optimize OK (main.pas), line = 271
  1717
  1718 17C2 AD EC 17			lda GAMEOVER
  1719 17C5 D0 03 4C 22 17		jeq l_0629
  1720
  1721 				; ------------------------------------------------------------
  1722
  1723 = 0800			ATTRIBUTE_ADDR	= $0800
  1724 = 0C00			SCREEN_ADDR	= $0C00
  1725 = 0020			EMPTY	= $20
  1726 = 00A0			WALL	= $A0
  1727 = 0041			WALL_COLOUR	= $41
  1728 = 0051			PLY_HEAD	= $51
  1729 = 0057			PLY_CRASH	= $57
  1730 = 0042			PLY_TAIL_UD	= $42
  1731 = 0040			PLY_TAIL_LR	= $40
  1732 = 007D			PLY_TAIL_RD	= $7D
  1733 = 006E			PLY_TAIL_RU	= $6E
  1734 = 006D			PLY_TAIL_LD	= $6D
  1735 = 0070			PLY_TAIL_LU	= $70
  1736 = 005F			PLY1_COLOUR	= $5F
  1737 = 005D			PLY2_COLOUR	= $5D
  1738 = 0071			PLY3_COLOUR	= $71
  1739 = 0055			PLY4_COLOUR	= $55
  1740 = 0001			JOY_UP	= $01
  1741 = 0002			JOY_DOWN	= $02
  1742 = 0004			JOY_LEFT	= $04
  1743 = 0008			JOY_RIGHT	= $08
  1744 = 0040			JOY_FIRE	= $40
  1745 = 0002			JOY_SELECT_1	= $02
  1746 = 0004			JOY_SELECT_2	= $04
  1747 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1748 17CA			.var MUL40	= adr.MUL40 .word
  1749 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1750 17CA			.var DIRECTION	= adr.DIRECTION .word
  1751 = FD30			KEY_PIO	= $FD30
  1752 = FF08			JOY	= $FF08
  1753 = FF15			BORDERCOLOR	= $FF15
  1754 = FF19			BGCOLOR	= $FF19
  1755 = 0058			T0B	= $58
  1756 = 0059			NEWDIR	= $59
  1757 = 005A			T0N	= $5A
  1758 = 005B			T0W	= $5B
  1759 = 17EC			GAMEOVER	= DATAORIGIN+$0010
  1760 = 17ED			AVAILDIR	= DATAORIGIN+$0011
  1761 = 17EE			ALIVE	= DATAORIGIN+$0012
  1762 = 17EF			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  1763 17CA			.var PLAYER1	= adr.PLAYER1 .word
  1764 = 17EF			PLAYER1.X	= DATAORIGIN+$0013
  1765 = 17F0			PLAYER1.Y	= DATAORIGIN+$0014
  1766 = 17F1			PLAYER1.HEAD	= DATAORIGIN+$0015
  1767 = 17F2			PLAYER1.COLOUR	= DATAORIGIN+$0016
  1768 = 17F3			PLAYER1.DIR	= DATAORIGIN+$0017
  1769 = 17F4			PLAYER1.BRAIN	= DATAORIGIN+$0018
  1770 = 17F5			PLAYER1.ISDEAD	= DATAORIGIN+$0019
  1771 = 17F6			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  1772 17CA			.var PLAYER2	= adr.PLAYER2 .word
  1773 = 17F6			PLAYER2.X	= DATAORIGIN+$001A
  1774 = 17F7			PLAYER2.Y	= DATAORIGIN+$001B
  1775 = 17F8			PLAYER2.HEAD	= DATAORIGIN+$001C
  1776 = 17F9			PLAYER2.COLOUR	= DATAORIGIN+$001D
  1777 = 17FA			PLAYER2.DIR	= DATAORIGIN+$001E
  1778 = 17FB			PLAYER2.BRAIN	= DATAORIGIN+$001F
  1779 = 17FC			PLAYER2.ISDEAD	= DATAORIGIN+$0020
  1780 = 17FD			adr.PLAYER3	= [DATAORIGIN+$0021] .array [6]
  1781 17CA			.var PLAYER3	= adr.PLAYER3 .word
  1782 = 17FD			PLAYER3.X	= DATAORIGIN+$0021
  1783 = 17FE			PLAYER3.Y	= DATAORIGIN+$0022
  1784 = 17FF			PLAYER3.HEAD	= DATAORIGIN+$0023
  1785 = 1800			PLAYER3.COLOUR	= DATAORIGIN+$0024
  1786 = 1801			PLAYER3.DIR	= DATAORIGIN+$0025
  1787 = 1802			PLAYER3.BRAIN	= DATAORIGIN+$0026
  1788 = 1803			PLAYER3.ISDEAD	= DATAORIGIN+$0027
  1789 = 1804			adr.PLAYER4	= [DATAORIGIN+$0028] .array [6]
  1790 17CA			.var PLAYER4	= adr.PLAYER4 .word
  1791 = 1804			PLAYER4.X	= DATAORIGIN+$0028
  1792 = 1805			PLAYER4.Y	= DATAORIGIN+$0029
  1793 = 1806			PLAYER4.HEAD	= DATAORIGIN+$002A
  1794 = 1807			PLAYER4.COLOUR	= DATAORIGIN+$002B
  1795 = 1808			PLAYER4.DIR	= DATAORIGIN+$002C
  1796 = 1809			PLAYER4.BRAIN	= DATAORIGIN+$002D
  1797 = 180A			PLAYER4.ISDEAD	= DATAORIGIN+$002E
  1798 17CA			@exit
  1799
  1800 17CA A2 00		@halt	ldx #$00
  1801 17CC 9A				txs
  1802
  1803 17CD 60				rts
  1804
  1805 				; ------------------------------------------------------------
  1806
  1807 				; ------------------------------------------------------------
  1808
  1809 17CE			.local	@DEFINES
  1810 17CE			C4P
  1811 				.endl
  1812
  1813 17CE			.local	@RESOURCE
  1814 				.endl
  1815
  1816 = 17CE 0E 10		MUL40
  1816 = 17D0 40 10		DIRECTION
  1816 = 17D2 EF 17		PLAYER1
  1816 = 17D4 F6 17		PLAYER2
  1816 = 17D6 FD 17		PLAYER3
  1816 = 17D8 04 18		PLAYER4
  1816 				.endl							; MAIN
  1817
  1818 				; ------------------------------------------------------------
  1819 				; ------------------------------------------------------------
  1820
  1821 				.macro	UNITINITIALIZATION
  1822 				
  1823 					.ifdef MAIN.SYSTEM.@UnitInit
  1824 					jsr MAIN.SYSTEM.@UnitInit
  1825 					eif
  1826 				.endm
  1827
  1828 				; ------------------------------------------------------------
  1829
  1830 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1831 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1831 				SYSTEM: $10C5..$1160
  1832 					eif
  1833
  1834 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1834 				CODE: $100E..$17CD
  1835
  1836 				; ------------------------------------------------------------
  1837
  1838 17DA				.align $04
  1839
  1840 17DC			DATAORIGIN
  1841 17DC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1842
  1843 = 0006			VARINITSIZE	= *-DATAORIGIN
  1844 = 004C			VARDATASIZE	= 76
  1845
  1846 = 1828			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1847
  1848 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1848 				DATA: $17DC..$1828
  1849
  1850 				; ------------------------------------------------------------
  1851
  1852 				.macro	STATICDATA
  1853 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1854 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1855 				.by  $C0 $03 $01 $02 $04 $08
  1856 				.endm
  1857
  1858 					end
