mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 84 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 005D			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AA2			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A3			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D FF 29 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 FF 85 02 A9 2A + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 1C 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D A7 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD A7 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AA7			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AA7			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD A8 2A		loop  lda n
   325 112D 0D A9 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD A8 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AA8			N	= DATAORIGIN+$000C
   339
   340 = 2AA8			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D AA 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD AA 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C AB 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD AB 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2AAA			RANGE	= DATAORIGIN+$000E
   401 = 2AAB			RESULT	= DATAORIGIN+$000F
   402
   403 = 2AAA			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2A9C			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2A9E			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AA0			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AA1			FILEMODE	= DATAORIGIN+$0005
   468 = 2AA2			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AA3			IORESULT	= DATAORIGIN+$0007
   470 = 2AA4			EOLN	= DATAORIGIN+$0008
   471 = 2AA5			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD DF 2A			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D DE 2A			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 08			adc #$08
   487 118B 85 5E			sta T0W+1
   488
   489 				; optimize OK (tools.inc), line = 6
   490
   491 118D 85 11			sta :bp+1
   492 118F A4 5D			ldy T0W
   493 1191 AD E1 2A			lda C
   494 1194 91 10			sta (:bp),y
   495 1196 A5 5E			lda T0W+1
   496 1198 18 69 04			add #$04
   497 119B 85 11			sta :bp+1
   498 119D AD E0 2A			lda V
   499 11A0 91 10			sta (:bp),y
   500
   501 				; ------------------------------------------------------------
   502
   503 = 2ADE			X	= DATAORIGIN+$0042
   504 = 2ADF			Y	= DATAORIGIN+$0043
   505 = 2AE0			V	= DATAORIGIN+$0044
   506 = 2AE1			C	= DATAORIGIN+$0045
   507
   508 = 2ADE			@VarData	= X
   509 = 0004			@VarDataSize	= 4
   510
   511 11A2			@exit
   512 					.ifdef @new
   513 					lda <@VarData
   514 					sta :ztmp
   515 					lda >@VarData
   516 					ldy #@VarDataSize-1
   517 					jmp @FreeMem
   518 					els
   519 11A2 60				rts						; ret
   520 					eif
   521 				.endl
   522
   523 11A3			.local	PUTCHAR_0098					; PROCEDURE | OVERLOAD
   524
   525 				; optimize OK (tools.inc), line = 11
   526
   527 11A3 AD E3 2A			lda Y
   528 11A6 0A				asl @
   529 11A7 A8				tay
   530 11A8 B9 0E 10			lda adr.MUL40,y
   531 11AB 18 6D E2 2A			add X
   532 11AF 85 5D			sta T0W
   533 11B1 B9 0F 10			lda adr.MUL40+1,y
   534 11B4 69 0C			adc #$0C
   535 11B6 85 5E			sta T0W+1
   536 11B8 A4 5E			ldy T0W+1
   537 11BA 84 11			sty :bp+1
   538 11BC A4 5D			ldy T0W
   539 11BE AD E4 2A			lda V
   540 11C1 91 10			sta (:bp),y
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2AE2			X	= DATAORIGIN+$0046
   545 = 2AE3			Y	= DATAORIGIN+$0047
   546 = 2AE4			V	= DATAORIGIN+$0048
   547
   548 = 2AE2			@VarData	= X
   549 = 0003			@VarDataSize	= 3
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	SHOWSCORE					; PROCEDURE
   564
   565 				; optimize OK (tools.inc), line = 18
   566
   567 11C4 AD B1 2A			lda PLAYER1.COLOUR
   568 11C7 8D E1 2A			sta PUTCHAR_0072.C
   569 11CA AD B4 2A			lda PLAYER1.SCORE
   570 11CD 8D E0 2A			sta PUTCHAR_0072.V
   571 11D0 A9 00			lda #$00
   572 11D2 8D DF 2A			sta PUTCHAR_0072.Y
   573 11D5 A9 1E			lda #$1E
   574 11D7 8D DE 2A			sta PUTCHAR_0072.X
   575 11DA 20 78 11			jsr PUTCHAR_0072
   576
   577 				; optimize OK (tools.inc), line = 19
   578
   579 11DD AD B9 2A			lda PLAYER2.COLOUR
   580 11E0 8D E1 2A			sta PUTCHAR_0072.C
   581 11E3 AD BC 2A			lda PLAYER2.SCORE
   582 11E6 8D E0 2A			sta PUTCHAR_0072.V
   583 11E9 A9 00			lda #$00
   584 11EB 8D DF 2A			sta PUTCHAR_0072.Y
   585 11EE A9 20			lda #$20
   586 11F0 8D DE 2A			sta PUTCHAR_0072.X
   587 11F3 20 78 11			jsr PUTCHAR_0072
   588
   589 				; optimize OK (tools.inc), line = 20
   590
   591 11F6 AD C1 2A			lda PLAYER3.COLOUR
   592 11F9 8D E1 2A			sta PUTCHAR_0072.C
   593 11FC AD C4 2A			lda PLAYER3.SCORE
   594 11FF 8D E0 2A			sta PUTCHAR_0072.V
   595 1202 A9 00			lda #$00
   596 1204 8D DF 2A			sta PUTCHAR_0072.Y
   597 1207 A9 22			lda #$22
   598 1209 8D DE 2A			sta PUTCHAR_0072.X
   599 120C 20 78 11			jsr PUTCHAR_0072
   600
   601 				; optimize OK (tools.inc), line = 21
   602
   603 120F AD C9 2A			lda PLAYER4.COLOUR
   604 1212 8D E1 2A			sta PUTCHAR_0072.C
   605 1215 AD CC 2A			lda PLAYER4.SCORE
   606 1218 8D E0 2A			sta PUTCHAR_0072.V
   607 121B A9 00			lda #$00
   608 121D 8D DF 2A			sta PUTCHAR_0072.Y
   609 1220 A9 24			lda #$24
   610 1222 8D DE 2A			sta PUTCHAR_0072.X
   611 1225 20 78 11			jsr PUTCHAR_0072
   612 1228			@exit
   613 					.ifdef @new
   614 					lda <@VarData
   615 					sta :ztmp
   616 					lda >@VarData
   617 					ldy #@VarDataSize-1
   618 					jmp @FreeMem
   619 					els
   620 1228 60				rts						; ret
   621 					eif
   622 				.endl
   623
   624 1229			.local	CHECKAVAILDIR					; PROCEDURE
   625
   626 				; optimize OK (tools.inc), line = 28
   627
   628 1229 A9 00			lda #$00
   629 122B 85 5C			sta AVAILDIR
   630
   631 				; optimize OK (tools.inc), line = 29
   632
   633 122D AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   634 1237 A0 01			ldy #PLY.Y-DATAORIGIN
   635 1239 B1 12			lda (:bp2),y
   636 123B 0A				asl @
   637 123C A8				tay
   638 123D A9 00			lda #$00
   639 123F 18 79 0E 10			add adr.MUL40,y
   640 1243 85 21			sta :STACKORIGIN+9
   641 1245 A9 0C			lda #$0C
   642 1247 79 0F 10			adc adr.MUL40+1,y
   643 124A 85 31			sta :STACKORIGIN+STACKWIDTH+9
   644 124C A0 00			ldy #PLY.X-DATAORIGIN
   645 124E A5 21			lda :STACKORIGIN+9
   646 1250 18 71 12			add (:bp2),y
   647 1253 85 5D			sta T0W
   648 1255 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   649 1257 69 00			adc #$00
   650 1259 85 5E			sta T0W+1
   651
   652 				; optimize OK (tools.inc), line = 31
   653
   654 125B A5 5D			lda T0W
   655 125D 38 E9 28			sub #$28
   656 1260 85 21			sta :STACKORIGIN+9
   657 1262 A5 5E			lda T0W+1
   658 1264 E9 00			sbc #$00
   659 1266 85 11			sta :bp+1
   660 1268 A4 21			ldy :STACKORIGIN+9
   661 126A B1 10			lda (:bp),y
   662 126C C9 20			cmp #$20
   663 126E D0 06			jne l_010B
   664 1270 A5 5C			lda AVAILDIR
   665 1272 09 01			ora #$01
   666 1274 85 5C			sta AVAILDIR
   667 1276			l_010B
   668
   669 				; optimize OK (tools.inc), line = 32
   670
   671 1276 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   672 127E A0 28			ldy #$28
   673 1280 B1 12			lda (:bp2),y
   674 1282 C9 20			cmp #$20
   675 1284 D0 06			jne l_012E
   676 1286 A5 5C			lda AVAILDIR
   677 1288 09 02			ora #$02
   678 128A 85 5C			sta AVAILDIR
   679 128C			l_012E
   680
   681 				; optimize OK (tools.inc), line = 33
   682
   683 128C A5 5D			lda T0W
   684 128E 38 E9 01			sub #$01
   685 1291 85 21			sta :STACKORIGIN+9
   686 1293 A5 5E			lda T0W+1
   687 1295 E9 00			sbc #$00
   688 1297 85 11			sta :bp+1
   689 1299 A4 21			ldy :STACKORIGIN+9
   690 129B B1 10			lda (:bp),y
   691 129D C9 20			cmp #$20
   692 129F D0 06			jne l_0151
   693 12A1 A5 5C			lda AVAILDIR
   694 12A3 09 04			ora #$04
   695 12A5 85 5C			sta AVAILDIR
   696 12A7			l_0151
   697
   698 				; optimize OK (tools.inc), line = 34
   699
   700 12A7 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   701 12AF A0 01			ldy #$01
   702 12B1 B1 12			lda (:bp2),y
   703 12B3 C9 20			cmp #$20
   704 12B5 D0 06			jne l_0174
   705 12B7 A5 5C			lda AVAILDIR
   706 12B9 09 08			ora #$08
   707 12BB 85 5C			sta AVAILDIR
   708 12BD			l_0174
   709 12BD			@exit
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					els
   717 12BD 60				rts						; ret
   718 					eif
   719 				.endl
   720
   721 12BE			.local	ANIMATEOBSTACLES				; PROCEDURE
   722
   723 				; optimize FAIL (0, tools.inc), line = 43
   724
   725 12BE EE E5 2A			inc COUNTER
   726
   727 				; optimize OK (tools.inc), line = 44
   728
   729 12C1 AD E5 2A			lda COUNTER
   730 12C4 29 01			and #$01
   731 12C6 F0 08			jeq l_019F
   732 12C8 A9 56			lda #$56
   733 12CA 8D E6 2A			sta OBST
   734 12CD 4C D5 12			jmp l_01AD
   735 12D0			l_019F
   736 12D0 A9 5B			lda #$5B
   737 12D2 8D E6 2A			sta OBST
   738 12D5			l_01AD
   739
   740 				; optimize OK (tools.inc), line = 45
   741
   742 12D5 A9 07			lda #$07
   743 12D7 85 59			sta I0B
   744
   745 12D9			l_01BA
   746 				; --- ForToDoCondition
   747 12D9 A5 59			lda I0B
   748 12DB 0A				asl @
   749 12DC A8				tay
   750 12DD B9 CE 2A			lda adr.OBSTACLES,y
   751 12E0 85 21			sta :STACKORIGIN+9
   752 12E2 B9 CF 2A			lda adr.OBSTACLES+1,y
   753 12E5 85 11			sta :bp+1
   754 12E7 A4 21			ldy :STACKORIGIN+9
   755 12E9 AD E6 2A			lda OBST
   756 12EC 91 10			sta (:bp),y
   757 12EE C6 59			dec I0B
   758 12F0 10 E7			jpl l_01BA
   759 12F2			l_01C8
   760
   761 				; ------------------------------------------------------------
   762
   763 = 2AE5			COUNTER	= DATAORIGIN+$0049
   764 = 2AE6			OBST	= DATAORIGIN+$004A
   765 = 0000			@FORTMP_01B7	= $00
   766
   767 = 2AE5			@VarData	= COUNTER
   768 = 0002			@VarDataSize	= 2
   769
   770 12F2			@exit
   771 					.ifdef @new
   772 					lda <@VarData
   773 					sta :ztmp
   774 					lda >@VarData
   775 					ldy #@VarDataSize-1
   776 					jmp @FreeMem
   777 					els
   778 12F2 60				rts						; ret
   779 					eif
   780 				.endl
   781
   782 12F3			.local	CALCOBSTACLEADDR				; FUNCTION
   783
   784 				; optimize OK (tools.inc), line = 52
   785
   786 12F3 AD E8 2A			lda Y
   787 12F6 0A				asl @
   788 12F7 A8				tay
   789 12F8 AD E7 2A			lda X
   790 12FB 18 79 0E 10			add adr.MUL40,y
   791 12FF 8D E9 2A			sta RESULT
   792 1302 A9 0C			lda #$0C
   793 1304 79 0F 10			adc adr.MUL40+1,y
   794 1307 8D EA 2A			sta RESULT+1
   795 130A			@exit
   796
   797 				; ------------------------------------------------------------
   798
   799 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   800 				; as Pointer
   801
   802 130A E8				inx
   803 130B AD E9 2A 95 18		mva RESULT :STACKORIGIN,x
   804 1310 AD EA 2A 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   805
   806 					.ifdef @new
   807 					lda <@VarData
   808 					sta :ztmp
   809 					lda >@VarData
   810 					ldy #@VarDataSize-1
   811 					jmp @FreeMem
   812 					eif
   813
   814 				; ------------------------------------------------------------
   815
   816 = 2AE7			X	= DATAORIGIN+$004B
   817 = 2AE8			Y	= DATAORIGIN+$004C
   818 = 2AE9			RESULT	= DATAORIGIN+$004D
   819
   820 = 2AE7			@VarData	= X
   821 = 0004			@VarDataSize	= 4
   822
   823 1315 60				rts						; ret
   824 				.endl
   825
   826 1316			.local	SAVEOBSTACLES					; PROCEDURE
   827
   828 				; optimize OK (tools.inc), line = 59
   829
   830 1316 A9 07			lda #$07
   831 1318 85 59			sta I0B
   832
   833 131A			l_01FB
   834 				; --- ForToDoCondition
   835
   836 				; optimize OK (tools.inc), line = 60
   837
   838 131A A5 59			lda I0B
   839 131C 0A				asl @
   840 131D A8				tay
   841 131E B9 CF 2A			lda adr.OBSTACLES+1,y
   842 1321 C9 00			cmp #$00
   843 1323 D0 05			bne @+
   844 1325 B9 CE 2A			lda adr.OBSTACLES,y
   845 1328 C9 7E			cmp #$7E
   846 132A			@
   847 132A F0 29			jeq l_021D
   848
   849 				; optimize OK (tools.inc), line = 61
   850
   851 132C B9 CE 2A			lda adr.OBSTACLES,y
   852 132F 85 21			sta :STACKORIGIN+9
   853 1331 B9 CF 2A			lda adr.OBSTACLES+1,y
   854 1334 85 11			sta :bp+1
   855 1336 A4 21			ldy :STACKORIGIN+9
   856 1338 A9 56			lda #$56
   857 133A 91 10			sta (:bp),y
   858
   859 				; optimize OK (tools.inc), line = 62
   860
   861 133C A5 59			lda I0B
   862 133E 0A				asl @
   863 133F A8				tay
   864 1340 B9 CE 2A			lda adr.OBSTACLES,y
   865 1343 38 E9 00			sub #$00
   866 1346 85 21			sta :STACKORIGIN+9
   867 1348 B9 CF 2A			lda adr.OBSTACLES+1,y
   868 134B E9 04			sbc #$04
   869 134D 85 11			sta :bp+1
   870 134F A4 21			ldy :STACKORIGIN+9
   871 1351 A9 35			lda #$35
   872 1353 91 10			sta (:bp),y
   873 1355			l_021D
   874
   875 				; --- ForToDoEpilog
   876 1355 C6 59			dec I0B
   877 1357 10 C1			jpl l_01FB
   878 1359			l_0209
   879
   880 				; ------------------------------------------------------------
   881
   882 = 0000			@FORTMP_01F8	= $00
   883 1359			@exit
   884 					.ifdef @new
   885 					lda <@VarData
   886 					sta :ztmp
   887 					lda >@VarData
   888 					ldy #@VarDataSize-1
   889 					jmp @FreeMem
   890 					els
   891 1359 60				rts						; ret
   892 					eif
   893 				.endl
   894
   895 135A			.local	DRAWTAIL					; PROCEDURE
   896
   897 				; optimize OK (tools.inc), line = 71
   898
   899 135A AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   900 1364 A0 04			ldy #PLY.DIR-DATAORIGIN
   901 1366 B1 12			lda (:bp2),y
   902 1368 C5 5B			cmp NEWDIR
   903 136A D0 14			jne l_024F
   904
   905 				; optimize OK (tools.inc), line = 72
   906
   907 136C A5 5B			lda NEWDIR
   908 136E 29 0C			and #$0C
   909 1370 F0 07			jeq l_0266
   910 1372 A9 40			lda #$40
   911 1374 85 58			sta T0B
   912 1376 4C 7D 13			jmp l_0274
   913 1379			l_0266
   914 1379 A9 42			lda #$42
   915 137B 85 58			sta T0B
   916 137D			l_0274
   917 137D 4C F0 13			jmp l_0281
   918 1380			l_024F
   919
   920 				; optimize OK (tools.inc), line = 74
   921
   922 1380 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   923 138A A0 04			ldy #PLY.DIR-DATAORIGIN
   924 138C B1 12			lda (:bp2),y
   925 138E 29 0A			and #$0A
   926 1390 F0 0A			jeq l_02A7
   927 1392 A5 5B			lda NEWDIR
   928 1394 29 05			and #$05
   929 1396 F0 04			jeq l_02A7
   930 1398 A9 7D			lda #$7D
   931 139A 85 58			sta T0B
   932 139C			l_02A7
   933
   934 				; optimize OK (tools.inc), line = 75
   935
   936 139C AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   937 13A6 A0 04			ldy #PLY.DIR-DATAORIGIN
   938 13A8 B1 12			lda (:bp2),y
   939 13AA 29 09			and #$09
   940 13AC F0 0A			jeq l_02D4
   941 13AE A5 5B			lda NEWDIR
   942 13B0 29 06			and #$06
   943 13B2 F0 04			jeq l_02D4
   944 13B4 A9 6E			lda #$6E
   945 13B6 85 58			sta T0B
   946 13B8			l_02D4
   947
   948 				; optimize OK (tools.inc), line = 76
   949
   950 13B8 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   951 13C2 A0 04			ldy #PLY.DIR-DATAORIGIN
   952 13C4 B1 12			lda (:bp2),y
   953 13C6 29 06			and #$06
   954 13C8 F0 0A			jeq l_0301
   955 13CA A5 5B			lda NEWDIR
   956 13CC 29 09			and #$09
   957 13CE F0 04			jeq l_0301
   958 13D0 A9 6D			lda #$6D
   959 13D2 85 58			sta T0B
   960 13D4			l_0301
   961
   962 				; optimize OK (tools.inc), line = 77
   963
   964 13D4 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   965 13DE A0 04			ldy #PLY.DIR-DATAORIGIN
   966 13E0 B1 12			lda (:bp2),y
   967 13E2 29 05			and #$05
   968 13E4 F0 0A			jeq l_032E
   969 13E6 A5 5B			lda NEWDIR
   970 13E8 29 0A			and #$0A
   971 13EA F0 04			jeq l_032E
   972 13EC A9 70			lda #$70
   973 13EE 85 58			sta T0B
   974 13F0			l_032E
   975 13F0			l_0281
   976
   977 				; optimize OK (tools.inc), line = 79
   978
   979 13F0 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
   980 13FA A0 00			ldy #PLY.X-DATAORIGIN
   981 13FC B1 12			lda (:bp2),y
   982 13FE 8D E2 2A			sta PUTCHAR_0098.X
   983 1401 A0 01			ldy #PLY.Y-DATAORIGIN
   984 1403 B1 12			lda (:bp2),y
   985 1405 8D E3 2A			sta PUTCHAR_0098.Y
   986 1408 A5 58			lda T0B
   987 140A 8D E4 2A			sta PUTCHAR_0098.V
   988 140D 20 A3 11			jsr PUTCHAR_0098
   989 1410			@exit
   990 					.ifdef @new
   991 					lda <@VarData
   992 					sta :ztmp
   993 					lda >@VarData
   994 					ldy #@VarDataSize-1
   995 					jmp @FreeMem
   996 					els
   997 1410 60				rts						; ret
   998 					eif
   999 				.endl
  1000
  1001 1411			.local	CHECKJOYSTATUS					; PROCEDURE
  1002
  1003 				; optimize OK (tools.inc), line = 86
  1004
  1005 1411 A9 02			lda #$02
  1006 1413 8D 08 FF			sta JOY
  1007 1416 A9 FF			lda #$FF
  1008 1418 8D 30 FD			sta KEYSCAN
  1009
  1010 				; optimize OK (tools.inc), line = 87
  1011
  1012 141B AD 08 FF			lda JOY
  1013 141E 49 FF			eor #$FF
  1014 1420 85 63			sta JOYSTATUS
  1015 1422			@exit
  1016 					.ifdef @new
  1017 					lda <@VarData
  1018 					sta :ztmp
  1019 					lda >@VarData
  1020 					ldy #@VarDataSize-1
  1021 					jmp @FreeMem
  1022 					els
  1023 1422 60				rts						; ret
  1024 					eif
  1025 				.endl
  1026
  1027 1423			.local	SETPLAYER					; PROCEDURE
  1028
  1029 				; optimize OK (tools.inc), line = 94
  1030
  1031 1423 AD EB 2A			lda P
  1032 1426 8D 8B 2A			sta PLY
  1033 1429 85 12			sta :bp2
  1034 142B AD EC 2A			lda P+1
  1035 142E 8D 8C 2A			sta PLY+1
  1036 1431 85 13			sta :bp2+1
  1037 				; optimize OK (tools.inc), line = 95
  1038 1433 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1039 1435 AD F0 2A			lda BRAIN
  1040 1438 91 12			sta (:bp2),y
  1041 143A A0 00			ldy #PLY.X-DATAORIGIN
  1042 143C AD ED 2A			lda X
  1043 143F 91 12			sta (:bp2),y
  1044 1441 A0 01			ldy #PLY.Y-DATAORIGIN
  1045 1443 AD EE 2A			lda Y
  1046 1446 91 12			sta (:bp2),y
  1047 1448 A0 04			ldy #PLY.DIR-DATAORIGIN
  1048 144A AD EF 2A			lda DIR
  1049 144D 91 12			sta (:bp2),y
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 144F A0 02			ldy #PLY.HEAD-DATAORIGIN
  1054 1451 AD F1 2A			lda HEAD
  1055 1454 91 12			sta (:bp2),y
  1056 1456 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1057 1458 AD F2 2A			lda COLOUR
  1058 145B 91 12			sta (:bp2),y
  1059 145D A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1060 145F AD F3 2A			lda ISALIVE
  1061 1462 91 12			sta (:bp2),y
  1062
  1063 				; optimize OK (tools.inc), line = 97
  1064
  1065 1464 AD F3 2A			lda ISALIVE
  1066 1467 F0 1D			jeq l_0394
  1067
  1068 				; optimize FAIL (0, tools.inc), line = 98
  1069
  1070 1469 E6 5A			inc ALIVE
  1071 146B AD F2 2A			lda COLOUR
  1072 146E 8D E1 2A			sta PUTCHAR_0072.C
  1073 1471 AD F1 2A			lda HEAD
  1074 1474 8D E0 2A			sta PUTCHAR_0072.V
  1075 1477 AD EE 2A			lda Y
  1076 147A 8D DF 2A			sta PUTCHAR_0072.Y
  1077 147D AD ED 2A			lda X
  1078 1480 8D DE 2A			sta PUTCHAR_0072.X
  1079 1483 20 78 11			jsr PUTCHAR_0072
  1080 1486			l_0394
  1081
  1082 				; ------------------------------------------------------------
  1083
  1084 = 2AEB			P	= DATAORIGIN+$004F
  1085 = 2AED			X	= DATAORIGIN+$0051
  1086 = 2AEE			Y	= DATAORIGIN+$0052
  1087 = 2AEF			DIR	= DATAORIGIN+$0053
  1088 = 2AF0			BRAIN	= DATAORIGIN+$0054
  1089 = 2AF1			HEAD	= DATAORIGIN+$0055
  1090 = 2AF2			COLOUR	= DATAORIGIN+$0056
  1091 = 2AF3			ISALIVE	= DATAORIGIN+$0057
  1092
  1093 = 2AEB			@VarData	= P
  1094 = 0009			@VarDataSize	= 9
  1095
  1096 1486			@exit
  1097 					.ifdef @new
  1098 					lda <@VarData
  1099 					sta :ztmp
  1100 					lda >@VarData
  1101 					ldy #@VarDataSize-1
  1102 					jmp @FreeMem
  1103 					els
  1104 1486 60				rts						; ret
  1105 					eif
  1106 				.endl
  1107
  1108 1487			.local	INITPLAYFIELD					; PROCEDURE
  1109
  1110 				; optimize OK (init.inc), line = 5
  1111
  1112 1487 A9 1F			lda #$1F
  1113 1489 8D 15 FF			sta BACKGROUND
  1114 148C A9 00			lda #$00
  1115 148E 8D 19 FF			sta BOREDER
  1116
  1117 				; optimize OK (init.inc), line = 6
  1118
  1119 1491 A9 20			lda #$20
  1120 1493 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  1121 1495 A9 C0			lda #$C0
  1122 1497 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  1123 1499 A9 03			lda #$03
  1124 149B 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  1125 149D A9 00			lda #$00
  1126 149F 85 08			sta SYSTEM.FILLCHAR_0056.A
  1127 14A1 A9 0C			lda #$0C
  1128 14A3 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  1129 14A5 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  1130
  1131 				; optimize OK (init.inc), line = 8
  1132
  1133 14A8 A9 27			lda #$27
  1134 14AA 85 58			sta T0B
  1135
  1136 14AC			l_03C1
  1137 				; --- ForToDoCondition
  1138
  1139 				; optimize OK (init.inc), line = 9
  1140
  1141 14AC A4 58			ldy T0B
  1142 14AE A9 A0			lda #$A0
  1143 14B0 99 00 0C			sta $0C00,y
  1144
  1145 				; optimize OK (init.inc), line = 10
  1146
  1147 14B3 99 C0 0F			sta $0FC0,y
  1148
  1149 				; optimize OK (init.inc), line = 11
  1150
  1151 14B6 A9 41			lda #$41
  1152 14B8 99 00 08			sta $0800,y
  1153
  1154 				; optimize OK (init.inc), line = 12
  1155
  1156 14BB 99 C0 0B			sta $0BC0,y
  1157
  1158 				; --- ForToDoEpilog
  1159 14BE C6 58			dec T0B
  1160 14C0 10 EA			jpl l_03C1
  1161 14C2			l_03CF
  1162
  1163 				; optimize OK (init.inc), line = 15
  1164
  1165 14C2 A9 18			lda #$18
  1166 14C4 85 58			sta T0B
  1167
  1168 14C6			l_0401
  1169 				; --- ForToDoCondition
  1170 14C6 A5 58			lda T0B
  1171 14C8 C9 01			cmp #$01
  1172 14CA 90 3A			jcc l_040F
  1173
  1174 				; optimize OK (init.inc), line = 16
  1175
  1176 14CC 0A				asl @
  1177 14CD A8				tay
  1178 14CE A9 FF			lda #$FF
  1179 14D0 18 79 0E 10			add adr.MUL40,y
  1180 14D4 85 12			sta :bp2
  1181 14D6 A9 0B			lda #$0B
  1182 14D8 79 0F 10			adc adr.MUL40+1,y
  1183 14DB 85 13			sta :bp2+1
  1184 14DD A0 00			ldy #$00
  1185 14DF A9 A0			lda #$A0
  1186 14E1 91 12			sta (:bp2),y
  1187 14E3 C8				iny
  1188 14E4 91 12			sta (:bp2),y
  1189
  1190 				; optimize OK (init.inc), line = 17
  1191
  1192 14E6 A5 58			lda T0B
  1193 14E8 0A				asl @
  1194 14E9 A8				tay
  1195 14EA A9 FF			lda #$FF
  1196 14EC 18 79 0E 10			add adr.MUL40,y
  1197 14F0 85 12			sta :bp2
  1198 14F2 A9 07			lda #$07
  1199 14F4 79 0F 10			adc adr.MUL40+1,y
  1200 14F7 85 13			sta :bp2+1
  1201 14F9 A0 00			ldy #$00
  1202 14FB A9 41			lda #$41
  1203 14FD 91 12			sta (:bp2),y
  1204 14FF C8				iny
  1205 1500 91 12			sta (:bp2),y
  1206
  1207 				; --- ForToDoEpilog
  1208 1502 C6 58			dec T0B
  1209 1504 10 C0			jpl l_0401
  1210 1506			l_040F
  1211
  1212 				; optimize OK (init.inc), line = 20
  1213
  1214 1506 A9 07			lda #$07
  1215 1508 85 59			sta I0B
  1216
  1217 150A			l_0433
  1218 				; --- ForToDoCondition
  1219 150A A5 59			lda I0B
  1220 150C 0A				asl @
  1221 150D A8				tay
  1222 150E A9 7E			lda #$7E
  1223 1510 99 CE 2A			sta adr.OBSTACLES,y
  1224 1513 A9 00			lda #$00
  1225 1515 99 CF 2A			sta adr.OBSTACLES+1,y
  1226
  1227 				; --- ForToDoEpilog
  1228 1518 C6 59			dec I0B
  1229 151A 10 EE			jpl l_0433
  1230 151C			l_0441
  1231
  1232 				; ------------------------------------------------------------
  1233
  1234 = 0000			@FORTMP_03BE	= $00
  1235 = 0001			@FORTMP_03FE	= $01
  1236 = 0000			@FORTMP_0430	= $00
  1237 151C			@exit
  1238 					.ifdef @new
  1239 					lda <@VarData
  1240 					sta :ztmp
  1241 					lda >@VarData
  1242 					ldy #@VarDataSize-1
  1243 					jmp @FreeMem
  1244 					els
  1245 151C 60				rts						; ret
  1246 					eif
  1247 				.endl
  1248
  1249 151D			.local	INITPLAYERS					; PROCEDURE
  1250
  1251 				; optimize OK (init.inc), line = 27
  1252
  1253 151D A9 30			lda #$30
  1254 151F 8D B4 2A			sta PLAYER1.SCORE
  1255 1522 8D BC 2A			sta PLAYER2.SCORE
  1256
  1257 				; optimize OK (init.inc), line = 28
  1258
  1259 1525 8D C4 2A			sta PLAYER3.SCORE
  1260 1528 8D CC 2A			sta PLAYER4.SCORE
  1261
  1262 				; optimize OK (init.inc), line = 30
  1263
  1264 152B A9 00			lda #$00
  1265 152D 8D B5 2A			sta PLAYER1.ISALIVE
  1266 1530 8D BD 2A			sta PLAYER2.ISALIVE
  1267
  1268 				; optimize OK (init.inc), line = 31
  1269
  1270 1533 8D C5 2A			sta PLAYER3.ISALIVE
  1271 1536 8D CD 2A			sta PLAYER4.ISALIVE
  1272 1539			@exit
  1273 					.ifdef @new
  1274 					lda <@VarData
  1275 					sta :ztmp
  1276 					lda >@VarData
  1277 					ldy #@VarDataSize-1
  1278 					jmp @FreeMem
  1279 					els
  1280 1539 60				rts						; ret
  1281 					eif
  1282 				.endl
  1283
  1284 153A			.local	AISTRAIGHT					; PROCEDURE
  1285
  1286 				; optimize OK (ai.inc), line = 5
  1287
  1288 153A AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1289 1544 A0 04			ldy #PLY.DIR-DATAORIGIN
  1290 1546 B1 12			lda (:bp2),y
  1291 1548 25 5C			and AVAILDIR
  1292 154A F0 07			jeq l_048D
  1293 154C B1 12			lda (:bp2),y
  1294 154E 85 5B			sta NEWDIR
  1295 1550 4C BE 15			jmp l_049D
  1296 1553			l_048D
  1297
  1298 				; optimize OK (ai.inc), line = 7
  1299
  1300 1553 A5 5C			lda AVAILDIR
  1301 1555 C9 03			cmp #$03
  1302 1557 D0 10			jne l_04AF
  1303 1559 A9 02			lda #$02
  1304 155B 20 47 11			jsr SYSTEM.RANDOM_006D
  1305 155E B4 18			ldy :STACKORIGIN,x
  1306 1560 B9 40 10			lda adr.DIRECTION,y
  1307 1563 85 5B			sta NEWDIR
  1308 1565 CA				dex
  1309 1566 4C 81 15			jmp l_04C1
  1310 1569			l_04AF
  1311
  1312 				; optimize OK (ai.inc), line = 9
  1313
  1314 1569 A5 5C			lda AVAILDIR
  1315 156B 8D F4 2A			sta @CASETMP_0003
  1316 156E C9 01			cmp #$01
  1317 1570 D0 07			jne l_04CC
  1318 1572			@
  1319
  1320 				; optimize OK (ai.inc), line = 10
  1321
  1322 1572 A9 01			lda #$01
  1323 1574 85 5B			sta NEWDIR
  1324
  1325 1576 4C 81 15			jmp a_0003
  1326 1579			l_04CC
  1327 1579 C9 02			cmp #$02
  1328 157B D0 04			jne l_04D9
  1329 157D			@
  1330
  1331 				; optimize OK (ai.inc), line = 11
  1332
  1333 157D A9 02			lda #$02
  1334 157F 85 5B			sta NEWDIR
  1335
  1336 1581			l_04D9
  1337 1581			a_0003
  1338 1581			l_04C1
  1339
  1340 				; optimize OK (ai.inc), line = 14
  1341
  1342 1581 A5 5C			lda AVAILDIR
  1343 1583 C9 0C			cmp #$0C
  1344 1585 D0 1F			jne l_04F5
  1345 1587 A9 02			lda #$02
  1346 1589 20 47 11			jsr SYSTEM.RANDOM_006D
  1347 158C E8				inx
  1348 158D A9 02 95 18			mva #$02 :STACKORIGIN,x
  1349 1591 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1350 1595 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1351 1597 20 44 10			jsr addAX_CX
  1352 159A CA				dex
  1353 159B B4 18			ldy :STACKORIGIN,x
  1354 159D B9 40 10			lda adr.DIRECTION,y
  1355 15A0 85 5B			sta NEWDIR
  1356 15A2 CA				dex
  1357 15A3 4C BE 15			jmp l_050B
  1358 15A6			l_04F5
  1359
  1360 				; optimize OK (ai.inc), line = 16
  1361
  1362 15A6 A5 5C			lda AVAILDIR
  1363 15A8 8D F5 2A			sta @CASETMP_0004
  1364 15AB C9 04			cmp #$04
  1365 15AD D0 07			jne l_0516
  1366 15AF			@
  1367
  1368 				; optimize OK (ai.inc), line = 17
  1369
  1370 15AF A9 04			lda #$04
  1371 15B1 85 5B			sta NEWDIR
  1372
  1373 15B3 4C BE 15			jmp a_0004
  1374 15B6			l_0516
  1375 15B6 C9 08			cmp #$08
  1376 15B8 D0 04			jne l_0523
  1377 15BA			@
  1378
  1379 				; optimize OK (ai.inc), line = 18
  1380
  1381 15BA A9 08			lda #$08
  1382 15BC 85 5B			sta NEWDIR
  1383
  1384 15BE			l_0523
  1385 15BE			a_0004
  1386 15BE			l_050B
  1387 15BE			l_049D
  1388
  1389 				; ------------------------------------------------------------
  1390
  1391 = 2AF4			@CASETMP_0003	= DATAORIGIN+$0058
  1392 = 2AF5			@CASETMP_0004	= DATAORIGIN+$0059
  1393
  1394 = 2AF4			@VarData	= @CASETMP_0003
  1395 = 0002			@VarDataSize	= 2
  1396
  1397 15BE			@exit
  1398 					.ifdef @new
  1399 					lda <@VarData
  1400 					sta :ztmp
  1401 					lda >@VarData
  1402 					ldy #@VarDataSize-1
  1403 					jmp @FreeMem
  1404 					els
  1405 15BE 60				rts						; ret
  1406 					eif
  1407 				.endl
  1408
  1409 15BF			.local	AISAPPER					; PROCEDURE
  1410
  1411 				; optimize OK (ai.inc), line = 31
  1412
  1413 15BF A9 00			lda #$00
  1414 15C1 8D F6 2A			sta L
  1415 15C4 8D F7 2A			sta R
  1416 15C7 8D F8 2A			sta U
  1417 15CA 8D F9 2A			sta D
  1418
  1419 				; optimize OK (ai.inc), line = 32
  1420
  1421 15CD AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1422 15D7 A0 01			ldy #PLY.Y-DATAORIGIN
  1423 15D9 B1 12			lda (:bp2),y
  1424 15DB 0A				asl @
  1425 15DC A8				tay
  1426 15DD A9 00			lda #$00
  1427 15DF 18 79 0E 10			add adr.MUL40,y
  1428 15E3 85 21			sta :STACKORIGIN+9
  1429 15E5 A9 0C			lda #$0C
  1430 15E7 79 0F 10			adc adr.MUL40+1,y
  1431 15EA 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1432 15EC A0 00			ldy #PLY.X-DATAORIGIN
  1433 15EE A5 21			lda :STACKORIGIN+9
  1434 15F0 18 71 12			add (:bp2),y
  1435 15F3 85 5D			sta T0W
  1436 15F5 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1437 15F7 69 00			adc #$00
  1438 15F9 85 5E			sta T0W+1
  1439
  1440 				; optimize OK (ai.inc), line = 34
  1441
  1442 15FB A5 5C			lda AVAILDIR
  1443 15FD 29 01			and #$01
  1444 15FF F0 73			jeq l_0569
  1445
  1446 				; optimize OK (ai.inc), line = 35
  1447
  1448 1601 A9 05			lda #$05
  1449 1603 85 59			sta I0B
  1450
  1451 1605			l_0573
  1452 				; --- ForToDoCondition
  1453 1605 A5 59			lda I0B
  1454 1607 C9 01			cmp #$01
  1455 1609 90 69			jcc l_0581
  1456
  1457 				; optimize OK (ai.inc), line = 36
  1458
  1459 160B 0A				asl @
  1460 160C A8				tay
  1461 160D A5 5D			lda T0W
  1462 160F 38 F9 0E 10			sub adr.MUL40,y
  1463 1613 85 21			sta :STACKORIGIN+9
  1464 1615 A5 5E			lda T0W+1
  1465 1617 F9 0F 10			sbc adr.MUL40+1,y
  1466 161A 85 11			sta :bp+1
  1467 161C A4 21			ldy :STACKORIGIN+9
  1468 161E B1 10			lda (:bp),y
  1469 1620 C9 20			cmp #$20
  1470 1622 D0 03			jne l_059B
  1471 1624 EE F8 2A			inc U
  1472 1627			l_059B
  1473
  1474 				; optimize OK (ai.inc), line = 37
  1475
  1476 1627 A5 59			lda I0B
  1477 1629 0A				asl @
  1478 162A A8				tay
  1479 162B A5 5D			lda T0W
  1480 162D 38 F9 0E 10			sub adr.MUL40,y
  1481 1631 85 21			sta :STACKORIGIN+9
  1482 1633 A5 5E			lda T0W+1
  1483 1635 F9 0F 10			sbc adr.MUL40+1,y
  1484 1638 85 11			sta :bp+1
  1485 163A A5 21			lda :STACKORIGIN+9
  1486 163C 18 69 01			add #$01
  1487 163F A8				tay
  1488 1640 90 02			scc
  1489 1642 E6 11			inc :bp+1
  1490 1644 B1 10			lda (:bp),y
  1491 1646 C9 20			cmp #$20
  1492 1648 D0 03			jne l_05C0
  1493 164A EE F8 2A			inc U
  1494 164D			l_05C0
  1495
  1496 				; optimize OK (ai.inc), line = 38
  1497
  1498 164D A5 59			lda I0B
  1499 164F 0A				asl @
  1500 1650 A8				tay
  1501 1651 A5 5D			lda T0W
  1502 1653 38 F9 0E 10			sub adr.MUL40,y
  1503 1657 85 21			sta :STACKORIGIN+9
  1504 1659 A5 5E			lda T0W+1
  1505 165B F9 0F 10			sbc adr.MUL40+1,y
  1506 165E 85 11			sta :bp+1
  1507 1660 A4 21			ldy :STACKORIGIN+9
  1508 1662 88				dey
  1509 1663 B0 02			scs
  1510 1665 C6 11			dec :bp+1
  1511 1667 B1 10			lda (:bp),y
  1512 1669 C9 20			cmp #$20
  1513 166B D0 03			jne l_05E5
  1514 166D EE F8 2A			inc U
  1515 1670			l_05E5
  1516
  1517 				; --- ForToDoEpilog
  1518 1670 C6 59			dec I0B
  1519 1672 10 91			jpl l_0573
  1520 1674			l_0581
  1521 1674			l_0569
  1522
  1523 				; optimize OK (ai.inc), line = 42
  1524
  1525 1674 A5 5C			lda AVAILDIR
  1526 1676 29 02			and #$02
  1527 1678 F0 73			jeq l_0609
  1528
  1529 				; optimize OK (ai.inc), line = 43
  1530
  1531 167A A9 05			lda #$05
  1532 167C 85 59			sta I0B
  1533
  1534 167E			l_0613
  1535 				; --- ForToDoCondition
  1536 167E A5 59			lda I0B
  1537 1680 C9 01			cmp #$01
  1538 1682 90 69			jcc l_0621
  1539
  1540 				; optimize OK (ai.inc), line = 44
  1541
  1542 1684 0A				asl @
  1543 1685 A8				tay
  1544 1686 A5 5D			lda T0W
  1545 1688 18 79 0E 10			add adr.MUL40,y
  1546 168C 85 21			sta :STACKORIGIN+9
  1547 168E A5 5E			lda T0W+1
  1548 1690 79 0F 10			adc adr.MUL40+1,y
  1549 1693 85 11			sta :bp+1
  1550 1695 A4 21			ldy :STACKORIGIN+9
  1551 1697 B1 10			lda (:bp),y
  1552 1699 C9 20			cmp #$20
  1553 169B D0 03			jne l_063B
  1554 169D EE F9 2A			inc D
  1555 16A0			l_063B
  1556
  1557 				; optimize OK (ai.inc), line = 45
  1558
  1559 16A0 A5 59			lda I0B
  1560 16A2 0A				asl @
  1561 16A3 A8				tay
  1562 16A4 A5 5D			lda T0W
  1563 16A6 18 79 0E 10			add adr.MUL40,y
  1564 16AA 85 21			sta :STACKORIGIN+9
  1565 16AC A5 5E			lda T0W+1
  1566 16AE 79 0F 10			adc adr.MUL40+1,y
  1567 16B1 85 11			sta :bp+1
  1568 16B3 A5 21			lda :STACKORIGIN+9
  1569 16B5 18 69 01			add #$01
  1570 16B8 A8				tay
  1571 16B9 90 02			scc
  1572 16BB E6 11			inc :bp+1
  1573 16BD B1 10			lda (:bp),y
  1574 16BF C9 20			cmp #$20
  1575 16C1 D0 03			jne l_0660
  1576 16C3 EE F9 2A			inc D
  1577 16C6			l_0660
  1578
  1579 				; optimize OK (ai.inc), line = 46
  1580
  1581 16C6 A5 59			lda I0B
  1582 16C8 0A				asl @
  1583 16C9 A8				tay
  1584 16CA A5 5D			lda T0W
  1585 16CC 18 79 0E 10			add adr.MUL40,y
  1586 16D0 85 21			sta :STACKORIGIN+9
  1587 16D2 A5 5E			lda T0W+1
  1588 16D4 79 0F 10			adc adr.MUL40+1,y
  1589 16D7 85 11			sta :bp+1
  1590 16D9 A4 21			ldy :STACKORIGIN+9
  1591 16DB 88				dey
  1592 16DC B0 02			scs
  1593 16DE C6 11			dec :bp+1
  1594 16E0 B1 10			lda (:bp),y
  1595 16E2 C9 20			cmp #$20
  1596 16E4 D0 03			jne l_0685
  1597 16E6 EE F9 2A			inc D
  1598 16E9			l_0685
  1599
  1600 				; --- ForToDoEpilog
  1601 16E9 C6 59			dec I0B
  1602 16EB 10 91			jpl l_0613
  1603 16ED			l_0621
  1604 16ED			l_0609
  1605
  1606 				; optimize OK (ai.inc), line = 50
  1607
  1608 16ED A5 5C			lda AVAILDIR
  1609 16EF 29 04			and #$04
  1610 16F1 F0 5F			jeq l_06A9
  1611
  1612 				; optimize OK (ai.inc), line = 51
  1613
  1614 16F3 A9 05			lda #$05
  1615 16F5 85 59			sta I0B
  1616
  1617 16F7			l_06B3
  1618 				; --- ForToDoCondition
  1619 16F7 A5 59			lda I0B
  1620 16F9 C9 01			cmp #$01
  1621 16FB 90 55			jcc l_06C1
  1622
  1623 				; optimize OK (ai.inc), line = 52
  1624
  1625 16FD A5 5D			lda T0W
  1626 16FF 38 E5 59			sub I0B
  1627 1702 A8				tay
  1628 1703 A5 5E			lda T0W+1
  1629 1705 E9 00			sbc #$00
  1630 1707 85 11			sta :bp+1
  1631 1709 B1 10			lda (:bp),y
  1632 170B C9 20			cmp #$20
  1633 170D D0 03			jne l_06D9
  1634 170F EE F6 2A			inc L
  1635 1712			l_06D9
  1636
  1637 				; optimize OK (ai.inc), line = 53
  1638
  1639 1712 A5 5D			lda T0W
  1640 1714 38 E5 59			sub I0B
  1641 1717 A8				tay
  1642 1718 A5 5E			lda T0W+1
  1643 171A E9 00			sbc #$00
  1644 171C 85 11			sta :bp+1
  1645 171E 98				tya
  1646 171F 18 69 28			add #$28
  1647 1722 A8				tay
  1648 1723 90 02			scc
  1649 1725 E6 11			inc :bp+1
  1650 1727 B1 10			lda (:bp),y
  1651 1729 C9 20			cmp #$20
  1652 172B D0 03			jne l_06FC
  1653 172D EE F6 2A			inc L
  1654 1730			l_06FC
  1655
  1656 				; optimize OK (ai.inc), line = 54
  1657
  1658 1730 A5 5D			lda T0W
  1659 1732 38 E5 59			sub I0B
  1660 1735 A8				tay
  1661 1736 A5 5E			lda T0W+1
  1662 1738 E9 00			sbc #$00
  1663 173A 85 11			sta :bp+1
  1664 173C 98				tya
  1665 173D 38 E9 28			sub #$28
  1666 1740 A8				tay
  1667 1741 B0 02			scs
  1668 1743 C6 11			dec :bp+1
  1669 1745 B1 10			lda (:bp),y
  1670 1747 C9 20			cmp #$20
  1671 1749 D0 03			jne l_071F
  1672 174B EE F6 2A			inc L
  1673 174E			l_071F
  1674
  1675 				; --- ForToDoEpilog
  1676 174E C6 59			dec I0B
  1677 1750 10 A5			jpl l_06B3
  1678 1752			l_06C1
  1679 1752			l_06A9
  1680
  1681 				; optimize OK (ai.inc), line = 58
  1682
  1683 1752 A5 5C			lda AVAILDIR
  1684 1754 29 08			and #$08
  1685 1756 F0 5D			jeq l_0743
  1686
  1687 				; optimize OK (ai.inc), line = 59
  1688
  1689 1758 A9 05			lda #$05
  1690 175A 85 59			sta I0B
  1691
  1692 175C			l_074D
  1693 				; --- ForToDoCondition
  1694 175C A5 59			lda I0B
  1695 175E C9 01			cmp #$01
  1696 1760 90 53			jcc l_075B
  1697
  1698 				; optimize OK (ai.inc), line = 60
  1699
  1700 1762 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1701 176A A4 59			ldy I0B
  1702 176C B1 12			lda (:bp2),y
  1703 176E C9 20			cmp #$20
  1704 1770 D0 03			jne l_0773
  1705 1772 EE F7 2A			inc R
  1706 1775			l_0773
  1707
  1708 				; optimize OK (ai.inc), line = 61
  1709
  1710 1775 A5 5D			lda T0W
  1711 1777 18 65 59			add I0B
  1712 177A A8				tay
  1713 177B A5 5E			lda T0W+1
  1714 177D 69 00			adc #$00
  1715 177F 85 11			sta :bp+1
  1716 1781 98				tya
  1717 1782 18 69 28			add #$28
  1718 1785 A8				tay
  1719 1786 90 02			scc
  1720 1788 E6 11			inc :bp+1
  1721 178A B1 10			lda (:bp),y
  1722 178C C9 20			cmp #$20
  1723 178E D0 03			jne l_0796
  1724 1790 EE F7 2A			inc R
  1725 1793			l_0796
  1726
  1727 				; optimize OK (ai.inc), line = 62
  1728
  1729 1793 A5 5D			lda T0W
  1730 1795 18 65 59			add I0B
  1731 1798 A8				tay
  1732 1799 A5 5E			lda T0W+1
  1733 179B 69 00			adc #$00
  1734 179D 85 11			sta :bp+1
  1735 179F 98				tya
  1736 17A0 38 E9 28			sub #$28
  1737 17A3 A8				tay
  1738 17A4 B0 02			scs
  1739 17A6 C6 11			dec :bp+1
  1740 17A8 B1 10			lda (:bp),y
  1741 17AA C9 20			cmp #$20
  1742 17AC D0 03			jne l_07B9
  1743 17AE EE F7 2A			inc R
  1744 17B1			l_07B9
  1745
  1746 				; --- ForToDoEpilog
  1747 17B1 C6 59			dec I0B
  1748 17B3 10 A7			jpl l_074D
  1749 17B5			l_075B
  1750 17B5			l_0743
  1751
  1752 				; optimize OK (ai.inc), line = 66
  1753
  1754 17B5 AD F9 2A			lda D
  1755 17B8 85 58			sta T0B
  1756
  1757 				; optimize OK (ai.inc), line = 67
  1758
  1759 17BA CD F8 2A			cmp U
  1760 17BD B0 05			jcs l_07E1
  1761 17BF AD F8 2A			lda U
  1762 17C2 85 58			sta T0B
  1763 17C4			l_07E1
  1764
  1765 				; optimize OK (ai.inc), line = 68
  1766
  1767 17C4 A5 58			lda T0B
  1768 17C6 CD F6 2A			cmp L
  1769 17C9 B0 05			jcs l_07FE
  1770 17CB AD F6 2A			lda L
  1771 17CE 85 58			sta T0B
  1772 17D0			l_07FE
  1773
  1774 				; optimize OK (ai.inc), line = 69
  1775
  1776 17D0 A5 58			lda T0B
  1777 17D2 CD F7 2A			cmp R
  1778 17D5 B0 05			jcs l_081B
  1779 17D7 AD F7 2A			lda R
  1780 17DA 85 58			sta T0B
  1781 17DC			l_081B
  1782
  1783 				; optimize OK (ai.inc), line = 71
  1784
  1785 17DC A5 58			lda T0B
  1786 17DE CD F9 2A			cmp D
  1787 17E1 D0 04			jne l_0838
  1788 17E3 A9 02			lda #$02
  1789 17E5 85 58			sta T0B
  1790 17E7			l_0838
  1791
  1792 				; optimize OK (ai.inc), line = 72
  1793
  1794 17E7 A5 58			lda T0B
  1795 17E9 CD F8 2A			cmp U
  1796 17EC D0 04			jne l_0853
  1797 17EE A9 01			lda #$01
  1798 17F0 85 58			sta T0B
  1799 17F2			l_0853
  1800
  1801 				; optimize OK (ai.inc), line = 73
  1802
  1803 17F2 A5 58			lda T0B
  1804 17F4 CD F6 2A			cmp L
  1805 17F7 D0 04			jne l_086E
  1806 17F9 A9 04			lda #$04
  1807 17FB 85 58			sta T0B
  1808 17FD			l_086E
  1809
  1810 				; optimize OK (ai.inc), line = 74
  1811
  1812 17FD A5 58			lda T0B
  1813 17FF CD F7 2A			cmp R
  1814 1802 D0 04			jne l_0889
  1815 1804 A9 08			lda #$08
  1816 1806 85 58			sta T0B
  1817 1808			l_0889
  1818
  1819 				; optimize OK (ai.inc), line = 76
  1820
  1821 1808 A5 5C			lda AVAILDIR
  1822 180A 25 58			and T0B
  1823 180C F0 07			jeq l_08A8
  1824 180E A5 58			lda T0B
  1825 1810 85 5B			sta NEWDIR
  1826 1812 4C 18 18			jmp l_08B8
  1827 1815			l_08A8
  1828
  1829 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1830
  1831 1815 20 3A 15			jsr AISTRAIGHT
  1832 1818			l_08B8
  1833
  1834 				; ------------------------------------------------------------
  1835
  1836 = 2AF6			L	= DATAORIGIN+$005A
  1837 = 2AF7			R	= DATAORIGIN+$005B
  1838 = 2AF8			U	= DATAORIGIN+$005C
  1839 = 2AF9			D	= DATAORIGIN+$005D
  1840 = 0001			@FORTMP_0570	= $01
  1841 = 0001			@FORTMP_0610	= $01
  1842 = 0001			@FORTMP_06B0	= $01
  1843 = 0001			@FORTMP_074A	= $01
  1844
  1845 = 2AF6			@VarData	= L
  1846 = 0004			@VarDataSize	= 4
  1847
  1848 1818			@exit
  1849 					.ifdef @new
  1850 					lda <@VarData
  1851 					sta :ztmp
  1852 					lda >@VarData
  1853 					ldy #@VarDataSize-1
  1854 					jmp @FreeMem
  1855 					els
  1856 1818 60				rts						; ret
  1857 					eif
  1858 				.endl
  1859
  1860 1819			.local	AIBULLY						; PROCEDURE
  1861
  1862 				; optimize OK (ai.inc), line = 84
  1863
  1864 1819 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1865 1823 A0 04			ldy #PLY.DIR-DATAORIGIN
  1866 1825 B1 12			lda (:bp2),y
  1867 1827 85 58			sta T0B
  1868
  1869 				; optimize OK (ai.inc), line = 86
  1870
  1871 1829 AD B5 2A			lda PLAYER1.ISALIVE
  1872 182C 0D BD 2A			ora PLAYER2.ISALIVE
  1873 182F D0 03 4C D6 18		jeq l_08D5
  1874
  1875 				; optimize OK (ai.inc), line = 88
  1876
  1877 1834 AD B5 2A			lda PLAYER1.ISALIVE
  1878 1837 F0 0F			jeq l_08E2
  1879 1839 AD 8F 2A			lda PLAYER1
  1880 183C 8D 8D 2A			sta TMPPLY
  1881 183F AD 90 2A			lda PLAYER1+1
  1882 1842 8D 8E 2A			sta TMPPLY+1
  1883 1845 4C 54 18			jmp l_08F1
  1884 1848			l_08E2
  1885 1848 AD 91 2A			lda PLAYER2
  1886 184B 8D 8D 2A			sta TMPPLY
  1887 184E AD 92 2A			lda PLAYER2+1
  1888 1851 8D 8E 2A			sta TMPPLY+1
  1889 1854			l_08F1
  1890
  1891 				; optimize OK (ai.inc), line = 90
  1892
  1893 1854 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1894 185E A0 01			ldy #PLY.Y-DATAORIGIN
  1895 1860 B1 12			lda (:bp2),y
  1896 1862 85 21			sta :STACKORIGIN+9
  1897 1864 AC 8D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1898 186E A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1899 1870 B1 12			lda (:bp2),y
  1900 1872 C5 21			cmp :STACKORIGIN+9
  1901 1874 B0 07			jcs l_090A
  1902 1876 A9 01			lda #$01
  1903 1878 85 58			sta T0B
  1904 187A 4C 81 18			jmp l_0918
  1905 187D			l_090A
  1906 187D A9 02			lda #$02
  1907 187F 85 58			sta T0B
  1908 1881			l_0918
  1909
  1910 				; optimize OK (ai.inc), line = 91
  1911
  1912 1881 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1913 188B A0 01			ldy #PLY.Y-DATAORIGIN
  1914 188D B1 12			lda (:bp2),y
  1915 188F 85 21			sta :STACKORIGIN+9
  1916 1891 AC 8D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1917 189B A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1918 189D B1 12			lda (:bp2),y
  1919 189F C5 21			cmp :STACKORIGIN+9
  1920 18A1 F0 06			jeq l_0942x
  1921 18A3 A5 5C			lda AVAILDIR
  1922 18A5 25 58			and T0B
  1923 18A7 D0 2D			jne l_0942
  1924 18A9			l_0942x
  1925
  1926 				; optimize OK (ai.inc), line = 92
  1927
  1928 18A9 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1929 18B3 A0 00			ldy #PLY.X-DATAORIGIN
  1930 18B5 B1 12			lda (:bp2),y
  1931 18B7 85 21			sta :STACKORIGIN+9
  1932 18B9 AC 8D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1933 18C3 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1934 18C5 B1 12			lda (:bp2),y
  1935 18C7 C5 21			cmp :STACKORIGIN+9
  1936 18C9 B0 07			jcs l_0957
  1937 18CB A9 04			lda #$04
  1938 18CD 85 58			sta T0B
  1939 18CF 4C D6 18			jmp l_0965
  1940 18D2			l_0957
  1941 18D2 A9 08			lda #$08
  1942 18D4 85 58			sta T0B
  1943 18D6			l_0965
  1944 18D6			l_0942
  1945 18D6			l_08D5
  1946
  1947 				; optimize OK (ai.inc), line = 96
  1948
  1949 18D6 A5 5C			lda AVAILDIR
  1950 18D8 25 58			and T0B
  1951 18DA F0 07			jeq l_0985
  1952 18DC A5 58			lda T0B
  1953 18DE 85 5B			sta NEWDIR
  1954 18E0 4C E6 18			jmp l_0995
  1955 18E3			l_0985
  1956
  1957 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1958
  1959 18E3 20 BF 15			jsr AISAPPER
  1960 18E6			l_0995
  1961 18E6			@exit
  1962 					.ifdef @new
  1963 					lda <@VarData
  1964 					sta :ztmp
  1965 					lda >@VarData
  1966 					ldy #@VarDataSize-1
  1967 					jmp @FreeMem
  1968 					els
  1969 18E6 60				rts						; ret
  1970 					eif
  1971 				.endl
  1972
  1973 18E7			.local	AIMIRROR					; PROCEDURE
  1974
  1975 				; optimize OK (ai.inc), line = 105
  1976
  1977 18E7 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  1978 18F1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1979 18F3 B1 12			lda (:bp2),y
  1980 18F5 85 58			sta T0B
  1981
  1982 				; optimize OK (ai.inc), line = 107
  1983
  1984 18F7 AD B5 2A			lda PLAYER1.ISALIVE
  1985 18FA F0 2F			jeq l_09AC
  1986
  1987 				; optimize OK (ai.inc), line = 108
  1988
  1989 18FC AD B2 2A			lda PLAYER1.DIR
  1990 18FF 8D FA 2A			sta @CASETMP_0005
  1991 1902 C9 01			cmp #$01
  1992 1904 D0 07			jne l_09B8
  1993 1906			@
  1994
  1995 				; optimize OK (ai.inc), line = 109
  1996
  1997 1906 A9 02			lda #$02
  1998 1908 85 58			sta T0B
  1999
  2000 190A 4C 2B 19			jmp a_0005
  2001 190D			l_09B8
  2002 190D C9 02			cmp #$02
  2003 190F D0 07			jne l_09C5
  2004 1911			@
  2005
  2006 				; optimize OK (ai.inc), line = 110
  2007
  2008 1911 A9 01			lda #$01
  2009 1913 85 58			sta T0B
  2010
  2011 1915 4C 2B 19			jmp a_0005
  2012 1918			l_09C5
  2013 1918 C9 04			cmp #$04
  2014 191A D0 07			jne l_09D2
  2015 191C			@
  2016
  2017 				; optimize OK (ai.inc), line = 111
  2018
  2019 191C A9 08			lda #$08
  2020 191E 85 58			sta T0B
  2021
  2022 1920 4C 2B 19			jmp a_0005
  2023 1923			l_09D2
  2024 1923 C9 08			cmp #$08
  2025 1925 D0 04			jne l_09DF
  2026 1927			@
  2027
  2028 				; optimize OK (ai.inc), line = 112
  2029
  2030 1927 A9 04			lda #$04
  2031 1929 85 58			sta T0B
  2032
  2033 192B			l_09DF
  2034 192B			a_0005
  2035 192B			l_09AC
  2036
  2037 				; optimize OK (ai.inc), line = 116
  2038
  2039 192B A5 5C			lda AVAILDIR
  2040 192D 25 58			and T0B
  2041 192F F0 07			jeq l_0A05
  2042 1931 A5 58			lda T0B
  2043 1933 85 5B			sta NEWDIR
  2044 1935 4C 3B 19			jmp l_0A15
  2045 1938			l_0A05
  2046
  2047 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  2048
  2049 1938 20 BF 15			jsr AISAPPER
  2050 193B			l_0A15
  2051
  2052 				; ------------------------------------------------------------
  2053
  2054 = 2AFA			@CASETMP_0005	= DATAORIGIN+$005E
  2055
  2056 = 2AFA			@VarData	= @CASETMP_0005
  2057 = 0001			@VarDataSize	= 1
  2058
  2059 193B			@exit
  2060 					.ifdef @new
  2061 					lda <@VarData
  2062 					sta :ztmp
  2063 					lda >@VarData
  2064 					ldy #@VarDataSize-1
  2065 					jmp @FreeMem
  2066 					els
  2067 193B 60				rts						; ret
  2068 					eif
  2069 				.endl
  2070
  2071 193C			.local	SETLEVEL00					; PROCEDURE
  2072
  2073 				; optimize OK (levels.inc), line = 5
  2074
  2075 193C A9 01			lda #$01
  2076 193E 8D F3 2A			sta SETPLAYER.ISALIVE
  2077 1941 A9 62			lda #$62
  2078 1943 8D F2 2A			sta SETPLAYER.COLOUR
  2079 1946 A9 51			lda #$51
  2080 1948 8D F1 2A			sta SETPLAYER.HEAD
  2081 194B A9 00			lda #$00
  2082 194D 8D F0 2A			sta SETPLAYER.BRAIN
  2083 1950 A9 08			lda #$08
  2084 1952 8D EF 2A			sta SETPLAYER.DIR
  2085 1955 A9 0C			lda #$0C
  2086 1957 8D EE 2A			sta SETPLAYER.Y
  2087 195A A9 0A			lda #$0A
  2088 195C 8D ED 2A			sta SETPLAYER.X
  2089 195F AD 8F 2A			lda PLAYER1
  2090 1962 8D EB 2A			sta SETPLAYER.P
  2091 1965 AD 90 2A			lda PLAYER1+1
  2092 1968 8D EC 2A			sta SETPLAYER.P+1
  2093 196B 20 23 14			jsr SETPLAYER
  2094
  2095 				; optimize OK (levels.inc), line = 6
  2096
  2097 196E A9 01			lda #$01
  2098 1970 8D F3 2A			sta SETPLAYER.ISALIVE
  2099 1973 A9 5D			lda #$5D
  2100 1975 8D F2 2A			sta SETPLAYER.COLOUR
  2101 1978 A9 51			lda #$51
  2102 197A 8D F1 2A			sta SETPLAYER.HEAD
  2103 197D A9 01			lda #$01
  2104 197F 8D F0 2A			sta SETPLAYER.BRAIN
  2105 1982 A9 04			lda #$04
  2106 1984 8D EF 2A			sta SETPLAYER.DIR
  2107 1987 A9 0C			lda #$0C
  2108 1989 8D EE 2A			sta SETPLAYER.Y
  2109 198C A9 1E			lda #$1E
  2110 198E 8D ED 2A			sta SETPLAYER.X
  2111 1991 AD 91 2A			lda PLAYER2
  2112 1994 8D EB 2A			sta SETPLAYER.P
  2113 1997 AD 92 2A			lda PLAYER2+1
  2114 199A 8D EC 2A			sta SETPLAYER.P+1
  2115 199D 20 23 14			jsr SETPLAYER
  2116
  2117 				; optimize FAIL (1, levels.inc), line = 8
  2118
  2119 19A0 E8				inx
  2120 19A1 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2121 19A5 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2122 19A7 A9 06			lda #$06
  2123 19A9 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2124 19AC A9 0A			lda #$0A
  2125 19AE 8D E7 2A			sta CALCOBSTACLEADDR.X
  2126 19B1 20 F3 12			jsr CALCOBSTACLEADDR
  2127 19B4 B4 17			ldy :STACKORIGIN-1,x
  2128 19B6 B5 18			lda :STACKORIGIN,x
  2129 19B8 99 CE 2A			sta adr.OBSTACLES,y
  2130 19BB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2131 19BD 99 CF 2A			sta adr.OBSTACLES+1,y
  2132 19C0 CA				dex
  2133
  2134 				; optimize FAIL (1, levels.inc), line = 9
  2135
  2136 19C1 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2137 19C5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2138 19C9 A9 06			lda #$06
  2139 19CB 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2140 19CE A9 1E			lda #$1E
  2141 19D0 8D E7 2A			sta CALCOBSTACLEADDR.X
  2142 19D3 20 F3 12			jsr CALCOBSTACLEADDR
  2143 19D6 B4 17			ldy :STACKORIGIN-1,x
  2144 19D8 B5 18			lda :STACKORIGIN,x
  2145 19DA 99 CE 2A			sta adr.OBSTACLES,y
  2146 19DD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2147 19DF 99 CF 2A			sta adr.OBSTACLES+1,y
  2148 19E2 CA				dex
  2149
  2150 				; optimize FAIL (1, levels.inc), line = 10
  2151
  2152 19E3 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2153 19E7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2154 19EB A9 12			lda #$12
  2155 19ED 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2156 19F0 A9 0A			lda #$0A
  2157 19F2 8D E7 2A			sta CALCOBSTACLEADDR.X
  2158 19F5 20 F3 12			jsr CALCOBSTACLEADDR
  2159 19F8 B4 17			ldy :STACKORIGIN-1,x
  2160 19FA B5 18			lda :STACKORIGIN,x
  2161 19FC 99 CE 2A			sta adr.OBSTACLES,y
  2162 19FF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2163 1A01 99 CF 2A			sta adr.OBSTACLES+1,y
  2164 1A04 CA				dex
  2165
  2166 				; optimize FAIL (1, levels.inc), line = 11
  2167
  2168 1A05 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2169 1A09 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2170 1A0D A9 12			lda #$12
  2171 1A0F 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2172 1A12 A9 1E			lda #$1E
  2173 1A14 8D E7 2A			sta CALCOBSTACLEADDR.X
  2174 1A17 20 F3 12			jsr CALCOBSTACLEADDR
  2175 1A1A B4 17			ldy :STACKORIGIN-1,x
  2176 1A1C B5 18			lda :STACKORIGIN,x
  2177 1A1E 99 CE 2A			sta adr.OBSTACLES,y
  2178 1A21 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2179 1A23 99 CF 2A			sta adr.OBSTACLES+1,y
  2180 1A26 CA				dex
  2181
  2182 				; optimize FAIL (1, levels.inc), line = 12
  2183
  2184 1A27 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2185 1A2B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2186 1A2F A9 02			lda #$02
  2187 1A31 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2188 1A34 A9 14			lda #$14
  2189 1A36 8D E7 2A			sta CALCOBSTACLEADDR.X
  2190 1A39 20 F3 12			jsr CALCOBSTACLEADDR
  2191 1A3C B4 17			ldy :STACKORIGIN-1,x
  2192 1A3E B5 18			lda :STACKORIGIN,x
  2193 1A40 99 CE 2A			sta adr.OBSTACLES,y
  2194 1A43 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2195 1A45 99 CF 2A			sta adr.OBSTACLES+1,y
  2196 1A48 CA				dex
  2197
  2198 				; optimize FAIL (1, levels.inc), line = 13
  2199
  2200 1A49 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2201 1A4D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2202 1A51 A9 16			lda #$16
  2203 1A53 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2204 1A56 A9 14			lda #$14
  2205 1A58 8D E7 2A			sta CALCOBSTACLEADDR.X
  2206 1A5B 20 F3 12			jsr CALCOBSTACLEADDR
  2207 1A5E B4 17			ldy :STACKORIGIN-1,x
  2208 1A60 B5 18			lda :STACKORIGIN,x
  2209 1A62 99 CE 2A			sta adr.OBSTACLES,y
  2210 1A65 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2211 1A67 99 CF 2A			sta adr.OBSTACLES+1,y
  2212 1A6A CA				dex
  2213 1A6B CA				dex
  2214
  2215 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 15
  2216
  2217 1A6C 20 16 13			jsr SAVEOBSTACLES
  2218 1A6F			@exit
  2219 					.ifdef @new
  2220 					lda <@VarData
  2221 					sta :ztmp
  2222 					lda >@VarData
  2223 					ldy #@VarDataSize-1
  2224 					jmp @FreeMem
  2225 					els
  2226 1A6F 60				rts						; ret
  2227 					eif
  2228 				.endl
  2229
  2230 1A70			.local	SETLEVEL01					; PROCEDURE
  2231
  2232 				; optimize OK (levels.inc), line = 22
  2233
  2234 1A70 A9 01			lda #$01
  2235 1A72 8D F3 2A			sta SETPLAYER.ISALIVE
  2236 1A75 A9 62			lda #$62
  2237 1A77 8D F2 2A			sta SETPLAYER.COLOUR
  2238 1A7A A9 51			lda #$51
  2239 1A7C 8D F1 2A			sta SETPLAYER.HEAD
  2240 1A7F A9 00			lda #$00
  2241 1A81 8D F0 2A			sta SETPLAYER.BRAIN
  2242 1A84 A9 08			lda #$08
  2243 1A86 8D EF 2A			sta SETPLAYER.DIR
  2244 1A89 A9 0C			lda #$0C
  2245 1A8B 8D EE 2A			sta SETPLAYER.Y
  2246 1A8E A9 0A			lda #$0A
  2247 1A90 8D ED 2A			sta SETPLAYER.X
  2248 1A93 AD 8F 2A			lda PLAYER1
  2249 1A96 8D EB 2A			sta SETPLAYER.P
  2250 1A99 AD 90 2A			lda PLAYER1+1
  2251 1A9C 8D EC 2A			sta SETPLAYER.P+1
  2252 1A9F 20 23 14			jsr SETPLAYER
  2253
  2254 				; optimize OK (levels.inc), line = 23
  2255
  2256 1AA2 A9 01			lda #$01
  2257 1AA4 8D F3 2A			sta SETPLAYER.ISALIVE
  2258 1AA7 A9 5D			lda #$5D
  2259 1AA9 8D F2 2A			sta SETPLAYER.COLOUR
  2260 1AAC A9 51			lda #$51
  2261 1AAE 8D F1 2A			sta SETPLAYER.HEAD
  2262 1AB1 A9 01			lda #$01
  2263 1AB3 8D F0 2A			sta SETPLAYER.BRAIN
  2264 1AB6 A9 04			lda #$04
  2265 1AB8 8D EF 2A			sta SETPLAYER.DIR
  2266 1ABB A9 0C			lda #$0C
  2267 1ABD 8D EE 2A			sta SETPLAYER.Y
  2268 1AC0 A9 1E			lda #$1E
  2269 1AC2 8D ED 2A			sta SETPLAYER.X
  2270 1AC5 AD 91 2A			lda PLAYER2
  2271 1AC8 8D EB 2A			sta SETPLAYER.P
  2272 1ACB AD 92 2A			lda PLAYER2+1
  2273 1ACE 8D EC 2A			sta SETPLAYER.P+1
  2274 1AD1 20 23 14			jsr SETPLAYER
  2275
  2276 				; optimize FAIL (1, levels.inc), line = 25
  2277
  2278 1AD4 E8				inx
  2279 1AD5 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2280 1AD9 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2281 1ADB A9 06			lda #$06
  2282 1ADD 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2283 1AE0 A9 0A			lda #$0A
  2284 1AE2 8D E7 2A			sta CALCOBSTACLEADDR.X
  2285 1AE5 20 F3 12			jsr CALCOBSTACLEADDR
  2286 1AE8 B4 17			ldy :STACKORIGIN-1,x
  2287 1AEA B5 18			lda :STACKORIGIN,x
  2288 1AEC 99 CE 2A			sta adr.OBSTACLES,y
  2289 1AEF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2290 1AF1 99 CF 2A			sta adr.OBSTACLES+1,y
  2291 1AF4 CA				dex
  2292
  2293 				; optimize FAIL (1, levels.inc), line = 26
  2294
  2295 1AF5 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2296 1AF9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2297 1AFD A9 06			lda #$06
  2298 1AFF 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2299 1B02 A9 1E			lda #$1E
  2300 1B04 8D E7 2A			sta CALCOBSTACLEADDR.X
  2301 1B07 20 F3 12			jsr CALCOBSTACLEADDR
  2302 1B0A B4 17			ldy :STACKORIGIN-1,x
  2303 1B0C B5 18			lda :STACKORIGIN,x
  2304 1B0E 99 CE 2A			sta adr.OBSTACLES,y
  2305 1B11 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2306 1B13 99 CF 2A			sta adr.OBSTACLES+1,y
  2307 1B16 CA				dex
  2308
  2309 				; optimize FAIL (1, levels.inc), line = 27
  2310
  2311 1B17 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2312 1B1B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2313 1B1F A9 12			lda #$12
  2314 1B21 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2315 1B24 A9 0A			lda #$0A
  2316 1B26 8D E7 2A			sta CALCOBSTACLEADDR.X
  2317 1B29 20 F3 12			jsr CALCOBSTACLEADDR
  2318 1B2C B4 17			ldy :STACKORIGIN-1,x
  2319 1B2E B5 18			lda :STACKORIGIN,x
  2320 1B30 99 CE 2A			sta adr.OBSTACLES,y
  2321 1B33 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2322 1B35 99 CF 2A			sta adr.OBSTACLES+1,y
  2323 1B38 CA				dex
  2324
  2325 				; optimize FAIL (1, levels.inc), line = 28
  2326
  2327 1B39 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2328 1B3D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2329 1B41 A9 12			lda #$12
  2330 1B43 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2331 1B46 A9 1E			lda #$1E
  2332 1B48 8D E7 2A			sta CALCOBSTACLEADDR.X
  2333 1B4B 20 F3 12			jsr CALCOBSTACLEADDR
  2334 1B4E B4 17			ldy :STACKORIGIN-1,x
  2335 1B50 B5 18			lda :STACKORIGIN,x
  2336 1B52 99 CE 2A			sta adr.OBSTACLES,y
  2337 1B55 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2338 1B57 99 CF 2A			sta adr.OBSTACLES+1,y
  2339 1B5A CA				dex
  2340
  2341 				; optimize FAIL (1, levels.inc), line = 29
  2342
  2343 1B5B A9 08 95 18			mva #$08 :STACKORIGIN,x
  2344 1B5F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2345 1B63 A9 02			lda #$02
  2346 1B65 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2347 1B68 A9 14			lda #$14
  2348 1B6A 8D E7 2A			sta CALCOBSTACLEADDR.X
  2349 1B6D 20 F3 12			jsr CALCOBSTACLEADDR
  2350 1B70 B4 17			ldy :STACKORIGIN-1,x
  2351 1B72 B5 18			lda :STACKORIGIN,x
  2352 1B74 99 CE 2A			sta adr.OBSTACLES,y
  2353 1B77 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2354 1B79 99 CF 2A			sta adr.OBSTACLES+1,y
  2355 1B7C CA				dex
  2356
  2357 				; optimize FAIL (1, levels.inc), line = 30
  2358
  2359 1B7D A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2360 1B81 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2361 1B85 A9 16			lda #$16
  2362 1B87 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2363 1B8A A9 14			lda #$14
  2364 1B8C 8D E7 2A			sta CALCOBSTACLEADDR.X
  2365 1B8F 20 F3 12			jsr CALCOBSTACLEADDR
  2366 1B92 B4 17			ldy :STACKORIGIN-1,x
  2367 1B94 B5 18			lda :STACKORIGIN,x
  2368 1B96 99 CE 2A			sta adr.OBSTACLES,y
  2369 1B99 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2370 1B9B 99 CF 2A			sta adr.OBSTACLES+1,y
  2371 1B9E CA				dex
  2372 1B9F CA				dex
  2373
  2374 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 32
  2375
  2376 1BA0 20 16 13			jsr SAVEOBSTACLES
  2377 1BA3			@exit
  2378 					.ifdef @new
  2379 					lda <@VarData
  2380 					sta :ztmp
  2381 					lda >@VarData
  2382 					ldy #@VarDataSize-1
  2383 					jmp @FreeMem
  2384 					els
  2385 1BA3 60				rts						; ret
  2386 					eif
  2387 				.endl
  2388
  2389 1BA4			.local	SETLEVEL02					; PROCEDURE
  2390
  2391 				; optimize OK (levels.inc), line = 39
  2392
  2393 1BA4 A9 01			lda #$01
  2394 1BA6 8D F3 2A			sta SETPLAYER.ISALIVE
  2395 1BA9 A9 62			lda #$62
  2396 1BAB 8D F2 2A			sta SETPLAYER.COLOUR
  2397 1BAE A9 51			lda #$51
  2398 1BB0 8D F1 2A			sta SETPLAYER.HEAD
  2399 1BB3 A9 00			lda #$00
  2400 1BB5 8D F0 2A			sta SETPLAYER.BRAIN
  2401 1BB8 A9 08			lda #$08
  2402 1BBA 8D EF 2A			sta SETPLAYER.DIR
  2403 1BBD A9 0C			lda #$0C
  2404 1BBF 8D EE 2A			sta SETPLAYER.Y
  2405 1BC2 A9 0A			lda #$0A
  2406 1BC4 8D ED 2A			sta SETPLAYER.X
  2407 1BC7 AD 8F 2A			lda PLAYER1
  2408 1BCA 8D EB 2A			sta SETPLAYER.P
  2409 1BCD AD 90 2A			lda PLAYER1+1
  2410 1BD0 8D EC 2A			sta SETPLAYER.P+1
  2411 1BD3 20 23 14			jsr SETPLAYER
  2412
  2413 				; optimize OK (levels.inc), line = 40
  2414
  2415 1BD6 A9 01			lda #$01
  2416 1BD8 8D F3 2A			sta SETPLAYER.ISALIVE
  2417 1BDB A9 5D			lda #$5D
  2418 1BDD 8D F2 2A			sta SETPLAYER.COLOUR
  2419 1BE0 A9 51			lda #$51
  2420 1BE2 8D F1 2A			sta SETPLAYER.HEAD
  2421 1BE5 A9 03			lda #$03
  2422 1BE7 8D F0 2A			sta SETPLAYER.BRAIN
  2423 1BEA A9 04			lda #$04
  2424 1BEC 8D EF 2A			sta SETPLAYER.DIR
  2425 1BEF A9 0C			lda #$0C
  2426 1BF1 8D EE 2A			sta SETPLAYER.Y
  2427 1BF4 A9 1E			lda #$1E
  2428 1BF6 8D ED 2A			sta SETPLAYER.X
  2429 1BF9 AD 91 2A			lda PLAYER2
  2430 1BFC 8D EB 2A			sta SETPLAYER.P
  2431 1BFF AD 92 2A			lda PLAYER2+1
  2432 1C02 8D EC 2A			sta SETPLAYER.P+1
  2433 1C05 20 23 14			jsr SETPLAYER
  2434
  2435 				; optimize FAIL (1, levels.inc), line = 42
  2436
  2437 1C08 E8				inx
  2438 1C09 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2439 1C0D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2440 1C0F A9 06			lda #$06
  2441 1C11 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2442 1C14 A9 0A			lda #$0A
  2443 1C16 8D E7 2A			sta CALCOBSTACLEADDR.X
  2444 1C19 20 F3 12			jsr CALCOBSTACLEADDR
  2445 1C1C B4 17			ldy :STACKORIGIN-1,x
  2446 1C1E B5 18			lda :STACKORIGIN,x
  2447 1C20 99 CE 2A			sta adr.OBSTACLES,y
  2448 1C23 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2449 1C25 99 CF 2A			sta adr.OBSTACLES+1,y
  2450 1C28 CA				dex
  2451
  2452 				; optimize FAIL (1, levels.inc), line = 43
  2453
  2454 1C29 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2455 1C2D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2456 1C31 A9 06			lda #$06
  2457 1C33 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2458 1C36 A9 1E			lda #$1E
  2459 1C38 8D E7 2A			sta CALCOBSTACLEADDR.X
  2460 1C3B 20 F3 12			jsr CALCOBSTACLEADDR
  2461 1C3E B4 17			ldy :STACKORIGIN-1,x
  2462 1C40 B5 18			lda :STACKORIGIN,x
  2463 1C42 99 CE 2A			sta adr.OBSTACLES,y
  2464 1C45 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2465 1C47 99 CF 2A			sta adr.OBSTACLES+1,y
  2466 1C4A CA				dex
  2467
  2468 				; optimize FAIL (1, levels.inc), line = 44
  2469
  2470 1C4B A9 04 95 18			mva #$04 :STACKORIGIN,x
  2471 1C4F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2472 1C53 A9 12			lda #$12
  2473 1C55 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2474 1C58 A9 0A			lda #$0A
  2475 1C5A 8D E7 2A			sta CALCOBSTACLEADDR.X
  2476 1C5D 20 F3 12			jsr CALCOBSTACLEADDR
  2477 1C60 B4 17			ldy :STACKORIGIN-1,x
  2478 1C62 B5 18			lda :STACKORIGIN,x
  2479 1C64 99 CE 2A			sta adr.OBSTACLES,y
  2480 1C67 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2481 1C69 99 CF 2A			sta adr.OBSTACLES+1,y
  2482 1C6C CA				dex
  2483
  2484 				; optimize FAIL (1, levels.inc), line = 45
  2485
  2486 1C6D A9 06 95 18			mva #$06 :STACKORIGIN,x
  2487 1C71 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2488 1C75 A9 12			lda #$12
  2489 1C77 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2490 1C7A A9 1E			lda #$1E
  2491 1C7C 8D E7 2A			sta CALCOBSTACLEADDR.X
  2492 1C7F 20 F3 12			jsr CALCOBSTACLEADDR
  2493 1C82 B4 17			ldy :STACKORIGIN-1,x
  2494 1C84 B5 18			lda :STACKORIGIN,x
  2495 1C86 99 CE 2A			sta adr.OBSTACLES,y
  2496 1C89 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2497 1C8B 99 CF 2A			sta adr.OBSTACLES+1,y
  2498 1C8E CA				dex
  2499
  2500 				; optimize FAIL (1, levels.inc), line = 46
  2501
  2502 1C8F A9 08 95 18			mva #$08 :STACKORIGIN,x
  2503 1C93 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2504 1C97 A9 02			lda #$02
  2505 1C99 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2506 1C9C A9 14			lda #$14
  2507 1C9E 8D E7 2A			sta CALCOBSTACLEADDR.X
  2508 1CA1 20 F3 12			jsr CALCOBSTACLEADDR
  2509 1CA4 B4 17			ldy :STACKORIGIN-1,x
  2510 1CA6 B5 18			lda :STACKORIGIN,x
  2511 1CA8 99 CE 2A			sta adr.OBSTACLES,y
  2512 1CAB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2513 1CAD 99 CF 2A			sta adr.OBSTACLES+1,y
  2514 1CB0 CA				dex
  2515
  2516 				; optimize FAIL (1, levels.inc), line = 47
  2517
  2518 1CB1 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2519 1CB5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2520 1CB9 A9 16			lda #$16
  2521 1CBB 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2522 1CBE A9 14			lda #$14
  2523 1CC0 8D E7 2A			sta CALCOBSTACLEADDR.X
  2524 1CC3 20 F3 12			jsr CALCOBSTACLEADDR
  2525 1CC6 B4 17			ldy :STACKORIGIN-1,x
  2526 1CC8 B5 18			lda :STACKORIGIN,x
  2527 1CCA 99 CE 2A			sta adr.OBSTACLES,y
  2528 1CCD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2529 1CCF 99 CF 2A			sta adr.OBSTACLES+1,y
  2530 1CD2 CA				dex
  2531 1CD3 CA				dex
  2532
  2533 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 49
  2534
  2535 1CD4 20 16 13			jsr SAVEOBSTACLES
  2536 1CD7			@exit
  2537 					.ifdef @new
  2538 					lda <@VarData
  2539 					sta :ztmp
  2540 					lda >@VarData
  2541 					ldy #@VarDataSize-1
  2542 					jmp @FreeMem
  2543 					els
  2544 1CD7 60				rts						; ret
  2545 					eif
  2546 				.endl
  2547
  2548 1CD8			.local	SETLEVEL03					; PROCEDURE
  2549
  2550 				; optimize OK (levels.inc), line = 56
  2551
  2552 1CD8 A9 01			lda #$01
  2553 1CDA 8D F3 2A			sta SETPLAYER.ISALIVE
  2554 1CDD A9 62			lda #$62
  2555 1CDF 8D F2 2A			sta SETPLAYER.COLOUR
  2556 1CE2 A9 51			lda #$51
  2557 1CE4 8D F1 2A			sta SETPLAYER.HEAD
  2558 1CE7 A9 00			lda #$00
  2559 1CE9 8D F0 2A			sta SETPLAYER.BRAIN
  2560 1CEC A9 08			lda #$08
  2561 1CEE 8D EF 2A			sta SETPLAYER.DIR
  2562 1CF1 A9 0C			lda #$0C
  2563 1CF3 8D EE 2A			sta SETPLAYER.Y
  2564 1CF6 A9 0A			lda #$0A
  2565 1CF8 8D ED 2A			sta SETPLAYER.X
  2566 1CFB AD 8F 2A			lda PLAYER1
  2567 1CFE 8D EB 2A			sta SETPLAYER.P
  2568 1D01 AD 90 2A			lda PLAYER1+1
  2569 1D04 8D EC 2A			sta SETPLAYER.P+1
  2570 1D07 20 23 14			jsr SETPLAYER
  2571
  2572 				; optimize OK (levels.inc), line = 57
  2573
  2574 1D0A A9 01			lda #$01
  2575 1D0C 8D F3 2A			sta SETPLAYER.ISALIVE
  2576 1D0F A9 5D			lda #$5D
  2577 1D11 8D F2 2A			sta SETPLAYER.COLOUR
  2578 1D14 A9 51			lda #$51
  2579 1D16 8D F1 2A			sta SETPLAYER.HEAD
  2580 1D19 A9 02			lda #$02
  2581 1D1B 8D F0 2A			sta SETPLAYER.BRAIN
  2582 1D1E A9 04			lda #$04
  2583 1D20 8D EF 2A			sta SETPLAYER.DIR
  2584 1D23 A9 0C			lda #$0C
  2585 1D25 8D EE 2A			sta SETPLAYER.Y
  2586 1D28 A9 1E			lda #$1E
  2587 1D2A 8D ED 2A			sta SETPLAYER.X
  2588 1D2D AD 91 2A			lda PLAYER2
  2589 1D30 8D EB 2A			sta SETPLAYER.P
  2590 1D33 AD 92 2A			lda PLAYER2+1
  2591 1D36 8D EC 2A			sta SETPLAYER.P+1
  2592 1D39 20 23 14			jsr SETPLAYER
  2593
  2594 				; optimize FAIL (1, levels.inc), line = 59
  2595
  2596 1D3C E8				inx
  2597 1D3D A9 00 95 18			mva #$00 :STACKORIGIN,x
  2598 1D41 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2599 1D43 A9 06			lda #$06
  2600 1D45 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2601 1D48 A9 0A			lda #$0A
  2602 1D4A 8D E7 2A			sta CALCOBSTACLEADDR.X
  2603 1D4D 20 F3 12			jsr CALCOBSTACLEADDR
  2604 1D50 B4 17			ldy :STACKORIGIN-1,x
  2605 1D52 B5 18			lda :STACKORIGIN,x
  2606 1D54 99 CE 2A			sta adr.OBSTACLES,y
  2607 1D57 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2608 1D59 99 CF 2A			sta adr.OBSTACLES+1,y
  2609 1D5C CA				dex
  2610
  2611 				; optimize FAIL (1, levels.inc), line = 60
  2612
  2613 1D5D A9 02 95 18			mva #$02 :STACKORIGIN,x
  2614 1D61 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2615 1D65 A9 06			lda #$06
  2616 1D67 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2617 1D6A A9 1E			lda #$1E
  2618 1D6C 8D E7 2A			sta CALCOBSTACLEADDR.X
  2619 1D6F 20 F3 12			jsr CALCOBSTACLEADDR
  2620 1D72 B4 17			ldy :STACKORIGIN-1,x
  2621 1D74 B5 18			lda :STACKORIGIN,x
  2622 1D76 99 CE 2A			sta adr.OBSTACLES,y
  2623 1D79 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2624 1D7B 99 CF 2A			sta adr.OBSTACLES+1,y
  2625 1D7E CA				dex
  2626
  2627 				; optimize FAIL (1, levels.inc), line = 61
  2628
  2629 1D7F A9 04 95 18			mva #$04 :STACKORIGIN,x
  2630 1D83 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2631 1D87 A9 12			lda #$12
  2632 1D89 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2633 1D8C A9 0A			lda #$0A
  2634 1D8E 8D E7 2A			sta CALCOBSTACLEADDR.X
  2635 1D91 20 F3 12			jsr CALCOBSTACLEADDR
  2636 1D94 B4 17			ldy :STACKORIGIN-1,x
  2637 1D96 B5 18			lda :STACKORIGIN,x
  2638 1D98 99 CE 2A			sta adr.OBSTACLES,y
  2639 1D9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2640 1D9D 99 CF 2A			sta adr.OBSTACLES+1,y
  2641 1DA0 CA				dex
  2642
  2643 				; optimize FAIL (1, levels.inc), line = 62
  2644
  2645 1DA1 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2646 1DA5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2647 1DA9 A9 12			lda #$12
  2648 1DAB 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2649 1DAE A9 1E			lda #$1E
  2650 1DB0 8D E7 2A			sta CALCOBSTACLEADDR.X
  2651 1DB3 20 F3 12			jsr CALCOBSTACLEADDR
  2652 1DB6 B4 17			ldy :STACKORIGIN-1,x
  2653 1DB8 B5 18			lda :STACKORIGIN,x
  2654 1DBA 99 CE 2A			sta adr.OBSTACLES,y
  2655 1DBD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2656 1DBF 99 CF 2A			sta adr.OBSTACLES+1,y
  2657 1DC2 CA				dex
  2658
  2659 				; optimize FAIL (1, levels.inc), line = 63
  2660
  2661 1DC3 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2662 1DC7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2663 1DCB A9 0C			lda #$0C
  2664 1DCD 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2665 1DD0 A9 01			lda #$01
  2666 1DD2 8D E7 2A			sta CALCOBSTACLEADDR.X
  2667 1DD5 20 F3 12			jsr CALCOBSTACLEADDR
  2668 1DD8 B4 17			ldy :STACKORIGIN-1,x
  2669 1DDA B5 18			lda :STACKORIGIN,x
  2670 1DDC 99 CE 2A			sta adr.OBSTACLES,y
  2671 1DDF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2672 1DE1 99 CF 2A			sta adr.OBSTACLES+1,y
  2673 1DE4 CA				dex
  2674
  2675 				; optimize FAIL (1, levels.inc), line = 64
  2676
  2677 1DE5 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2678 1DE9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2679 1DED A9 02			lda #$02
  2680 1DEF 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2681 1DF2 A9 14			lda #$14
  2682 1DF4 8D E7 2A			sta CALCOBSTACLEADDR.X
  2683 1DF7 20 F3 12			jsr CALCOBSTACLEADDR
  2684 1DFA B4 17			ldy :STACKORIGIN-1,x
  2685 1DFC B5 18			lda :STACKORIGIN,x
  2686 1DFE 99 CE 2A			sta adr.OBSTACLES,y
  2687 1E01 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2688 1E03 99 CF 2A			sta adr.OBSTACLES+1,y
  2689 1E06 CA				dex
  2690
  2691 				; optimize FAIL (1, levels.inc), line = 65
  2692
  2693 1E07 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2694 1E0B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2695 1E0F A9 16			lda #$16
  2696 1E11 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2697 1E14 A9 14			lda #$14
  2698 1E16 8D E7 2A			sta CALCOBSTACLEADDR.X
  2699 1E19 20 F3 12			jsr CALCOBSTACLEADDR
  2700 1E1C B4 17			ldy :STACKORIGIN-1,x
  2701 1E1E B5 18			lda :STACKORIGIN,x
  2702 1E20 99 CE 2A			sta adr.OBSTACLES,y
  2703 1E23 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2704 1E25 99 CF 2A			sta adr.OBSTACLES+1,y
  2705 1E28 CA				dex
  2706 1E29 CA				dex
  2707
  2708 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 67
  2709
  2710 1E2A 20 16 13			jsr SAVEOBSTACLES
  2711 1E2D			@exit
  2712 					.ifdef @new
  2713 					lda <@VarData
  2714 					sta :ztmp
  2715 					lda >@VarData
  2716 					ldy #@VarDataSize-1
  2717 					jmp @FreeMem
  2718 					els
  2719 1E2D 60				rts						; ret
  2720 					eif
  2721 				.endl
  2722
  2723 1E2E			.local	SETLEVEL04					; PROCEDURE
  2724
  2725 				; optimize OK (levels.inc), line = 74
  2726
  2727 1E2E A9 01			lda #$01
  2728 1E30 8D F3 2A			sta SETPLAYER.ISALIVE
  2729 1E33 A9 62			lda #$62
  2730 1E35 8D F2 2A			sta SETPLAYER.COLOUR
  2731 1E38 A9 51			lda #$51
  2732 1E3A 8D F1 2A			sta SETPLAYER.HEAD
  2733 1E3D A9 00			lda #$00
  2734 1E3F 8D F0 2A			sta SETPLAYER.BRAIN
  2735 1E42 A9 04			lda #$04
  2736 1E44 8D EF 2A			sta SETPLAYER.DIR
  2737 1E47 A9 0C			lda #$0C
  2738 1E49 8D EE 2A			sta SETPLAYER.Y
  2739 1E4C A9 12			lda #$12
  2740 1E4E 8D ED 2A			sta SETPLAYER.X
  2741 1E51 AD 8F 2A			lda PLAYER1
  2742 1E54 8D EB 2A			sta SETPLAYER.P
  2743 1E57 AD 90 2A			lda PLAYER1+1
  2744 1E5A 8D EC 2A			sta SETPLAYER.P+1
  2745 1E5D 20 23 14			jsr SETPLAYER
  2746
  2747 				; optimize OK (levels.inc), line = 75
  2748
  2749 1E60 A9 01			lda #$01
  2750 1E62 8D F3 2A			sta SETPLAYER.ISALIVE
  2751 1E65 A9 5D			lda #$5D
  2752 1E67 8D F2 2A			sta SETPLAYER.COLOUR
  2753 1E6A A9 51			lda #$51
  2754 1E6C 8D F1 2A			sta SETPLAYER.HEAD
  2755 1E6F A9 04			lda #$04
  2756 1E71 8D F0 2A			sta SETPLAYER.BRAIN
  2757 1E74 A9 08			lda #$08
  2758 1E76 8D EF 2A			sta SETPLAYER.DIR
  2759 1E79 A9 0C			lda #$0C
  2760 1E7B 8D EE 2A			sta SETPLAYER.Y
  2761 1E7E A9 16			lda #$16
  2762 1E80 8D ED 2A			sta SETPLAYER.X
  2763 1E83 AD 91 2A			lda PLAYER2
  2764 1E86 8D EB 2A			sta SETPLAYER.P
  2765 1E89 AD 92 2A			lda PLAYER2+1
  2766 1E8C 8D EC 2A			sta SETPLAYER.P+1
  2767 1E8F 20 23 14			jsr SETPLAYER
  2768
  2769 				; optimize FAIL (1, levels.inc), line = 77
  2770
  2771 1E92 E8				inx
  2772 1E93 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2773 1E97 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2774 1E99 A9 06			lda #$06
  2775 1E9B 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2776 1E9E A9 0A			lda #$0A
  2777 1EA0 8D E7 2A			sta CALCOBSTACLEADDR.X
  2778 1EA3 20 F3 12			jsr CALCOBSTACLEADDR
  2779 1EA6 B4 17			ldy :STACKORIGIN-1,x
  2780 1EA8 B5 18			lda :STACKORIGIN,x
  2781 1EAA 99 CE 2A			sta adr.OBSTACLES,y
  2782 1EAD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2783 1EAF 99 CF 2A			sta adr.OBSTACLES+1,y
  2784 1EB2 CA				dex
  2785
  2786 				; optimize FAIL (1, levels.inc), line = 78
  2787
  2788 1EB3 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2789 1EB7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2790 1EBB A9 06			lda #$06
  2791 1EBD 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2792 1EC0 A9 1E			lda #$1E
  2793 1EC2 8D E7 2A			sta CALCOBSTACLEADDR.X
  2794 1EC5 20 F3 12			jsr CALCOBSTACLEADDR
  2795 1EC8 B4 17			ldy :STACKORIGIN-1,x
  2796 1ECA B5 18			lda :STACKORIGIN,x
  2797 1ECC 99 CE 2A			sta adr.OBSTACLES,y
  2798 1ECF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2799 1ED1 99 CF 2A			sta adr.OBSTACLES+1,y
  2800 1ED4 CA				dex
  2801
  2802 				; optimize FAIL (1, levels.inc), line = 79
  2803
  2804 1ED5 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2805 1ED9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2806 1EDD A9 12			lda #$12
  2807 1EDF 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2808 1EE2 A9 0A			lda #$0A
  2809 1EE4 8D E7 2A			sta CALCOBSTACLEADDR.X
  2810 1EE7 20 F3 12			jsr CALCOBSTACLEADDR
  2811 1EEA B4 17			ldy :STACKORIGIN-1,x
  2812 1EEC B5 18			lda :STACKORIGIN,x
  2813 1EEE 99 CE 2A			sta adr.OBSTACLES,y
  2814 1EF1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2815 1EF3 99 CF 2A			sta adr.OBSTACLES+1,y
  2816 1EF6 CA				dex
  2817
  2818 				; optimize FAIL (1, levels.inc), line = 80
  2819
  2820 1EF7 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2821 1EFB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2822 1EFF A9 12			lda #$12
  2823 1F01 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2824 1F04 A9 1E			lda #$1E
  2825 1F06 8D E7 2A			sta CALCOBSTACLEADDR.X
  2826 1F09 20 F3 12			jsr CALCOBSTACLEADDR
  2827 1F0C B4 17			ldy :STACKORIGIN-1,x
  2828 1F0E B5 18			lda :STACKORIGIN,x
  2829 1F10 99 CE 2A			sta adr.OBSTACLES,y
  2830 1F13 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2831 1F15 99 CF 2A			sta adr.OBSTACLES+1,y
  2832 1F18 CA				dex
  2833
  2834 				; optimize FAIL (1, levels.inc), line = 81
  2835
  2836 1F19 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2837 1F1D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2838 1F21 A9 0C			lda #$0C
  2839 1F23 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2840 1F26 A9 01			lda #$01
  2841 1F28 8D E7 2A			sta CALCOBSTACLEADDR.X
  2842 1F2B 20 F3 12			jsr CALCOBSTACLEADDR
  2843 1F2E B4 17			ldy :STACKORIGIN-1,x
  2844 1F30 B5 18			lda :STACKORIGIN,x
  2845 1F32 99 CE 2A			sta adr.OBSTACLES,y
  2846 1F35 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2847 1F37 99 CF 2A			sta adr.OBSTACLES+1,y
  2848 1F3A CA				dex
  2849
  2850 				; optimize FAIL (1, levels.inc), line = 82
  2851
  2852 1F3B A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2853 1F3F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2854 1F43 A9 02			lda #$02
  2855 1F45 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2856 1F48 A9 14			lda #$14
  2857 1F4A 8D E7 2A			sta CALCOBSTACLEADDR.X
  2858 1F4D 20 F3 12			jsr CALCOBSTACLEADDR
  2859 1F50 B4 17			ldy :STACKORIGIN-1,x
  2860 1F52 B5 18			lda :STACKORIGIN,x
  2861 1F54 99 CE 2A			sta adr.OBSTACLES,y
  2862 1F57 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2863 1F59 99 CF 2A			sta adr.OBSTACLES+1,y
  2864 1F5C CA				dex
  2865
  2866 				; optimize FAIL (1, levels.inc), line = 83
  2867
  2868 1F5D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2869 1F61 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2870 1F65 A9 16			lda #$16
  2871 1F67 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2872 1F6A A9 14			lda #$14
  2873 1F6C 8D E7 2A			sta CALCOBSTACLEADDR.X
  2874 1F6F 20 F3 12			jsr CALCOBSTACLEADDR
  2875 1F72 B4 17			ldy :STACKORIGIN-1,x
  2876 1F74 B5 18			lda :STACKORIGIN,x
  2877 1F76 99 CE 2A			sta adr.OBSTACLES,y
  2878 1F79 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2879 1F7B 99 CF 2A			sta adr.OBSTACLES+1,y
  2880 1F7E CA				dex
  2881
  2882 				; optimize FAIL (1, levels.inc), line = 84
  2883
  2884 1F7F A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2885 1F83 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2886 1F87 A9 0C			lda #$0C
  2887 1F89 8D E8 2A			sta CALCOBSTACLEADDR.Y
  2888 1F8C A9 14			lda #$14
  2889 1F8E 8D E7 2A			sta CALCOBSTACLEADDR.X
  2890 1F91 20 F3 12			jsr CALCOBSTACLEADDR
  2891 1F94 B4 17			ldy :STACKORIGIN-1,x
  2892 1F96 B5 18			lda :STACKORIGIN,x
  2893 1F98 99 CE 2A			sta adr.OBSTACLES,y
  2894 1F9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2895 1F9D 99 CF 2A			sta adr.OBSTACLES+1,y
  2896 1FA0 CA				dex
  2897 1FA1 CA				dex
  2898
  2899 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 86
  2900
  2901 1FA2 20 16 13			jsr SAVEOBSTACLES
  2902 1FA5			@exit
  2903 					.ifdef @new
  2904 					lda <@VarData
  2905 					sta :ztmp
  2906 					lda >@VarData
  2907 					ldy #@VarDataSize-1
  2908 					jmp @FreeMem
  2909 					els
  2910 1FA5 60				rts						; ret
  2911 					eif
  2912 				.endl
  2913
  2914 1FA6			.local	SETLEVEL05					; PROCEDURE
  2915
  2916 				; optimize OK (levels.inc), line = 93
  2917
  2918 1FA6 A9 01			lda #$01
  2919 1FA8 8D F3 2A			sta SETPLAYER.ISALIVE
  2920 1FAB A9 62			lda #$62
  2921 1FAD 8D F2 2A			sta SETPLAYER.COLOUR
  2922 1FB0 A9 51			lda #$51
  2923 1FB2 8D F1 2A			sta SETPLAYER.HEAD
  2924 1FB5 A9 00			lda #$00
  2925 1FB7 8D F0 2A			sta SETPLAYER.BRAIN
  2926 1FBA A9 08			lda #$08
  2927 1FBC 8D EF 2A			sta SETPLAYER.DIR
  2928 1FBF A9 0C			lda #$0C
  2929 1FC1 8D EE 2A			sta SETPLAYER.Y
  2930 1FC4 A9 0A			lda #$0A
  2931 1FC6 8D ED 2A			sta SETPLAYER.X
  2932 1FC9 AD 8F 2A			lda PLAYER1
  2933 1FCC 8D EB 2A			sta SETPLAYER.P
  2934 1FCF AD 90 2A			lda PLAYER1+1
  2935 1FD2 8D EC 2A			sta SETPLAYER.P+1
  2936 1FD5 20 23 14			jsr SETPLAYER
  2937
  2938 				; optimize OK (levels.inc), line = 94
  2939
  2940 1FD8 A9 01			lda #$01
  2941 1FDA 8D F3 2A			sta SETPLAYER.ISALIVE
  2942 1FDD A9 5D			lda #$5D
  2943 1FDF 8D F2 2A			sta SETPLAYER.COLOUR
  2944 1FE2 A9 51			lda #$51
  2945 1FE4 8D F1 2A			sta SETPLAYER.HEAD
  2946 1FE7 A9 04			lda #$04
  2947 1FE9 8D F0 2A			sta SETPLAYER.BRAIN
  2948 1FEC 8D EF 2A			sta SETPLAYER.DIR
  2949 1FEF A9 0C			lda #$0C
  2950 1FF1 8D EE 2A			sta SETPLAYER.Y
  2951 1FF4 A9 1E			lda #$1E
  2952 1FF6 8D ED 2A			sta SETPLAYER.X
  2953 1FF9 AD 91 2A			lda PLAYER2
  2954 1FFC 8D EB 2A			sta SETPLAYER.P
  2955 1FFF AD 92 2A			lda PLAYER2+1
  2956 2002 8D EC 2A			sta SETPLAYER.P+1
  2957 2005 20 23 14			jsr SETPLAYER
  2958
  2959 				; optimize OK (levels.inc), line = 95
  2960
  2961 2008 A9 01			lda #$01
  2962 200A 8D F3 2A			sta SETPLAYER.ISALIVE
  2963 200D A9 71			lda #$71
  2964 200F 8D F2 2A			sta SETPLAYER.COLOUR
  2965 2012 A9 51			lda #$51
  2966 2014 8D F1 2A			sta SETPLAYER.HEAD
  2967 2017 A9 03			lda #$03
  2968 2019 8D F0 2A			sta SETPLAYER.BRAIN
  2969 201C A9 02			lda #$02
  2970 201E 8D EF 2A			sta SETPLAYER.DIR
  2971 2021 A9 04			lda #$04
  2972 2023 8D EE 2A			sta SETPLAYER.Y
  2973 2026 A9 14			lda #$14
  2974 2028 8D ED 2A			sta SETPLAYER.X
  2975 202B AD 93 2A			lda PLAYER3
  2976 202E 8D EB 2A			sta SETPLAYER.P
  2977 2031 AD 94 2A			lda PLAYER3+1
  2978 2034 8D EC 2A			sta SETPLAYER.P+1
  2979 2037 20 23 14			jsr SETPLAYER
  2980
  2981 				; optimize OK (levels.inc), line = 96
  2982
  2983 203A A9 01			lda #$01
  2984 203C 8D F3 2A			sta SETPLAYER.ISALIVE
  2985 203F A9 55			lda #$55
  2986 2041 8D F2 2A			sta SETPLAYER.COLOUR
  2987 2044 A9 51			lda #$51
  2988 2046 8D F1 2A			sta SETPLAYER.HEAD
  2989 2049 A9 02			lda #$02
  2990 204B 8D F0 2A			sta SETPLAYER.BRAIN
  2991 204E A9 01			lda #$01
  2992 2050 8D EF 2A			sta SETPLAYER.DIR
  2993 2053 A9 12			lda #$12
  2994 2055 8D EE 2A			sta SETPLAYER.Y
  2995 2058 A9 14			lda #$14
  2996 205A 8D ED 2A			sta SETPLAYER.X
  2997 205D AD 95 2A			lda PLAYER4
  2998 2060 8D EB 2A			sta SETPLAYER.P
  2999 2063 AD 96 2A			lda PLAYER4+1
  3000 2066 8D EC 2A			sta SETPLAYER.P+1
  3001 2069 20 23 14			jsr SETPLAYER
  3002
  3003 				; optimize FAIL (1, levels.inc), line = 98
  3004
  3005 206C E8				inx
  3006 206D A9 00 95 18			mva #$00 :STACKORIGIN,x
  3007 2071 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3008 2073 A9 06			lda #$06
  3009 2075 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3010 2078 A9 0A			lda #$0A
  3011 207A 8D E7 2A			sta CALCOBSTACLEADDR.X
  3012 207D 20 F3 12			jsr CALCOBSTACLEADDR
  3013 2080 B4 17			ldy :STACKORIGIN-1,x
  3014 2082 B5 18			lda :STACKORIGIN,x
  3015 2084 99 CE 2A			sta adr.OBSTACLES,y
  3016 2087 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3017 2089 99 CF 2A			sta adr.OBSTACLES+1,y
  3018 208C CA				dex
  3019
  3020 				; optimize FAIL (1, levels.inc), line = 99
  3021
  3022 208D A9 02 95 18			mva #$02 :STACKORIGIN,x
  3023 2091 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3024 2095 A9 06			lda #$06
  3025 2097 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3026 209A A9 1E			lda #$1E
  3027 209C 8D E7 2A			sta CALCOBSTACLEADDR.X
  3028 209F 20 F3 12			jsr CALCOBSTACLEADDR
  3029 20A2 B4 17			ldy :STACKORIGIN-1,x
  3030 20A4 B5 18			lda :STACKORIGIN,x
  3031 20A6 99 CE 2A			sta adr.OBSTACLES,y
  3032 20A9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3033 20AB 99 CF 2A			sta adr.OBSTACLES+1,y
  3034 20AE CA				dex
  3035
  3036 				; optimize FAIL (1, levels.inc), line = 100
  3037
  3038 20AF A9 04 95 18			mva #$04 :STACKORIGIN,x
  3039 20B3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3040 20B7 A9 12			lda #$12
  3041 20B9 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3042 20BC A9 0A			lda #$0A
  3043 20BE 8D E7 2A			sta CALCOBSTACLEADDR.X
  3044 20C1 20 F3 12			jsr CALCOBSTACLEADDR
  3045 20C4 B4 17			ldy :STACKORIGIN-1,x
  3046 20C6 B5 18			lda :STACKORIGIN,x
  3047 20C8 99 CE 2A			sta adr.OBSTACLES,y
  3048 20CB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3049 20CD 99 CF 2A			sta adr.OBSTACLES+1,y
  3050 20D0 CA				dex
  3051
  3052 				; optimize FAIL (1, levels.inc), line = 101
  3053
  3054 20D1 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3055 20D5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3056 20D9 A9 12			lda #$12
  3057 20DB 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3058 20DE A9 1E			lda #$1E
  3059 20E0 8D E7 2A			sta CALCOBSTACLEADDR.X
  3060 20E3 20 F3 12			jsr CALCOBSTACLEADDR
  3061 20E6 B4 17			ldy :STACKORIGIN-1,x
  3062 20E8 B5 18			lda :STACKORIGIN,x
  3063 20EA 99 CE 2A			sta adr.OBSTACLES,y
  3064 20ED B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3065 20EF 99 CF 2A			sta adr.OBSTACLES+1,y
  3066 20F2 CA				dex
  3067
  3068 				; optimize FAIL (1, levels.inc), line = 102
  3069
  3070 20F3 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3071 20F7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3072 20FB A9 0C			lda #$0C
  3073 20FD 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3074 2100 A9 01			lda #$01
  3075 2102 8D E7 2A			sta CALCOBSTACLEADDR.X
  3076 2105 20 F3 12			jsr CALCOBSTACLEADDR
  3077 2108 B4 17			ldy :STACKORIGIN-1,x
  3078 210A B5 18			lda :STACKORIGIN,x
  3079 210C 99 CE 2A			sta adr.OBSTACLES,y
  3080 210F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3081 2111 99 CF 2A			sta adr.OBSTACLES+1,y
  3082 2114 CA				dex
  3083
  3084 				; optimize FAIL (1, levels.inc), line = 103
  3085
  3086 2115 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3087 2119 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3088 211D A9 02			lda #$02
  3089 211F 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3090 2122 A9 14			lda #$14
  3091 2124 8D E7 2A			sta CALCOBSTACLEADDR.X
  3092 2127 20 F3 12			jsr CALCOBSTACLEADDR
  3093 212A B4 17			ldy :STACKORIGIN-1,x
  3094 212C B5 18			lda :STACKORIGIN,x
  3095 212E 99 CE 2A			sta adr.OBSTACLES,y
  3096 2131 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3097 2133 99 CF 2A			sta adr.OBSTACLES+1,y
  3098 2136 CA				dex
  3099
  3100 				; optimize FAIL (1, levels.inc), line = 104
  3101
  3102 2137 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3103 213B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3104 213F A9 16			lda #$16
  3105 2141 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3106 2144 A9 14			lda #$14
  3107 2146 8D E7 2A			sta CALCOBSTACLEADDR.X
  3108 2149 20 F3 12			jsr CALCOBSTACLEADDR
  3109 214C B4 17			ldy :STACKORIGIN-1,x
  3110 214E B5 18			lda :STACKORIGIN,x
  3111 2150 99 CE 2A			sta adr.OBSTACLES,y
  3112 2153 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3113 2155 99 CF 2A			sta adr.OBSTACLES+1,y
  3114 2158 CA				dex
  3115 2159 CA				dex
  3116
  3117 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 106
  3118
  3119 215A 20 16 13			jsr SAVEOBSTACLES
  3120 215D			@exit
  3121 					.ifdef @new
  3122 					lda <@VarData
  3123 					sta :ztmp
  3124 					lda >@VarData
  3125 					ldy #@VarDataSize-1
  3126 					jmp @FreeMem
  3127 					els
  3128 215D 60				rts						; ret
  3129 					eif
  3130 				.endl
  3131
  3132 215E			.local	SETLEVEL06					; PROCEDURE
  3133
  3134 				; optimize OK (levels.inc), line = 113
  3135
  3136 215E A9 01			lda #$01
  3137 2160 8D F3 2A			sta SETPLAYER.ISALIVE
  3138 2163 A9 62			lda #$62
  3139 2165 8D F2 2A			sta SETPLAYER.COLOUR
  3140 2168 A9 51			lda #$51
  3141 216A 8D F1 2A			sta SETPLAYER.HEAD
  3142 216D A9 00			lda #$00
  3143 216F 8D F0 2A			sta SETPLAYER.BRAIN
  3144 2172 A9 04			lda #$04
  3145 2174 8D EF 2A			sta SETPLAYER.DIR
  3146 2177 A9 0C			lda #$0C
  3147 2179 8D EE 2A			sta SETPLAYER.Y
  3148 217C A9 12			lda #$12
  3149 217E 8D ED 2A			sta SETPLAYER.X
  3150 2181 AD 8F 2A			lda PLAYER1
  3151 2184 8D EB 2A			sta SETPLAYER.P
  3152 2187 AD 90 2A			lda PLAYER1+1
  3153 218A 8D EC 2A			sta SETPLAYER.P+1
  3154 218D 20 23 14			jsr SETPLAYER
  3155
  3156 				; optimize OK (levels.inc), line = 114
  3157
  3158 2190 A9 01			lda #$01
  3159 2192 8D F3 2A			sta SETPLAYER.ISALIVE
  3160 2195 A9 5D			lda #$5D
  3161 2197 8D F2 2A			sta SETPLAYER.COLOUR
  3162 219A A9 51			lda #$51
  3163 219C 8D F1 2A			sta SETPLAYER.HEAD
  3164 219F A9 02			lda #$02
  3165 21A1 8D F0 2A			sta SETPLAYER.BRAIN
  3166 21A4 A9 08			lda #$08
  3167 21A6 8D EF 2A			sta SETPLAYER.DIR
  3168 21A9 A9 0C			lda #$0C
  3169 21AB 8D EE 2A			sta SETPLAYER.Y
  3170 21AE A9 16			lda #$16
  3171 21B0 8D ED 2A			sta SETPLAYER.X
  3172 21B3 AD 91 2A			lda PLAYER2
  3173 21B6 8D EB 2A			sta SETPLAYER.P
  3174 21B9 AD 92 2A			lda PLAYER2+1
  3175 21BC 8D EC 2A			sta SETPLAYER.P+1
  3176 21BF 20 23 14			jsr SETPLAYER
  3177
  3178 				; optimize OK (levels.inc), line = 115
  3179
  3180 21C2 A9 01			lda #$01
  3181 21C4 8D F3 2A			sta SETPLAYER.ISALIVE
  3182 21C7 A9 71			lda #$71
  3183 21C9 8D F2 2A			sta SETPLAYER.COLOUR
  3184 21CC A9 51			lda #$51
  3185 21CE 8D F1 2A			sta SETPLAYER.HEAD
  3186 21D1 A9 02			lda #$02
  3187 21D3 8D F0 2A			sta SETPLAYER.BRAIN
  3188 21D6 8D EF 2A			sta SETPLAYER.DIR
  3189 21D9 A9 06			lda #$06
  3190 21DB 8D EE 2A			sta SETPLAYER.Y
  3191 21DE 8D ED 2A			sta SETPLAYER.X
  3192 21E1 AD 93 2A			lda PLAYER3
  3193 21E4 8D EB 2A			sta SETPLAYER.P
  3194 21E7 AD 94 2A			lda PLAYER3+1
  3195 21EA 8D EC 2A			sta SETPLAYER.P+1
  3196 21ED 20 23 14			jsr SETPLAYER
  3197
  3198 				; optimize OK (levels.inc), line = 116
  3199
  3200 21F0 A9 01			lda #$01
  3201 21F2 8D F3 2A			sta SETPLAYER.ISALIVE
  3202 21F5 A9 55			lda #$55
  3203 21F7 8D F2 2A			sta SETPLAYER.COLOUR
  3204 21FA A9 51			lda #$51
  3205 21FC 8D F1 2A			sta SETPLAYER.HEAD
  3206 21FF A9 03			lda #$03
  3207 2201 8D F0 2A			sta SETPLAYER.BRAIN
  3208 2204 A9 08			lda #$08
  3209 2206 8D EF 2A			sta SETPLAYER.DIR
  3210 2209 A9 12			lda #$12
  3211 220B 8D EE 2A			sta SETPLAYER.Y
  3212 220E A9 24			lda #$24
  3213 2210 8D ED 2A			sta SETPLAYER.X
  3214 2213 AD 95 2A			lda PLAYER4
  3215 2216 8D EB 2A			sta SETPLAYER.P
  3216 2219 AD 96 2A			lda PLAYER4+1
  3217 221C 8D EC 2A			sta SETPLAYER.P+1
  3218 221F 20 23 14			jsr SETPLAYER
  3219
  3220 				; optimize FAIL (1, levels.inc), line = 118
  3221
  3222 2222 E8				inx
  3223 2223 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3224 2227 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3225 2229 A9 06			lda #$06
  3226 222B 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3227 222E A9 0A			lda #$0A
  3228 2230 8D E7 2A			sta CALCOBSTACLEADDR.X
  3229 2233 20 F3 12			jsr CALCOBSTACLEADDR
  3230 2236 B4 17			ldy :STACKORIGIN-1,x
  3231 2238 B5 18			lda :STACKORIGIN,x
  3232 223A 99 CE 2A			sta adr.OBSTACLES,y
  3233 223D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3234 223F 99 CF 2A			sta adr.OBSTACLES+1,y
  3235 2242 CA				dex
  3236
  3237 				; optimize FAIL (1, levels.inc), line = 119
  3238
  3239 2243 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3240 2247 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3241 224B A9 06			lda #$06
  3242 224D 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3243 2250 A9 1E			lda #$1E
  3244 2252 8D E7 2A			sta CALCOBSTACLEADDR.X
  3245 2255 20 F3 12			jsr CALCOBSTACLEADDR
  3246 2258 B4 17			ldy :STACKORIGIN-1,x
  3247 225A B5 18			lda :STACKORIGIN,x
  3248 225C 99 CE 2A			sta adr.OBSTACLES,y
  3249 225F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3250 2261 99 CF 2A			sta adr.OBSTACLES+1,y
  3251 2264 CA				dex
  3252
  3253 				; optimize FAIL (1, levels.inc), line = 120
  3254
  3255 2265 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3256 2269 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3257 226D A9 12			lda #$12
  3258 226F 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3259 2272 A9 0A			lda #$0A
  3260 2274 8D E7 2A			sta CALCOBSTACLEADDR.X
  3261 2277 20 F3 12			jsr CALCOBSTACLEADDR
  3262 227A B4 17			ldy :STACKORIGIN-1,x
  3263 227C B5 18			lda :STACKORIGIN,x
  3264 227E 99 CE 2A			sta adr.OBSTACLES,y
  3265 2281 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3266 2283 99 CF 2A			sta adr.OBSTACLES+1,y
  3267 2286 CA				dex
  3268
  3269 				; optimize FAIL (1, levels.inc), line = 121
  3270
  3271 2287 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3272 228B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3273 228F A9 12			lda #$12
  3274 2291 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3275 2294 A9 1E			lda #$1E
  3276 2296 8D E7 2A			sta CALCOBSTACLEADDR.X
  3277 2299 20 F3 12			jsr CALCOBSTACLEADDR
  3278 229C B4 17			ldy :STACKORIGIN-1,x
  3279 229E B5 18			lda :STACKORIGIN,x
  3280 22A0 99 CE 2A			sta adr.OBSTACLES,y
  3281 22A3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3282 22A5 99 CF 2A			sta adr.OBSTACLES+1,y
  3283 22A8 CA				dex
  3284
  3285 				; optimize FAIL (1, levels.inc), line = 122
  3286
  3287 22A9 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3288 22AD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3289 22B1 A9 0C			lda #$0C
  3290 22B3 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3291 22B6 A9 01			lda #$01
  3292 22B8 8D E7 2A			sta CALCOBSTACLEADDR.X
  3293 22BB 20 F3 12			jsr CALCOBSTACLEADDR
  3294 22BE B4 17			ldy :STACKORIGIN-1,x
  3295 22C0 B5 18			lda :STACKORIGIN,x
  3296 22C2 99 CE 2A			sta adr.OBSTACLES,y
  3297 22C5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3298 22C7 99 CF 2A			sta adr.OBSTACLES+1,y
  3299 22CA CA				dex
  3300
  3301 				; optimize FAIL (1, levels.inc), line = 123
  3302
  3303 22CB A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3304 22CF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3305 22D3 A9 02			lda #$02
  3306 22D5 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3307 22D8 A9 14			lda #$14
  3308 22DA 8D E7 2A			sta CALCOBSTACLEADDR.X
  3309 22DD 20 F3 12			jsr CALCOBSTACLEADDR
  3310 22E0 B4 17			ldy :STACKORIGIN-1,x
  3311 22E2 B5 18			lda :STACKORIGIN,x
  3312 22E4 99 CE 2A			sta adr.OBSTACLES,y
  3313 22E7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3314 22E9 99 CF 2A			sta adr.OBSTACLES+1,y
  3315 22EC CA				dex
  3316
  3317 				; optimize FAIL (1, levels.inc), line = 124
  3318
  3319 22ED A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3320 22F1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3321 22F5 A9 16			lda #$16
  3322 22F7 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3323 22FA A9 14			lda #$14
  3324 22FC 8D E7 2A			sta CALCOBSTACLEADDR.X
  3325 22FF 20 F3 12			jsr CALCOBSTACLEADDR
  3326 2302 B4 17			ldy :STACKORIGIN-1,x
  3327 2304 B5 18			lda :STACKORIGIN,x
  3328 2306 99 CE 2A			sta adr.OBSTACLES,y
  3329 2309 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3330 230B 99 CF 2A			sta adr.OBSTACLES+1,y
  3331 230E CA				dex
  3332
  3333 				; optimize FAIL (1, levels.inc), line = 125
  3334
  3335 230F A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3336 2313 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3337 2317 A9 0C			lda #$0C
  3338 2319 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3339 231C A9 14			lda #$14
  3340 231E 8D E7 2A			sta CALCOBSTACLEADDR.X
  3341 2321 20 F3 12			jsr CALCOBSTACLEADDR
  3342 2324 B4 17			ldy :STACKORIGIN-1,x
  3343 2326 B5 18			lda :STACKORIGIN,x
  3344 2328 99 CE 2A			sta adr.OBSTACLES,y
  3345 232B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3346 232D 99 CF 2A			sta adr.OBSTACLES+1,y
  3347 2330 CA				dex
  3348 2331 CA				dex
  3349
  3350 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 127
  3351
  3352 2332 20 16 13			jsr SAVEOBSTACLES
  3353 2335			@exit
  3354 					.ifdef @new
  3355 					lda <@VarData
  3356 					sta :ztmp
  3357 					lda >@VarData
  3358 					ldy #@VarDataSize-1
  3359 					jmp @FreeMem
  3360 					els
  3361 2335 60				rts						; ret
  3362 					eif
  3363 				.endl
  3364
  3365 2336			.local	SETLEVEL07					; PROCEDURE
  3366
  3367 				; optimize OK (levels.inc), line = 134
  3368
  3369 2336 A9 01			lda #$01
  3370 2338 8D F3 2A			sta SETPLAYER.ISALIVE
  3371 233B A9 62			lda #$62
  3372 233D 8D F2 2A			sta SETPLAYER.COLOUR
  3373 2340 A9 51			lda #$51
  3374 2342 8D F1 2A			sta SETPLAYER.HEAD
  3375 2345 A9 00			lda #$00
  3376 2347 8D F0 2A			sta SETPLAYER.BRAIN
  3377 234A A9 04			lda #$04
  3378 234C 8D EF 2A			sta SETPLAYER.DIR
  3379 234F A9 0C			lda #$0C
  3380 2351 8D EE 2A			sta SETPLAYER.Y
  3381 2354 A9 12			lda #$12
  3382 2356 8D ED 2A			sta SETPLAYER.X
  3383 2359 AD 8F 2A			lda PLAYER1
  3384 235C 8D EB 2A			sta SETPLAYER.P
  3385 235F AD 90 2A			lda PLAYER1+1
  3386 2362 8D EC 2A			sta SETPLAYER.P+1
  3387 2365 20 23 14			jsr SETPLAYER
  3388
  3389 				; optimize OK (levels.inc), line = 135
  3390
  3391 2368 A9 01			lda #$01
  3392 236A 8D F3 2A			sta SETPLAYER.ISALIVE
  3393 236D A9 5D			lda #$5D
  3394 236F 8D F2 2A			sta SETPLAYER.COLOUR
  3395 2372 A9 51			lda #$51
  3396 2374 8D F1 2A			sta SETPLAYER.HEAD
  3397 2377 A9 03			lda #$03
  3398 2379 8D F0 2A			sta SETPLAYER.BRAIN
  3399 237C A9 08			lda #$08
  3400 237E 8D EF 2A			sta SETPLAYER.DIR
  3401 2381 A9 17			lda #$17
  3402 2383 8D EE 2A			sta SETPLAYER.Y
  3403 2386 A9 01			lda #$01
  3404 2388 8D ED 2A			sta SETPLAYER.X
  3405 238B AD 91 2A			lda PLAYER2
  3406 238E 8D EB 2A			sta SETPLAYER.P
  3407 2391 AD 92 2A			lda PLAYER2+1
  3408 2394 8D EC 2A			sta SETPLAYER.P+1
  3409 2397 20 23 14			jsr SETPLAYER
  3410
  3411 				; optimize OK (levels.inc), line = 136
  3412
  3413 239A A9 01			lda #$01
  3414 239C 8D F3 2A			sta SETPLAYER.ISALIVE
  3415 239F A9 71			lda #$71
  3416 23A1 8D F2 2A			sta SETPLAYER.COLOUR
  3417 23A4 A9 51			lda #$51
  3418 23A6 8D F1 2A			sta SETPLAYER.HEAD
  3419 23A9 A9 03			lda #$03
  3420 23AB 8D F0 2A			sta SETPLAYER.BRAIN
  3421 23AE A9 02			lda #$02
  3422 23B0 8D EF 2A			sta SETPLAYER.DIR
  3423 23B3 A9 04			lda #$04
  3424 23B5 8D EE 2A			sta SETPLAYER.Y
  3425 23B8 A9 1E			lda #$1E
  3426 23BA 8D ED 2A			sta SETPLAYER.X
  3427 23BD AD 93 2A			lda PLAYER3
  3428 23C0 8D EB 2A			sta SETPLAYER.P
  3429 23C3 AD 94 2A			lda PLAYER3+1
  3430 23C6 8D EC 2A			sta SETPLAYER.P+1
  3431 23C9 20 23 14			jsr SETPLAYER
  3432
  3433 				; optimize OK (levels.inc), line = 137
  3434
  3435 23CC A9 01			lda #$01
  3436 23CE 8D F3 2A			sta SETPLAYER.ISALIVE
  3437 23D1 A9 55			lda #$55
  3438 23D3 8D F2 2A			sta SETPLAYER.COLOUR
  3439 23D6 A9 51			lda #$51
  3440 23D8 8D F1 2A			sta SETPLAYER.HEAD
  3441 23DB A9 02			lda #$02
  3442 23DD 8D F0 2A			sta SETPLAYER.BRAIN
  3443 23E0 A9 01			lda #$01
  3444 23E2 8D EF 2A			sta SETPLAYER.DIR
  3445 23E5 A9 15			lda #$15
  3446 23E7 8D EE 2A			sta SETPLAYER.Y
  3447 23EA A9 24			lda #$24
  3448 23EC 8D ED 2A			sta SETPLAYER.X
  3449 23EF AD 95 2A			lda PLAYER4
  3450 23F2 8D EB 2A			sta SETPLAYER.P
  3451 23F5 AD 96 2A			lda PLAYER4+1
  3452 23F8 8D EC 2A			sta SETPLAYER.P+1
  3453 23FB 20 23 14			jsr SETPLAYER
  3454
  3455 				; optimize FAIL (1, levels.inc), line = 139
  3456
  3457 23FE E8				inx
  3458 23FF A9 00 95 18			mva #$00 :STACKORIGIN,x
  3459 2403 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3460 2405 A9 06			lda #$06
  3461 2407 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3462 240A A9 0A			lda #$0A
  3463 240C 8D E7 2A			sta CALCOBSTACLEADDR.X
  3464 240F 20 F3 12			jsr CALCOBSTACLEADDR
  3465 2412 B4 17			ldy :STACKORIGIN-1,x
  3466 2414 B5 18			lda :STACKORIGIN,x
  3467 2416 99 CE 2A			sta adr.OBSTACLES,y
  3468 2419 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3469 241B 99 CF 2A			sta adr.OBSTACLES+1,y
  3470 241E CA				dex
  3471
  3472 				; optimize FAIL (1, levels.inc), line = 140
  3473
  3474 241F A9 02 95 18			mva #$02 :STACKORIGIN,x
  3475 2423 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3476 2427 A9 06			lda #$06
  3477 2429 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3478 242C A9 1E			lda #$1E
  3479 242E 8D E7 2A			sta CALCOBSTACLEADDR.X
  3480 2431 20 F3 12			jsr CALCOBSTACLEADDR
  3481 2434 B4 17			ldy :STACKORIGIN-1,x
  3482 2436 B5 18			lda :STACKORIGIN,x
  3483 2438 99 CE 2A			sta adr.OBSTACLES,y
  3484 243B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3485 243D 99 CF 2A			sta adr.OBSTACLES+1,y
  3486 2440 CA				dex
  3487
  3488 				; optimize FAIL (1, levels.inc), line = 141
  3489
  3490 2441 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3491 2445 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3492 2449 A9 12			lda #$12
  3493 244B 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3494 244E A9 0A			lda #$0A
  3495 2450 8D E7 2A			sta CALCOBSTACLEADDR.X
  3496 2453 20 F3 12			jsr CALCOBSTACLEADDR
  3497 2456 B4 17			ldy :STACKORIGIN-1,x
  3498 2458 B5 18			lda :STACKORIGIN,x
  3499 245A 99 CE 2A			sta adr.OBSTACLES,y
  3500 245D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3501 245F 99 CF 2A			sta adr.OBSTACLES+1,y
  3502 2462 CA				dex
  3503
  3504 				; optimize FAIL (1, levels.inc), line = 142
  3505
  3506 2463 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3507 2467 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3508 246B A9 12			lda #$12
  3509 246D 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3510 2470 A9 1E			lda #$1E
  3511 2472 8D E7 2A			sta CALCOBSTACLEADDR.X
  3512 2475 20 F3 12			jsr CALCOBSTACLEADDR
  3513 2478 B4 17			ldy :STACKORIGIN-1,x
  3514 247A B5 18			lda :STACKORIGIN,x
  3515 247C 99 CE 2A			sta adr.OBSTACLES,y
  3516 247F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3517 2481 99 CF 2A			sta adr.OBSTACLES+1,y
  3518 2484 CA				dex
  3519
  3520 				; optimize FAIL (1, levels.inc), line = 143
  3521
  3522 2485 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3523 2489 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3524 248D A9 0C			lda #$0C
  3525 248F 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3526 2492 A9 01			lda #$01
  3527 2494 8D E7 2A			sta CALCOBSTACLEADDR.X
  3528 2497 20 F3 12			jsr CALCOBSTACLEADDR
  3529 249A B4 17			ldy :STACKORIGIN-1,x
  3530 249C B5 18			lda :STACKORIGIN,x
  3531 249E 99 CE 2A			sta adr.OBSTACLES,y
  3532 24A1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3533 24A3 99 CF 2A			sta adr.OBSTACLES+1,y
  3534 24A6 CA				dex
  3535
  3536 				; optimize FAIL (1, levels.inc), line = 144
  3537
  3538 24A7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3539 24AB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3540 24AF A9 02			lda #$02
  3541 24B1 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3542 24B4 A9 14			lda #$14
  3543 24B6 8D E7 2A			sta CALCOBSTACLEADDR.X
  3544 24B9 20 F3 12			jsr CALCOBSTACLEADDR
  3545 24BC B4 17			ldy :STACKORIGIN-1,x
  3546 24BE B5 18			lda :STACKORIGIN,x
  3547 24C0 99 CE 2A			sta adr.OBSTACLES,y
  3548 24C3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3549 24C5 99 CF 2A			sta adr.OBSTACLES+1,y
  3550 24C8 CA				dex
  3551
  3552 				; optimize FAIL (1, levels.inc), line = 145
  3553
  3554 24C9 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3555 24CD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3556 24D1 A9 16			lda #$16
  3557 24D3 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3558 24D6 A9 14			lda #$14
  3559 24D8 8D E7 2A			sta CALCOBSTACLEADDR.X
  3560 24DB 20 F3 12			jsr CALCOBSTACLEADDR
  3561 24DE B4 17			ldy :STACKORIGIN-1,x
  3562 24E0 B5 18			lda :STACKORIGIN,x
  3563 24E2 99 CE 2A			sta adr.OBSTACLES,y
  3564 24E5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3565 24E7 99 CF 2A			sta adr.OBSTACLES+1,y
  3566 24EA CA				dex
  3567
  3568 				; optimize FAIL (1, levels.inc), line = 146
  3569
  3570 24EB A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3571 24EF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3572 24F3 A9 0C			lda #$0C
  3573 24F5 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3574 24F8 A9 14			lda #$14
  3575 24FA 8D E7 2A			sta CALCOBSTACLEADDR.X
  3576 24FD 20 F3 12			jsr CALCOBSTACLEADDR
  3577 2500 B4 17			ldy :STACKORIGIN-1,x
  3578 2502 B5 18			lda :STACKORIGIN,x
  3579 2504 99 CE 2A			sta adr.OBSTACLES,y
  3580 2507 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3581 2509 99 CF 2A			sta adr.OBSTACLES+1,y
  3582 250C CA				dex
  3583 250D CA				dex
  3584
  3585 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 148
  3586
  3587 250E 20 16 13			jsr SAVEOBSTACLES
  3588 2511			@exit
  3589 					.ifdef @new
  3590 					lda <@VarData
  3591 					sta :ztmp
  3592 					lda >@VarData
  3593 					ldy #@VarDataSize-1
  3594 					jmp @FreeMem
  3595 					els
  3596 2511 60				rts						; ret
  3597 					eif
  3598 				.endl
  3599
  3600 2512			.local	SETLEVEL08					; PROCEDURE
  3601
  3602 				; optimize OK (levels.inc), line = 155
  3603
  3604 2512 A9 01			lda #$01
  3605 2514 8D F3 2A			sta SETPLAYER.ISALIVE
  3606 2517 A9 62			lda #$62
  3607 2519 8D F2 2A			sta SETPLAYER.COLOUR
  3608 251C A9 51			lda #$51
  3609 251E 8D F1 2A			sta SETPLAYER.HEAD
  3610 2521 A9 00			lda #$00
  3611 2523 8D F0 2A			sta SETPLAYER.BRAIN
  3612 2526 A9 08			lda #$08
  3613 2528 8D EF 2A			sta SETPLAYER.DIR
  3614 252B A9 17			lda #$17
  3615 252D 8D EE 2A			sta SETPLAYER.Y
  3616 2530 A9 01			lda #$01
  3617 2532 8D ED 2A			sta SETPLAYER.X
  3618 2535 AD 8F 2A			lda PLAYER1
  3619 2538 8D EB 2A			sta SETPLAYER.P
  3620 253B AD 90 2A			lda PLAYER1+1
  3621 253E 8D EC 2A			sta SETPLAYER.P+1
  3622 2541 20 23 14			jsr SETPLAYER
  3623
  3624 				; optimize OK (levels.inc), line = 156
  3625
  3626 2544 A9 01			lda #$01
  3627 2546 8D F3 2A			sta SETPLAYER.ISALIVE
  3628 2549 A9 5D			lda #$5D
  3629 254B 8D F2 2A			sta SETPLAYER.COLOUR
  3630 254E A9 51			lda #$51
  3631 2550 8D F1 2A			sta SETPLAYER.HEAD
  3632 2553 A9 03			lda #$03
  3633 2555 8D F0 2A			sta SETPLAYER.BRAIN
  3634 2558 A9 04			lda #$04
  3635 255A 8D EF 2A			sta SETPLAYER.DIR
  3636 255D A9 17			lda #$17
  3637 255F 8D EE 2A			sta SETPLAYER.Y
  3638 2562 A9 26			lda #$26
  3639 2564 8D ED 2A			sta SETPLAYER.X
  3640 2567 AD 91 2A			lda PLAYER2
  3641 256A 8D EB 2A			sta SETPLAYER.P
  3642 256D AD 92 2A			lda PLAYER2+1
  3643 2570 8D EC 2A			sta SETPLAYER.P+1
  3644 2573 20 23 14			jsr SETPLAYER
  3645
  3646 				; optimize OK (levels.inc), line = 157
  3647
  3648 2576 A9 01			lda #$01
  3649 2578 8D F3 2A			sta SETPLAYER.ISALIVE
  3650 257B A9 71			lda #$71
  3651 257D 8D F2 2A			sta SETPLAYER.COLOUR
  3652 2580 A9 51			lda #$51
  3653 2582 8D F1 2A			sta SETPLAYER.HEAD
  3654 2585 A9 02			lda #$02
  3655 2587 8D F0 2A			sta SETPLAYER.BRAIN
  3656 258A 8D EF 2A			sta SETPLAYER.DIR
  3657 258D A9 01			lda #$01
  3658 258F 8D EE 2A			sta SETPLAYER.Y
  3659 2592 A9 0A			lda #$0A
  3660 2594 8D ED 2A			sta SETPLAYER.X
  3661 2597 AD 93 2A			lda PLAYER3
  3662 259A 8D EB 2A			sta SETPLAYER.P
  3663 259D AD 94 2A			lda PLAYER3+1
  3664 25A0 8D EC 2A			sta SETPLAYER.P+1
  3665 25A3 20 23 14			jsr SETPLAYER
  3666
  3667 				; optimize OK (levels.inc), line = 158
  3668
  3669 25A6 A9 01			lda #$01
  3670 25A8 8D F3 2A			sta SETPLAYER.ISALIVE
  3671 25AB A9 55			lda #$55
  3672 25AD 8D F2 2A			sta SETPLAYER.COLOUR
  3673 25B0 A9 51			lda #$51
  3674 25B2 8D F1 2A			sta SETPLAYER.HEAD
  3675 25B5 A9 04			lda #$04
  3676 25B7 8D F0 2A			sta SETPLAYER.BRAIN
  3677 25BA 8D EF 2A			sta SETPLAYER.DIR
  3678 25BD A9 01			lda #$01
  3679 25BF 8D EE 2A			sta SETPLAYER.Y
  3680 25C2 A9 26			lda #$26
  3681 25C4 8D ED 2A			sta SETPLAYER.X
  3682 25C7 AD 95 2A			lda PLAYER4
  3683 25CA 8D EB 2A			sta SETPLAYER.P
  3684 25CD AD 96 2A			lda PLAYER4+1
  3685 25D0 8D EC 2A			sta SETPLAYER.P+1
  3686 25D3 20 23 14			jsr SETPLAYER
  3687
  3688 				; optimize FAIL (1, levels.inc), line = 160
  3689
  3690 25D6 E8				inx
  3691 25D7 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3692 25DB 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3693 25DD A9 06			lda #$06
  3694 25DF 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3695 25E2 A9 0A			lda #$0A
  3696 25E4 8D E7 2A			sta CALCOBSTACLEADDR.X
  3697 25E7 20 F3 12			jsr CALCOBSTACLEADDR
  3698 25EA B4 17			ldy :STACKORIGIN-1,x
  3699 25EC B5 18			lda :STACKORIGIN,x
  3700 25EE 99 CE 2A			sta adr.OBSTACLES,y
  3701 25F1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3702 25F3 99 CF 2A			sta adr.OBSTACLES+1,y
  3703 25F6 CA				dex
  3704
  3705 				; optimize FAIL (1, levels.inc), line = 161
  3706
  3707 25F7 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3708 25FB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3709 25FF A9 06			lda #$06
  3710 2601 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3711 2604 A9 1E			lda #$1E
  3712 2606 8D E7 2A			sta CALCOBSTACLEADDR.X
  3713 2609 20 F3 12			jsr CALCOBSTACLEADDR
  3714 260C B4 17			ldy :STACKORIGIN-1,x
  3715 260E B5 18			lda :STACKORIGIN,x
  3716 2610 99 CE 2A			sta adr.OBSTACLES,y
  3717 2613 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3718 2615 99 CF 2A			sta adr.OBSTACLES+1,y
  3719 2618 CA				dex
  3720
  3721 				; optimize FAIL (1, levels.inc), line = 162
  3722
  3723 2619 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3724 261D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3725 2621 A9 12			lda #$12
  3726 2623 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3727 2626 A9 0A			lda #$0A
  3728 2628 8D E7 2A			sta CALCOBSTACLEADDR.X
  3729 262B 20 F3 12			jsr CALCOBSTACLEADDR
  3730 262E B4 17			ldy :STACKORIGIN-1,x
  3731 2630 B5 18			lda :STACKORIGIN,x
  3732 2632 99 CE 2A			sta adr.OBSTACLES,y
  3733 2635 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3734 2637 99 CF 2A			sta adr.OBSTACLES+1,y
  3735 263A CA				dex
  3736
  3737 				; optimize FAIL (1, levels.inc), line = 163
  3738
  3739 263B A9 06 95 18			mva #$06 :STACKORIGIN,x
  3740 263F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3741 2643 A9 12			lda #$12
  3742 2645 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3743 2648 A9 1E			lda #$1E
  3744 264A 8D E7 2A			sta CALCOBSTACLEADDR.X
  3745 264D 20 F3 12			jsr CALCOBSTACLEADDR
  3746 2650 B4 17			ldy :STACKORIGIN-1,x
  3747 2652 B5 18			lda :STACKORIGIN,x
  3748 2654 99 CE 2A			sta adr.OBSTACLES,y
  3749 2657 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3750 2659 99 CF 2A			sta adr.OBSTACLES+1,y
  3751 265C CA				dex
  3752
  3753 				; optimize FAIL (1, levels.inc), line = 164
  3754
  3755 265D A9 08 95 18			mva #$08 :STACKORIGIN,x
  3756 2661 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3757 2665 A9 0C			lda #$0C
  3758 2667 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3759 266A A9 01			lda #$01
  3760 266C 8D E7 2A			sta CALCOBSTACLEADDR.X
  3761 266F 20 F3 12			jsr CALCOBSTACLEADDR
  3762 2672 B4 17			ldy :STACKORIGIN-1,x
  3763 2674 B5 18			lda :STACKORIGIN,x
  3764 2676 99 CE 2A			sta adr.OBSTACLES,y
  3765 2679 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3766 267B 99 CF 2A			sta adr.OBSTACLES+1,y
  3767 267E CA				dex
  3768
  3769 				; optimize FAIL (1, levels.inc), line = 165
  3770
  3771 267F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3772 2683 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3773 2687 A9 02			lda #$02
  3774 2689 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3775 268C A9 14			lda #$14
  3776 268E 8D E7 2A			sta CALCOBSTACLEADDR.X
  3777 2691 20 F3 12			jsr CALCOBSTACLEADDR
  3778 2694 B4 17			ldy :STACKORIGIN-1,x
  3779 2696 B5 18			lda :STACKORIGIN,x
  3780 2698 99 CE 2A			sta adr.OBSTACLES,y
  3781 269B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3782 269D 99 CF 2A			sta adr.OBSTACLES+1,y
  3783 26A0 CA				dex
  3784
  3785 				; optimize FAIL (1, levels.inc), line = 166
  3786
  3787 26A1 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3788 26A5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3789 26A9 A9 16			lda #$16
  3790 26AB 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3791 26AE A9 14			lda #$14
  3792 26B0 8D E7 2A			sta CALCOBSTACLEADDR.X
  3793 26B3 20 F3 12			jsr CALCOBSTACLEADDR
  3794 26B6 B4 17			ldy :STACKORIGIN-1,x
  3795 26B8 B5 18			lda :STACKORIGIN,x
  3796 26BA 99 CE 2A			sta adr.OBSTACLES,y
  3797 26BD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3798 26BF 99 CF 2A			sta adr.OBSTACLES+1,y
  3799 26C2 CA				dex
  3800
  3801 				; optimize FAIL (1, levels.inc), line = 167
  3802
  3803 26C3 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3804 26C7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3805 26CB A9 0C			lda #$0C
  3806 26CD 8D E8 2A			sta CALCOBSTACLEADDR.Y
  3807 26D0 A9 14			lda #$14
  3808 26D2 8D E7 2A			sta CALCOBSTACLEADDR.X
  3809 26D5 20 F3 12			jsr CALCOBSTACLEADDR
  3810 26D8 B4 17			ldy :STACKORIGIN-1,x
  3811 26DA B5 18			lda :STACKORIGIN,x
  3812 26DC 99 CE 2A			sta adr.OBSTACLES,y
  3813 26DF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3814 26E1 99 CF 2A			sta adr.OBSTACLES+1,y
  3815 26E4 CA				dex
  3816 26E5 CA				dex
  3817
  3818 				; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 169
  3819
  3820 26E6 20 16 13			jsr SAVEOBSTACLES
  3821 26E9			@exit
  3822 					.ifdef @new
  3823 					lda <@VarData
  3824 					sta :ztmp
  3825 					lda >@VarData
  3826 					ldy #@VarDataSize-1
  3827 					jmp @FreeMem
  3828 					els
  3829 26E9 60				rts						; ret
  3830 					eif
  3831 				.endl
  3832
  3833 26EA			.local	HUMAN						; PROCEDURE
  3834
  3835 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3836
  3837 26EA 20 11 14			jsr CHECKJOYSTATUS
  3838 26ED AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3839 26F7 A0 04			ldy #PLY.DIR-DATAORIGIN
  3840 26F9 B1 12			lda (:bp2),y
  3841 26FB 85 5B			sta NEWDIR
  3842
  3843 				; optimize OK (main.pas), line = 16
  3844
  3845 26FD A5 63			lda JOYSTATUS
  3846 26FF 8D FB 2A			sta @CASETMP_0006
  3847 2702 C9 01			cmp #$01
  3848 2704 D0 19			jne l_0D1D
  3849 2706			@
  3850
  3851 				; optimize OK (main.pas), line = 17
  3852
  3853 2706 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3854 2710 A0 04			ldy #PLY.DIR-DATAORIGIN
  3855 2712 B1 12			lda (:bp2),y
  3856 2714 C9 02			cmp #$02
  3857 2716 F0 04			jeq l_0D2F
  3858 2718 A9 01			lda #$01
  3859 271A 85 5B			sta NEWDIR
  3860 271C			l_0D2F
  3861
  3862 271C 4C 73 27			jmp a_0006
  3863 271F			l_0D1D
  3864 271F C9 02			cmp #$02
  3865 2721 D0 19			jne l_0D3F
  3866 2723			@
  3867
  3868 				; optimize OK (main.pas), line = 18
  3869
  3870 2723 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3871 272D A0 04			ldy #PLY.DIR-DATAORIGIN
  3872 272F B1 12			lda (:bp2),y
  3873 2731 C9 01			cmp #$01
  3874 2733 F0 04			jeq l_0D51
  3875 2735 A9 02			lda #$02
  3876 2737 85 5B			sta NEWDIR
  3877 2739			l_0D51
  3878
  3879 2739 4C 73 27			jmp a_0006
  3880 273C			l_0D3F
  3881 273C C9 04			cmp #$04
  3882 273E D0 19			jne l_0D61
  3883 2740			@
  3884
  3885 				; optimize OK (main.pas), line = 19
  3886
  3887 2740 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3888 274A A0 04			ldy #PLY.DIR-DATAORIGIN
  3889 274C B1 12			lda (:bp2),y
  3890 274E C9 08			cmp #$08
  3891 2750 F0 04			jeq l_0D73
  3892 2752 A9 04			lda #$04
  3893 2754 85 5B			sta NEWDIR
  3894 2756			l_0D73
  3895
  3896 2756 4C 73 27			jmp a_0006
  3897 2759			l_0D61
  3898 2759 C9 08			cmp #$08
  3899 275B D0 16			jne l_0D83
  3900 275D			@
  3901
  3902 				; optimize OK (main.pas), line = 20
  3903
  3904 275D AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3905 2767 A0 04			ldy #PLY.DIR-DATAORIGIN
  3906 2769 B1 12			lda (:bp2),y
  3907 276B C9 04			cmp #$04
  3908 276D F0 04			jeq l_0D95
  3909 276F A9 08			lda #$08
  3910 2771 85 5B			sta NEWDIR
  3911 2773			l_0D95
  3912
  3913 2773			l_0D83
  3914 2773			a_0006
  3915
  3916 				; optimize OK (main.pas), line = 23
  3917
  3918 2773 A5 5B			lda NEWDIR
  3919 2775 25 5C			and AVAILDIR
  3920 2777 D0 18			jne l_0DBC
  3921
  3922 				; optimize OK (main.pas), line = 24
  3923
  3924 2779 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3925 2783 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3926 2785 A9 00			lda #$00
  3927 2787 91 12			sta (:bp2),y
  3928 2789 A0 02			ldy #PLY.HEAD-DATAORIGIN
  3929 278B A9 2A			lda #$2A
  3930 278D 91 12			sta (:bp2),y
  3931 278F C6 5A			dec ALIVE
  3932 2791			l_0DBC
  3933
  3934 				; ------------------------------------------------------------
  3935
  3936 = 2AFB			@CASETMP_0006	= DATAORIGIN+$005F
  3937
  3938 = 2AFB			@VarData	= @CASETMP_0006
  3939 = 0001			@VarDataSize	= 1
  3940
  3941 2791			@exit
  3942 					.ifdef @new
  3943 					lda <@VarData
  3944 					sta :ztmp
  3945 					lda >@VarData
  3946 					ldy #@VarDataSize-1
  3947 					jmp @FreeMem
  3948 					els
  3949 2791 60				rts						; ret
  3950 					eif
  3951 				.endl
  3952
  3953 2792			.local	PLAYERMOVE					; PROCEDURE
  3954
  3955 				; optimize OK (main.pas), line = 32
  3956
  3957 2792 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3958 279C A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3959 279E B1 12			lda (:bp2),y
  3960 27A0 D0 03 4C E6 28		jeq l_0DDB
  3961
  3962 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  3963
  3964 27A5 20 29 12			jsr CHECKAVAILDIR
  3965
  3966 				; optimize OK (main.pas), line = 35
  3967
  3968 27A8 A5 5C			lda AVAILDIR
  3969 27AA D0 35			jne l_0DEF
  3970
  3971 				; optimize OK (main.pas), line = 36
  3972
  3973 27AC AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  3974 27B6 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3975 27B8 A9 00			lda #$00
  3976 27BA 91 12			sta (:bp2),y
  3977 27BC C6 5A			dec ALIVE
  3978
  3979 				; optimize OK (main.pas), line = 37
  3980
  3981 27BE A0 00			ldy #PLY.X-DATAORIGIN
  3982 27C0 B1 12			lda (:bp2),y
  3983 27C2 8D DE 2A			sta PUTCHAR_0072.X
  3984 27C5 A0 01			ldy #PLY.Y-DATAORIGIN
  3985 27C7 B1 12			lda (:bp2),y
  3986 27C9 8D DF 2A			sta PUTCHAR_0072.Y
  3987 27CC A0 03			ldy #PLY.COLOUR-DATAORIGIN
  3988 27CE B1 12			lda (:bp2),y
  3989 27D0 18 69 80			add #$80
  3990 27D3 8D E1 2A			sta PUTCHAR_0072.C
  3991 27D6 A9 57			lda #$57
  3992 27D8 8D E0 2A			sta PUTCHAR_0072.V
  3993 27DB 20 78 11			jsr PUTCHAR_0072
  3994 27DE 4C E6 28			jmp l_0E10
  3995 27E1			l_0DEF
  3996
  3997 				; optimize OK (main.pas), line = 40
  3998
  3999 27E1 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4000 27EB A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4001 27ED B1 12			lda (:bp2),y
  4002 27EF 8D FC 2A			sta @CASETMP_0007
  4003 27F2 C9 00			cmp #$00
  4004 27F4 D0 06			jne l_0E1B
  4005 27F6			@
  4006
  4007 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4008
  4009 27F6 20 EA 26			jsr HUMAN
  4010 27F9 4C 21 28			jmp a_0007
  4011 27FC			l_0E1B
  4012 27FC C9 01			cmp #$01
  4013 27FE D0 06			jne l_0E25
  4014 2800			@
  4015
  4016 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4017
  4018 2800 20 3A 15			jsr AISTRAIGHT
  4019 2803 4C 21 28			jmp a_0007
  4020 2806			l_0E25
  4021 2806 C9 02			cmp #$02
  4022 2808 D0 06			jne l_0E2F
  4023 280A			@
  4024
  4025 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4026
  4027 280A 20 BF 15			jsr AISAPPER
  4028 280D 4C 21 28			jmp a_0007
  4029 2810			l_0E2F
  4030 2810 C9 03			cmp #$03
  4031 2812 D0 06			jne l_0E39
  4032 2814			@
  4033
  4034 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4035
  4036 2814 20 19 18			jsr AIBULLY
  4037 2817 4C 21 28			jmp a_0007
  4038 281A			l_0E39
  4039 281A C9 04			cmp #$04
  4040 281C D0 03			jne l_0E43
  4041 281E			@
  4042
  4043 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4044
  4045 281E 20 E7 18			jsr AIMIRROR
  4046 2821			l_0E43
  4047 2821			a_0007
  4048
  4049 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4050
  4051 2821 20 5A 13			jsr DRAWTAIL
  4052 2824 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4053 282E A0 04			ldy #PLY.DIR-DATAORIGIN
  4054 2830 A5 5B			lda NEWDIR
  4055 2832 91 12			sta (:bp2),y
  4056
  4057 				; optimize OK (main.pas), line = 50
  4058
  4059 2834 A5 5B			lda NEWDIR
  4060 2836 8D FD 2A			sta @CASETMP_0008
  4061 2839 C9 01			cmp #$01
  4062 283B D0 16			jne l_0E5F
  4063 283D			@
  4064
  4065 				; optimize OK (main.pas), line = 51
  4066
  4067 283D AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4068 2847 A0 01			ldy #PLY.Y-DATAORIGIN
  4069 2849 B1 12			lda (:bp2),y
  4070 284B 38 E9 01			sub #$01
  4071 284E 91 12			sta (:bp2),y
  4072
  4073 2850 4C 9E 28			jmp a_0008
  4074 2853			l_0E5F
  4075 2853 C9 02			cmp #$02
  4076 2855 D0 16			jne l_0E69
  4077 2857			@
  4078
  4079 				; optimize OK (main.pas), line = 52
  4080
  4081 2857 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4082 2861 A0 01			ldy #PLY.Y-DATAORIGIN
  4083 2863 B1 12			lda (:bp2),y
  4084 2865 18 69 01			add #$01
  4085 2868 91 12			sta (:bp2),y
  4086
  4087 286A 4C 9E 28			jmp a_0008
  4088 286D			l_0E69
  4089 286D C9 04			cmp #$04
  4090 286F D0 16			jne l_0E73
  4091 2871			@
  4092
  4093 				; optimize OK (main.pas), line = 53
  4094
  4095 2871 AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4096 287B A0 00			ldy #PLY.X-DATAORIGIN
  4097 287D B1 12			lda (:bp2),y
  4098 287F 38 E9 01			sub #$01
  4099 2882 91 12			sta (:bp2),y
  4100
  4101 2884 4C 9E 28			jmp a_0008
  4102 2887			l_0E73
  4103 2887 C9 08			cmp #$08
  4104 2889 D0 13			jne l_0E7D
  4105 288B			@
  4106
  4107 				; optimize OK (main.pas), line = 54
  4108
  4109 288B AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4110 2895 A0 00			ldy #PLY.X-DATAORIGIN
  4111 2897 B1 12			lda (:bp2),y
  4112 2899 18 69 01			add #$01
  4113 289C 91 12			sta (:bp2),y
  4114
  4115 289E			l_0E7D
  4116 289E			a_0008
  4117
  4118 				; optimize OK (main.pas), line = 57
  4119
  4120 289E AC 8B 2A 84 12 AC + 	mwy PLY :bp2
  4121 28A8 A0 00			ldy #PLY.X-DATAORIGIN
  4122 28AA B1 12			lda (:bp2),y
  4123 28AC 8D DE 2A			sta PUTCHAR_0072.X
  4124 28AF A0 01			ldy #PLY.Y-DATAORIGIN
  4125 28B1 B1 12			lda (:bp2),y
  4126 28B3 8D DF 2A			sta PUTCHAR_0072.Y
  4127 28B6 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4128 28B8 B1 12			lda (:bp2),y
  4129 28BA 8D E0 2A			sta PUTCHAR_0072.V
  4130 28BD A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4131 28BF B1 12			lda (:bp2),y
  4132 28C1 8D E1 2A			sta PUTCHAR_0072.C
  4133 28C4 20 78 11			jsr PUTCHAR_0072
  4134
  4135 				; optimize OK (main.pas), line = 60
  4136
  4137 28C7 AD B5 2A			lda PLAYER1.ISALIVE
  4138 28CA D0 1A			jne l_0EA2
  4139 28CC AD B1 2A			lda PLAYER1.COLOUR
  4140 28CF 8D E1 2A			sta PUTCHAR_0072.C
  4141 28D2 A9 2A			lda #$2A
  4142 28D4 8D E0 2A			sta PUTCHAR_0072.V
  4143 28D7 AD AF 2A			lda PLAYER1.Y
  4144 28DA 8D DF 2A			sta PUTCHAR_0072.Y
  4145 28DD AD AE 2A			lda PLAYER1.X
  4146 28E0 8D DE 2A			sta PUTCHAR_0072.X
  4147 28E3 20 78 11			jsr PUTCHAR_0072
  4148 28E6			l_0EA2
  4149 28E6			l_0E10
  4150 28E6			l_0DDB
  4151
  4152 				; ------------------------------------------------------------
  4153
  4154 = 2AFC			@CASETMP_0007	= DATAORIGIN+$0060
  4155 = 2AFD			@CASETMP_0008	= DATAORIGIN+$0061
  4156
  4157 = 2AFC			@VarData	= @CASETMP_0007
  4158 = 0002			@VarDataSize	= 2
  4159
  4160 28E6			@exit
  4161 					.ifdef @new
  4162 					lda <@VarData
  4163 					sta :ztmp
  4164 					lda >@VarData
  4165 					ldy #@VarDataSize-1
  4166 					jmp @FreeMem
  4167 					els
  4168 28E6 60				rts						; ret
  4169 					eif
  4170 				.endl
  4171
  4172 28E7			.local	STARTSCREEN					; PROCEDURE
  4173
  4174 				; optimize OK (main.pas), line = 71
  4175
  4176 28E7 AD B1 2A			lda PLAYER1.COLOUR
  4177 28EA 18 69 80			add #$80
  4178 28ED 8D E1 2A			sta PUTCHAR_0072.C
  4179 28F0 AD B0 2A			lda PLAYER1.HEAD
  4180 28F3 8D E0 2A			sta PUTCHAR_0072.V
  4181 28F6 AD AF 2A			lda PLAYER1.Y
  4182 28F9 8D DF 2A			sta PUTCHAR_0072.Y
  4183 28FC AD AE 2A			lda PLAYER1.X
  4184 28FF 8D DE 2A			sta PUTCHAR_0072.X
  4185 2902 20 78 11			jsr PUTCHAR_0072
  4186
  4187 				; --- RepeatUntilProlog
  4188 2905			l_0EC8
  4189
  4190 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 72
  4191
  4192 2905 20 11 14			jsr CHECKJOYSTATUS
  4193 2908 A5 63			lda JOYSTATUS
  4194 290A C9 40			cmp #$40
  4195 290C D0 F7			jne l_0EC8
  4196
  4197 				; optimize OK (main.pas), line = 73
  4198
  4199 290E AD B1 2A			lda PLAYER1.COLOUR
  4200 2911 8D E1 2A			sta PUTCHAR_0072.C
  4201 2914 AD B0 2A			lda PLAYER1.HEAD
  4202 2917 8D E0 2A			sta PUTCHAR_0072.V
  4203 291A AD AF 2A			lda PLAYER1.Y
  4204 291D 8D DF 2A			sta PUTCHAR_0072.Y
  4205 2920 AD AE 2A			lda PLAYER1.X
  4206 2923 8D DE 2A			sta PUTCHAR_0072.X
  4207 2926 20 78 11			jsr PUTCHAR_0072
  4208 2929			@exit
  4209 					.ifdef @new
  4210 					lda <@VarData
  4211 					sta :ztmp
  4212 					lda >@VarData
  4213 					ldy #@VarDataSize-1
  4214 					jmp @FreeMem
  4215 					els
  4216 2929 60				rts						; ret
  4217 					eif
  4218 				.endl
  4219
  4220 292A			.local	MAINLOOP					; PROCEDURE
  4221
  4222 				; optimize OK (main.pas), line = 80
  4223
  4224 292A A9 FF			lda #$FF
  4225 292C 85 5A			sta ALIVE
  4226
  4227 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 82
  4228
  4229 292E 20 87 14			jsr INITPLAYFIELD
  4230
  4231 				; optimize OK (main.pas), line = 84
  4232
  4233 2931 AD AC 2A			lda LEVEL
  4234 2934 8D FE 2A			sta @CASETMP_0009
  4235 2937 C9 00			cmp #$00
  4236 2939 D0 06			jne l_0EF7
  4237 293B			@
  4238
  4239 				; optimize FAIL ('SETLEVEL00', main.pas), line = 85
  4240
  4241 293B 20 3C 19			jsr SETLEVEL00
  4242 293E 4C 8E 29			jmp a_0009
  4243 2941			l_0EF7
  4244 2941 C9 01			cmp #$01
  4245 2943 D0 06			jne l_0F01
  4246 2945			@
  4247
  4248 				; optimize FAIL ('SETLEVEL01', main.pas), line = 86
  4249
  4250 2945 20 70 1A			jsr SETLEVEL01
  4251 2948 4C 8E 29			jmp a_0009
  4252 294B			l_0F01
  4253 294B C9 02			cmp #$02
  4254 294D D0 06			jne l_0F0B
  4255 294F			@
  4256
  4257 				; optimize FAIL ('SETLEVEL02', main.pas), line = 87
  4258
  4259 294F 20 A4 1B			jsr SETLEVEL02
  4260 2952 4C 8E 29			jmp a_0009
  4261 2955			l_0F0B
  4262 2955 C9 03			cmp #$03
  4263 2957 D0 06			jne l_0F15
  4264 2959			@
  4265
  4266 				; optimize FAIL ('SETLEVEL03', main.pas), line = 88
  4267
  4268 2959 20 D8 1C			jsr SETLEVEL03
  4269 295C 4C 8E 29			jmp a_0009
  4270 295F			l_0F15
  4271 295F C9 04			cmp #$04
  4272 2961 D0 06			jne l_0F1F
  4273 2963			@
  4274
  4275 				; optimize FAIL ('SETLEVEL04', main.pas), line = 89
  4276
  4277 2963 20 2E 1E			jsr SETLEVEL04
  4278 2966 4C 8E 29			jmp a_0009
  4279 2969			l_0F1F
  4280 2969 C9 05			cmp #$05
  4281 296B D0 06			jne l_0F29
  4282 296D			@
  4283
  4284 				; optimize FAIL ('SETLEVEL05', main.pas), line = 90
  4285
  4286 296D 20 A6 1F			jsr SETLEVEL05
  4287 2970 4C 8E 29			jmp a_0009
  4288 2973			l_0F29
  4289 2973 C9 06			cmp #$06
  4290 2975 D0 06			jne l_0F33
  4291 2977			@
  4292
  4293 				; optimize FAIL ('SETLEVEL06', main.pas), line = 91
  4294
  4295 2977 20 5E 21			jsr SETLEVEL06
  4296 297A 4C 8E 29			jmp a_0009
  4297 297D			l_0F33
  4298 297D C9 07			cmp #$07
  4299 297F D0 06			jne l_0F3D
  4300 2981			@
  4301
  4302 				; optimize FAIL ('SETLEVEL07', main.pas), line = 92
  4303
  4304 2981 20 36 23			jsr SETLEVEL07
  4305 2984 4C 8E 29			jmp a_0009
  4306 2987			l_0F3D
  4307 2987 C9 08			cmp #$08
  4308 2989 D0 03			jne l_0F47
  4309 298B			@
  4310
  4311 				; optimize FAIL ('SETLEVEL08', main.pas), line = 93
  4312
  4313 298B 20 12 25			jsr SETLEVEL08
  4314 298E			l_0F47
  4315 298E			a_0009
  4316
  4317 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 96
  4318
  4319 298E 20 BE 12			jsr ANIMATEOBSTACLES
  4320 2991 20 C4 11			jsr SHOWSCORE
  4321 2994 20 E7 28			jsr STARTSCREEN
  4322
  4323 				; --- RepeatUntilProlog
  4324 2997			l_0F59
  4325
  4326 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 99
  4327
  4328 2997 20 23 11			jsr SYSTEM.PAUSE_006B
  4329
  4330 				; optimize OK (main.pas), line = 100
  4331
  4332 299A AD 8F 2A			lda PLAYER1
  4333 299D 8D 8B 2A			sta PLY
  4334 29A0 AD 90 2A			lda PLAYER1+1
  4335 29A3 8D 8C 2A			sta PLY+1
  4336 29A6 20 92 27			jsr PLAYERMOVE
  4337
  4338 				; optimize OK (main.pas), line = 102
  4339
  4340 29A9 A9 02			lda #$02
  4341 29AB 8D A8 2A			sta SYSTEM.PAUSE_006C.N
  4342 29AE A9 00			lda #$00
  4343 29B0 8D A9 2A			sta SYSTEM.PAUSE_006C.N+1
  4344 29B3 20 2A 11			jsr SYSTEM.PAUSE_006C
  4345
  4346 				; optimize OK (main.pas), line = 103
  4347
  4348 29B6 AD 91 2A			lda PLAYER2
  4349 29B9 8D 8B 2A			sta PLY
  4350 29BC AD 92 2A			lda PLAYER2+1
  4351 29BF 8D 8C 2A			sta PLY+1
  4352 29C2 20 92 27			jsr PLAYERMOVE
  4353
  4354 				; optimize OK (main.pas), line = 104
  4355
  4356 29C5 AD 93 2A			lda PLAYER3
  4357 29C8 8D 8B 2A			sta PLY
  4358 29CB AD 94 2A			lda PLAYER3+1
  4359 29CE 8D 8C 2A			sta PLY+1
  4360 29D1 20 92 27			jsr PLAYERMOVE
  4361
  4362 				; optimize OK (main.pas), line = 105
  4363
  4364 29D4 AD 95 2A			lda PLAYER4
  4365 29D7 8D 8B 2A			sta PLY
  4366 29DA AD 96 2A			lda PLAYER4+1
  4367 29DD 8D 8C 2A			sta PLY+1
  4368 29E0 20 92 27			jsr PLAYERMOVE
  4369
  4370 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 106
  4371
  4372 29E3 20 BE 12			jsr ANIMATEOBSTACLES
  4373
  4374 				; optimize OK (main.pas), line = 107
  4375
  4376 29E6 A5 5A			lda ALIVE
  4377 29E8 F0 04			jeq l_0F59x
  4378 29EA C9 FF			cmp #$FF
  4379 29EC D0 A9			jne l_0F59
  4380 29EE			l_0F59x
  4381
  4382 				; optimize OK (main.pas), line = 109
  4383
  4384 29EE AD B5 2A			lda PLAYER1.ISALIVE
  4385 29F1 F0 03			jeq l_0F9A
  4386 29F3 EE B4 2A			inc PLAYER1.SCORE
  4387 29F6			l_0F9A
  4388
  4389 				; optimize OK (main.pas), line = 110
  4390
  4391 29F6 AD BD 2A			lda PLAYER2.ISALIVE
  4392 29F9 F0 03			jeq l_0FAD
  4393 29FB EE BC 2A			inc PLAYER2.SCORE
  4394 29FE			l_0FAD
  4395
  4396 				; optimize OK (main.pas), line = 111
  4397
  4398 29FE AD C5 2A			lda PLAYER3.ISALIVE
  4399 2A01 F0 03			jeq l_0FC0
  4400 2A03 EE C4 2A			inc PLAYER3.SCORE
  4401 2A06			l_0FC0
  4402
  4403 				; optimize OK (main.pas), line = 112
  4404
  4405 2A06 AD CD 2A			lda PLAYER4.ISALIVE
  4406 2A09 F0 03			jeq l_0FD3
  4407 2A0B EE CC 2A			inc PLAYER4.SCORE
  4408 2A0E			l_0FD3
  4409
  4410 				; optimize OK (main.pas), line = 114
  4411
  4412 2A0E A9 64			lda #$64
  4413 2A10 8D A8 2A			sta SYSTEM.PAUSE_006C.N
  4414 2A13 A9 00			lda #$00
  4415 2A15 8D A9 2A			sta SYSTEM.PAUSE_006C.N+1
  4416 2A18 20 2A 11			jsr SYSTEM.PAUSE_006C
  4417
  4418 				; ------------------------------------------------------------
  4419
  4420 = 2AFE			@CASETMP_0009	= DATAORIGIN+$0062
  4421
  4422 = 2AFE			@VarData	= @CASETMP_0009
  4423 = 0001			@VarDataSize	= 1
  4424
  4425 2A1B			@exit
  4426 					.ifdef @new
  4427 					lda <@VarData
  4428 					sta :ztmp
  4429 					lda >@VarData
  4430 					ldy #@VarDataSize-1
  4431 					jmp @FreeMem
  4432 					els
  4433 2A1B 60				rts						; ret
  4434 					eif
  4435 				.endl
  4436 2A1C			l_0007
  4437
  4438 				; --- RepeatUntilProlog
  4439 2A1C			l_0FDE
  4440
  4441 				; optimize OK (main.pas), line = 121
  4442
  4443 2A1C A9 01			lda #$01
  4444 2A1E 8D AC 2A			sta LEVEL
  4445 2A21 20 1D 15			jsr INITPLAYERS
  4446
  4447 				; optimize OK (main.pas), line = 123
  4448
  4449 2A24 A9 00			lda #$00
  4450 2A26 8D AD 2A			sta GAMEOVER
  4451
  4452 				; --- RepeatUntilProlog
  4453 2A29			l_0FE8
  4454
  4455 				; optimize FAIL ('MAINLOOP', main.pas), line = 125
  4456
  4457 2A29 20 2A 29			jsr MAINLOOP
  4458
  4459 				; optimize FAIL (0, main.pas), line = 126
  4460
  4461 2A2C EE AC 2A			inc LEVEL
  4462 2A2F AD AC 2A			lda LEVEL
  4463 2A32 C9 08			cmp #$08
  4464 2A34 D0 05			jne l_0FFF
  4465 2A36 A9 05			lda #$05
  4466 2A38 8D AC 2A			sta LEVEL
  4467 2A3B			l_0FFF
  4468
  4469 				; optimize OK (main.pas), line = 127
  4470
  4471 2A3B AD B4 2A			lda PLAYER1.SCORE
  4472 2A3E C9 39			cmp #$39
  4473 2A40 D0 05			jne l_1018
  4474 2A42 A9 01			lda #$01
  4475 2A44 8D AD 2A			sta GAMEOVER
  4476 2A47			l_1018
  4477
  4478 				; optimize OK (main.pas), line = 128
  4479
  4480 2A47 AD BC 2A			lda PLAYER2.SCORE
  4481 2A4A C9 39			cmp #$39
  4482 2A4C D0 05			jne l_1031
  4483 2A4E A9 01			lda #$01
  4484 2A50 8D AD 2A			sta GAMEOVER
  4485 2A53			l_1031
  4486
  4487 				; optimize OK (main.pas), line = 129
  4488
  4489 2A53 AD C4 2A			lda PLAYER3.SCORE
  4490 2A56 C9 39			cmp #$39
  4491 2A58 D0 05			jne l_104A
  4492 2A5A A9 01			lda #$01
  4493 2A5C 8D AD 2A			sta GAMEOVER
  4494 2A5F			l_104A
  4495
  4496 				; optimize OK (main.pas), line = 130
  4497
  4498 2A5F AD CC 2A			lda PLAYER4.SCORE
  4499 2A62 C9 39			cmp #$39
  4500 2A64 D0 05			jne l_1063
  4501 2A66 A9 01			lda #$01
  4502 2A68 8D AD 2A			sta GAMEOVER
  4503 2A6B			l_1063
  4504
  4505 				; optimize OK (main.pas), line = 131
  4506
  4507 2A6B AD AD 2A			lda GAMEOVER
  4508 2A6E F0 B9			jeq l_0FE8
  4509
  4510 				; optimize FAIL ('SHOWSCORE', main.pas), line = 133
  4511
  4512 2A70 20 C4 11			jsr SHOWSCORE
  4513
  4514 				; optimize OK (main.pas), line = 135
  4515
  4516 2A73 A9 C8			lda #$C8
  4517 2A75 8D A8 2A			sta SYSTEM.PAUSE_006C.N
  4518 2A78 A9 00			lda #$00
  4519 2A7A 8D A9 2A			sta SYSTEM.PAUSE_006C.N+1
  4520 2A7D 20 2A 11			jsr SYSTEM.PAUSE_006C
  4521
  4522 				; optimize OK (main.pas), line = 136
  4523
  4524 2A80 4C 1C 2A			jmp l_0FDE
  4525
  4526 				; ------------------------------------------------------------
  4527
  4528 = 0800			ATTRIBUTE_ADDR	= $0800
  4529 = 0C00			SCREEN_ADDR	= $0C00
  4530 = 001F			BACKGROUND_COLOUR	= $1F
  4531 = 0000			BOREDER_COLOUR	= $00
  4532 = 0009			VICTORIES	= $09
  4533 = 0005			LOOK_AHEAD	= $05
  4534 = 007E			TRASH	= $7E
  4535 = 0020			EMPTY	= $20
  4536 = 00A0			WALL	= $A0
  4537 = 0041			WALL_COLOUR	= $41
  4538 = 0030			ZERO	= $30
  4539 = 0056			OBSTACLE_1	= $56
  4540 = 005B			OBSTACLE_2	= $5B
  4541 = 0035			OBST_COLOUR	= $35
  4542 = 0007			OBST_QUANTITY	= $07
  4543 = 0051			PLY_HEAD	= $51
  4544 = 002A			PLY_CRASH	= $2A
  4545 = 0057			PLY_BUSTED	= $57
  4546 = 0042			PLY_TAIL_UD	= $42
  4547 = 0040			PLY_TAIL_LR	= $40
  4548 = 007D			PLY_TAIL_RD	= $7D
  4549 = 006E			PLY_TAIL_RU	= $6E
  4550 = 006D			PLY_TAIL_LD	= $6D
  4551 = 0070			PLY_TAIL_LU	= $70
  4552 = 0062			PLY1_COLOUR	= $62
  4553 = 005D			PLY2_COLOUR	= $5D
  4554 = 0071			PLY3_COLOUR	= $71
  4555 = 0055			PLY4_COLOUR	= $55
  4556 = 0000			PLY_CTRL	= $00
  4557 = 0001			AI_STRAIGHT	= $01
  4558 = 0002			AI_SAPPER	= $02
  4559 = 0003			AI_BULLY	= $03
  4560 = 0004			AI_MIRROR	= $04
  4561 = 0001			JOY_UP	= $01
  4562 = 0002			JOY_DOWN	= $02
  4563 = 0004			JOY_LEFT	= $04
  4564 = 0008			JOY_RIGHT	= $08
  4565 = 0040			JOY_FIRE	= $40
  4566 = 0002			JOY_SELECT_1	= $02
  4567 = 0004			JOY_SELECT_2	= $04
  4568 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4569 2A83			.var MUL40	= adr.MUL40 .word
  4570 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4571 2A83			.var DIRECTION	= adr.DIRECTION .word
  4572 = FD30			KEYSCAN	= $FD30
  4573 = FF08			JOY	= $FF08
  4574 = FF15			BACKGROUND	= $FF15
  4575 = FF19			BOREDER	= $FF19
  4576 = 0058			T0B	= $58
  4577 = 0059			I0B	= $59
  4578 = 005A			ALIVE	= $5A
  4579 = 005B			NEWDIR	= $5B
  4580 = 005C			AVAILDIR	= $5C
  4581 = 005D			T0W	= $5D
  4582 = 005F			adr.PLY	= $5F
  4583 2A83			.var PLY	= adr.PLY .word
  4584 = 2A9C			PLY.X	= DATAORIGIN+$0000
  4585 = 2A9D			PLY.Y	= DATAORIGIN+$0001
  4586 = 2A9E			PLY.HEAD	= DATAORIGIN+$0002
  4587 = 2A9F			PLY.COLOUR	= DATAORIGIN+$0003
  4588 = 2AA0			PLY.DIR	= DATAORIGIN+$0004
  4589 = 2AA1			PLY.BRAIN	= DATAORIGIN+$0005
  4590 = 2AA2			PLY.SCORE	= DATAORIGIN+$0006
  4591 = 2AA3			PLY.ISALIVE	= DATAORIGIN+$0007
  4592 = 0061			adr.TMPPLY	= $61
  4593 2A83			.var TMPPLY	= adr.TMPPLY .word
  4594 = 2A9C			TMPPLY.X	= DATAORIGIN+$0000
  4595 = 2A9D			TMPPLY.Y	= DATAORIGIN+$0001
  4596 = 2A9E			TMPPLY.HEAD	= DATAORIGIN+$0002
  4597 = 2A9F			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4598 = 2AA0			TMPPLY.DIR	= DATAORIGIN+$0004
  4599 = 2AA1			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4600 = 2AA2			TMPPLY.SCORE	= DATAORIGIN+$0006
  4601 = 2AA3			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4602 = 0063			JOYSTATUS	= $63
  4603 = 2AAC			LEVEL	= DATAORIGIN+$0010
  4604 = 2AAD			GAMEOVER	= DATAORIGIN+$0011
  4605 = 2AAE			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4606 2A83			.var PLAYER1	= adr.PLAYER1 .word
  4607 = 2AAE			PLAYER1.X	= DATAORIGIN+$0012
  4608 = 2AAF			PLAYER1.Y	= DATAORIGIN+$0013
  4609 = 2AB0			PLAYER1.HEAD	= DATAORIGIN+$0014
  4610 = 2AB1			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4611 = 2AB2			PLAYER1.DIR	= DATAORIGIN+$0016
  4612 = 2AB3			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4613 = 2AB4			PLAYER1.SCORE	= DATAORIGIN+$0018
  4614 = 2AB5			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4615 = 2AB6			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4616 2A83			.var PLAYER2	= adr.PLAYER2 .word
  4617 = 2AB6			PLAYER2.X	= DATAORIGIN+$001A
  4618 = 2AB7			PLAYER2.Y	= DATAORIGIN+$001B
  4619 = 2AB8			PLAYER2.HEAD	= DATAORIGIN+$001C
  4620 = 2AB9			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4621 = 2ABA			PLAYER2.DIR	= DATAORIGIN+$001E
  4622 = 2ABB			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4623 = 2ABC			PLAYER2.SCORE	= DATAORIGIN+$0020
  4624 = 2ABD			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4625 = 2ABE			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4626 2A83			.var PLAYER3	= adr.PLAYER3 .word
  4627 = 2ABE			PLAYER3.X	= DATAORIGIN+$0022
  4628 = 2ABF			PLAYER3.Y	= DATAORIGIN+$0023
  4629 = 2AC0			PLAYER3.HEAD	= DATAORIGIN+$0024
  4630 = 2AC1			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4631 = 2AC2			PLAYER3.DIR	= DATAORIGIN+$0026
  4632 = 2AC3			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4633 = 2AC4			PLAYER3.SCORE	= DATAORIGIN+$0028
  4634 = 2AC5			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4635 = 2AC6			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4636 2A83			.var PLAYER4	= adr.PLAYER4 .word
  4637 = 2AC6			PLAYER4.X	= DATAORIGIN+$002A
  4638 = 2AC7			PLAYER4.Y	= DATAORIGIN+$002B
  4639 = 2AC8			PLAYER4.HEAD	= DATAORIGIN+$002C
  4640 = 2AC9			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4641 = 2ACA			PLAYER4.DIR	= DATAORIGIN+$002E
  4642 = 2ACB			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4643 = 2ACC			PLAYER4.SCORE	= DATAORIGIN+$0030
  4644 = 2ACD			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4645 = 2ACE			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4646 2A83			.var OBSTACLES	= adr.OBSTACLES .word
  4647 2A83			@exit
  4648
  4649 2A83 A2 00		@halt	ldx #$00
  4650 2A85 9A				txs
  4651
  4652 2A86 60				rts
  4653
  4654 				; ------------------------------------------------------------
  4655
  4656 				; ------------------------------------------------------------
  4657
  4658 2A87			.local	@DEFINES
  4659 2A87			C4P
  4660 				.endl
  4661
  4662 2A87			.local	@RESOURCE
  4663 				.endl
  4664
  4665 = 2A87 0E 10		MUL40
  4665 = 2A89 40 10		DIRECTION
  4665 = 2A8B 5F 00		PLY
  4665 = 2A8D 61 00		TMPPLY
  4665 = 2A8F AE 2A		PLAYER1
  4665 = 2A91 B6 2A		PLAYER2
  4665 = 2A93 BE 2A		PLAYER3
  4665 = 2A95 C6 2A		PLAYER4
  4665 = 2A97 CE 2A		OBSTACLES
  4665 				.endl							; MAIN
  4666
  4667 				; ------------------------------------------------------------
  4668 				; ------------------------------------------------------------
  4669
  4670 				.macro	UNITINITIALIZATION
  4671 				
  4672 					.ifdef MAIN.SYSTEM.@UnitInit
  4673 					jsr MAIN.SYSTEM.@UnitInit
  4674 					eif
  4675 				.endm
  4676
  4677 				; ------------------------------------------------------------
  4678
  4679 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4680 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4680 				SYSTEM: $10D5..$1177
  4681 					eif
  4682
  4683 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4683 				CODE: $100E..$2A86
  4684
  4685 				; ------------------------------------------------------------
  4686
  4687 2A99				.align $04
  4688
  4689 2A9C			DATAORIGIN
  4690 2A9C 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4691
  4692 = 0006			VARINITSIZE	= *-DATAORIGIN
  4693 = 0063			VARDATASIZE	= 99
  4694
  4695 = 2AFF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4696
  4697 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4697 				DATA: $2A9C..$2AFF
  4698
  4699 				; ------------------------------------------------------------
  4700
  4701 				.macro	STATICDATA
  4702 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4703 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4704 				.by  $C0 $03 $01 $02 $04 $08
  4705 				.endm
  4706
  4707 					end
