mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 00 18			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0042			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1816			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BE			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 58 17 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 58 85 02 A9 18 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C F9 17			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 1B 18		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 1B 18 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 181B			RESULT	= DATAORIGIN+$000B
   182
   183 = 181B			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 1C 18		loop  lda n
   307 1126 0D 1D 18		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 1C 18 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 181C			N	= DATAORIGIN+$000C
   321
   322 = 181C			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 1E 18			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 1E 18		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 1F 18		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 1F 18 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 181E			RANGE	= DATAORIGIN+$000E
   383 = 181F			RESULT	= DATAORIGIN+$000F
   384
   385 = 181E			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1810			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1812			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1814			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1815			FILEMODE	= DATAORIGIN+$0005
   450 = 1816			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1817			IORESULT	= DATAORIGIN+$0007
   452 = 1818			EOLN	= DATAORIGIN+$0008
   453 = 1819			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 3
   460
   461 1171 AD 42 18			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D 41 18			add X
   466 117D 85 5B			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5C			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 4
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5B			ldy T0W
   475 118A AD 44 18			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5C			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD 43 18			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 1841			X	= DATAORIGIN+$0031
   486 = 1842			Y	= DATAORIGIN+$0032
   487 = 1843			V	= DATAORIGIN+$0033
   488 = 1844			C	= DATAORIGIN+$0034
   489
   490 = 1841			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	CHECKAVAILDIR					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 11
   508
   509 119C A9 00			lda #$00
   510 119E 8D 20 18			sta AVAILDIR
   511
   512 				; optimize OK (tools.inc), line = 12
   513
   514 11A1 AD 46 18			lda Y
   515 11A4 0A				asl @
   516 11A5 A8				tay
   517 11A6 B9 0E 10			lda adr.MUL40,y
   518 11A9 18 6D 45 18			add X
   519 11AD 85 5B			sta T0W
   520 11AF B9 0F 10			lda adr.MUL40+1,y
   521 11B2 69 0C			adc #$0C
   522 11B4 85 5C			sta T0W+1
   523
   524 				; optimize OK (tools.inc), line = 14
   525
   526 11B6 A5 5B			lda T0W
   527 11B8 38 E9 28			sub #$28
   528 11BB 85 21			sta :STACKORIGIN+9
   529 11BD A5 5C			lda T0W+1
   530 11BF E9 00			sbc #$00
   531 11C1 85 11			sta :bp+1
   532 11C3 A4 21			ldy :STACKORIGIN+9
   533 11C5 B1 10			lda (:bp),y
   534 11C7 C9 20			cmp #$20
   535 11C9 D0 08			jne l_00C6
   536 11CB AD 20 18			lda AVAILDIR
   537 11CE 09 01			ora #$01
   538 11D0 8D 20 18			sta AVAILDIR
   539 11D3			l_00C6
   540
   541 				; optimize OK (tools.inc), line = 15
   542
   543 11D3 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   544 11DB A0 28			ldy #$28
   545 11DD B1 12			lda (:bp2),y
   546 11DF C9 20			cmp #$20
   547 11E1 D0 08			jne l_00E9
   548 11E3 AD 20 18			lda AVAILDIR
   549 11E6 09 02			ora #$02
   550 11E8 8D 20 18			sta AVAILDIR
   551 11EB			l_00E9
   552
   553 				; optimize OK (tools.inc), line = 16
   554
   555 11EB A5 5B			lda T0W
   556 11ED 38 E9 01			sub #$01
   557 11F0 85 21			sta :STACKORIGIN+9
   558 11F2 A5 5C			lda T0W+1
   559 11F4 E9 00			sbc #$00
   560 11F6 85 11			sta :bp+1
   561 11F8 A4 21			ldy :STACKORIGIN+9
   562 11FA B1 10			lda (:bp),y
   563 11FC C9 20			cmp #$20
   564 11FE D0 08			jne l_010C
   565 1200 AD 20 18			lda AVAILDIR
   566 1203 09 04			ora #$04
   567 1205 8D 20 18			sta AVAILDIR
   568 1208			l_010C
   569
   570 				; optimize OK (tools.inc), line = 17
   571
   572 1208 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   573 1210 A0 01			ldy #$01
   574 1212 B1 12			lda (:bp2),y
   575 1214 C9 20			cmp #$20
   576 1216 D0 08			jne l_012F
   577 1218 AD 20 18			lda AVAILDIR
   578 121B 09 08			ora #$08
   579 121D 8D 20 18			sta AVAILDIR
   580 1220			l_012F
   581
   582 				; ------------------------------------------------------------
   583
   584 = 1845			X	= DATAORIGIN+$0035
   585 = 1846			Y	= DATAORIGIN+$0036
   586
   587 = 1845			@VarData	= X
   588 = 0002			@VarDataSize	= 2
   589
   590 1220			@exit
   591 					.ifdef @new
   592 					lda <@VarData
   593 					sta :ztmp
   594 					lda >@VarData
   595 					ldy #@VarDataSize-1
   596 					jmp @FreeMem
   597 					els
   598 1220 60				rts						; ret
   599 					eif
   600 				.endl
   601
   602 1221			.local	INITPLAYFIELD					; PROCEDURE
   603
   604 				; optimize OK (init.inc), line = 3
   605
   606 1221 A9 1F			lda #$1F
   607 1223 8D 15 FF			sta BORDERCOLOR
   608 1226 A9 00			lda #$00
   609 1228 8D 19 FF			sta BGCOLOR
   610
   611 				; optimize OK (init.inc), line = 4
   612
   613 122B A9 20			lda #$20
   614 122D 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   615 122F A9 C0			lda #$C0
   616 1231 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   617 1233 A9 03			lda #$03
   618 1235 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   619 1237 A9 00			lda #$00
   620 1239 85 08			sta SYSTEM.FILLCHAR_0056.A
   621 123B A9 0C			lda #$0C
   622 123D 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   623 123F 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   624
   625 				; optimize OK (init.inc), line = 6
   626
   627 1242 A9 27			lda #$27
   628 1244 85 58			sta T0B
   629
   630 1246			l_0155
   631 				; --- ForToDoCondition
   632
   633 				; optimize OK (init.inc), line = 7
   634
   635 1246 A4 58			ldy T0B
   636 1248 A9 A0			lda #$A0
   637 124A 99 00 0C			sta $0C00,y
   638
   639 				; optimize OK (init.inc), line = 8
   640
   641 124D 99 C0 0F			sta $0FC0,y
   642
   643 				; optimize OK (init.inc), line = 9
   644
   645 1250 A9 41			lda #$41
   646 1252 99 00 08			sta $0800,y
   647
   648 				; optimize OK (init.inc), line = 10
   649
   650 1255 99 C0 0B			sta $0BC0,y
   651
   652 				; --- ForToDoEpilog
   653 1258 C6 58			dec T0B
   654 125A 10 EA			jpl l_0155
   655 125C			l_0163
   656
   657 				; optimize OK (init.inc), line = 13
   658
   659 125C A9 18			lda #$18
   660 125E 85 58			sta T0B
   661
   662 1260			l_0195
   663 				; --- ForToDoCondition
   664 1260 A5 58			lda T0B
   665 1262 C9 01			cmp #$01
   666 1264 90 3A			jcc l_01A3
   667
   668 				; optimize OK (init.inc), line = 14
   669
   670 1266 0A				asl @
   671 1267 A8				tay
   672 1268 A9 FF			lda #$FF
   673 126A 18 79 0E 10			add adr.MUL40,y
   674 126E 85 12			sta :bp2
   675 1270 A9 0B			lda #$0B
   676 1272 79 0F 10			adc adr.MUL40+1,y
   677 1275 85 13			sta :bp2+1
   678 1277 A0 00			ldy #$00
   679 1279 A9 A0			lda #$A0
   680 127B 91 12			sta (:bp2),y
   681 127D C8				iny
   682 127E 91 12			sta (:bp2),y
   683
   684 				; optimize OK (init.inc), line = 15
   685
   686 1280 A5 58			lda T0B
   687 1282 0A				asl @
   688 1283 A8				tay
   689 1284 A9 FF			lda #$FF
   690 1286 18 79 0E 10			add adr.MUL40,y
   691 128A 85 12			sta :bp2
   692 128C A9 07			lda #$07
   693 128E 79 0F 10			adc adr.MUL40+1,y
   694 1291 85 13			sta :bp2+1
   695 1293 A0 00			ldy #$00
   696 1295 A9 41			lda #$41
   697 1297 91 12			sta (:bp2),y
   698 1299 C8				iny
   699 129A 91 12			sta (:bp2),y
   700
   701 				; --- ForToDoEpilog
   702 129C C6 58			dec T0B
   703 129E 10 C0			jpl l_0195
   704 12A0			l_01A3
   705
   706 				; ------------------------------------------------------------
   707
   708 = 0000			@FORTMP_0152	= $00
   709 = 0001			@FORTMP_0192	= $01
   710 12A0			@exit
   711 					.ifdef @new
   712 					lda <@VarData
   713 					sta :ztmp
   714 					lda >@VarData
   715 					ldy #@VarDataSize-1
   716 					jmp @FreeMem
   717 					els
   718 12A0 60				rts						; ret
   719 					eif
   720 				.endl
   721
   722 12A1			.local	INITPLAYERS					; PROCEDURE
   723
   724 				; optimize OK (init.inc), line = 23
   725
   726 12A1 AD 47 18			lda P
   727 12A4 8D 23 18			sta PLY
   728 12A7 85 12			sta :bp2
   729 12A9 AD 48 18			lda P+1
   730 12AC 8D 24 18			sta PLY+1
   731 12AF 85 13			sta :bp2+1
   732 				; optimize OK (init.inc), line = 24
   733 12B1 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   734 12B3 AD 4C 18			lda BRAIN
   735 12B6 91 12			sta (:bp2),y
   736 12B8 A0 00			ldy #PLY.X-DATAORIGIN
   737 12BA AD 49 18			lda X
   738 12BD 91 12			sta (:bp2),y
   739 12BF A0 01			ldy #PLY.Y-DATAORIGIN
   740 12C1 AD 4A 18			lda Y
   741 12C4 91 12			sta (:bp2),y
   742 12C6 A0 04			ldy #PLY.DIR-DATAORIGIN
   743 12C8 AD 4B 18			lda DIR
   744 12CB 91 12			sta (:bp2),y
   745
   746 				; optimize OK (init.inc), line = 25
   747
   748 12CD A0 02			ldy #PLY.HEAD-DATAORIGIN
   749 12CF AD 4D 18			lda HEAD
   750 12D2 91 12			sta (:bp2),y
   751 12D4 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   752 12D6 AD 4E 18			lda COLOUR
   753 12D9 91 12			sta (:bp2),y
   754 12DB A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   755 12DD AD 4F 18			lda ISDEAD
   756 12E0 91 12			sta (:bp2),y
   757
   758 				; ------------------------------------------------------------
   759
   760 = 1847			P	= DATAORIGIN+$0037
   761 = 1849			X	= DATAORIGIN+$0039
   762 = 184A			Y	= DATAORIGIN+$003A
   763 = 184B			DIR	= DATAORIGIN+$003B
   764 = 184C			BRAIN	= DATAORIGIN+$003C
   765 = 184D			HEAD	= DATAORIGIN+$003D
   766 = 184E			COLOUR	= DATAORIGIN+$003E
   767 = 184F			ISDEAD	= DATAORIGIN+$003F
   768
   769 = 1847			@VarData	= P
   770 = 0009			@VarDataSize	= 9
   771
   772 12E2			@exit
   773 					.ifdef @new
   774 					lda <@VarData
   775 					sta :ztmp
   776 					lda >@VarData
   777 					ldy #@VarDataSize-1
   778 					jmp @FreeMem
   779 					els
   780 12E2 60				rts						; ret
   781 					eif
   782 				.endl
   783
   784 12E3			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   785
   786 				; optimize OK (ai.inc), line = 18
   787
   788 12E3 AC 23 18 84 12 AC + 	mwy PLY :bp2
   789 12ED A0 04			ldy #PLY.DIR-DATAORIGIN
   790 12EF B1 12			lda (:bp2),y
   791 12F1 2D 20 18			and AVAILDIR
   792 12F4 F0 07			jeq l_020D
   793 12F6 B1 12			lda (:bp2),y
   794 12F8 85 59			sta NEWDIR
   795 12FA 4C 78 13			jmp l_021D
   796 12FD			l_020D
   797
   798 				; optimize OK (ai.inc), line = 20
   799
   800 12FD AD 20 18			lda AVAILDIR
   801 1300 C9 03			cmp #$03
   802 1302 D0 16			jne l_022F
   803 1304 A9 00			lda #$00
   804 1306 20 40 11			jsr SYSTEM.RANDOM_006C
   805 1309 B5 18			lda :STACKORIGIN,x
   806 130B 29 01			and #$01
   807 130D 95 18			sta :STACKORIGIN,x
   808 130F B4 18			ldy :STACKORIGIN,x
   809 1311 B9 40 10			lda adr.DIRECTION,y
   810 1314 85 59			sta NEWDIR
   811 1316 CA				dex
   812 1317 4C 33 13			jmp l_0245
   813 131A			l_022F
   814
   815 				; optimize OK (ai.inc), line = 22
   816
   817 131A AD 20 18			lda AVAILDIR
   818 131D 8D 50 18			sta @CASETMP_0003
   819 1320 C9 01			cmp #$01
   820 1322 D0 07			jne l_0250
   821 1324			@
   822
   823 				; optimize OK (ai.inc), line = 23
   824
   825 1324 A9 01			lda #$01
   826 1326 85 59			sta NEWDIR
   827
   828 1328 4C 33 13			jmp a_0003
   829 132B			l_0250
   830 132B C9 02			cmp #$02
   831 132D D0 04			jne l_025D
   832 132F			@
   833
   834 				; optimize OK (ai.inc), line = 24
   835
   836 132F A9 02			lda #$02
   837 1331 85 59			sta NEWDIR
   838
   839 1333			l_025D
   840 1333			a_0003
   841 1333			l_0245
   842
   843 				; optimize OK (ai.inc), line = 27
   844
   845 1333 AD 20 18			lda AVAILDIR
   846 1336 C9 0C			cmp #$0C
   847 1338 D0 25			jne l_0279
   848 133A A9 00			lda #$00
   849 133C 20 40 11			jsr SYSTEM.RANDOM_006C
   850 133F B5 18			lda :STACKORIGIN,x
   851 1341 29 01			and #$01
   852 1343 95 18			sta :STACKORIGIN,x
   853 1345 E8				inx
   854 1346 A9 02 95 18			mva #$02 :STACKORIGIN,x
   855 134A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
   856 134E 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
   857 1350 20 44 10			jsr addAX_CX
   858 1353 CA				dex
   859 1354 B4 18			ldy :STACKORIGIN,x
   860 1356 B9 40 10			lda adr.DIRECTION,y
   861 1359 85 59			sta NEWDIR
   862 135B CA				dex
   863 135C 4C 78 13			jmp l_0293
   864 135F			l_0279
   865
   866 				; optimize OK (ai.inc), line = 29
   867
   868 135F AD 20 18			lda AVAILDIR
   869 1362 8D 51 18			sta @CASETMP_0004
   870 1365 C9 04			cmp #$04
   871 1367 D0 07			jne l_029E
   872 1369			@
   873
   874 				; optimize OK (ai.inc), line = 30
   875
   876 1369 A9 04			lda #$04
   877 136B 85 59			sta NEWDIR
   878
   879 136D 4C 78 13			jmp a_0004
   880 1370			l_029E
   881 1370 C9 08			cmp #$08
   882 1372 D0 04			jne l_02AB
   883 1374			@
   884
   885 				; optimize OK (ai.inc), line = 31
   886
   887 1374 A9 08			lda #$08
   888 1376 85 59			sta NEWDIR
   889
   890 1378			l_02AB
   891 1378			a_0004
   892 1378			l_0293
   893 1378			l_021D
   894
   895 				; ------------------------------------------------------------
   896
   897 = 1850			@CASETMP_0003	= DATAORIGIN+$0040
   898 = 1851			@CASETMP_0004	= DATAORIGIN+$0041
   899
   900 = 1850			@VarData	= @CASETMP_0003
   901 = 0002			@VarDataSize	= 2
   902
   903 1378			@exit
   904 					.ifdef @new
   905 					lda <@VarData
   906 					sta :ztmp
   907 					lda >@VarData
   908 					ldy #@VarDataSize-1
   909 					jmp @FreeMem
   910 					els
   911 1378 60				rts						; ret
   912 					eif
   913 				.endl
   914
   915 1379			.local	AI_MIRROR					; PROCEDURE
   916
   917 				; optimize OK (ai.inc), line = 41
   918
   919 1379 AD 29 18			lda PLAYER1.DIR
   920 137C 8D 52 18			sta @CASETMP_0005
   921 137F C9 01			cmp #$01
   922 1381 D0 07			jne l_02C4
   923 1383			@
   924
   925 				; optimize OK (ai.inc), line = 42
   926
   927 1383 A9 02			lda #$02
   928 1385 85 58			sta T0B
   929
   930 1387 4C A8 13			jmp a_0005
   931 138A			l_02C4
   932 138A C9 02			cmp #$02
   933 138C D0 07			jne l_02D1
   934 138E			@
   935
   936 				; optimize OK (ai.inc), line = 43
   937
   938 138E A9 01			lda #$01
   939 1390 85 58			sta T0B
   940
   941 1392 4C A8 13			jmp a_0005
   942 1395			l_02D1
   943 1395 C9 04			cmp #$04
   944 1397 D0 07			jne l_02DE
   945 1399			@
   946
   947 				; optimize OK (ai.inc), line = 44
   948
   949 1399 A9 08			lda #$08
   950 139B 85 58			sta T0B
   951
   952 139D 4C A8 13			jmp a_0005
   953 13A0			l_02DE
   954 13A0 C9 08			cmp #$08
   955 13A2 D0 04			jne l_02EB
   956 13A4			@
   957
   958 				; optimize OK (ai.inc), line = 45
   959
   960 13A4 A9 04			lda #$04
   961 13A6 85 58			sta T0B
   962
   963 13A8			l_02EB
   964 13A8			a_0005
   965
   966 				; optimize OK (ai.inc), line = 48
   967
   968 13A8 AD 20 18			lda AVAILDIR
   969 13AB 25 58			and T0B
   970 13AD F0 07			jeq l_030F
   971 13AF A5 58			lda T0B
   972 13B1 85 59			sta NEWDIR
   973 13B3 4C B9 13			jmp l_031F
   974 13B6			l_030F
   975
   976 				; optimize FAIL ('AI_STRAIGHTFORWARD', ai.inc), line = 49
   977
   978 13B6 20 E3 12			jsr AI_STRAIGHTFORWARD
   979 13B9			l_031F
   980
   981 				; ------------------------------------------------------------
   982
   983 = 1852			@CASETMP_0005	= DATAORIGIN+$0042
   984
   985 = 1852			@VarData	= @CASETMP_0005
   986 = 0001			@VarDataSize	= 1
   987
   988 13B9			@exit
   989 					.ifdef @new
   990 					lda <@VarData
   991 					sta :ztmp
   992 					lda >@VarData
   993 					ldy #@VarDataSize-1
   994 					jmp @FreeMem
   995 					els
   996 13B9 60				rts						; ret
   997 					eif
   998 				.endl
   999
  1000 13BA			.local	AI_RANDOM					; PROCEDURE
  1001
  1002 				; optimize OK (ai.inc), line = 56
  1003
  1004 13BA AC 23 18 84 12 AC + 	mwy PLY :bp2
  1005 13C4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1006 13C6 B1 12			lda (:bp2),y
  1007 13C8 85 58			sta T0B
  1008
  1009 				; optimize OK (ai.inc), line = 57
  1010
  1011 13CA A9 00			lda #$00
  1012 13CC 20 40 11			jsr SYSTEM.RANDOM_006C
  1013 13CF CA				dex
  1014 13D0 B5 19			lda :STACKORIGIN+1,x
  1015 13D2 29 03			and #$03
  1016 13D4 D0 0D			jne l_033F
  1017 13D6			@
  1018 13D6 A9 04			lda #$04
  1019 13D8 20 40 11			jsr SYSTEM.RANDOM_006C
  1020 13DB B4 18			ldy :STACKORIGIN,x
  1021 13DD B9 40 10			lda adr.DIRECTION,y
  1022 13E0 85 58			sta T0B
  1023 13E2 CA				dex
  1024 13E3			l_033F
  1025
  1026 				; optimize OK (ai.inc), line = 59
  1027
  1028 13E3 AD 20 18			lda AVAILDIR
  1029 13E6 25 58			and T0B
  1030 13E8 F0 07			jeq l_0362
  1031 13EA A5 58			lda T0B
  1032 13EC 85 59			sta NEWDIR
  1033 13EE 4C F4 13			jmp l_0372
  1034 13F1			l_0362
  1035
  1036 				; optimize FAIL ('AI_STRAIGHTFORWARD', ai.inc), line = 60
  1037
  1038 13F1 20 E3 12			jsr AI_STRAIGHTFORWARD
  1039 13F4			l_0372
  1040 13F4			@exit
  1041 					.ifdef @new
  1042 					lda <@VarData
  1043 					sta :ztmp
  1044 					lda >@VarData
  1045 					ldy #@VarDataSize-1
  1046 					jmp @FreeMem
  1047 					els
  1048 13F4 60				rts						; ret
  1049 					eif
  1050 				.endl
  1051
  1052 13F5			.local	HUMAN						; PROCEDURE
  1053
  1054 				; optimize OK (main.pas), line = 14
  1055
  1056 13F5 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1057 13FF A0 04			ldy #PLY.DIR-DATAORIGIN
  1058 1401 B1 12			lda (:bp2),y
  1059 1403 85 59			sta NEWDIR
  1060
  1061 				; optimize OK (main.pas), line = 15
  1062
  1063 1405 A9 02			lda #$02
  1064 1407 8D 08 FF			sta JOY
  1065 140A A9 FF			lda #$FF
  1066 140C 8D 30 FD			sta KEY_PIO
  1067 140F AD 08 FF			lda JOY
  1068 1412 49 FF			eor #$FF
  1069 1414 85 58			sta T0B
  1070
  1071 				; optimize OK (main.pas), line = 17
  1072
  1073 1416 8D 53 18			sta @CASETMP_0006
  1074 1419 C9 01			cmp #$01
  1075 141B D0 19			jne l_039A
  1076 141D			@
  1077
  1078 				; optimize OK (main.pas), line = 18
  1079
  1080 141D AC 23 18 84 12 AC + 	mwy PLY :bp2
  1081 1427 A0 04			ldy #PLY.DIR-DATAORIGIN
  1082 1429 B1 12			lda (:bp2),y
  1083 142B C9 02			cmp #$02
  1084 142D F0 04			jeq l_03AC
  1085 142F A9 01			lda #$01
  1086 1431 85 59			sta NEWDIR
  1087 1433			l_03AC
  1088
  1089 1433 4C 8A 14			jmp a_0006
  1090 1436			l_039A
  1091 1436 C9 02			cmp #$02
  1092 1438 D0 19			jne l_03BC
  1093 143A			@
  1094
  1095 				; optimize OK (main.pas), line = 19
  1096
  1097 143A AC 23 18 84 12 AC + 	mwy PLY :bp2
  1098 1444 A0 04			ldy #PLY.DIR-DATAORIGIN
  1099 1446 B1 12			lda (:bp2),y
  1100 1448 C9 01			cmp #$01
  1101 144A F0 04			jeq l_03CE
  1102 144C A9 02			lda #$02
  1103 144E 85 59			sta NEWDIR
  1104 1450			l_03CE
  1105
  1106 1450 4C 8A 14			jmp a_0006
  1107 1453			l_03BC
  1108 1453 C9 04			cmp #$04
  1109 1455 D0 19			jne l_03DE
  1110 1457			@
  1111
  1112 				; optimize OK (main.pas), line = 20
  1113
  1114 1457 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1115 1461 A0 04			ldy #PLY.DIR-DATAORIGIN
  1116 1463 B1 12			lda (:bp2),y
  1117 1465 C9 08			cmp #$08
  1118 1467 F0 04			jeq l_03F0
  1119 1469 A9 04			lda #$04
  1120 146B 85 59			sta NEWDIR
  1121 146D			l_03F0
  1122
  1123 146D 4C 8A 14			jmp a_0006
  1124 1470			l_03DE
  1125 1470 C9 08			cmp #$08
  1126 1472 D0 16			jne l_0400
  1127 1474			@
  1128
  1129 				; optimize OK (main.pas), line = 21
  1130
  1131 1474 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1132 147E A0 04			ldy #PLY.DIR-DATAORIGIN
  1133 1480 B1 12			lda (:bp2),y
  1134 1482 C9 04			cmp #$04
  1135 1484 F0 04			jeq l_0412
  1136 1486 A9 08			lda #$08
  1137 1488 85 59			sta NEWDIR
  1138 148A			l_0412
  1139
  1140 148A			l_0400
  1141 148A			a_0006
  1142
  1143 				; optimize OK (main.pas), line = 24
  1144
  1145 148A A5 59			lda NEWDIR
  1146 148C 2D 20 18			and AVAILDIR
  1147 148F D0 1B			jne l_0439
  1148
  1149 				; optimize OK (main.pas), line = 25
  1150
  1151 1491 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1152 149B A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1153 149D A9 01			lda #$01
  1154 149F 91 12			sta (:bp2),y
  1155 14A1 A9 00			lda #$00
  1156 14A3 8D 21 18			sta ALIVE
  1157 14A6 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1158 14A8 A9 57			lda #$57
  1159 14AA 91 12			sta (:bp2),y
  1160 14AC			l_0439
  1161
  1162 				; ------------------------------------------------------------
  1163
  1164 = 1853			@CASETMP_0006	= DATAORIGIN+$0043
  1165
  1166 = 1853			@VarData	= @CASETMP_0006
  1167 = 0001			@VarDataSize	= 1
  1168
  1169 14AC			@exit
  1170 					.ifdef @new
  1171 					lda <@VarData
  1172 					sta :ztmp
  1173 					lda >@VarData
  1174 					ldy #@VarDataSize-1
  1175 					jmp @FreeMem
  1176 					els
  1177 14AC 60				rts						; ret
  1178 					eif
  1179 				.endl
  1180
  1181 14AD			.local	PLAYERMOVE					; PROCEDURE
  1182
  1183 				; optimize OK (main.pas), line = 33
  1184
  1185 14AD AD 54 18			lda P
  1186 14B0 8D 23 18			sta PLY
  1187 14B3 85 12			sta :bp2
  1188 14B5 AD 55 18			lda P+1
  1189 14B8 8D 24 18			sta PLY+1
  1190 14BB 85 13			sta :bp2+1
  1191 				; optimize OK (main.pas), line = 35
  1192 14BD A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1193 14BF B1 12			lda (:bp2),y
  1194 14C1 F0 03 4C A8 16		jne l_0460
  1195
  1196 				; optimize OK (main.pas), line = 37
  1197
  1198 14C6 A0 00			ldy #PLY.X-DATAORIGIN
  1199 14C8 B1 12			lda (:bp2),y
  1200 14CA 8D 45 18			sta CHECKAVAILDIR.X
  1201 14CD A0 01			ldy #PLY.Y-DATAORIGIN
  1202 14CF B1 12			lda (:bp2),y
  1203 14D1 8D 46 18			sta CHECKAVAILDIR.Y
  1204 14D4 20 9C 11			jsr CHECKAVAILDIR
  1205
  1206 				; optimize OK (main.pas), line = 39
  1207
  1208 14D7 AD 20 18			lda AVAILDIR
  1209 14DA D0 36			jne l_047A
  1210
  1211 				; optimize OK (main.pas), line = 40
  1212
  1213 14DC AC 23 18 84 12 AC + 	mwy PLY :bp2
  1214 14E6 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1215 14E8 A9 01			lda #$01
  1216 14EA 91 12			sta (:bp2),y
  1217 14EC CE 21 18			dec ALIVE
  1218
  1219 				; optimize OK (main.pas), line = 41
  1220
  1221 14EF A0 00			ldy #PLY.X-DATAORIGIN
  1222 14F1 B1 12			lda (:bp2),y
  1223 14F3 8D 41 18			sta PUTCHAR.X
  1224 14F6 A0 01			ldy #PLY.Y-DATAORIGIN
  1225 14F8 B1 12			lda (:bp2),y
  1226 14FA 8D 42 18			sta PUTCHAR.Y
  1227 14FD A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1228 14FF B1 12			lda (:bp2),y
  1229 1501 18 69 80			add #$80
  1230 1504 8D 44 18			sta PUTCHAR.C
  1231 1507 A9 57			lda #$57
  1232 1509 8D 43 18			sta PUTCHAR.V
  1233 150C 20 71 11			jsr PUTCHAR
  1234 150F 4C A8 16			jmp l_049B
  1235 1512			l_047A
  1236
  1237 				; optimize OK (main.pas), line = 44
  1238
  1239 1512 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1240 151C A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1241 151E B1 12			lda (:bp2),y
  1242 1520 8D 56 18			sta @CASETMP_0007
  1243 1523 C9 00			cmp #$00
  1244 1525 D0 06			jne l_04A6
  1245 1527			@
  1246
  1247 				; optimize FAIL ('HUMAN', main.pas), line = 45
  1248
  1249 1527 20 F5 13			jsr HUMAN
  1250 152A 4C 48 15			jmp a_0007
  1251 152D			l_04A6
  1252 152D C9 01			cmp #$01
  1253 152F D0 06			jne l_04B0
  1254 1531			@
  1255
  1256 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 46
  1257
  1258 1531 20 E3 12			jsr AI_STRAIGHTFORWARD
  1259 1534 4C 48 15			jmp a_0007
  1260 1537			l_04B0
  1261 1537 C9 02			cmp #$02
  1262 1539 D0 06			jne l_04BA
  1263 153B			@
  1264
  1265 				; optimize FAIL ('AI_MIRROR', main.pas), line = 47
  1266
  1267 153B 20 79 13			jsr AI_MIRROR
  1268 153E 4C 48 15			jmp a_0007
  1269 1541			l_04BA
  1270 1541 C9 03			cmp #$03
  1271 1543 D0 03			jne l_04C4
  1272 1545			@
  1273
  1274 				; optimize FAIL ('AI_RANDOM', main.pas), line = 48
  1275
  1276 1545 20 BA 13			jsr AI_RANDOM
  1277 1548			l_04C4
  1278 1548			a_0007
  1279
  1280 				; optimize OK (main.pas), line = 51
  1281
  1282 1548 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1283 1552 A0 04			ldy #PLY.DIR-DATAORIGIN
  1284 1554 B1 12			lda (:bp2),y
  1285 1556 C5 59			cmp NEWDIR
  1286 1558 D0 14			jne l_04E1
  1287
  1288 				; optimize OK (main.pas), line = 52
  1289
  1290 155A A5 59			lda NEWDIR
  1291 155C 29 0C			and #$0C
  1292 155E F0 07			jeq l_04F8
  1293 1560 A9 40			lda #$40
  1294 1562 85 58			sta T0B
  1295 1564 4C 6B 15			jmp l_0506
  1296 1567			l_04F8
  1297 1567 A9 42			lda #$42
  1298 1569 85 58			sta T0B
  1299 156B			l_0506
  1300 156B 4C DE 15			jmp l_0513
  1301 156E			l_04E1
  1302
  1303 				; optimize OK (main.pas), line = 54
  1304
  1305 156E AC 23 18 84 12 AC + 	mwy PLY :bp2
  1306 1578 A0 04			ldy #PLY.DIR-DATAORIGIN
  1307 157A B1 12			lda (:bp2),y
  1308 157C 29 0A			and #$0A
  1309 157E F0 0A			jeq l_0539
  1310 1580 A5 59			lda NEWDIR
  1311 1582 29 05			and #$05
  1312 1584 F0 04			jeq l_0539
  1313 1586 A9 7D			lda #$7D
  1314 1588 85 58			sta T0B
  1315 158A			l_0539
  1316
  1317 				; optimize OK (main.pas), line = 55
  1318
  1319 158A AC 23 18 84 12 AC + 	mwy PLY :bp2
  1320 1594 A0 04			ldy #PLY.DIR-DATAORIGIN
  1321 1596 B1 12			lda (:bp2),y
  1322 1598 29 09			and #$09
  1323 159A F0 0A			jeq l_0566
  1324 159C A5 59			lda NEWDIR
  1325 159E 29 06			and #$06
  1326 15A0 F0 04			jeq l_0566
  1327 15A2 A9 6E			lda #$6E
  1328 15A4 85 58			sta T0B
  1329 15A6			l_0566
  1330
  1331 				; optimize OK (main.pas), line = 56
  1332
  1333 15A6 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1334 15B0 A0 04			ldy #PLY.DIR-DATAORIGIN
  1335 15B2 B1 12			lda (:bp2),y
  1336 15B4 29 06			and #$06
  1337 15B6 F0 0A			jeq l_0593
  1338 15B8 A5 59			lda NEWDIR
  1339 15BA 29 09			and #$09
  1340 15BC F0 04			jeq l_0593
  1341 15BE A9 6D			lda #$6D
  1342 15C0 85 58			sta T0B
  1343 15C2			l_0593
  1344
  1345 				; optimize OK (main.pas), line = 57
  1346
  1347 15C2 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1348 15CC A0 04			ldy #PLY.DIR-DATAORIGIN
  1349 15CE B1 12			lda (:bp2),y
  1350 15D0 29 05			and #$05
  1351 15D2 F0 0A			jeq l_05C0
  1352 15D4 A5 59			lda NEWDIR
  1353 15D6 29 0A			and #$0A
  1354 15D8 F0 04			jeq l_05C0
  1355 15DA A9 70			lda #$70
  1356 15DC 85 58			sta T0B
  1357 15DE			l_05C0
  1358 15DE			l_0513
  1359
  1360 				; optimize OK (main.pas), line = 59
  1361
  1362 15DE AC 23 18 84 12 AC + 	mwy PLY :bp2
  1363 15E8 A0 00			ldy #PLY.X-DATAORIGIN
  1364 15EA B1 12			lda (:bp2),y
  1365 15EC 8D 41 18			sta PUTCHAR.X
  1366 15EF A0 01			ldy #PLY.Y-DATAORIGIN
  1367 15F1 B1 12			lda (:bp2),y
  1368 15F3 8D 42 18			sta PUTCHAR.Y
  1369 15F6 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1370 15F8 B1 12			lda (:bp2),y
  1371 15FA 8D 44 18			sta PUTCHAR.C
  1372 15FD A5 58			lda T0B
  1373 15FF 8D 43 18			sta PUTCHAR.V
  1374 1602 20 71 11			jsr PUTCHAR
  1375
  1376 				; optimize OK (main.pas), line = 61
  1377
  1378 1605 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1379 160F A0 04			ldy #PLY.DIR-DATAORIGIN
  1380 1611 A5 59			lda NEWDIR
  1381 1613 91 12			sta (:bp2),y
  1382
  1383 				; optimize OK (main.pas), line = 63
  1384
  1385 1615 A5 59			lda NEWDIR
  1386 1617 8D 57 18			sta @CASETMP_0008
  1387 161A C9 01			cmp #$01
  1388 161C D0 16			jne l_05E5
  1389 161E			@
  1390
  1391 				; optimize OK (main.pas), line = 64
  1392
  1393 161E AC 23 18 84 12 AC + 	mwy PLY :bp2
  1394 1628 A0 01			ldy #PLY.Y-DATAORIGIN
  1395 162A B1 12			lda (:bp2),y
  1396 162C 38 E9 01			sub #$01
  1397 162F 91 12			sta (:bp2),y
  1398
  1399 1631 4C 7F 16			jmp a_0008
  1400 1634			l_05E5
  1401 1634 C9 02			cmp #$02
  1402 1636 D0 16			jne l_05EF
  1403 1638			@
  1404
  1405 				; optimize OK (main.pas), line = 65
  1406
  1407 1638 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1408 1642 A0 01			ldy #PLY.Y-DATAORIGIN
  1409 1644 B1 12			lda (:bp2),y
  1410 1646 18 69 01			add #$01
  1411 1649 91 12			sta (:bp2),y
  1412
  1413 164B 4C 7F 16			jmp a_0008
  1414 164E			l_05EF
  1415 164E C9 04			cmp #$04
  1416 1650 D0 16			jne l_05F9
  1417 1652			@
  1418
  1419 				; optimize OK (main.pas), line = 66
  1420
  1421 1652 AC 23 18 84 12 AC + 	mwy PLY :bp2
  1422 165C A0 00			ldy #PLY.X-DATAORIGIN
  1423 165E B1 12			lda (:bp2),y
  1424 1660 38 E9 01			sub #$01
  1425 1663 91 12			sta (:bp2),y
  1426
  1427 1665 4C 7F 16			jmp a_0008
  1428 1668			l_05F9
  1429 1668 C9 08			cmp #$08
  1430 166A D0 13			jne l_0603
  1431 166C			@
  1432
  1433 				; optimize OK (main.pas), line = 67
  1434
  1435 166C AC 23 18 84 12 AC + 	mwy PLY :bp2
  1436 1676 A0 00			ldy #PLY.X-DATAORIGIN
  1437 1678 B1 12			lda (:bp2),y
  1438 167A 18 69 01			add #$01
  1439 167D 91 12			sta (:bp2),y
  1440
  1441 167F			l_0603
  1442 167F			a_0008
  1443
  1444 				; optimize OK (main.pas), line = 70
  1445
  1446 167F AC 23 18 84 12 AC + 	mwy PLY :bp2
  1447 1689 A0 00			ldy #PLY.X-DATAORIGIN
  1448 168B B1 12			lda (:bp2),y
  1449 168D 8D 41 18			sta PUTCHAR.X
  1450 1690 A0 01			ldy #PLY.Y-DATAORIGIN
  1451 1692 B1 12			lda (:bp2),y
  1452 1694 8D 42 18			sta PUTCHAR.Y
  1453 1697 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1454 1699 B1 12			lda (:bp2),y
  1455 169B 8D 43 18			sta PUTCHAR.V
  1456 169E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1457 16A0 B1 12			lda (:bp2),y
  1458 16A2 8D 44 18			sta PUTCHAR.C
  1459 16A5 20 71 11			jsr PUTCHAR
  1460 16A8			l_049B
  1461 16A8			l_0460
  1462
  1463 				; ------------------------------------------------------------
  1464
  1465 = 1854			P	= DATAORIGIN+$0044
  1466 = 1856			@CASETMP_0007	= DATAORIGIN+$0046
  1467 = 1857			@CASETMP_0008	= DATAORIGIN+$0047
  1468
  1469 = 1854			@VarData	= P
  1470 = 0004			@VarDataSize	= 4
  1471
  1472 16A8			@exit
  1473 					.ifdef @new
  1474 					lda <@VarData
  1475 					sta :ztmp
  1476 					lda >@VarData
  1477 					ldy #@VarDataSize-1
  1478 					jmp @FreeMem
  1479 					els
  1480 16A8 60				rts						; ret
  1481 					eif
  1482 				.endl
  1483
  1484 16A9			.local	MAINLOOP					; PROCEDURE
  1485
  1486 				; optimize OK (main.pas), line = 81
  1487
  1488 16A9 A9 00			lda #$00
  1489 16AB 8D 4F 18			sta INITPLAYERS.ISDEAD
  1490 16AE A9 5F			lda #$5F
  1491 16B0 8D 4E 18			sta INITPLAYERS.COLOUR
  1492 16B3 A9 51			lda #$51
  1493 16B5 8D 4D 18			sta INITPLAYERS.HEAD
  1494 16B8 A9 00			lda #$00
  1495 16BA 8D 4C 18			sta INITPLAYERS.BRAIN
  1496 16BD A9 08			lda #$08
  1497 16BF 8D 4B 18			sta INITPLAYERS.DIR
  1498 16C2 A9 0C			lda #$0C
  1499 16C4 8D 4A 18			sta INITPLAYERS.Y
  1500 16C7 A9 0A			lda #$0A
  1501 16C9 8D 49 18			sta INITPLAYERS.X
  1502 16CC AD 07 18			lda PLAYER1
  1503 16CF 8D 47 18			sta INITPLAYERS.P
  1504 16D2 AD 08 18			lda PLAYER1+1
  1505 16D5 8D 48 18			sta INITPLAYERS.P+1
  1506 16D8 20 A1 12			jsr INITPLAYERS
  1507
  1508 				; optimize OK (main.pas), line = 82
  1509
  1510 16DB A9 00			lda #$00
  1511 16DD 8D 4F 18			sta INITPLAYERS.ISDEAD
  1512 16E0 A9 5D			lda #$5D
  1513 16E2 8D 4E 18			sta INITPLAYERS.COLOUR
  1514 16E5 A9 51			lda #$51
  1515 16E7 8D 4D 18			sta INITPLAYERS.HEAD
  1516 16EA A9 02			lda #$02
  1517 16EC 8D 4C 18			sta INITPLAYERS.BRAIN
  1518 16EF A9 04			lda #$04
  1519 16F1 8D 4B 18			sta INITPLAYERS.DIR
  1520 16F4 A9 0C			lda #$0C
  1521 16F6 8D 4A 18			sta INITPLAYERS.Y
  1522 16F9 A9 1E			lda #$1E
  1523 16FB 8D 49 18			sta INITPLAYERS.X
  1524 16FE AD 09 18			lda PLAYER2
  1525 1701 8D 47 18			sta INITPLAYERS.P
  1526 1704 AD 0A 18			lda PLAYER2+1
  1527 1707 8D 48 18			sta INITPLAYERS.P+1
  1528 170A 20 A1 12			jsr INITPLAYERS
  1529
  1530 				; optimize OK (main.pas), line = 83
  1531
  1532 170D A9 00			lda #$00
  1533 170F 8D 4F 18			sta INITPLAYERS.ISDEAD
  1534 1712 A9 71			lda #$71
  1535 1714 8D 4E 18			sta INITPLAYERS.COLOUR
  1536 1717 A9 51			lda #$51
  1537 1719 8D 4D 18			sta INITPLAYERS.HEAD
  1538 171C A9 01			lda #$01
  1539 171E 8D 4C 18			sta INITPLAYERS.BRAIN
  1540 1721 A9 02			lda #$02
  1541 1723 8D 4B 18			sta INITPLAYERS.DIR
  1542 1726 A9 06			lda #$06
  1543 1728 8D 4A 18			sta INITPLAYERS.Y
  1544 172B A9 14			lda #$14
  1545 172D 8D 49 18			sta INITPLAYERS.X
  1546 1730 AD 0B 18			lda PLAYER3
  1547 1733 8D 47 18			sta INITPLAYERS.P
  1548 1736 AD 0C 18			lda PLAYER3+1
  1549 1739 8D 48 18			sta INITPLAYERS.P+1
  1550 173C 20 A1 12			jsr INITPLAYERS
  1551
  1552 				; optimize OK (main.pas), line = 84
  1553
  1554 173F A9 00			lda #$00
  1555 1741 8D 4F 18			sta INITPLAYERS.ISDEAD
  1556 1744 A9 55			lda #$55
  1557 1746 8D 4E 18			sta INITPLAYERS.COLOUR
  1558 1749 A9 51			lda #$51
  1559 174B 8D 4D 18			sta INITPLAYERS.HEAD
  1560 174E A9 03			lda #$03
  1561 1750 8D 4C 18			sta INITPLAYERS.BRAIN
  1562 1753 A9 01			lda #$01
  1563 1755 8D 4B 18			sta INITPLAYERS.DIR
  1564 1758 A9 12			lda #$12
  1565 175A 8D 4A 18			sta INITPLAYERS.Y
  1566 175D A9 14			lda #$14
  1567 175F 8D 49 18			sta INITPLAYERS.X
  1568 1762 AD 0D 18			lda PLAYER4
  1569 1765 8D 47 18			sta INITPLAYERS.P
  1570 1768 AD 0E 18			lda PLAYER4+1
  1571 176B 8D 48 18			sta INITPLAYERS.P+1
  1572 176E 20 A1 12			jsr INITPLAYERS
  1573
  1574 				; optimize OK (main.pas), line = 86
  1575
  1576 1771 A9 FF			lda #$FF
  1577 1773 8D 21 18			sta ALIVE
  1578
  1579 				; optimize OK (main.pas), line = 87
  1580
  1581 1776 AD 2B 18			lda PLAYER1.ISDEAD
  1582 1779 D0 03			jne l_065A
  1583 177B EE 21 18			inc ALIVE
  1584 177E			l_065A
  1585
  1586 				; optimize OK (main.pas), line = 88
  1587
  1588 177E AD 32 18			lda PLAYER2.ISDEAD
  1589 1781 D0 03			jne l_0670
  1590 1783 EE 21 18			inc ALIVE
  1591 1786			l_0670
  1592
  1593 				; optimize OK (main.pas), line = 89
  1594
  1595 1786 AD 39 18			lda PLAYER3.ISDEAD
  1596 1789 D0 03			jne l_0686
  1597 178B EE 21 18			inc ALIVE
  1598 178E			l_0686
  1599
  1600 				; optimize OK (main.pas), line = 90
  1601
  1602 178E AD 40 18			lda PLAYER4.ISDEAD
  1603 1791 D0 03			jne l_069C
  1604 1793 EE 21 18			inc ALIVE
  1605 1796			l_069C
  1606
  1607 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 92
  1608
  1609 1796 20 21 12			jsr INITPLAYFIELD
  1610
  1611 				; --- RepeatUntilProlog
  1612 1799			l_06A5
  1613
  1614 				; optimize OK (main.pas), line = 95
  1615
  1616 1799 A9 03			lda #$03
  1617 179B 8D 1C 18			sta SYSTEM.PAUSE_006B.N
  1618 179E A9 00			lda #$00
  1619 17A0 8D 1D 18			sta SYSTEM.PAUSE_006B.N+1
  1620 17A3 20 23 11			jsr SYSTEM.PAUSE_006B
  1621
  1622 				; optimize OK (main.pas), line = 96
  1623
  1624 17A6 AD 07 18			lda PLAYER1
  1625 17A9 8D 54 18			sta PLAYERMOVE.P
  1626 17AC AD 08 18			lda PLAYER1+1
  1627 17AF 8D 55 18			sta PLAYERMOVE.P+1
  1628 17B2 20 AD 14			jsr PLAYERMOVE
  1629
  1630 				; optimize OK (main.pas), line = 97
  1631
  1632 17B5 AD 09 18			lda PLAYER2
  1633 17B8 8D 54 18			sta PLAYERMOVE.P
  1634 17BB AD 0A 18			lda PLAYER2+1
  1635 17BE 8D 55 18			sta PLAYERMOVE.P+1
  1636 17C1 20 AD 14			jsr PLAYERMOVE
  1637
  1638 				; optimize OK (main.pas), line = 98
  1639
  1640 17C4 AD 0B 18			lda PLAYER3
  1641 17C7 8D 54 18			sta PLAYERMOVE.P
  1642 17CA AD 0C 18			lda PLAYER3+1
  1643 17CD 8D 55 18			sta PLAYERMOVE.P+1
  1644 17D0 20 AD 14			jsr PLAYERMOVE
  1645
  1646 				; optimize OK (main.pas), line = 99
  1647
  1648 17D3 AD 0D 18			lda PLAYER4
  1649 17D6 8D 54 18			sta PLAYERMOVE.P
  1650 17D9 AD 0E 18			lda PLAYER4+1
  1651 17DC 8D 55 18			sta PLAYERMOVE.P+1
  1652 17DF 20 AD 14			jsr PLAYERMOVE
  1653
  1654 				; optimize OK (main.pas), line = 100
  1655
  1656 17E2 AD 21 18			lda ALIVE
  1657 17E5 F0 04			jeq l_06A5x
  1658 17E7 C9 FF			cmp #$FF
  1659 17E9 D0 AE			jne l_06A5
  1660 17EB			l_06A5x
  1661
  1662 				; optimize OK (main.pas), line = 102
  1663
  1664 17EB A9 64			lda #$64
  1665 17ED 8D 1C 18			sta SYSTEM.PAUSE_006B.N
  1666 17F0 A9 00			lda #$00
  1667 17F2 8D 1D 18			sta SYSTEM.PAUSE_006B.N+1
  1668 17F5 20 23 11			jsr SYSTEM.PAUSE_006B
  1669 17F8			@exit
  1670 					.ifdef @new
  1671 					lda <@VarData
  1672 					sta :ztmp
  1673 					lda >@VarData
  1674 					ldy #@VarDataSize-1
  1675 					jmp @FreeMem
  1676 					els
  1677 17F8 60				rts						; ret
  1678 					eif
  1679 				.endl
  1680 17F9			l_0007
  1681
  1682 				; --- RepeatUntilProlog
  1683 17F9			l_06D0
  1684
  1685 				; optimize FAIL ('MAINLOOP', main.pas), line = 108
  1686
  1687 17F9 20 A9 16			jsr MAINLOOP
  1688 17FC 4C F9 17			jmp l_06D0
  1689
  1690 				; ------------------------------------------------------------
  1691
  1692 = 0800			ATTRIBUTE_ADDR	= $0800
  1693 = 0C00			SCREEN_ADDR	= $0C00
  1694 = 0020			EMPTY	= $20
  1695 = 00A0			WALL	= $A0
  1696 = 0041			WALL_COLOUR	= $41
  1697 = 0051			PLY_HEAD	= $51
  1698 = 0057			PLY_CRASH	= $57
  1699 = 0042			PLY_TAIL_UD	= $42
  1700 = 0040			PLY_TAIL_LR	= $40
  1701 = 007D			PLY_TAIL_RD	= $7D
  1702 = 006E			PLY_TAIL_RU	= $6E
  1703 = 006D			PLY_TAIL_LD	= $6D
  1704 = 0070			PLY_TAIL_LU	= $70
  1705 = 005F			PLY1_COLOUR	= $5F
  1706 = 005D			PLY2_COLOUR	= $5D
  1707 = 0071			PLY3_COLOUR	= $71
  1708 = 0055			PLY4_COLOUR	= $55
  1709 = 0001			JOY_UP	= $01
  1710 = 0002			JOY_DOWN	= $02
  1711 = 0004			JOY_LEFT	= $04
  1712 = 0008			JOY_RIGHT	= $08
  1713 = 0040			JOY_FIRE	= $40
  1714 = 0002			JOY_SELECT_1	= $02
  1715 = 0004			JOY_SELECT_2	= $04
  1716 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1717 17FF			.var MUL40	= adr.MUL40 .word
  1718 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1719 17FF			.var DIRECTION	= adr.DIRECTION .word
  1720 = FD30			KEY_PIO	= $FD30
  1721 = FF08			JOY	= $FF08
  1722 = FF15			BORDERCOLOR	= $FF15
  1723 = FF19			BGCOLOR	= $FF19
  1724 = 0058			T0B	= $58
  1725 = 0059			NEWDIR	= $59
  1726 = 005A			T0N	= $5A
  1727 = 005B			T0W	= $5B
  1728 = 1820			AVAILDIR	= DATAORIGIN+$0010
  1729 = 1821			ALIVE	= DATAORIGIN+$0011
  1730 = 1822			SPEED	= DATAORIGIN+$0012
  1731 = 1823			PLY	= DATAORIGIN+$0013
  1732 = 1810			PLY.X	= DATAORIGIN+$0000
  1733 = 1811			PLY.Y	= DATAORIGIN+$0001
  1734 = 1812			PLY.HEAD	= DATAORIGIN+$0002
  1735 = 1813			PLY.COLOUR	= DATAORIGIN+$0003
  1736 = 1814			PLY.DIR	= DATAORIGIN+$0004
  1737 = 1815			PLY.BRAIN	= DATAORIGIN+$0005
  1738 = 1816			PLY.ISDEAD	= DATAORIGIN+$0006
  1739 = 1825			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1740 17FF			.var PLAYER1	= adr.PLAYER1 .word
  1741 = 1825			PLAYER1.X	= DATAORIGIN+$0015
  1742 = 1826			PLAYER1.Y	= DATAORIGIN+$0016
  1743 = 1827			PLAYER1.HEAD	= DATAORIGIN+$0017
  1744 = 1828			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1745 = 1829			PLAYER1.DIR	= DATAORIGIN+$0019
  1746 = 182A			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1747 = 182B			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1748 = 182C			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1749 17FF			.var PLAYER2	= adr.PLAYER2 .word
  1750 = 182C			PLAYER2.X	= DATAORIGIN+$001C
  1751 = 182D			PLAYER2.Y	= DATAORIGIN+$001D
  1752 = 182E			PLAYER2.HEAD	= DATAORIGIN+$001E
  1753 = 182F			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1754 = 1830			PLAYER2.DIR	= DATAORIGIN+$0020
  1755 = 1831			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1756 = 1832			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1757 = 1833			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1758 17FF			.var PLAYER3	= adr.PLAYER3 .word
  1759 = 1833			PLAYER3.X	= DATAORIGIN+$0023
  1760 = 1834			PLAYER3.Y	= DATAORIGIN+$0024
  1761 = 1835			PLAYER3.HEAD	= DATAORIGIN+$0025
  1762 = 1836			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1763 = 1837			PLAYER3.DIR	= DATAORIGIN+$0027
  1764 = 1838			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1765 = 1839			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1766 = 183A			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1767 17FF			.var PLAYER4	= adr.PLAYER4 .word
  1768 = 183A			PLAYER4.X	= DATAORIGIN+$002A
  1769 = 183B			PLAYER4.Y	= DATAORIGIN+$002B
  1770 = 183C			PLAYER4.HEAD	= DATAORIGIN+$002C
  1771 = 183D			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1772 = 183E			PLAYER4.DIR	= DATAORIGIN+$002E
  1773 = 183F			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1774 = 1840			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1775 17FF			@exit
  1776
  1777 17FF A2 00		@halt	ldx #$00
  1778 1801 9A				txs
  1779
  1780 1802 60				rts
  1781
  1782 				; ------------------------------------------------------------
  1783
  1784 				; ------------------------------------------------------------
  1785
  1786 1803			.local	@DEFINES
  1787 1803			C4P
  1788 				.endl
  1789
  1790 1803			.local	@RESOURCE
  1791 				.endl
  1792
  1793 = 1803 0E 10		MUL40
  1793 = 1805 40 10		DIRECTION
  1793 = 1807 25 18		PLAYER1
  1793 = 1809 2C 18		PLAYER2
  1793 = 180B 33 18		PLAYER3
  1793 = 180D 3A 18		PLAYER4
  1793 				.endl							; MAIN
  1794
  1795 				; ------------------------------------------------------------
  1796 				; ------------------------------------------------------------
  1797
  1798 				.macro	UNITINITIALIZATION
  1799 				
  1800 					.ifdef MAIN.SYSTEM.@UnitInit
  1801 					jsr MAIN.SYSTEM.@UnitInit
  1802 					eif
  1803 				.endm
  1804
  1805 				; ------------------------------------------------------------
  1806
  1807 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1808 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1808 				SYSTEM: $10D5..$1170
  1809 					eif
  1810
  1811 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1811 				CODE: $100E..$1802
  1812
  1813 				; ------------------------------------------------------------
  1814
  1815 180F				.align $04
  1816
  1817 1810			DATAORIGIN
  1818 1810 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1819
  1820 = 0006			VARINITSIZE	= *-DATAORIGIN
  1821 = 0048			VARDATASIZE	= 72
  1822
  1823 = 1858			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1824
  1825 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1825 				DATA: $1810..$1858
  1826
  1827 				; ------------------------------------------------------------
  1828
  1829 				.macro	STATICDATA
  1830 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1831 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1832 				.by  $C0 $03 $01 $02 $04 $08
  1833 				.endm
  1834
  1835 					end
