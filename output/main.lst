mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 0B 19			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0044			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1922			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BC			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 66 18 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 66 85 02 A9 19 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C AC 18			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 27 19		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 27 19 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1927			RESULT	= DATAORIGIN+$000B
   182
   183 = 1927			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 28 19		loop  lda n
   307 1126 0D 29 19		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 28 19 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1928			N	= DATAORIGIN+$000C
   321
   322 = 1928			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 2A 19			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 2A 19		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 2B 19		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 2B 19 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 192A			RANGE	= DATAORIGIN+$000E
   383 = 192B			RESULT	= DATAORIGIN+$000F
   384
   385 = 192A			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 191C			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 191E			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1920			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1921			FILEMODE	= DATAORIGIN+$0005
   450 = 1922			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1923			IORESULT	= DATAORIGIN+$0007
   452 = 1924			EOLN	= DATAORIGIN+$0008
   453 = 1925			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 5
   460
   461 1171 AD 50 19			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D 4F 19			add X
   466 117D 85 5B			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5C			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 6
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5B			ldy T0W
   475 118A AD 52 19			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5C			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD 51 19			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 194F			X	= DATAORIGIN+$0033
   486 = 1950			Y	= DATAORIGIN+$0034
   487 = 1951			V	= DATAORIGIN+$0035
   488 = 1952			C	= DATAORIGIN+$0036
   489
   490 = 194F			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	SHOWSCORE					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 13
   508
   509 119C AD 32 19			lda PLAYER1.COLOUR
   510 119F 8D 52 19			sta PUTCHAR.C
   511 11A2 AD 35 19			lda PLAYER1.SCORE
   512 11A5 8D 51 19			sta PUTCHAR.V
   513 11A8 A9 00			lda #$00
   514 11AA 8D 50 19			sta PUTCHAR.Y
   515 11AD A9 1E			lda #$1E
   516 11AF 8D 4F 19			sta PUTCHAR.X
   517 11B2 20 71 11			jsr PUTCHAR
   518
   519 				; optimize OK (tools.inc), line = 14
   520
   521 11B5 AD 3A 19			lda PLAYER2.COLOUR
   522 11B8 8D 52 19			sta PUTCHAR.C
   523 11BB AD 3D 19			lda PLAYER2.SCORE
   524 11BE 8D 51 19			sta PUTCHAR.V
   525 11C1 A9 00			lda #$00
   526 11C3 8D 50 19			sta PUTCHAR.Y
   527 11C6 A9 20			lda #$20
   528 11C8 8D 4F 19			sta PUTCHAR.X
   529 11CB 20 71 11			jsr PUTCHAR
   530
   531 				; optimize OK (tools.inc), line = 15
   532
   533 11CE AD 42 19			lda PLAYER3.COLOUR
   534 11D1 8D 52 19			sta PUTCHAR.C
   535 11D4 AD 45 19			lda PLAYER3.SCORE
   536 11D7 8D 51 19			sta PUTCHAR.V
   537 11DA A9 00			lda #$00
   538 11DC 8D 50 19			sta PUTCHAR.Y
   539 11DF A9 22			lda #$22
   540 11E1 8D 4F 19			sta PUTCHAR.X
   541 11E4 20 71 11			jsr PUTCHAR
   542
   543 				; optimize OK (tools.inc), line = 16
   544
   545 11E7 AD 4A 19			lda PLAYER4.COLOUR
   546 11EA 8D 52 19			sta PUTCHAR.C
   547 11ED AD 4D 19			lda PLAYER4.SCORE
   548 11F0 8D 51 19			sta PUTCHAR.V
   549 11F3 A9 00			lda #$00
   550 11F5 8D 50 19			sta PUTCHAR.Y
   551 11F8 A9 24			lda #$24
   552 11FA 8D 4F 19			sta PUTCHAR.X
   553 11FD 20 71 11			jsr PUTCHAR
   554 1200			@exit
   555 					.ifdef @new
   556 					lda <@VarData
   557 					sta :ztmp
   558 					lda >@VarData
   559 					ldy #@VarDataSize-1
   560 					jmp @FreeMem
   561 					els
   562 1200 60				rts						; ret
   563 					eif
   564 				.endl
   565
   566 1201			.local	CHECKAVAILDIR					; PROCEDURE
   567
   568 				; optimize OK (tools.inc), line = 23
   569
   570 1201 A9 00			lda #$00
   571 1203 85 5A			sta AVAILDIR
   572
   573 				; optimize OK (tools.inc), line = 24
   574
   575 1205 AD 54 19			lda Y
   576 1208 0A				asl @
   577 1209 A8				tay
   578 120A B9 0E 10			lda adr.MUL40,y
   579 120D 18 6D 53 19			add X
   580 1211 85 5B			sta T0W
   581 1213 B9 0F 10			lda adr.MUL40+1,y
   582 1216 69 0C			adc #$0C
   583 1218 85 5C			sta T0W+1
   584
   585 				; optimize OK (tools.inc), line = 26
   586
   587 121A A5 5B			lda T0W
   588 121C 38 E9 28			sub #$28
   589 121F 85 21			sta :STACKORIGIN+9
   590 1221 A5 5C			lda T0W+1
   591 1223 E9 00			sbc #$00
   592 1225 85 11			sta :bp+1
   593 1227 A4 21			ldy :STACKORIGIN+9
   594 1229 B1 10			lda (:bp),y
   595 122B C9 20			cmp #$20
   596 122D D0 06			jne l_00EE
   597 122F A5 5A			lda AVAILDIR
   598 1231 09 01			ora #$01
   599 1233 85 5A			sta AVAILDIR
   600 1235			l_00EE
   601
   602 				; optimize OK (tools.inc), line = 27
   603
   604 1235 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   605 123D A0 28			ldy #$28
   606 123F B1 12			lda (:bp2),y
   607 1241 C9 20			cmp #$20
   608 1243 D0 06			jne l_0111
   609 1245 A5 5A			lda AVAILDIR
   610 1247 09 02			ora #$02
   611 1249 85 5A			sta AVAILDIR
   612 124B			l_0111
   613
   614 				; optimize OK (tools.inc), line = 28
   615
   616 124B A5 5B			lda T0W
   617 124D 38 E9 01			sub #$01
   618 1250 85 21			sta :STACKORIGIN+9
   619 1252 A5 5C			lda T0W+1
   620 1254 E9 00			sbc #$00
   621 1256 85 11			sta :bp+1
   622 1258 A4 21			ldy :STACKORIGIN+9
   623 125A B1 10			lda (:bp),y
   624 125C C9 20			cmp #$20
   625 125E D0 06			jne l_0134
   626 1260 A5 5A			lda AVAILDIR
   627 1262 09 04			ora #$04
   628 1264 85 5A			sta AVAILDIR
   629 1266			l_0134
   630
   631 				; optimize OK (tools.inc), line = 29
   632
   633 1266 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   634 126E A0 01			ldy #$01
   635 1270 B1 12			lda (:bp2),y
   636 1272 C9 20			cmp #$20
   637 1274 D0 06			jne l_0157
   638 1276 A5 5A			lda AVAILDIR
   639 1278 09 08			ora #$08
   640 127A 85 5A			sta AVAILDIR
   641 127C			l_0157
   642
   643 				; ------------------------------------------------------------
   644
   645 = 1953			X	= DATAORIGIN+$0037
   646 = 1954			Y	= DATAORIGIN+$0038
   647
   648 = 1953			@VarData	= X
   649 = 0002			@VarDataSize	= 2
   650
   651 127C			@exit
   652 					.ifdef @new
   653 					lda <@VarData
   654 					sta :ztmp
   655 					lda >@VarData
   656 					ldy #@VarDataSize-1
   657 					jmp @FreeMem
   658 					els
   659 127C 60				rts						; ret
   660 					eif
   661 				.endl
   662
   663 127D			.local	INITPLAYERS					; PROCEDURE
   664
   665 				; optimize OK (init.inc), line = 5
   666
   667 127D AD 55 19			lda P
   668 1280 8D 12 19			sta PLY
   669 1283 85 12			sta :bp2
   670 1285 AD 56 19			lda P+1
   671 1288 8D 13 19			sta PLY+1
   672 128B 85 13			sta :bp2+1
   673 				; optimize OK (init.inc), line = 6
   674 128D A0 05			ldy #PLY.BRAIN-DATAORIGIN
   675 128F AD 5A 19			lda BRAIN
   676 1292 91 12			sta (:bp2),y
   677 1294 A0 00			ldy #PLY.X-DATAORIGIN
   678 1296 AD 57 19			lda X
   679 1299 91 12			sta (:bp2),y
   680 129B A0 01			ldy #PLY.Y-DATAORIGIN
   681 129D AD 58 19			lda Y
   682 12A0 91 12			sta (:bp2),y
   683 12A2 A0 04			ldy #PLY.DIR-DATAORIGIN
   684 12A4 AD 59 19			lda DIR
   685 12A7 91 12			sta (:bp2),y
   686
   687 				; optimize OK (init.inc), line = 7
   688
   689 12A9 A0 02			ldy #PLY.HEAD-DATAORIGIN
   690 12AB AD 5B 19			lda HEAD
   691 12AE 91 12			sta (:bp2),y
   692 12B0 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   693 12B2 AD 5C 19			lda COLOUR
   694 12B5 91 12			sta (:bp2),y
   695 12B7 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
   696 12B9 AD 5D 19			lda ISDEAD
   697 12BC 91 12			sta (:bp2),y
   698
   699 				; ------------------------------------------------------------
   700
   701 = 1955			P	= DATAORIGIN+$0039
   702 = 1957			X	= DATAORIGIN+$003B
   703 = 1958			Y	= DATAORIGIN+$003C
   704 = 1959			DIR	= DATAORIGIN+$003D
   705 = 195A			BRAIN	= DATAORIGIN+$003E
   706 = 195B			HEAD	= DATAORIGIN+$003F
   707 = 195C			COLOUR	= DATAORIGIN+$0040
   708 = 195D			ISDEAD	= DATAORIGIN+$0041
   709
   710 = 1955			@VarData	= P
   711 = 0009			@VarDataSize	= 9
   712
   713 12BE			@exit
   714 					.ifdef @new
   715 					lda <@VarData
   716 					sta :ztmp
   717 					lda >@VarData
   718 					ldy #@VarDataSize-1
   719 					jmp @FreeMem
   720 					els
   721 12BE 60				rts						; ret
   722 					eif
   723 				.endl
   724
   725 12BF			.local	INITPLAYFIELD					; PROCEDURE
   726
   727 				; optimize OK (init.inc), line = 14
   728
   729 12BF A9 00			lda #$00
   730 12C1 8D 5D 19			sta INITPLAYERS.ISDEAD
   731 12C4 A9 5F			lda #$5F
   732 12C6 8D 5C 19			sta INITPLAYERS.COLOUR
   733 12C9 A9 51			lda #$51
   734 12CB 8D 5B 19			sta INITPLAYERS.HEAD
   735 12CE A9 03			lda #$03
   736 12D0 8D 5A 19			sta INITPLAYERS.BRAIN
   737 12D3 A9 08			lda #$08
   738 12D5 8D 59 19			sta INITPLAYERS.DIR
   739 12D8 A9 0C			lda #$0C
   740 12DA 8D 58 19			sta INITPLAYERS.Y
   741 12DD A9 0A			lda #$0A
   742 12DF 8D 57 19			sta INITPLAYERS.X
   743 12E2 AD 14 19			lda PLAYER1
   744 12E5 8D 55 19			sta INITPLAYERS.P
   745 12E8 AD 15 19			lda PLAYER1+1
   746 12EB 8D 56 19			sta INITPLAYERS.P+1
   747 12EE 20 7D 12			jsr INITPLAYERS
   748
   749 				; optimize OK (init.inc), line = 15
   750
   751 12F1 A9 00			lda #$00
   752 12F3 8D 5D 19			sta INITPLAYERS.ISDEAD
   753 12F6 A9 5D			lda #$5D
   754 12F8 8D 5C 19			sta INITPLAYERS.COLOUR
   755 12FB A9 51			lda #$51
   756 12FD 8D 5B 19			sta INITPLAYERS.HEAD
   757 1300 A9 02			lda #$02
   758 1302 8D 5A 19			sta INITPLAYERS.BRAIN
   759 1305 A9 04			lda #$04
   760 1307 8D 59 19			sta INITPLAYERS.DIR
   761 130A A9 0C			lda #$0C
   762 130C 8D 58 19			sta INITPLAYERS.Y
   763 130F A9 1E			lda #$1E
   764 1311 8D 57 19			sta INITPLAYERS.X
   765 1314 AD 16 19			lda PLAYER2
   766 1317 8D 55 19			sta INITPLAYERS.P
   767 131A AD 17 19			lda PLAYER2+1
   768 131D 8D 56 19			sta INITPLAYERS.P+1
   769 1320 20 7D 12			jsr INITPLAYERS
   770
   771 				; optimize OK (init.inc), line = 16
   772
   773 1323 A9 00			lda #$00
   774 1325 8D 5D 19			sta INITPLAYERS.ISDEAD
   775 1328 A9 71			lda #$71
   776 132A 8D 5C 19			sta INITPLAYERS.COLOUR
   777 132D A9 51			lda #$51
   778 132F 8D 5B 19			sta INITPLAYERS.HEAD
   779 1332 A9 01			lda #$01
   780 1334 8D 5A 19			sta INITPLAYERS.BRAIN
   781 1337 A9 02			lda #$02
   782 1339 8D 59 19			sta INITPLAYERS.DIR
   783 133C A9 06			lda #$06
   784 133E 8D 58 19			sta INITPLAYERS.Y
   785 1341 A9 14			lda #$14
   786 1343 8D 57 19			sta INITPLAYERS.X
   787 1346 AD 18 19			lda PLAYER3
   788 1349 8D 55 19			sta INITPLAYERS.P
   789 134C AD 19 19			lda PLAYER3+1
   790 134F 8D 56 19			sta INITPLAYERS.P+1
   791 1352 20 7D 12			jsr INITPLAYERS
   792
   793 				; optimize OK (init.inc), line = 17
   794
   795 1355 A9 00			lda #$00
   796 1357 8D 5D 19			sta INITPLAYERS.ISDEAD
   797 135A A9 55			lda #$55
   798 135C 8D 5C 19			sta INITPLAYERS.COLOUR
   799 135F A9 51			lda #$51
   800 1361 8D 5B 19			sta INITPLAYERS.HEAD
   801 1364 A9 03			lda #$03
   802 1366 8D 5A 19			sta INITPLAYERS.BRAIN
   803 1369 A9 01			lda #$01
   804 136B 8D 59 19			sta INITPLAYERS.DIR
   805 136E A9 12			lda #$12
   806 1370 8D 58 19			sta INITPLAYERS.Y
   807 1373 A9 14			lda #$14
   808 1375 8D 57 19			sta INITPLAYERS.X
   809 1378 AD 1A 19			lda PLAYER4
   810 137B 8D 55 19			sta INITPLAYERS.P
   811 137E AD 1B 19			lda PLAYER4+1
   812 1381 8D 56 19			sta INITPLAYERS.P+1
   813 1384 20 7D 12			jsr INITPLAYERS
   814
   815 				; optimize OK (init.inc), line = 19
   816
   817 1387 A9 1F			lda #$1F
   818 1389 8D 15 FF			sta BORDERCOLOR
   819 138C A9 00			lda #$00
   820 138E 8D 19 FF			sta BGCOLOR
   821
   822 				; optimize OK (init.inc), line = 20
   823
   824 1391 A9 20			lda #$20
   825 1393 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   826 1395 A9 C0			lda #$C0
   827 1397 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   828 1399 A9 03			lda #$03
   829 139B 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   830 139D A9 00			lda #$00
   831 139F 85 08			sta SYSTEM.FILLCHAR_0056.A
   832 13A1 A9 0C			lda #$0C
   833 13A3 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   834 13A5 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   835
   836 				; optimize OK (init.inc), line = 22
   837
   838 13A8 A9 27			lda #$27
   839 13AA 85 58			sta T0B
   840
   841 13AC			l_01D8
   842 				; --- ForToDoCondition
   843
   844 				; optimize OK (init.inc), line = 23
   845
   846 13AC A4 58			ldy T0B
   847 13AE A9 A0			lda #$A0
   848 13B0 99 00 0C			sta $0C00,y
   849
   850 				; optimize OK (init.inc), line = 24
   851
   852 13B3 99 C0 0F			sta $0FC0,y
   853
   854 				; optimize OK (init.inc), line = 25
   855
   856 13B6 A9 41			lda #$41
   857 13B8 99 00 08			sta $0800,y
   858
   859 				; optimize OK (init.inc), line = 26
   860
   861 13BB 99 C0 0B			sta $0BC0,y
   862
   863 				; --- ForToDoEpilog
   864 13BE C6 58			dec T0B
   865 13C0 10 EA			jpl l_01D8
   866 13C2			l_01E6
   867
   868 				; optimize OK (init.inc), line = 29
   869
   870 13C2 A9 18			lda #$18
   871 13C4 85 58			sta T0B
   872
   873 13C6			l_0218
   874 				; --- ForToDoCondition
   875 13C6 A5 58			lda T0B
   876 13C8 C9 01			cmp #$01
   877 13CA 90 3A			jcc l_0226
   878
   879 				; optimize OK (init.inc), line = 30
   880
   881 13CC 0A				asl @
   882 13CD A8				tay
   883 13CE A9 FF			lda #$FF
   884 13D0 18 79 0E 10			add adr.MUL40,y
   885 13D4 85 12			sta :bp2
   886 13D6 A9 0B			lda #$0B
   887 13D8 79 0F 10			adc adr.MUL40+1,y
   888 13DB 85 13			sta :bp2+1
   889 13DD A0 00			ldy #$00
   890 13DF A9 A0			lda #$A0
   891 13E1 91 12			sta (:bp2),y
   892 13E3 C8				iny
   893 13E4 91 12			sta (:bp2),y
   894
   895 				; optimize OK (init.inc), line = 31
   896
   897 13E6 A5 58			lda T0B
   898 13E8 0A				asl @
   899 13E9 A8				tay
   900 13EA A9 FF			lda #$FF
   901 13EC 18 79 0E 10			add adr.MUL40,y
   902 13F0 85 12			sta :bp2
   903 13F2 A9 07			lda #$07
   904 13F4 79 0F 10			adc adr.MUL40+1,y
   905 13F7 85 13			sta :bp2+1
   906 13F9 A0 00			ldy #$00
   907 13FB A9 41			lda #$41
   908 13FD 91 12			sta (:bp2),y
   909 13FF C8				iny
   910 1400 91 12			sta (:bp2),y
   911
   912 				; --- ForToDoEpilog
   913 1402 C6 58			dec T0B
   914 1404 10 C0			jpl l_0218
   915 1406			l_0226
   916
   917 				; optimize OK (init.inc), line = 34
   918
   919 1406 AD 32 19			lda PLAYER1.COLOUR
   920 1409 8D 52 19			sta PUTCHAR.C
   921 140C AD 31 19			lda PLAYER1.HEAD
   922 140F 8D 51 19			sta PUTCHAR.V
   923 1412 AD 30 19			lda PLAYER1.Y
   924 1415 8D 50 19			sta PUTCHAR.Y
   925 1418 AD 2F 19			lda PLAYER1.X
   926 141B 8D 4F 19			sta PUTCHAR.X
   927 141E 20 71 11			jsr PUTCHAR
   928
   929 				; optimize OK (init.inc), line = 35
   930
   931 1421 AD 3A 19			lda PLAYER2.COLOUR
   932 1424 8D 52 19			sta PUTCHAR.C
   933 1427 AD 39 19			lda PLAYER2.HEAD
   934 142A 8D 51 19			sta PUTCHAR.V
   935 142D AD 38 19			lda PLAYER2.Y
   936 1430 8D 50 19			sta PUTCHAR.Y
   937 1433 AD 37 19			lda PLAYER2.X
   938 1436 8D 4F 19			sta PUTCHAR.X
   939 1439 20 71 11			jsr PUTCHAR
   940
   941 				; optimize OK (init.inc), line = 36
   942
   943 143C AD 42 19			lda PLAYER3.COLOUR
   944 143F 8D 52 19			sta PUTCHAR.C
   945 1442 AD 41 19			lda PLAYER3.HEAD
   946 1445 8D 51 19			sta PUTCHAR.V
   947 1448 AD 40 19			lda PLAYER3.Y
   948 144B 8D 50 19			sta PUTCHAR.Y
   949 144E AD 3F 19			lda PLAYER3.X
   950 1451 8D 4F 19			sta PUTCHAR.X
   951 1454 20 71 11			jsr PUTCHAR
   952
   953 				; optimize OK (init.inc), line = 37
   954
   955 1457 AD 4A 19			lda PLAYER4.COLOUR
   956 145A 8D 52 19			sta PUTCHAR.C
   957 145D AD 49 19			lda PLAYER4.HEAD
   958 1460 8D 51 19			sta PUTCHAR.V
   959 1463 AD 48 19			lda PLAYER4.Y
   960 1466 8D 50 19			sta PUTCHAR.Y
   961 1469 AD 47 19			lda PLAYER4.X
   962 146C 8D 4F 19			sta PUTCHAR.X
   963 146F 20 71 11			jsr PUTCHAR
   964
   965 				; optimize FAIL ('SHOWSCORE', init.inc), line = 39
   966
   967 1472 20 9C 11			jsr SHOWSCORE
   968
   969 				; ------------------------------------------------------------
   970
   971 = 0000			@FORTMP_01D5	= $00
   972 = 0001			@FORTMP_0215	= $01
   973 1475			@exit
   974 					.ifdef @new
   975 					lda <@VarData
   976 					sta :ztmp
   977 					lda >@VarData
   978 					ldy #@VarDataSize-1
   979 					jmp @FreeMem
   980 					els
   981 1475 60				rts						; ret
   982 					eif
   983 				.endl
   984
   985 1476			.local	AISTRAIGHT					; PROCEDURE
   986
   987 				; optimize OK (ai.inc), line = 18
   988
   989 1476 AC 12 19 84 12 AC + 	mwy PLY :bp2
   990 1480 A0 04			ldy #PLY.DIR-DATAORIGIN
   991 1482 B1 12			lda (:bp2),y
   992 1484 25 5A			and AVAILDIR
   993 1486 F0 07			jeq l_0292
   994 1488 B1 12			lda (:bp2),y
   995 148A 85 59			sta NEWDIR
   996 148C 4C 06 15			jmp l_02A2
   997 148F			l_0292
   998
   999 				; optimize OK (ai.inc), line = 20
  1000
  1001 148F A5 5A			lda AVAILDIR
  1002 1491 C9 03			cmp #$03
  1003 1493 D0 16			jne l_02B4
  1004 1495 A9 00			lda #$00
  1005 1497 20 40 11			jsr SYSTEM.RANDOM_006C
  1006 149A B5 18			lda :STACKORIGIN,x
  1007 149C 29 01			and #$01
  1008 149E 95 18			sta :STACKORIGIN,x
  1009 14A0 B4 18			ldy :STACKORIGIN,x
  1010 14A2 B9 40 10			lda adr.DIRECTION,y
  1011 14A5 85 59			sta NEWDIR
  1012 14A7 CA				dex
  1013 14A8 4C C3 14			jmp l_02CA
  1014 14AB			l_02B4
  1015
  1016 				; optimize OK (ai.inc), line = 22
  1017
  1018 14AB A5 5A			lda AVAILDIR
  1019 14AD 8D 5E 19			sta @CASETMP_0003
  1020 14B0 C9 01			cmp #$01
  1021 14B2 D0 07			jne l_02D5
  1022 14B4			@
  1023
  1024 				; optimize OK (ai.inc), line = 23
  1025
  1026 14B4 A9 01			lda #$01
  1027 14B6 85 59			sta NEWDIR
  1028
  1029 14B8 4C C3 14			jmp a_0003
  1030 14BB			l_02D5
  1031 14BB C9 02			cmp #$02
  1032 14BD D0 04			jne l_02E2
  1033 14BF			@
  1034
  1035 				; optimize OK (ai.inc), line = 24
  1036
  1037 14BF A9 02			lda #$02
  1038 14C1 85 59			sta NEWDIR
  1039
  1040 14C3			l_02E2
  1041 14C3			a_0003
  1042 14C3			l_02CA
  1043
  1044 				; optimize OK (ai.inc), line = 27
  1045
  1046 14C3 A5 5A			lda AVAILDIR
  1047 14C5 C9 0C			cmp #$0C
  1048 14C7 D0 25			jne l_02FE
  1049 14C9 A9 00			lda #$00
  1050 14CB 20 40 11			jsr SYSTEM.RANDOM_006C
  1051 14CE B5 18			lda :STACKORIGIN,x
  1052 14D0 29 01			and #$01
  1053 14D2 95 18			sta :STACKORIGIN,x
  1054 14D4 E8				inx
  1055 14D5 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1056 14D9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1057 14DD 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1058 14DF 20 44 10			jsr addAX_CX
  1059 14E2 CA				dex
  1060 14E3 B4 18			ldy :STACKORIGIN,x
  1061 14E5 B9 40 10			lda adr.DIRECTION,y
  1062 14E8 85 59			sta NEWDIR
  1063 14EA CA				dex
  1064 14EB 4C 06 15			jmp l_0318
  1065 14EE			l_02FE
  1066
  1067 				; optimize OK (ai.inc), line = 29
  1068
  1069 14EE A5 5A			lda AVAILDIR
  1070 14F0 8D 5F 19			sta @CASETMP_0004
  1071 14F3 C9 04			cmp #$04
  1072 14F5 D0 07			jne l_0323
  1073 14F7			@
  1074
  1075 				; optimize OK (ai.inc), line = 30
  1076
  1077 14F7 A9 04			lda #$04
  1078 14F9 85 59			sta NEWDIR
  1079
  1080 14FB 4C 06 15			jmp a_0004
  1081 14FE			l_0323
  1082 14FE C9 08			cmp #$08
  1083 1500 D0 04			jne l_0330
  1084 1502			@
  1085
  1086 				; optimize OK (ai.inc), line = 31
  1087
  1088 1502 A9 08			lda #$08
  1089 1504 85 59			sta NEWDIR
  1090
  1091 1506			l_0330
  1092 1506			a_0004
  1093 1506			l_0318
  1094 1506			l_02A2
  1095
  1096 				; ------------------------------------------------------------
  1097
  1098 = 195E			@CASETMP_0003	= DATAORIGIN+$0042
  1099 = 195F			@CASETMP_0004	= DATAORIGIN+$0043
  1100
  1101 = 195E			@VarData	= @CASETMP_0003
  1102 = 0002			@VarDataSize	= 2
  1103
  1104 1506			@exit
  1105 					.ifdef @new
  1106 					lda <@VarData
  1107 					sta :ztmp
  1108 					lda >@VarData
  1109 					ldy #@VarDataSize-1
  1110 					jmp @FreeMem
  1111 					els
  1112 1506 60				rts						; ret
  1113 					eif
  1114 				.endl
  1115
  1116 1507			.local	AIMIRROR					; PROCEDURE
  1117
  1118 				; optimize OK (ai.inc), line = 41
  1119
  1120 1507 AD 33 19			lda PLAYER1.DIR
  1121 150A 8D 60 19			sta @CASETMP_0005
  1122 150D C9 01			cmp #$01
  1123 150F D0 07			jne l_0349
  1124 1511			@
  1125
  1126 				; optimize OK (ai.inc), line = 42
  1127
  1128 1511 A9 02			lda #$02
  1129 1513 85 58			sta T0B
  1130
  1131 1515 4C 36 15			jmp a_0005
  1132 1518			l_0349
  1133 1518 C9 02			cmp #$02
  1134 151A D0 07			jne l_0356
  1135 151C			@
  1136
  1137 				; optimize OK (ai.inc), line = 43
  1138
  1139 151C A9 01			lda #$01
  1140 151E 85 58			sta T0B
  1141
  1142 1520 4C 36 15			jmp a_0005
  1143 1523			l_0356
  1144 1523 C9 04			cmp #$04
  1145 1525 D0 07			jne l_0363
  1146 1527			@
  1147
  1148 				; optimize OK (ai.inc), line = 44
  1149
  1150 1527 A9 08			lda #$08
  1151 1529 85 58			sta T0B
  1152
  1153 152B 4C 36 15			jmp a_0005
  1154 152E			l_0363
  1155 152E C9 08			cmp #$08
  1156 1530 D0 04			jne l_0370
  1157 1532			@
  1158
  1159 				; optimize OK (ai.inc), line = 45
  1160
  1161 1532 A9 04			lda #$04
  1162 1534 85 58			sta T0B
  1163
  1164 1536			l_0370
  1165 1536			a_0005
  1166
  1167 				; optimize OK (ai.inc), line = 48
  1168
  1169 1536 A5 5A			lda AVAILDIR
  1170 1538 25 58			and T0B
  1171 153A F0 07			jeq l_0394
  1172 153C A5 58			lda T0B
  1173 153E 85 59			sta NEWDIR
  1174 1540 4C 46 15			jmp l_03A4
  1175 1543			l_0394
  1176
  1177 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 49
  1178
  1179 1543 20 76 14			jsr AISTRAIGHT
  1180 1546			l_03A4
  1181
  1182 				; ------------------------------------------------------------
  1183
  1184 = 1960			@CASETMP_0005	= DATAORIGIN+$0044
  1185
  1186 = 1960			@VarData	= @CASETMP_0005
  1187 = 0001			@VarDataSize	= 1
  1188
  1189 1546			@exit
  1190 					.ifdef @new
  1191 					lda <@VarData
  1192 					sta :ztmp
  1193 					lda >@VarData
  1194 					ldy #@VarDataSize-1
  1195 					jmp @FreeMem
  1196 					els
  1197 1546 60				rts						; ret
  1198 					eif
  1199 				.endl
  1200
  1201 1547			.local	AIRANDOM					; PROCEDURE
  1202
  1203 				; optimize OK (ai.inc), line = 56
  1204
  1205 1547 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1206 1551 A0 04			ldy #PLY.DIR-DATAORIGIN
  1207 1553 B1 12			lda (:bp2),y
  1208 1555 85 58			sta T0B
  1209
  1210 				; optimize OK (ai.inc), line = 57
  1211
  1212 1557 A9 00			lda #$00
  1213 1559 20 40 11			jsr SYSTEM.RANDOM_006C
  1214 155C CA				dex
  1215 155D B5 19			lda :STACKORIGIN+1,x
  1216 155F 29 03			and #$03
  1217 1561 D0 0D			jne l_03C4
  1218 1563			@
  1219 1563 A9 04			lda #$04
  1220 1565 20 40 11			jsr SYSTEM.RANDOM_006C
  1221 1568 B4 18			ldy :STACKORIGIN,x
  1222 156A B9 40 10			lda adr.DIRECTION,y
  1223 156D 85 58			sta T0B
  1224 156F CA				dex
  1225 1570			l_03C4
  1226
  1227 				; optimize OK (ai.inc), line = 59
  1228
  1229 1570 A5 5A			lda AVAILDIR
  1230 1572 25 58			and T0B
  1231 1574 F0 07			jeq l_03E7
  1232 1576 A5 58			lda T0B
  1233 1578 85 59			sta NEWDIR
  1234 157A 4C 80 15			jmp l_03F7
  1235 157D			l_03E7
  1236
  1237 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 60
  1238
  1239 157D 20 76 14			jsr AISTRAIGHT
  1240 1580			l_03F7
  1241 1580			@exit
  1242 					.ifdef @new
  1243 					lda <@VarData
  1244 					sta :ztmp
  1245 					lda >@VarData
  1246 					ldy #@VarDataSize-1
  1247 					jmp @FreeMem
  1248 					els
  1249 1580 60				rts						; ret
  1250 					eif
  1251 				.endl
  1252
  1253 1581			.local	HUMAN						; PROCEDURE
  1254
  1255 				; optimize OK (main.pas), line = 14
  1256
  1257 1581 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1258 158B A0 04			ldy #PLY.DIR-DATAORIGIN
  1259 158D B1 12			lda (:bp2),y
  1260 158F 85 59			sta NEWDIR
  1261
  1262 				; optimize OK (main.pas), line = 15
  1263
  1264 1591 A9 02			lda #$02
  1265 1593 8D 08 FF			sta JOY
  1266 1596 A9 FF			lda #$FF
  1267 1598 8D 30 FD			sta KEY_PIO
  1268 159B AD 08 FF			lda JOY
  1269 159E 49 FF			eor #$FF
  1270 15A0 85 58			sta T0B
  1271
  1272 				; optimize OK (main.pas), line = 17
  1273
  1274 15A2 8D 61 19			sta @CASETMP_0006
  1275 15A5 C9 01			cmp #$01
  1276 15A7 D0 19			jne l_041F
  1277 15A9			@
  1278
  1279 				; optimize OK (main.pas), line = 18
  1280
  1281 15A9 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1282 15B3 A0 04			ldy #PLY.DIR-DATAORIGIN
  1283 15B5 B1 12			lda (:bp2),y
  1284 15B7 C9 02			cmp #$02
  1285 15B9 F0 04			jeq l_0431
  1286 15BB A9 01			lda #$01
  1287 15BD 85 59			sta NEWDIR
  1288 15BF			l_0431
  1289
  1290 15BF 4C 16 16			jmp a_0006
  1291 15C2			l_041F
  1292 15C2 C9 02			cmp #$02
  1293 15C4 D0 19			jne l_0441
  1294 15C6			@
  1295
  1296 				; optimize OK (main.pas), line = 19
  1297
  1298 15C6 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1299 15D0 A0 04			ldy #PLY.DIR-DATAORIGIN
  1300 15D2 B1 12			lda (:bp2),y
  1301 15D4 C9 01			cmp #$01
  1302 15D6 F0 04			jeq l_0453
  1303 15D8 A9 02			lda #$02
  1304 15DA 85 59			sta NEWDIR
  1305 15DC			l_0453
  1306
  1307 15DC 4C 16 16			jmp a_0006
  1308 15DF			l_0441
  1309 15DF C9 04			cmp #$04
  1310 15E1 D0 19			jne l_0463
  1311 15E3			@
  1312
  1313 				; optimize OK (main.pas), line = 20
  1314
  1315 15E3 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1316 15ED A0 04			ldy #PLY.DIR-DATAORIGIN
  1317 15EF B1 12			lda (:bp2),y
  1318 15F1 C9 08			cmp #$08
  1319 15F3 F0 04			jeq l_0475
  1320 15F5 A9 04			lda #$04
  1321 15F7 85 59			sta NEWDIR
  1322 15F9			l_0475
  1323
  1324 15F9 4C 16 16			jmp a_0006
  1325 15FC			l_0463
  1326 15FC C9 08			cmp #$08
  1327 15FE D0 16			jne l_0485
  1328 1600			@
  1329
  1330 				; optimize OK (main.pas), line = 21
  1331
  1332 1600 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1333 160A A0 04			ldy #PLY.DIR-DATAORIGIN
  1334 160C B1 12			lda (:bp2),y
  1335 160E C9 04			cmp #$04
  1336 1610 F0 04			jeq l_0497
  1337 1612 A9 08			lda #$08
  1338 1614 85 59			sta NEWDIR
  1339 1616			l_0497
  1340
  1341 1616			l_0485
  1342 1616			a_0006
  1343
  1344 				; optimize OK (main.pas), line = 24
  1345
  1346 1616 A5 59			lda NEWDIR
  1347 1618 25 5A			and AVAILDIR
  1348 161A D0 19			jne l_04BE
  1349
  1350 				; optimize OK (main.pas), line = 25
  1351
  1352 161C AC 12 19 84 12 AC + 	mwy PLY :bp2
  1353 1626 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1354 1628 A9 01			lda #$01
  1355 162A 91 12			sta (:bp2),y
  1356 162C A0 02			ldy #PLY.HEAD-DATAORIGIN
  1357 162E A9 57			lda #$57
  1358 1630 91 12			sta (:bp2),y
  1359 1632 CE 2C 19			dec ALIVE
  1360 1635			l_04BE
  1361
  1362 				; ------------------------------------------------------------
  1363
  1364 = 1961			@CASETMP_0006	= DATAORIGIN+$0045
  1365
  1366 = 1961			@VarData	= @CASETMP_0006
  1367 = 0001			@VarDataSize	= 1
  1368
  1369 1635			@exit
  1370 					.ifdef @new
  1371 					lda <@VarData
  1372 					sta :ztmp
  1373 					lda >@VarData
  1374 					ldy #@VarDataSize-1
  1375 					jmp @FreeMem
  1376 					els
  1377 1635 60				rts						; ret
  1378 					eif
  1379 				.endl
  1380
  1381 1636			.local	PLAYERMOVE					; PROCEDURE
  1382
  1383 				; optimize OK (main.pas), line = 33
  1384
  1385 1636 AD 62 19			lda P
  1386 1639 8D 12 19			sta PLY
  1387 163C 85 12			sta :bp2
  1388 163E AD 63 19			lda P+1
  1389 1641 8D 13 19			sta PLY+1
  1390 1644 85 13			sta :bp2+1
  1391 				; optimize OK (main.pas), line = 35
  1392 1646 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1393 1648 B1 12			lda (:bp2),y
  1394 164A F0 03 4C 30 18		jne l_04E5
  1395
  1396 				; optimize OK (main.pas), line = 37
  1397
  1398 164F A0 00			ldy #PLY.X-DATAORIGIN
  1399 1651 B1 12			lda (:bp2),y
  1400 1653 8D 53 19			sta CHECKAVAILDIR.X
  1401 1656 A0 01			ldy #PLY.Y-DATAORIGIN
  1402 1658 B1 12			lda (:bp2),y
  1403 165A 8D 54 19			sta CHECKAVAILDIR.Y
  1404 165D 20 01 12			jsr CHECKAVAILDIR
  1405
  1406 				; optimize OK (main.pas), line = 39
  1407
  1408 1660 A5 5A			lda AVAILDIR
  1409 1662 D0 36			jne l_04FF
  1410
  1411 				; optimize OK (main.pas), line = 40
  1412
  1413 1664 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1414 166E A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1415 1670 A9 01			lda #$01
  1416 1672 91 12			sta (:bp2),y
  1417 1674 CE 2C 19			dec ALIVE
  1418
  1419 				; optimize OK (main.pas), line = 41
  1420
  1421 1677 A0 00			ldy #PLY.X-DATAORIGIN
  1422 1679 B1 12			lda (:bp2),y
  1423 167B 8D 4F 19			sta PUTCHAR.X
  1424 167E A0 01			ldy #PLY.Y-DATAORIGIN
  1425 1680 B1 12			lda (:bp2),y
  1426 1682 8D 50 19			sta PUTCHAR.Y
  1427 1685 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1428 1687 B1 12			lda (:bp2),y
  1429 1689 18 69 80			add #$80
  1430 168C 8D 52 19			sta PUTCHAR.C
  1431 168F A9 57			lda #$57
  1432 1691 8D 51 19			sta PUTCHAR.V
  1433 1694 20 71 11			jsr PUTCHAR
  1434 1697 4C 30 18			jmp l_0520
  1435 169A			l_04FF
  1436
  1437 				; optimize OK (main.pas), line = 44
  1438
  1439 169A AC 12 19 84 12 AC + 	mwy PLY :bp2
  1440 16A4 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1441 16A6 B1 12			lda (:bp2),y
  1442 16A8 8D 64 19			sta @CASETMP_0007
  1443 16AB C9 00			cmp #$00
  1444 16AD D0 06			jne l_052B
  1445 16AF			@
  1446
  1447 				; optimize FAIL ('HUMAN', main.pas), line = 45
  1448
  1449 16AF 20 81 15			jsr HUMAN
  1450 16B2 4C D0 16			jmp a_0007
  1451 16B5			l_052B
  1452 16B5 C9 01			cmp #$01
  1453 16B7 D0 06			jne l_0535
  1454 16B9			@
  1455
  1456 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 46
  1457
  1458 16B9 20 76 14			jsr AISTRAIGHT
  1459 16BC 4C D0 16			jmp a_0007
  1460 16BF			l_0535
  1461 16BF C9 02			cmp #$02
  1462 16C1 D0 06			jne l_053F
  1463 16C3			@
  1464
  1465 				; optimize FAIL ('AIMIRROR', main.pas), line = 47
  1466
  1467 16C3 20 07 15			jsr AIMIRROR
  1468 16C6 4C D0 16			jmp a_0007
  1469 16C9			l_053F
  1470 16C9 C9 03			cmp #$03
  1471 16CB D0 03			jne l_0549
  1472 16CD			@
  1473
  1474 				; optimize FAIL ('AIRANDOM', main.pas), line = 48
  1475
  1476 16CD 20 47 15			jsr AIRANDOM
  1477 16D0			l_0549
  1478 16D0			a_0007
  1479
  1480 				; optimize OK (main.pas), line = 51
  1481
  1482 16D0 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1483 16DA A0 04			ldy #PLY.DIR-DATAORIGIN
  1484 16DC B1 12			lda (:bp2),y
  1485 16DE C5 59			cmp NEWDIR
  1486 16E0 D0 14			jne l_0566
  1487
  1488 				; optimize OK (main.pas), line = 52
  1489
  1490 16E2 A5 59			lda NEWDIR
  1491 16E4 29 0C			and #$0C
  1492 16E6 F0 07			jeq l_057D
  1493 16E8 A9 40			lda #$40
  1494 16EA 85 58			sta T0B
  1495 16EC 4C F3 16			jmp l_058B
  1496 16EF			l_057D
  1497 16EF A9 42			lda #$42
  1498 16F1 85 58			sta T0B
  1499 16F3			l_058B
  1500 16F3 4C 66 17			jmp l_0598
  1501 16F6			l_0566
  1502
  1503 				; optimize OK (main.pas), line = 54
  1504
  1505 16F6 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1506 1700 A0 04			ldy #PLY.DIR-DATAORIGIN
  1507 1702 B1 12			lda (:bp2),y
  1508 1704 29 0A			and #$0A
  1509 1706 F0 0A			jeq l_05BE
  1510 1708 A5 59			lda NEWDIR
  1511 170A 29 05			and #$05
  1512 170C F0 04			jeq l_05BE
  1513 170E A9 7D			lda #$7D
  1514 1710 85 58			sta T0B
  1515 1712			l_05BE
  1516
  1517 				; optimize OK (main.pas), line = 55
  1518
  1519 1712 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1520 171C A0 04			ldy #PLY.DIR-DATAORIGIN
  1521 171E B1 12			lda (:bp2),y
  1522 1720 29 09			and #$09
  1523 1722 F0 0A			jeq l_05EB
  1524 1724 A5 59			lda NEWDIR
  1525 1726 29 06			and #$06
  1526 1728 F0 04			jeq l_05EB
  1527 172A A9 6E			lda #$6E
  1528 172C 85 58			sta T0B
  1529 172E			l_05EB
  1530
  1531 				; optimize OK (main.pas), line = 56
  1532
  1533 172E AC 12 19 84 12 AC + 	mwy PLY :bp2
  1534 1738 A0 04			ldy #PLY.DIR-DATAORIGIN
  1535 173A B1 12			lda (:bp2),y
  1536 173C 29 06			and #$06
  1537 173E F0 0A			jeq l_0618
  1538 1740 A5 59			lda NEWDIR
  1539 1742 29 09			and #$09
  1540 1744 F0 04			jeq l_0618
  1541 1746 A9 6D			lda #$6D
  1542 1748 85 58			sta T0B
  1543 174A			l_0618
  1544
  1545 				; optimize OK (main.pas), line = 57
  1546
  1547 174A AC 12 19 84 12 AC + 	mwy PLY :bp2
  1548 1754 A0 04			ldy #PLY.DIR-DATAORIGIN
  1549 1756 B1 12			lda (:bp2),y
  1550 1758 29 05			and #$05
  1551 175A F0 0A			jeq l_0645
  1552 175C A5 59			lda NEWDIR
  1553 175E 29 0A			and #$0A
  1554 1760 F0 04			jeq l_0645
  1555 1762 A9 70			lda #$70
  1556 1764 85 58			sta T0B
  1557 1766			l_0645
  1558 1766			l_0598
  1559
  1560 				; optimize OK (main.pas), line = 59
  1561
  1562 1766 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1563 1770 A0 00			ldy #PLY.X-DATAORIGIN
  1564 1772 B1 12			lda (:bp2),y
  1565 1774 8D 4F 19			sta PUTCHAR.X
  1566 1777 A0 01			ldy #PLY.Y-DATAORIGIN
  1567 1779 B1 12			lda (:bp2),y
  1568 177B 8D 50 19			sta PUTCHAR.Y
  1569 177E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1570 1780 B1 12			lda (:bp2),y
  1571 1782 8D 52 19			sta PUTCHAR.C
  1572 1785 A5 58			lda T0B
  1573 1787 8D 51 19			sta PUTCHAR.V
  1574 178A 20 71 11			jsr PUTCHAR
  1575
  1576 				; optimize OK (main.pas), line = 61
  1577
  1578 178D AC 12 19 84 12 AC + 	mwy PLY :bp2
  1579 1797 A0 04			ldy #PLY.DIR-DATAORIGIN
  1580 1799 A5 59			lda NEWDIR
  1581 179B 91 12			sta (:bp2),y
  1582
  1583 				; optimize OK (main.pas), line = 63
  1584
  1585 179D A5 59			lda NEWDIR
  1586 179F 8D 65 19			sta @CASETMP_0008
  1587 17A2 C9 01			cmp #$01
  1588 17A4 D0 16			jne l_066A
  1589 17A6			@
  1590
  1591 				; optimize OK (main.pas), line = 64
  1592
  1593 17A6 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1594 17B0 A0 01			ldy #PLY.Y-DATAORIGIN
  1595 17B2 B1 12			lda (:bp2),y
  1596 17B4 38 E9 01			sub #$01
  1597 17B7 91 12			sta (:bp2),y
  1598
  1599 17B9 4C 07 18			jmp a_0008
  1600 17BC			l_066A
  1601 17BC C9 02			cmp #$02
  1602 17BE D0 16			jne l_0674
  1603 17C0			@
  1604
  1605 				; optimize OK (main.pas), line = 65
  1606
  1607 17C0 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1608 17CA A0 01			ldy #PLY.Y-DATAORIGIN
  1609 17CC B1 12			lda (:bp2),y
  1610 17CE 18 69 01			add #$01
  1611 17D1 91 12			sta (:bp2),y
  1612
  1613 17D3 4C 07 18			jmp a_0008
  1614 17D6			l_0674
  1615 17D6 C9 04			cmp #$04
  1616 17D8 D0 16			jne l_067E
  1617 17DA			@
  1618
  1619 				; optimize OK (main.pas), line = 66
  1620
  1621 17DA AC 12 19 84 12 AC + 	mwy PLY :bp2
  1622 17E4 A0 00			ldy #PLY.X-DATAORIGIN
  1623 17E6 B1 12			lda (:bp2),y
  1624 17E8 38 E9 01			sub #$01
  1625 17EB 91 12			sta (:bp2),y
  1626
  1627 17ED 4C 07 18			jmp a_0008
  1628 17F0			l_067E
  1629 17F0 C9 08			cmp #$08
  1630 17F2 D0 13			jne l_0688
  1631 17F4			@
  1632
  1633 				; optimize OK (main.pas), line = 67
  1634
  1635 17F4 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1636 17FE A0 00			ldy #PLY.X-DATAORIGIN
  1637 1800 B1 12			lda (:bp2),y
  1638 1802 18 69 01			add #$01
  1639 1805 91 12			sta (:bp2),y
  1640
  1641 1807			l_0688
  1642 1807			a_0008
  1643
  1644 				; optimize OK (main.pas), line = 70
  1645
  1646 1807 AC 12 19 84 12 AC + 	mwy PLY :bp2
  1647 1811 A0 00			ldy #PLY.X-DATAORIGIN
  1648 1813 B1 12			lda (:bp2),y
  1649 1815 8D 4F 19			sta PUTCHAR.X
  1650 1818 A0 01			ldy #PLY.Y-DATAORIGIN
  1651 181A B1 12			lda (:bp2),y
  1652 181C 8D 50 19			sta PUTCHAR.Y
  1653 181F A0 02			ldy #PLY.HEAD-DATAORIGIN
  1654 1821 B1 12			lda (:bp2),y
  1655 1823 8D 51 19			sta PUTCHAR.V
  1656 1826 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1657 1828 B1 12			lda (:bp2),y
  1658 182A 8D 52 19			sta PUTCHAR.C
  1659 182D 20 71 11			jsr PUTCHAR
  1660 1830			l_0520
  1661 1830			l_04E5
  1662
  1663 				; ------------------------------------------------------------
  1664
  1665 = 1962			P	= DATAORIGIN+$0046
  1666 = 1964			@CASETMP_0007	= DATAORIGIN+$0048
  1667 = 1965			@CASETMP_0008	= DATAORIGIN+$0049
  1668
  1669 = 1962			@VarData	= P
  1670 = 0004			@VarDataSize	= 4
  1671
  1672 1830			@exit
  1673 					.ifdef @new
  1674 					lda <@VarData
  1675 					sta :ztmp
  1676 					lda >@VarData
  1677 					ldy #@VarDataSize-1
  1678 					jmp @FreeMem
  1679 					els
  1680 1830 60				rts						; ret
  1681 					eif
  1682 				.endl
  1683
  1684 1831			.local	MAINLOOP					; PROCEDURE
  1685
  1686 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 90
  1687
  1688 1831 20 BF 12			jsr INITPLAYFIELD
  1689
  1690 				; optimize OK (main.pas), line = 93
  1691
  1692 1834 A9 03			lda #$03
  1693 1836 8D 2C 19			sta ALIVE
  1694
  1695 				; --- RepeatUntilProlog
  1696 1839			l_06AB
  1697
  1698 				; optimize OK (main.pas), line = 96
  1699
  1700 1839 AD 14 19			lda PLAYER1
  1701 183C 8D 62 19			sta PLAYERMOVE.P
  1702 183F AD 15 19			lda PLAYER1+1
  1703 1842 8D 63 19			sta PLAYERMOVE.P+1
  1704 1845 20 36 16			jsr PLAYERMOVE
  1705 1848 AD 16 19			lda PLAYER2
  1706 184B 8D 62 19			sta PLAYERMOVE.P
  1707 184E AD 17 19			lda PLAYER2+1
  1708 1851 8D 63 19			sta PLAYERMOVE.P+1
  1709 1854 20 36 16			jsr PLAYERMOVE
  1710
  1711 				; optimize OK (main.pas), line = 97
  1712
  1713 1857 AD 18 19			lda PLAYER3
  1714 185A 8D 62 19			sta PLAYERMOVE.P
  1715 185D AD 19 19			lda PLAYER3+1
  1716 1860 8D 63 19			sta PLAYERMOVE.P+1
  1717 1863 20 36 16			jsr PLAYERMOVE
  1718 1866 AD 1A 19			lda PLAYER4
  1719 1869 8D 62 19			sta PLAYERMOVE.P
  1720 186C AD 1B 19			lda PLAYER4+1
  1721 186F 8D 63 19			sta PLAYERMOVE.P+1
  1722 1872 20 36 16			jsr PLAYERMOVE
  1723
  1724 				; optimize OK (main.pas), line = 98
  1725
  1726 1875 AD 2C 19			lda ALIVE
  1727 1878 F0 04			jeq l_06ABx
  1728 187A C9 FF			cmp #$FF
  1729 187C D0 BB			jne l_06AB
  1730 187E			l_06ABx
  1731
  1732 				; optimize OK (main.pas), line = 100
  1733
  1734 187E AD 36 19			lda PLAYER1.ISDEAD
  1735 1881 D0 03			jne l_06DF
  1736 1883 EE 35 19			inc PLAYER1.SCORE
  1737 1886			l_06DF
  1738
  1739 				; optimize OK (main.pas), line = 101
  1740
  1741 1886 AD 3E 19			lda PLAYER2.ISDEAD
  1742 1889 D0 03			jne l_06F5
  1743 188B EE 3D 19			inc PLAYER2.SCORE
  1744 188E			l_06F5
  1745
  1746 				; optimize OK (main.pas), line = 102
  1747
  1748 188E AD 46 19			lda PLAYER3.ISDEAD
  1749 1891 D0 03			jne l_070B
  1750 1893 EE 45 19			inc PLAYER3.SCORE
  1751 1896			l_070B
  1752
  1753 				; optimize OK (main.pas), line = 103
  1754
  1755 1896 AD 4E 19			lda PLAYER4.ISDEAD
  1756 1899 D0 03			jne l_0721
  1757 189B EE 4D 19			inc PLAYER4.SCORE
  1758 189E			l_0721
  1759
  1760 				; optimize OK (main.pas), line = 105
  1761
  1762 189E A9 64			lda #$64
  1763 18A0 8D 28 19			sta SYSTEM.PAUSE_006B.N
  1764 18A3 A9 00			lda #$00
  1765 18A5 8D 29 19			sta SYSTEM.PAUSE_006B.N+1
  1766 18A8 20 23 11			jsr SYSTEM.PAUSE_006B
  1767 18AB			@exit
  1768 					.ifdef @new
  1769 					lda <@VarData
  1770 					sta :ztmp
  1771 					lda >@VarData
  1772 					ldy #@VarDataSize-1
  1773 					jmp @FreeMem
  1774 					els
  1775 18AB 60				rts						; ret
  1776 					eif
  1777 				.endl
  1778 18AC			l_0007
  1779
  1780 				; --- RepeatUntilProlog
  1781 18AC			l_072C
  1782
  1783 				; optimize OK (main.pas), line = 112
  1784
  1785 18AC A9 30			lda #$30
  1786 18AE 8D 35 19			sta PLAYER1.SCORE
  1787 18B1 8D 3D 19			sta PLAYER2.SCORE
  1788
  1789 				; optimize OK (main.pas), line = 113
  1790
  1791 18B4 8D 45 19			sta PLAYER3.SCORE
  1792 18B7 8D 4D 19			sta PLAYER4.SCORE
  1793
  1794 				; optimize OK (main.pas), line = 115
  1795
  1796 18BA A9 00			lda #$00
  1797 18BC 8D 2E 19			sta GAMEOVER
  1798
  1799 				; --- RepeatUntilProlog
  1800 18BF			l_0741
  1801
  1802 				; optimize FAIL ('MAINLOOP', main.pas), line = 117
  1803
  1804 18BF 20 31 18			jsr MAINLOOP
  1805
  1806 				; optimize OK (main.pas), line = 118
  1807
  1808 18C2 AD 35 19			lda PLAYER1.SCORE
  1809 18C5 C9 39			cmp #$39
  1810 18C7 D0 05			jne l_0754
  1811 18C9 A9 01			lda #$01
  1812 18CB 8D 2E 19			sta GAMEOVER
  1813 18CE			l_0754
  1814
  1815 				; optimize OK (main.pas), line = 119
  1816
  1817 18CE AD 3D 19			lda PLAYER2.SCORE
  1818 18D1 C9 39			cmp #$39
  1819 18D3 D0 05			jne l_076D
  1820 18D5 A9 01			lda #$01
  1821 18D7 8D 2E 19			sta GAMEOVER
  1822 18DA			l_076D
  1823
  1824 				; optimize OK (main.pas), line = 120
  1825
  1826 18DA AD 45 19			lda PLAYER3.SCORE
  1827 18DD C9 39			cmp #$39
  1828 18DF D0 05			jne l_0786
  1829 18E1 A9 01			lda #$01
  1830 18E3 8D 2E 19			sta GAMEOVER
  1831 18E6			l_0786
  1832
  1833 				; optimize OK (main.pas), line = 121
  1834
  1835 18E6 AD 4D 19			lda PLAYER4.SCORE
  1836 18E9 C9 39			cmp #$39
  1837 18EB D0 05			jne l_079F
  1838 18ED A9 01			lda #$01
  1839 18EF 8D 2E 19			sta GAMEOVER
  1840 18F2			l_079F
  1841
  1842 				; optimize OK (main.pas), line = 122
  1843
  1844 18F2 AD 2E 19			lda GAMEOVER
  1845 18F5 F0 C8			jeq l_0741
  1846
  1847 				; optimize FAIL ('SHOWSCORE', main.pas), line = 123
  1848
  1849 18F7 20 9C 11			jsr SHOWSCORE
  1850
  1851 				; optimize OK (main.pas), line = 125
  1852
  1853 18FA A9 C8			lda #$C8
  1854 18FC 8D 28 19			sta SYSTEM.PAUSE_006B.N
  1855 18FF A9 00			lda #$00
  1856 1901 8D 29 19			sta SYSTEM.PAUSE_006B.N+1
  1857 1904 20 23 11			jsr SYSTEM.PAUSE_006B
  1858
  1859 				; optimize OK (main.pas), line = 126
  1860
  1861 1907 4C AC 18			jmp l_072C
  1862
  1863 				; ------------------------------------------------------------
  1864
  1865 = 0800			ATTRIBUTE_ADDR	= $0800
  1866 = 0C00			SCREEN_ADDR	= $0C00
  1867 = 0020			EMPTY	= $20
  1868 = 00A0			WALL	= $A0
  1869 = 0041			WALL_COLOUR	= $41
  1870 = 0030			ZERO	= $30
  1871 = 0051			PLY_HEAD	= $51
  1872 = 0057			PLY_CRASH	= $57
  1873 = 0042			PLY_TAIL_UD	= $42
  1874 = 0040			PLY_TAIL_LR	= $40
  1875 = 007D			PLY_TAIL_RD	= $7D
  1876 = 006E			PLY_TAIL_RU	= $6E
  1877 = 006D			PLY_TAIL_LD	= $6D
  1878 = 0070			PLY_TAIL_LU	= $70
  1879 = 005F			PLY1_COLOUR	= $5F
  1880 = 005D			PLY2_COLOUR	= $5D
  1881 = 0071			PLY3_COLOUR	= $71
  1882 = 0055			PLY4_COLOUR	= $55
  1883 = 0000			PLY_CTRL	= $00
  1884 = 0001			AI_STRAIGHT	= $01
  1885 = 0002			AI_MIRROR	= $02
  1886 = 0003			AI_RANDOM	= $03
  1887 = 0001			JOY_UP	= $01
  1888 = 0002			JOY_DOWN	= $02
  1889 = 0004			JOY_LEFT	= $04
  1890 = 0008			JOY_RIGHT	= $08
  1891 = 0040			JOY_FIRE	= $40
  1892 = 0002			JOY_SELECT_1	= $02
  1893 = 0004			JOY_SELECT_2	= $04
  1894 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1895 190A			.var MUL40	= adr.MUL40 .word
  1896 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1897 190A			.var DIRECTION	= adr.DIRECTION .word
  1898 = FD30			KEY_PIO	= $FD30
  1899 = FF08			JOY	= $FF08
  1900 = FF15			BORDERCOLOR	= $FF15
  1901 = FF19			BGCOLOR	= $FF19
  1902 = 0058			T0B	= $58
  1903 = 0059			NEWDIR	= $59
  1904 = 005A			AVAILDIR	= $5A
  1905 = 005B			T0W	= $5B
  1906 = 005D			adr.PLY	= $5D
  1907 190A			.var PLY	= adr.PLY .word
  1908 = 191C			PLY.X	= DATAORIGIN+$0000
  1909 = 191D			PLY.Y	= DATAORIGIN+$0001
  1910 = 191E			PLY.HEAD	= DATAORIGIN+$0002
  1911 = 191F			PLY.COLOUR	= DATAORIGIN+$0003
  1912 = 1920			PLY.DIR	= DATAORIGIN+$0004
  1913 = 1921			PLY.BRAIN	= DATAORIGIN+$0005
  1914 = 1922			PLY.SCORE	= DATAORIGIN+$0006
  1915 = 1923			PLY.ISDEAD	= DATAORIGIN+$0007
  1916 = 192C			ALIVE	= DATAORIGIN+$0010
  1917 = 192D			SPEED	= DATAORIGIN+$0011
  1918 = 192E			GAMEOVER	= DATAORIGIN+$0012
  1919 = 192F			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  1920 190A			.var PLAYER1	= adr.PLAYER1 .word
  1921 = 192F			PLAYER1.X	= DATAORIGIN+$0013
  1922 = 1930			PLAYER1.Y	= DATAORIGIN+$0014
  1923 = 1931			PLAYER1.HEAD	= DATAORIGIN+$0015
  1924 = 1932			PLAYER1.COLOUR	= DATAORIGIN+$0016
  1925 = 1933			PLAYER1.DIR	= DATAORIGIN+$0017
  1926 = 1934			PLAYER1.BRAIN	= DATAORIGIN+$0018
  1927 = 1935			PLAYER1.SCORE	= DATAORIGIN+$0019
  1928 = 1936			PLAYER1.ISDEAD	= DATAORIGIN+$001A
  1929 = 1937			adr.PLAYER2	= [DATAORIGIN+$001B] .array [6]
  1930 190A			.var PLAYER2	= adr.PLAYER2 .word
  1931 = 1937			PLAYER2.X	= DATAORIGIN+$001B
  1932 = 1938			PLAYER2.Y	= DATAORIGIN+$001C
  1933 = 1939			PLAYER2.HEAD	= DATAORIGIN+$001D
  1934 = 193A			PLAYER2.COLOUR	= DATAORIGIN+$001E
  1935 = 193B			PLAYER2.DIR	= DATAORIGIN+$001F
  1936 = 193C			PLAYER2.BRAIN	= DATAORIGIN+$0020
  1937 = 193D			PLAYER2.SCORE	= DATAORIGIN+$0021
  1938 = 193E			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1939 = 193F			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1940 190A			.var PLAYER3	= adr.PLAYER3 .word
  1941 = 193F			PLAYER3.X	= DATAORIGIN+$0023
  1942 = 1940			PLAYER3.Y	= DATAORIGIN+$0024
  1943 = 1941			PLAYER3.HEAD	= DATAORIGIN+$0025
  1944 = 1942			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1945 = 1943			PLAYER3.DIR	= DATAORIGIN+$0027
  1946 = 1944			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1947 = 1945			PLAYER3.SCORE	= DATAORIGIN+$0029
  1948 = 1946			PLAYER3.ISDEAD	= DATAORIGIN+$002A
  1949 = 1947			adr.PLAYER4	= [DATAORIGIN+$002B] .array [6]
  1950 190A			.var PLAYER4	= adr.PLAYER4 .word
  1951 = 1947			PLAYER4.X	= DATAORIGIN+$002B
  1952 = 1948			PLAYER4.Y	= DATAORIGIN+$002C
  1953 = 1949			PLAYER4.HEAD	= DATAORIGIN+$002D
  1954 = 194A			PLAYER4.COLOUR	= DATAORIGIN+$002E
  1955 = 194B			PLAYER4.DIR	= DATAORIGIN+$002F
  1956 = 194C			PLAYER4.BRAIN	= DATAORIGIN+$0030
  1957 = 194D			PLAYER4.SCORE	= DATAORIGIN+$0031
  1958 = 194E			PLAYER4.ISDEAD	= DATAORIGIN+$0032
  1959 190A			@exit
  1960
  1961 190A A2 00		@halt	ldx #$00
  1962 190C 9A				txs
  1963
  1964 190D 60				rts
  1965
  1966 				; ------------------------------------------------------------
  1967
  1968 				; ------------------------------------------------------------
  1969
  1970 190E			.local	@DEFINES
  1971 190E			C4P
  1972 				.endl
  1973
  1974 190E			.local	@RESOURCE
  1975 				.endl
  1976
  1977 = 190E 0E 10		MUL40
  1977 = 1910 40 10		DIRECTION
  1977 = 1912 5D 00		PLY
  1977 = 1914 2F 19		PLAYER1
  1977 = 1916 37 19		PLAYER2
  1977 = 1918 3F 19		PLAYER3
  1977 = 191A 47 19		PLAYER4
  1977 				.endl							; MAIN
  1978
  1979 				; ------------------------------------------------------------
  1980 				; ------------------------------------------------------------
  1981
  1982 				.macro	UNITINITIALIZATION
  1983 				
  1984 					.ifdef MAIN.SYSTEM.@UnitInit
  1985 					jsr MAIN.SYSTEM.@UnitInit
  1986 					eif
  1987 				.endm
  1988
  1989 				; ------------------------------------------------------------
  1990
  1991 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1992 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1992 				SYSTEM: $10D5..$1170
  1993 					eif
  1994
  1995 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1995 				CODE: $100E..$190D
  1996
  1997 				; ------------------------------------------------------------
  1998
  1999 191C				.align $04
  2000
  2001 191C			DATAORIGIN
  2002 191C 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  2003
  2004 = 0006			VARINITSIZE	= *-DATAORIGIN
  2005 = 004A			VARDATASIZE	= 74
  2006
  2007 = 1966			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2008
  2009 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2009 				DATA: $191C..$1966
  2010
  2011 				; ------------------------------------------------------------
  2012
  2013 				.macro	STATICDATA
  2014 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  2015 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  2016 				.by  $C0 $03 $01 $02 $04 $08
  2017 				.endm
  2018
  2019 					end
