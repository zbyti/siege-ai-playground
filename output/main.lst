mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 74 17			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0041			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 178A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BF			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D CB 16 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 CB 85 02 A9 17 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 19 16			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 8F 17		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 8F 17 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 178F			RESULT	= DATAORIGIN+$000B
   182
   183 = 178F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 90 17		loop  lda n
   307 1126 0D 91 17		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 90 17 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1790			N	= DATAORIGIN+$000C
   321
   322 = 1790			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 92 17			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 92 17		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 93 17		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 93 17 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1792			RANGE	= DATAORIGIN+$000E
   383 = 1793			RESULT	= DATAORIGIN+$000F
   384
   385 = 1792			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1784			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1786			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1788			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1789			FILEMODE	= DATAORIGIN+$0005
   450 = 178A			GRAPHMODE	= DATAORIGIN+$0006
   451 = 178B			IORESULT	= DATAORIGIN+$0007
   452 = 178C			EOLN	= DATAORIGIN+$0008
   453 = 178D			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 1171 A9 1F			lda #$1F
   462 1173 8D 15 FF			sta BORDERCOLOR
   463 1176 A9 00			lda #$00
   464 1178 8D 19 FF			sta BGCOLOR
   465
   466 				; optimize OK (main.pas), line = 66
   467
   468 117B A9 20			lda #$20
   469 117D 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   470 117F A9 C0			lda #$C0
   471 1181 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   472 1183 A9 03			lda #$03
   473 1185 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   474 1187 A9 00			lda #$00
   475 1189 85 08			sta SYSTEM.FILLCHAR_0056.A
   476 118B A9 0C			lda #$0C
   477 118D 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   478 118F 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   479
   480 				; optimize OK (main.pas), line = 68
   481
   482 1192 A9 27			lda #$27
   483 1194 85 58			sta T0B
   484
   485 1196			l_0089
   486 				; --- ForToDoCondition
   487
   488 				; optimize OK (main.pas), line = 69
   489
   490 1196 A4 58			ldy T0B
   491 1198 A9 A0			lda #$A0
   492 119A 99 00 0C			sta $0C00,y
   493
   494 				; optimize OK (main.pas), line = 70
   495
   496 119D 99 C0 0F			sta $0FC0,y
   497
   498 				; optimize OK (main.pas), line = 71
   499
   500 11A0 A9 41			lda #$41
   501 11A2 99 00 08			sta $0800,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 11A5 99 C0 0B			sta $0BC0,y
   506
   507 				; --- ForToDoEpilog
   508 11A8 C6 58			dec T0B
   509 11AA 10 EA			jpl l_0089
   510 11AC			l_0097
   511
   512 				; optimize OK (main.pas), line = 75
   513
   514 11AC A9 18			lda #$18
   515 11AE 85 58			sta T0B
   516
   517 11B0			l_00C9
   518 				; --- ForToDoCondition
   519 11B0 A5 58			lda T0B
   520 11B2 C9 01			cmp #$01
   521 11B4 90 3A			jcc l_00D7
   522
   523 				; optimize OK (main.pas), line = 76
   524
   525 11B6 0A				asl @
   526 11B7 A8				tay
   527 11B8 A9 FF			lda #$FF
   528 11BA 18 79 0E 10			add adr.MUL40,y
   529 11BE 85 12			sta :bp2
   530 11C0 A9 0B			lda #$0B
   531 11C2 79 0F 10			adc adr.MUL40+1,y
   532 11C5 85 13			sta :bp2+1
   533 11C7 A0 00			ldy #$00
   534 11C9 A9 A0			lda #$A0
   535 11CB 91 12			sta (:bp2),y
   536 11CD C8				iny
   537 11CE 91 12			sta (:bp2),y
   538
   539 				; optimize OK (main.pas), line = 77
   540
   541 11D0 A5 58			lda T0B
   542 11D2 0A				asl @
   543 11D3 A8				tay
   544 11D4 A9 FF			lda #$FF
   545 11D6 18 79 0E 10			add adr.MUL40,y
   546 11DA 85 12			sta :bp2
   547 11DC A9 07			lda #$07
   548 11DE 79 0F 10			adc adr.MUL40+1,y
   549 11E1 85 13			sta :bp2+1
   550 11E3 A0 00			ldy #$00
   551 11E5 A9 41			lda #$41
   552 11E7 91 12			sta (:bp2),y
   553 11E9 C8				iny
   554 11EA 91 12			sta (:bp2),y
   555
   556 				; --- ForToDoEpilog
   557 11EC C6 58			dec T0B
   558 11EE 10 C0			jpl l_00C9
   559 11F0			l_00D7
   560
   561 				; ------------------------------------------------------------
   562
   563 = 0000			@FORTMP_0086	= $00
   564 = 0001			@FORTMP_00C6	= $01
   565 11F0			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 11F0 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 11F1			.local	INITPLAYERS					; PROCEDURE
   578
   579 				; optimize OK (main.pas), line = 83
   580
   581 11F1 AD B5 17			lda P
   582 11F4 8D 97 17			sta PLY
   583 11F7 85 12			sta :bp2
   584 11F9 AD B6 17			lda P+1
   585 11FC 8D 98 17			sta PLY+1
   586 11FF 85 13			sta :bp2+1
   587 				; optimize OK (main.pas), line = 84
   588 1201 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   589 1203 AD BA 17			lda BRAIN
   590 1206 91 12			sta (:bp2),y
   591 1208 A0 00			ldy #PLY.X-DATAORIGIN
   592 120A AD B7 17			lda X
   593 120D 91 12			sta (:bp2),y
   594 120F A0 01			ldy #PLY.Y-DATAORIGIN
   595 1211 AD B8 17			lda Y
   596 1214 91 12			sta (:bp2),y
   597 1216 A0 04			ldy #PLY.DIR-DATAORIGIN
   598 1218 AD B9 17			lda DIR
   599 121B 91 12			sta (:bp2),y
   600
   601 				; optimize OK (main.pas), line = 85
   602
   603 121D A0 02			ldy #PLY.HEAD-DATAORIGIN
   604 121F AD BB 17			lda HEAD
   605 1222 91 12			sta (:bp2),y
   606 1224 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   607 1226 AD BC 17			lda COLOUR
   608 1229 91 12			sta (:bp2),y
   609 122B A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   610 122D AD BD 17			lda ISDEAD
   611 1230 91 12			sta (:bp2),y
   612
   613 				; ------------------------------------------------------------
   614
   615 = 17B5			P	= DATAORIGIN+$0031
   616 = 17B7			X	= DATAORIGIN+$0033
   617 = 17B8			Y	= DATAORIGIN+$0034
   618 = 17B9			DIR	= DATAORIGIN+$0035
   619 = 17BA			BRAIN	= DATAORIGIN+$0036
   620 = 17BB			HEAD	= DATAORIGIN+$0037
   621 = 17BC			COLOUR	= DATAORIGIN+$0038
   622 = 17BD			ISDEAD	= DATAORIGIN+$0039
   623
   624 = 17B5			@VarData	= P
   625 = 0009			@VarDataSize	= 9
   626
   627 1232			@exit
   628 					.ifdef @new
   629 					lda <@VarData
   630 					sta :ztmp
   631 					lda >@VarData
   632 					ldy #@VarDataSize-1
   633 					jmp @FreeMem
   634 					els
   635 1232 60				rts						; ret
   636 					eif
   637 				.endl
   638
   639 1233			.local	PUTCHAR						; PROCEDURE
   640
   641 				; optimize OK (main.pas), line = 93
   642
   643 1233 AD BF 17			lda Y
   644 1236 0A				asl @
   645 1237 A8				tay
   646 1238 B9 0E 10			lda adr.MUL40,y
   647 123B 18 6D BE 17			add X
   648 123F 85 5B			sta T0W
   649 1241 B9 0F 10			lda adr.MUL40+1,y
   650 1244 69 08			adc #$08
   651 1246 85 5C			sta T0W+1
   652
   653 				; optimize OK (main.pas), line = 94
   654
   655 1248 85 11			sta :bp+1
   656 124A A4 5B			ldy T0W
   657 124C AD C1 17			lda C
   658 124F 91 10			sta (:bp),y
   659 1251 A5 5C			lda T0W+1
   660 1253 18 69 04			add #$04
   661 1256 85 11			sta :bp+1
   662 1258 AD C0 17			lda V
   663 125B 91 10			sta (:bp),y
   664
   665 				; ------------------------------------------------------------
   666
   667 = 17BE			X	= DATAORIGIN+$003A
   668 = 17BF			Y	= DATAORIGIN+$003B
   669 = 17C0			V	= DATAORIGIN+$003C
   670 = 17C1			C	= DATAORIGIN+$003D
   671
   672 = 17BE			@VarData	= X
   673 = 0004			@VarDataSize	= 4
   674
   675 125D			@exit
   676 					.ifdef @new
   677 					lda <@VarData
   678 					sta :ztmp
   679 					lda >@VarData
   680 					ldy #@VarDataSize-1
   681 					jmp @FreeMem
   682 					els
   683 125D 60				rts						; ret
   684 					eif
   685 				.endl
   686
   687 125E			.local	CHECKAVAILDIR					; PROCEDURE
   688
   689 				; optimize OK (main.pas), line = 99
   690
   691 125E A9 00			lda #$00
   692 1260 8D 95 17			sta AVAILDIR
   693
   694 				; optimize OK (main.pas), line = 100
   695
   696 1263 AD C3 17			lda Y
   697 1266 0A				asl @
   698 1267 A8				tay
   699 1268 B9 0E 10			lda adr.MUL40,y
   700 126B 18 6D C2 17			add X
   701 126F 85 5B			sta T0W
   702 1271 B9 0F 10			lda adr.MUL40+1,y
   703 1274 69 0C			adc #$0C
   704 1276 85 5C			sta T0W+1
   705
   706 				; optimize OK (main.pas), line = 102
   707
   708 1278 A5 5B			lda T0W
   709 127A 38 E9 28			sub #$28
   710 127D 85 21			sta :STACKORIGIN+9
   711 127F A5 5C			lda T0W+1
   712 1281 E9 00			sbc #$00
   713 1283 85 11			sta :bp+1
   714 1285 A4 21			ldy :STACKORIGIN+9
   715 1287 B1 10			lda (:bp),y
   716 1289 C9 20			cmp #$20
   717 128B D0 08			jne l_017B
   718 128D AD 95 17			lda AVAILDIR
   719 1290 09 01			ora #$01
   720 1292 8D 95 17			sta AVAILDIR
   721 1295			l_017B
   722
   723 				; optimize OK (main.pas), line = 103
   724
   725 1295 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   726 129D A0 28			ldy #$28
   727 129F B1 12			lda (:bp2),y
   728 12A1 C9 20			cmp #$20
   729 12A3 D0 08			jne l_019E
   730 12A5 AD 95 17			lda AVAILDIR
   731 12A8 09 02			ora #$02
   732 12AA 8D 95 17			sta AVAILDIR
   733 12AD			l_019E
   734
   735 				; optimize OK (main.pas), line = 104
   736
   737 12AD A5 5B			lda T0W
   738 12AF 38 E9 01			sub #$01
   739 12B2 85 21			sta :STACKORIGIN+9
   740 12B4 A5 5C			lda T0W+1
   741 12B6 E9 00			sbc #$00
   742 12B8 85 11			sta :bp+1
   743 12BA A4 21			ldy :STACKORIGIN+9
   744 12BC B1 10			lda (:bp),y
   745 12BE C9 20			cmp #$20
   746 12C0 D0 08			jne l_01C1
   747 12C2 AD 95 17			lda AVAILDIR
   748 12C5 09 04			ora #$04
   749 12C7 8D 95 17			sta AVAILDIR
   750 12CA			l_01C1
   751
   752 				; optimize OK (main.pas), line = 105
   753
   754 12CA A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   755 12D2 A0 01			ldy #$01
   756 12D4 B1 12			lda (:bp2),y
   757 12D6 C9 20			cmp #$20
   758 12D8 D0 08			jne l_01E4
   759 12DA AD 95 17			lda AVAILDIR
   760 12DD 09 08			ora #$08
   761 12DF 8D 95 17			sta AVAILDIR
   762 12E2			l_01E4
   763
   764 				; ------------------------------------------------------------
   765
   766 = 17C2			X	= DATAORIGIN+$003E
   767 = 17C3			Y	= DATAORIGIN+$003F
   768
   769 = 17C2			@VarData	= X
   770 = 0002			@VarDataSize	= 2
   771
   772 12E2			@exit
   773 					.ifdef @new
   774 					lda <@VarData
   775 					sta :ztmp
   776 					lda >@VarData
   777 					ldy #@VarDataSize-1
   778 					jmp @FreeMem
   779 					els
   780 12E2 60				rts						; ret
   781 					eif
   782 				.endl
   783
   784 12E3			.local	HUMAN						; PROCEDURE
   785
   786 				; optimize OK (main.pas), line = 113
   787
   788 12E3 AC 97 17 84 12 AC + 	mwy PLY :bp2
   789 12ED A0 04			ldy #PLY.DIR-DATAORIGIN
   790 12EF B1 12			lda (:bp2),y
   791 12F1 85 59			sta NEWDIR
   792
   793 				; optimize OK (main.pas), line = 114
   794
   795 12F3 A9 02			lda #$02
   796 12F5 8D 08 FF			sta JOY
   797 12F8 A9 FF			lda #$FF
   798 12FA 8D 30 FD			sta KEY_PIO
   799 12FD AD 08 FF			lda JOY
   800 1300 49 FF			eor #$FF
   801 1302 85 58			sta T0B
   802
   803 				; optimize OK (main.pas), line = 116
   804
   805 1304 8D C4 17			sta @CASETMP_0003
   806 1307 C9 01			cmp #$01
   807 1309 D0 19			jne l_0218
   808 130B			@
   809
   810 				; optimize OK (main.pas), line = 117
   811
   812 130B AC 97 17 84 12 AC + 	mwy PLY :bp2
   813 1315 A0 04			ldy #PLY.DIR-DATAORIGIN
   814 1317 B1 12			lda (:bp2),y
   815 1319 C9 02			cmp #$02
   816 131B F0 04			jeq l_022A
   817 131D A9 01			lda #$01
   818 131F 85 59			sta NEWDIR
   819 1321			l_022A
   820
   821 1321 4C 78 13			jmp a_0003
   822 1324			l_0218
   823 1324 C9 02			cmp #$02
   824 1326 D0 19			jne l_023A
   825 1328			@
   826
   827 				; optimize OK (main.pas), line = 118
   828
   829 1328 AC 97 17 84 12 AC + 	mwy PLY :bp2
   830 1332 A0 04			ldy #PLY.DIR-DATAORIGIN
   831 1334 B1 12			lda (:bp2),y
   832 1336 C9 01			cmp #$01
   833 1338 F0 04			jeq l_024C
   834 133A A9 02			lda #$02
   835 133C 85 59			sta NEWDIR
   836 133E			l_024C
   837
   838 133E 4C 78 13			jmp a_0003
   839 1341			l_023A
   840 1341 C9 04			cmp #$04
   841 1343 D0 19			jne l_025C
   842 1345			@
   843
   844 				; optimize OK (main.pas), line = 119
   845
   846 1345 AC 97 17 84 12 AC + 	mwy PLY :bp2
   847 134F A0 04			ldy #PLY.DIR-DATAORIGIN
   848 1351 B1 12			lda (:bp2),y
   849 1353 C9 08			cmp #$08
   850 1355 F0 04			jeq l_026E
   851 1357 A9 04			lda #$04
   852 1359 85 59			sta NEWDIR
   853 135B			l_026E
   854
   855 135B 4C 78 13			jmp a_0003
   856 135E			l_025C
   857 135E C9 08			cmp #$08
   858 1360 D0 16			jne l_027E
   859 1362			@
   860
   861 				; optimize OK (main.pas), line = 120
   862
   863 1362 AC 97 17 84 12 AC + 	mwy PLY :bp2
   864 136C A0 04			ldy #PLY.DIR-DATAORIGIN
   865 136E B1 12			lda (:bp2),y
   866 1370 C9 04			cmp #$04
   867 1372 F0 04			jeq l_0290
   868 1374 A9 08			lda #$08
   869 1376 85 59			sta NEWDIR
   870 1378			l_0290
   871
   872 1378			l_027E
   873 1378			a_0003
   874
   875 				; optimize OK (main.pas), line = 123
   876
   877 1378 A5 59			lda NEWDIR
   878 137A 2D 95 17			and AVAILDIR
   879 137D D0 1B			jne l_02B7
   880
   881 				; optimize OK (main.pas), line = 124
   882
   883 137F AC 97 17 84 12 AC + 	mwy PLY :bp2
   884 1389 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   885 138B A9 01			lda #$01
   886 138D 91 12			sta (:bp2),y
   887 138F A9 00			lda #$00
   888 1391 8D 96 17			sta ALIVE
   889 1394 A0 02			ldy #PLY.HEAD-DATAORIGIN
   890 1396 A9 57			lda #$57
   891 1398 91 12			sta (:bp2),y
   892 139A			l_02B7
   893
   894 				; ------------------------------------------------------------
   895
   896 = 17C4			@CASETMP_0003	= DATAORIGIN+$0040
   897
   898 = 17C4			@VarData	= @CASETMP_0003
   899 = 0001			@VarDataSize	= 1
   900
   901 139A			@exit
   902 					.ifdef @new
   903 					lda <@VarData
   904 					sta :ztmp
   905 					lda >@VarData
   906 					ldy #@VarDataSize-1
   907 					jmp @FreeMem
   908 					els
   909 139A 60				rts						; ret
   910 					eif
   911 				.endl
   912
   913 139B			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   914
   915 				; optimize OK (main.pas), line = 131
   916
   917 139B AC 97 17 84 12 AC + 	mwy PLY :bp2
   918 13A5 A0 04			ldy #PLY.DIR-DATAORIGIN
   919 13A7 B1 12			lda (:bp2),y
   920 13A9 2D 95 17			and AVAILDIR
   921 13AC F0 07			jeq l_02E2
   922 13AE B1 12			lda (:bp2),y
   923 13B0 85 59			sta NEWDIR
   924 13B2 4C 30 14			jmp l_02F2
   925 13B5			l_02E2
   926
   927 				; optimize OK (main.pas), line = 133
   928
   929 13B5 AD 95 17			lda AVAILDIR
   930 13B8 C9 03			cmp #$03
   931 13BA D0 16			jne l_0304
   932 13BC A9 00			lda #$00
   933 13BE 20 40 11			jsr SYSTEM.RANDOM_006C
   934 13C1 B5 18			lda :STACKORIGIN,x
   935 13C3 29 01			and #$01
   936 13C5 95 18			sta :STACKORIGIN,x
   937 13C7 B4 18			ldy :STACKORIGIN,x
   938 13C9 B9 40 10			lda adr.DIRECTION,y
   939 13CC 85 59			sta NEWDIR
   940 13CE CA				dex
   941 13CF 4C EB 13			jmp l_031A
   942 13D2			l_0304
   943
   944 				; optimize OK (main.pas), line = 135
   945
   946 13D2 AD 95 17			lda AVAILDIR
   947 13D5 8D C5 17			sta @CASETMP_0004
   948 13D8 C9 01			cmp #$01
   949 13DA D0 07			jne l_0325
   950 13DC			@
   951
   952 				; optimize OK (main.pas), line = 136
   953
   954 13DC A9 01			lda #$01
   955 13DE 85 59			sta NEWDIR
   956
   957 13E0 4C EB 13			jmp a_0004
   958 13E3			l_0325
   959 13E3 C9 02			cmp #$02
   960 13E5 D0 04			jne l_0332
   961 13E7			@
   962
   963 				; optimize OK (main.pas), line = 137
   964
   965 13E7 A9 02			lda #$02
   966 13E9 85 59			sta NEWDIR
   967
   968 13EB			l_0332
   969 13EB			a_0004
   970 13EB			l_031A
   971
   972 				; optimize OK (main.pas), line = 140
   973
   974 13EB AD 95 17			lda AVAILDIR
   975 13EE C9 0C			cmp #$0C
   976 13F0 D0 25			jne l_034E
   977 13F2 A9 00			lda #$00
   978 13F4 20 40 11			jsr SYSTEM.RANDOM_006C
   979 13F7 B5 18			lda :STACKORIGIN,x
   980 13F9 29 01			and #$01
   981 13FB 95 18			sta :STACKORIGIN,x
   982 13FD E8				inx
   983 13FE A9 02 95 18			mva #$02 :STACKORIGIN,x
   984 1402 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
   985 1406 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
   986 1408 20 44 10			jsr addAX_CX
   987 140B CA				dex
   988 140C B4 18			ldy :STACKORIGIN,x
   989 140E B9 40 10			lda adr.DIRECTION,y
   990 1411 85 59			sta NEWDIR
   991 1413 CA				dex
   992 1414 4C 30 14			jmp l_0368
   993 1417			l_034E
   994
   995 				; optimize OK (main.pas), line = 142
   996
   997 1417 AD 95 17			lda AVAILDIR
   998 141A 8D C6 17			sta @CASETMP_0005
   999 141D C9 04			cmp #$04
  1000 141F D0 07			jne l_0373
  1001 1421			@
  1002
  1003 				; optimize OK (main.pas), line = 143
  1004
  1005 1421 A9 04			lda #$04
  1006 1423 85 59			sta NEWDIR
  1007
  1008 1425 4C 30 14			jmp a_0005
  1009 1428			l_0373
  1010 1428 C9 08			cmp #$08
  1011 142A D0 04			jne l_0380
  1012 142C			@
  1013
  1014 				; optimize OK (main.pas), line = 144
  1015
  1016 142C A9 08			lda #$08
  1017 142E 85 59			sta NEWDIR
  1018
  1019 1430			l_0380
  1020 1430			a_0005
  1021 1430			l_0368
  1022 1430			l_02F2
  1023
  1024 				; ------------------------------------------------------------
  1025
  1026 = 17C5			@CASETMP_0004	= DATAORIGIN+$0041
  1027 = 17C6			@CASETMP_0005	= DATAORIGIN+$0042
  1028
  1029 = 17C5			@VarData	= @CASETMP_0004
  1030 = 0002			@VarDataSize	= 2
  1031
  1032 1430			@exit
  1033 					.ifdef @new
  1034 					lda <@VarData
  1035 					sta :ztmp
  1036 					lda >@VarData
  1037 					ldy #@VarDataSize-1
  1038 					jmp @FreeMem
  1039 					els
  1040 1430 60				rts						; ret
  1041 					eif
  1042 				.endl
  1043
  1044 1431			.local	PLAYERMOVE					; PROCEDURE
  1045
  1046 				; optimize OK (main.pas), line = 154
  1047
  1048 1431 AD C7 17			lda P
  1049 1434 8D 97 17			sta PLY
  1050 1437 85 12			sta :bp2
  1051 1439 AD C8 17			lda P+1
  1052 143C 8D 98 17			sta PLY+1
  1053 143F 85 13			sta :bp2+1
  1054 				; optimize OK (main.pas), line = 156
  1055 1441 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1056 1443 B1 12			lda (:bp2),y
  1057 1445 F0 03 4C 18 16		jne l_03A2
  1058
  1059 				; optimize OK (main.pas), line = 158
  1060
  1061 144A A0 00			ldy #PLY.X-DATAORIGIN
  1062 144C B1 12			lda (:bp2),y
  1063 144E 8D C2 17			sta CHECKAVAILDIR.X
  1064 1451 A0 01			ldy #PLY.Y-DATAORIGIN
  1065 1453 B1 12			lda (:bp2),y
  1066 1455 8D C3 17			sta CHECKAVAILDIR.Y
  1067 1458 20 5E 12			jsr CHECKAVAILDIR
  1068
  1069 				; optimize OK (main.pas), line = 160
  1070
  1071 145B AD 95 17			lda AVAILDIR
  1072 145E D0 36			jne l_03BC
  1073
  1074 				; optimize OK (main.pas), line = 161
  1075
  1076 1460 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1077 146A A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1078 146C A9 01			lda #$01
  1079 146E 91 12			sta (:bp2),y
  1080 1470 CE 96 17			dec ALIVE
  1081
  1082 				; optimize OK (main.pas), line = 162
  1083
  1084 1473 A0 00			ldy #PLY.X-DATAORIGIN
  1085 1475 B1 12			lda (:bp2),y
  1086 1477 8D BE 17			sta PUTCHAR.X
  1087 147A A0 01			ldy #PLY.Y-DATAORIGIN
  1088 147C B1 12			lda (:bp2),y
  1089 147E 8D BF 17			sta PUTCHAR.Y
  1090 1481 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1091 1483 B1 12			lda (:bp2),y
  1092 1485 18 69 80			add #$80
  1093 1488 8D C1 17			sta PUTCHAR.C
  1094 148B A9 57			lda #$57
  1095 148D 8D C0 17			sta PUTCHAR.V
  1096 1490 20 33 12			jsr PUTCHAR
  1097 1493 4C 18 16			jmp l_03DD
  1098 1496			l_03BC
  1099
  1100 				; optimize OK (main.pas), line = 165
  1101
  1102 1496 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1103 14A0 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1104 14A2 B1 12			lda (:bp2),y
  1105 14A4 8D C9 17			sta @CASETMP_0006
  1106 14A7 C9 00			cmp #$00
  1107 14A9 D0 06			jne l_03E8
  1108 14AB			@
  1109
  1110 				; optimize FAIL ('HUMAN', main.pas), line = 166
  1111
  1112 14AB 20 E3 12			jsr HUMAN
  1113 14AE 4C B8 14			jmp a_0006
  1114 14B1			l_03E8
  1115 14B1 C9 01			cmp #$01
  1116 14B3 D0 03			jne l_03F2
  1117 14B5			@
  1118
  1119 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 167
  1120
  1121 14B5 20 9B 13			jsr AI_STRAIGHTFORWARD
  1122 14B8			l_03F2
  1123 14B8			a_0006
  1124
  1125 				; optimize OK (main.pas), line = 170
  1126
  1127 14B8 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1128 14C2 A0 04			ldy #PLY.DIR-DATAORIGIN
  1129 14C4 B1 12			lda (:bp2),y
  1130 14C6 C5 59			cmp NEWDIR
  1131 14C8 D0 14			jne l_040D
  1132
  1133 				; optimize OK (main.pas), line = 171
  1134
  1135 14CA A5 59			lda NEWDIR
  1136 14CC 29 0C			and #$0C
  1137 14CE F0 07			jeq l_0424
  1138 14D0 A9 40			lda #$40
  1139 14D2 85 58			sta T0B
  1140 14D4 4C DB 14			jmp l_0432
  1141 14D7			l_0424
  1142 14D7 A9 42			lda #$42
  1143 14D9 85 58			sta T0B
  1144 14DB			l_0432
  1145 14DB 4C 4E 15			jmp l_043F
  1146 14DE			l_040D
  1147
  1148 				; optimize OK (main.pas), line = 173
  1149
  1150 14DE AC 97 17 84 12 AC + 	mwy PLY :bp2
  1151 14E8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1152 14EA B1 12			lda (:bp2),y
  1153 14EC 29 0A			and #$0A
  1154 14EE F0 0A			jeq l_0465
  1155 14F0 A5 59			lda NEWDIR
  1156 14F2 29 05			and #$05
  1157 14F4 F0 04			jeq l_0465
  1158 14F6 A9 7D			lda #$7D
  1159 14F8 85 58			sta T0B
  1160 14FA			l_0465
  1161
  1162 				; optimize OK (main.pas), line = 174
  1163
  1164 14FA AC 97 17 84 12 AC + 	mwy PLY :bp2
  1165 1504 A0 04			ldy #PLY.DIR-DATAORIGIN
  1166 1506 B1 12			lda (:bp2),y
  1167 1508 29 09			and #$09
  1168 150A F0 0A			jeq l_0492
  1169 150C A5 59			lda NEWDIR
  1170 150E 29 06			and #$06
  1171 1510 F0 04			jeq l_0492
  1172 1512 A9 6E			lda #$6E
  1173 1514 85 58			sta T0B
  1174 1516			l_0492
  1175
  1176 				; optimize OK (main.pas), line = 175
  1177
  1178 1516 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1179 1520 A0 04			ldy #PLY.DIR-DATAORIGIN
  1180 1522 B1 12			lda (:bp2),y
  1181 1524 29 06			and #$06
  1182 1526 F0 0A			jeq l_04BF
  1183 1528 A5 59			lda NEWDIR
  1184 152A 29 09			and #$09
  1185 152C F0 04			jeq l_04BF
  1186 152E A9 6D			lda #$6D
  1187 1530 85 58			sta T0B
  1188 1532			l_04BF
  1189
  1190 				; optimize OK (main.pas), line = 176
  1191
  1192 1532 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1193 153C A0 04			ldy #PLY.DIR-DATAORIGIN
  1194 153E B1 12			lda (:bp2),y
  1195 1540 29 05			and #$05
  1196 1542 F0 0A			jeq l_04EC
  1197 1544 A5 59			lda NEWDIR
  1198 1546 29 0A			and #$0A
  1199 1548 F0 04			jeq l_04EC
  1200 154A A9 70			lda #$70
  1201 154C 85 58			sta T0B
  1202 154E			l_04EC
  1203 154E			l_043F
  1204
  1205 				; optimize OK (main.pas), line = 178
  1206
  1207 154E AC 97 17 84 12 AC + 	mwy PLY :bp2
  1208 1558 A0 00			ldy #PLY.X-DATAORIGIN
  1209 155A B1 12			lda (:bp2),y
  1210 155C 8D BE 17			sta PUTCHAR.X
  1211 155F A0 01			ldy #PLY.Y-DATAORIGIN
  1212 1561 B1 12			lda (:bp2),y
  1213 1563 8D BF 17			sta PUTCHAR.Y
  1214 1566 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1215 1568 B1 12			lda (:bp2),y
  1216 156A 8D C1 17			sta PUTCHAR.C
  1217 156D A5 58			lda T0B
  1218 156F 8D C0 17			sta PUTCHAR.V
  1219 1572 20 33 12			jsr PUTCHAR
  1220
  1221 				; optimize OK (main.pas), line = 180
  1222
  1223 1575 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1224 157F A0 04			ldy #PLY.DIR-DATAORIGIN
  1225 1581 A5 59			lda NEWDIR
  1226 1583 91 12			sta (:bp2),y
  1227
  1228 				; optimize OK (main.pas), line = 182
  1229
  1230 1585 A5 59			lda NEWDIR
  1231 1587 8D CA 17			sta @CASETMP_0007
  1232 158A C9 01			cmp #$01
  1233 158C D0 16			jne l_0511
  1234 158E			@
  1235
  1236 				; optimize OK (main.pas), line = 183
  1237
  1238 158E AC 97 17 84 12 AC + 	mwy PLY :bp2
  1239 1598 A0 01			ldy #PLY.Y-DATAORIGIN
  1240 159A B1 12			lda (:bp2),y
  1241 159C 38 E9 01			sub #$01
  1242 159F 91 12			sta (:bp2),y
  1243
  1244 15A1 4C EF 15			jmp a_0007
  1245 15A4			l_0511
  1246 15A4 C9 02			cmp #$02
  1247 15A6 D0 16			jne l_051B
  1248 15A8			@
  1249
  1250 				; optimize OK (main.pas), line = 184
  1251
  1252 15A8 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1253 15B2 A0 01			ldy #PLY.Y-DATAORIGIN
  1254 15B4 B1 12			lda (:bp2),y
  1255 15B6 18 69 01			add #$01
  1256 15B9 91 12			sta (:bp2),y
  1257
  1258 15BB 4C EF 15			jmp a_0007
  1259 15BE			l_051B
  1260 15BE C9 04			cmp #$04
  1261 15C0 D0 16			jne l_0525
  1262 15C2			@
  1263
  1264 				; optimize OK (main.pas), line = 185
  1265
  1266 15C2 AC 97 17 84 12 AC + 	mwy PLY :bp2
  1267 15CC A0 00			ldy #PLY.X-DATAORIGIN
  1268 15CE B1 12			lda (:bp2),y
  1269 15D0 38 E9 01			sub #$01
  1270 15D3 91 12			sta (:bp2),y
  1271
  1272 15D5 4C EF 15			jmp a_0007
  1273 15D8			l_0525
  1274 15D8 C9 08			cmp #$08
  1275 15DA D0 13			jne l_052F
  1276 15DC			@
  1277
  1278 				; optimize OK (main.pas), line = 186
  1279
  1280 15DC AC 97 17 84 12 AC + 	mwy PLY :bp2
  1281 15E6 A0 00			ldy #PLY.X-DATAORIGIN
  1282 15E8 B1 12			lda (:bp2),y
  1283 15EA 18 69 01			add #$01
  1284 15ED 91 12			sta (:bp2),y
  1285
  1286 15EF			l_052F
  1287 15EF			a_0007
  1288
  1289 				; optimize OK (main.pas), line = 189
  1290
  1291 15EF AC 97 17 84 12 AC + 	mwy PLY :bp2
  1292 15F9 A0 00			ldy #PLY.X-DATAORIGIN
  1293 15FB B1 12			lda (:bp2),y
  1294 15FD 8D BE 17			sta PUTCHAR.X
  1295 1600 A0 01			ldy #PLY.Y-DATAORIGIN
  1296 1602 B1 12			lda (:bp2),y
  1297 1604 8D BF 17			sta PUTCHAR.Y
  1298 1607 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1299 1609 B1 12			lda (:bp2),y
  1300 160B 8D C0 17			sta PUTCHAR.V
  1301 160E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1302 1610 B1 12			lda (:bp2),y
  1303 1612 8D C1 17			sta PUTCHAR.C
  1304 1615 20 33 12			jsr PUTCHAR
  1305 1618			l_03DD
  1306 1618			l_03A2
  1307
  1308 				; ------------------------------------------------------------
  1309
  1310 = 17C7			P	= DATAORIGIN+$0043
  1311 = 17C9			@CASETMP_0006	= DATAORIGIN+$0045
  1312 = 17CA			@CASETMP_0007	= DATAORIGIN+$0046
  1313
  1314 = 17C7			@VarData	= P
  1315 = 0004			@VarDataSize	= 4
  1316
  1317 1618			@exit
  1318 					.ifdef @new
  1319 					lda <@VarData
  1320 					sta :ztmp
  1321 					lda >@VarData
  1322 					ldy #@VarDataSize-1
  1323 					jmp @FreeMem
  1324 					els
  1325 1618 60				rts						; ret
  1326 					eif
  1327 				.endl
  1328 1619			l_0007
  1329
  1330 				; optimize OK (main.pas), line = 200
  1331
  1332 1619 A9 00			lda #$00
  1333 161B 8D 94 17			sta GAMEOVER
  1334
  1335 				; --- RepeatUntilProlog
  1336 161E			l_054D
  1337
  1338 				; optimize OK (main.pas), line = 202
  1339
  1340 161E A9 FF			lda #$FF
  1341 1620 8D 96 17			sta ALIVE
  1342
  1343 				; optimize OK (main.pas), line = 204
  1344
  1345 1623 A9 00			lda #$00
  1346 1625 8D BD 17			sta INITPLAYERS.ISDEAD
  1347 1628 A9 5F			lda #$5F
  1348 162A 8D BC 17			sta INITPLAYERS.COLOUR
  1349 162D A9 51			lda #$51
  1350 162F 8D BB 17			sta INITPLAYERS.HEAD
  1351 1632 A9 01			lda #$01
  1352 1634 8D BA 17			sta INITPLAYERS.BRAIN
  1353 1637 A9 08			lda #$08
  1354 1639 8D B9 17			sta INITPLAYERS.DIR
  1355 163C A9 0C			lda #$0C
  1356 163E 8D B8 17			sta INITPLAYERS.Y
  1357 1641 A9 0A			lda #$0A
  1358 1643 8D B7 17			sta INITPLAYERS.X
  1359 1646 AD 7B 17			lda PLAYER1
  1360 1649 8D B5 17			sta INITPLAYERS.P
  1361 164C AD 7C 17			lda PLAYER1+1
  1362 164F 8D B6 17			sta INITPLAYERS.P+1
  1363 1652 20 F1 11			jsr INITPLAYERS
  1364
  1365 				; optimize OK (main.pas), line = 205
  1366
  1367 1655 A9 00			lda #$00
  1368 1657 8D BD 17			sta INITPLAYERS.ISDEAD
  1369 165A A9 5D			lda #$5D
  1370 165C 8D BC 17			sta INITPLAYERS.COLOUR
  1371 165F A9 51			lda #$51
  1372 1661 8D BB 17			sta INITPLAYERS.HEAD
  1373 1664 A9 01			lda #$01
  1374 1666 8D BA 17			sta INITPLAYERS.BRAIN
  1375 1669 A9 04			lda #$04
  1376 166B 8D B9 17			sta INITPLAYERS.DIR
  1377 166E A9 0C			lda #$0C
  1378 1670 8D B8 17			sta INITPLAYERS.Y
  1379 1673 A9 1E			lda #$1E
  1380 1675 8D B7 17			sta INITPLAYERS.X
  1381 1678 AD 7D 17			lda PLAYER2
  1382 167B 8D B5 17			sta INITPLAYERS.P
  1383 167E AD 7E 17			lda PLAYER2+1
  1384 1681 8D B6 17			sta INITPLAYERS.P+1
  1385 1684 20 F1 11			jsr INITPLAYERS
  1386
  1387 				; optimize OK (main.pas), line = 206
  1388
  1389 1687 A9 01			lda #$01
  1390 1689 8D BD 17			sta INITPLAYERS.ISDEAD
  1391 168C A9 71			lda #$71
  1392 168E 8D BC 17			sta INITPLAYERS.COLOUR
  1393 1691 A9 51			lda #$51
  1394 1693 8D BB 17			sta INITPLAYERS.HEAD
  1395 1696 A9 01			lda #$01
  1396 1698 8D BA 17			sta INITPLAYERS.BRAIN
  1397 169B A9 02			lda #$02
  1398 169D 8D B9 17			sta INITPLAYERS.DIR
  1399 16A0 A9 06			lda #$06
  1400 16A2 8D B8 17			sta INITPLAYERS.Y
  1401 16A5 A9 14			lda #$14
  1402 16A7 8D B7 17			sta INITPLAYERS.X
  1403 16AA AD 7F 17			lda PLAYER3
  1404 16AD 8D B5 17			sta INITPLAYERS.P
  1405 16B0 AD 80 17			lda PLAYER3+1
  1406 16B3 8D B6 17			sta INITPLAYERS.P+1
  1407 16B6 20 F1 11			jsr INITPLAYERS
  1408
  1409 				; optimize OK (main.pas), line = 207
  1410
  1411 16B9 A9 01			lda #$01
  1412 16BB 8D BD 17			sta INITPLAYERS.ISDEAD
  1413 16BE A9 55			lda #$55
  1414 16C0 8D BC 17			sta INITPLAYERS.COLOUR
  1415 16C3 A9 51			lda #$51
  1416 16C5 8D BB 17			sta INITPLAYERS.HEAD
  1417 16C8 A9 01			lda #$01
  1418 16CA 8D BA 17			sta INITPLAYERS.BRAIN
  1419 16CD 8D B9 17			sta INITPLAYERS.DIR
  1420 16D0 A9 12			lda #$12
  1421 16D2 8D B8 17			sta INITPLAYERS.Y
  1422 16D5 A9 14			lda #$14
  1423 16D7 8D B7 17			sta INITPLAYERS.X
  1424 16DA AD 81 17			lda PLAYER4
  1425 16DD 8D B5 17			sta INITPLAYERS.P
  1426 16E0 AD 82 17			lda PLAYER4+1
  1427 16E3 8D B6 17			sta INITPLAYERS.P+1
  1428 16E6 20 F1 11			jsr INITPLAYERS
  1429
  1430 				; optimize OK (main.pas), line = 209
  1431
  1432 16E9 AD 9F 17			lda PLAYER1.ISDEAD
  1433 16EC D0 03			jne l_0588
  1434 16EE EE 96 17			inc ALIVE
  1435 16F1			l_0588
  1436
  1437 				; optimize OK (main.pas), line = 210
  1438
  1439 16F1 AD A6 17			lda PLAYER2.ISDEAD
  1440 16F4 D0 03			jne l_059E
  1441 16F6 EE 96 17			inc ALIVE
  1442 16F9			l_059E
  1443
  1444 				; optimize OK (main.pas), line = 211
  1445
  1446 16F9 AD AD 17			lda PLAYER3.ISDEAD
  1447 16FC D0 03			jne l_05B4
  1448 16FE EE 96 17			inc ALIVE
  1449 1701			l_05B4
  1450
  1451 				; optimize OK (main.pas), line = 212
  1452
  1453 1701 AD B4 17			lda PLAYER4.ISDEAD
  1454 1704 D0 03			jne l_05CA
  1455 1706 EE 96 17			inc ALIVE
  1456 1709			l_05CA
  1457
  1458 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 214
  1459
  1460 1709 20 71 11			jsr INITPLAYFIELD
  1461
  1462 				; --- RepeatUntilProlog
  1463 170C			l_05D3
  1464
  1465 				; optimize OK (main.pas), line = 217
  1466
  1467 170C A9 01			lda #$01
  1468 170E 8D 90 17			sta SYSTEM.PAUSE_006B.N
  1469 1711 A9 00			lda #$00
  1470 1713 8D 91 17			sta SYSTEM.PAUSE_006B.N+1
  1471 1716 20 23 11			jsr SYSTEM.PAUSE_006B
  1472
  1473 				; optimize OK (main.pas), line = 218
  1474
  1475 1719 AD 7B 17			lda PLAYER1
  1476 171C 8D C7 17			sta PLAYERMOVE.P
  1477 171F AD 7C 17			lda PLAYER1+1
  1478 1722 8D C8 17			sta PLAYERMOVE.P+1
  1479 1725 20 31 14			jsr PLAYERMOVE
  1480
  1481 				; optimize OK (main.pas), line = 219
  1482
  1483 1728 AD 7D 17			lda PLAYER2
  1484 172B 8D C7 17			sta PLAYERMOVE.P
  1485 172E AD 7E 17			lda PLAYER2+1
  1486 1731 8D C8 17			sta PLAYERMOVE.P+1
  1487 1734 20 31 14			jsr PLAYERMOVE
  1488
  1489 				; optimize OK (main.pas), line = 220
  1490
  1491 1737 AD 7F 17			lda PLAYER3
  1492 173A 8D C7 17			sta PLAYERMOVE.P
  1493 173D AD 80 17			lda PLAYER3+1
  1494 1740 8D C8 17			sta PLAYERMOVE.P+1
  1495 1743 20 31 14			jsr PLAYERMOVE
  1496
  1497 				; optimize OK (main.pas), line = 221
  1498
  1499 1746 AD 81 17			lda PLAYER4
  1500 1749 8D C7 17			sta PLAYERMOVE.P
  1501 174C AD 82 17			lda PLAYER4+1
  1502 174F 8D C8 17			sta PLAYERMOVE.P+1
  1503 1752 20 31 14			jsr PLAYERMOVE
  1504
  1505 				; optimize OK (main.pas), line = 222
  1506
  1507 1755 AD 96 17			lda ALIVE
  1508 1758 F0 04			jeq l_05D3x
  1509 175A C9 FF			cmp #$FF
  1510 175C D0 AE			jne l_05D3
  1511 175E			l_05D3x
  1512
  1513 				; optimize OK (main.pas), line = 224
  1514
  1515 175E A9 64			lda #$64
  1516 1760 8D 90 17			sta SYSTEM.PAUSE_006B.N
  1517 1763 A9 00			lda #$00
  1518 1765 8D 91 17			sta SYSTEM.PAUSE_006B.N+1
  1519 1768 20 23 11			jsr SYSTEM.PAUSE_006B
  1520
  1521 				; optimize OK (main.pas), line = 225
  1522
  1523 176B AD 94 17			lda GAMEOVER
  1524 176E D0 03 4C 1E 16		jeq l_054D
  1525
  1526 				; ------------------------------------------------------------
  1527
  1528 = 0800			ATTRIBUTE_ADDR	= $0800
  1529 = 0C00			SCREEN_ADDR	= $0C00
  1530 = 0020			EMPTY	= $20
  1531 = 00A0			WALL	= $A0
  1532 = 0041			WALL_COLOUR	= $41
  1533 = 0051			PLY_HEAD	= $51
  1534 = 0057			PLY_CRASH	= $57
  1535 = 0042			PLY_TAIL_UD	= $42
  1536 = 0040			PLY_TAIL_LR	= $40
  1537 = 007D			PLY_TAIL_RD	= $7D
  1538 = 006E			PLY_TAIL_RU	= $6E
  1539 = 006D			PLY_TAIL_LD	= $6D
  1540 = 0070			PLY_TAIL_LU	= $70
  1541 = 005F			PLY1_COLOUR	= $5F
  1542 = 005D			PLY2_COLOUR	= $5D
  1543 = 0071			PLY3_COLOUR	= $71
  1544 = 0055			PLY4_COLOUR	= $55
  1545 = 0001			JOY_UP	= $01
  1546 = 0002			JOY_DOWN	= $02
  1547 = 0004			JOY_LEFT	= $04
  1548 = 0008			JOY_RIGHT	= $08
  1549 = 0040			JOY_FIRE	= $40
  1550 = 0002			JOY_SELECT_1	= $02
  1551 = 0004			JOY_SELECT_2	= $04
  1552 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1553 1773			.var MUL40	= adr.MUL40 .word
  1554 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1555 1773			.var DIRECTION	= adr.DIRECTION .word
  1556 = FD30			KEY_PIO	= $FD30
  1557 = FF08			JOY	= $FF08
  1558 = FF15			BORDERCOLOR	= $FF15
  1559 = FF19			BGCOLOR	= $FF19
  1560 = 0058			T0B	= $58
  1561 = 0059			NEWDIR	= $59
  1562 = 005A			T0N	= $5A
  1563 = 005B			T0W	= $5B
  1564 = 1794			GAMEOVER	= DATAORIGIN+$0010
  1565 = 1795			AVAILDIR	= DATAORIGIN+$0011
  1566 = 1796			ALIVE	= DATAORIGIN+$0012
  1567 = 1797			PLY	= DATAORIGIN+$0013
  1568 = 1784			PLY.X	= DATAORIGIN+$0000
  1569 = 1785			PLY.Y	= DATAORIGIN+$0001
  1570 = 1786			PLY.HEAD	= DATAORIGIN+$0002
  1571 = 1787			PLY.COLOUR	= DATAORIGIN+$0003
  1572 = 1788			PLY.DIR	= DATAORIGIN+$0004
  1573 = 1789			PLY.BRAIN	= DATAORIGIN+$0005
  1574 = 178A			PLY.ISDEAD	= DATAORIGIN+$0006
  1575 = 1799			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1576 1773			.var PLAYER1	= adr.PLAYER1 .word
  1577 = 1799			PLAYER1.X	= DATAORIGIN+$0015
  1578 = 179A			PLAYER1.Y	= DATAORIGIN+$0016
  1579 = 179B			PLAYER1.HEAD	= DATAORIGIN+$0017
  1580 = 179C			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1581 = 179D			PLAYER1.DIR	= DATAORIGIN+$0019
  1582 = 179E			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1583 = 179F			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1584 = 17A0			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1585 1773			.var PLAYER2	= adr.PLAYER2 .word
  1586 = 17A0			PLAYER2.X	= DATAORIGIN+$001C
  1587 = 17A1			PLAYER2.Y	= DATAORIGIN+$001D
  1588 = 17A2			PLAYER2.HEAD	= DATAORIGIN+$001E
  1589 = 17A3			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1590 = 17A4			PLAYER2.DIR	= DATAORIGIN+$0020
  1591 = 17A5			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1592 = 17A6			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1593 = 17A7			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1594 1773			.var PLAYER3	= adr.PLAYER3 .word
  1595 = 17A7			PLAYER3.X	= DATAORIGIN+$0023
  1596 = 17A8			PLAYER3.Y	= DATAORIGIN+$0024
  1597 = 17A9			PLAYER3.HEAD	= DATAORIGIN+$0025
  1598 = 17AA			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1599 = 17AB			PLAYER3.DIR	= DATAORIGIN+$0027
  1600 = 17AC			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1601 = 17AD			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1602 = 17AE			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1603 1773			.var PLAYER4	= adr.PLAYER4 .word
  1604 = 17AE			PLAYER4.X	= DATAORIGIN+$002A
  1605 = 17AF			PLAYER4.Y	= DATAORIGIN+$002B
  1606 = 17B0			PLAYER4.HEAD	= DATAORIGIN+$002C
  1607 = 17B1			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1608 = 17B2			PLAYER4.DIR	= DATAORIGIN+$002E
  1609 = 17B3			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1610 = 17B4			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1611 1773			@exit
  1612
  1613 1773 A2 00		@halt	ldx #$00
  1614 1775 9A				txs
  1615
  1616 1776 60				rts
  1617
  1618 				; ------------------------------------------------------------
  1619
  1620 				; ------------------------------------------------------------
  1621
  1622 1777			.local	@DEFINES
  1623 1777			C4P
  1624 				.endl
  1625
  1626 1777			.local	@RESOURCE
  1627 				.endl
  1628
  1629 = 1777 0E 10		MUL40
  1629 = 1779 40 10		DIRECTION
  1629 = 177B 99 17		PLAYER1
  1629 = 177D A0 17		PLAYER2
  1629 = 177F A7 17		PLAYER3
  1629 = 1781 AE 17		PLAYER4
  1629 				.endl							; MAIN
  1630
  1631 				; ------------------------------------------------------------
  1632 				; ------------------------------------------------------------
  1633
  1634 				.macro	UNITINITIALIZATION
  1635 				
  1636 					.ifdef MAIN.SYSTEM.@UnitInit
  1637 					jsr MAIN.SYSTEM.@UnitInit
  1638 					eif
  1639 				.endm
  1640
  1641 				; ------------------------------------------------------------
  1642
  1643 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1644 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1644 				SYSTEM: $10D5..$1170
  1645 					eif
  1646
  1647 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1647 				CODE: $100E..$1776
  1648
  1649 				; ------------------------------------------------------------
  1650
  1651 1783				.align $04
  1652
  1653 1784			DATAORIGIN
  1654 1784 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1655
  1656 = 0006			VARINITSIZE	= *-DATAORIGIN
  1657 = 0047			VARDATASIZE	= 71
  1658
  1659 = 17CB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1660
  1661 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1661 				DATA: $1784..$17CB
  1662
  1663 				; ------------------------------------------------------------
  1664
  1665 				.macro	STATICDATA
  1666 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1667 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1668 				.by  $C0 $03 $01 $02 $04 $08
  1669 				.endm
  1670
  1671 					end
