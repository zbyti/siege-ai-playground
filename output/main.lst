mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E E3 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0062			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AFE			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 9E			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 60 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 60 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C B7 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 03 2B		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 03 2B 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2B03			RESULT	= DATAORIGIN+$000B
   182
   183 = 2B03			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD 04 2B		loop  lda n
   325 112D 0D 05 2B		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD 04 2B D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2B04			N	= DATAORIGIN+$000C
   339
   340 = 2B04			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D 06 2B			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD 06 2B		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C 07 2B		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD 07 2B 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2B06			RANGE	= DATAORIGIN+$000E
   401 = 2B07			RESULT	= DATAORIGIN+$000F
   402
   403 = 2B06			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2AF8			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2AFA			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AFC			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AFD			FILEMODE	= DATAORIGIN+$0005
   468 = 2AFE			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AFF			IORESULT	= DATAORIGIN+$0007
   470 = 2B00			EOLN	= DATAORIGIN+$0008
   471 = 2B01			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 3B 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 3A 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 3C 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B3A			X	= DATAORIGIN+$0042
   497 = 2B3B			Y	= DATAORIGIN+$0043
   498 = 2B3C			V	= DATAORIGIN+$0044
   499
   500 = 2B3A			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 3E 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 3D 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 40 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 3F 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B3D			X	= DATAORIGIN+$0045
   544 = 2B3E			Y	= DATAORIGIN+$0046
   545 = 2B3F			V	= DATAORIGIN+$0047
   546 = 2B40			C	= DATAORIGIN+$0048
   547
   548 = 2B3D			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 42 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 41 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 43 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 43 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B41			X	= DATAORIGIN+$0049
   604 = 2B42			Y	= DATAORIGIN+$004A
   605 = 2B43			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B41			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD 11 2B			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD 0D 2B			lda PLAYER1.COLOUR
   620 11F1 8D 40 2B			sta PUTCHAR_008E.C
   621 11F4 AD 10 2B			lda PLAYER1.SCORE
   622 11F7 8D 3F 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 3E 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 3D 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD 19 2B			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD 15 2B			lda PLAYER2.COLOUR
   635 120F 8D 40 2B			sta PUTCHAR_008E.C
   636 1212 AD 18 2B			lda PLAYER2.SCORE
   637 1215 8D 3F 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 3E 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 3D 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD 21 2B			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD 1D 2B			lda PLAYER3.COLOUR
   650 122D 8D 40 2B			sta PUTCHAR_008E.C
   651 1230 AD 20 2B			lda PLAYER3.SCORE
   652 1233 8D 3F 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 3E 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 3D 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD 29 2B			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD 25 2B			lda PLAYER4.COLOUR
   665 124B 8D 40 2B			sta PUTCHAR_008E.C
   666 124E AD 28 2B			lda PLAYER4.SCORE
   667 1251 8D 3F 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 3E 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 3D 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 AD 11 2B			lda PLAYER1.ISALIVE
   691 1265 F0 03			jeq l_0146
   692 1267 EE 10 2B			inc PLAYER1.SCORE
   693 126A			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 126A AD 19 2B			lda PLAYER2.ISALIVE
   698 126D F0 03			jeq l_0159
   699 126F EE 18 2B			inc PLAYER2.SCORE
   700 1272			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 1272 AD 21 2B			lda PLAYER3.ISALIVE
   705 1275 F0 03			jeq l_016C
   706 1277 EE 20 2B			inc PLAYER3.SCORE
   707 127A			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 127A AD 29 2B			lda PLAYER4.ISALIVE
   712 127D F0 03			jeq l_017F
   713 127F EE 28 2B			inc PLAYER4.SCORE
   714 1282			l_017F
   715 1282			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 1282 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 1283			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 1283 A9 00			lda #$00
   732 1285 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1287 AC EA 2A 84 12 AC + 	mwy PLY :bp2
   737 1291 A0 01			ldy #PLY.Y-DATAORIGIN
   738 1293 B1 12			lda (:bp2),y
   739 1295 0A				asl @
   740 1296 A8				tay
   741 1297 A9 00			lda #$00
   742 1299 18 79 0E 10			add adr.MUL40,y
   743 129D 85 21			sta :STACKORIGIN+9
   744 129F A9 0C			lda #$0C
   745 12A1 79 0F 10			adc adr.MUL40+1,y
   746 12A4 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 12A6 A0 00			ldy #PLY.X-DATAORIGIN
   748 12A8 A5 21			lda :STACKORIGIN+9
   749 12AA 18 71 12			add (:bp2),y
   750 12AD 85 5D			sta T0W
   751 12AF A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 12B1 69 00			adc #$00
   753 12B3 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 12B5 A5 5D			lda T0W
   758 12B7 38 E9 28			sub #$28
   759 12BA 85 21			sta :STACKORIGIN+9
   760 12BC A5 5E			lda T0W+1
   761 12BE E9 00			sbc #$00
   762 12C0 85 11			sta :bp+1
   763 12C2 A4 21			ldy :STACKORIGIN+9
   764 12C4 B1 10			lda (:bp),y
   765 12C6 C9 20			cmp #$20
   766 12C8 D0 06			jne l_01B6
   767 12CA A5 5C			lda AVAILDIR
   768 12CC 09 01			ora #$01
   769 12CE 85 5C			sta AVAILDIR
   770 12D0			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12D0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12D8 A0 28			ldy #$28
   776 12DA B1 12			lda (:bp2),y
   777 12DC C9 20			cmp #$20
   778 12DE D0 06			jne l_01D9
   779 12E0 A5 5C			lda AVAILDIR
   780 12E2 09 02			ora #$02
   781 12E4 85 5C			sta AVAILDIR
   782 12E6			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12E6 A5 5D			lda T0W
   787 12E8 38 E9 01			sub #$01
   788 12EB 85 21			sta :STACKORIGIN+9
   789 12ED A5 5E			lda T0W+1
   790 12EF E9 00			sbc #$00
   791 12F1 85 11			sta :bp+1
   792 12F3 A4 21			ldy :STACKORIGIN+9
   793 12F5 B1 10			lda (:bp),y
   794 12F7 C9 20			cmp #$20
   795 12F9 D0 06			jne l_01FC
   796 12FB A5 5C			lda AVAILDIR
   797 12FD 09 04			ora #$04
   798 12FF 85 5C			sta AVAILDIR
   799 1301			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 1301 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 1309 A0 01			ldy #$01
   805 130B B1 12			lda (:bp2),y
   806 130D C9 20			cmp #$20
   807 130F D0 06			jne l_021F
   808 1311 A5 5C			lda AVAILDIR
   809 1313 09 08			ora #$08
   810 1315 85 5C			sta AVAILDIR
   811 1317			l_021F
   812 1317			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1317 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1318			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1318 EE 44 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 131B AD 44 2B			lda COUNTER
   833 131E 29 01			and #$01
   834 1320 F0 08			jeq l_024A
   835 1322 A9 56			lda #$56
   836 1324 8D 45 2B			sta OBST
   837 1327 4C 2F 13			jmp l_0258
   838 132A			l_024A
   839 132A A9 5B			lda #$5B
   840 132C 8D 45 2B			sta OBST
   841 132F			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 132F A9 07			lda #$07
   846 1331 85 59			sta I0B
   847
   848 1333			l_0265
   849 				; --- ForToDoCondition
   850 1333 A5 59			lda I0B
   851 1335 0A				asl @
   852 1336 A8				tay
   853 1337 B9 2A 2B			lda adr.OBSTACLES,y
   854 133A 85 21			sta :STACKORIGIN+9
   855 133C B9 2B 2B			lda adr.OBSTACLES+1,y
   856 133F 85 11			sta :bp+1
   857 1341 A4 21			ldy :STACKORIGIN+9
   858 1343 AD 45 2B			lda OBST
   859 1346 91 10			sta (:bp),y
   860 1348 C6 59			dec I0B
   861 134A 10 E7			jpl l_0265
   862 134C			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B44			COUNTER	= DATAORIGIN+$004C
   867 = 2B45			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B44			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 134C			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 134C 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 134D			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 134D AD 47 2B			lda Y
   890 1350 0A				asl @
   891 1351 A8				tay
   892 1352 AD 46 2B			lda X
   893 1355 18 79 0E 10			add adr.MUL40,y
   894 1359 8D 48 2B			sta RESULT
   895 135C A9 0C			lda #$0C
   896 135E 79 0F 10			adc adr.MUL40+1,y
   897 1361 8D 49 2B			sta RESULT+1
   898 1364			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 1364 E8				inx
   906 1365 AD 48 2B 95 18		mva RESULT :STACKORIGIN,x
   907 136A AD 49 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B46			X	= DATAORIGIN+$004E
   920 = 2B47			Y	= DATAORIGIN+$004F
   921 = 2B48			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B46			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 136F 60				rts						; ret
   927 				.endl
   928
   929 1370			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1370 A9 07			lda #$07
   934 1372 85 59			sta I0B
   935
   936 1374			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 1374 A5 59			lda I0B
   942 1376 0A				asl @
   943 1377 A8				tay
   944 1378 B9 2B 2B			lda adr.OBSTACLES+1,y
   945 137B C9 00			cmp #$00
   946 137D D0 05			bne @+
   947 137F B9 2A 2B			lda adr.OBSTACLES,y
   948 1382 C9 7E			cmp #$7E
   949 1384			@
   950 1384 F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 1386 B9 2A 2B			lda adr.OBSTACLES,y
   955 1389 85 21			sta :STACKORIGIN+9
   956 138B B9 2B 2B			lda adr.OBSTACLES+1,y
   957 138E 85 11			sta :bp+1
   958 1390 A4 21			ldy :STACKORIGIN+9
   959 1392 A9 56			lda #$56
   960 1394 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 1396 A5 59			lda I0B
   965 1398 0A				asl @
   966 1399 A8				tay
   967 139A B9 2A 2B			lda adr.OBSTACLES,y
   968 139D 38 E9 00			sub #$00
   969 13A0 85 21			sta :STACKORIGIN+9
   970 13A2 B9 2B 2B			lda adr.OBSTACLES+1,y
   971 13A5 E9 04			sbc #$04
   972 13A7 85 11			sta :bp+1
   973 13A9 A4 21			ldy :STACKORIGIN+9
   974 13AB A9 35			lda #$35
   975 13AD 91 10			sta (:bp),y
   976 13AF			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 13AF C6 59			dec I0B
   980 13B1 10 C1			jpl l_02A6
   981 13B3			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 13B3			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 13B3 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 13B4			.local	DRAWTAIL					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 13B4 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1003 13BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13C0 B1 12			lda (:bp2),y
  1005 13C2 C5 5B			cmp NEWDIR
  1006 13C4 D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13C6 A5 5B			lda NEWDIR
  1011 13C8 29 0C			and #$0C
  1012 13CA F0 07			jeq l_0311
  1013 13CC A9 40			lda #$40
  1014 13CE 85 58			sta T0B
  1015 13D0 4C D7 13			jmp l_031F
  1016 13D3			l_0311
  1017 13D3 A9 42			lda #$42
  1018 13D5 85 58			sta T0B
  1019 13D7			l_031F
  1020 13D7 4C 4A 14			jmp l_032C
  1021 13DA			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13DA AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1026 13E4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13E6 B1 12			lda (:bp2),y
  1028 13E8 29 0A			and #$0A
  1029 13EA F0 0A			jeq l_0352
  1030 13EC A5 5B			lda NEWDIR
  1031 13EE 29 05			and #$05
  1032 13F0 F0 04			jeq l_0352
  1033 13F2 A9 7D			lda #$7D
  1034 13F4 85 58			sta T0B
  1035 13F6			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13F6 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1040 1400 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 1402 B1 12			lda (:bp2),y
  1042 1404 29 09			and #$09
  1043 1406 F0 0A			jeq l_037F
  1044 1408 A5 5B			lda NEWDIR
  1045 140A 29 06			and #$06
  1046 140C F0 04			jeq l_037F
  1047 140E A9 6E			lda #$6E
  1048 1410 85 58			sta T0B
  1049 1412			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 1412 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1054 141C A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 141E B1 12			lda (:bp2),y
  1056 1420 29 06			and #$06
  1057 1422 F0 0A			jeq l_03AC
  1058 1424 A5 5B			lda NEWDIR
  1059 1426 29 09			and #$09
  1060 1428 F0 04			jeq l_03AC
  1061 142A A9 6D			lda #$6D
  1062 142C 85 58			sta T0B
  1063 142E			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 142E AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1068 1438 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 143A B1 12			lda (:bp2),y
  1070 143C 29 05			and #$05
  1071 143E F0 0A			jeq l_03D9
  1072 1440 A5 5B			lda NEWDIR
  1073 1442 29 0A			and #$0A
  1074 1444 F0 04			jeq l_03D9
  1075 1446 A9 70			lda #$70
  1076 1448 85 58			sta T0B
  1077 144A			l_03D9
  1078 144A			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 100
  1081
  1082 144A AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1083 1454 A0 00			ldy #PLY.X-DATAORIGIN
  1084 1456 B1 12			lda (:bp2),y
  1085 1458 8D 41 2B			sta GETCHAR.X
  1086 145B A0 01			ldy #PLY.Y-DATAORIGIN
  1087 145D B1 12			lda (:bp2),y
  1088 145F 8D 42 2B			sta GETCHAR.Y
  1089 1462 20 C4 11			jsr GETCHAR
  1090 1465 CA				dex
  1091 1466 B5 19			lda :STACKORIGIN+1,x
  1092 1468 C9 2A			cmp #$2A
  1093 146A F0 20			jeq l_03F6
  1094 146C			@
  1095 146C AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1096 1476 A0 00			ldy #PLY.X-DATAORIGIN
  1097 1478 B1 12			lda (:bp2),y
  1098 147A 8D 3A 2B			sta PUTCHAR_0072.X
  1099 147D A0 01			ldy #PLY.Y-DATAORIGIN
  1100 147F B1 12			lda (:bp2),y
  1101 1481 8D 3B 2B			sta PUTCHAR_0072.Y
  1102 1484 A5 58			lda T0B
  1103 1486 8D 3C 2B			sta PUTCHAR_0072.V
  1104 1489 20 78 11			jsr PUTCHAR_0072
  1105 148C			l_03F6
  1106 148C			@exit
  1107 					.ifdef @new
  1108 					lda <@VarData
  1109 					sta :ztmp
  1110 					lda >@VarData
  1111 					ldy #@VarDataSize-1
  1112 					jmp @FreeMem
  1113 					els
  1114 148C 60				rts						; ret
  1115 					eif
  1116 				.endl
  1117
  1118 148D			.local	CHECKJOYSTATUS					; PROCEDURE
  1119
  1120 				; optimize OK (tools.inc), line = 107
  1121
  1122 148D A9 02			lda #$02
  1123 148F 8D 08 FF			sta JOY
  1124 1492 A9 FF			lda #$FF
  1125 1494 8D 30 FD			sta KEYSCAN
  1126
  1127 				; optimize OK (tools.inc), line = 108
  1128
  1129 1497 AD 08 FF			lda JOY
  1130 149A 49 FF			eor #$FF
  1131 149C 85 63			sta JOYSTATUS
  1132 149E			@exit
  1133 					.ifdef @new
  1134 					lda <@VarData
  1135 					sta :ztmp
  1136 					lda >@VarData
  1137 					ldy #@VarDataSize-1
  1138 					jmp @FreeMem
  1139 					els
  1140 149E 60				rts						; ret
  1141 					eif
  1142 				.endl
  1143
  1144 149F			.local	SETPLAYER					; PROCEDURE
  1145
  1146 				; optimize OK (tools.inc), line = 115
  1147
  1148 149F AD 4A 2B			lda P
  1149 14A2 8D EA 2A			sta PLY
  1150 14A5 85 12			sta :bp2
  1151 14A7 AD 4B 2B			lda P+1
  1152 14AA 8D EB 2A			sta PLY+1
  1153 14AD 85 13			sta :bp2+1
  1154 				; optimize OK (tools.inc), line = 116
  1155 14AF A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1156 14B1 AD 4F 2B			lda BRAIN
  1157 14B4 91 12			sta (:bp2),y
  1158 14B6 A0 00			ldy #PLY.X-DATAORIGIN
  1159 14B8 AD 4C 2B			lda X
  1160 14BB 91 12			sta (:bp2),y
  1161 14BD A0 01			ldy #PLY.Y-DATAORIGIN
  1162 14BF AD 4D 2B			lda Y
  1163 14C2 91 12			sta (:bp2),y
  1164 14C4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1165 14C6 AD 4E 2B			lda DIR
  1166 14C9 91 12			sta (:bp2),y
  1167
  1168 				; optimize OK (tools.inc), line = 117
  1169
  1170 14CB A0 02			ldy #PLY.HEAD-DATAORIGIN
  1171 14CD AD 50 2B			lda HEAD
  1172 14D0 91 12			sta (:bp2),y
  1173 14D2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1174 14D4 AD 51 2B			lda COLOUR
  1175 14D7 91 12			sta (:bp2),y
  1176 14D9 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1177 14DB AD 52 2B			lda ISALIVE
  1178 14DE 91 12			sta (:bp2),y
  1179
  1180 				; optimize OK (tools.inc), line = 118
  1181
  1182 14E0 AD 52 2B			lda ISALIVE
  1183 14E3 F0 1D			jeq l_0458
  1184
  1185 				; optimize FAIL (0, tools.inc), line = 119
  1186
  1187 14E5 E6 5A			inc ALIVE
  1188 14E7 AD 51 2B			lda COLOUR
  1189 14EA 8D 40 2B			sta PUTCHAR_008E.C
  1190 14ED AD 50 2B			lda HEAD
  1191 14F0 8D 3F 2B			sta PUTCHAR_008E.V
  1192 14F3 AD 4D 2B			lda Y
  1193 14F6 8D 3E 2B			sta PUTCHAR_008E.Y
  1194 14F9 AD 4C 2B			lda X
  1195 14FC 8D 3D 2B			sta PUTCHAR_008E.X
  1196 14FF 20 99 11			jsr PUTCHAR_008E
  1197 1502			l_0458
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 = 2B4A			P	= DATAORIGIN+$0052
  1202 = 2B4C			X	= DATAORIGIN+$0054
  1203 = 2B4D			Y	= DATAORIGIN+$0055
  1204 = 2B4E			DIR	= DATAORIGIN+$0056
  1205 = 2B4F			BRAIN	= DATAORIGIN+$0057
  1206 = 2B50			HEAD	= DATAORIGIN+$0058
  1207 = 2B51			COLOUR	= DATAORIGIN+$0059
  1208 = 2B52			ISALIVE	= DATAORIGIN+$005A
  1209
  1210 = 2B4A			@VarData	= P
  1211 = 0009			@VarDataSize	= 9
  1212
  1213 1502			@exit
  1214 					.ifdef @new
  1215 					lda <@VarData
  1216 					sta :ztmp
  1217 					lda >@VarData
  1218 					ldy #@VarDataSize-1
  1219 					jmp @FreeMem
  1220 					els
  1221 1502 60				rts						; ret
  1222 					eif
  1223 				.endl
  1224
  1225 1503			.local	ISGAMEOVER					; FUNCTION
  1226
  1227 				; optimize OK (tools.inc), line = 127
  1228
  1229 1503 AD 10 2B			lda PLAYER1.SCORE
  1230 1506 C9 39			cmp #$39
  1231 1508 D0 05			jne l_0482
  1232 150A A9 01			lda #$01
  1233 150C 8D 09 2B			sta GAMEOVER
  1234 150F			l_0482
  1235
  1236 				; optimize OK (tools.inc), line = 128
  1237
  1238 150F AD 18 2B			lda PLAYER2.SCORE
  1239 1512 C9 39			cmp #$39
  1240 1514 D0 05			jne l_049B
  1241 1516 A9 01			lda #$01
  1242 1518 8D 09 2B			sta GAMEOVER
  1243 151B			l_049B
  1244
  1245 				; optimize OK (tools.inc), line = 129
  1246
  1247 151B AD 20 2B			lda PLAYER3.SCORE
  1248 151E C9 39			cmp #$39
  1249 1520 D0 05			jne l_04B4
  1250 1522 A9 01			lda #$01
  1251 1524 8D 09 2B			sta GAMEOVER
  1252 1527			l_04B4
  1253
  1254 				; optimize OK (tools.inc), line = 130
  1255
  1256 1527 AD 28 2B			lda PLAYER4.SCORE
  1257 152A C9 39			cmp #$39
  1258 152C D0 05			jne l_04CD
  1259 152E A9 01			lda #$01
  1260 1530 8D 09 2B			sta GAMEOVER
  1261 1533			l_04CD
  1262
  1263 				; optimize OK (tools.inc), line = 131
  1264
  1265 1533 AD 09 2B			lda GAMEOVER
  1266 1536 8D 53 2B			sta RESULT
  1267 1539			@exit
  1268
  1269 				; ------------------------------------------------------------
  1270
  1271 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1272 				; as Pointer
  1273
  1274 1539 E8				inx
  1275 153A AD 53 2B 95 18		mva RESULT :STACKORIGIN,x
  1276
  1277 					.ifdef @new
  1278 					lda <@VarData
  1279 					sta :ztmp
  1280 					lda >@VarData
  1281 					ldy #@VarDataSize-1
  1282 					jmp @FreeMem
  1283 					eif
  1284
  1285 				; ------------------------------------------------------------
  1286
  1287 = 2B53			RESULT	= DATAORIGIN+$005B
  1288
  1289 = 2B53			@VarData	= RESULT
  1290 = 0001			@VarDataSize	= 1
  1291
  1292 153F 60				rts						; ret
  1293 				.endl
  1294
  1295 1540			.local	ISONELEFT					; FUNCTION
  1296
  1297 				; optimize OK (tools.inc), line = 138
  1298
  1299 1540 A0 01			ldy #1
  1300 1542 A5 5A			lda ALIVE
  1301 1544 F0 01			beq @+
  1302 1546 88				dey
  1303 1547			@
  1304 1547 84 21			sty :STACKORIGIN+9
  1305 1549 A0 01			ldy #1
  1306 154B A5 5A			lda ALIVE
  1307 154D C9 FF			cmp #$FF
  1308 154F F0 01			beq @+
  1309 1551 88				dey
  1310 1552			@
  1311 1552 98				tya
  1312 1553 05 21			ora :STACKORIGIN+9
  1313 1555 8D 54 2B			sta RESULT
  1314 1558			@exit
  1315
  1316 				; ------------------------------------------------------------
  1317
  1318 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1319 				; as Pointer
  1320
  1321 1558 E8				inx
  1322 1559 AD 54 2B 95 18		mva RESULT :STACKORIGIN,x
  1323
  1324 					.ifdef @new
  1325 					lda <@VarData
  1326 					sta :ztmp
  1327 					lda >@VarData
  1328 					ldy #@VarDataSize-1
  1329 					jmp @FreeMem
  1330 					eif
  1331
  1332 				; ------------------------------------------------------------
  1333
  1334 = 2B54			RESULT	= DATAORIGIN+$005C
  1335
  1336 = 2B54			@VarData	= RESULT
  1337 = 0001			@VarDataSize	= 1
  1338
  1339 155E 60				rts						; ret
  1340 				.endl
  1341
  1342 155F			.local	AISTRAIGHT					; PROCEDURE
  1343
  1344 				; optimize OK (ai.inc), line = 5
  1345
  1346 155F AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1347 1569 A0 04			ldy #PLY.DIR-DATAORIGIN
  1348 156B B1 12			lda (:bp2),y
  1349 156D 25 5C			and AVAILDIR
  1350 156F F0 07			jeq l_0518
  1351 1571 B1 12			lda (:bp2),y
  1352 1573 85 5B			sta NEWDIR
  1353 1575 4C E3 15			jmp l_0528
  1354 1578			l_0518
  1355
  1356 				; optimize OK (ai.inc), line = 7
  1357
  1358 1578 A5 5C			lda AVAILDIR
  1359 157A C9 03			cmp #$03
  1360 157C D0 10			jne l_053A
  1361 157E A9 02			lda #$02
  1362 1580 20 47 11			jsr SYSTEM.RANDOM_006D
  1363 1583 B4 18			ldy :STACKORIGIN,x
  1364 1585 B9 40 10			lda adr.DIRECTION,y
  1365 1588 85 5B			sta NEWDIR
  1366 158A CA				dex
  1367 158B 4C A6 15			jmp l_054C
  1368 158E			l_053A
  1369
  1370 				; optimize OK (ai.inc), line = 9
  1371
  1372 158E A5 5C			lda AVAILDIR
  1373 1590 8D 55 2B			sta @CASETMP_0003
  1374 1593 C9 01			cmp #$01
  1375 1595 D0 07			jne l_0557
  1376 1597			@
  1377
  1378 				; optimize OK (ai.inc), line = 10
  1379
  1380 1597 A9 01			lda #$01
  1381 1599 85 5B			sta NEWDIR
  1382
  1383 159B 4C A6 15			jmp a_0003
  1384 159E			l_0557
  1385 159E C9 02			cmp #$02
  1386 15A0 D0 04			jne l_0564
  1387 15A2			@
  1388
  1389 				; optimize OK (ai.inc), line = 11
  1390
  1391 15A2 A9 02			lda #$02
  1392 15A4 85 5B			sta NEWDIR
  1393
  1394 15A6			l_0564
  1395 15A6			a_0003
  1396 15A6			l_054C
  1397
  1398 				; optimize OK (ai.inc), line = 14
  1399
  1400 15A6 A5 5C			lda AVAILDIR
  1401 15A8 C9 0C			cmp #$0C
  1402 15AA D0 1F			jne l_0580
  1403 15AC A9 02			lda #$02
  1404 15AE 20 47 11			jsr SYSTEM.RANDOM_006D
  1405 15B1 E8				inx
  1406 15B2 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1407 15B6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1408 15BA 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1409 15BC 20 44 10			jsr addAX_CX
  1410 15BF CA				dex
  1411 15C0 B4 18			ldy :STACKORIGIN,x
  1412 15C2 B9 40 10			lda adr.DIRECTION,y
  1413 15C5 85 5B			sta NEWDIR
  1414 15C7 CA				dex
  1415 15C8 4C E3 15			jmp l_0596
  1416 15CB			l_0580
  1417
  1418 				; optimize OK (ai.inc), line = 16
  1419
  1420 15CB A5 5C			lda AVAILDIR
  1421 15CD 8D 56 2B			sta @CASETMP_0004
  1422 15D0 C9 04			cmp #$04
  1423 15D2 D0 07			jne l_05A1
  1424 15D4			@
  1425
  1426 				; optimize OK (ai.inc), line = 17
  1427
  1428 15D4 A9 04			lda #$04
  1429 15D6 85 5B			sta NEWDIR
  1430
  1431 15D8 4C E3 15			jmp a_0004
  1432 15DB			l_05A1
  1433 15DB C9 08			cmp #$08
  1434 15DD D0 04			jne l_05AE
  1435 15DF			@
  1436
  1437 				; optimize OK (ai.inc), line = 18
  1438
  1439 15DF A9 08			lda #$08
  1440 15E1 85 5B			sta NEWDIR
  1441
  1442 15E3			l_05AE
  1443 15E3			a_0004
  1444 15E3			l_0596
  1445 15E3			l_0528
  1446
  1447 				; ------------------------------------------------------------
  1448
  1449 = 2B55			@CASETMP_0003	= DATAORIGIN+$005D
  1450 = 2B56			@CASETMP_0004	= DATAORIGIN+$005E
  1451
  1452 = 2B55			@VarData	= @CASETMP_0003
  1453 = 0002			@VarDataSize	= 2
  1454
  1455 15E3			@exit
  1456 					.ifdef @new
  1457 					lda <@VarData
  1458 					sta :ztmp
  1459 					lda >@VarData
  1460 					ldy #@VarDataSize-1
  1461 					jmp @FreeMem
  1462 					els
  1463 15E3 60				rts						; ret
  1464 					eif
  1465 				.endl
  1466
  1467 15E4			.local	AISAPPER					; PROCEDURE
  1468
  1469 				; optimize OK (ai.inc), line = 31
  1470
  1471 15E4 A9 00			lda #$00
  1472 15E6 8D 57 2B			sta L
  1473 15E9 8D 58 2B			sta R
  1474 15EC 8D 59 2B			sta U
  1475 15EF 8D 5A 2B			sta D
  1476
  1477 				; optimize OK (ai.inc), line = 32
  1478
  1479 15F2 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1480 15FC A0 01			ldy #PLY.Y-DATAORIGIN
  1481 15FE B1 12			lda (:bp2),y
  1482 1600 0A				asl @
  1483 1601 A8				tay
  1484 1602 A9 00			lda #$00
  1485 1604 18 79 0E 10			add adr.MUL40,y
  1486 1608 85 21			sta :STACKORIGIN+9
  1487 160A A9 0C			lda #$0C
  1488 160C 79 0F 10			adc adr.MUL40+1,y
  1489 160F 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1490 1611 A0 00			ldy #PLY.X-DATAORIGIN
  1491 1613 A5 21			lda :STACKORIGIN+9
  1492 1615 18 71 12			add (:bp2),y
  1493 1618 85 5D			sta T0W
  1494 161A A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1495 161C 69 00			adc #$00
  1496 161E 85 5E			sta T0W+1
  1497
  1498 				; optimize OK (ai.inc), line = 34
  1499
  1500 1620 A5 5C			lda AVAILDIR
  1501 1622 29 01			and #$01
  1502 1624 F0 73			jeq l_05F4
  1503
  1504 				; optimize OK (ai.inc), line = 35
  1505
  1506 1626 A9 05			lda #$05
  1507 1628 85 59			sta I0B
  1508
  1509 162A			l_05FE
  1510 				; --- ForToDoCondition
  1511 162A A5 59			lda I0B
  1512 162C C9 01			cmp #$01
  1513 162E 90 69			jcc l_060C
  1514
  1515 				; optimize OK (ai.inc), line = 36
  1516
  1517 1630 0A				asl @
  1518 1631 A8				tay
  1519 1632 A5 5D			lda T0W
  1520 1634 38 F9 0E 10			sub adr.MUL40,y
  1521 1638 85 21			sta :STACKORIGIN+9
  1522 163A A5 5E			lda T0W+1
  1523 163C F9 0F 10			sbc adr.MUL40+1,y
  1524 163F 85 11			sta :bp+1
  1525 1641 A4 21			ldy :STACKORIGIN+9
  1526 1643 B1 10			lda (:bp),y
  1527 1645 C9 20			cmp #$20
  1528 1647 D0 03			jne l_0626
  1529 1649 EE 59 2B			inc U
  1530 164C			l_0626
  1531
  1532 				; optimize OK (ai.inc), line = 37
  1533
  1534 164C A5 59			lda I0B
  1535 164E 0A				asl @
  1536 164F A8				tay
  1537 1650 A5 5D			lda T0W
  1538 1652 38 F9 0E 10			sub adr.MUL40,y
  1539 1656 85 21			sta :STACKORIGIN+9
  1540 1658 A5 5E			lda T0W+1
  1541 165A F9 0F 10			sbc adr.MUL40+1,y
  1542 165D 85 11			sta :bp+1
  1543 165F A5 21			lda :STACKORIGIN+9
  1544 1661 18 69 01			add #$01
  1545 1664 A8				tay
  1546 1665 90 02			scc
  1547 1667 E6 11			inc :bp+1
  1548 1669 B1 10			lda (:bp),y
  1549 166B C9 20			cmp #$20
  1550 166D D0 03			jne l_064B
  1551 166F EE 59 2B			inc U
  1552 1672			l_064B
  1553
  1554 				; optimize OK (ai.inc), line = 38
  1555
  1556 1672 A5 59			lda I0B
  1557 1674 0A				asl @
  1558 1675 A8				tay
  1559 1676 A5 5D			lda T0W
  1560 1678 38 F9 0E 10			sub adr.MUL40,y
  1561 167C 85 21			sta :STACKORIGIN+9
  1562 167E A5 5E			lda T0W+1
  1563 1680 F9 0F 10			sbc adr.MUL40+1,y
  1564 1683 85 11			sta :bp+1
  1565 1685 A4 21			ldy :STACKORIGIN+9
  1566 1687 88				dey
  1567 1688 B0 02			scs
  1568 168A C6 11			dec :bp+1
  1569 168C B1 10			lda (:bp),y
  1570 168E C9 20			cmp #$20
  1571 1690 D0 03			jne l_0670
  1572 1692 EE 59 2B			inc U
  1573 1695			l_0670
  1574
  1575 				; --- ForToDoEpilog
  1576 1695 C6 59			dec I0B
  1577 1697 10 91			jpl l_05FE
  1578 1699			l_060C
  1579 1699			l_05F4
  1580
  1581 				; optimize OK (ai.inc), line = 42
  1582
  1583 1699 A5 5C			lda AVAILDIR
  1584 169B 29 02			and #$02
  1585 169D F0 73			jeq l_0694
  1586
  1587 				; optimize OK (ai.inc), line = 43
  1588
  1589 169F A9 05			lda #$05
  1590 16A1 85 59			sta I0B
  1591
  1592 16A3			l_069E
  1593 				; --- ForToDoCondition
  1594 16A3 A5 59			lda I0B
  1595 16A5 C9 01			cmp #$01
  1596 16A7 90 69			jcc l_06AC
  1597
  1598 				; optimize OK (ai.inc), line = 44
  1599
  1600 16A9 0A				asl @
  1601 16AA A8				tay
  1602 16AB A5 5D			lda T0W
  1603 16AD 18 79 0E 10			add adr.MUL40,y
  1604 16B1 85 21			sta :STACKORIGIN+9
  1605 16B3 A5 5E			lda T0W+1
  1606 16B5 79 0F 10			adc adr.MUL40+1,y
  1607 16B8 85 11			sta :bp+1
  1608 16BA A4 21			ldy :STACKORIGIN+9
  1609 16BC B1 10			lda (:bp),y
  1610 16BE C9 20			cmp #$20
  1611 16C0 D0 03			jne l_06C6
  1612 16C2 EE 5A 2B			inc D
  1613 16C5			l_06C6
  1614
  1615 				; optimize OK (ai.inc), line = 45
  1616
  1617 16C5 A5 59			lda I0B
  1618 16C7 0A				asl @
  1619 16C8 A8				tay
  1620 16C9 A5 5D			lda T0W
  1621 16CB 18 79 0E 10			add adr.MUL40,y
  1622 16CF 85 21			sta :STACKORIGIN+9
  1623 16D1 A5 5E			lda T0W+1
  1624 16D3 79 0F 10			adc adr.MUL40+1,y
  1625 16D6 85 11			sta :bp+1
  1626 16D8 A5 21			lda :STACKORIGIN+9
  1627 16DA 18 69 01			add #$01
  1628 16DD A8				tay
  1629 16DE 90 02			scc
  1630 16E0 E6 11			inc :bp+1
  1631 16E2 B1 10			lda (:bp),y
  1632 16E4 C9 20			cmp #$20
  1633 16E6 D0 03			jne l_06EB
  1634 16E8 EE 5A 2B			inc D
  1635 16EB			l_06EB
  1636
  1637 				; optimize OK (ai.inc), line = 46
  1638
  1639 16EB A5 59			lda I0B
  1640 16ED 0A				asl @
  1641 16EE A8				tay
  1642 16EF A5 5D			lda T0W
  1643 16F1 18 79 0E 10			add adr.MUL40,y
  1644 16F5 85 21			sta :STACKORIGIN+9
  1645 16F7 A5 5E			lda T0W+1
  1646 16F9 79 0F 10			adc adr.MUL40+1,y
  1647 16FC 85 11			sta :bp+1
  1648 16FE A4 21			ldy :STACKORIGIN+9
  1649 1700 88				dey
  1650 1701 B0 02			scs
  1651 1703 C6 11			dec :bp+1
  1652 1705 B1 10			lda (:bp),y
  1653 1707 C9 20			cmp #$20
  1654 1709 D0 03			jne l_0710
  1655 170B EE 5A 2B			inc D
  1656 170E			l_0710
  1657
  1658 				; --- ForToDoEpilog
  1659 170E C6 59			dec I0B
  1660 1710 10 91			jpl l_069E
  1661 1712			l_06AC
  1662 1712			l_0694
  1663
  1664 				; optimize OK (ai.inc), line = 50
  1665
  1666 1712 A5 5C			lda AVAILDIR
  1667 1714 29 04			and #$04
  1668 1716 F0 5F			jeq l_0734
  1669
  1670 				; optimize OK (ai.inc), line = 51
  1671
  1672 1718 A9 05			lda #$05
  1673 171A 85 59			sta I0B
  1674
  1675 171C			l_073E
  1676 				; --- ForToDoCondition
  1677 171C A5 59			lda I0B
  1678 171E C9 01			cmp #$01
  1679 1720 90 55			jcc l_074C
  1680
  1681 				; optimize OK (ai.inc), line = 52
  1682
  1683 1722 A5 5D			lda T0W
  1684 1724 38 E5 59			sub I0B
  1685 1727 A8				tay
  1686 1728 A5 5E			lda T0W+1
  1687 172A E9 00			sbc #$00
  1688 172C 85 11			sta :bp+1
  1689 172E B1 10			lda (:bp),y
  1690 1730 C9 20			cmp #$20
  1691 1732 D0 03			jne l_0764
  1692 1734 EE 57 2B			inc L
  1693 1737			l_0764
  1694
  1695 				; optimize OK (ai.inc), line = 53
  1696
  1697 1737 A5 5D			lda T0W
  1698 1739 38 E5 59			sub I0B
  1699 173C A8				tay
  1700 173D A5 5E			lda T0W+1
  1701 173F E9 00			sbc #$00
  1702 1741 85 11			sta :bp+1
  1703 1743 98				tya
  1704 1744 18 69 28			add #$28
  1705 1747 A8				tay
  1706 1748 90 02			scc
  1707 174A E6 11			inc :bp+1
  1708 174C B1 10			lda (:bp),y
  1709 174E C9 20			cmp #$20
  1710 1750 D0 03			jne l_0787
  1711 1752 EE 57 2B			inc L
  1712 1755			l_0787
  1713
  1714 				; optimize OK (ai.inc), line = 54
  1715
  1716 1755 A5 5D			lda T0W
  1717 1757 38 E5 59			sub I0B
  1718 175A A8				tay
  1719 175B A5 5E			lda T0W+1
  1720 175D E9 00			sbc #$00
  1721 175F 85 11			sta :bp+1
  1722 1761 98				tya
  1723 1762 38 E9 28			sub #$28
  1724 1765 A8				tay
  1725 1766 B0 02			scs
  1726 1768 C6 11			dec :bp+1
  1727 176A B1 10			lda (:bp),y
  1728 176C C9 20			cmp #$20
  1729 176E D0 03			jne l_07AA
  1730 1770 EE 57 2B			inc L
  1731 1773			l_07AA
  1732
  1733 				; --- ForToDoEpilog
  1734 1773 C6 59			dec I0B
  1735 1775 10 A5			jpl l_073E
  1736 1777			l_074C
  1737 1777			l_0734
  1738
  1739 				; optimize OK (ai.inc), line = 58
  1740
  1741 1777 A5 5C			lda AVAILDIR
  1742 1779 29 08			and #$08
  1743 177B F0 5D			jeq l_07CE
  1744
  1745 				; optimize OK (ai.inc), line = 59
  1746
  1747 177D A9 05			lda #$05
  1748 177F 85 59			sta I0B
  1749
  1750 1781			l_07D8
  1751 				; --- ForToDoCondition
  1752 1781 A5 59			lda I0B
  1753 1783 C9 01			cmp #$01
  1754 1785 90 53			jcc l_07E6
  1755
  1756 				; optimize OK (ai.inc), line = 60
  1757
  1758 1787 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1759 178F A4 59			ldy I0B
  1760 1791 B1 12			lda (:bp2),y
  1761 1793 C9 20			cmp #$20
  1762 1795 D0 03			jne l_07FE
  1763 1797 EE 58 2B			inc R
  1764 179A			l_07FE
  1765
  1766 				; optimize OK (ai.inc), line = 61
  1767
  1768 179A A5 5D			lda T0W
  1769 179C 18 65 59			add I0B
  1770 179F A8				tay
  1771 17A0 A5 5E			lda T0W+1
  1772 17A2 69 00			adc #$00
  1773 17A4 85 11			sta :bp+1
  1774 17A6 98				tya
  1775 17A7 18 69 28			add #$28
  1776 17AA A8				tay
  1777 17AB 90 02			scc
  1778 17AD E6 11			inc :bp+1
  1779 17AF B1 10			lda (:bp),y
  1780 17B1 C9 20			cmp #$20
  1781 17B3 D0 03			jne l_0821
  1782 17B5 EE 58 2B			inc R
  1783 17B8			l_0821
  1784
  1785 				; optimize OK (ai.inc), line = 62
  1786
  1787 17B8 A5 5D			lda T0W
  1788 17BA 18 65 59			add I0B
  1789 17BD A8				tay
  1790 17BE A5 5E			lda T0W+1
  1791 17C0 69 00			adc #$00
  1792 17C2 85 11			sta :bp+1
  1793 17C4 98				tya
  1794 17C5 38 E9 28			sub #$28
  1795 17C8 A8				tay
  1796 17C9 B0 02			scs
  1797 17CB C6 11			dec :bp+1
  1798 17CD B1 10			lda (:bp),y
  1799 17CF C9 20			cmp #$20
  1800 17D1 D0 03			jne l_0844
  1801 17D3 EE 58 2B			inc R
  1802 17D6			l_0844
  1803
  1804 				; --- ForToDoEpilog
  1805 17D6 C6 59			dec I0B
  1806 17D8 10 A7			jpl l_07D8
  1807 17DA			l_07E6
  1808 17DA			l_07CE
  1809
  1810 				; optimize OK (ai.inc), line = 66
  1811
  1812 17DA AD 5A 2B			lda D
  1813 17DD 85 58			sta T0B
  1814
  1815 				; optimize OK (ai.inc), line = 67
  1816
  1817 17DF CD 59 2B			cmp U
  1818 17E2 B0 05			jcs l_086C
  1819 17E4 AD 59 2B			lda U
  1820 17E7 85 58			sta T0B
  1821 17E9			l_086C
  1822
  1823 				; optimize OK (ai.inc), line = 68
  1824
  1825 17E9 A5 58			lda T0B
  1826 17EB CD 57 2B			cmp L
  1827 17EE B0 05			jcs l_0889
  1828 17F0 AD 57 2B			lda L
  1829 17F3 85 58			sta T0B
  1830 17F5			l_0889
  1831
  1832 				; optimize OK (ai.inc), line = 69
  1833
  1834 17F5 A5 58			lda T0B
  1835 17F7 CD 58 2B			cmp R
  1836 17FA B0 05			jcs l_08A6
  1837 17FC AD 58 2B			lda R
  1838 17FF 85 58			sta T0B
  1839 1801			l_08A6
  1840
  1841 				; optimize OK (ai.inc), line = 71
  1842
  1843 1801 A5 58			lda T0B
  1844 1803 CD 5A 2B			cmp D
  1845 1806 D0 04			jne l_08C3
  1846 1808 A9 02			lda #$02
  1847 180A 85 58			sta T0B
  1848 180C			l_08C3
  1849
  1850 				; optimize OK (ai.inc), line = 72
  1851
  1852 180C A5 58			lda T0B
  1853 180E CD 59 2B			cmp U
  1854 1811 D0 04			jne l_08DE
  1855 1813 A9 01			lda #$01
  1856 1815 85 58			sta T0B
  1857 1817			l_08DE
  1858
  1859 				; optimize OK (ai.inc), line = 73
  1860
  1861 1817 A5 58			lda T0B
  1862 1819 CD 57 2B			cmp L
  1863 181C D0 04			jne l_08F9
  1864 181E A9 04			lda #$04
  1865 1820 85 58			sta T0B
  1866 1822			l_08F9
  1867
  1868 				; optimize OK (ai.inc), line = 74
  1869
  1870 1822 A5 58			lda T0B
  1871 1824 CD 58 2B			cmp R
  1872 1827 D0 04			jne l_0914
  1873 1829 A9 08			lda #$08
  1874 182B 85 58			sta T0B
  1875 182D			l_0914
  1876
  1877 				; optimize OK (ai.inc), line = 76
  1878
  1879 182D A5 5C			lda AVAILDIR
  1880 182F 25 58			and T0B
  1881 1831 F0 07			jeq l_0933
  1882 1833 A5 58			lda T0B
  1883 1835 85 5B			sta NEWDIR
  1884 1837 4C 3D 18			jmp l_0943
  1885 183A			l_0933
  1886
  1887 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1888
  1889 183A 20 5F 15			jsr AISTRAIGHT
  1890 183D			l_0943
  1891
  1892 				; ------------------------------------------------------------
  1893
  1894 = 2B57			L	= DATAORIGIN+$005F
  1895 = 2B58			R	= DATAORIGIN+$0060
  1896 = 2B59			U	= DATAORIGIN+$0061
  1897 = 2B5A			D	= DATAORIGIN+$0062
  1898 = 0001			@FORTMP_05FB	= $01
  1899 = 0001			@FORTMP_069B	= $01
  1900 = 0001			@FORTMP_073B	= $01
  1901 = 0001			@FORTMP_07D5	= $01
  1902
  1903 = 2B57			@VarData	= L
  1904 = 0004			@VarDataSize	= 4
  1905
  1906 183D			@exit
  1907 					.ifdef @new
  1908 					lda <@VarData
  1909 					sta :ztmp
  1910 					lda >@VarData
  1911 					ldy #@VarDataSize-1
  1912 					jmp @FreeMem
  1913 					els
  1914 183D 60				rts						; ret
  1915 					eif
  1916 				.endl
  1917
  1918 183E			.local	AIBULLY						; PROCEDURE
  1919
  1920 				; optimize OK (ai.inc), line = 84
  1921
  1922 183E AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1923 1848 A0 04			ldy #PLY.DIR-DATAORIGIN
  1924 184A B1 12			lda (:bp2),y
  1925 184C 85 58			sta T0B
  1926
  1927 				; optimize OK (ai.inc), line = 86
  1928
  1929 184E AD 11 2B			lda PLAYER1.ISALIVE
  1930 1851 0D 19 2B			ora PLAYER2.ISALIVE
  1931 1854 D0 03 4C FB 18		jeq l_0960
  1932
  1933 				; optimize OK (ai.inc), line = 88
  1934
  1935 1859 AD 11 2B			lda PLAYER1.ISALIVE
  1936 185C F0 0F			jeq l_096D
  1937 185E AD EE 2A			lda PLAYER1
  1938 1861 8D EC 2A			sta TMPPLY
  1939 1864 AD EF 2A			lda PLAYER1+1
  1940 1867 8D ED 2A			sta TMPPLY+1
  1941 186A 4C 79 18			jmp l_097C
  1942 186D			l_096D
  1943 186D AD F0 2A			lda PLAYER2
  1944 1870 8D EC 2A			sta TMPPLY
  1945 1873 AD F1 2A			lda PLAYER2+1
  1946 1876 8D ED 2A			sta TMPPLY+1
  1947 1879			l_097C
  1948
  1949 				; optimize OK (ai.inc), line = 90
  1950
  1951 1879 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1952 1883 A0 01			ldy #PLY.Y-DATAORIGIN
  1953 1885 B1 12			lda (:bp2),y
  1954 1887 85 21			sta :STACKORIGIN+9
  1955 1889 AC EC 2A 84 12 AC + 	mwy TMPPLY :bp2
  1956 1893 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1957 1895 B1 12			lda (:bp2),y
  1958 1897 C5 21			cmp :STACKORIGIN+9
  1959 1899 B0 07			jcs l_0995
  1960 189B A9 01			lda #$01
  1961 189D 85 58			sta T0B
  1962 189F 4C A6 18			jmp l_09A3
  1963 18A2			l_0995
  1964 18A2 A9 02			lda #$02
  1965 18A4 85 58			sta T0B
  1966 18A6			l_09A3
  1967
  1968 				; optimize OK (ai.inc), line = 91
  1969
  1970 18A6 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1971 18B0 A0 01			ldy #PLY.Y-DATAORIGIN
  1972 18B2 B1 12			lda (:bp2),y
  1973 18B4 85 21			sta :STACKORIGIN+9
  1974 18B6 AC EC 2A 84 12 AC + 	mwy TMPPLY :bp2
  1975 18C0 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1976 18C2 B1 12			lda (:bp2),y
  1977 18C4 C5 21			cmp :STACKORIGIN+9
  1978 18C6 F0 06			jeq l_09CDx
  1979 18C8 A5 5C			lda AVAILDIR
  1980 18CA 25 58			and T0B
  1981 18CC D0 2D			jne l_09CD
  1982 18CE			l_09CDx
  1983
  1984 				; optimize OK (ai.inc), line = 92
  1985
  1986 18CE AC EA 2A 84 12 AC + 	mwy PLY :bp2
  1987 18D8 A0 00			ldy #PLY.X-DATAORIGIN
  1988 18DA B1 12			lda (:bp2),y
  1989 18DC 85 21			sta :STACKORIGIN+9
  1990 18DE AC EC 2A 84 12 AC + 	mwy TMPPLY :bp2
  1991 18E8 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1992 18EA B1 12			lda (:bp2),y
  1993 18EC C5 21			cmp :STACKORIGIN+9
  1994 18EE B0 07			jcs l_09E2
  1995 18F0 A9 04			lda #$04
  1996 18F2 85 58			sta T0B
  1997 18F4 4C FB 18			jmp l_09F0
  1998 18F7			l_09E2
  1999 18F7 A9 08			lda #$08
  2000 18F9 85 58			sta T0B
  2001 18FB			l_09F0
  2002 18FB			l_09CD
  2003 18FB			l_0960
  2004
  2005 				; optimize OK (ai.inc), line = 96
  2006
  2007 18FB A5 5C			lda AVAILDIR
  2008 18FD 25 58			and T0B
  2009 18FF F0 07			jeq l_0A10
  2010 1901 A5 58			lda T0B
  2011 1903 85 5B			sta NEWDIR
  2012 1905 4C 0B 19			jmp l_0A20
  2013 1908			l_0A10
  2014
  2015 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  2016
  2017 1908 20 E4 15			jsr AISAPPER
  2018 190B			l_0A20
  2019 190B			@exit
  2020 					.ifdef @new
  2021 					lda <@VarData
  2022 					sta :ztmp
  2023 					lda >@VarData
  2024 					ldy #@VarDataSize-1
  2025 					jmp @FreeMem
  2026 					els
  2027 190B 60				rts						; ret
  2028 					eif
  2029 				.endl
  2030
  2031 190C			.local	AIMIRROR					; PROCEDURE
  2032
  2033 				; optimize OK (ai.inc), line = 105
  2034
  2035 190C AC EA 2A 84 12 AC + 	mwy PLY :bp2
  2036 1916 A0 04			ldy #PLY.DIR-DATAORIGIN
  2037 1918 B1 12			lda (:bp2),y
  2038 191A 85 58			sta T0B
  2039
  2040 				; optimize OK (ai.inc), line = 107
  2041
  2042 191C AD 11 2B			lda PLAYER1.ISALIVE
  2043 191F F0 2F			jeq l_0A37
  2044
  2045 				; optimize OK (ai.inc), line = 108
  2046
  2047 1921 AD 0E 2B			lda PLAYER1.DIR
  2048 1924 8D 5B 2B			sta @CASETMP_0005
  2049 1927 C9 01			cmp #$01
  2050 1929 D0 07			jne l_0A43
  2051 192B			@
  2052
  2053 				; optimize OK (ai.inc), line = 109
  2054
  2055 192B A9 02			lda #$02
  2056 192D 85 58			sta T0B
  2057
  2058 192F 4C 50 19			jmp a_0005
  2059 1932			l_0A43
  2060 1932 C9 02			cmp #$02
  2061 1934 D0 07			jne l_0A50
  2062 1936			@
  2063
  2064 				; optimize OK (ai.inc), line = 110
  2065
  2066 1936 A9 01			lda #$01
  2067 1938 85 58			sta T0B
  2068
  2069 193A 4C 50 19			jmp a_0005
  2070 193D			l_0A50
  2071 193D C9 04			cmp #$04
  2072 193F D0 07			jne l_0A5D
  2073 1941			@
  2074
  2075 				; optimize OK (ai.inc), line = 111
  2076
  2077 1941 A9 08			lda #$08
  2078 1943 85 58			sta T0B
  2079
  2080 1945 4C 50 19			jmp a_0005
  2081 1948			l_0A5D
  2082 1948 C9 08			cmp #$08
  2083 194A D0 04			jne l_0A6A
  2084 194C			@
  2085
  2086 				; optimize OK (ai.inc), line = 112
  2087
  2088 194C A9 04			lda #$04
  2089 194E 85 58			sta T0B
  2090
  2091 1950			l_0A6A
  2092 1950			a_0005
  2093 1950			l_0A37
  2094
  2095 				; optimize OK (ai.inc), line = 116
  2096
  2097 1950 A5 5C			lda AVAILDIR
  2098 1952 25 58			and T0B
  2099 1954 F0 07			jeq l_0A90
  2100 1956 A5 58			lda T0B
  2101 1958 85 5B			sta NEWDIR
  2102 195A 4C 60 19			jmp l_0AA0
  2103 195D			l_0A90
  2104
  2105 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  2106
  2107 195D 20 E4 15			jsr AISAPPER
  2108 1960			l_0AA0
  2109
  2110 				; ------------------------------------------------------------
  2111
  2112 = 2B5B			@CASETMP_0005	= DATAORIGIN+$0063
  2113
  2114 = 2B5B			@VarData	= @CASETMP_0005
  2115 = 0001			@VarDataSize	= 1
  2116
  2117 1960			@exit
  2118 					.ifdef @new
  2119 					lda <@VarData
  2120 					sta :ztmp
  2121 					lda >@VarData
  2122 					ldy #@VarDataSize-1
  2123 					jmp @FreeMem
  2124 					els
  2125 1960 60				rts						; ret
  2126 					eif
  2127 				.endl
  2128
  2129 1961			.local	SETLEVEL00					; PROCEDURE
  2130
  2131 				; optimize OK (levels.inc), line = 5
  2132
  2133 1961 A9 01			lda #$01
  2134 1963 8D 52 2B			sta SETPLAYER.ISALIVE
  2135 1966 A9 62			lda #$62
  2136 1968 8D 51 2B			sta SETPLAYER.COLOUR
  2137 196B A9 51			lda #$51
  2138 196D 8D 50 2B			sta SETPLAYER.HEAD
  2139 1970 A9 00			lda #$00
  2140 1972 8D 4F 2B			sta SETPLAYER.BRAIN
  2141 1975 A9 08			lda #$08
  2142 1977 8D 4E 2B			sta SETPLAYER.DIR
  2143 197A A9 0C			lda #$0C
  2144 197C 8D 4D 2B			sta SETPLAYER.Y
  2145 197F A9 0A			lda #$0A
  2146 1981 8D 4C 2B			sta SETPLAYER.X
  2147 1984 AD EE 2A			lda PLAYER1
  2148 1987 8D 4A 2B			sta SETPLAYER.P
  2149 198A AD EF 2A			lda PLAYER1+1
  2150 198D 8D 4B 2B			sta SETPLAYER.P+1
  2151 1990 20 9F 14			jsr SETPLAYER
  2152
  2153 				; optimize OK (levels.inc), line = 6
  2154
  2155 1993 A9 01			lda #$01
  2156 1995 8D 52 2B			sta SETPLAYER.ISALIVE
  2157 1998 A9 5D			lda #$5D
  2158 199A 8D 51 2B			sta SETPLAYER.COLOUR
  2159 199D A9 51			lda #$51
  2160 199F 8D 50 2B			sta SETPLAYER.HEAD
  2161 19A2 A9 01			lda #$01
  2162 19A4 8D 4F 2B			sta SETPLAYER.BRAIN
  2163 19A7 A9 04			lda #$04
  2164 19A9 8D 4E 2B			sta SETPLAYER.DIR
  2165 19AC A9 0C			lda #$0C
  2166 19AE 8D 4D 2B			sta SETPLAYER.Y
  2167 19B1 A9 1E			lda #$1E
  2168 19B3 8D 4C 2B			sta SETPLAYER.X
  2169 19B6 AD F0 2A			lda PLAYER2
  2170 19B9 8D 4A 2B			sta SETPLAYER.P
  2171 19BC AD F1 2A			lda PLAYER2+1
  2172 19BF 8D 4B 2B			sta SETPLAYER.P+1
  2173 19C2 20 9F 14			jsr SETPLAYER
  2174
  2175 				; optimize FAIL (1, levels.inc), line = 8
  2176
  2177 19C5 E8				inx
  2178 19C6 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2179 19CA 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2180 19CC A9 06			lda #$06
  2181 19CE 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2182 19D1 A9 0A			lda #$0A
  2183 19D3 8D 46 2B			sta CALCOBSTACLEADDR.X
  2184 19D6 20 4D 13			jsr CALCOBSTACLEADDR
  2185 19D9 B4 17			ldy :STACKORIGIN-1,x
  2186 19DB B5 18			lda :STACKORIGIN,x
  2187 19DD 99 2A 2B			sta adr.OBSTACLES,y
  2188 19E0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2189 19E2 99 2B 2B			sta adr.OBSTACLES+1,y
  2190 19E5 CA				dex
  2191 19E6 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2192 19EA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2193 19EE A9 06			lda #$06
  2194 19F0 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2195 19F3 A9 1E			lda #$1E
  2196 19F5 8D 46 2B			sta CALCOBSTACLEADDR.X
  2197 19F8 20 4D 13			jsr CALCOBSTACLEADDR
  2198 19FB B4 17			ldy :STACKORIGIN-1,x
  2199 19FD B5 18			lda :STACKORIGIN,x
  2200 19FF 99 2A 2B			sta adr.OBSTACLES,y
  2201 1A02 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2202 1A04 99 2B 2B			sta adr.OBSTACLES+1,y
  2203 1A07 CA				dex
  2204
  2205 				; optimize FAIL (1, levels.inc), line = 9
  2206
  2207 1A08 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2208 1A0C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2209 1A10 A9 12			lda #$12
  2210 1A12 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2211 1A15 A9 0A			lda #$0A
  2212 1A17 8D 46 2B			sta CALCOBSTACLEADDR.X
  2213 1A1A 20 4D 13			jsr CALCOBSTACLEADDR
  2214 1A1D B4 17			ldy :STACKORIGIN-1,x
  2215 1A1F B5 18			lda :STACKORIGIN,x
  2216 1A21 99 2A 2B			sta adr.OBSTACLES,y
  2217 1A24 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2218 1A26 99 2B 2B			sta adr.OBSTACLES+1,y
  2219 1A29 CA				dex
  2220 1A2A A9 06 95 18			mva #$06 :STACKORIGIN,x
  2221 1A2E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2222 1A32 A9 12			lda #$12
  2223 1A34 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2224 1A37 A9 1E			lda #$1E
  2225 1A39 8D 46 2B			sta CALCOBSTACLEADDR.X
  2226 1A3C 20 4D 13			jsr CALCOBSTACLEADDR
  2227 1A3F B4 17			ldy :STACKORIGIN-1,x
  2228 1A41 B5 18			lda :STACKORIGIN,x
  2229 1A43 99 2A 2B			sta adr.OBSTACLES,y
  2230 1A46 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2231 1A48 99 2B 2B			sta adr.OBSTACLES+1,y
  2232 1A4B CA				dex
  2233
  2234 				; optimize FAIL (1, levels.inc), line = 10
  2235
  2236 1A4C A9 08 95 18			mva #$08 :STACKORIGIN,x
  2237 1A50 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2238 1A54 A9 02			lda #$02
  2239 1A56 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2240 1A59 A9 14			lda #$14
  2241 1A5B 8D 46 2B			sta CALCOBSTACLEADDR.X
  2242 1A5E 20 4D 13			jsr CALCOBSTACLEADDR
  2243 1A61 B4 17			ldy :STACKORIGIN-1,x
  2244 1A63 B5 18			lda :STACKORIGIN,x
  2245 1A65 99 2A 2B			sta adr.OBSTACLES,y
  2246 1A68 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2247 1A6A 99 2B 2B			sta adr.OBSTACLES+1,y
  2248 1A6D CA				dex
  2249 1A6E A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2250 1A72 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2251 1A76 A9 16			lda #$16
  2252 1A78 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2253 1A7B A9 14			lda #$14
  2254 1A7D 8D 46 2B			sta CALCOBSTACLEADDR.X
  2255 1A80 20 4D 13			jsr CALCOBSTACLEADDR
  2256 1A83 B4 17			ldy :STACKORIGIN-1,x
  2257 1A85 B5 18			lda :STACKORIGIN,x
  2258 1A87 99 2A 2B			sta adr.OBSTACLES,y
  2259 1A8A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2260 1A8C 99 2B 2B			sta adr.OBSTACLES+1,y
  2261 1A8F CA				dex
  2262 1A90 CA				dex
  2263 1A91			@exit
  2264 					.ifdef @new
  2265 					lda <@VarData
  2266 					sta :ztmp
  2267 					lda >@VarData
  2268 					ldy #@VarDataSize-1
  2269 					jmp @FreeMem
  2270 					els
  2271 1A91 60				rts						; ret
  2272 					eif
  2273 				.endl
  2274
  2275 1A92			.local	SETLEVEL01					; PROCEDURE
  2276
  2277 				; optimize OK (levels.inc), line = 17
  2278
  2279 1A92 A9 01			lda #$01
  2280 1A94 8D 52 2B			sta SETPLAYER.ISALIVE
  2281 1A97 A9 62			lda #$62
  2282 1A99 8D 51 2B			sta SETPLAYER.COLOUR
  2283 1A9C A9 51			lda #$51
  2284 1A9E 8D 50 2B			sta SETPLAYER.HEAD
  2285 1AA1 A9 00			lda #$00
  2286 1AA3 8D 4F 2B			sta SETPLAYER.BRAIN
  2287 1AA6 A9 08			lda #$08
  2288 1AA8 8D 4E 2B			sta SETPLAYER.DIR
  2289 1AAB A9 0C			lda #$0C
  2290 1AAD 8D 4D 2B			sta SETPLAYER.Y
  2291 1AB0 A9 0A			lda #$0A
  2292 1AB2 8D 4C 2B			sta SETPLAYER.X
  2293 1AB5 AD EE 2A			lda PLAYER1
  2294 1AB8 8D 4A 2B			sta SETPLAYER.P
  2295 1ABB AD EF 2A			lda PLAYER1+1
  2296 1ABE 8D 4B 2B			sta SETPLAYER.P+1
  2297 1AC1 20 9F 14			jsr SETPLAYER
  2298
  2299 				; optimize OK (levels.inc), line = 18
  2300
  2301 1AC4 A9 01			lda #$01
  2302 1AC6 8D 52 2B			sta SETPLAYER.ISALIVE
  2303 1AC9 A9 5D			lda #$5D
  2304 1ACB 8D 51 2B			sta SETPLAYER.COLOUR
  2305 1ACE A9 51			lda #$51
  2306 1AD0 8D 50 2B			sta SETPLAYER.HEAD
  2307 1AD3 A9 01			lda #$01
  2308 1AD5 8D 4F 2B			sta SETPLAYER.BRAIN
  2309 1AD8 A9 04			lda #$04
  2310 1ADA 8D 4E 2B			sta SETPLAYER.DIR
  2311 1ADD A9 0C			lda #$0C
  2312 1ADF 8D 4D 2B			sta SETPLAYER.Y
  2313 1AE2 A9 1E			lda #$1E
  2314 1AE4 8D 4C 2B			sta SETPLAYER.X
  2315 1AE7 AD F0 2A			lda PLAYER2
  2316 1AEA 8D 4A 2B			sta SETPLAYER.P
  2317 1AED AD F1 2A			lda PLAYER2+1
  2318 1AF0 8D 4B 2B			sta SETPLAYER.P+1
  2319 1AF3 20 9F 14			jsr SETPLAYER
  2320
  2321 				; optimize FAIL (1, levels.inc), line = 20
  2322
  2323 1AF6 E8				inx
  2324 1AF7 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2325 1AFB 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2326 1AFD A9 06			lda #$06
  2327 1AFF 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2328 1B02 A9 0A			lda #$0A
  2329 1B04 8D 46 2B			sta CALCOBSTACLEADDR.X
  2330 1B07 20 4D 13			jsr CALCOBSTACLEADDR
  2331 1B0A B4 17			ldy :STACKORIGIN-1,x
  2332 1B0C B5 18			lda :STACKORIGIN,x
  2333 1B0E 99 2A 2B			sta adr.OBSTACLES,y
  2334 1B11 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2335 1B13 99 2B 2B			sta adr.OBSTACLES+1,y
  2336 1B16 CA				dex
  2337 1B17 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2338 1B1B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2339 1B1F A9 06			lda #$06
  2340 1B21 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2341 1B24 A9 1E			lda #$1E
  2342 1B26 8D 46 2B			sta CALCOBSTACLEADDR.X
  2343 1B29 20 4D 13			jsr CALCOBSTACLEADDR
  2344 1B2C B4 17			ldy :STACKORIGIN-1,x
  2345 1B2E B5 18			lda :STACKORIGIN,x
  2346 1B30 99 2A 2B			sta adr.OBSTACLES,y
  2347 1B33 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2348 1B35 99 2B 2B			sta adr.OBSTACLES+1,y
  2349 1B38 CA				dex
  2350
  2351 				; optimize FAIL (1, levels.inc), line = 21
  2352
  2353 1B39 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2354 1B3D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2355 1B41 A9 12			lda #$12
  2356 1B43 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2357 1B46 A9 0A			lda #$0A
  2358 1B48 8D 46 2B			sta CALCOBSTACLEADDR.X
  2359 1B4B 20 4D 13			jsr CALCOBSTACLEADDR
  2360 1B4E B4 17			ldy :STACKORIGIN-1,x
  2361 1B50 B5 18			lda :STACKORIGIN,x
  2362 1B52 99 2A 2B			sta adr.OBSTACLES,y
  2363 1B55 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2364 1B57 99 2B 2B			sta adr.OBSTACLES+1,y
  2365 1B5A CA				dex
  2366 1B5B A9 06 95 18			mva #$06 :STACKORIGIN,x
  2367 1B5F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2368 1B63 A9 12			lda #$12
  2369 1B65 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2370 1B68 A9 1E			lda #$1E
  2371 1B6A 8D 46 2B			sta CALCOBSTACLEADDR.X
  2372 1B6D 20 4D 13			jsr CALCOBSTACLEADDR
  2373 1B70 B4 17			ldy :STACKORIGIN-1,x
  2374 1B72 B5 18			lda :STACKORIGIN,x
  2375 1B74 99 2A 2B			sta adr.OBSTACLES,y
  2376 1B77 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2377 1B79 99 2B 2B			sta adr.OBSTACLES+1,y
  2378 1B7C CA				dex
  2379
  2380 				; optimize FAIL (1, levels.inc), line = 22
  2381
  2382 1B7D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2383 1B81 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2384 1B85 A9 02			lda #$02
  2385 1B87 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2386 1B8A A9 14			lda #$14
  2387 1B8C 8D 46 2B			sta CALCOBSTACLEADDR.X
  2388 1B8F 20 4D 13			jsr CALCOBSTACLEADDR
  2389 1B92 B4 17			ldy :STACKORIGIN-1,x
  2390 1B94 B5 18			lda :STACKORIGIN,x
  2391 1B96 99 2A 2B			sta adr.OBSTACLES,y
  2392 1B99 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2393 1B9B 99 2B 2B			sta adr.OBSTACLES+1,y
  2394 1B9E CA				dex
  2395 1B9F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2396 1BA3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2397 1BA7 A9 16			lda #$16
  2398 1BA9 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2399 1BAC A9 14			lda #$14
  2400 1BAE 8D 46 2B			sta CALCOBSTACLEADDR.X
  2401 1BB1 20 4D 13			jsr CALCOBSTACLEADDR
  2402 1BB4 B4 17			ldy :STACKORIGIN-1,x
  2403 1BB6 B5 18			lda :STACKORIGIN,x
  2404 1BB8 99 2A 2B			sta adr.OBSTACLES,y
  2405 1BBB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2406 1BBD 99 2B 2B			sta adr.OBSTACLES+1,y
  2407 1BC0 CA				dex
  2408 1BC1 CA				dex
  2409 1BC2			@exit
  2410 					.ifdef @new
  2411 					lda <@VarData
  2412 					sta :ztmp
  2413 					lda >@VarData
  2414 					ldy #@VarDataSize-1
  2415 					jmp @FreeMem
  2416 					els
  2417 1BC2 60				rts						; ret
  2418 					eif
  2419 				.endl
  2420
  2421 1BC3			.local	SETLEVEL02					; PROCEDURE
  2422
  2423 				; optimize OK (levels.inc), line = 29
  2424
  2425 1BC3 A9 01			lda #$01
  2426 1BC5 8D 52 2B			sta SETPLAYER.ISALIVE
  2427 1BC8 A9 62			lda #$62
  2428 1BCA 8D 51 2B			sta SETPLAYER.COLOUR
  2429 1BCD A9 51			lda #$51
  2430 1BCF 8D 50 2B			sta SETPLAYER.HEAD
  2431 1BD2 A9 00			lda #$00
  2432 1BD4 8D 4F 2B			sta SETPLAYER.BRAIN
  2433 1BD7 A9 08			lda #$08
  2434 1BD9 8D 4E 2B			sta SETPLAYER.DIR
  2435 1BDC A9 0C			lda #$0C
  2436 1BDE 8D 4D 2B			sta SETPLAYER.Y
  2437 1BE1 A9 0A			lda #$0A
  2438 1BE3 8D 4C 2B			sta SETPLAYER.X
  2439 1BE6 AD EE 2A			lda PLAYER1
  2440 1BE9 8D 4A 2B			sta SETPLAYER.P
  2441 1BEC AD EF 2A			lda PLAYER1+1
  2442 1BEF 8D 4B 2B			sta SETPLAYER.P+1
  2443 1BF2 20 9F 14			jsr SETPLAYER
  2444
  2445 				; optimize OK (levels.inc), line = 30
  2446
  2447 1BF5 A9 01			lda #$01
  2448 1BF7 8D 52 2B			sta SETPLAYER.ISALIVE
  2449 1BFA A9 5D			lda #$5D
  2450 1BFC 8D 51 2B			sta SETPLAYER.COLOUR
  2451 1BFF A9 51			lda #$51
  2452 1C01 8D 50 2B			sta SETPLAYER.HEAD
  2453 1C04 A9 03			lda #$03
  2454 1C06 8D 4F 2B			sta SETPLAYER.BRAIN
  2455 1C09 A9 04			lda #$04
  2456 1C0B 8D 4E 2B			sta SETPLAYER.DIR
  2457 1C0E A9 0C			lda #$0C
  2458 1C10 8D 4D 2B			sta SETPLAYER.Y
  2459 1C13 A9 1E			lda #$1E
  2460 1C15 8D 4C 2B			sta SETPLAYER.X
  2461 1C18 AD F0 2A			lda PLAYER2
  2462 1C1B 8D 4A 2B			sta SETPLAYER.P
  2463 1C1E AD F1 2A			lda PLAYER2+1
  2464 1C21 8D 4B 2B			sta SETPLAYER.P+1
  2465 1C24 20 9F 14			jsr SETPLAYER
  2466
  2467 				; optimize FAIL (1, levels.inc), line = 32
  2468
  2469 1C27 E8				inx
  2470 1C28 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2471 1C2C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2472 1C2E A9 06			lda #$06
  2473 1C30 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2474 1C33 A9 0A			lda #$0A
  2475 1C35 8D 46 2B			sta CALCOBSTACLEADDR.X
  2476 1C38 20 4D 13			jsr CALCOBSTACLEADDR
  2477 1C3B B4 17			ldy :STACKORIGIN-1,x
  2478 1C3D B5 18			lda :STACKORIGIN,x
  2479 1C3F 99 2A 2B			sta adr.OBSTACLES,y
  2480 1C42 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2481 1C44 99 2B 2B			sta adr.OBSTACLES+1,y
  2482 1C47 CA				dex
  2483 1C48 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2484 1C4C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2485 1C50 A9 06			lda #$06
  2486 1C52 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2487 1C55 A9 1E			lda #$1E
  2488 1C57 8D 46 2B			sta CALCOBSTACLEADDR.X
  2489 1C5A 20 4D 13			jsr CALCOBSTACLEADDR
  2490 1C5D B4 17			ldy :STACKORIGIN-1,x
  2491 1C5F B5 18			lda :STACKORIGIN,x
  2492 1C61 99 2A 2B			sta adr.OBSTACLES,y
  2493 1C64 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2494 1C66 99 2B 2B			sta adr.OBSTACLES+1,y
  2495 1C69 CA				dex
  2496
  2497 				; optimize FAIL (1, levels.inc), line = 33
  2498
  2499 1C6A A9 04 95 18			mva #$04 :STACKORIGIN,x
  2500 1C6E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2501 1C72 A9 12			lda #$12
  2502 1C74 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2503 1C77 A9 0A			lda #$0A
  2504 1C79 8D 46 2B			sta CALCOBSTACLEADDR.X
  2505 1C7C 20 4D 13			jsr CALCOBSTACLEADDR
  2506 1C7F B4 17			ldy :STACKORIGIN-1,x
  2507 1C81 B5 18			lda :STACKORIGIN,x
  2508 1C83 99 2A 2B			sta adr.OBSTACLES,y
  2509 1C86 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2510 1C88 99 2B 2B			sta adr.OBSTACLES+1,y
  2511 1C8B CA				dex
  2512 1C8C A9 06 95 18			mva #$06 :STACKORIGIN,x
  2513 1C90 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2514 1C94 A9 12			lda #$12
  2515 1C96 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2516 1C99 A9 1E			lda #$1E
  2517 1C9B 8D 46 2B			sta CALCOBSTACLEADDR.X
  2518 1C9E 20 4D 13			jsr CALCOBSTACLEADDR
  2519 1CA1 B4 17			ldy :STACKORIGIN-1,x
  2520 1CA3 B5 18			lda :STACKORIGIN,x
  2521 1CA5 99 2A 2B			sta adr.OBSTACLES,y
  2522 1CA8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2523 1CAA 99 2B 2B			sta adr.OBSTACLES+1,y
  2524 1CAD CA				dex
  2525
  2526 				; optimize FAIL (1, levels.inc), line = 34
  2527
  2528 1CAE A9 08 95 18			mva #$08 :STACKORIGIN,x
  2529 1CB2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2530 1CB6 A9 02			lda #$02
  2531 1CB8 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2532 1CBB A9 14			lda #$14
  2533 1CBD 8D 46 2B			sta CALCOBSTACLEADDR.X
  2534 1CC0 20 4D 13			jsr CALCOBSTACLEADDR
  2535 1CC3 B4 17			ldy :STACKORIGIN-1,x
  2536 1CC5 B5 18			lda :STACKORIGIN,x
  2537 1CC7 99 2A 2B			sta adr.OBSTACLES,y
  2538 1CCA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2539 1CCC 99 2B 2B			sta adr.OBSTACLES+1,y
  2540 1CCF CA				dex
  2541 1CD0 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2542 1CD4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2543 1CD8 A9 16			lda #$16
  2544 1CDA 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2545 1CDD A9 14			lda #$14
  2546 1CDF 8D 46 2B			sta CALCOBSTACLEADDR.X
  2547 1CE2 20 4D 13			jsr CALCOBSTACLEADDR
  2548 1CE5 B4 17			ldy :STACKORIGIN-1,x
  2549 1CE7 B5 18			lda :STACKORIGIN,x
  2550 1CE9 99 2A 2B			sta adr.OBSTACLES,y
  2551 1CEC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2552 1CEE 99 2B 2B			sta adr.OBSTACLES+1,y
  2553 1CF1 CA				dex
  2554 1CF2 CA				dex
  2555 1CF3			@exit
  2556 					.ifdef @new
  2557 					lda <@VarData
  2558 					sta :ztmp
  2559 					lda >@VarData
  2560 					ldy #@VarDataSize-1
  2561 					jmp @FreeMem
  2562 					els
  2563 1CF3 60				rts						; ret
  2564 					eif
  2565 				.endl
  2566
  2567 1CF4			.local	SETLEVEL03					; PROCEDURE
  2568
  2569 				; optimize OK (levels.inc), line = 41
  2570
  2571 1CF4 A9 01			lda #$01
  2572 1CF6 8D 52 2B			sta SETPLAYER.ISALIVE
  2573 1CF9 A9 62			lda #$62
  2574 1CFB 8D 51 2B			sta SETPLAYER.COLOUR
  2575 1CFE A9 51			lda #$51
  2576 1D00 8D 50 2B			sta SETPLAYER.HEAD
  2577 1D03 A9 00			lda #$00
  2578 1D05 8D 4F 2B			sta SETPLAYER.BRAIN
  2579 1D08 A9 08			lda #$08
  2580 1D0A 8D 4E 2B			sta SETPLAYER.DIR
  2581 1D0D A9 0C			lda #$0C
  2582 1D0F 8D 4D 2B			sta SETPLAYER.Y
  2583 1D12 A9 0A			lda #$0A
  2584 1D14 8D 4C 2B			sta SETPLAYER.X
  2585 1D17 AD EE 2A			lda PLAYER1
  2586 1D1A 8D 4A 2B			sta SETPLAYER.P
  2587 1D1D AD EF 2A			lda PLAYER1+1
  2588 1D20 8D 4B 2B			sta SETPLAYER.P+1
  2589 1D23 20 9F 14			jsr SETPLAYER
  2590
  2591 				; optimize OK (levels.inc), line = 42
  2592
  2593 1D26 A9 01			lda #$01
  2594 1D28 8D 52 2B			sta SETPLAYER.ISALIVE
  2595 1D2B A9 5D			lda #$5D
  2596 1D2D 8D 51 2B			sta SETPLAYER.COLOUR
  2597 1D30 A9 51			lda #$51
  2598 1D32 8D 50 2B			sta SETPLAYER.HEAD
  2599 1D35 A9 02			lda #$02
  2600 1D37 8D 4F 2B			sta SETPLAYER.BRAIN
  2601 1D3A A9 04			lda #$04
  2602 1D3C 8D 4E 2B			sta SETPLAYER.DIR
  2603 1D3F A9 0C			lda #$0C
  2604 1D41 8D 4D 2B			sta SETPLAYER.Y
  2605 1D44 A9 1E			lda #$1E
  2606 1D46 8D 4C 2B			sta SETPLAYER.X
  2607 1D49 AD F0 2A			lda PLAYER2
  2608 1D4C 8D 4A 2B			sta SETPLAYER.P
  2609 1D4F AD F1 2A			lda PLAYER2+1
  2610 1D52 8D 4B 2B			sta SETPLAYER.P+1
  2611 1D55 20 9F 14			jsr SETPLAYER
  2612
  2613 				; optimize FAIL (1, levels.inc), line = 44
  2614
  2615 1D58 E8				inx
  2616 1D59 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2617 1D5D 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2618 1D5F A9 06			lda #$06
  2619 1D61 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2620 1D64 A9 0A			lda #$0A
  2621 1D66 8D 46 2B			sta CALCOBSTACLEADDR.X
  2622 1D69 20 4D 13			jsr CALCOBSTACLEADDR
  2623 1D6C B4 17			ldy :STACKORIGIN-1,x
  2624 1D6E B5 18			lda :STACKORIGIN,x
  2625 1D70 99 2A 2B			sta adr.OBSTACLES,y
  2626 1D73 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2627 1D75 99 2B 2B			sta adr.OBSTACLES+1,y
  2628 1D78 CA				dex
  2629 1D79 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2630 1D7D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2631 1D81 A9 06			lda #$06
  2632 1D83 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2633 1D86 A9 1E			lda #$1E
  2634 1D88 8D 46 2B			sta CALCOBSTACLEADDR.X
  2635 1D8B 20 4D 13			jsr CALCOBSTACLEADDR
  2636 1D8E B4 17			ldy :STACKORIGIN-1,x
  2637 1D90 B5 18			lda :STACKORIGIN,x
  2638 1D92 99 2A 2B			sta adr.OBSTACLES,y
  2639 1D95 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2640 1D97 99 2B 2B			sta adr.OBSTACLES+1,y
  2641 1D9A CA				dex
  2642
  2643 				; optimize FAIL (1, levels.inc), line = 45
  2644
  2645 1D9B A9 04 95 18			mva #$04 :STACKORIGIN,x
  2646 1D9F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2647 1DA3 A9 12			lda #$12
  2648 1DA5 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2649 1DA8 A9 0A			lda #$0A
  2650 1DAA 8D 46 2B			sta CALCOBSTACLEADDR.X
  2651 1DAD 20 4D 13			jsr CALCOBSTACLEADDR
  2652 1DB0 B4 17			ldy :STACKORIGIN-1,x
  2653 1DB2 B5 18			lda :STACKORIGIN,x
  2654 1DB4 99 2A 2B			sta adr.OBSTACLES,y
  2655 1DB7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2656 1DB9 99 2B 2B			sta adr.OBSTACLES+1,y
  2657 1DBC CA				dex
  2658 1DBD A9 06 95 18			mva #$06 :STACKORIGIN,x
  2659 1DC1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2660 1DC5 A9 12			lda #$12
  2661 1DC7 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2662 1DCA A9 1E			lda #$1E
  2663 1DCC 8D 46 2B			sta CALCOBSTACLEADDR.X
  2664 1DCF 20 4D 13			jsr CALCOBSTACLEADDR
  2665 1DD2 B4 17			ldy :STACKORIGIN-1,x
  2666 1DD4 B5 18			lda :STACKORIGIN,x
  2667 1DD6 99 2A 2B			sta adr.OBSTACLES,y
  2668 1DD9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2669 1DDB 99 2B 2B			sta adr.OBSTACLES+1,y
  2670 1DDE CA				dex
  2671
  2672 				; optimize FAIL (1, levels.inc), line = 46
  2673
  2674 1DDF A9 08 95 18			mva #$08 :STACKORIGIN,x
  2675 1DE3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2676 1DE7 A9 0C			lda #$0C
  2677 1DE9 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2678 1DEC A9 01			lda #$01
  2679 1DEE 8D 46 2B			sta CALCOBSTACLEADDR.X
  2680 1DF1 20 4D 13			jsr CALCOBSTACLEADDR
  2681 1DF4 B4 17			ldy :STACKORIGIN-1,x
  2682 1DF6 B5 18			lda :STACKORIGIN,x
  2683 1DF8 99 2A 2B			sta adr.OBSTACLES,y
  2684 1DFB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2685 1DFD 99 2B 2B			sta adr.OBSTACLES+1,y
  2686 1E00 CA				dex
  2687 1E01 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2688 1E05 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2689 1E09 A9 02			lda #$02
  2690 1E0B 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2691 1E0E A9 14			lda #$14
  2692 1E10 8D 46 2B			sta CALCOBSTACLEADDR.X
  2693 1E13 20 4D 13			jsr CALCOBSTACLEADDR
  2694 1E16 B4 17			ldy :STACKORIGIN-1,x
  2695 1E18 B5 18			lda :STACKORIGIN,x
  2696 1E1A 99 2A 2B			sta adr.OBSTACLES,y
  2697 1E1D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2698 1E1F 99 2B 2B			sta adr.OBSTACLES+1,y
  2699 1E22 CA				dex
  2700
  2701 				; optimize FAIL (1, levels.inc), line = 47
  2702
  2703 1E23 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2704 1E27 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2705 1E2B A9 16			lda #$16
  2706 1E2D 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2707 1E30 A9 14			lda #$14
  2708 1E32 8D 46 2B			sta CALCOBSTACLEADDR.X
  2709 1E35 20 4D 13			jsr CALCOBSTACLEADDR
  2710 1E38 B4 17			ldy :STACKORIGIN-1,x
  2711 1E3A B5 18			lda :STACKORIGIN,x
  2712 1E3C 99 2A 2B			sta adr.OBSTACLES,y
  2713 1E3F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2714 1E41 99 2B 2B			sta adr.OBSTACLES+1,y
  2715 1E44 CA				dex
  2716 1E45 CA				dex
  2717 1E46			@exit
  2718 					.ifdef @new
  2719 					lda <@VarData
  2720 					sta :ztmp
  2721 					lda >@VarData
  2722 					ldy #@VarDataSize-1
  2723 					jmp @FreeMem
  2724 					els
  2725 1E46 60				rts						; ret
  2726 					eif
  2727 				.endl
  2728
  2729 1E47			.local	SETLEVEL04					; PROCEDURE
  2730
  2731 				; optimize OK (levels.inc), line = 54
  2732
  2733 1E47 A9 01			lda #$01
  2734 1E49 8D 52 2B			sta SETPLAYER.ISALIVE
  2735 1E4C A9 62			lda #$62
  2736 1E4E 8D 51 2B			sta SETPLAYER.COLOUR
  2737 1E51 A9 51			lda #$51
  2738 1E53 8D 50 2B			sta SETPLAYER.HEAD
  2739 1E56 A9 00			lda #$00
  2740 1E58 8D 4F 2B			sta SETPLAYER.BRAIN
  2741 1E5B A9 04			lda #$04
  2742 1E5D 8D 4E 2B			sta SETPLAYER.DIR
  2743 1E60 A9 0C			lda #$0C
  2744 1E62 8D 4D 2B			sta SETPLAYER.Y
  2745 1E65 A9 12			lda #$12
  2746 1E67 8D 4C 2B			sta SETPLAYER.X
  2747 1E6A AD EE 2A			lda PLAYER1
  2748 1E6D 8D 4A 2B			sta SETPLAYER.P
  2749 1E70 AD EF 2A			lda PLAYER1+1
  2750 1E73 8D 4B 2B			sta SETPLAYER.P+1
  2751 1E76 20 9F 14			jsr SETPLAYER
  2752
  2753 				; optimize OK (levels.inc), line = 55
  2754
  2755 1E79 A9 01			lda #$01
  2756 1E7B 8D 52 2B			sta SETPLAYER.ISALIVE
  2757 1E7E A9 5D			lda #$5D
  2758 1E80 8D 51 2B			sta SETPLAYER.COLOUR
  2759 1E83 A9 51			lda #$51
  2760 1E85 8D 50 2B			sta SETPLAYER.HEAD
  2761 1E88 A9 04			lda #$04
  2762 1E8A 8D 4F 2B			sta SETPLAYER.BRAIN
  2763 1E8D A9 08			lda #$08
  2764 1E8F 8D 4E 2B			sta SETPLAYER.DIR
  2765 1E92 A9 0C			lda #$0C
  2766 1E94 8D 4D 2B			sta SETPLAYER.Y
  2767 1E97 A9 16			lda #$16
  2768 1E99 8D 4C 2B			sta SETPLAYER.X
  2769 1E9C AD F0 2A			lda PLAYER2
  2770 1E9F 8D 4A 2B			sta SETPLAYER.P
  2771 1EA2 AD F1 2A			lda PLAYER2+1
  2772 1EA5 8D 4B 2B			sta SETPLAYER.P+1
  2773 1EA8 20 9F 14			jsr SETPLAYER
  2774
  2775 				; optimize FAIL (1, levels.inc), line = 57
  2776
  2777 1EAB E8				inx
  2778 1EAC A9 00 95 18			mva #$00 :STACKORIGIN,x
  2779 1EB0 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2780 1EB2 A9 06			lda #$06
  2781 1EB4 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2782 1EB7 A9 0A			lda #$0A
  2783 1EB9 8D 46 2B			sta CALCOBSTACLEADDR.X
  2784 1EBC 20 4D 13			jsr CALCOBSTACLEADDR
  2785 1EBF B4 17			ldy :STACKORIGIN-1,x
  2786 1EC1 B5 18			lda :STACKORIGIN,x
  2787 1EC3 99 2A 2B			sta adr.OBSTACLES,y
  2788 1EC6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2789 1EC8 99 2B 2B			sta adr.OBSTACLES+1,y
  2790 1ECB CA				dex
  2791 1ECC A9 02 95 18			mva #$02 :STACKORIGIN,x
  2792 1ED0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2793 1ED4 A9 06			lda #$06
  2794 1ED6 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2795 1ED9 A9 1E			lda #$1E
  2796 1EDB 8D 46 2B			sta CALCOBSTACLEADDR.X
  2797 1EDE 20 4D 13			jsr CALCOBSTACLEADDR
  2798 1EE1 B4 17			ldy :STACKORIGIN-1,x
  2799 1EE3 B5 18			lda :STACKORIGIN,x
  2800 1EE5 99 2A 2B			sta adr.OBSTACLES,y
  2801 1EE8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2802 1EEA 99 2B 2B			sta adr.OBSTACLES+1,y
  2803 1EED CA				dex
  2804
  2805 				; optimize FAIL (1, levels.inc), line = 58
  2806
  2807 1EEE A9 04 95 18			mva #$04 :STACKORIGIN,x
  2808 1EF2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2809 1EF6 A9 12			lda #$12
  2810 1EF8 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2811 1EFB A9 0A			lda #$0A
  2812 1EFD 8D 46 2B			sta CALCOBSTACLEADDR.X
  2813 1F00 20 4D 13			jsr CALCOBSTACLEADDR
  2814 1F03 B4 17			ldy :STACKORIGIN-1,x
  2815 1F05 B5 18			lda :STACKORIGIN,x
  2816 1F07 99 2A 2B			sta adr.OBSTACLES,y
  2817 1F0A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2818 1F0C 99 2B 2B			sta adr.OBSTACLES+1,y
  2819 1F0F CA				dex
  2820 1F10 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2821 1F14 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2822 1F18 A9 12			lda #$12
  2823 1F1A 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2824 1F1D A9 1E			lda #$1E
  2825 1F1F 8D 46 2B			sta CALCOBSTACLEADDR.X
  2826 1F22 20 4D 13			jsr CALCOBSTACLEADDR
  2827 1F25 B4 17			ldy :STACKORIGIN-1,x
  2828 1F27 B5 18			lda :STACKORIGIN,x
  2829 1F29 99 2A 2B			sta adr.OBSTACLES,y
  2830 1F2C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2831 1F2E 99 2B 2B			sta adr.OBSTACLES+1,y
  2832 1F31 CA				dex
  2833
  2834 				; optimize FAIL (1, levels.inc), line = 59
  2835
  2836 1F32 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2837 1F36 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2838 1F3A A9 0C			lda #$0C
  2839 1F3C 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2840 1F3F A9 01			lda #$01
  2841 1F41 8D 46 2B			sta CALCOBSTACLEADDR.X
  2842 1F44 20 4D 13			jsr CALCOBSTACLEADDR
  2843 1F47 B4 17			ldy :STACKORIGIN-1,x
  2844 1F49 B5 18			lda :STACKORIGIN,x
  2845 1F4B 99 2A 2B			sta adr.OBSTACLES,y
  2846 1F4E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2847 1F50 99 2B 2B			sta adr.OBSTACLES+1,y
  2848 1F53 CA				dex
  2849 1F54 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2850 1F58 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2851 1F5C A9 02			lda #$02
  2852 1F5E 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2853 1F61 A9 14			lda #$14
  2854 1F63 8D 46 2B			sta CALCOBSTACLEADDR.X
  2855 1F66 20 4D 13			jsr CALCOBSTACLEADDR
  2856 1F69 B4 17			ldy :STACKORIGIN-1,x
  2857 1F6B B5 18			lda :STACKORIGIN,x
  2858 1F6D 99 2A 2B			sta adr.OBSTACLES,y
  2859 1F70 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2860 1F72 99 2B 2B			sta adr.OBSTACLES+1,y
  2861 1F75 CA				dex
  2862
  2863 				; optimize FAIL (1, levels.inc), line = 60
  2864
  2865 1F76 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2866 1F7A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2867 1F7E A9 16			lda #$16
  2868 1F80 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2869 1F83 A9 14			lda #$14
  2870 1F85 8D 46 2B			sta CALCOBSTACLEADDR.X
  2871 1F88 20 4D 13			jsr CALCOBSTACLEADDR
  2872 1F8B B4 17			ldy :STACKORIGIN-1,x
  2873 1F8D B5 18			lda :STACKORIGIN,x
  2874 1F8F 99 2A 2B			sta adr.OBSTACLES,y
  2875 1F92 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2876 1F94 99 2B 2B			sta adr.OBSTACLES+1,y
  2877 1F97 CA				dex
  2878 1F98 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2879 1F9C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2880 1FA0 A9 0C			lda #$0C
  2881 1FA2 8D 47 2B			sta CALCOBSTACLEADDR.Y
  2882 1FA5 A9 14			lda #$14
  2883 1FA7 8D 46 2B			sta CALCOBSTACLEADDR.X
  2884 1FAA 20 4D 13			jsr CALCOBSTACLEADDR
  2885 1FAD B4 17			ldy :STACKORIGIN-1,x
  2886 1FAF B5 18			lda :STACKORIGIN,x
  2887 1FB1 99 2A 2B			sta adr.OBSTACLES,y
  2888 1FB4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2889 1FB6 99 2B 2B			sta adr.OBSTACLES+1,y
  2890 1FB9 CA				dex
  2891 1FBA CA				dex
  2892 1FBB			@exit
  2893 					.ifdef @new
  2894 					lda <@VarData
  2895 					sta :ztmp
  2896 					lda >@VarData
  2897 					ldy #@VarDataSize-1
  2898 					jmp @FreeMem
  2899 					els
  2900 1FBB 60				rts						; ret
  2901 					eif
  2902 				.endl
  2903
  2904 1FBC			.local	SETLEVEL05					; PROCEDURE
  2905
  2906 				; optimize OK (levels.inc), line = 67
  2907
  2908 1FBC A9 01			lda #$01
  2909 1FBE 8D 52 2B			sta SETPLAYER.ISALIVE
  2910 1FC1 A9 62			lda #$62
  2911 1FC3 8D 51 2B			sta SETPLAYER.COLOUR
  2912 1FC6 A9 51			lda #$51
  2913 1FC8 8D 50 2B			sta SETPLAYER.HEAD
  2914 1FCB A9 00			lda #$00
  2915 1FCD 8D 4F 2B			sta SETPLAYER.BRAIN
  2916 1FD0 A9 08			lda #$08
  2917 1FD2 8D 4E 2B			sta SETPLAYER.DIR
  2918 1FD5 A9 0C			lda #$0C
  2919 1FD7 8D 4D 2B			sta SETPLAYER.Y
  2920 1FDA A9 0A			lda #$0A
  2921 1FDC 8D 4C 2B			sta SETPLAYER.X
  2922 1FDF AD EE 2A			lda PLAYER1
  2923 1FE2 8D 4A 2B			sta SETPLAYER.P
  2924 1FE5 AD EF 2A			lda PLAYER1+1
  2925 1FE8 8D 4B 2B			sta SETPLAYER.P+1
  2926 1FEB 20 9F 14			jsr SETPLAYER
  2927
  2928 				; optimize OK (levels.inc), line = 68
  2929
  2930 1FEE A9 01			lda #$01
  2931 1FF0 8D 52 2B			sta SETPLAYER.ISALIVE
  2932 1FF3 A9 5D			lda #$5D
  2933 1FF5 8D 51 2B			sta SETPLAYER.COLOUR
  2934 1FF8 A9 51			lda #$51
  2935 1FFA 8D 50 2B			sta SETPLAYER.HEAD
  2936 1FFD A9 04			lda #$04
  2937 1FFF 8D 4F 2B			sta SETPLAYER.BRAIN
  2938 2002 8D 4E 2B			sta SETPLAYER.DIR
  2939 2005 A9 0C			lda #$0C
  2940 2007 8D 4D 2B			sta SETPLAYER.Y
  2941 200A A9 1E			lda #$1E
  2942 200C 8D 4C 2B			sta SETPLAYER.X
  2943 200F AD F0 2A			lda PLAYER2
  2944 2012 8D 4A 2B			sta SETPLAYER.P
  2945 2015 AD F1 2A			lda PLAYER2+1
  2946 2018 8D 4B 2B			sta SETPLAYER.P+1
  2947 201B 20 9F 14			jsr SETPLAYER
  2948
  2949 				; optimize OK (levels.inc), line = 69
  2950
  2951 201E A9 01			lda #$01
  2952 2020 8D 52 2B			sta SETPLAYER.ISALIVE
  2953 2023 A9 71			lda #$71
  2954 2025 8D 51 2B			sta SETPLAYER.COLOUR
  2955 2028 A9 51			lda #$51
  2956 202A 8D 50 2B			sta SETPLAYER.HEAD
  2957 202D A9 03			lda #$03
  2958 202F 8D 4F 2B			sta SETPLAYER.BRAIN
  2959 2032 A9 02			lda #$02
  2960 2034 8D 4E 2B			sta SETPLAYER.DIR
  2961 2037 A9 04			lda #$04
  2962 2039 8D 4D 2B			sta SETPLAYER.Y
  2963 203C A9 14			lda #$14
  2964 203E 8D 4C 2B			sta SETPLAYER.X
  2965 2041 AD F2 2A			lda PLAYER3
  2966 2044 8D 4A 2B			sta SETPLAYER.P
  2967 2047 AD F3 2A			lda PLAYER3+1
  2968 204A 8D 4B 2B			sta SETPLAYER.P+1
  2969 204D 20 9F 14			jsr SETPLAYER
  2970
  2971 				; optimize OK (levels.inc), line = 70
  2972
  2973 2050 A9 01			lda #$01
  2974 2052 8D 52 2B			sta SETPLAYER.ISALIVE
  2975 2055 A9 55			lda #$55
  2976 2057 8D 51 2B			sta SETPLAYER.COLOUR
  2977 205A A9 51			lda #$51
  2978 205C 8D 50 2B			sta SETPLAYER.HEAD
  2979 205F A9 02			lda #$02
  2980 2061 8D 4F 2B			sta SETPLAYER.BRAIN
  2981 2064 A9 01			lda #$01
  2982 2066 8D 4E 2B			sta SETPLAYER.DIR
  2983 2069 A9 12			lda #$12
  2984 206B 8D 4D 2B			sta SETPLAYER.Y
  2985 206E A9 14			lda #$14
  2986 2070 8D 4C 2B			sta SETPLAYER.X
  2987 2073 AD F4 2A			lda PLAYER4
  2988 2076 8D 4A 2B			sta SETPLAYER.P
  2989 2079 AD F5 2A			lda PLAYER4+1
  2990 207C 8D 4B 2B			sta SETPLAYER.P+1
  2991 207F 20 9F 14			jsr SETPLAYER
  2992
  2993 				; optimize FAIL (1, levels.inc), line = 72
  2994
  2995 2082 E8				inx
  2996 2083 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2997 2087 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2998 2089 A9 06			lda #$06
  2999 208B 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3000 208E A9 0A			lda #$0A
  3001 2090 8D 46 2B			sta CALCOBSTACLEADDR.X
  3002 2093 20 4D 13			jsr CALCOBSTACLEADDR
  3003 2096 B4 17			ldy :STACKORIGIN-1,x
  3004 2098 B5 18			lda :STACKORIGIN,x
  3005 209A 99 2A 2B			sta adr.OBSTACLES,y
  3006 209D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3007 209F 99 2B 2B			sta adr.OBSTACLES+1,y
  3008 20A2 CA				dex
  3009 20A3 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3010 20A7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3011 20AB A9 06			lda #$06
  3012 20AD 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3013 20B0 A9 1E			lda #$1E
  3014 20B2 8D 46 2B			sta CALCOBSTACLEADDR.X
  3015 20B5 20 4D 13			jsr CALCOBSTACLEADDR
  3016 20B8 B4 17			ldy :STACKORIGIN-1,x
  3017 20BA B5 18			lda :STACKORIGIN,x
  3018 20BC 99 2A 2B			sta adr.OBSTACLES,y
  3019 20BF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3020 20C1 99 2B 2B			sta adr.OBSTACLES+1,y
  3021 20C4 CA				dex
  3022
  3023 				; optimize FAIL (1, levels.inc), line = 73
  3024
  3025 20C5 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3026 20C9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3027 20CD A9 12			lda #$12
  3028 20CF 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3029 20D2 A9 0A			lda #$0A
  3030 20D4 8D 46 2B			sta CALCOBSTACLEADDR.X
  3031 20D7 20 4D 13			jsr CALCOBSTACLEADDR
  3032 20DA B4 17			ldy :STACKORIGIN-1,x
  3033 20DC B5 18			lda :STACKORIGIN,x
  3034 20DE 99 2A 2B			sta adr.OBSTACLES,y
  3035 20E1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3036 20E3 99 2B 2B			sta adr.OBSTACLES+1,y
  3037 20E6 CA				dex
  3038 20E7 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3039 20EB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3040 20EF A9 12			lda #$12
  3041 20F1 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3042 20F4 A9 1E			lda #$1E
  3043 20F6 8D 46 2B			sta CALCOBSTACLEADDR.X
  3044 20F9 20 4D 13			jsr CALCOBSTACLEADDR
  3045 20FC B4 17			ldy :STACKORIGIN-1,x
  3046 20FE B5 18			lda :STACKORIGIN,x
  3047 2100 99 2A 2B			sta adr.OBSTACLES,y
  3048 2103 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3049 2105 99 2B 2B			sta adr.OBSTACLES+1,y
  3050 2108 CA				dex
  3051
  3052 				; optimize FAIL (1, levels.inc), line = 74
  3053
  3054 2109 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3055 210D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3056 2111 A9 0C			lda #$0C
  3057 2113 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3058 2116 A9 01			lda #$01
  3059 2118 8D 46 2B			sta CALCOBSTACLEADDR.X
  3060 211B 20 4D 13			jsr CALCOBSTACLEADDR
  3061 211E B4 17			ldy :STACKORIGIN-1,x
  3062 2120 B5 18			lda :STACKORIGIN,x
  3063 2122 99 2A 2B			sta adr.OBSTACLES,y
  3064 2125 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3065 2127 99 2B 2B			sta adr.OBSTACLES+1,y
  3066 212A CA				dex
  3067 212B A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3068 212F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3069 2133 A9 02			lda #$02
  3070 2135 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3071 2138 A9 14			lda #$14
  3072 213A 8D 46 2B			sta CALCOBSTACLEADDR.X
  3073 213D 20 4D 13			jsr CALCOBSTACLEADDR
  3074 2140 B4 17			ldy :STACKORIGIN-1,x
  3075 2142 B5 18			lda :STACKORIGIN,x
  3076 2144 99 2A 2B			sta adr.OBSTACLES,y
  3077 2147 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3078 2149 99 2B 2B			sta adr.OBSTACLES+1,y
  3079 214C CA				dex
  3080
  3081 				; optimize FAIL (1, levels.inc), line = 75
  3082
  3083 214D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3084 2151 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3085 2155 A9 16			lda #$16
  3086 2157 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3087 215A A9 14			lda #$14
  3088 215C 8D 46 2B			sta CALCOBSTACLEADDR.X
  3089 215F 20 4D 13			jsr CALCOBSTACLEADDR
  3090 2162 B4 17			ldy :STACKORIGIN-1,x
  3091 2164 B5 18			lda :STACKORIGIN,x
  3092 2166 99 2A 2B			sta adr.OBSTACLES,y
  3093 2169 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3094 216B 99 2B 2B			sta adr.OBSTACLES+1,y
  3095 216E CA				dex
  3096 216F CA				dex
  3097 2170			@exit
  3098 					.ifdef @new
  3099 					lda <@VarData
  3100 					sta :ztmp
  3101 					lda >@VarData
  3102 					ldy #@VarDataSize-1
  3103 					jmp @FreeMem
  3104 					els
  3105 2170 60				rts						; ret
  3106 					eif
  3107 				.endl
  3108
  3109 2171			.local	SETLEVEL06					; PROCEDURE
  3110
  3111 				; optimize OK (levels.inc), line = 82
  3112
  3113 2171 A9 01			lda #$01
  3114 2173 8D 52 2B			sta SETPLAYER.ISALIVE
  3115 2176 A9 62			lda #$62
  3116 2178 8D 51 2B			sta SETPLAYER.COLOUR
  3117 217B A9 51			lda #$51
  3118 217D 8D 50 2B			sta SETPLAYER.HEAD
  3119 2180 A9 00			lda #$00
  3120 2182 8D 4F 2B			sta SETPLAYER.BRAIN
  3121 2185 A9 04			lda #$04
  3122 2187 8D 4E 2B			sta SETPLAYER.DIR
  3123 218A A9 0C			lda #$0C
  3124 218C 8D 4D 2B			sta SETPLAYER.Y
  3125 218F A9 12			lda #$12
  3126 2191 8D 4C 2B			sta SETPLAYER.X
  3127 2194 AD EE 2A			lda PLAYER1
  3128 2197 8D 4A 2B			sta SETPLAYER.P
  3129 219A AD EF 2A			lda PLAYER1+1
  3130 219D 8D 4B 2B			sta SETPLAYER.P+1
  3131 21A0 20 9F 14			jsr SETPLAYER
  3132
  3133 				; optimize OK (levels.inc), line = 83
  3134
  3135 21A3 A9 01			lda #$01
  3136 21A5 8D 52 2B			sta SETPLAYER.ISALIVE
  3137 21A8 A9 5D			lda #$5D
  3138 21AA 8D 51 2B			sta SETPLAYER.COLOUR
  3139 21AD A9 51			lda #$51
  3140 21AF 8D 50 2B			sta SETPLAYER.HEAD
  3141 21B2 A9 02			lda #$02
  3142 21B4 8D 4F 2B			sta SETPLAYER.BRAIN
  3143 21B7 A9 08			lda #$08
  3144 21B9 8D 4E 2B			sta SETPLAYER.DIR
  3145 21BC A9 0C			lda #$0C
  3146 21BE 8D 4D 2B			sta SETPLAYER.Y
  3147 21C1 A9 16			lda #$16
  3148 21C3 8D 4C 2B			sta SETPLAYER.X
  3149 21C6 AD F0 2A			lda PLAYER2
  3150 21C9 8D 4A 2B			sta SETPLAYER.P
  3151 21CC AD F1 2A			lda PLAYER2+1
  3152 21CF 8D 4B 2B			sta SETPLAYER.P+1
  3153 21D2 20 9F 14			jsr SETPLAYER
  3154
  3155 				; optimize OK (levels.inc), line = 84
  3156
  3157 21D5 A9 01			lda #$01
  3158 21D7 8D 52 2B			sta SETPLAYER.ISALIVE
  3159 21DA A9 71			lda #$71
  3160 21DC 8D 51 2B			sta SETPLAYER.COLOUR
  3161 21DF A9 51			lda #$51
  3162 21E1 8D 50 2B			sta SETPLAYER.HEAD
  3163 21E4 A9 02			lda #$02
  3164 21E6 8D 4F 2B			sta SETPLAYER.BRAIN
  3165 21E9 8D 4E 2B			sta SETPLAYER.DIR
  3166 21EC A9 06			lda #$06
  3167 21EE 8D 4D 2B			sta SETPLAYER.Y
  3168 21F1 8D 4C 2B			sta SETPLAYER.X
  3169 21F4 AD F2 2A			lda PLAYER3
  3170 21F7 8D 4A 2B			sta SETPLAYER.P
  3171 21FA AD F3 2A			lda PLAYER3+1
  3172 21FD 8D 4B 2B			sta SETPLAYER.P+1
  3173 2200 20 9F 14			jsr SETPLAYER
  3174
  3175 				; optimize OK (levels.inc), line = 85
  3176
  3177 2203 A9 01			lda #$01
  3178 2205 8D 52 2B			sta SETPLAYER.ISALIVE
  3179 2208 A9 55			lda #$55
  3180 220A 8D 51 2B			sta SETPLAYER.COLOUR
  3181 220D A9 51			lda #$51
  3182 220F 8D 50 2B			sta SETPLAYER.HEAD
  3183 2212 A9 03			lda #$03
  3184 2214 8D 4F 2B			sta SETPLAYER.BRAIN
  3185 2217 A9 08			lda #$08
  3186 2219 8D 4E 2B			sta SETPLAYER.DIR
  3187 221C A9 12			lda #$12
  3188 221E 8D 4D 2B			sta SETPLAYER.Y
  3189 2221 A9 24			lda #$24
  3190 2223 8D 4C 2B			sta SETPLAYER.X
  3191 2226 AD F4 2A			lda PLAYER4
  3192 2229 8D 4A 2B			sta SETPLAYER.P
  3193 222C AD F5 2A			lda PLAYER4+1
  3194 222F 8D 4B 2B			sta SETPLAYER.P+1
  3195 2232 20 9F 14			jsr SETPLAYER
  3196
  3197 				; optimize FAIL (1, levels.inc), line = 87
  3198
  3199 2235 E8				inx
  3200 2236 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3201 223A 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3202 223C A9 06			lda #$06
  3203 223E 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3204 2241 A9 0A			lda #$0A
  3205 2243 8D 46 2B			sta CALCOBSTACLEADDR.X
  3206 2246 20 4D 13			jsr CALCOBSTACLEADDR
  3207 2249 B4 17			ldy :STACKORIGIN-1,x
  3208 224B B5 18			lda :STACKORIGIN,x
  3209 224D 99 2A 2B			sta adr.OBSTACLES,y
  3210 2250 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3211 2252 99 2B 2B			sta adr.OBSTACLES+1,y
  3212 2255 CA				dex
  3213 2256 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3214 225A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3215 225E A9 06			lda #$06
  3216 2260 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3217 2263 A9 1E			lda #$1E
  3218 2265 8D 46 2B			sta CALCOBSTACLEADDR.X
  3219 2268 20 4D 13			jsr CALCOBSTACLEADDR
  3220 226B B4 17			ldy :STACKORIGIN-1,x
  3221 226D B5 18			lda :STACKORIGIN,x
  3222 226F 99 2A 2B			sta adr.OBSTACLES,y
  3223 2272 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3224 2274 99 2B 2B			sta adr.OBSTACLES+1,y
  3225 2277 CA				dex
  3226
  3227 				; optimize FAIL (1, levels.inc), line = 88
  3228
  3229 2278 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3230 227C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3231 2280 A9 12			lda #$12
  3232 2282 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3233 2285 A9 0A			lda #$0A
  3234 2287 8D 46 2B			sta CALCOBSTACLEADDR.X
  3235 228A 20 4D 13			jsr CALCOBSTACLEADDR
  3236 228D B4 17			ldy :STACKORIGIN-1,x
  3237 228F B5 18			lda :STACKORIGIN,x
  3238 2291 99 2A 2B			sta adr.OBSTACLES,y
  3239 2294 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3240 2296 99 2B 2B			sta adr.OBSTACLES+1,y
  3241 2299 CA				dex
  3242 229A A9 06 95 18			mva #$06 :STACKORIGIN,x
  3243 229E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3244 22A2 A9 12			lda #$12
  3245 22A4 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3246 22A7 A9 1E			lda #$1E
  3247 22A9 8D 46 2B			sta CALCOBSTACLEADDR.X
  3248 22AC 20 4D 13			jsr CALCOBSTACLEADDR
  3249 22AF B4 17			ldy :STACKORIGIN-1,x
  3250 22B1 B5 18			lda :STACKORIGIN,x
  3251 22B3 99 2A 2B			sta adr.OBSTACLES,y
  3252 22B6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3253 22B8 99 2B 2B			sta adr.OBSTACLES+1,y
  3254 22BB CA				dex
  3255
  3256 				; optimize FAIL (1, levels.inc), line = 89
  3257
  3258 22BC A9 08 95 18			mva #$08 :STACKORIGIN,x
  3259 22C0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3260 22C4 A9 0C			lda #$0C
  3261 22C6 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3262 22C9 A9 01			lda #$01
  3263 22CB 8D 46 2B			sta CALCOBSTACLEADDR.X
  3264 22CE 20 4D 13			jsr CALCOBSTACLEADDR
  3265 22D1 B4 17			ldy :STACKORIGIN-1,x
  3266 22D3 B5 18			lda :STACKORIGIN,x
  3267 22D5 99 2A 2B			sta adr.OBSTACLES,y
  3268 22D8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3269 22DA 99 2B 2B			sta adr.OBSTACLES+1,y
  3270 22DD CA				dex
  3271 22DE A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3272 22E2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3273 22E6 A9 02			lda #$02
  3274 22E8 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3275 22EB A9 14			lda #$14
  3276 22ED 8D 46 2B			sta CALCOBSTACLEADDR.X
  3277 22F0 20 4D 13			jsr CALCOBSTACLEADDR
  3278 22F3 B4 17			ldy :STACKORIGIN-1,x
  3279 22F5 B5 18			lda :STACKORIGIN,x
  3280 22F7 99 2A 2B			sta adr.OBSTACLES,y
  3281 22FA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3282 22FC 99 2B 2B			sta adr.OBSTACLES+1,y
  3283 22FF CA				dex
  3284
  3285 				; optimize FAIL (1, levels.inc), line = 90
  3286
  3287 2300 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3288 2304 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3289 2308 A9 16			lda #$16
  3290 230A 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3291 230D A9 14			lda #$14
  3292 230F 8D 46 2B			sta CALCOBSTACLEADDR.X
  3293 2312 20 4D 13			jsr CALCOBSTACLEADDR
  3294 2315 B4 17			ldy :STACKORIGIN-1,x
  3295 2317 B5 18			lda :STACKORIGIN,x
  3296 2319 99 2A 2B			sta adr.OBSTACLES,y
  3297 231C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3298 231E 99 2B 2B			sta adr.OBSTACLES+1,y
  3299 2321 CA				dex
  3300 2322 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3301 2326 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3302 232A A9 0C			lda #$0C
  3303 232C 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3304 232F A9 14			lda #$14
  3305 2331 8D 46 2B			sta CALCOBSTACLEADDR.X
  3306 2334 20 4D 13			jsr CALCOBSTACLEADDR
  3307 2337 B4 17			ldy :STACKORIGIN-1,x
  3308 2339 B5 18			lda :STACKORIGIN,x
  3309 233B 99 2A 2B			sta adr.OBSTACLES,y
  3310 233E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3311 2340 99 2B 2B			sta adr.OBSTACLES+1,y
  3312 2343 CA				dex
  3313 2344 CA				dex
  3314 2345			@exit
  3315 					.ifdef @new
  3316 					lda <@VarData
  3317 					sta :ztmp
  3318 					lda >@VarData
  3319 					ldy #@VarDataSize-1
  3320 					jmp @FreeMem
  3321 					els
  3322 2345 60				rts						; ret
  3323 					eif
  3324 				.endl
  3325
  3326 2346			.local	SETLEVEL07					; PROCEDURE
  3327
  3328 				; optimize OK (levels.inc), line = 97
  3329
  3330 2346 A9 01			lda #$01
  3331 2348 8D 52 2B			sta SETPLAYER.ISALIVE
  3332 234B A9 62			lda #$62
  3333 234D 8D 51 2B			sta SETPLAYER.COLOUR
  3334 2350 A9 51			lda #$51
  3335 2352 8D 50 2B			sta SETPLAYER.HEAD
  3336 2355 A9 00			lda #$00
  3337 2357 8D 4F 2B			sta SETPLAYER.BRAIN
  3338 235A A9 04			lda #$04
  3339 235C 8D 4E 2B			sta SETPLAYER.DIR
  3340 235F A9 0C			lda #$0C
  3341 2361 8D 4D 2B			sta SETPLAYER.Y
  3342 2364 A9 12			lda #$12
  3343 2366 8D 4C 2B			sta SETPLAYER.X
  3344 2369 AD EE 2A			lda PLAYER1
  3345 236C 8D 4A 2B			sta SETPLAYER.P
  3346 236F AD EF 2A			lda PLAYER1+1
  3347 2372 8D 4B 2B			sta SETPLAYER.P+1
  3348 2375 20 9F 14			jsr SETPLAYER
  3349
  3350 				; optimize OK (levels.inc), line = 98
  3351
  3352 2378 A9 01			lda #$01
  3353 237A 8D 52 2B			sta SETPLAYER.ISALIVE
  3354 237D A9 5D			lda #$5D
  3355 237F 8D 51 2B			sta SETPLAYER.COLOUR
  3356 2382 A9 51			lda #$51
  3357 2384 8D 50 2B			sta SETPLAYER.HEAD
  3358 2387 A9 03			lda #$03
  3359 2389 8D 4F 2B			sta SETPLAYER.BRAIN
  3360 238C A9 08			lda #$08
  3361 238E 8D 4E 2B			sta SETPLAYER.DIR
  3362 2391 A9 17			lda #$17
  3363 2393 8D 4D 2B			sta SETPLAYER.Y
  3364 2396 A9 01			lda #$01
  3365 2398 8D 4C 2B			sta SETPLAYER.X
  3366 239B AD F0 2A			lda PLAYER2
  3367 239E 8D 4A 2B			sta SETPLAYER.P
  3368 23A1 AD F1 2A			lda PLAYER2+1
  3369 23A4 8D 4B 2B			sta SETPLAYER.P+1
  3370 23A7 20 9F 14			jsr SETPLAYER
  3371
  3372 				; optimize OK (levels.inc), line = 99
  3373
  3374 23AA A9 01			lda #$01
  3375 23AC 8D 52 2B			sta SETPLAYER.ISALIVE
  3376 23AF A9 71			lda #$71
  3377 23B1 8D 51 2B			sta SETPLAYER.COLOUR
  3378 23B4 A9 51			lda #$51
  3379 23B6 8D 50 2B			sta SETPLAYER.HEAD
  3380 23B9 A9 03			lda #$03
  3381 23BB 8D 4F 2B			sta SETPLAYER.BRAIN
  3382 23BE A9 02			lda #$02
  3383 23C0 8D 4E 2B			sta SETPLAYER.DIR
  3384 23C3 A9 04			lda #$04
  3385 23C5 8D 4D 2B			sta SETPLAYER.Y
  3386 23C8 A9 1E			lda #$1E
  3387 23CA 8D 4C 2B			sta SETPLAYER.X
  3388 23CD AD F2 2A			lda PLAYER3
  3389 23D0 8D 4A 2B			sta SETPLAYER.P
  3390 23D3 AD F3 2A			lda PLAYER3+1
  3391 23D6 8D 4B 2B			sta SETPLAYER.P+1
  3392 23D9 20 9F 14			jsr SETPLAYER
  3393
  3394 				; optimize OK (levels.inc), line = 100
  3395
  3396 23DC A9 01			lda #$01
  3397 23DE 8D 52 2B			sta SETPLAYER.ISALIVE
  3398 23E1 A9 55			lda #$55
  3399 23E3 8D 51 2B			sta SETPLAYER.COLOUR
  3400 23E6 A9 51			lda #$51
  3401 23E8 8D 50 2B			sta SETPLAYER.HEAD
  3402 23EB A9 02			lda #$02
  3403 23ED 8D 4F 2B			sta SETPLAYER.BRAIN
  3404 23F0 A9 01			lda #$01
  3405 23F2 8D 4E 2B			sta SETPLAYER.DIR
  3406 23F5 A9 15			lda #$15
  3407 23F7 8D 4D 2B			sta SETPLAYER.Y
  3408 23FA A9 24			lda #$24
  3409 23FC 8D 4C 2B			sta SETPLAYER.X
  3410 23FF AD F4 2A			lda PLAYER4
  3411 2402 8D 4A 2B			sta SETPLAYER.P
  3412 2405 AD F5 2A			lda PLAYER4+1
  3413 2408 8D 4B 2B			sta SETPLAYER.P+1
  3414 240B 20 9F 14			jsr SETPLAYER
  3415
  3416 				; optimize FAIL (1, levels.inc), line = 102
  3417
  3418 240E E8				inx
  3419 240F A9 00 95 18			mva #$00 :STACKORIGIN,x
  3420 2413 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3421 2415 A9 06			lda #$06
  3422 2417 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3423 241A A9 0A			lda #$0A
  3424 241C 8D 46 2B			sta CALCOBSTACLEADDR.X
  3425 241F 20 4D 13			jsr CALCOBSTACLEADDR
  3426 2422 B4 17			ldy :STACKORIGIN-1,x
  3427 2424 B5 18			lda :STACKORIGIN,x
  3428 2426 99 2A 2B			sta adr.OBSTACLES,y
  3429 2429 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3430 242B 99 2B 2B			sta adr.OBSTACLES+1,y
  3431 242E CA				dex
  3432 242F A9 02 95 18			mva #$02 :STACKORIGIN,x
  3433 2433 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3434 2437 A9 06			lda #$06
  3435 2439 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3436 243C A9 1E			lda #$1E
  3437 243E 8D 46 2B			sta CALCOBSTACLEADDR.X
  3438 2441 20 4D 13			jsr CALCOBSTACLEADDR
  3439 2444 B4 17			ldy :STACKORIGIN-1,x
  3440 2446 B5 18			lda :STACKORIGIN,x
  3441 2448 99 2A 2B			sta adr.OBSTACLES,y
  3442 244B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3443 244D 99 2B 2B			sta adr.OBSTACLES+1,y
  3444 2450 CA				dex
  3445
  3446 				; optimize FAIL (1, levels.inc), line = 103
  3447
  3448 2451 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3449 2455 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3450 2459 A9 12			lda #$12
  3451 245B 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3452 245E A9 0A			lda #$0A
  3453 2460 8D 46 2B			sta CALCOBSTACLEADDR.X
  3454 2463 20 4D 13			jsr CALCOBSTACLEADDR
  3455 2466 B4 17			ldy :STACKORIGIN-1,x
  3456 2468 B5 18			lda :STACKORIGIN,x
  3457 246A 99 2A 2B			sta adr.OBSTACLES,y
  3458 246D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3459 246F 99 2B 2B			sta adr.OBSTACLES+1,y
  3460 2472 CA				dex
  3461 2473 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3462 2477 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3463 247B A9 12			lda #$12
  3464 247D 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3465 2480 A9 1E			lda #$1E
  3466 2482 8D 46 2B			sta CALCOBSTACLEADDR.X
  3467 2485 20 4D 13			jsr CALCOBSTACLEADDR
  3468 2488 B4 17			ldy :STACKORIGIN-1,x
  3469 248A B5 18			lda :STACKORIGIN,x
  3470 248C 99 2A 2B			sta adr.OBSTACLES,y
  3471 248F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3472 2491 99 2B 2B			sta adr.OBSTACLES+1,y
  3473 2494 CA				dex
  3474
  3475 				; optimize FAIL (1, levels.inc), line = 104
  3476
  3477 2495 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3478 2499 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3479 249D A9 0C			lda #$0C
  3480 249F 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3481 24A2 A9 01			lda #$01
  3482 24A4 8D 46 2B			sta CALCOBSTACLEADDR.X
  3483 24A7 20 4D 13			jsr CALCOBSTACLEADDR
  3484 24AA B4 17			ldy :STACKORIGIN-1,x
  3485 24AC B5 18			lda :STACKORIGIN,x
  3486 24AE 99 2A 2B			sta adr.OBSTACLES,y
  3487 24B1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3488 24B3 99 2B 2B			sta adr.OBSTACLES+1,y
  3489 24B6 CA				dex
  3490 24B7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3491 24BB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3492 24BF A9 02			lda #$02
  3493 24C1 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3494 24C4 A9 14			lda #$14
  3495 24C6 8D 46 2B			sta CALCOBSTACLEADDR.X
  3496 24C9 20 4D 13			jsr CALCOBSTACLEADDR
  3497 24CC B4 17			ldy :STACKORIGIN-1,x
  3498 24CE B5 18			lda :STACKORIGIN,x
  3499 24D0 99 2A 2B			sta adr.OBSTACLES,y
  3500 24D3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3501 24D5 99 2B 2B			sta adr.OBSTACLES+1,y
  3502 24D8 CA				dex
  3503
  3504 				; optimize FAIL (1, levels.inc), line = 105
  3505
  3506 24D9 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3507 24DD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3508 24E1 A9 16			lda #$16
  3509 24E3 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3510 24E6 A9 14			lda #$14
  3511 24E8 8D 46 2B			sta CALCOBSTACLEADDR.X
  3512 24EB 20 4D 13			jsr CALCOBSTACLEADDR
  3513 24EE B4 17			ldy :STACKORIGIN-1,x
  3514 24F0 B5 18			lda :STACKORIGIN,x
  3515 24F2 99 2A 2B			sta adr.OBSTACLES,y
  3516 24F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3517 24F7 99 2B 2B			sta adr.OBSTACLES+1,y
  3518 24FA CA				dex
  3519 24FB A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3520 24FF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3521 2503 A9 0C			lda #$0C
  3522 2505 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3523 2508 A9 14			lda #$14
  3524 250A 8D 46 2B			sta CALCOBSTACLEADDR.X
  3525 250D 20 4D 13			jsr CALCOBSTACLEADDR
  3526 2510 B4 17			ldy :STACKORIGIN-1,x
  3527 2512 B5 18			lda :STACKORIGIN,x
  3528 2514 99 2A 2B			sta adr.OBSTACLES,y
  3529 2517 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3530 2519 99 2B 2B			sta adr.OBSTACLES+1,y
  3531 251C CA				dex
  3532 251D CA				dex
  3533 251E			@exit
  3534 					.ifdef @new
  3535 					lda <@VarData
  3536 					sta :ztmp
  3537 					lda >@VarData
  3538 					ldy #@VarDataSize-1
  3539 					jmp @FreeMem
  3540 					els
  3541 251E 60				rts						; ret
  3542 					eif
  3543 				.endl
  3544
  3545 251F			.local	SETLEVEL08					; PROCEDURE
  3546
  3547 				; optimize OK (levels.inc), line = 112
  3548
  3549 251F A9 01			lda #$01
  3550 2521 8D 52 2B			sta SETPLAYER.ISALIVE
  3551 2524 A9 62			lda #$62
  3552 2526 8D 51 2B			sta SETPLAYER.COLOUR
  3553 2529 A9 51			lda #$51
  3554 252B 8D 50 2B			sta SETPLAYER.HEAD
  3555 252E A9 00			lda #$00
  3556 2530 8D 4F 2B			sta SETPLAYER.BRAIN
  3557 2533 A9 08			lda #$08
  3558 2535 8D 4E 2B			sta SETPLAYER.DIR
  3559 2538 A9 17			lda #$17
  3560 253A 8D 4D 2B			sta SETPLAYER.Y
  3561 253D A9 01			lda #$01
  3562 253F 8D 4C 2B			sta SETPLAYER.X
  3563 2542 AD EE 2A			lda PLAYER1
  3564 2545 8D 4A 2B			sta SETPLAYER.P
  3565 2548 AD EF 2A			lda PLAYER1+1
  3566 254B 8D 4B 2B			sta SETPLAYER.P+1
  3567 254E 20 9F 14			jsr SETPLAYER
  3568
  3569 				; optimize OK (levels.inc), line = 113
  3570
  3571 2551 A9 01			lda #$01
  3572 2553 8D 52 2B			sta SETPLAYER.ISALIVE
  3573 2556 A9 5D			lda #$5D
  3574 2558 8D 51 2B			sta SETPLAYER.COLOUR
  3575 255B A9 51			lda #$51
  3576 255D 8D 50 2B			sta SETPLAYER.HEAD
  3577 2560 A9 03			lda #$03
  3578 2562 8D 4F 2B			sta SETPLAYER.BRAIN
  3579 2565 A9 04			lda #$04
  3580 2567 8D 4E 2B			sta SETPLAYER.DIR
  3581 256A A9 17			lda #$17
  3582 256C 8D 4D 2B			sta SETPLAYER.Y
  3583 256F A9 26			lda #$26
  3584 2571 8D 4C 2B			sta SETPLAYER.X
  3585 2574 AD F0 2A			lda PLAYER2
  3586 2577 8D 4A 2B			sta SETPLAYER.P
  3587 257A AD F1 2A			lda PLAYER2+1
  3588 257D 8D 4B 2B			sta SETPLAYER.P+1
  3589 2580 20 9F 14			jsr SETPLAYER
  3590
  3591 				; optimize OK (levels.inc), line = 114
  3592
  3593 2583 A9 01			lda #$01
  3594 2585 8D 52 2B			sta SETPLAYER.ISALIVE
  3595 2588 A9 71			lda #$71
  3596 258A 8D 51 2B			sta SETPLAYER.COLOUR
  3597 258D A9 51			lda #$51
  3598 258F 8D 50 2B			sta SETPLAYER.HEAD
  3599 2592 A9 02			lda #$02
  3600 2594 8D 4F 2B			sta SETPLAYER.BRAIN
  3601 2597 8D 4E 2B			sta SETPLAYER.DIR
  3602 259A A9 01			lda #$01
  3603 259C 8D 4D 2B			sta SETPLAYER.Y
  3604 259F A9 0A			lda #$0A
  3605 25A1 8D 4C 2B			sta SETPLAYER.X
  3606 25A4 AD F2 2A			lda PLAYER3
  3607 25A7 8D 4A 2B			sta SETPLAYER.P
  3608 25AA AD F3 2A			lda PLAYER3+1
  3609 25AD 8D 4B 2B			sta SETPLAYER.P+1
  3610 25B0 20 9F 14			jsr SETPLAYER
  3611
  3612 				; optimize OK (levels.inc), line = 115
  3613
  3614 25B3 A9 01			lda #$01
  3615 25B5 8D 52 2B			sta SETPLAYER.ISALIVE
  3616 25B8 A9 55			lda #$55
  3617 25BA 8D 51 2B			sta SETPLAYER.COLOUR
  3618 25BD A9 51			lda #$51
  3619 25BF 8D 50 2B			sta SETPLAYER.HEAD
  3620 25C2 A9 04			lda #$04
  3621 25C4 8D 4F 2B			sta SETPLAYER.BRAIN
  3622 25C7 8D 4E 2B			sta SETPLAYER.DIR
  3623 25CA A9 01			lda #$01
  3624 25CC 8D 4D 2B			sta SETPLAYER.Y
  3625 25CF A9 26			lda #$26
  3626 25D1 8D 4C 2B			sta SETPLAYER.X
  3627 25D4 AD F4 2A			lda PLAYER4
  3628 25D7 8D 4A 2B			sta SETPLAYER.P
  3629 25DA AD F5 2A			lda PLAYER4+1
  3630 25DD 8D 4B 2B			sta SETPLAYER.P+1
  3631 25E0 20 9F 14			jsr SETPLAYER
  3632
  3633 				; optimize FAIL (1, levels.inc), line = 117
  3634
  3635 25E3 E8				inx
  3636 25E4 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3637 25E8 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3638 25EA A9 06			lda #$06
  3639 25EC 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3640 25EF A9 0A			lda #$0A
  3641 25F1 8D 46 2B			sta CALCOBSTACLEADDR.X
  3642 25F4 20 4D 13			jsr CALCOBSTACLEADDR
  3643 25F7 B4 17			ldy :STACKORIGIN-1,x
  3644 25F9 B5 18			lda :STACKORIGIN,x
  3645 25FB 99 2A 2B			sta adr.OBSTACLES,y
  3646 25FE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3647 2600 99 2B 2B			sta adr.OBSTACLES+1,y
  3648 2603 CA				dex
  3649 2604 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3650 2608 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3651 260C A9 06			lda #$06
  3652 260E 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3653 2611 A9 1E			lda #$1E
  3654 2613 8D 46 2B			sta CALCOBSTACLEADDR.X
  3655 2616 20 4D 13			jsr CALCOBSTACLEADDR
  3656 2619 B4 17			ldy :STACKORIGIN-1,x
  3657 261B B5 18			lda :STACKORIGIN,x
  3658 261D 99 2A 2B			sta adr.OBSTACLES,y
  3659 2620 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3660 2622 99 2B 2B			sta adr.OBSTACLES+1,y
  3661 2625 CA				dex
  3662
  3663 				; optimize FAIL (1, levels.inc), line = 118
  3664
  3665 2626 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3666 262A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3667 262E A9 12			lda #$12
  3668 2630 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3669 2633 A9 0A			lda #$0A
  3670 2635 8D 46 2B			sta CALCOBSTACLEADDR.X
  3671 2638 20 4D 13			jsr CALCOBSTACLEADDR
  3672 263B B4 17			ldy :STACKORIGIN-1,x
  3673 263D B5 18			lda :STACKORIGIN,x
  3674 263F 99 2A 2B			sta adr.OBSTACLES,y
  3675 2642 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3676 2644 99 2B 2B			sta adr.OBSTACLES+1,y
  3677 2647 CA				dex
  3678 2648 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3679 264C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3680 2650 A9 12			lda #$12
  3681 2652 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3682 2655 A9 1E			lda #$1E
  3683 2657 8D 46 2B			sta CALCOBSTACLEADDR.X
  3684 265A 20 4D 13			jsr CALCOBSTACLEADDR
  3685 265D B4 17			ldy :STACKORIGIN-1,x
  3686 265F B5 18			lda :STACKORIGIN,x
  3687 2661 99 2A 2B			sta adr.OBSTACLES,y
  3688 2664 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3689 2666 99 2B 2B			sta adr.OBSTACLES+1,y
  3690 2669 CA				dex
  3691
  3692 				; optimize FAIL (1, levels.inc), line = 119
  3693
  3694 266A A9 08 95 18			mva #$08 :STACKORIGIN,x
  3695 266E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3696 2672 A9 0C			lda #$0C
  3697 2674 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3698 2677 A9 01			lda #$01
  3699 2679 8D 46 2B			sta CALCOBSTACLEADDR.X
  3700 267C 20 4D 13			jsr CALCOBSTACLEADDR
  3701 267F B4 17			ldy :STACKORIGIN-1,x
  3702 2681 B5 18			lda :STACKORIGIN,x
  3703 2683 99 2A 2B			sta adr.OBSTACLES,y
  3704 2686 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3705 2688 99 2B 2B			sta adr.OBSTACLES+1,y
  3706 268B CA				dex
  3707 268C A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3708 2690 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3709 2694 A9 02			lda #$02
  3710 2696 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3711 2699 A9 14			lda #$14
  3712 269B 8D 46 2B			sta CALCOBSTACLEADDR.X
  3713 269E 20 4D 13			jsr CALCOBSTACLEADDR
  3714 26A1 B4 17			ldy :STACKORIGIN-1,x
  3715 26A3 B5 18			lda :STACKORIGIN,x
  3716 26A5 99 2A 2B			sta adr.OBSTACLES,y
  3717 26A8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3718 26AA 99 2B 2B			sta adr.OBSTACLES+1,y
  3719 26AD CA				dex
  3720
  3721 				; optimize FAIL (1, levels.inc), line = 120
  3722
  3723 26AE A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3724 26B2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3725 26B6 A9 16			lda #$16
  3726 26B8 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3727 26BB A9 14			lda #$14
  3728 26BD 8D 46 2B			sta CALCOBSTACLEADDR.X
  3729 26C0 20 4D 13			jsr CALCOBSTACLEADDR
  3730 26C3 B4 17			ldy :STACKORIGIN-1,x
  3731 26C5 B5 18			lda :STACKORIGIN,x
  3732 26C7 99 2A 2B			sta adr.OBSTACLES,y
  3733 26CA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3734 26CC 99 2B 2B			sta adr.OBSTACLES+1,y
  3735 26CF CA				dex
  3736 26D0 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3737 26D4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3738 26D8 A9 0C			lda #$0C
  3739 26DA 8D 47 2B			sta CALCOBSTACLEADDR.Y
  3740 26DD A9 14			lda #$14
  3741 26DF 8D 46 2B			sta CALCOBSTACLEADDR.X
  3742 26E2 20 4D 13			jsr CALCOBSTACLEADDR
  3743 26E5 B4 17			ldy :STACKORIGIN-1,x
  3744 26E7 B5 18			lda :STACKORIGIN,x
  3745 26E9 99 2A 2B			sta adr.OBSTACLES,y
  3746 26EC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3747 26EE 99 2B 2B			sta adr.OBSTACLES+1,y
  3748 26F1 CA				dex
  3749 26F2 CA				dex
  3750 26F3			@exit
  3751 					.ifdef @new
  3752 					lda <@VarData
  3753 					sta :ztmp
  3754 					lda >@VarData
  3755 					ldy #@VarDataSize-1
  3756 					jmp @FreeMem
  3757 					els
  3758 26F3 60				rts						; ret
  3759 					eif
  3760 				.endl
  3761
  3762 26F4			.local	INITPLAYFIELD					; PROCEDURE
  3763
  3764 				; optimize OK (init.inc), line = 5
  3765
  3766 26F4 A9 1F			lda #$1F
  3767 26F6 8D 15 FF			sta BACKGROUND
  3768 26F9 A9 00			lda #$00
  3769 26FB 8D 19 FF			sta BOREDER
  3770
  3771 				; optimize OK (init.inc), line = 6
  3772
  3773 26FE A9 20			lda #$20
  3774 2700 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3775 2702 A9 C0			lda #$C0
  3776 2704 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3777 2706 A9 03			lda #$03
  3778 2708 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3779 270A A9 00			lda #$00
  3780 270C 85 08			sta SYSTEM.FILLCHAR_0056.A
  3781 270E A9 0C			lda #$0C
  3782 2710 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3783 2712 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3784
  3785 				; optimize OK (init.inc), line = 8
  3786
  3787 2715 A9 27			lda #$27
  3788 2717 85 58			sta T0B
  3789
  3790 2719			l_0DA2
  3791 				; --- ForToDoCondition
  3792
  3793 				; optimize OK (init.inc), line = 9
  3794
  3795 2719 A4 58			ldy T0B
  3796 271B A9 A0			lda #$A0
  3797 271D 99 00 0C			sta $0C00,y
  3798
  3799 				; optimize OK (init.inc), line = 10
  3800
  3801 2720 99 C0 0F			sta $0FC0,y
  3802
  3803 				; optimize OK (init.inc), line = 11
  3804
  3805 2723 A9 41			lda #$41
  3806 2725 99 00 08			sta $0800,y
  3807
  3808 				; optimize OK (init.inc), line = 12
  3809
  3810 2728 99 C0 0B			sta $0BC0,y
  3811
  3812 				; --- ForToDoEpilog
  3813 272B C6 58			dec T0B
  3814 272D 10 EA			jpl l_0DA2
  3815 272F			l_0DB0
  3816
  3817 				; optimize OK (init.inc), line = 15
  3818
  3819 272F A9 18			lda #$18
  3820 2731 85 58			sta T0B
  3821
  3822 2733			l_0DE2
  3823 				; --- ForToDoCondition
  3824 2733 A5 58			lda T0B
  3825 2735 C9 01			cmp #$01
  3826 2737 90 3A			jcc l_0DF0
  3827
  3828 				; optimize OK (init.inc), line = 16
  3829
  3830 2739 0A				asl @
  3831 273A A8				tay
  3832 273B A9 FF			lda #$FF
  3833 273D 18 79 0E 10			add adr.MUL40,y
  3834 2741 85 12			sta :bp2
  3835 2743 A9 0B			lda #$0B
  3836 2745 79 0F 10			adc adr.MUL40+1,y
  3837 2748 85 13			sta :bp2+1
  3838 274A A0 00			ldy #$00
  3839 274C A9 A0			lda #$A0
  3840 274E 91 12			sta (:bp2),y
  3841 2750 C8				iny
  3842 2751 91 12			sta (:bp2),y
  3843
  3844 				; optimize OK (init.inc), line = 17
  3845
  3846 2753 A5 58			lda T0B
  3847 2755 0A				asl @
  3848 2756 A8				tay
  3849 2757 A9 FF			lda #$FF
  3850 2759 18 79 0E 10			add adr.MUL40,y
  3851 275D 85 12			sta :bp2
  3852 275F A9 07			lda #$07
  3853 2761 79 0F 10			adc adr.MUL40+1,y
  3854 2764 85 13			sta :bp2+1
  3855 2766 A0 00			ldy #$00
  3856 2768 A9 41			lda #$41
  3857 276A 91 12			sta (:bp2),y
  3858 276C C8				iny
  3859 276D 91 12			sta (:bp2),y
  3860
  3861 				; --- ForToDoEpilog
  3862 276F C6 58			dec T0B
  3863 2771 10 C0			jpl l_0DE2
  3864 2773			l_0DF0
  3865
  3866 				; optimize OK (init.inc), line = 20
  3867
  3868 2773 A9 07			lda #$07
  3869 2775 85 59			sta I0B
  3870
  3871 2777			l_0E14
  3872 				; --- ForToDoCondition
  3873 2777 A5 59			lda I0B
  3874 2779 0A				asl @
  3875 277A A8				tay
  3876 277B A9 7E			lda #$7E
  3877 277D 99 2A 2B			sta adr.OBSTACLES,y
  3878 2780 A9 00			lda #$00
  3879 2782 99 2B 2B			sta adr.OBSTACLES+1,y
  3880
  3881 				; --- ForToDoEpilog
  3882 2785 C6 59			dec I0B
  3883 2787 10 EE			jpl l_0E14
  3884 2789			l_0E22
  3885
  3886 				; ------------------------------------------------------------
  3887
  3888 = 0000			@FORTMP_0D9F	= $00
  3889 = 0001			@FORTMP_0DDF	= $01
  3890 = 0000			@FORTMP_0E11	= $00
  3891 2789			@exit
  3892 					.ifdef @new
  3893 					lda <@VarData
  3894 					sta :ztmp
  3895 					lda >@VarData
  3896 					ldy #@VarDataSize-1
  3897 					jmp @FreeMem
  3898 					els
  3899 2789 60				rts						; ret
  3900 					eif
  3901 				.endl
  3902
  3903 278A			.local	INITPLAYERS					; PROCEDURE
  3904
  3905 				; optimize OK (init.inc), line = 27
  3906
  3907 278A A9 FF			lda #$FF
  3908 278C 85 5A			sta ALIVE
  3909
  3910 				; optimize OK (init.inc), line = 28
  3911
  3912 278E A9 00			lda #$00
  3913 2790 8D 11 2B			sta PLAYER1.ISALIVE
  3914 2793 8D 19 2B			sta PLAYER2.ISALIVE
  3915
  3916 				; optimize OK (init.inc), line = 29
  3917
  3918 2796 8D 21 2B			sta PLAYER3.ISALIVE
  3919 2799 8D 29 2B			sta PLAYER4.ISALIVE
  3920 279C			@exit
  3921 					.ifdef @new
  3922 					lda <@VarData
  3923 					sta :ztmp
  3924 					lda >@VarData
  3925 					ldy #@VarDataSize-1
  3926 					jmp @FreeMem
  3927 					els
  3928 279C 60				rts						; ret
  3929 					eif
  3930 				.endl
  3931
  3932 279D			.local	INITSCORE					; PROCEDURE
  3933
  3934 				; optimize OK (init.inc), line = 36
  3935
  3936 279D A9 30			lda #$30
  3937 279F 8D 10 2B			sta PLAYER1.SCORE
  3938 27A2 8D 18 2B			sta PLAYER2.SCORE
  3939
  3940 				; optimize OK (init.inc), line = 37
  3941
  3942 27A5 8D 20 2B			sta PLAYER3.SCORE
  3943 27A8 8D 28 2B			sta PLAYER4.SCORE
  3944 27AB			@exit
  3945 					.ifdef @new
  3946 					lda <@VarData
  3947 					sta :ztmp
  3948 					lda >@VarData
  3949 					ldy #@VarDataSize-1
  3950 					jmp @FreeMem
  3951 					els
  3952 27AB 60				rts						; ret
  3953 					eif
  3954 				.endl
  3955
  3956 27AC			.local	INITARENA					; PROCEDURE
  3957
  3958 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  3959
  3960 27AC 20 F4 26			jsr INITPLAYFIELD
  3961 27AF 20 8A 27			jsr INITPLAYERS
  3962
  3963 				; optimize OK (init.inc), line = 46
  3964
  3965 27B2 AD 08 2B			lda LEVEL
  3966 27B5 8D 5C 2B			sta @CASETMP_0006
  3967 27B8 C9 00			cmp #$00
  3968 27BA D0 06			jne l_0E6B
  3969 27BC			@
  3970
  3971 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  3972
  3973 27BC 20 61 19			jsr SETLEVEL00
  3974 27BF 4C 0F 28			jmp a_0006
  3975 27C2			l_0E6B
  3976 27C2 C9 01			cmp #$01
  3977 27C4 D0 06			jne l_0E75
  3978 27C6			@
  3979
  3980 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  3981
  3982 27C6 20 92 1A			jsr SETLEVEL01
  3983 27C9 4C 0F 28			jmp a_0006
  3984 27CC			l_0E75
  3985 27CC C9 02			cmp #$02
  3986 27CE D0 06			jne l_0E7F
  3987 27D0			@
  3988
  3989 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  3990
  3991 27D0 20 C3 1B			jsr SETLEVEL02
  3992 27D3 4C 0F 28			jmp a_0006
  3993 27D6			l_0E7F
  3994 27D6 C9 03			cmp #$03
  3995 27D8 D0 06			jne l_0E89
  3996 27DA			@
  3997
  3998 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  3999
  4000 27DA 20 F4 1C			jsr SETLEVEL03
  4001 27DD 4C 0F 28			jmp a_0006
  4002 27E0			l_0E89
  4003 27E0 C9 04			cmp #$04
  4004 27E2 D0 06			jne l_0E93
  4005 27E4			@
  4006
  4007 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4008
  4009 27E4 20 47 1E			jsr SETLEVEL04
  4010 27E7 4C 0F 28			jmp a_0006
  4011 27EA			l_0E93
  4012 27EA C9 05			cmp #$05
  4013 27EC D0 06			jne l_0E9D
  4014 27EE			@
  4015
  4016 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4017
  4018 27EE 20 BC 1F			jsr SETLEVEL05
  4019 27F1 4C 0F 28			jmp a_0006
  4020 27F4			l_0E9D
  4021 27F4 C9 06			cmp #$06
  4022 27F6 D0 06			jne l_0EA7
  4023 27F8			@
  4024
  4025 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4026
  4027 27F8 20 71 21			jsr SETLEVEL06
  4028 27FB 4C 0F 28			jmp a_0006
  4029 27FE			l_0EA7
  4030 27FE C9 07			cmp #$07
  4031 2800 D0 06			jne l_0EB1
  4032 2802			@
  4033
  4034 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4035
  4036 2802 20 46 23			jsr SETLEVEL07
  4037 2805 4C 0F 28			jmp a_0006
  4038 2808			l_0EB1
  4039 2808 C9 08			cmp #$08
  4040 280A D0 03			jne l_0EBB
  4041 280C			@
  4042
  4043 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4044
  4045 280C 20 1F 25			jsr SETLEVEL08
  4046 280F			l_0EBB
  4047 280F			a_0006
  4048
  4049 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4050
  4051 280F 20 70 13			jsr SAVEOBSTACLES
  4052 2812 20 18 13			jsr ANIMATEOBSTACLES
  4053 2815 20 E9 11			jsr SHOWSCORE
  4054
  4055 				; ------------------------------------------------------------
  4056
  4057 = 2B5C			@CASETMP_0006	= DATAORIGIN+$0064
  4058
  4059 = 2B5C			@VarData	= @CASETMP_0006
  4060 = 0001			@VarDataSize	= 1
  4061
  4062 2818			@exit
  4063 					.ifdef @new
  4064 					lda <@VarData
  4065 					sta :ztmp
  4066 					lda >@VarData
  4067 					ldy #@VarDataSize-1
  4068 					jmp @FreeMem
  4069 					els
  4070 2818 60				rts						; ret
  4071 					eif
  4072 				.endl
  4073
  4074 2819			.local	HUMAN						; PROCEDURE
  4075
  4076 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  4077
  4078 2819 20 8D 14			jsr CHECKJOYSTATUS
  4079 281C AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4080 2826 A0 04			ldy #PLY.DIR-DATAORIGIN
  4081 2828 B1 12			lda (:bp2),y
  4082 282A 85 5B			sta NEWDIR
  4083
  4084 				; optimize OK (main.pas), line = 16
  4085
  4086 282C A5 63			lda JOYSTATUS
  4087 282E 8D 5D 2B			sta @CASETMP_0007
  4088 2831 C9 01			cmp #$01
  4089 2833 D0 19			jne l_0EE2
  4090 2835			@
  4091
  4092 				; optimize OK (main.pas), line = 17
  4093
  4094 2835 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4095 283F A0 04			ldy #PLY.DIR-DATAORIGIN
  4096 2841 B1 12			lda (:bp2),y
  4097 2843 C9 02			cmp #$02
  4098 2845 F0 04			jeq l_0EF4
  4099 2847 A9 01			lda #$01
  4100 2849 85 5B			sta NEWDIR
  4101 284B			l_0EF4
  4102
  4103 284B 4C A2 28			jmp a_0007
  4104 284E			l_0EE2
  4105 284E C9 02			cmp #$02
  4106 2850 D0 19			jne l_0F04
  4107 2852			@
  4108
  4109 				; optimize OK (main.pas), line = 18
  4110
  4111 2852 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4112 285C A0 04			ldy #PLY.DIR-DATAORIGIN
  4113 285E B1 12			lda (:bp2),y
  4114 2860 C9 01			cmp #$01
  4115 2862 F0 04			jeq l_0F16
  4116 2864 A9 02			lda #$02
  4117 2866 85 5B			sta NEWDIR
  4118 2868			l_0F16
  4119
  4120 2868 4C A2 28			jmp a_0007
  4121 286B			l_0F04
  4122 286B C9 04			cmp #$04
  4123 286D D0 19			jne l_0F26
  4124 286F			@
  4125
  4126 				; optimize OK (main.pas), line = 19
  4127
  4128 286F AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4129 2879 A0 04			ldy #PLY.DIR-DATAORIGIN
  4130 287B B1 12			lda (:bp2),y
  4131 287D C9 08			cmp #$08
  4132 287F F0 04			jeq l_0F38
  4133 2881 A9 04			lda #$04
  4134 2883 85 5B			sta NEWDIR
  4135 2885			l_0F38
  4136
  4137 2885 4C A2 28			jmp a_0007
  4138 2888			l_0F26
  4139 2888 C9 08			cmp #$08
  4140 288A D0 16			jne l_0F48
  4141 288C			@
  4142
  4143 				; optimize OK (main.pas), line = 20
  4144
  4145 288C AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4146 2896 A0 04			ldy #PLY.DIR-DATAORIGIN
  4147 2898 B1 12			lda (:bp2),y
  4148 289A C9 04			cmp #$04
  4149 289C F0 04			jeq l_0F5A
  4150 289E A9 08			lda #$08
  4151 28A0 85 5B			sta NEWDIR
  4152 28A2			l_0F5A
  4153
  4154 28A2			l_0F48
  4155 28A2			a_0007
  4156
  4157 				; optimize OK (main.pas), line = 23
  4158
  4159 28A2 A5 5B			lda NEWDIR
  4160 28A4 25 5C			and AVAILDIR
  4161 28A6 D0 18			jne l_0F81
  4162
  4163 				; optimize OK (main.pas), line = 24
  4164
  4165 28A8 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4166 28B2 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4167 28B4 A9 00			lda #$00
  4168 28B6 91 12			sta (:bp2),y
  4169 28B8 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4170 28BA A9 2A			lda #$2A
  4171 28BC 91 12			sta (:bp2),y
  4172 28BE C6 5A			dec ALIVE
  4173 28C0			l_0F81
  4174
  4175 				; ------------------------------------------------------------
  4176
  4177 = 2B5D			@CASETMP_0007	= DATAORIGIN+$0065
  4178
  4179 = 2B5D			@VarData	= @CASETMP_0007
  4180 = 0001			@VarDataSize	= 1
  4181
  4182 28C0			@exit
  4183 					.ifdef @new
  4184 					lda <@VarData
  4185 					sta :ztmp
  4186 					lda >@VarData
  4187 					ldy #@VarDataSize-1
  4188 					jmp @FreeMem
  4189 					els
  4190 28C0 60				rts						; ret
  4191 					eif
  4192 				.endl
  4193
  4194 28C1			.local	PLAYERMOVE					; PROCEDURE
  4195
  4196 				; optimize OK (main.pas), line = 32
  4197
  4198 28C1 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4199 28CB A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4200 28CD B1 12			lda (:bp2),y
  4201 28CF D0 03 4C F6 29		jeq l_0FA0
  4202
  4203 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4204
  4205 28D4 20 83 12			jsr CHECKAVAILDIR
  4206
  4207 				; optimize OK (main.pas), line = 35
  4208
  4209 28D7 A5 5C			lda AVAILDIR
  4210 28D9 D0 35			jne l_0FB4
  4211
  4212 				; optimize OK (main.pas), line = 36
  4213
  4214 28DB AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4215 28E5 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4216 28E7 A9 00			lda #$00
  4217 28E9 91 12			sta (:bp2),y
  4218 28EB C6 5A			dec ALIVE
  4219
  4220 				; optimize OK (main.pas), line = 37
  4221
  4222 28ED A0 00			ldy #PLY.X-DATAORIGIN
  4223 28EF B1 12			lda (:bp2),y
  4224 28F1 8D 3D 2B			sta PUTCHAR_008E.X
  4225 28F4 A0 01			ldy #PLY.Y-DATAORIGIN
  4226 28F6 B1 12			lda (:bp2),y
  4227 28F8 8D 3E 2B			sta PUTCHAR_008E.Y
  4228 28FB A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4229 28FD B1 12			lda (:bp2),y
  4230 28FF 18 69 80			add #$80
  4231 2902 8D 40 2B			sta PUTCHAR_008E.C
  4232 2905 A9 57			lda #$57
  4233 2907 8D 3F 2B			sta PUTCHAR_008E.V
  4234 290A 20 99 11			jsr PUTCHAR_008E
  4235 290D 4C F6 29			jmp l_0FD5
  4236 2910			l_0FB4
  4237
  4238 				; optimize OK (main.pas), line = 40
  4239
  4240 2910 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4241 291A A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4242 291C B1 12			lda (:bp2),y
  4243 291E 8D 5E 2B			sta @CASETMP_0008
  4244 2921 C9 00			cmp #$00
  4245 2923 D0 06			jne l_0FE0
  4246 2925			@
  4247
  4248 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4249
  4250 2925 20 19 28			jsr HUMAN
  4251 2928 4C 50 29			jmp a_0008
  4252 292B			l_0FE0
  4253 292B C9 01			cmp #$01
  4254 292D D0 06			jne l_0FEA
  4255 292F			@
  4256
  4257 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4258
  4259 292F 20 5F 15			jsr AISTRAIGHT
  4260 2932 4C 50 29			jmp a_0008
  4261 2935			l_0FEA
  4262 2935 C9 02			cmp #$02
  4263 2937 D0 06			jne l_0FF4
  4264 2939			@
  4265
  4266 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4267
  4268 2939 20 E4 15			jsr AISAPPER
  4269 293C 4C 50 29			jmp a_0008
  4270 293F			l_0FF4
  4271 293F C9 03			cmp #$03
  4272 2941 D0 06			jne l_0FFE
  4273 2943			@
  4274
  4275 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4276
  4277 2943 20 3E 18			jsr AIBULLY
  4278 2946 4C 50 29			jmp a_0008
  4279 2949			l_0FFE
  4280 2949 C9 04			cmp #$04
  4281 294B D0 03			jne l_1008
  4282 294D			@
  4283
  4284 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4285
  4286 294D 20 0C 19			jsr AIMIRROR
  4287 2950			l_1008
  4288 2950			a_0008
  4289
  4290 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4291
  4292 2950 20 B4 13			jsr DRAWTAIL
  4293 2953 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4294 295D A0 04			ldy #PLY.DIR-DATAORIGIN
  4295 295F A5 5B			lda NEWDIR
  4296 2961 91 12			sta (:bp2),y
  4297
  4298 				; optimize OK (main.pas), line = 50
  4299
  4300 2963 A5 5B			lda NEWDIR
  4301 2965 8D 5F 2B			sta @CASETMP_0009
  4302 2968 C9 01			cmp #$01
  4303 296A D0 16			jne l_1024
  4304 296C			@
  4305
  4306 				; optimize OK (main.pas), line = 51
  4307
  4308 296C AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4309 2976 A0 01			ldy #PLY.Y-DATAORIGIN
  4310 2978 B1 12			lda (:bp2),y
  4311 297A 38 E9 01			sub #$01
  4312 297D 91 12			sta (:bp2),y
  4313
  4314 297F 4C CD 29			jmp a_0009
  4315 2982			l_1024
  4316 2982 C9 02			cmp #$02
  4317 2984 D0 16			jne l_102E
  4318 2986			@
  4319
  4320 				; optimize OK (main.pas), line = 52
  4321
  4322 2986 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4323 2990 A0 01			ldy #PLY.Y-DATAORIGIN
  4324 2992 B1 12			lda (:bp2),y
  4325 2994 18 69 01			add #$01
  4326 2997 91 12			sta (:bp2),y
  4327
  4328 2999 4C CD 29			jmp a_0009
  4329 299C			l_102E
  4330 299C C9 04			cmp #$04
  4331 299E D0 16			jne l_1038
  4332 29A0			@
  4333
  4334 				; optimize OK (main.pas), line = 53
  4335
  4336 29A0 AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4337 29AA A0 00			ldy #PLY.X-DATAORIGIN
  4338 29AC B1 12			lda (:bp2),y
  4339 29AE 38 E9 01			sub #$01
  4340 29B1 91 12			sta (:bp2),y
  4341
  4342 29B3 4C CD 29			jmp a_0009
  4343 29B6			l_1038
  4344 29B6 C9 08			cmp #$08
  4345 29B8 D0 13			jne l_1042
  4346 29BA			@
  4347
  4348 				; optimize OK (main.pas), line = 54
  4349
  4350 29BA AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4351 29C4 A0 00			ldy #PLY.X-DATAORIGIN
  4352 29C6 B1 12			lda (:bp2),y
  4353 29C8 18 69 01			add #$01
  4354 29CB 91 12			sta (:bp2),y
  4355
  4356 29CD			l_1042
  4357 29CD			a_0009
  4358
  4359 				; optimize OK (main.pas), line = 57
  4360
  4361 29CD AC EA 2A 84 12 AC + 	mwy PLY :bp2
  4362 29D7 A0 00			ldy #PLY.X-DATAORIGIN
  4363 29D9 B1 12			lda (:bp2),y
  4364 29DB 8D 3D 2B			sta PUTCHAR_008E.X
  4365 29DE A0 01			ldy #PLY.Y-DATAORIGIN
  4366 29E0 B1 12			lda (:bp2),y
  4367 29E2 8D 3E 2B			sta PUTCHAR_008E.Y
  4368 29E5 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4369 29E7 B1 12			lda (:bp2),y
  4370 29E9 8D 3F 2B			sta PUTCHAR_008E.V
  4371 29EC A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4372 29EE B1 12			lda (:bp2),y
  4373 29F0 8D 40 2B			sta PUTCHAR_008E.C
  4374 29F3 20 99 11			jsr PUTCHAR_008E
  4375 29F6			l_0FD5
  4376 29F6			l_0FA0
  4377
  4378 				; ------------------------------------------------------------
  4379
  4380 = 2B5E			@CASETMP_0008	= DATAORIGIN+$0066
  4381 = 2B5F			@CASETMP_0009	= DATAORIGIN+$0067
  4382
  4383 = 2B5E			@VarData	= @CASETMP_0008
  4384 = 0002			@VarDataSize	= 2
  4385
  4386 29F6			@exit
  4387 					.ifdef @new
  4388 					lda <@VarData
  4389 					sta :ztmp
  4390 					lda >@VarData
  4391 					ldy #@VarDataSize-1
  4392 					jmp @FreeMem
  4393 					els
  4394 29F6 60				rts						; ret
  4395 					eif
  4396 				.endl
  4397
  4398 29F7			.local	STARTSCREEN					; PROCEDURE
  4399
  4400 				; optimize OK (main.pas), line = 68
  4401
  4402 29F7 AD 0D 2B			lda PLAYER1.COLOUR
  4403 29FA 18 69 80			add #$80
  4404 29FD 8D 40 2B			sta PUTCHAR_008E.C
  4405 2A00 AD 0C 2B			lda PLAYER1.HEAD
  4406 2A03 8D 3F 2B			sta PUTCHAR_008E.V
  4407 2A06 AD 0B 2B			lda PLAYER1.Y
  4408 2A09 8D 3E 2B			sta PUTCHAR_008E.Y
  4409 2A0C AD 0A 2B			lda PLAYER1.X
  4410 2A0F 8D 3D 2B			sta PUTCHAR_008E.X
  4411 2A12 20 99 11			jsr PUTCHAR_008E
  4412
  4413 				; --- RepeatUntilProlog
  4414 2A15			l_1070
  4415
  4416 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4417
  4418 2A15 20 8D 14			jsr CHECKJOYSTATUS
  4419 2A18 A5 63			lda JOYSTATUS
  4420 2A1A C9 40			cmp #$40
  4421 2A1C D0 F7			jne l_1070
  4422
  4423 				; optimize OK (main.pas), line = 70
  4424
  4425 2A1E AD 0D 2B			lda PLAYER1.COLOUR
  4426 2A21 8D 40 2B			sta PUTCHAR_008E.C
  4427 2A24 AD 0C 2B			lda PLAYER1.HEAD
  4428 2A27 8D 3F 2B			sta PUTCHAR_008E.V
  4429 2A2A AD 0B 2B			lda PLAYER1.Y
  4430 2A2D 8D 3E 2B			sta PUTCHAR_008E.Y
  4431 2A30 AD 0A 2B			lda PLAYER1.X
  4432 2A33 8D 3D 2B			sta PUTCHAR_008E.X
  4433 2A36 20 99 11			jsr PUTCHAR_008E
  4434 2A39			@exit
  4435 					.ifdef @new
  4436 					lda <@VarData
  4437 					sta :ztmp
  4438 					lda >@VarData
  4439 					ldy #@VarDataSize-1
  4440 					jmp @FreeMem
  4441 					els
  4442 2A39 60				rts						; ret
  4443 					eif
  4444 				.endl
  4445
  4446 2A3A			.local	MAINLOOP					; PROCEDURE
  4447
  4448 				; optimize FAIL ('INITARENA', main.pas), line = 77
  4449
  4450 2A3A 20 AC 27			jsr INITARENA
  4451 2A3D 20 F7 29			jsr STARTSCREEN
  4452
  4453 				; --- RepeatUntilProlog
  4454 2A40			l_1092
  4455
  4456 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 80
  4457
  4458 2A40 20 23 11			jsr SYSTEM.PAUSE_006B
  4459 2A43 AD EE 2A			lda PLAYER1
  4460 2A46 8D EA 2A			sta PLY
  4461 2A49 AD EF 2A			lda PLAYER1+1
  4462 2A4C 8D EB 2A			sta PLY+1
  4463 2A4F 20 C1 28			jsr PLAYERMOVE
  4464
  4465 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 82
  4466
  4467 2A52 20 18 13			jsr ANIMATEOBSTACLES
  4468
  4469 				; optimize OK (main.pas), line = 84
  4470
  4471 2A55 A9 02			lda #$02
  4472 2A57 8D 04 2B			sta SYSTEM.PAUSE_006C.N
  4473 2A5A A9 00			lda #$00
  4474 2A5C 8D 05 2B			sta SYSTEM.PAUSE_006C.N+1
  4475 2A5F 20 2A 11			jsr SYSTEM.PAUSE_006C
  4476
  4477 				; optimize OK (main.pas), line = 85
  4478
  4479 2A62 AD F0 2A			lda PLAYER2
  4480 2A65 8D EA 2A			sta PLY
  4481 2A68 AD F1 2A			lda PLAYER2+1
  4482 2A6B 8D EB 2A			sta PLY+1
  4483 2A6E 20 C1 28			jsr PLAYERMOVE
  4484
  4485 				; optimize OK (main.pas), line = 86
  4486
  4487 2A71 AD F2 2A			lda PLAYER3
  4488 2A74 8D EA 2A			sta PLY
  4489 2A77 AD F3 2A			lda PLAYER3+1
  4490 2A7A 8D EB 2A			sta PLY+1
  4491 2A7D 20 C1 28			jsr PLAYERMOVE
  4492
  4493 				; optimize OK (main.pas), line = 87
  4494
  4495 2A80 AD F4 2A			lda PLAYER4
  4496 2A83 8D EA 2A			sta PLY
  4497 2A86 AD F5 2A			lda PLAYER4+1
  4498 2A89 8D EB 2A			sta PLY+1
  4499 2A8C 20 C1 28			jsr PLAYERMOVE
  4500
  4501 				; optimize FAIL ('ISONELEFT', main.pas), line = 88
  4502
  4503 2A8F 20 40 15			jsr ISONELEFT
  4504 2A92 CA				dex
  4505 2A93 B5 19			lda :STACKORIGIN+1,x
  4506 2A95 F0 A9			jeq l_1092
  4507
  4508 				; optimize FAIL ('UPDATESCORE', main.pas), line = 90
  4509
  4510 2A97 20 62 12			jsr UPDATESCORE
  4511
  4512 				; optimize OK (main.pas), line = 92
  4513
  4514 2A9A A9 64			lda #$64
  4515 2A9C 8D 04 2B			sta SYSTEM.PAUSE_006C.N
  4516 2A9F A9 00			lda #$00
  4517 2AA1 8D 05 2B			sta SYSTEM.PAUSE_006C.N+1
  4518 2AA4 20 2A 11			jsr SYSTEM.PAUSE_006C
  4519
  4520 				; optimize FAIL (0, main.pas), line = 94
  4521
  4522 2AA7 EE 08 2B			inc LEVEL
  4523 2AAA AD 08 2B			lda LEVEL
  4524 2AAD C9 08			cmp #$08
  4525 2AAF D0 05			jne l_10CC
  4526 2AB1 A9 05			lda #$05
  4527 2AB3 8D 08 2B			sta LEVEL
  4528 2AB6			l_10CC
  4529 2AB6			@exit
  4530 					.ifdef @new
  4531 					lda <@VarData
  4532 					sta :ztmp
  4533 					lda >@VarData
  4534 					ldy #@VarDataSize-1
  4535 					jmp @FreeMem
  4536 					els
  4537 2AB6 60				rts						; ret
  4538 					eif
  4539 				.endl
  4540 2AB7			l_0007
  4541
  4542 				; --- RepeatUntilProlog
  4543 2AB7			l_10D5
  4544
  4545 				; optimize FAIL ('INITSCORE', main.pas), line = 101
  4546
  4547 2AB7 20 9D 27			jsr INITSCORE
  4548 2ABA A9 00			lda #$00
  4549 2ABC 8D 09 2B			sta GAMEOVER
  4550 2ABF A9 01			lda #$01
  4551 2AC1 8D 08 2B			sta LEVEL
  4552
  4553 				; --- RepeatUntilProlog
  4554 2AC4			l_10DF
  4555
  4556 				; optimize FAIL ('MAINLOOP', main.pas), line = 103
  4557
  4558 2AC4 20 3A 2A			jsr MAINLOOP
  4559 2AC7 20 03 15			jsr ISGAMEOVER
  4560 2ACA CA				dex
  4561 2ACB B5 19			lda :STACKORIGIN+1,x
  4562 2ACD F0 F5			jeq l_10DF
  4563
  4564 				; optimize FAIL ('SHOWSCORE', main.pas), line = 104
  4565
  4566 2ACF 20 E9 11			jsr SHOWSCORE
  4567
  4568 				; optimize OK (main.pas), line = 106
  4569
  4570 2AD2 A9 C8			lda #$C8
  4571 2AD4 8D 04 2B			sta SYSTEM.PAUSE_006C.N
  4572 2AD7 A9 00			lda #$00
  4573 2AD9 8D 05 2B			sta SYSTEM.PAUSE_006C.N+1
  4574 2ADC 20 2A 11			jsr SYSTEM.PAUSE_006C
  4575
  4576 				; optimize OK (main.pas), line = 107
  4577
  4578 2ADF 4C B7 2A			jmp l_10D5
  4579
  4580 				; ------------------------------------------------------------
  4581
  4582 = 0800			ATTRIBUTE_ADDR	= $0800
  4583 = 0C00			SCREEN_ADDR	= $0C00
  4584 = 001F			BACKGROUND_COLOUR	= $1F
  4585 = 0000			BOREDER_COLOUR	= $00
  4586 = 0009			VICTORIES	= $09
  4587 = 0005			LOOK_AHEAD	= $05
  4588 = 007E			TRASH	= $7E
  4589 = 0020			EMPTY	= $20
  4590 = 00A0			WALL	= $A0
  4591 = 0041			WALL_COLOUR	= $41
  4592 = 0030			ZERO	= $30
  4593 = 0056			OBSTACLE_1	= $56
  4594 = 005B			OBSTACLE_2	= $5B
  4595 = 0035			OBST_COLOUR	= $35
  4596 = 0007			OBST_QUANTITY	= $07
  4597 = 0051			PLY_HEAD	= $51
  4598 = 002A			PLY_CRASH	= $2A
  4599 = 0057			PLY_BUSTED	= $57
  4600 = 0042			PLY_TAIL_UD	= $42
  4601 = 0040			PLY_TAIL_LR	= $40
  4602 = 007D			PLY_TAIL_RD	= $7D
  4603 = 006E			PLY_TAIL_RU	= $6E
  4604 = 006D			PLY_TAIL_LD	= $6D
  4605 = 0070			PLY_TAIL_LU	= $70
  4606 = 0062			PLY1_COLOUR	= $62
  4607 = 005D			PLY2_COLOUR	= $5D
  4608 = 0071			PLY3_COLOUR	= $71
  4609 = 0055			PLY4_COLOUR	= $55
  4610 = 0000			PLY_CTRL	= $00
  4611 = 0001			AI_STRAIGHT	= $01
  4612 = 0002			AI_SAPPER	= $02
  4613 = 0003			AI_BULLY	= $03
  4614 = 0004			AI_MIRROR	= $04
  4615 = 0001			JOY_UP	= $01
  4616 = 0002			JOY_DOWN	= $02
  4617 = 0004			JOY_LEFT	= $04
  4618 = 0008			JOY_RIGHT	= $08
  4619 = 0040			JOY_FIRE	= $40
  4620 = 0002			JOY_SELECT_1	= $02
  4621 = 0004			JOY_SELECT_2	= $04
  4622 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4623 2AE2			.var MUL40	= adr.MUL40 .word
  4624 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4625 2AE2			.var DIRECTION	= adr.DIRECTION .word
  4626 = FD30			KEYSCAN	= $FD30
  4627 = FF08			JOY	= $FF08
  4628 = FF15			BACKGROUND	= $FF15
  4629 = FF19			BOREDER	= $FF19
  4630 = 0058			T0B	= $58
  4631 = 0059			I0B	= $59
  4632 = 005A			ALIVE	= $5A
  4633 = 005B			NEWDIR	= $5B
  4634 = 005C			AVAILDIR	= $5C
  4635 = 005D			T0W	= $5D
  4636 = 005F			adr.PLY	= $5F
  4637 2AE2			.var PLY	= adr.PLY .word
  4638 = 2AF8			PLY.X	= DATAORIGIN+$0000
  4639 = 2AF9			PLY.Y	= DATAORIGIN+$0001
  4640 = 2AFA			PLY.HEAD	= DATAORIGIN+$0002
  4641 = 2AFB			PLY.COLOUR	= DATAORIGIN+$0003
  4642 = 2AFC			PLY.DIR	= DATAORIGIN+$0004
  4643 = 2AFD			PLY.BRAIN	= DATAORIGIN+$0005
  4644 = 2AFE			PLY.SCORE	= DATAORIGIN+$0006
  4645 = 2AFF			PLY.ISALIVE	= DATAORIGIN+$0007
  4646 = 0061			adr.TMPPLY	= $61
  4647 2AE2			.var TMPPLY	= adr.TMPPLY .word
  4648 = 2AF8			TMPPLY.X	= DATAORIGIN+$0000
  4649 = 2AF9			TMPPLY.Y	= DATAORIGIN+$0001
  4650 = 2AFA			TMPPLY.HEAD	= DATAORIGIN+$0002
  4651 = 2AFB			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4652 = 2AFC			TMPPLY.DIR	= DATAORIGIN+$0004
  4653 = 2AFD			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4654 = 2AFE			TMPPLY.SCORE	= DATAORIGIN+$0006
  4655 = 2AFF			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4656 = 0063			JOYSTATUS	= $63
  4657 = 2B08			LEVEL	= DATAORIGIN+$0010
  4658 = 2B09			GAMEOVER	= DATAORIGIN+$0011
  4659 = 2B0A			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4660 2AE2			.var PLAYER1	= adr.PLAYER1 .word
  4661 = 2B0A			PLAYER1.X	= DATAORIGIN+$0012
  4662 = 2B0B			PLAYER1.Y	= DATAORIGIN+$0013
  4663 = 2B0C			PLAYER1.HEAD	= DATAORIGIN+$0014
  4664 = 2B0D			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4665 = 2B0E			PLAYER1.DIR	= DATAORIGIN+$0016
  4666 = 2B0F			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4667 = 2B10			PLAYER1.SCORE	= DATAORIGIN+$0018
  4668 = 2B11			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4669 = 2B12			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4670 2AE2			.var PLAYER2	= adr.PLAYER2 .word
  4671 = 2B12			PLAYER2.X	= DATAORIGIN+$001A
  4672 = 2B13			PLAYER2.Y	= DATAORIGIN+$001B
  4673 = 2B14			PLAYER2.HEAD	= DATAORIGIN+$001C
  4674 = 2B15			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4675 = 2B16			PLAYER2.DIR	= DATAORIGIN+$001E
  4676 = 2B17			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4677 = 2B18			PLAYER2.SCORE	= DATAORIGIN+$0020
  4678 = 2B19			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4679 = 2B1A			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4680 2AE2			.var PLAYER3	= adr.PLAYER3 .word
  4681 = 2B1A			PLAYER3.X	= DATAORIGIN+$0022
  4682 = 2B1B			PLAYER3.Y	= DATAORIGIN+$0023
  4683 = 2B1C			PLAYER3.HEAD	= DATAORIGIN+$0024
  4684 = 2B1D			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4685 = 2B1E			PLAYER3.DIR	= DATAORIGIN+$0026
  4686 = 2B1F			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4687 = 2B20			PLAYER3.SCORE	= DATAORIGIN+$0028
  4688 = 2B21			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4689 = 2B22			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4690 2AE2			.var PLAYER4	= adr.PLAYER4 .word
  4691 = 2B22			PLAYER4.X	= DATAORIGIN+$002A
  4692 = 2B23			PLAYER4.Y	= DATAORIGIN+$002B
  4693 = 2B24			PLAYER4.HEAD	= DATAORIGIN+$002C
  4694 = 2B25			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4695 = 2B26			PLAYER4.DIR	= DATAORIGIN+$002E
  4696 = 2B27			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4697 = 2B28			PLAYER4.SCORE	= DATAORIGIN+$0030
  4698 = 2B29			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4699 = 2B2A			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4700 2AE2			.var OBSTACLES	= adr.OBSTACLES .word
  4701 2AE2			@exit
  4702
  4703 2AE2 A2 00		@halt	ldx #$00
  4704 2AE4 9A				txs
  4705
  4706 2AE5 60				rts
  4707
  4708 				; ------------------------------------------------------------
  4709
  4710 				; ------------------------------------------------------------
  4711
  4712 2AE6			.local	@DEFINES
  4713 2AE6			C4P
  4714 				.endl
  4715
  4716 2AE6			.local	@RESOURCE
  4717 				.endl
  4718
  4719 = 2AE6 0E 10		MUL40
  4719 = 2AE8 40 10		DIRECTION
  4719 = 2AEA 5F 00		PLY
  4719 = 2AEC 61 00		TMPPLY
  4719 = 2AEE 0A 2B		PLAYER1
  4719 = 2AF0 12 2B		PLAYER2
  4719 = 2AF2 1A 2B		PLAYER3
  4719 = 2AF4 22 2B		PLAYER4
  4719 = 2AF6 2A 2B		OBSTACLES
  4719 				.endl							; MAIN
  4720
  4721 				; ------------------------------------------------------------
  4722 				; ------------------------------------------------------------
  4723
  4724 				.macro	UNITINITIALIZATION
  4725 				
  4726 					.ifdef MAIN.SYSTEM.@UnitInit
  4727 					jsr MAIN.SYSTEM.@UnitInit
  4728 					eif
  4729 				.endm
  4730
  4731 				; ------------------------------------------------------------
  4732
  4733 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4734 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4734 				SYSTEM: $10D5..$1177
  4735 					eif
  4736
  4737 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4737 				CODE: $100E..$2AE5
  4738
  4739 				; ------------------------------------------------------------
  4740
  4741 2AF8				.align $04
  4742
  4743 2AF8			DATAORIGIN
  4744 2AF8 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4745
  4746 = 0006			VARINITSIZE	= *-DATAORIGIN
  4747 = 0068			VARDATASIZE	= 104
  4748
  4749 = 2B60			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4750
  4751 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4751 				DATA: $2AF8..$2B60
  4752
  4753 				; ------------------------------------------------------------
  4754
  4755 				.macro	STATICDATA
  4756 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4757 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4758 				.by  $C0 $03 $01 $02 $04 $08
  4759 				.endm
  4760
  4761 					end
