mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E 31 14			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0020			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1442			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 E0			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D 62 13 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 62 85 02 A9 14 + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C E3 13			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D 47 14		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD 47 14 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1447			RESULT	= DATAORIGIN+$000B
   182
   183 = 1447			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 110C AD 48 14		loop  lda n
   307 110F 0D 49 14		  ora n+1
   308 1112 F0 14		  beq stop
   309
   310 1114 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 111A AD 48 14 D0 03 CE +   dew n
   313
   314 1125 4C 0C 11		  jmp loop
   315 1128			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1448			N	= DATAORIGIN+$000C
   321
   322 = 1448			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 1128			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 1128 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1129			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1129 8D 4A 14			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 112C AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 112F 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1132 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 1135 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 1138 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 113B 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 113E A8			  tay
   350
   351 113F AD 4A 14		  lda range
   352 1142 F0 08		  beq stop
   353
   354 1144 85 0C		  sta ecx
   355 1146 84 04		  sty eax
   356
   357 1148 20 8C 10		  jsr imulCL
   358 114B A8			  tay
   359
   360 114C 8C 4B 14		stop  sty Result
   361
   362 114F			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 114F E8				inx
   370 1150 AD 4B 14 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 144A			RANGE	= DATAORIGIN+$000E
   383 = 144B			RESULT	= DATAORIGIN+$000F
   384
   385 = 144A			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 1155 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 143C			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 143E			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1440			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 1156			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 1156			.var HPALETTE	= adr.HPALETTE .word
   449 = 1441			FILEMODE	= DATAORIGIN+$0005
   450 = 1442			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1443			IORESULT	= DATAORIGIN+$0007
   452 = 1444			EOLN	= DATAORIGIN+$0008
   453 = 1445			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 1156 C0 02		PALETTE
   455 = 1158 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 115A			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 62
   460
   461 115A A9 00			lda #$00
   462 115C 8D 4D 14			sta PLAYERDIE
   463
   464 				; optimize OK (main.pas), line = 64
   465
   466 115F A9 1F			lda #$1F
   467 1161 8D 15 FF			sta BORDERCOLOR
   468 1164 A9 00			lda #$00
   469 1166 8D 19 FF			sta BGCOLOR
   470
   471 				; optimize OK (main.pas), line = 65
   472
   473 1169 A9 20			lda #$20
   474 116B 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   475 116D A9 C0			lda #$C0
   476 116F 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   477 1171 A9 03			lda #$03
   478 1173 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   479 1175 A9 00			lda #$00
   480 1177 85 08			sta SYSTEM.FILLCHAR_0056.A
   481 1179 A9 0C			lda #$0C
   482 117B 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   483 117D 20 08 11			jsr SYSTEM.FILLCHAR_0056
   484
   485 				; optimize OK (main.pas), line = 67
   486
   487 1180 A9 27			lda #$27
   488 1182 85 58			sta T0B
   489
   490 1184			l_008D
   491 				; --- ForToDoCondition
   492
   493 				; optimize OK (main.pas), line = 68
   494
   495 1184 A4 58			ldy T0B
   496 1186 A9 A0			lda #$A0
   497 1188 99 00 0C			sta $0C00,y
   498
   499 				; optimize OK (main.pas), line = 69
   500
   501 118B 99 C0 0F			sta $0FC0,y
   502
   503 				; optimize OK (main.pas), line = 70
   504
   505 118E A9 41			lda #$41
   506 1190 99 00 08			sta $0800,y
   507
   508 				; optimize OK (main.pas), line = 71
   509
   510 1193 99 C0 0B			sta $0BC0,y
   511
   512 				; --- ForToDoEpilog
   513 1196 C6 58			dec T0B
   514 1198 10 EA			jpl l_008D
   515 119A			l_009B
   516
   517 				; optimize OK (main.pas), line = 74
   518
   519 119A A9 18			lda #$18
   520 119C 85 58			sta T0B
   521
   522 119E			l_00CD
   523 				; --- ForToDoCondition
   524 119E A5 58			lda T0B
   525 11A0 C9 01			cmp #$01
   526 11A2 90 3A			jcc l_00DB
   527
   528 				; optimize OK (main.pas), line = 75
   529
   530 11A4 0A				asl @
   531 11A5 A8				tay
   532 11A6 A9 FF			lda #$FF
   533 11A8 18 79 0E 10			add adr.MUL40,y
   534 11AC 85 12			sta :bp2
   535 11AE A9 0B			lda #$0B
   536 11B0 79 0F 10			adc adr.MUL40+1,y
   537 11B3 85 13			sta :bp2+1
   538 11B5 A0 00			ldy #$00
   539 11B7 A9 A0			lda #$A0
   540 11B9 91 12			sta (:bp2),y
   541 11BB C8				iny
   542 11BC 91 12			sta (:bp2),y
   543
   544 				; optimize OK (main.pas), line = 76
   545
   546 11BE A5 58			lda T0B
   547 11C0 0A				asl @
   548 11C1 A8				tay
   549 11C2 A9 FF			lda #$FF
   550 11C4 18 79 0E 10			add adr.MUL40,y
   551 11C8 85 12			sta :bp2
   552 11CA A9 07			lda #$07
   553 11CC 79 0F 10			adc adr.MUL40+1,y
   554 11CF 85 13			sta :bp2+1
   555 11D1 A0 00			ldy #$00
   556 11D3 A9 41			lda #$41
   557 11D5 91 12			sta (:bp2),y
   558 11D7 C8				iny
   559 11D8 91 12			sta (:bp2),y
   560
   561 				; --- ForToDoEpilog
   562 11DA C6 58			dec T0B
   563 11DC 10 C0			jpl l_00CD
   564 11DE			l_00DB
   565
   566 				; ------------------------------------------------------------
   567
   568 = 0000			@FORTMP_008A	= $00
   569 = 0001			@FORTMP_00CA	= $01
   570 11DE			@exit
   571 					.ifdef @new
   572 					lda <@VarData
   573 					sta :ztmp
   574 					lda >@VarData
   575 					ldy #@VarDataSize-1
   576 					jmp @FreeMem
   577 					els
   578 11DE 60				rts						; ret
   579 					eif
   580 				.endl
   581
   582 11DF			.local	INITPLAYERS					; PROCEDURE
   583
   584 				; optimize OK (main.pas), line = 82
   585
   586 11DF A9 0A			lda #$0A
   587 11E1 8D 4F 14			sta PLAYER1.X
   588 11E4 8D 50 14			sta PLAYER1.Y
   589 11E7 A9 5F			lda #$5F
   590 11E9 8D 51 14			sta PLAYER1.COLOUR
   591
   592 				; optimize OK (main.pas), line = 83
   593
   594 11EC A9 1E			lda #$1E
   595 11EE 8D 53 14			sta PLAYER2.X
   596 11F1 A9 0A			lda #$0A
   597 11F3 8D 54 14			sta PLAYER2.Y
   598 11F6 A9 5D			lda #$5D
   599 11F8 8D 55 14			sta PLAYER2.COLOUR
   600 11FB			@exit
   601 					.ifdef @new
   602 					lda <@VarData
   603 					sta :ztmp
   604 					lda >@VarData
   605 					ldy #@VarDataSize-1
   606 					jmp @FreeMem
   607 					els
   608 11FB 60				rts						; ret
   609 					eif
   610 				.endl
   611
   612 11FC			.local	PUTCHAR						; PROCEDURE
   613
   614 				; optimize OK (main.pas), line = 90
   615
   616 11FC AD 58 14			lda Y
   617 11FF 0A				asl @
   618 1200 A8				tay
   619 1201 B9 0E 10			lda adr.MUL40,y
   620 1204 18 6D 57 14			add X
   621 1208 85 5A			sta T0W
   622 120A B9 0F 10			lda adr.MUL40+1,y
   623 120D 69 08			adc #$08
   624 120F 85 5B			sta T0W+1
   625
   626 				; optimize OK (main.pas), line = 91
   627
   628 1211 85 11			sta :bp+1
   629 1213 A4 5A			ldy T0W
   630 1215 AD 5A 14			lda C
   631 1218 91 10			sta (:bp),y
   632 121A A5 5B			lda T0W+1
   633 121C 18 69 04			add #$04
   634 121F 85 11			sta :bp+1
   635 1221 AD 59 14			lda V
   636 1224 91 10			sta (:bp),y
   637
   638 				; ------------------------------------------------------------
   639
   640 = 1457			X	= DATAORIGIN+$001B
   641 = 1458			Y	= DATAORIGIN+$001C
   642 = 1459			V	= DATAORIGIN+$001D
   643 = 145A			C	= DATAORIGIN+$001E
   644
   645 = 1457			@VarData	= X
   646 = 0004			@VarDataSize	= 4
   647
   648 1226			@exit
   649 					.ifdef @new
   650 					lda <@VarData
   651 					sta :ztmp
   652 					lda >@VarData
   653 					ldy #@VarDataSize-1
   654 					jmp @FreeMem
   655 					els
   656 1226 60				rts						; ret
   657 					eif
   658 				.endl
   659
   660 1227			.local	CHECKAVAILDIR					; PROCEDURE
   661
   662 				; optimize OK (main.pas), line = 96
   663
   664 1227 A9 00			lda #$00
   665 1229 8D 4E 14			sta AVAILDIR
   666
   667 				; optimize OK (main.pas), line = 97
   668
   669 122C AD 5C 14			lda Y
   670 122F 0A				asl @
   671 1230 A8				tay
   672 1231 B9 0E 10			lda adr.MUL40,y
   673 1234 18 6D 5B 14			add X
   674 1238 85 5A			sta T0W
   675 123A B9 0F 10			lda adr.MUL40+1,y
   676 123D 69 0C			adc #$0C
   677 123F 85 5B			sta T0W+1
   678
   679 				; optimize OK (main.pas), line = 99
   680
   681 1241 A5 5A			lda T0W
   682 1243 38 E9 28			sub #$28
   683 1246 85 21			sta :STACKORIGIN+9
   684 1248 A5 5B			lda T0W+1
   685 124A E9 00			sbc #$00
   686 124C 85 11			sta :bp+1
   687 124E A4 21			ldy :STACKORIGIN+9
   688 1250 B1 10			lda (:bp),y
   689 1252 C9 20			cmp #$20
   690 1254 D0 08			jne l_0168
   691 1256 AD 4E 14			lda AVAILDIR
   692 1259 09 01			ora #$01
   693 125B 8D 4E 14			sta AVAILDIR
   694 125E			l_0168
   695
   696 				; optimize OK (main.pas), line = 100
   697
   698 125E A4 5A 84 12 A4 5B + 	mwy T0W :bp2
   699 1266 A0 28			ldy #$28
   700 1268 B1 12			lda (:bp2),y
   701 126A C9 20			cmp #$20
   702 126C D0 08			jne l_018B
   703 126E AD 4E 14			lda AVAILDIR
   704 1271 09 02			ora #$02
   705 1273 8D 4E 14			sta AVAILDIR
   706 1276			l_018B
   707
   708 				; optimize OK (main.pas), line = 101
   709
   710 1276 A5 5A			lda T0W
   711 1278 38 E9 01			sub #$01
   712 127B 85 21			sta :STACKORIGIN+9
   713 127D A5 5B			lda T0W+1
   714 127F E9 00			sbc #$00
   715 1281 85 11			sta :bp+1
   716 1283 A4 21			ldy :STACKORIGIN+9
   717 1285 B1 10			lda (:bp),y
   718 1287 C9 20			cmp #$20
   719 1289 D0 08			jne l_01AE
   720 128B AD 4E 14			lda AVAILDIR
   721 128E 09 04			ora #$04
   722 1290 8D 4E 14			sta AVAILDIR
   723 1293			l_01AE
   724
   725 				; optimize OK (main.pas), line = 102
   726
   727 1293 A4 5A 84 12 A4 5B + 	mwy T0W :bp2
   728 129B A0 01			ldy #$01
   729 129D B1 12			lda (:bp2),y
   730 129F C9 20			cmp #$20
   731 12A1 D0 08			jne l_01D1
   732 12A3 AD 4E 14			lda AVAILDIR
   733 12A6 09 08			ora #$08
   734 12A8 8D 4E 14			sta AVAILDIR
   735 12AB			l_01D1
   736
   737 				; ------------------------------------------------------------
   738
   739 = 145B			X	= DATAORIGIN+$001F
   740 = 145C			Y	= DATAORIGIN+$0020
   741
   742 = 145B			@VarData	= X
   743 = 0002			@VarDataSize	= 2
   744
   745 12AB			@exit
   746 					.ifdef @new
   747 					lda <@VarData
   748 					sta :ztmp
   749 					lda >@VarData
   750 					ldy #@VarDataSize-1
   751 					jmp @FreeMem
   752 					els
   753 12AB 60				rts						; ret
   754 					eif
   755 				.endl
   756
   757 12AC			.local	PLAYERMOVE					; PROCEDURE
   758
   759 				; optimize OK (main.pas), line = 112
   760
   761 12AC AD 5D 14			lda P
   762 12AF 8D 5F 14			sta PLY
   763 12B2 85 12			sta :bp2
   764 12B4 AD 5E 14			lda P+1
   765 12B7 8D 60 14			sta PLY+1
   766 12BA 85 13			sta :bp2+1
   767 				; optimize OK (main.pas), line = 113
   768 12BC A0 00			ldy #PLY.X-DATAORIGIN
   769 12BE B1 12			lda (:bp2),y
   770 12C0 8D 5B 14			sta CHECKAVAILDIR.X
   771 12C3 A0 01			ldy #PLY.Y-DATAORIGIN
   772 12C5 B1 12			lda (:bp2),y
   773 12C7 8D 5C 14			sta CHECKAVAILDIR.Y
   774 12CA 20 27 12			jsr CHECKAVAILDIR
   775
   776 				; optimize OK (main.pas), line = 114
   777
   778 12CD AD 4E 14			lda AVAILDIR
   779 12D0 D0 32			jne l_0200
   780
   781 				; optimize OK (main.pas), line = 115
   782
   783 12D2 A9 01			lda #$01
   784 12D4 8D 4D 14			sta PLAYERDIE
   785
   786 				; optimize OK (main.pas), line = 116
   787
   788 12D7 AC 5F 14 84 12 AC + 	mwy PLY :bp2
   789 12E1 A0 00			ldy #PLY.X-DATAORIGIN
   790 12E3 B1 12			lda (:bp2),y
   791 12E5 8D 57 14			sta PUTCHAR.X
   792 12E8 A0 01			ldy #PLY.Y-DATAORIGIN
   793 12EA B1 12			lda (:bp2),y
   794 12EC 8D 58 14			sta PUTCHAR.Y
   795 12EF A0 02			ldy #PLY.COLOUR-DATAORIGIN
   796 12F1 B1 12			lda (:bp2),y
   797 12F3 18 69 80			add #$80
   798 12F6 8D 5A 14			sta PUTCHAR.C
   799 12F9 A9 51			lda #$51
   800 12FB 8D 59 14			sta PUTCHAR.V
   801 12FE 20 FC 11			jsr PUTCHAR
   802 1301 4C E2 13			jmp l_021D
   803 1304			l_0200
   804
   805 				; optimize OK (main.pas), line = 118
   806
   807 1304 A9 00			lda #$00
   808 1306 85 59			sta T0N
   809
   810 				; --- RepeatUntilProlog
   811 1308			l_0222
   812
   813 				; optimize FAIL (0, main.pas), line = 120
   814
   815 1308 A9 04			lda #$04
   816 130A 20 29 11			jsr SYSTEM.RANDOM_006C
   817 130D B4 18			ldy :STACKORIGIN,x
   818 130F B9 40 10			lda adr.DIRECTION,y
   819 1312 85 58			sta T0B
   820 1314 CA				dex
   821
   822 				; optimize OK (main.pas), line = 121
   823
   824 1315 AD 4E 14			lda AVAILDIR
   825 1318 25 58			and T0B
   826 131A F0 04			jeq l_0242
   827 131C A9 01			lda #$01
   828 131E 85 59			sta T0N
   829 1320			l_0242
   830
   831 				; optimize OK (main.pas), line = 122
   832
   833 1320 A5 59			lda T0N
   834 1322 F0 E4			jeq l_0222
   835
   836 				; optimize OK (main.pas), line = 124
   837
   838 1324 AC 5F 14 84 12 AC + 	mwy PLY :bp2
   839 132E A0 03			ldy #PLY.DIR-DATAORIGIN
   840 1330 A5 58			lda T0B
   841 1332 91 12			sta (:bp2),y
   842
   843 				; optimize OK (main.pas), line = 126
   844
   845 1334 A0 00			ldy #PLY.X-DATAORIGIN
   846 1336 B1 12			lda (:bp2),y
   847 1338 8D 57 14			sta PUTCHAR.X
   848 133B A0 01			ldy #PLY.Y-DATAORIGIN
   849 133D B1 12			lda (:bp2),y
   850 133F 8D 58 14			sta PUTCHAR.Y
   851 1342 A0 02			ldy #PLY.COLOUR-DATAORIGIN
   852 1344 B1 12			lda (:bp2),y
   853 1346 8D 5A 14			sta PUTCHAR.C
   854 1349 A9 2A			lda #$2A
   855 134B 8D 59 14			sta PUTCHAR.V
   856 134E 20 FC 11			jsr PUTCHAR
   857
   858 				; optimize OK (main.pas), line = 128
   859
   860 1351 A5 58			lda T0B
   861 1353 8D 61 14			sta @CASETMP_0003
   862 1356 C9 01			cmp #$01
   863 1358 D0 16			jne l_026C
   864 135A			@
   865
   866 				; optimize OK (main.pas), line = 129
   867
   868 135A AC 5F 14 84 12 AC + 	mwy PLY :bp2
   869 1364 A0 01			ldy #PLY.Y-DATAORIGIN
   870 1366 B1 12			lda (:bp2),y
   871 1368 38 E9 01			sub #$01
   872 136B 91 12			sta (:bp2),y
   873
   874 136D 4C BB 13			jmp a_0003
   875 1370			l_026C
   876 1370 C9 02			cmp #$02
   877 1372 D0 16			jne l_0276
   878 1374			@
   879
   880 				; optimize OK (main.pas), line = 130
   881
   882 1374 AC 5F 14 84 12 AC + 	mwy PLY :bp2
   883 137E A0 01			ldy #PLY.Y-DATAORIGIN
   884 1380 B1 12			lda (:bp2),y
   885 1382 18 69 01			add #$01
   886 1385 91 12			sta (:bp2),y
   887
   888 1387 4C BB 13			jmp a_0003
   889 138A			l_0276
   890 138A C9 04			cmp #$04
   891 138C D0 16			jne l_0280
   892 138E			@
   893
   894 				; optimize OK (main.pas), line = 131
   895
   896 138E AC 5F 14 84 12 AC + 	mwy PLY :bp2
   897 1398 A0 00			ldy #PLY.X-DATAORIGIN
   898 139A B1 12			lda (:bp2),y
   899 139C 38 E9 01			sub #$01
   900 139F 91 12			sta (:bp2),y
   901
   902 13A1 4C BB 13			jmp a_0003
   903 13A4			l_0280
   904 13A4 C9 08			cmp #$08
   905 13A6 D0 13			jne l_028A
   906 13A8			@
   907
   908 				; optimize OK (main.pas), line = 132
   909
   910 13A8 AC 5F 14 84 12 AC + 	mwy PLY :bp2
   911 13B2 A0 00			ldy #PLY.X-DATAORIGIN
   912 13B4 B1 12			lda (:bp2),y
   913 13B6 18 69 01			add #$01
   914 13B9 91 12			sta (:bp2),y
   915
   916 13BB			l_028A
   917 13BB			a_0003
   918
   919 				; optimize OK (main.pas), line = 135
   920
   921 13BB AC 5F 14 84 12 AC + 	mwy PLY :bp2
   922 13C5 A0 00			ldy #PLY.X-DATAORIGIN
   923 13C7 B1 12			lda (:bp2),y
   924 13C9 8D 57 14			sta PUTCHAR.X
   925 13CC A0 01			ldy #PLY.Y-DATAORIGIN
   926 13CE B1 12			lda (:bp2),y
   927 13D0 8D 58 14			sta PUTCHAR.Y
   928 13D3 A0 02			ldy #PLY.COLOUR-DATAORIGIN
   929 13D5 B1 12			lda (:bp2),y
   930 13D7 8D 5A 14			sta PUTCHAR.C
   931 13DA A9 57			lda #$57
   932 13DC 8D 59 14			sta PUTCHAR.V
   933 13DF 20 FC 11			jsr PUTCHAR
   934 13E2			l_021D
   935
   936 				; ------------------------------------------------------------
   937
   938 = 145D			P	= DATAORIGIN+$0021
   939 = 145F			PLY	= DATAORIGIN+$0023
   940 = 143C			PLY.X	= DATAORIGIN+$0000
   941 = 143D			PLY.Y	= DATAORIGIN+$0001
   942 = 143E			PLY.COLOUR	= DATAORIGIN+$0002
   943 = 143F			PLY.DIR	= DATAORIGIN+$0003
   944 = 1461			@CASETMP_0003	= DATAORIGIN+$0025
   945
   946 = 145D			@VarData	= P
   947 = 000F			@VarDataSize	= 15
   948
   949 13E2			@exit
   950 					.ifdef @new
   951 					lda <@VarData
   952 					sta :ztmp
   953 					lda >@VarData
   954 					ldy #@VarDataSize-1
   955 					jmp @FreeMem
   956 					els
   957 13E2 60				rts						; ret
   958 					eif
   959 				.endl
   960 13E3			l_0007
   961
   962 				; optimize OK (main.pas), line = 143
   963
   964 13E3 A9 00			lda #$00
   965 13E5 8D 4C 14			sta GAMEOVER
   966
   967 				; --- RepeatUntilProlog
   968 13E8			l_02A4
   969
   970 				; optimize FAIL ('INITPLAYERS', main.pas), line = 146
   971
   972 13E8 20 DF 11			jsr INITPLAYERS
   973
   974 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 147
   975
   976 13EB 20 5A 11			jsr INITPLAYFIELD
   977
   978 				; --- RepeatUntilProlog
   979 13EE			l_02A7
   980
   981 				; optimize OK (main.pas), line = 150
   982
   983 13EE A9 0A			lda #$0A
   984 13F0 8D 48 14			sta SYSTEM.PAUSE_006B.N
   985 13F3 A9 00			lda #$00
   986 13F5 8D 49 14			sta SYSTEM.PAUSE_006B.N+1
   987 13F8 20 0C 11			jsr SYSTEM.PAUSE_006B
   988
   989 				; optimize OK (main.pas), line = 151
   990
   991 13FB AD 38 14			lda PLAYER1
   992 13FE 8D 5D 14			sta PLAYERMOVE.P
   993 1401 AD 39 14			lda PLAYER1+1
   994 1404 8D 5E 14			sta PLAYERMOVE.P+1
   995 1407 20 AC 12			jsr PLAYERMOVE
   996
   997 				; optimize OK (main.pas), line = 152
   998
   999 140A AD 3A 14			lda PLAYER2
  1000 140D 8D 5D 14			sta PLAYERMOVE.P
  1001 1410 AD 3B 14			lda PLAYER2+1
  1002 1413 8D 5E 14			sta PLAYERMOVE.P+1
  1003 1416 20 AC 12			jsr PLAYERMOVE
  1004
  1005 				; optimize OK (main.pas), line = 153
  1006
  1007 1419 AD 4D 14			lda PLAYERDIE
  1008 141C F0 D0			jeq l_02A7
  1009
  1010 				; optimize OK (main.pas), line = 155
  1011
  1012 141E A9 64			lda #$64
  1013 1420 8D 48 14			sta SYSTEM.PAUSE_006B.N
  1014 1423 A9 00			lda #$00
  1015 1425 8D 49 14			sta SYSTEM.PAUSE_006B.N+1
  1016 1428 20 0C 11			jsr SYSTEM.PAUSE_006B
  1017
  1018 				; optimize OK (main.pas), line = 156
  1019
  1020 142B AD 4C 14			lda GAMEOVER
  1021 142E F0 B8			jeq l_02A4
  1022
  1023 				; ------------------------------------------------------------
  1024
  1025 = 0800			ATTRIBUTE_ADDR	= $0800
  1026 = 0C00			SCREEN_ADDR	= $0C00
  1027 = 00A0			WALL	= $A0
  1028 = 0041			WALL_COLOUR	= $41
  1029 = 0020			EMPTY	= $20
  1030 = 0057			PLY_HEAD	= $57
  1031 = 002A			PLY_TAIL	= $2A
  1032 = 0051			PLY_CRASH	= $51
  1033 = 005F			PLY1_COLOUR	= $5F
  1034 = 005D			PLY2_COLOUR	= $5D
  1035 = 0001			JOY_UP	= $01
  1036 = 0002			JOY_DOWN	= $02
  1037 = 0004			JOY_LEFT	= $04
  1038 = 0008			JOY_RIGHT	= $08
  1039 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1040 1430			.var MUL40	= adr.MUL40 .word
  1041 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1042 1430			.var DIRECTION	= adr.DIRECTION .word
  1043 = FF15			BORDERCOLOR	= $FF15
  1044 = FF19			BGCOLOR	= $FF19
  1045 = 0058			T0B	= $58
  1046 = 0059			T0N	= $59
  1047 = 005A			T0W	= $5A
  1048 = 144C			GAMEOVER	= DATAORIGIN+$0010
  1049 = 144D			PLAYERDIE	= DATAORIGIN+$0011
  1050 = 144E			AVAILDIR	= DATAORIGIN+$0012
  1051 = 144F			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  1052 1430			.var PLAYER1	= adr.PLAYER1 .word
  1053 = 144F			PLAYER1.X	= DATAORIGIN+$0013
  1054 = 1450			PLAYER1.Y	= DATAORIGIN+$0014
  1055 = 1451			PLAYER1.COLOUR	= DATAORIGIN+$0015
  1056 = 1452			PLAYER1.DIR	= DATAORIGIN+$0016
  1057 = 1453			adr.PLAYER2	= [DATAORIGIN+$0017] .array [6]
  1058 1430			.var PLAYER2	= adr.PLAYER2 .word
  1059 = 1453			PLAYER2.X	= DATAORIGIN+$0017
  1060 = 1454			PLAYER2.Y	= DATAORIGIN+$0018
  1061 = 1455			PLAYER2.COLOUR	= DATAORIGIN+$0019
  1062 = 1456			PLAYER2.DIR	= DATAORIGIN+$001A
  1063 1430			@exit
  1064
  1065 1430 A2 00		@halt	ldx #$00
  1066 1432 9A				txs
  1067
  1068 1433 60				rts
  1069
  1070 				; ------------------------------------------------------------
  1071
  1072 				; ------------------------------------------------------------
  1073
  1074 1434			.local	@DEFINES
  1075 1434			C4P
  1076 				.endl
  1077
  1078 1434			.local	@RESOURCE
  1079 				.endl
  1080
  1081 = 1434 0E 10		MUL40
  1081 = 1436 40 10		DIRECTION
  1081 = 1438 4F 14		PLAYER1
  1081 = 143A 53 14		PLAYER2
  1081 				.endl							; MAIN
  1082
  1083 				; ------------------------------------------------------------
  1084 				; ------------------------------------------------------------
  1085
  1086 				.macro	UNITINITIALIZATION
  1087 				
  1088 					.ifdef MAIN.SYSTEM.@UnitInit
  1089 					jsr MAIN.SYSTEM.@UnitInit
  1090 					eif
  1091 				.endm
  1092
  1093 				; ------------------------------------------------------------
  1094
  1095 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1096 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1096 				SYSTEM: $10BE..$1159
  1097 					eif
  1098
  1099 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1099 				CODE: $100E..$1433
  1100
  1101 				; ------------------------------------------------------------
  1102
  1103 143C				.align $04
  1104
  1105 143C			DATAORIGIN
  1106 143C 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1107
  1108 = 0006			VARINITSIZE	= *-DATAORIGIN
  1109 = 0026			VARDATASIZE	= 38
  1110
  1111 = 1462			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1112
  1113 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1113 				DATA: $143C..$1462
  1114
  1115 				; ------------------------------------------------------------
  1116
  1117 				.macro	STATICDATA
  1118 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1119 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1120 				.by  $C0 $03 $01 $02 $04 $08
  1121 				.endm
  1122
  1123 					end
