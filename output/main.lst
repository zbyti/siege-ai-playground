mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 63 18			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0042			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 187A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BE			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D BC 17 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 BC 85 02 A9 18 + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 5C 18			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 7F 18		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 7F 18 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 187F			RESULT	= DATAORIGIN+$000B
   182
   183 = 187F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 80 18		loop  lda n
   307 1126 0D 81 18		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 80 18 D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1880			N	= DATAORIGIN+$000C
   321
   322 = 1880			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 82 18			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 82 18		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 83 18		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 83 18 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1882			RANGE	= DATAORIGIN+$000E
   383 = 1883			RESULT	= DATAORIGIN+$000F
   384
   385 = 1882			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1874			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1876			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1878			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1879			FILEMODE	= DATAORIGIN+$0005
   450 = 187A			GRAPHMODE	= DATAORIGIN+$0006
   451 = 187B			IORESULT	= DATAORIGIN+$0007
   452 = 187C			EOLN	= DATAORIGIN+$0008
   453 = 187D			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 5
   460
   461 1171 AD A6 18			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D A5 18			add X
   466 117D 85 5A			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5B			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 6
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5A			ldy T0W
   475 118A AD A8 18			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5B			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD A7 18			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 18A5			X	= DATAORIGIN+$0031
   486 = 18A6			Y	= DATAORIGIN+$0032
   487 = 18A7			V	= DATAORIGIN+$0033
   488 = 18A8			C	= DATAORIGIN+$0034
   489
   490 = 18A5			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	CHECKAVAILDIR					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 13
   508
   509 119C A9 00			lda #$00
   510 119E 8D 84 18			sta AVAILDIR
   511
   512 				; optimize OK (tools.inc), line = 14
   513
   514 11A1 AD AA 18			lda Y
   515 11A4 0A				asl @
   516 11A5 A8				tay
   517 11A6 B9 0E 10			lda adr.MUL40,y
   518 11A9 18 6D A9 18			add X
   519 11AD 85 5A			sta T0W
   520 11AF B9 0F 10			lda adr.MUL40+1,y
   521 11B2 69 0C			adc #$0C
   522 11B4 85 5B			sta T0W+1
   523
   524 				; optimize OK (tools.inc), line = 16
   525
   526 11B6 A5 5A			lda T0W
   527 11B8 38 E9 28			sub #$28
   528 11BB 85 21			sta :STACKORIGIN+9
   529 11BD A5 5B			lda T0W+1
   530 11BF E9 00			sbc #$00
   531 11C1 85 11			sta :bp+1
   532 11C3 A4 21			ldy :STACKORIGIN+9
   533 11C5 B1 10			lda (:bp),y
   534 11C7 C9 20			cmp #$20
   535 11C9 D0 08			jne l_00C6
   536 11CB AD 84 18			lda AVAILDIR
   537 11CE 09 01			ora #$01
   538 11D0 8D 84 18			sta AVAILDIR
   539 11D3			l_00C6
   540
   541 				; optimize OK (tools.inc), line = 17
   542
   543 11D3 A4 5A 84 12 A4 5B + 	mwy T0W :bp2
   544 11DB A0 28			ldy #$28
   545 11DD B1 12			lda (:bp2),y
   546 11DF C9 20			cmp #$20
   547 11E1 D0 08			jne l_00E9
   548 11E3 AD 84 18			lda AVAILDIR
   549 11E6 09 02			ora #$02
   550 11E8 8D 84 18			sta AVAILDIR
   551 11EB			l_00E9
   552
   553 				; optimize OK (tools.inc), line = 18
   554
   555 11EB A5 5A			lda T0W
   556 11ED 38 E9 01			sub #$01
   557 11F0 85 21			sta :STACKORIGIN+9
   558 11F2 A5 5B			lda T0W+1
   559 11F4 E9 00			sbc #$00
   560 11F6 85 11			sta :bp+1
   561 11F8 A4 21			ldy :STACKORIGIN+9
   562 11FA B1 10			lda (:bp),y
   563 11FC C9 20			cmp #$20
   564 11FE D0 08			jne l_010C
   565 1200 AD 84 18			lda AVAILDIR
   566 1203 09 04			ora #$04
   567 1205 8D 84 18			sta AVAILDIR
   568 1208			l_010C
   569
   570 				; optimize OK (tools.inc), line = 19
   571
   572 1208 A4 5A 84 12 A4 5B + 	mwy T0W :bp2
   573 1210 A0 01			ldy #$01
   574 1212 B1 12			lda (:bp2),y
   575 1214 C9 20			cmp #$20
   576 1216 D0 08			jne l_012F
   577 1218 AD 84 18			lda AVAILDIR
   578 121B 09 08			ora #$08
   579 121D 8D 84 18			sta AVAILDIR
   580 1220			l_012F
   581
   582 				; ------------------------------------------------------------
   583
   584 = 18A9			X	= DATAORIGIN+$0035
   585 = 18AA			Y	= DATAORIGIN+$0036
   586
   587 = 18A9			@VarData	= X
   588 = 0002			@VarDataSize	= 2
   589
   590 1220			@exit
   591 					.ifdef @new
   592 					lda <@VarData
   593 					sta :ztmp
   594 					lda >@VarData
   595 					ldy #@VarDataSize-1
   596 					jmp @FreeMem
   597 					els
   598 1220 60				rts						; ret
   599 					eif
   600 				.endl
   601
   602 1221			.local	INITPLAYERS					; PROCEDURE
   603
   604 				; optimize OK (init.inc), line = 5
   605
   606 1221 AD AB 18			lda P
   607 1224 8D 87 18			sta PLY
   608 1227 85 12			sta :bp2
   609 1229 AD AC 18			lda P+1
   610 122C 8D 88 18			sta PLY+1
   611 122F 85 13			sta :bp2+1
   612 				; optimize OK (init.inc), line = 6
   613 1231 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   614 1233 AD B0 18			lda BRAIN
   615 1236 91 12			sta (:bp2),y
   616 1238 A0 00			ldy #PLY.X-DATAORIGIN
   617 123A AD AD 18			lda X
   618 123D 91 12			sta (:bp2),y
   619 123F A0 01			ldy #PLY.Y-DATAORIGIN
   620 1241 AD AE 18			lda Y
   621 1244 91 12			sta (:bp2),y
   622 1246 A0 04			ldy #PLY.DIR-DATAORIGIN
   623 1248 AD AF 18			lda DIR
   624 124B 91 12			sta (:bp2),y
   625
   626 				; optimize OK (init.inc), line = 7
   627
   628 124D A0 02			ldy #PLY.HEAD-DATAORIGIN
   629 124F AD B1 18			lda HEAD
   630 1252 91 12			sta (:bp2),y
   631 1254 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   632 1256 AD B2 18			lda COLOUR
   633 1259 91 12			sta (:bp2),y
   634 125B A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   635 125D AD B3 18			lda ISDEAD
   636 1260 91 12			sta (:bp2),y
   637
   638 				; ------------------------------------------------------------
   639
   640 = 18AB			P	= DATAORIGIN+$0037
   641 = 18AD			X	= DATAORIGIN+$0039
   642 = 18AE			Y	= DATAORIGIN+$003A
   643 = 18AF			DIR	= DATAORIGIN+$003B
   644 = 18B0			BRAIN	= DATAORIGIN+$003C
   645 = 18B1			HEAD	= DATAORIGIN+$003D
   646 = 18B2			COLOUR	= DATAORIGIN+$003E
   647 = 18B3			ISDEAD	= DATAORIGIN+$003F
   648
   649 = 18AB			@VarData	= P
   650 = 0009			@VarDataSize	= 9
   651
   652 1262			@exit
   653 					.ifdef @new
   654 					lda <@VarData
   655 					sta :ztmp
   656 					lda >@VarData
   657 					ldy #@VarDataSize-1
   658 					jmp @FreeMem
   659 					els
   660 1262 60				rts						; ret
   661 					eif
   662 				.endl
   663
   664 1263			.local	INITPLAYFIELD					; PROCEDURE
   665
   666 				; optimize OK (init.inc), line = 15
   667
   668 1263 A9 00			lda #$00
   669 1265 8D B3 18			sta INITPLAYERS.ISDEAD
   670 1268 A9 5F			lda #$5F
   671 126A 8D B2 18			sta INITPLAYERS.COLOUR
   672 126D A9 51			lda #$51
   673 126F 8D B1 18			sta INITPLAYERS.HEAD
   674 1272 A9 00			lda #$00
   675 1274 8D B0 18			sta INITPLAYERS.BRAIN
   676 1277 A9 08			lda #$08
   677 1279 8D AF 18			sta INITPLAYERS.DIR
   678 127C A9 0C			lda #$0C
   679 127E 8D AE 18			sta INITPLAYERS.Y
   680 1281 A9 0A			lda #$0A
   681 1283 8D AD 18			sta INITPLAYERS.X
   682 1286 AD 6A 18			lda PLAYER1
   683 1289 8D AB 18			sta INITPLAYERS.P
   684 128C AD 6B 18			lda PLAYER1+1
   685 128F 8D AC 18			sta INITPLAYERS.P+1
   686 1292 20 21 12			jsr INITPLAYERS
   687
   688 				; optimize OK (init.inc), line = 16
   689
   690 1295 A9 00			lda #$00
   691 1297 8D B3 18			sta INITPLAYERS.ISDEAD
   692 129A A9 5D			lda #$5D
   693 129C 8D B2 18			sta INITPLAYERS.COLOUR
   694 129F A9 51			lda #$51
   695 12A1 8D B1 18			sta INITPLAYERS.HEAD
   696 12A4 A9 02			lda #$02
   697 12A6 8D B0 18			sta INITPLAYERS.BRAIN
   698 12A9 A9 04			lda #$04
   699 12AB 8D AF 18			sta INITPLAYERS.DIR
   700 12AE A9 0C			lda #$0C
   701 12B0 8D AE 18			sta INITPLAYERS.Y
   702 12B3 A9 1E			lda #$1E
   703 12B5 8D AD 18			sta INITPLAYERS.X
   704 12B8 AD 6C 18			lda PLAYER2
   705 12BB 8D AB 18			sta INITPLAYERS.P
   706 12BE AD 6D 18			lda PLAYER2+1
   707 12C1 8D AC 18			sta INITPLAYERS.P+1
   708 12C4 20 21 12			jsr INITPLAYERS
   709
   710 				; optimize OK (init.inc), line = 17
   711
   712 12C7 A9 00			lda #$00
   713 12C9 8D B3 18			sta INITPLAYERS.ISDEAD
   714 12CC A9 71			lda #$71
   715 12CE 8D B2 18			sta INITPLAYERS.COLOUR
   716 12D1 A9 51			lda #$51
   717 12D3 8D B1 18			sta INITPLAYERS.HEAD
   718 12D6 A9 01			lda #$01
   719 12D8 8D B0 18			sta INITPLAYERS.BRAIN
   720 12DB A9 02			lda #$02
   721 12DD 8D AF 18			sta INITPLAYERS.DIR
   722 12E0 A9 06			lda #$06
   723 12E2 8D AE 18			sta INITPLAYERS.Y
   724 12E5 A9 14			lda #$14
   725 12E7 8D AD 18			sta INITPLAYERS.X
   726 12EA AD 6E 18			lda PLAYER3
   727 12ED 8D AB 18			sta INITPLAYERS.P
   728 12F0 AD 6F 18			lda PLAYER3+1
   729 12F3 8D AC 18			sta INITPLAYERS.P+1
   730 12F6 20 21 12			jsr INITPLAYERS
   731
   732 				; optimize OK (init.inc), line = 18
   733
   734 12F9 A9 00			lda #$00
   735 12FB 8D B3 18			sta INITPLAYERS.ISDEAD
   736 12FE A9 55			lda #$55
   737 1300 8D B2 18			sta INITPLAYERS.COLOUR
   738 1303 A9 51			lda #$51
   739 1305 8D B1 18			sta INITPLAYERS.HEAD
   740 1308 A9 03			lda #$03
   741 130A 8D B0 18			sta INITPLAYERS.BRAIN
   742 130D A9 01			lda #$01
   743 130F 8D AF 18			sta INITPLAYERS.DIR
   744 1312 A9 12			lda #$12
   745 1314 8D AE 18			sta INITPLAYERS.Y
   746 1317 A9 14			lda #$14
   747 1319 8D AD 18			sta INITPLAYERS.X
   748 131C AD 70 18			lda PLAYER4
   749 131F 8D AB 18			sta INITPLAYERS.P
   750 1322 AD 71 18			lda PLAYER4+1
   751 1325 8D AC 18			sta INITPLAYERS.P+1
   752 1328 20 21 12			jsr INITPLAYERS
   753
   754 				; optimize OK (init.inc), line = 20
   755
   756 132B A9 1F			lda #$1F
   757 132D 8D 15 FF			sta BORDERCOLOR
   758 1330 A9 00			lda #$00
   759 1332 8D 19 FF			sta BGCOLOR
   760
   761 				; optimize OK (init.inc), line = 21
   762
   763 1335 A9 20			lda #$20
   764 1337 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   765 1339 A9 C0			lda #$C0
   766 133B 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   767 133D A9 03			lda #$03
   768 133F 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   769 1341 A9 00			lda #$00
   770 1343 85 08			sta SYSTEM.FILLCHAR_0056.A
   771 1345 A9 0C			lda #$0C
   772 1347 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   773 1349 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   774
   775 				; optimize OK (init.inc), line = 23
   776
   777 134C A9 27			lda #$27
   778 134E 85 58			sta T0B
   779
   780 1350			l_01B0
   781 				; --- ForToDoCondition
   782
   783 				; optimize OK (init.inc), line = 24
   784
   785 1350 A4 58			ldy T0B
   786 1352 A9 A0			lda #$A0
   787 1354 99 00 0C			sta $0C00,y
   788
   789 				; optimize OK (init.inc), line = 25
   790
   791 1357 99 C0 0F			sta $0FC0,y
   792
   793 				; optimize OK (init.inc), line = 26
   794
   795 135A A9 41			lda #$41
   796 135C 99 00 08			sta $0800,y
   797
   798 				; optimize OK (init.inc), line = 27
   799
   800 135F 99 C0 0B			sta $0BC0,y
   801
   802 				; --- ForToDoEpilog
   803 1362 C6 58			dec T0B
   804 1364 10 EA			jpl l_01B0
   805 1366			l_01BE
   806
   807 				; optimize OK (init.inc), line = 30
   808
   809 1366 A9 18			lda #$18
   810 1368 85 58			sta T0B
   811
   812 136A			l_01F0
   813 				; --- ForToDoCondition
   814 136A A5 58			lda T0B
   815 136C C9 01			cmp #$01
   816 136E 90 3A			jcc l_01FE
   817
   818 				; optimize OK (init.inc), line = 31
   819
   820 1370 0A				asl @
   821 1371 A8				tay
   822 1372 A9 FF			lda #$FF
   823 1374 18 79 0E 10			add adr.MUL40,y
   824 1378 85 12			sta :bp2
   825 137A A9 0B			lda #$0B
   826 137C 79 0F 10			adc adr.MUL40+1,y
   827 137F 85 13			sta :bp2+1
   828 1381 A0 00			ldy #$00
   829 1383 A9 A0			lda #$A0
   830 1385 91 12			sta (:bp2),y
   831 1387 C8				iny
   832 1388 91 12			sta (:bp2),y
   833
   834 				; optimize OK (init.inc), line = 32
   835
   836 138A A5 58			lda T0B
   837 138C 0A				asl @
   838 138D A8				tay
   839 138E A9 FF			lda #$FF
   840 1390 18 79 0E 10			add adr.MUL40,y
   841 1394 85 12			sta :bp2
   842 1396 A9 07			lda #$07
   843 1398 79 0F 10			adc adr.MUL40+1,y
   844 139B 85 13			sta :bp2+1
   845 139D A0 00			ldy #$00
   846 139F A9 41			lda #$41
   847 13A1 91 12			sta (:bp2),y
   848 13A3 C8				iny
   849 13A4 91 12			sta (:bp2),y
   850
   851 				; --- ForToDoEpilog
   852 13A6 C6 58			dec T0B
   853 13A8 10 C0			jpl l_01F0
   854 13AA			l_01FE
   855
   856 				; optimize OK (init.inc), line = 35
   857
   858 13AA AD 8C 18			lda PLAYER1.COLOUR
   859 13AD 8D A8 18			sta PUTCHAR.C
   860 13B0 AD 8B 18			lda PLAYER1.HEAD
   861 13B3 8D A7 18			sta PUTCHAR.V
   862 13B6 AD 8A 18			lda PLAYER1.Y
   863 13B9 8D A6 18			sta PUTCHAR.Y
   864 13BC AD 89 18			lda PLAYER1.X
   865 13BF 8D A5 18			sta PUTCHAR.X
   866 13C2 20 71 11			jsr PUTCHAR
   867
   868 				; optimize OK (init.inc), line = 36
   869
   870 13C5 AD 93 18			lda PLAYER2.COLOUR
   871 13C8 8D A8 18			sta PUTCHAR.C
   872 13CB AD 92 18			lda PLAYER2.HEAD
   873 13CE 8D A7 18			sta PUTCHAR.V
   874 13D1 AD 91 18			lda PLAYER2.Y
   875 13D4 8D A6 18			sta PUTCHAR.Y
   876 13D7 AD 90 18			lda PLAYER2.X
   877 13DA 8D A5 18			sta PUTCHAR.X
   878 13DD 20 71 11			jsr PUTCHAR
   879
   880 				; optimize OK (init.inc), line = 37
   881
   882 13E0 AD 9A 18			lda PLAYER3.COLOUR
   883 13E3 8D A8 18			sta PUTCHAR.C
   884 13E6 AD 99 18			lda PLAYER3.HEAD
   885 13E9 8D A7 18			sta PUTCHAR.V
   886 13EC AD 98 18			lda PLAYER3.Y
   887 13EF 8D A6 18			sta PUTCHAR.Y
   888 13F2 AD 97 18			lda PLAYER3.X
   889 13F5 8D A5 18			sta PUTCHAR.X
   890 13F8 20 71 11			jsr PUTCHAR
   891
   892 				; optimize OK (init.inc), line = 38
   893
   894 13FB AD A1 18			lda PLAYER4.COLOUR
   895 13FE 8D A8 18			sta PUTCHAR.C
   896 1401 AD A0 18			lda PLAYER4.HEAD
   897 1404 8D A7 18			sta PUTCHAR.V
   898 1407 AD 9F 18			lda PLAYER4.Y
   899 140A 8D A6 18			sta PUTCHAR.Y
   900 140D AD 9E 18			lda PLAYER4.X
   901 1410 8D A5 18			sta PUTCHAR.X
   902 1413 20 71 11			jsr PUTCHAR
   903
   904 				; ------------------------------------------------------------
   905
   906 = 0000			@FORTMP_01AD	= $00
   907 = 0001			@FORTMP_01ED	= $01
   908 1416			@exit
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					els
   916 1416 60				rts						; ret
   917 					eif
   918 				.endl
   919
   920 1417			.local	AISTRAIGHT					; PROCEDURE
   921
   922 				; optimize OK (ai.inc), line = 18
   923
   924 1417 AC 87 18 84 12 AC + 	mwy PLY :bp2
   925 1421 A0 04			ldy #PLY.DIR-DATAORIGIN
   926 1423 B1 12			lda (:bp2),y
   927 1425 2D 84 18			and AVAILDIR
   928 1428 F0 07			jeq l_0269
   929 142A B1 12			lda (:bp2),y
   930 142C 85 59			sta NEWDIR
   931 142E 4C AC 14			jmp l_0279
   932 1431			l_0269
   933
   934 				; optimize OK (ai.inc), line = 20
   935
   936 1431 AD 84 18			lda AVAILDIR
   937 1434 C9 03			cmp #$03
   938 1436 D0 16			jne l_028B
   939 1438 A9 00			lda #$00
   940 143A 20 40 11			jsr SYSTEM.RANDOM_006C
   941 143D B5 18			lda :STACKORIGIN,x
   942 143F 29 01			and #$01
   943 1441 95 18			sta :STACKORIGIN,x
   944 1443 B4 18			ldy :STACKORIGIN,x
   945 1445 B9 40 10			lda adr.DIRECTION,y
   946 1448 85 59			sta NEWDIR
   947 144A CA				dex
   948 144B 4C 67 14			jmp l_02A1
   949 144E			l_028B
   950
   951 				; optimize OK (ai.inc), line = 22
   952
   953 144E AD 84 18			lda AVAILDIR
   954 1451 8D B4 18			sta @CASETMP_0003
   955 1454 C9 01			cmp #$01
   956 1456 D0 07			jne l_02AC
   957 1458			@
   958
   959 				; optimize OK (ai.inc), line = 23
   960
   961 1458 A9 01			lda #$01
   962 145A 85 59			sta NEWDIR
   963
   964 145C 4C 67 14			jmp a_0003
   965 145F			l_02AC
   966 145F C9 02			cmp #$02
   967 1461 D0 04			jne l_02B9
   968 1463			@
   969
   970 				; optimize OK (ai.inc), line = 24
   971
   972 1463 A9 02			lda #$02
   973 1465 85 59			sta NEWDIR
   974
   975 1467			l_02B9
   976 1467			a_0003
   977 1467			l_02A1
   978
   979 				; optimize OK (ai.inc), line = 27
   980
   981 1467 AD 84 18			lda AVAILDIR
   982 146A C9 0C			cmp #$0C
   983 146C D0 25			jne l_02D5
   984 146E A9 00			lda #$00
   985 1470 20 40 11			jsr SYSTEM.RANDOM_006C
   986 1473 B5 18			lda :STACKORIGIN,x
   987 1475 29 01			and #$01
   988 1477 95 18			sta :STACKORIGIN,x
   989 1479 E8				inx
   990 147A A9 02 95 18			mva #$02 :STACKORIGIN,x
   991 147E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
   992 1482 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
   993 1484 20 44 10			jsr addAX_CX
   994 1487 CA				dex
   995 1488 B4 18			ldy :STACKORIGIN,x
   996 148A B9 40 10			lda adr.DIRECTION,y
   997 148D 85 59			sta NEWDIR
   998 148F CA				dex
   999 1490 4C AC 14			jmp l_02EF
  1000 1493			l_02D5
  1001
  1002 				; optimize OK (ai.inc), line = 29
  1003
  1004 1493 AD 84 18			lda AVAILDIR
  1005 1496 8D B5 18			sta @CASETMP_0004
  1006 1499 C9 04			cmp #$04
  1007 149B D0 07			jne l_02FA
  1008 149D			@
  1009
  1010 				; optimize OK (ai.inc), line = 30
  1011
  1012 149D A9 04			lda #$04
  1013 149F 85 59			sta NEWDIR
  1014
  1015 14A1 4C AC 14			jmp a_0004
  1016 14A4			l_02FA
  1017 14A4 C9 08			cmp #$08
  1018 14A6 D0 04			jne l_0307
  1019 14A8			@
  1020
  1021 				; optimize OK (ai.inc), line = 31
  1022
  1023 14A8 A9 08			lda #$08
  1024 14AA 85 59			sta NEWDIR
  1025
  1026 14AC			l_0307
  1027 14AC			a_0004
  1028 14AC			l_02EF
  1029 14AC			l_0279
  1030
  1031 				; ------------------------------------------------------------
  1032
  1033 = 18B4			@CASETMP_0003	= DATAORIGIN+$0040
  1034 = 18B5			@CASETMP_0004	= DATAORIGIN+$0041
  1035
  1036 = 18B4			@VarData	= @CASETMP_0003
  1037 = 0002			@VarDataSize	= 2
  1038
  1039 14AC			@exit
  1040 					.ifdef @new
  1041 					lda <@VarData
  1042 					sta :ztmp
  1043 					lda >@VarData
  1044 					ldy #@VarDataSize-1
  1045 					jmp @FreeMem
  1046 					els
  1047 14AC 60				rts						; ret
  1048 					eif
  1049 				.endl
  1050
  1051 14AD			.local	AIMIRROR					; PROCEDURE
  1052
  1053 				; optimize OK (ai.inc), line = 41
  1054
  1055 14AD AD 8D 18			lda PLAYER1.DIR
  1056 14B0 8D B6 18			sta @CASETMP_0005
  1057 14B3 C9 01			cmp #$01
  1058 14B5 D0 07			jne l_0320
  1059 14B7			@
  1060
  1061 				; optimize OK (ai.inc), line = 42
  1062
  1063 14B7 A9 02			lda #$02
  1064 14B9 85 58			sta T0B
  1065
  1066 14BB 4C DC 14			jmp a_0005
  1067 14BE			l_0320
  1068 14BE C9 02			cmp #$02
  1069 14C0 D0 07			jne l_032D
  1070 14C2			@
  1071
  1072 				; optimize OK (ai.inc), line = 43
  1073
  1074 14C2 A9 01			lda #$01
  1075 14C4 85 58			sta T0B
  1076
  1077 14C6 4C DC 14			jmp a_0005
  1078 14C9			l_032D
  1079 14C9 C9 04			cmp #$04
  1080 14CB D0 07			jne l_033A
  1081 14CD			@
  1082
  1083 				; optimize OK (ai.inc), line = 44
  1084
  1085 14CD A9 08			lda #$08
  1086 14CF 85 58			sta T0B
  1087
  1088 14D1 4C DC 14			jmp a_0005
  1089 14D4			l_033A
  1090 14D4 C9 08			cmp #$08
  1091 14D6 D0 04			jne l_0347
  1092 14D8			@
  1093
  1094 				; optimize OK (ai.inc), line = 45
  1095
  1096 14D8 A9 04			lda #$04
  1097 14DA 85 58			sta T0B
  1098
  1099 14DC			l_0347
  1100 14DC			a_0005
  1101
  1102 				; optimize OK (ai.inc), line = 48
  1103
  1104 14DC AD 84 18			lda AVAILDIR
  1105 14DF 25 58			and T0B
  1106 14E1 F0 07			jeq l_036B
  1107 14E3 A5 58			lda T0B
  1108 14E5 85 59			sta NEWDIR
  1109 14E7 4C ED 14			jmp l_037B
  1110 14EA			l_036B
  1111
  1112 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 49
  1113
  1114 14EA 20 17 14			jsr AISTRAIGHT
  1115 14ED			l_037B
  1116
  1117 				; ------------------------------------------------------------
  1118
  1119 = 18B6			@CASETMP_0005	= DATAORIGIN+$0042
  1120
  1121 = 18B6			@VarData	= @CASETMP_0005
  1122 = 0001			@VarDataSize	= 1
  1123
  1124 14ED			@exit
  1125 					.ifdef @new
  1126 					lda <@VarData
  1127 					sta :ztmp
  1128 					lda >@VarData
  1129 					ldy #@VarDataSize-1
  1130 					jmp @FreeMem
  1131 					els
  1132 14ED 60				rts						; ret
  1133 					eif
  1134 				.endl
  1135
  1136 14EE			.local	AIRANDOM					; PROCEDURE
  1137
  1138 				; optimize OK (ai.inc), line = 56
  1139
  1140 14EE AC 87 18 84 12 AC + 	mwy PLY :bp2
  1141 14F8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1142 14FA B1 12			lda (:bp2),y
  1143 14FC 85 58			sta T0B
  1144
  1145 				; optimize OK (ai.inc), line = 57
  1146
  1147 14FE A9 00			lda #$00
  1148 1500 20 40 11			jsr SYSTEM.RANDOM_006C
  1149 1503 CA				dex
  1150 1504 B5 19			lda :STACKORIGIN+1,x
  1151 1506 29 03			and #$03
  1152 1508 D0 0D			jne l_039B
  1153 150A			@
  1154 150A A9 04			lda #$04
  1155 150C 20 40 11			jsr SYSTEM.RANDOM_006C
  1156 150F B4 18			ldy :STACKORIGIN,x
  1157 1511 B9 40 10			lda adr.DIRECTION,y
  1158 1514 85 58			sta T0B
  1159 1516 CA				dex
  1160 1517			l_039B
  1161
  1162 				; optimize OK (ai.inc), line = 59
  1163
  1164 1517 AD 84 18			lda AVAILDIR
  1165 151A 25 58			and T0B
  1166 151C F0 07			jeq l_03BE
  1167 151E A5 58			lda T0B
  1168 1520 85 59			sta NEWDIR
  1169 1522 4C 28 15			jmp l_03CE
  1170 1525			l_03BE
  1171
  1172 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 60
  1173
  1174 1525 20 17 14			jsr AISTRAIGHT
  1175 1528			l_03CE
  1176 1528			@exit
  1177 					.ifdef @new
  1178 					lda <@VarData
  1179 					sta :ztmp
  1180 					lda >@VarData
  1181 					ldy #@VarDataSize-1
  1182 					jmp @FreeMem
  1183 					els
  1184 1528 60				rts						; ret
  1185 					eif
  1186 				.endl
  1187
  1188 1529			.local	HUMAN						; PROCEDURE
  1189
  1190 				; optimize OK (main.pas), line = 14
  1191
  1192 1529 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1193 1533 A0 04			ldy #PLY.DIR-DATAORIGIN
  1194 1535 B1 12			lda (:bp2),y
  1195 1537 85 59			sta NEWDIR
  1196
  1197 				; optimize OK (main.pas), line = 15
  1198
  1199 1539 A9 02			lda #$02
  1200 153B 8D 08 FF			sta JOY
  1201 153E A9 FF			lda #$FF
  1202 1540 8D 30 FD			sta KEY_PIO
  1203 1543 AD 08 FF			lda JOY
  1204 1546 49 FF			eor #$FF
  1205 1548 85 58			sta T0B
  1206
  1207 				; optimize OK (main.pas), line = 17
  1208
  1209 154A 8D B7 18			sta @CASETMP_0006
  1210 154D C9 01			cmp #$01
  1211 154F D0 19			jne l_03F6
  1212 1551			@
  1213
  1214 				; optimize OK (main.pas), line = 18
  1215
  1216 1551 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1217 155B A0 04			ldy #PLY.DIR-DATAORIGIN
  1218 155D B1 12			lda (:bp2),y
  1219 155F C9 02			cmp #$02
  1220 1561 F0 04			jeq l_0408
  1221 1563 A9 01			lda #$01
  1222 1565 85 59			sta NEWDIR
  1223 1567			l_0408
  1224
  1225 1567 4C BE 15			jmp a_0006
  1226 156A			l_03F6
  1227 156A C9 02			cmp #$02
  1228 156C D0 19			jne l_0418
  1229 156E			@
  1230
  1231 				; optimize OK (main.pas), line = 19
  1232
  1233 156E AC 87 18 84 12 AC + 	mwy PLY :bp2
  1234 1578 A0 04			ldy #PLY.DIR-DATAORIGIN
  1235 157A B1 12			lda (:bp2),y
  1236 157C C9 01			cmp #$01
  1237 157E F0 04			jeq l_042A
  1238 1580 A9 02			lda #$02
  1239 1582 85 59			sta NEWDIR
  1240 1584			l_042A
  1241
  1242 1584 4C BE 15			jmp a_0006
  1243 1587			l_0418
  1244 1587 C9 04			cmp #$04
  1245 1589 D0 19			jne l_043A
  1246 158B			@
  1247
  1248 				; optimize OK (main.pas), line = 20
  1249
  1250 158B AC 87 18 84 12 AC + 	mwy PLY :bp2
  1251 1595 A0 04			ldy #PLY.DIR-DATAORIGIN
  1252 1597 B1 12			lda (:bp2),y
  1253 1599 C9 08			cmp #$08
  1254 159B F0 04			jeq l_044C
  1255 159D A9 04			lda #$04
  1256 159F 85 59			sta NEWDIR
  1257 15A1			l_044C
  1258
  1259 15A1 4C BE 15			jmp a_0006
  1260 15A4			l_043A
  1261 15A4 C9 08			cmp #$08
  1262 15A6 D0 16			jne l_045C
  1263 15A8			@
  1264
  1265 				; optimize OK (main.pas), line = 21
  1266
  1267 15A8 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1268 15B2 A0 04			ldy #PLY.DIR-DATAORIGIN
  1269 15B4 B1 12			lda (:bp2),y
  1270 15B6 C9 04			cmp #$04
  1271 15B8 F0 04			jeq l_046E
  1272 15BA A9 08			lda #$08
  1273 15BC 85 59			sta NEWDIR
  1274 15BE			l_046E
  1275
  1276 15BE			l_045C
  1277 15BE			a_0006
  1278
  1279 				; optimize OK (main.pas), line = 24
  1280
  1281 15BE A5 59			lda NEWDIR
  1282 15C0 2D 84 18			and AVAILDIR
  1283 15C3 D0 19			jne l_0495
  1284
  1285 				; optimize OK (main.pas), line = 25
  1286
  1287 15C5 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1288 15CF A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1289 15D1 A9 01			lda #$01
  1290 15D3 91 12			sta (:bp2),y
  1291 15D5 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1292 15D7 A9 57			lda #$57
  1293 15D9 91 12			sta (:bp2),y
  1294 15DB CE 85 18			dec ALIVE
  1295 15DE			l_0495
  1296
  1297 				; ------------------------------------------------------------
  1298
  1299 = 18B7			@CASETMP_0006	= DATAORIGIN+$0043
  1300
  1301 = 18B7			@VarData	= @CASETMP_0006
  1302 = 0001			@VarDataSize	= 1
  1303
  1304 15DE			@exit
  1305 					.ifdef @new
  1306 					lda <@VarData
  1307 					sta :ztmp
  1308 					lda >@VarData
  1309 					ldy #@VarDataSize-1
  1310 					jmp @FreeMem
  1311 					els
  1312 15DE 60				rts						; ret
  1313 					eif
  1314 				.endl
  1315
  1316 15DF			.local	PLAYERMOVE					; PROCEDURE
  1317
  1318 				; optimize OK (main.pas), line = 33
  1319
  1320 15DF AD B8 18			lda P
  1321 15E2 8D 87 18			sta PLY
  1322 15E5 85 12			sta :bp2
  1323 15E7 AD B9 18			lda P+1
  1324 15EA 8D 88 18			sta PLY+1
  1325 15ED 85 13			sta :bp2+1
  1326 				; optimize OK (main.pas), line = 35
  1327 15EF A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1328 15F1 B1 12			lda (:bp2),y
  1329 15F3 F0 03 4C DA 17		jne l_04BC
  1330
  1331 				; optimize OK (main.pas), line = 37
  1332
  1333 15F8 A0 00			ldy #PLY.X-DATAORIGIN
  1334 15FA B1 12			lda (:bp2),y
  1335 15FC 8D A9 18			sta CHECKAVAILDIR.X
  1336 15FF A0 01			ldy #PLY.Y-DATAORIGIN
  1337 1601 B1 12			lda (:bp2),y
  1338 1603 8D AA 18			sta CHECKAVAILDIR.Y
  1339 1606 20 9C 11			jsr CHECKAVAILDIR
  1340
  1341 				; optimize OK (main.pas), line = 39
  1342
  1343 1609 AD 84 18			lda AVAILDIR
  1344 160C D0 36			jne l_04D6
  1345
  1346 				; optimize OK (main.pas), line = 40
  1347
  1348 160E AC 87 18 84 12 AC + 	mwy PLY :bp2
  1349 1618 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1350 161A A9 01			lda #$01
  1351 161C 91 12			sta (:bp2),y
  1352 161E CE 85 18			dec ALIVE
  1353
  1354 				; optimize OK (main.pas), line = 41
  1355
  1356 1621 A0 00			ldy #PLY.X-DATAORIGIN
  1357 1623 B1 12			lda (:bp2),y
  1358 1625 8D A5 18			sta PUTCHAR.X
  1359 1628 A0 01			ldy #PLY.Y-DATAORIGIN
  1360 162A B1 12			lda (:bp2),y
  1361 162C 8D A6 18			sta PUTCHAR.Y
  1362 162F A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1363 1631 B1 12			lda (:bp2),y
  1364 1633 18 69 80			add #$80
  1365 1636 8D A8 18			sta PUTCHAR.C
  1366 1639 A9 57			lda #$57
  1367 163B 8D A7 18			sta PUTCHAR.V
  1368 163E 20 71 11			jsr PUTCHAR
  1369 1641 4C DA 17			jmp l_04F7
  1370 1644			l_04D6
  1371
  1372 				; optimize OK (main.pas), line = 44
  1373
  1374 1644 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1375 164E A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1376 1650 B1 12			lda (:bp2),y
  1377 1652 8D BA 18			sta @CASETMP_0007
  1378 1655 C9 00			cmp #$00
  1379 1657 D0 06			jne l_0502
  1380 1659			@
  1381
  1382 				; optimize FAIL ('HUMAN', main.pas), line = 45
  1383
  1384 1659 20 29 15			jsr HUMAN
  1385 165C 4C 7A 16			jmp a_0007
  1386 165F			l_0502
  1387 165F C9 01			cmp #$01
  1388 1661 D0 06			jne l_050C
  1389 1663			@
  1390
  1391 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 46
  1392
  1393 1663 20 17 14			jsr AISTRAIGHT
  1394 1666 4C 7A 16			jmp a_0007
  1395 1669			l_050C
  1396 1669 C9 02			cmp #$02
  1397 166B D0 06			jne l_0516
  1398 166D			@
  1399
  1400 				; optimize FAIL ('AIMIRROR', main.pas), line = 47
  1401
  1402 166D 20 AD 14			jsr AIMIRROR
  1403 1670 4C 7A 16			jmp a_0007
  1404 1673			l_0516
  1405 1673 C9 03			cmp #$03
  1406 1675 D0 03			jne l_0520
  1407 1677			@
  1408
  1409 				; optimize FAIL ('AIRANDOM', main.pas), line = 48
  1410
  1411 1677 20 EE 14			jsr AIRANDOM
  1412 167A			l_0520
  1413 167A			a_0007
  1414
  1415 				; optimize OK (main.pas), line = 51
  1416
  1417 167A AC 87 18 84 12 AC + 	mwy PLY :bp2
  1418 1684 A0 04			ldy #PLY.DIR-DATAORIGIN
  1419 1686 B1 12			lda (:bp2),y
  1420 1688 C5 59			cmp NEWDIR
  1421 168A D0 14			jne l_053D
  1422
  1423 				; optimize OK (main.pas), line = 52
  1424
  1425 168C A5 59			lda NEWDIR
  1426 168E 29 0C			and #$0C
  1427 1690 F0 07			jeq l_0554
  1428 1692 A9 40			lda #$40
  1429 1694 85 58			sta T0B
  1430 1696 4C 9D 16			jmp l_0562
  1431 1699			l_0554
  1432 1699 A9 42			lda #$42
  1433 169B 85 58			sta T0B
  1434 169D			l_0562
  1435 169D 4C 10 17			jmp l_056F
  1436 16A0			l_053D
  1437
  1438 				; optimize OK (main.pas), line = 54
  1439
  1440 16A0 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1441 16AA A0 04			ldy #PLY.DIR-DATAORIGIN
  1442 16AC B1 12			lda (:bp2),y
  1443 16AE 29 0A			and #$0A
  1444 16B0 F0 0A			jeq l_0595
  1445 16B2 A5 59			lda NEWDIR
  1446 16B4 29 05			and #$05
  1447 16B6 F0 04			jeq l_0595
  1448 16B8 A9 7D			lda #$7D
  1449 16BA 85 58			sta T0B
  1450 16BC			l_0595
  1451
  1452 				; optimize OK (main.pas), line = 55
  1453
  1454 16BC AC 87 18 84 12 AC + 	mwy PLY :bp2
  1455 16C6 A0 04			ldy #PLY.DIR-DATAORIGIN
  1456 16C8 B1 12			lda (:bp2),y
  1457 16CA 29 09			and #$09
  1458 16CC F0 0A			jeq l_05C2
  1459 16CE A5 59			lda NEWDIR
  1460 16D0 29 06			and #$06
  1461 16D2 F0 04			jeq l_05C2
  1462 16D4 A9 6E			lda #$6E
  1463 16D6 85 58			sta T0B
  1464 16D8			l_05C2
  1465
  1466 				; optimize OK (main.pas), line = 56
  1467
  1468 16D8 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1469 16E2 A0 04			ldy #PLY.DIR-DATAORIGIN
  1470 16E4 B1 12			lda (:bp2),y
  1471 16E6 29 06			and #$06
  1472 16E8 F0 0A			jeq l_05EF
  1473 16EA A5 59			lda NEWDIR
  1474 16EC 29 09			and #$09
  1475 16EE F0 04			jeq l_05EF
  1476 16F0 A9 6D			lda #$6D
  1477 16F2 85 58			sta T0B
  1478 16F4			l_05EF
  1479
  1480 				; optimize OK (main.pas), line = 57
  1481
  1482 16F4 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1483 16FE A0 04			ldy #PLY.DIR-DATAORIGIN
  1484 1700 B1 12			lda (:bp2),y
  1485 1702 29 05			and #$05
  1486 1704 F0 0A			jeq l_061C
  1487 1706 A5 59			lda NEWDIR
  1488 1708 29 0A			and #$0A
  1489 170A F0 04			jeq l_061C
  1490 170C A9 70			lda #$70
  1491 170E 85 58			sta T0B
  1492 1710			l_061C
  1493 1710			l_056F
  1494
  1495 				; optimize OK (main.pas), line = 59
  1496
  1497 1710 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1498 171A A0 00			ldy #PLY.X-DATAORIGIN
  1499 171C B1 12			lda (:bp2),y
  1500 171E 8D A5 18			sta PUTCHAR.X
  1501 1721 A0 01			ldy #PLY.Y-DATAORIGIN
  1502 1723 B1 12			lda (:bp2),y
  1503 1725 8D A6 18			sta PUTCHAR.Y
  1504 1728 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1505 172A B1 12			lda (:bp2),y
  1506 172C 8D A8 18			sta PUTCHAR.C
  1507 172F A5 58			lda T0B
  1508 1731 8D A7 18			sta PUTCHAR.V
  1509 1734 20 71 11			jsr PUTCHAR
  1510
  1511 				; optimize OK (main.pas), line = 61
  1512
  1513 1737 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1514 1741 A0 04			ldy #PLY.DIR-DATAORIGIN
  1515 1743 A5 59			lda NEWDIR
  1516 1745 91 12			sta (:bp2),y
  1517
  1518 				; optimize OK (main.pas), line = 63
  1519
  1520 1747 A5 59			lda NEWDIR
  1521 1749 8D BB 18			sta @CASETMP_0008
  1522 174C C9 01			cmp #$01
  1523 174E D0 16			jne l_0641
  1524 1750			@
  1525
  1526 				; optimize OK (main.pas), line = 64
  1527
  1528 1750 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1529 175A A0 01			ldy #PLY.Y-DATAORIGIN
  1530 175C B1 12			lda (:bp2),y
  1531 175E 38 E9 01			sub #$01
  1532 1761 91 12			sta (:bp2),y
  1533
  1534 1763 4C B1 17			jmp a_0008
  1535 1766			l_0641
  1536 1766 C9 02			cmp #$02
  1537 1768 D0 16			jne l_064B
  1538 176A			@
  1539
  1540 				; optimize OK (main.pas), line = 65
  1541
  1542 176A AC 87 18 84 12 AC + 	mwy PLY :bp2
  1543 1774 A0 01			ldy #PLY.Y-DATAORIGIN
  1544 1776 B1 12			lda (:bp2),y
  1545 1778 18 69 01			add #$01
  1546 177B 91 12			sta (:bp2),y
  1547
  1548 177D 4C B1 17			jmp a_0008
  1549 1780			l_064B
  1550 1780 C9 04			cmp #$04
  1551 1782 D0 16			jne l_0655
  1552 1784			@
  1553
  1554 				; optimize OK (main.pas), line = 66
  1555
  1556 1784 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1557 178E A0 00			ldy #PLY.X-DATAORIGIN
  1558 1790 B1 12			lda (:bp2),y
  1559 1792 38 E9 01			sub #$01
  1560 1795 91 12			sta (:bp2),y
  1561
  1562 1797 4C B1 17			jmp a_0008
  1563 179A			l_0655
  1564 179A C9 08			cmp #$08
  1565 179C D0 13			jne l_065F
  1566 179E			@
  1567
  1568 				; optimize OK (main.pas), line = 67
  1569
  1570 179E AC 87 18 84 12 AC + 	mwy PLY :bp2
  1571 17A8 A0 00			ldy #PLY.X-DATAORIGIN
  1572 17AA B1 12			lda (:bp2),y
  1573 17AC 18 69 01			add #$01
  1574 17AF 91 12			sta (:bp2),y
  1575
  1576 17B1			l_065F
  1577 17B1			a_0008
  1578
  1579 				; optimize OK (main.pas), line = 70
  1580
  1581 17B1 AC 87 18 84 12 AC + 	mwy PLY :bp2
  1582 17BB A0 00			ldy #PLY.X-DATAORIGIN
  1583 17BD B1 12			lda (:bp2),y
  1584 17BF 8D A5 18			sta PUTCHAR.X
  1585 17C2 A0 01			ldy #PLY.Y-DATAORIGIN
  1586 17C4 B1 12			lda (:bp2),y
  1587 17C6 8D A6 18			sta PUTCHAR.Y
  1588 17C9 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1589 17CB B1 12			lda (:bp2),y
  1590 17CD 8D A7 18			sta PUTCHAR.V
  1591 17D0 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1592 17D2 B1 12			lda (:bp2),y
  1593 17D4 8D A8 18			sta PUTCHAR.C
  1594 17D7 20 71 11			jsr PUTCHAR
  1595 17DA			l_04F7
  1596 17DA			l_04BC
  1597
  1598 				; ------------------------------------------------------------
  1599
  1600 = 18B8			P	= DATAORIGIN+$0044
  1601 = 18BA			@CASETMP_0007	= DATAORIGIN+$0046
  1602 = 18BB			@CASETMP_0008	= DATAORIGIN+$0047
  1603
  1604 = 18B8			@VarData	= P
  1605 = 0004			@VarDataSize	= 4
  1606
  1607 17DA			@exit
  1608 					.ifdef @new
  1609 					lda <@VarData
  1610 					sta :ztmp
  1611 					lda >@VarData
  1612 					ldy #@VarDataSize-1
  1613 					jmp @FreeMem
  1614 					els
  1615 17DA 60				rts						; ret
  1616 					eif
  1617 				.endl
  1618
  1619 17DB			.local	STARTSCREEN					; PROCEDURE
  1620
  1621 				; --- RepeatUntilProlog
  1622 17DB			l_067C
  1623
  1624 				; optimize OK (main.pas), line = 82
  1625
  1626 17DB A9 02			lda #$02
  1627 17DD 8D 08 FF			sta JOY
  1628 17E0 A9 FF			lda #$FF
  1629 17E2 8D 30 FD			sta KEY_PIO
  1630 17E5 AD 08 FF			lda JOY
  1631 17E8 49 FF			eor #$FF
  1632 17EA 85 58			sta T0B
  1633
  1634 				; optimize OK (main.pas), line = 83
  1635
  1636 17EC C9 40			cmp #$40
  1637 17EE D0 EB			jne l_067C
  1638 17F0			@exit
  1639 					.ifdef @new
  1640 					lda <@VarData
  1641 					sta :ztmp
  1642 					lda >@VarData
  1643 					ldy #@VarDataSize-1
  1644 					jmp @FreeMem
  1645 					els
  1646 17F0 60				rts						; ret
  1647 					eif
  1648 				.endl
  1649
  1650 17F1			.local	MAINLOOP					; PROCEDURE
  1651
  1652 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 90
  1653
  1654 17F1 20 63 12			jsr INITPLAYFIELD
  1655
  1656 				; optimize FAIL ('STARTSCREEN', main.pas), line = 91
  1657
  1658 17F4 20 DB 17			jsr STARTSCREEN
  1659
  1660 				; optimize OK (main.pas), line = 93
  1661
  1662 17F7 A9 03			lda #$03
  1663 17F9 8D 85 18			sta ALIVE
  1664
  1665 				; --- RepeatUntilProlog
  1666 17FC			l_06A6
  1667
  1668 				; optimize OK (main.pas), line = 95
  1669
  1670 17FC A9 04			lda #$04
  1671 17FE 8D 80 18			sta SYSTEM.PAUSE_006B.N
  1672 1801 A9 00			lda #$00
  1673 1803 8D 81 18			sta SYSTEM.PAUSE_006B.N+1
  1674 1806 20 23 11			jsr SYSTEM.PAUSE_006B
  1675
  1676 				; optimize OK (main.pas), line = 96
  1677
  1678 1809 AD 6A 18			lda PLAYER1
  1679 180C 8D B8 18			sta PLAYERMOVE.P
  1680 180F AD 6B 18			lda PLAYER1+1
  1681 1812 8D B9 18			sta PLAYERMOVE.P+1
  1682 1815 20 DF 15			jsr PLAYERMOVE
  1683 1818 AD 6C 18			lda PLAYER2
  1684 181B 8D B8 18			sta PLAYERMOVE.P
  1685 181E AD 6D 18			lda PLAYER2+1
  1686 1821 8D B9 18			sta PLAYERMOVE.P+1
  1687 1824 20 DF 15			jsr PLAYERMOVE
  1688
  1689 				; optimize OK (main.pas), line = 97
  1690
  1691 1827 AD 6E 18			lda PLAYER3
  1692 182A 8D B8 18			sta PLAYERMOVE.P
  1693 182D AD 6F 18			lda PLAYER3+1
  1694 1830 8D B9 18			sta PLAYERMOVE.P+1
  1695 1833 20 DF 15			jsr PLAYERMOVE
  1696 1836 AD 70 18			lda PLAYER4
  1697 1839 8D B8 18			sta PLAYERMOVE.P
  1698 183C AD 71 18			lda PLAYER4+1
  1699 183F 8D B9 18			sta PLAYERMOVE.P+1
  1700 1842 20 DF 15			jsr PLAYERMOVE
  1701
  1702 				; optimize OK (main.pas), line = 98
  1703
  1704 1845 AD 85 18			lda ALIVE
  1705 1848 F0 04			jeq l_06A6x
  1706 184A C9 FF			cmp #$FF
  1707 184C D0 AE			jne l_06A6
  1708 184E			l_06A6x
  1709
  1710 				; optimize OK (main.pas), line = 100
  1711
  1712 184E A9 64			lda #$64
  1713 1850 8D 80 18			sta SYSTEM.PAUSE_006B.N
  1714 1853 A9 00			lda #$00
  1715 1855 8D 81 18			sta SYSTEM.PAUSE_006B.N+1
  1716 1858 20 23 11			jsr SYSTEM.PAUSE_006B
  1717 185B			@exit
  1718 					.ifdef @new
  1719 					lda <@VarData
  1720 					sta :ztmp
  1721 					lda >@VarData
  1722 					ldy #@VarDataSize-1
  1723 					jmp @FreeMem
  1724 					els
  1725 185B 60				rts						; ret
  1726 					eif
  1727 				.endl
  1728 185C			l_0007
  1729
  1730 				; --- RepeatUntilProlog
  1731 185C			l_06D1
  1732
  1733 				; optimize FAIL ('MAINLOOP', main.pas), line = 106
  1734
  1735 185C 20 F1 17			jsr MAINLOOP
  1736 185F 4C 5C 18			jmp l_06D1
  1737
  1738 				; ------------------------------------------------------------
  1739
  1740 = 0800			ATTRIBUTE_ADDR	= $0800
  1741 = 0C00			SCREEN_ADDR	= $0C00
  1742 = 0020			EMPTY	= $20
  1743 = 00A0			WALL	= $A0
  1744 = 0041			WALL_COLOUR	= $41
  1745 = 0051			PLY_HEAD	= $51
  1746 = 0057			PLY_CRASH	= $57
  1747 = 0042			PLY_TAIL_UD	= $42
  1748 = 0040			PLY_TAIL_LR	= $40
  1749 = 007D			PLY_TAIL_RD	= $7D
  1750 = 006E			PLY_TAIL_RU	= $6E
  1751 = 006D			PLY_TAIL_LD	= $6D
  1752 = 0070			PLY_TAIL_LU	= $70
  1753 = 005F			PLY1_COLOUR	= $5F
  1754 = 005D			PLY2_COLOUR	= $5D
  1755 = 0071			PLY3_COLOUR	= $71
  1756 = 0055			PLY4_COLOUR	= $55
  1757 = 0000			PLY_CTRL	= $00
  1758 = 0001			AI_STRAIGHT	= $01
  1759 = 0002			AI_MIRROR	= $02
  1760 = 0003			AI_RANDOM	= $03
  1761 = 0001			JOY_UP	= $01
  1762 = 0002			JOY_DOWN	= $02
  1763 = 0004			JOY_LEFT	= $04
  1764 = 0008			JOY_RIGHT	= $08
  1765 = 0040			JOY_FIRE	= $40
  1766 = 0002			JOY_SELECT_1	= $02
  1767 = 0004			JOY_SELECT_2	= $04
  1768 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1769 1862			.var MUL40	= adr.MUL40 .word
  1770 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1771 1862			.var DIRECTION	= adr.DIRECTION .word
  1772 = FD30			KEY_PIO	= $FD30
  1773 = FF08			JOY	= $FF08
  1774 = FF15			BORDERCOLOR	= $FF15
  1775 = FF19			BGCOLOR	= $FF19
  1776 = 0058			T0B	= $58
  1777 = 0059			NEWDIR	= $59
  1778 = 005A			T0W	= $5A
  1779 = 1884			AVAILDIR	= DATAORIGIN+$0010
  1780 = 1885			ALIVE	= DATAORIGIN+$0011
  1781 = 1886			SPEED	= DATAORIGIN+$0012
  1782 = 1887			PLY	= DATAORIGIN+$0013
  1783 = 1874			PLY.X	= DATAORIGIN+$0000
  1784 = 1875			PLY.Y	= DATAORIGIN+$0001
  1785 = 1876			PLY.HEAD	= DATAORIGIN+$0002
  1786 = 1877			PLY.COLOUR	= DATAORIGIN+$0003
  1787 = 1878			PLY.DIR	= DATAORIGIN+$0004
  1788 = 1879			PLY.BRAIN	= DATAORIGIN+$0005
  1789 = 187A			PLY.ISDEAD	= DATAORIGIN+$0006
  1790 = 1889			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1791 1862			.var PLAYER1	= adr.PLAYER1 .word
  1792 = 1889			PLAYER1.X	= DATAORIGIN+$0015
  1793 = 188A			PLAYER1.Y	= DATAORIGIN+$0016
  1794 = 188B			PLAYER1.HEAD	= DATAORIGIN+$0017
  1795 = 188C			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1796 = 188D			PLAYER1.DIR	= DATAORIGIN+$0019
  1797 = 188E			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1798 = 188F			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1799 = 1890			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1800 1862			.var PLAYER2	= adr.PLAYER2 .word
  1801 = 1890			PLAYER2.X	= DATAORIGIN+$001C
  1802 = 1891			PLAYER2.Y	= DATAORIGIN+$001D
  1803 = 1892			PLAYER2.HEAD	= DATAORIGIN+$001E
  1804 = 1893			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1805 = 1894			PLAYER2.DIR	= DATAORIGIN+$0020
  1806 = 1895			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1807 = 1896			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1808 = 1897			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1809 1862			.var PLAYER3	= adr.PLAYER3 .word
  1810 = 1897			PLAYER3.X	= DATAORIGIN+$0023
  1811 = 1898			PLAYER3.Y	= DATAORIGIN+$0024
  1812 = 1899			PLAYER3.HEAD	= DATAORIGIN+$0025
  1813 = 189A			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1814 = 189B			PLAYER3.DIR	= DATAORIGIN+$0027
  1815 = 189C			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1816 = 189D			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1817 = 189E			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1818 1862			.var PLAYER4	= adr.PLAYER4 .word
  1819 = 189E			PLAYER4.X	= DATAORIGIN+$002A
  1820 = 189F			PLAYER4.Y	= DATAORIGIN+$002B
  1821 = 18A0			PLAYER4.HEAD	= DATAORIGIN+$002C
  1822 = 18A1			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1823 = 18A2			PLAYER4.DIR	= DATAORIGIN+$002E
  1824 = 18A3			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1825 = 18A4			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1826 1862			@exit
  1827
  1828 1862 A2 00		@halt	ldx #$00
  1829 1864 9A				txs
  1830
  1831 1865 60				rts
  1832
  1833 				; ------------------------------------------------------------
  1834
  1835 				; ------------------------------------------------------------
  1836
  1837 1866			.local	@DEFINES
  1838 1866			C4P
  1839 				.endl
  1840
  1841 1866			.local	@RESOURCE
  1842 				.endl
  1843
  1844 = 1866 0E 10		MUL40
  1844 = 1868 40 10		DIRECTION
  1844 = 186A 89 18		PLAYER1
  1844 = 186C 90 18		PLAYER2
  1844 = 186E 97 18		PLAYER3
  1844 = 1870 9E 18		PLAYER4
  1844 				.endl							; MAIN
  1845
  1846 				; ------------------------------------------------------------
  1847 				; ------------------------------------------------------------
  1848
  1849 				.macro	UNITINITIALIZATION
  1850 				
  1851 					.ifdef MAIN.SYSTEM.@UnitInit
  1852 					jsr MAIN.SYSTEM.@UnitInit
  1853 					eif
  1854 				.endm
  1855
  1856 				; ------------------------------------------------------------
  1857
  1858 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1859 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1859 				SYSTEM: $10D5..$1170
  1860 					eif
  1861
  1862 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1862 				CODE: $100E..$1865
  1863
  1864 				; ------------------------------------------------------------
  1865
  1866 1872				.align $04
  1867
  1868 1874			DATAORIGIN
  1869 1874 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1870
  1871 = 0006			VARINITSIZE	= *-DATAORIGIN
  1872 = 0048			VARDATASIZE	= 72
  1873
  1874 = 18BC			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1875
  1876 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1876 				DATA: $1874..$18BC
  1877
  1878 				; ------------------------------------------------------------
  1879
  1880 				.macro	STATICDATA
  1881 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1882 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1883 				.by  $C0 $03 $01 $02 $04 $08
  1884 				.endm
  1885
  1886 					end
