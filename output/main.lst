mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$111F
   102
   103 				; ------------------------------------------------------------
   104
   105 1120			START
   106 1120 BA				tsx
   107 1121 8E 16 2B			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 000B			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2BA6			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 1124 A2 F5			ldx #256-VLEN
   120 1126 A9 00			lda #$00
   121 1128 9D B1 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 112E A9 B1 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 1136 A2 00			ldx #$00
   129 1138 86 10			stx bp						; BP = 0
   130
   131 113A CA				dex						; X = 255
   132
   133 113B				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 113B			.local	MAIN						; PROCEDURE
   136
   137 113B 4C E7 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 113E			.local	SYSTEM						; UNIT
   142
   143 113E			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 113E B5 18			lda :STACKORIGIN,x
   150 1140 85 08			sta A
   151 1142 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 1144 85 09			sta A+1
   153 1146 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 1147 A0 00			ldy #0
   158 1149 B1 08 8D 37 2B		mva (edx),y Result
   159
   160 114E			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 114E E8				inx
   168 114F AD 37 2B 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2B37			RESULT	= DATAORIGIN+$000B
   182
   183 = 2B37			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 1154 60				rts						; ret
   187 				.endl
   188
   189 1155			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 1155 B5 18			lda :STACKORIGIN,x
   196 1157 85 0C			sta VALUE
   197 1159 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 115A B5 18			lda :STACKORIGIN,x
   204 115C 85 08			sta A
   205 115E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 1160 85 09			sta A+1
   207 1162 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 1163 A0 00			ldy #0
   212 1165 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1169			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1169 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 116A			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 116A B5 18			lda :STACKORIGIN,x
   238 116C 85 0C			sta VALUE
   239 116E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1170 85 0D			sta VALUE+1
   241 1172 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 1173 B5 18			lda :STACKORIGIN,x
   248 1175 85 08			sta A
   249 1177 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1179 85 09			sta A+1
   251 117B CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 117C A0 00			ldy #0
   256 117E A5 0C 91 08			mva value (edx),y
   257 1182 C8				iny
   258 1183 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1187			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1187 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1188			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1188 20 C4 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 118B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 118B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 118C			.local	MOVE_0057					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   302
   303 				; ---------------------  ASM Block 026  ---------------------
   304
   305 118C 20 6F 10			jsr @move
   306
   307
   308 				; ------------------------------------------------------------
   309
   310 = 0008			SOURCE	= edx
   311 = 000C			DEST	= ecx
   312 = 0004			COUNT	= eax
   313 118F			@exit
   314 					.ifdef @new
   315 					lda <@VarData
   316 					sta :ztmp
   317 					lda >@VarData
   318 					ldy #@VarDataSize-1
   319 					jmp @FreeMem
   320 					els
   321 118F 60				rts						; ret
   322 					eif
   323 				.endl
   324
   325 1190			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   326
   327 				; ---------------------  ASM Block 034  ---------------------
   328
   329 1190 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   330
   331 1196			@exit
   332 					.ifdef @new
   333 					lda <@VarData
   334 					sta :ztmp
   335 					lda >@VarData
   336 					ldy #@VarDataSize-1
   337 					jmp @FreeMem
   338 					els
   339 1196 60				rts						; ret
   340 					eif
   341 				.endl
   342
   343 1197			.local	PAUSE_006D					; PROCEDURE | ASSEMBLER | OVERLOAD
   344
   345 				; ---------------------  ASM Block 035  ---------------------
   346
   347
   348 1197 AD 38 2B		loop  lda n
   349 119A 0D 39 2B		  ora n+1
   350 119D F0 14		  beq stop
   351
   352 119F A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   353
   354 11A5 AD 38 2B D0 03 CE +   dew n
   355
   356 11B0 4C 97 11		  jmp loop
   357 11B3			stop
   358
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2B38			N	= DATAORIGIN+$000C
   363
   364 = 2B38			@VarData	= N
   365 = 0002			@VarDataSize	= 2
   366
   367 11B3			@exit
   368 					.ifdef @new
   369 					lda <@VarData
   370 					sta :ztmp
   371 					lda >@VarData
   372 					ldy #@VarDataSize-1
   373 					jmp @FreeMem
   374 					els
   375 11B3 60				rts						; ret
   376 					eif
   377 				.endl
   378
   379 11B4			.local	RANDOM_006E					; FUNCTION | ASSEMBLER | OVERLOAD
   380 11B4 8D 3A 2B			sta RANGE
   381
   382 				; ---------------------  ASM Block 039  ---------------------
   383
   384
   385 11B7 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   386 11BA 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   387 11BD 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   388 11C0 6D 1E FF		  adc ted_hcount    //Horizontal counter
   389 11C3 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   390 11C6 4D 1E FF		  eor ted_hcount    //Horizontal counter
   391 11C9 A8			  tay
   392
   393 11CA AD 3A 2B		  lda range
   394 11CD F0 08		  beq stop
   395
   396 11CF 85 0C		  sta ecx
   397 11D1 84 04		  sty eax
   398
   399 11D3 20 0C 11		  jsr imulCL
   400 11D6 A8			  tay
   401
   402 11D7 8C 3B 2B		stop  sty Result
   403
   404 11DA			@exit
   405
   406 				; ------------------------------------------------------------
   407
   408 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   409 				; as Pointer
   410
   411 11DA E8				inx
   412 11DB AD 3B 2B 95 18		mva RESULT :STACKORIGIN,x
   413
   414 					.ifdef @new
   415 					lda <@VarData
   416 					sta :ztmp
   417 					lda >@VarData
   418 					ldy #@VarDataSize-1
   419 					jmp @FreeMem
   420 					eif
   421
   422 				; ------------------------------------------------------------
   423
   424 = 2B3A			RANGE	= DATAORIGIN+$000E
   425 = 2B3B			RESULT	= DATAORIGIN+$000F
   426
   427 = 2B3A			@VarData	= RANGE
   428 = 0002			@VarDataSize	= 2
   429
   430 11E0 60				rts						; ret
   431 				.endl
   432
   433 				; ------------------------------------------------------------
   434
   435 = 0101			__PORTB_BANKS	= $0101
   436 = 0648			M_PI_2	= $0648
   437 = 0192			D_PI_2	= $0192
   438 = 0004			D_PI_180	= $04
   439 = 0000			MGTIA	= $00
   440 = 0080			MVBXE	= $80
   441 = 0000			VBXE_XDLADR	= $00
   442 = 0100			VBXE_BCBADR	= $0100
   443 = 1000			VBXE_MAPADR	= $1000
   444 = 1000			VBXE_CHBASE	= $1000
   445 = 5000			VBXE_OVRADR	= $5000
   446 = B000			VBXE_WINDOW	= $B000
   447 = 0000			IDLI	= $00
   448 = 0001			IVBL	= $01
   449 = 00FE			CH_DELCHR	= $FE
   450 = 009B			CH_ENTER	= $9B
   451 = 001B			CH_ESC	= $1B
   452 = 001C			CH_CURS_UP	= $1C
   453 = 001D			CH_CURS_DOWN	= $1D
   454 = 001E			CH_CURS_LEFT	= $1E
   455 = 001F			CH_CURS_RIGHT	= $1F
   456 = 007F			CH_TAB	= $7F
   457 = 009B			CH_EOL	= $9B
   458 = 007D			CH_CLR	= $7D
   459 = 00FD			CH_BELL	= $FD
   460 = 007E			CH_DEL	= $7E
   461 = 009C			CH_DELLINE	= $9C
   462 = 009D			CH_INSLINE	= $9D
   463 = 0000			COLOR_BLACK	= $00
   464 = 000E			COLOR_WHITE	= $0E
   465 = 0032			COLOR_RED	= $32
   466 = 0096			COLOR_CYAN	= $96
   467 = 0068			COLOR_VIOLET	= $68
   468 = 00C4			COLOR_GREEN	= $C4
   469 = 0074			COLOR_BLUE	= $74
   470 = 00EE			COLOR_YELLOW	= $EE
   471 = 0028			COLOR_ORANGE	= $28
   472 = 00E4			COLOR_BROWN	= $E4
   473 = 003C			COLOR_LIGHTRED	= $3C
   474 = 0004			COLOR_GRAY1	= $04
   475 = 0006			COLOR_GRAY2	= $06
   476 = 000A			COLOR_GRAY3	= $0A
   477 = 00CC			COLOR_LIGHTGREEN	= $CC
   478 = 007C			COLOR_LIGHTBLUE	= $7C
   479 = 0004			FMOPENREAD	= $04
   480 = 0008			FMOPENWRITE	= $08
   481 = 0009			FMOPENAPPEND	= $09
   482 = 000C			FMOPENREADWRITE	= $0C
   483 = 2B2C			SCREENWIDTH	= DATAORIGIN+$0000
   484 = 2B2E			SCREENHEIGHT	= DATAORIGIN+$0002
   485 = 2B30			DATESEPARATOR	= DATAORIGIN+$0004
   486 = D20A			RND	= $D20A
   487 = 02C0			adr.PALETTE	= $02C0
   488 11E1			.var PALETTE	= adr.PALETTE .word
   489 = D012			adr.HPALETTE	= $D012
   490 11E1			.var HPALETTE	= adr.HPALETTE .word
   491 = 2B31			FILEMODE	= DATAORIGIN+$0005
   492 = 2B32			GRAPHMODE	= DATAORIGIN+$0006
   493 = 2B33			IORESULT	= DATAORIGIN+$0007
   494 = 2B34			EOLN	= DATAORIGIN+$0008
   495 = 2B35			RNDSEED	= DATAORIGIN+$0009
   496
   497 = 11E1 C0 02		PALETTE
   497 = 11E3 12 D0		HPALETTE
   497 				.endl							; UNIT SYSTEM
   498
   499 11E5			.local	PUTCHAR_0073					; PROCEDURE | OVERLOAD
   500
   501 				; optimize OK (tools.inc), line = 5
   502
   503 11E5 AD 5F 2B			lda Y
   504 11E8 0A				asl @
   505 11E9 A8				tay
   506 11EA B9 0E 10			lda adr.MUL40,y
   507 11ED 18 6D 5E 2B			add X
   508 11F1 85 5E			sta T0W
   509 11F3 B9 0F 10			lda adr.MUL40+1,y
   510 11F6 69 0C			adc #$0C
   511 11F8 85 5F			sta T0W+1
   512 11FA A4 5F			ldy T0W+1
   513 11FC 84 11			sty :bp+1
   514 11FE A4 5E			ldy T0W
   515 1200 AD 60 2B			lda V
   516 1203 91 10			sta (:bp),y
   517
   518 				; ------------------------------------------------------------
   519
   520 = 2B5E			X	= DATAORIGIN+$0032
   521 = 2B5F			Y	= DATAORIGIN+$0033
   522 = 2B60			V	= DATAORIGIN+$0034
   523
   524 = 2B5E			@VarData	= X
   525 = 0003			@VarDataSize	= 3
   526
   527 1205			@exit
   528 					.ifdef @new
   529 					lda <@VarData
   530 					sta :ztmp
   531 					lda >@VarData
   532 					ldy #@VarDataSize-1
   533 					jmp @FreeMem
   534 					els
   535 1205 60				rts						; ret
   536 					eif
   537 				.endl
   538
   539 1206			.local	PUTCHAR_008F					; PROCEDURE | OVERLOAD
   540
   541 				; optimize OK (tools.inc), line = 12
   542
   543 1206 AD 62 2B			lda Y
   544 1209 0A				asl @
   545 120A A8				tay
   546 120B B9 0E 10			lda adr.MUL40,y
   547 120E 18 6D 61 2B			add X
   548 1212 85 5E			sta T0W
   549 1214 B9 0F 10			lda adr.MUL40+1,y
   550 1217 69 08			adc #$08
   551 1219 85 5F			sta T0W+1
   552
   553 				; optimize OK (tools.inc), line = 13
   554
   555 121B 85 11			sta :bp+1
   556 121D A4 5E			ldy T0W
   557 121F AD 64 2B			lda C
   558 1222 91 10			sta (:bp),y
   559 1224 A5 5F			lda T0W+1
   560 1226 18 69 04			add #$04
   561 1229 85 11			sta :bp+1
   562 122B AD 63 2B			lda V
   563 122E 91 10			sta (:bp),y
   564
   565 				; ------------------------------------------------------------
   566
   567 = 2B61			X	= DATAORIGIN+$0035
   568 = 2B62			Y	= DATAORIGIN+$0036
   569 = 2B63			V	= DATAORIGIN+$0037
   570 = 2B64			C	= DATAORIGIN+$0038
   571
   572 = 2B61			@VarData	= X
   573 = 0004			@VarDataSize	= 4
   574
   575 1230			@exit
   576 					.ifdef @new
   577 					lda <@VarData
   578 					sta :ztmp
   579 					lda >@VarData
   580 					ldy #@VarDataSize-1
   581 					jmp @FreeMem
   582 					els
   583 1230 60				rts						; ret
   584 					eif
   585 				.endl
   586
   587 1231			.local	SHOWSCORE					; PROCEDURE
   588
   589 				; optimize OK (tools.inc), line = 28
   590
   591 1231 AD 45 2B			lda PLAYER1.ISALIVE
   592 1234 F0 19			jeq l_00C4
   593 1236 AD 41 2B			lda PLAYER1.COLOUR
   594 1239 8D 64 2B			sta PUTCHAR_008F.C
   595 123C AD 44 2B			lda PLAYER1.SCORE
   596 123F 8D 63 2B			sta PUTCHAR_008F.V
   597 1242 A9 00			lda #$00
   598 1244 8D 62 2B			sta PUTCHAR_008F.Y
   599 1247 A9 1E			lda #$1E
   600 1249 8D 61 2B			sta PUTCHAR_008F.X
   601 124C 20 06 12			jsr PUTCHAR_008F
   602 124F			l_00C4
   603
   604 				; optimize OK (tools.inc), line = 29
   605
   606 124F AD 4D 2B			lda PLAYER2.ISALIVE
   607 1252 F0 19			jeq l_00DC
   608 1254 AD 49 2B			lda PLAYER2.COLOUR
   609 1257 8D 64 2B			sta PUTCHAR_008F.C
   610 125A AD 4C 2B			lda PLAYER2.SCORE
   611 125D 8D 63 2B			sta PUTCHAR_008F.V
   612 1260 A9 00			lda #$00
   613 1262 8D 62 2B			sta PUTCHAR_008F.Y
   614 1265 A9 20			lda #$20
   615 1267 8D 61 2B			sta PUTCHAR_008F.X
   616 126A 20 06 12			jsr PUTCHAR_008F
   617 126D			l_00DC
   618
   619 				; optimize OK (tools.inc), line = 30
   620
   621 126D AD 55 2B			lda PLAYER3.ISALIVE
   622 1270 F0 19			jeq l_00F4
   623 1272 AD 51 2B			lda PLAYER3.COLOUR
   624 1275 8D 64 2B			sta PUTCHAR_008F.C
   625 1278 AD 54 2B			lda PLAYER3.SCORE
   626 127B 8D 63 2B			sta PUTCHAR_008F.V
   627 127E A9 00			lda #$00
   628 1280 8D 62 2B			sta PUTCHAR_008F.Y
   629 1283 A9 22			lda #$22
   630 1285 8D 61 2B			sta PUTCHAR_008F.X
   631 1288 20 06 12			jsr PUTCHAR_008F
   632 128B			l_00F4
   633
   634 				; optimize OK (tools.inc), line = 31
   635
   636 128B AD 5D 2B			lda PLAYER4.ISALIVE
   637 128E F0 19			jeq l_010C
   638 1290 AD 59 2B			lda PLAYER4.COLOUR
   639 1293 8D 64 2B			sta PUTCHAR_008F.C
   640 1296 AD 5C 2B			lda PLAYER4.SCORE
   641 1299 8D 63 2B			sta PUTCHAR_008F.V
   642 129C A9 00			lda #$00
   643 129E 8D 62 2B			sta PUTCHAR_008F.Y
   644 12A1 A9 24			lda #$24
   645 12A3 8D 61 2B			sta PUTCHAR_008F.X
   646 12A6 20 06 12			jsr PUTCHAR_008F
   647 12A9			l_010C
   648 12A9			@exit
   649 					.ifdef @new
   650 					lda <@VarData
   651 					sta :ztmp
   652 					lda >@VarData
   653 					ldy #@VarDataSize-1
   654 					jmp @FreeMem
   655 					els
   656 12A9 60				rts						; ret
   657 					eif
   658 				.endl
   659
   660 12AA			.local	UPDATESCORE					; PROCEDURE
   661
   662 				; optimize OK (tools.inc), line = 38
   663
   664 12AA AD 45 2B			lda PLAYER1.ISALIVE
   665 12AD F0 03			jeq l_0128
   666 12AF EE 44 2B			inc PLAYER1.SCORE
   667 12B2			l_0128
   668
   669 				; optimize OK (tools.inc), line = 39
   670
   671 12B2 AD 4D 2B			lda PLAYER2.ISALIVE
   672 12B5 F0 03			jeq l_013B
   673 12B7 EE 4C 2B			inc PLAYER2.SCORE
   674 12BA			l_013B
   675
   676 				; optimize OK (tools.inc), line = 40
   677
   678 12BA AD 55 2B			lda PLAYER3.ISALIVE
   679 12BD F0 03			jeq l_014E
   680 12BF EE 54 2B			inc PLAYER3.SCORE
   681 12C2			l_014E
   682
   683 				; optimize OK (tools.inc), line = 41
   684
   685 12C2 AD 5D 2B			lda PLAYER4.ISALIVE
   686 12C5 F0 03			jeq l_0161
   687 12C7 EE 5C 2B			inc PLAYER4.SCORE
   688 12CA			l_0161
   689 12CA			@exit
   690 					.ifdef @new
   691 					lda <@VarData
   692 					sta :ztmp
   693 					lda >@VarData
   694 					ldy #@VarDataSize-1
   695 					jmp @FreeMem
   696 					els
   697 12CA 60				rts						; ret
   698 					eif
   699 				.endl
   700
   701 12CB			.local	CHECKAVAILDIR					; PROCEDURE
   702
   703 				; optimize OK (tools.inc), line = 48
   704
   705 12CB A9 00			lda #$00
   706 12CD 85 5C			sta AVAILDIR
   707
   708 				; optimize OK (tools.inc), line = 49
   709
   710 12CF AC 1D 2B 84 12 AC + 	mwy PLY :bp2
   711 12D9 A0 01			ldy #PLY.Y-DATAORIGIN
   712 12DB B1 12			lda (:bp2),y
   713 12DD 0A				asl @
   714 12DE A8				tay
   715 12DF A9 00			lda #$00
   716 12E1 18 79 0E 10			add adr.MUL40,y
   717 12E5 85 21			sta :STACKORIGIN+9
   718 12E7 A9 0C			lda #$0C
   719 12E9 79 0F 10			adc adr.MUL40+1,y
   720 12EC 85 31			sta :STACKORIGIN+STACKWIDTH+9
   721 12EE A0 00			ldy #PLY.X-DATAORIGIN
   722 12F0 A5 21			lda :STACKORIGIN+9
   723 12F2 18 71 12			add (:bp2),y
   724 12F5 85 5E			sta T0W
   725 12F7 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   726 12F9 69 00			adc #$00
   727 12FB 85 5F			sta T0W+1
   728
   729 				; optimize OK (tools.inc), line = 51
   730
   731 12FD A5 5E			lda T0W
   732 12FF 38 E9 28			sub #$28
   733 1302 85 21			sta :STACKORIGIN+9
   734 1304 A5 5F			lda T0W+1
   735 1306 E9 00			sbc #$00
   736 1308 85 11			sta :bp+1
   737 130A A4 21			ldy :STACKORIGIN+9
   738 130C B1 10			lda (:bp),y
   739 130E C9 20			cmp #$20
   740 1310 D0 06			jne l_0198
   741 1312 A5 5C			lda AVAILDIR
   742 1314 09 01			ora #$01
   743 1316 85 5C			sta AVAILDIR
   744 1318			l_0198
   745
   746 				; optimize OK (tools.inc), line = 52
   747
   748 1318 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   749 1320 A0 28			ldy #$28
   750 1322 B1 12			lda (:bp2),y
   751 1324 C9 20			cmp #$20
   752 1326 D0 06			jne l_01BB
   753 1328 A5 5C			lda AVAILDIR
   754 132A 09 02			ora #$02
   755 132C 85 5C			sta AVAILDIR
   756 132E			l_01BB
   757
   758 				; optimize OK (tools.inc), line = 53
   759
   760 132E A5 5E			lda T0W
   761 1330 38 E9 01			sub #$01
   762 1333 85 21			sta :STACKORIGIN+9
   763 1335 A5 5F			lda T0W+1
   764 1337 E9 00			sbc #$00
   765 1339 85 11			sta :bp+1
   766 133B A4 21			ldy :STACKORIGIN+9
   767 133D B1 10			lda (:bp),y
   768 133F C9 20			cmp #$20
   769 1341 D0 06			jne l_01DE
   770 1343 A5 5C			lda AVAILDIR
   771 1345 09 04			ora #$04
   772 1347 85 5C			sta AVAILDIR
   773 1349			l_01DE
   774
   775 				; optimize OK (tools.inc), line = 54
   776
   777 1349 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   778 1351 A0 01			ldy #$01
   779 1353 B1 12			lda (:bp2),y
   780 1355 C9 20			cmp #$20
   781 1357 D0 06			jne l_0201
   782 1359 A5 5C			lda AVAILDIR
   783 135B 09 08			ora #$08
   784 135D 85 5C			sta AVAILDIR
   785 135F			l_0201
   786 135F			@exit
   787 					.ifdef @new
   788 					lda <@VarData
   789 					sta :ztmp
   790 					lda >@VarData
   791 					ldy #@VarDataSize-1
   792 					jmp @FreeMem
   793 					els
   794 135F 60				rts						; ret
   795 					eif
   796 				.endl
   797
   798 1360			.local	ANIMATEOBSTACLES				; PROCEDURE
   799
   800 				; optimize FAIL (0, tools.inc), line = 63
   801
   802 1360 EE 65 2B			inc COUNTER
   803
   804 				; optimize OK (tools.inc), line = 64
   805
   806 1363 AD 65 2B			lda COUNTER
   807 1366 29 01			and #$01
   808 1368 F0 08			jeq l_022C
   809 136A A9 54			lda #$54
   810 136C 8D 66 2B			sta OBST
   811 136F 4C 77 13			jmp l_023A
   812 1372			l_022C
   813 1372 A9 55			lda #$55
   814 1374 8D 66 2B			sta OBST
   815 1377			l_023A
   816
   817 				; optimize OK (tools.inc), line = 65
   818
   819 1377 A9 07			lda #$07
   820 1379 85 59			sta I0B
   821
   822 137B			l_0247
   823 				; --- ForToDoCondition
   824 137B A5 59			lda I0B
   825 137D 0A				asl @
   826 137E A8				tay
   827 137F B9 60 00			lda adr.OBSTACLES,y
   828 1382 85 21			sta :STACKORIGIN+9
   829 1384 B9 61 00			lda adr.OBSTACLES+1,y
   830 1387 85 11			sta :bp+1
   831 1389 A4 21			ldy :STACKORIGIN+9
   832 138B AD 66 2B			lda OBST
   833 138E 91 10			sta (:bp),y
   834 1390 C6 59			dec I0B
   835 1392 10 E7			jpl l_0247
   836 1394			l_0255
   837
   838 				; ------------------------------------------------------------
   839
   840 = 2B65			COUNTER	= DATAORIGIN+$0039
   841 = 2B66			OBST	= DATAORIGIN+$003A
   842 = 0000			@FORTMP_0244	= $00
   843
   844 = 2B65			@VarData	= COUNTER
   845 = 0002			@VarDataSize	= 2
   846
   847 1394			@exit
   848 					.ifdef @new
   849 					lda <@VarData
   850 					sta :ztmp
   851 					lda >@VarData
   852 					ldy #@VarDataSize-1
   853 					jmp @FreeMem
   854 					els
   855 1394 60				rts						; ret
   856 					eif
   857 				.endl
   858
   859 1395			.local	CALCOBSTACLEADDR				; FUNCTION
   860
   861 				; optimize OK (tools.inc), line = 72
   862
   863 1395 AD 68 2B			lda Y
   864 1398 0A				asl @
   865 1399 A8				tay
   866 139A AD 67 2B			lda X
   867 139D 18 79 0E 10			add adr.MUL40,y
   868 13A1 8D 69 2B			sta RESULT
   869 13A4 A9 0C			lda #$0C
   870 13A6 79 0F 10			adc adr.MUL40+1,y
   871 13A9 8D 6A 2B			sta RESULT+1
   872 13AC			@exit
   873
   874 				; ------------------------------------------------------------
   875
   876 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   877 				; as Pointer
   878
   879 13AC E8				inx
   880 13AD AD 69 2B 95 18		mva RESULT :STACKORIGIN,x
   881 13B2 AD 6A 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   882
   883 					.ifdef @new
   884 					lda <@VarData
   885 					sta :ztmp
   886 					lda >@VarData
   887 					ldy #@VarDataSize-1
   888 					jmp @FreeMem
   889 					eif
   890
   891 				; ------------------------------------------------------------
   892
   893 = 2B67			X	= DATAORIGIN+$003B
   894 = 2B68			Y	= DATAORIGIN+$003C
   895 = 2B69			RESULT	= DATAORIGIN+$003D
   896
   897 = 2B67			@VarData	= X
   898 = 0004			@VarDataSize	= 4
   899
   900 13B7 60				rts						; ret
   901 				.endl
   902
   903 13B8			.local	SAVEOBSTACLES					; PROCEDURE
   904
   905 				; optimize OK (tools.inc), line = 79
   906
   907 13B8 A9 07			lda #$07
   908 13BA 85 59			sta I0B
   909
   910 13BC			l_0288
   911 				; --- ForToDoCondition
   912
   913 				; optimize OK (tools.inc), line = 80
   914
   915 13BC A5 59			lda I0B
   916 13BE 0A				asl @
   917 13BF A8				tay
   918 13C0 B9 61 00			lda adr.OBSTACLES+1,y
   919 13C3 C9 00			cmp #$00
   920 13C5 D0 05			bne @+
   921 13C7 B9 60 00			lda adr.OBSTACLES,y
   922 13CA C9 5E			cmp #$5E
   923 13CC			@
   924 13CC F0 29			jeq l_02AA
   925
   926 				; optimize OK (tools.inc), line = 81
   927
   928 13CE B9 60 00			lda adr.OBSTACLES,y
   929 13D1 85 21			sta :STACKORIGIN+9
   930 13D3 B9 61 00			lda adr.OBSTACLES+1,y
   931 13D6 85 11			sta :bp+1
   932 13D8 A4 21			ldy :STACKORIGIN+9
   933 13DA A9 54			lda #$54
   934 13DC 91 10			sta (:bp),y
   935
   936 				; optimize OK (tools.inc), line = 82
   937
   938 13DE A5 59			lda I0B
   939 13E0 0A				asl @
   940 13E1 A8				tay
   941 13E2 B9 60 00			lda adr.OBSTACLES,y
   942 13E5 38 E9 00			sub #$00
   943 13E8 85 21			sta :STACKORIGIN+9
   944 13EA B9 61 00			lda adr.OBSTACLES+1,y
   945 13ED E9 04			sbc #$04
   946 13EF 85 11			sta :bp+1
   947 13F1 A4 21			ldy :STACKORIGIN+9
   948 13F3 A9 65			lda #$65
   949 13F5 91 10			sta (:bp),y
   950 13F7			l_02AA
   951
   952 				; --- ForToDoEpilog
   953 13F7 C6 59			dec I0B
   954 13F9 10 C1			jpl l_0288
   955 13FB			l_0296
   956
   957 				; ------------------------------------------------------------
   958
   959 = 0000			@FORTMP_0285	= $00
   960 13FB			@exit
   961 					.ifdef @new
   962 					lda <@VarData
   963 					sta :ztmp
   964 					lda >@VarData
   965 					ldy #@VarDataSize-1
   966 					jmp @FreeMem
   967 					els
   968 13FB 60				rts						; ret
   969 					eif
   970 				.endl
   971
   972 13FC			.local	DRAWPLAYER					; PROCEDURE
   973
   974 				; optimize OK (tools.inc), line = 91
   975
   976 13FC AC 1D 2B 84 12 AC + 	mwy PLY :bp2
   977 1406 A0 04			ldy #PLY.DIR-DATAORIGIN
   978 1408 B1 12			lda (:bp2),y
   979 140A C5 5B			cmp NEWDIR
   980 140C D0 14			jne l_02DC
   981
   982 				; optimize OK (tools.inc), line = 92
   983
   984 140E A5 5B			lda NEWDIR
   985 1410 29 0C			and #$0C
   986 1412 F0 07			jeq l_02F3
   987 1414 A9 40			lda #$40
   988 1416 85 58			sta T0B
   989 1418 4C 1F 14			jmp l_0301
   990 141B			l_02F3
   991 141B A9 42			lda #$42
   992 141D 85 58			sta T0B
   993 141F			l_0301
   994 141F 4C 92 14			jmp l_030E
   995 1422			l_02DC
   996
   997 				; optimize OK (tools.inc), line = 94
   998
   999 1422 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1000 142C A0 04			ldy #PLY.DIR-DATAORIGIN
  1001 142E B1 12			lda (:bp2),y
  1002 1430 29 0A			and #$0A
  1003 1432 F0 0A			jeq l_0334
  1004 1434 A5 5B			lda NEWDIR
  1005 1436 29 05			and #$05
  1006 1438 F0 04			jeq l_0334
  1007 143A A9 7D			lda #$7D
  1008 143C 85 58			sta T0B
  1009 143E			l_0334
  1010
  1011 				; optimize OK (tools.inc), line = 95
  1012
  1013 143E AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1014 1448 A0 04			ldy #PLY.DIR-DATAORIGIN
  1015 144A B1 12			lda (:bp2),y
  1016 144C 29 09			and #$09
  1017 144E F0 0A			jeq l_0361
  1018 1450 A5 5B			lda NEWDIR
  1019 1452 29 06			and #$06
  1020 1454 F0 04			jeq l_0361
  1021 1456 A9 6E			lda #$6E
  1022 1458 85 58			sta T0B
  1023 145A			l_0361
  1024
  1025 				; optimize OK (tools.inc), line = 96
  1026
  1027 145A AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1028 1464 A0 04			ldy #PLY.DIR-DATAORIGIN
  1029 1466 B1 12			lda (:bp2),y
  1030 1468 29 06			and #$06
  1031 146A F0 0A			jeq l_038E
  1032 146C A5 5B			lda NEWDIR
  1033 146E 29 09			and #$09
  1034 1470 F0 04			jeq l_038E
  1035 1472 A9 6D			lda #$6D
  1036 1474 85 58			sta T0B
  1037 1476			l_038E
  1038
  1039 				; optimize OK (tools.inc), line = 97
  1040
  1041 1476 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1042 1480 A0 04			ldy #PLY.DIR-DATAORIGIN
  1043 1482 B1 12			lda (:bp2),y
  1044 1484 29 05			and #$05
  1045 1486 F0 0A			jeq l_03BB
  1046 1488 A5 5B			lda NEWDIR
  1047 148A 29 0A			and #$0A
  1048 148C F0 04			jeq l_03BB
  1049 148E A9 70			lda #$70
  1050 1490 85 58			sta T0B
  1051 1492			l_03BB
  1052 1492			l_030E
  1053
  1054 				; optimize OK (tools.inc), line = 99
  1055
  1056 1492 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1057 149C A0 00			ldy #PLY.X-DATAORIGIN
  1058 149E B1 12			lda (:bp2),y
  1059 14A0 8D 5E 2B			sta PUTCHAR_0073.X
  1060 14A3 A0 01			ldy #PLY.Y-DATAORIGIN
  1061 14A5 B1 12			lda (:bp2),y
  1062 14A7 8D 5F 2B			sta PUTCHAR_0073.Y
  1063 14AA A5 58			lda T0B
  1064 14AC 8D 60 2B			sta PUTCHAR_0073.V
  1065 14AF 20 E5 11			jsr PUTCHAR_0073
  1066
  1067 				; optimize OK (tools.inc), line = 101
  1068
  1069 14B2 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1070 14BC A0 04			ldy #PLY.DIR-DATAORIGIN
  1071 14BE A5 5B			lda NEWDIR
  1072 14C0 91 12			sta (:bp2),y
  1073
  1074 				; optimize OK (tools.inc), line = 103
  1075
  1076 14C2 A5 5B			lda NEWDIR
  1077 14C4 8D 6B 2B			sta @CASETMP_0003
  1078 14C7 C9 01			cmp #$01
  1079 14C9 D0 1A			jne l_03DD
  1080 14CB			@
  1081
  1082 				; optimize OK (tools.inc), line = 104
  1083
  1084 14CB AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1085 14D5 A0 01			ldy #PLY.Y-DATAORIGIN
  1086 14D7 B1 12			lda (:bp2),y
  1087 14D9 38 E9 01			sub #$01
  1088 14DC 91 12			sta (:bp2),y
  1089 14DE A9 50			lda #$50
  1090 14E0 85 58			sta T0B
  1091
  1092 14E2 4C 3C 15			jmp a_0003
  1093 14E5			l_03DD
  1094 14E5 C9 02			cmp #$02
  1095 14E7 D0 1A			jne l_03EB
  1096 14E9			@
  1097
  1098 				; optimize OK (tools.inc), line = 105
  1099
  1100 14E9 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1101 14F3 A0 01			ldy #PLY.Y-DATAORIGIN
  1102 14F5 B1 12			lda (:bp2),y
  1103 14F7 18 69 01			add #$01
  1104 14FA 91 12			sta (:bp2),y
  1105 14FC A9 53			lda #$53
  1106 14FE 85 58			sta T0B
  1107
  1108 1500 4C 3C 15			jmp a_0003
  1109 1503			l_03EB
  1110 1503 C9 04			cmp #$04
  1111 1505 D0 1A			jne l_03F9
  1112 1507			@
  1113
  1114 				; optimize OK (tools.inc), line = 106
  1115
  1116 1507 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1117 1511 A0 00			ldy #PLY.X-DATAORIGIN
  1118 1513 B1 12			lda (:bp2),y
  1119 1515 38 E9 01			sub #$01
  1120 1518 91 12			sta (:bp2),y
  1121 151A A9 51			lda #$51
  1122 151C 85 58			sta T0B
  1123
  1124 151E 4C 3C 15			jmp a_0003
  1125 1521			l_03F9
  1126 1521 C9 08			cmp #$08
  1127 1523 D0 17			jne l_0407
  1128 1525			@
  1129
  1130 				; optimize OK (tools.inc), line = 107
  1131
  1132 1525 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1133 152F A0 00			ldy #PLY.X-DATAORIGIN
  1134 1531 B1 12			lda (:bp2),y
  1135 1533 18 69 01			add #$01
  1136 1536 91 12			sta (:bp2),y
  1137 1538 A9 52			lda #$52
  1138 153A 85 58			sta T0B
  1139
  1140 153C			l_0407
  1141 153C			a_0003
  1142
  1143 				; optimize OK (tools.inc), line = 110
  1144
  1145 153C AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1146 1546 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1147 1548 A5 58			lda T0B
  1148 154A 91 12			sta (:bp2),y
  1149
  1150 				; optimize OK (tools.inc), line = 112
  1151
  1152 154C A0 00			ldy #PLY.X-DATAORIGIN
  1153 154E B1 12			lda (:bp2),y
  1154 1550 8D 61 2B			sta PUTCHAR_008F.X
  1155 1553 A0 01			ldy #PLY.Y-DATAORIGIN
  1156 1555 B1 12			lda (:bp2),y
  1157 1557 8D 62 2B			sta PUTCHAR_008F.Y
  1158 155A A0 02			ldy #PLY.HEAD-DATAORIGIN
  1159 155C B1 12			lda (:bp2),y
  1160 155E 8D 63 2B			sta PUTCHAR_008F.V
  1161 1561 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1162 1563 B1 12			lda (:bp2),y
  1163 1565 8D 64 2B			sta PUTCHAR_008F.C
  1164 1568 20 06 12			jsr PUTCHAR_008F
  1165
  1166 				; ------------------------------------------------------------
  1167
  1168 = 2B6B			@CASETMP_0003	= DATAORIGIN+$003F
  1169
  1170 = 2B6B			@VarData	= @CASETMP_0003
  1171 = 0001			@VarDataSize	= 1
  1172
  1173 156B			@exit
  1174 					.ifdef @new
  1175 					lda <@VarData
  1176 					sta :ztmp
  1177 					lda >@VarData
  1178 					ldy #@VarDataSize-1
  1179 					jmp @FreeMem
  1180 					els
  1181 156B 60				rts						; ret
  1182 					eif
  1183 				.endl
  1184
  1185 156C			.local	PLAYERBUSTED					; PROCEDURE
  1186
  1187 				; optimize OK (tools.inc), line = 119
  1188
  1189 156C AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1190 1576 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1191 1578 A9 00			lda #$00
  1192 157A 91 12			sta (:bp2),y
  1193 157C C6 5A			dec ALIVE
  1194
  1195 				; optimize OK (tools.inc), line = 120
  1196
  1197 157E A0 00			ldy #PLY.X-DATAORIGIN
  1198 1580 B1 12			lda (:bp2),y
  1199 1582 8D 61 2B			sta PUTCHAR_008F.X
  1200 1585 A0 01			ldy #PLY.Y-DATAORIGIN
  1201 1587 B1 12			lda (:bp2),y
  1202 1589 8D 62 2B			sta PUTCHAR_008F.Y
  1203 158C A0 02			ldy #PLY.HEAD-DATAORIGIN
  1204 158E B1 12			lda (:bp2),y
  1205 1590 8D 63 2B			sta PUTCHAR_008F.V
  1206 1593 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1207 1595 B1 12			lda (:bp2),y
  1208 1597 18 69 80			add #$80
  1209 159A 8D 64 2B			sta PUTCHAR_008F.C
  1210 159D 20 06 12			jsr PUTCHAR_008F
  1211 15A0			@exit
  1212 					.ifdef @new
  1213 					lda <@VarData
  1214 					sta :ztmp
  1215 					lda >@VarData
  1216 					ldy #@VarDataSize-1
  1217 					jmp @FreeMem
  1218 					els
  1219 15A0 60				rts						; ret
  1220 					eif
  1221 				.endl
  1222
  1223 15A1			.local	CHECKJOYSTATUS					; PROCEDURE
  1224
  1225 				; optimize OK (tools.inc), line = 127
  1226
  1227 15A1 A9 02			lda #$02
  1228 15A3 8D 08 FF			sta JOY
  1229 15A6 A9 FF			lda #$FF
  1230 15A8 8D 30 FD			sta KEYSCAN
  1231
  1232 				; optimize OK (tools.inc), line = 128
  1233
  1234 15AB AD 08 FF			lda JOY
  1235 15AE 49 FF			eor #$FF
  1236 15B0 85 5D			sta JOYSTATUS
  1237 15B2			@exit
  1238 					.ifdef @new
  1239 					lda <@VarData
  1240 					sta :ztmp
  1241 					lda >@VarData
  1242 					ldy #@VarDataSize-1
  1243 					jmp @FreeMem
  1244 					els
  1245 15B2 60				rts						; ret
  1246 					eif
  1247 				.endl
  1248
  1249 15B3			.local	SETPLAYER					; PROCEDURE
  1250
  1251 				; optimize OK (tools.inc), line = 135
  1252
  1253 15B3 AD 6C 2B			lda P
  1254 15B6 8D 1D 2B			sta PLY
  1255 15B9 AD 6D 2B			lda P+1
  1256 15BC 8D 1E 2B			sta PLY+1
  1257
  1258 				; optimize OK (tools.inc), line = 137
  1259
  1260 15BF AD 70 2B			lda DIR
  1261 15C2 8D 74 2B			sta @CASETMP_0004
  1262 15C5 C9 01			cmp #$01
  1263 15C7 D0 07			jne l_046E
  1264 15C9			@
  1265
  1266 				; optimize OK (tools.inc), line = 138
  1267
  1268 15C9 A9 50			lda #$50
  1269 15CB 85 58			sta T0B
  1270
  1271 15CD 4C EE 15			jmp a_0004
  1272 15D0			l_046E
  1273 15D0 C9 02			cmp #$02
  1274 15D2 D0 07			jne l_047B
  1275 15D4			@
  1276
  1277 				; optimize OK (tools.inc), line = 139
  1278
  1279 15D4 A9 53			lda #$53
  1280 15D6 85 58			sta T0B
  1281
  1282 15D8 4C EE 15			jmp a_0004
  1283 15DB			l_047B
  1284 15DB C9 04			cmp #$04
  1285 15DD D0 07			jne l_0488
  1286 15DF			@
  1287
  1288 				; optimize OK (tools.inc), line = 140
  1289
  1290 15DF A9 51			lda #$51
  1291 15E1 85 58			sta T0B
  1292
  1293 15E3 4C EE 15			jmp a_0004
  1294 15E6			l_0488
  1295 15E6 C9 08			cmp #$08
  1296 15E8 D0 04			jne l_0495
  1297 15EA			@
  1298
  1299 				; optimize OK (tools.inc), line = 141
  1300
  1301 15EA A9 52			lda #$52
  1302 15EC 85 58			sta T0B
  1303
  1304 15EE			l_0495
  1305 15EE			a_0004
  1306
  1307 				; optimize OK (tools.inc), line = 144
  1308
  1309 15EE AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1310 15F8 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1311 15FA AD 71 2B			lda BRAIN
  1312 15FD 91 12			sta (:bp2),y
  1313 15FF A0 00			ldy #PLY.X-DATAORIGIN
  1314 1601 AD 6E 2B			lda X
  1315 1604 91 12			sta (:bp2),y
  1316 1606 A0 01			ldy #PLY.Y-DATAORIGIN
  1317 1608 AD 6F 2B			lda Y
  1318 160B 91 12			sta (:bp2),y
  1319 160D A0 04			ldy #PLY.DIR-DATAORIGIN
  1320 160F AD 70 2B			lda DIR
  1321 1612 91 12			sta (:bp2),y
  1322
  1323 				; optimize OK (tools.inc), line = 145
  1324
  1325 1614 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1326 1616 A5 58			lda T0B
  1327 1618 91 12			sta (:bp2),y
  1328 161A A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1329 161C AD 72 2B			lda COLOUR
  1330 161F 91 12			sta (:bp2),y
  1331 1621 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1332 1623 AD 73 2B			lda ISALIVE
  1333 1626 91 12			sta (:bp2),y
  1334
  1335 				; optimize OK (tools.inc), line = 146
  1336
  1337 1628 AD 73 2B			lda ISALIVE
  1338 162B F0 1C			jeq l_04D7
  1339
  1340 				; optimize FAIL (0, tools.inc), line = 147
  1341
  1342 162D E6 5A			inc ALIVE
  1343 162F AD 72 2B			lda COLOUR
  1344 1632 8D 64 2B			sta PUTCHAR_008F.C
  1345 1635 A5 58			lda T0B
  1346 1637 8D 63 2B			sta PUTCHAR_008F.V
  1347 163A AD 6F 2B			lda Y
  1348 163D 8D 62 2B			sta PUTCHAR_008F.Y
  1349 1640 AD 6E 2B			lda X
  1350 1643 8D 61 2B			sta PUTCHAR_008F.X
  1351 1646 20 06 12			jsr PUTCHAR_008F
  1352 1649			l_04D7
  1353
  1354 				; ------------------------------------------------------------
  1355
  1356 = 2B6C			P	= DATAORIGIN+$0040
  1357 = 2B6E			X	= DATAORIGIN+$0042
  1358 = 2B6F			Y	= DATAORIGIN+$0043
  1359 = 2B70			DIR	= DATAORIGIN+$0044
  1360 = 2B71			BRAIN	= DATAORIGIN+$0045
  1361 = 2B72			COLOUR	= DATAORIGIN+$0046
  1362 = 2B73			ISALIVE	= DATAORIGIN+$0047
  1363 = 2B74			@CASETMP_0004	= DATAORIGIN+$0048
  1364
  1365 = 2B6C			@VarData	= P
  1366 = 0009			@VarDataSize	= 9
  1367
  1368 1649			@exit
  1369 					.ifdef @new
  1370 					lda <@VarData
  1371 					sta :ztmp
  1372 					lda >@VarData
  1373 					ldy #@VarDataSize-1
  1374 					jmp @FreeMem
  1375 					els
  1376 1649 60				rts						; ret
  1377 					eif
  1378 				.endl
  1379
  1380 164A			.local	NEXTLEVEL					; PROCEDURE
  1381
  1382 				; optimize FAIL (0, tools.inc), line = 155
  1383
  1384 164A EE 3C 2B			inc LEVEL
  1385 164D AD 3C 2B			lda LEVEL
  1386 1650 C9 08			cmp #$08
  1387 1652 D0 05			jne l_0505
  1388 1654 A9 05			lda #$05
  1389 1656 8D 3C 2B			sta LEVEL
  1390 1659			l_0505
  1391 1659			@exit
  1392 					.ifdef @new
  1393 					lda <@VarData
  1394 					sta :ztmp
  1395 					lda >@VarData
  1396 					ldy #@VarDataSize-1
  1397 					jmp @FreeMem
  1398 					els
  1399 1659 60				rts						; ret
  1400 					eif
  1401 				.endl
  1402
  1403 165A			.local	STARTSCREEN					; PROCEDURE
  1404
  1405 				; optimize OK (tools.inc), line = 162
  1406
  1407 165A AD 41 2B			lda PLAYER1.COLOUR
  1408 165D 18 69 80			add #$80
  1409 1660 8D 64 2B			sta PUTCHAR_008F.C
  1410 1663 AD 40 2B			lda PLAYER1.HEAD
  1411 1666 8D 63 2B			sta PUTCHAR_008F.V
  1412 1669 AD 3F 2B			lda PLAYER1.Y
  1413 166C 8D 62 2B			sta PUTCHAR_008F.Y
  1414 166F AD 3E 2B			lda PLAYER1.X
  1415 1672 8D 61 2B			sta PUTCHAR_008F.X
  1416 1675 20 06 12			jsr PUTCHAR_008F
  1417
  1418 				; --- RepeatUntilProlog
  1419 1678			l_0522
  1420
  1421 				; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 163
  1422
  1423 1678 20 A1 15			jsr CHECKJOYSTATUS
  1424 167B A5 5D			lda JOYSTATUS
  1425 167D C9 40			cmp #$40
  1426 167F D0 F7			jne l_0522
  1427
  1428 				; optimize OK (tools.inc), line = 164
  1429
  1430 1681 AD 41 2B			lda PLAYER1.COLOUR
  1431 1684 8D 64 2B			sta PUTCHAR_008F.C
  1432 1687 AD 40 2B			lda PLAYER1.HEAD
  1433 168A 8D 63 2B			sta PUTCHAR_008F.V
  1434 168D AD 3F 2B			lda PLAYER1.Y
  1435 1690 8D 62 2B			sta PUTCHAR_008F.Y
  1436 1693 AD 3E 2B			lda PLAYER1.X
  1437 1696 8D 61 2B			sta PUTCHAR_008F.X
  1438 1699 20 06 12			jsr PUTCHAR_008F
  1439 169C			@exit
  1440 					.ifdef @new
  1441 					lda <@VarData
  1442 					sta :ztmp
  1443 					lda >@VarData
  1444 					ldy #@VarDataSize-1
  1445 					jmp @FreeMem
  1446 					els
  1447 169C 60				rts						; ret
  1448 					eif
  1449 				.endl
  1450
  1451 169D			.local	ISGAMEOVER					; FUNCTION
  1452
  1453 				; optimize OK (tools.inc), line = 171
  1454
  1455 169D AD 44 2B			lda PLAYER1.SCORE
  1456 16A0 C9 39			cmp #$39
  1457 16A2 D0 05			jne l_0553
  1458 16A4 A9 01			lda #$01
  1459 16A6 8D 3D 2B			sta GAMEOVER
  1460 16A9			l_0553
  1461
  1462 				; optimize OK (tools.inc), line = 172
  1463
  1464 16A9 AD 4C 2B			lda PLAYER2.SCORE
  1465 16AC C9 39			cmp #$39
  1466 16AE D0 05			jne l_056C
  1467 16B0 A9 01			lda #$01
  1468 16B2 8D 3D 2B			sta GAMEOVER
  1469 16B5			l_056C
  1470
  1471 				; optimize OK (tools.inc), line = 173
  1472
  1473 16B5 AD 54 2B			lda PLAYER3.SCORE
  1474 16B8 C9 39			cmp #$39
  1475 16BA D0 05			jne l_0585
  1476 16BC A9 01			lda #$01
  1477 16BE 8D 3D 2B			sta GAMEOVER
  1478 16C1			l_0585
  1479
  1480 				; optimize OK (tools.inc), line = 174
  1481
  1482 16C1 AD 5C 2B			lda PLAYER4.SCORE
  1483 16C4 C9 39			cmp #$39
  1484 16C6 D0 05			jne l_059E
  1485 16C8 A9 01			lda #$01
  1486 16CA 8D 3D 2B			sta GAMEOVER
  1487 16CD			l_059E
  1488
  1489 				; optimize OK (tools.inc), line = 175
  1490
  1491 16CD AD 3D 2B			lda GAMEOVER
  1492 16D0 8D 75 2B			sta RESULT
  1493 16D3			@exit
  1494
  1495 				; ------------------------------------------------------------
  1496
  1497 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1498 				; as Pointer
  1499
  1500 16D3 E8				inx
  1501 16D4 AD 75 2B 95 18		mva RESULT :STACKORIGIN,x
  1502
  1503 					.ifdef @new
  1504 					lda <@VarData
  1505 					sta :ztmp
  1506 					lda >@VarData
  1507 					ldy #@VarDataSize-1
  1508 					jmp @FreeMem
  1509 					eif
  1510
  1511 				; ------------------------------------------------------------
  1512
  1513 = 2B75			RESULT	= DATAORIGIN+$0049
  1514
  1515 = 2B75			@VarData	= RESULT
  1516 = 0001			@VarDataSize	= 1
  1517
  1518 16D9 60				rts						; ret
  1519 				.endl
  1520
  1521 16DA			.local	ISONELEFT					; FUNCTION
  1522
  1523 				; optimize OK (tools.inc), line = 182
  1524
  1525 16DA A0 01			ldy #1
  1526 16DC A5 5A			lda ALIVE
  1527 16DE F0 01			beq @+
  1528 16E0 88				dey
  1529 16E1			@
  1530 16E1 84 21			sty :STACKORIGIN+9
  1531 16E3 A0 01			ldy #1
  1532 16E5 A5 5A			lda ALIVE
  1533 16E7 C9 FF			cmp #$FF
  1534 16E9 F0 01			beq @+
  1535 16EB 88				dey
  1536 16EC			@
  1537 16EC 98				tya
  1538 16ED 05 21			ora :STACKORIGIN+9
  1539 16EF 8D 76 2B			sta RESULT
  1540 16F2			@exit
  1541
  1542 				; ------------------------------------------------------------
  1543
  1544 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1545 				; as Pointer
  1546
  1547 16F2 E8				inx
  1548 16F3 AD 76 2B 95 18		mva RESULT :STACKORIGIN,x
  1549
  1550 					.ifdef @new
  1551 					lda <@VarData
  1552 					sta :ztmp
  1553 					lda >@VarData
  1554 					ldy #@VarDataSize-1
  1555 					jmp @FreeMem
  1556 					eif
  1557
  1558 				; ------------------------------------------------------------
  1559
  1560 = 2B76			RESULT	= DATAORIGIN+$004A
  1561
  1562 = 2B76			@VarData	= RESULT
  1563 = 0001			@VarDataSize	= 1
  1564
  1565 16F8 60				rts						; ret
  1566 				.endl
  1567
  1568 16F9			.local	SETFONTS					; PROCEDURE
  1569
  1570 				; optimize OK (tools.inc), line = 197
  1571
  1572 16F9 A9 00			lda #$00
  1573 16FB 85 04			sta SYSTEM.MOVE_0057.COUNT
  1574 16FD A9 04			lda #$04
  1575 16FF 85 05			sta SYSTEM.MOVE_0057.COUNT+1
  1576 1701 A9 00			lda #$00
  1577 1703 85 0C			sta SYSTEM.MOVE_0057.DEST
  1578 1705 A9 60			lda #$60
  1579 1707 85 0D			sta SYSTEM.MOVE_0057.DEST+1
  1580 1709 A9 00			lda #$00
  1581 170B 85 08			sta SYSTEM.MOVE_0057.SOURCE
  1582 170D A9 D0			lda #$D0
  1583 170F 85 09			sta SYSTEM.MOVE_0057.SOURCE+1
  1584 1711 20 8C 11			jsr SYSTEM.MOVE_0057
  1585
  1586 				; optimize OK (tools.inc), line = 198
  1587
  1588 1714 AD 41 17			lda FONTS
  1589 1717 85 12			sta :bp2
  1590 1719 AD 42 17			lda FONTS+1
  1591 171C 85 13			sta :bp2+1
  1592 171E A0 2F			ldy #$2F
  1593 1720 B1 12 99 80 62 88 + 	mva:rpl (:bp2),y $6280,y-
  1594
  1595 				; optimize OK (tools.inc), line = 199
  1596
  1597 1728 AD 12 FF			lda RAMROMSEL
  1598 172B 29 FB			and #$FB
  1599 172D 8D 12 FF			sta RAMROMSEL
  1600
  1601 				; optimize OK (tools.inc), line = 200
  1602
  1603 1730 AD 13 FF			lda CHBAS
  1604 1733 29 03			and #$03
  1605 1735 85 21			sta :STACKORIGIN+9
  1606 1737 A9 18			lda #$18
  1607 1739 0A				asl @
  1608 173A 0A				asl @
  1609 173B 05 21			ora :STACKORIGIN+9
  1610 173D 8D 13 FF			sta CHBAS
  1611
  1612 				; ------------------------------------------------------------
  1613
  1614 = 2B77			adr.FONTS	= [DATAORIGIN+$004B] .array [48]
  1615 1740			.var FONTS	= adr.FONTS .word
  1616
  1617 = 1741			@VarData	= FONTS
  1618 = 0030			@VarDataSize	= 48
  1619
  1620 1740			@exit
  1621 					.ifdef @new
  1622 					lda <@VarData
  1623 					sta :ztmp
  1624 					lda >@VarData
  1625 					ldy #@VarDataSize-1
  1626 					jmp @FreeMem
  1627 					els
  1628 1740 60				rts						; ret
  1629 					eif
  1630 = 1741 77 2B		FONTS
  1630 				.endl
  1631
  1632 1743			.local	HUMAN						; PROCEDURE
  1633
  1634 				; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5
  1635
  1636 1743 20 A1 15			jsr CHECKJOYSTATUS
  1637 1746 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1638 1750 A0 04			ldy #PLY.DIR-DATAORIGIN
  1639 1752 B1 12			lda (:bp2),y
  1640 1754 85 5B			sta NEWDIR
  1641
  1642 				; optimize OK (ai.inc), line = 6
  1643
  1644 1756 A5 5D			lda JOYSTATUS
  1645 1758 8D A7 2B			sta @CASETMP_0005
  1646 175B C9 01			cmp #$01
  1647 175D D0 19			jne l_060C
  1648 175F			@
  1649
  1650 				; optimize OK (ai.inc), line = 7
  1651
  1652 175F AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1653 1769 A0 04			ldy #PLY.DIR-DATAORIGIN
  1654 176B B1 12			lda (:bp2),y
  1655 176D C9 02			cmp #$02
  1656 176F F0 04			jeq l_061E
  1657 1771 A9 01			lda #$01
  1658 1773 85 5B			sta NEWDIR
  1659 1775			l_061E
  1660
  1661 1775 4C CC 17			jmp a_0005
  1662 1778			l_060C
  1663 1778 C9 02			cmp #$02
  1664 177A D0 19			jne l_062E
  1665 177C			@
  1666
  1667 				; optimize OK (ai.inc), line = 8
  1668
  1669 177C AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1670 1786 A0 04			ldy #PLY.DIR-DATAORIGIN
  1671 1788 B1 12			lda (:bp2),y
  1672 178A C9 01			cmp #$01
  1673 178C F0 04			jeq l_0640
  1674 178E A9 02			lda #$02
  1675 1790 85 5B			sta NEWDIR
  1676 1792			l_0640
  1677
  1678 1792 4C CC 17			jmp a_0005
  1679 1795			l_062E
  1680 1795 C9 04			cmp #$04
  1681 1797 D0 19			jne l_0650
  1682 1799			@
  1683
  1684 				; optimize OK (ai.inc), line = 9
  1685
  1686 1799 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1687 17A3 A0 04			ldy #PLY.DIR-DATAORIGIN
  1688 17A5 B1 12			lda (:bp2),y
  1689 17A7 C9 08			cmp #$08
  1690 17A9 F0 04			jeq l_0662
  1691 17AB A9 04			lda #$04
  1692 17AD 85 5B			sta NEWDIR
  1693 17AF			l_0662
  1694
  1695 17AF 4C CC 17			jmp a_0005
  1696 17B2			l_0650
  1697 17B2 C9 08			cmp #$08
  1698 17B4 D0 16			jne l_0672
  1699 17B6			@
  1700
  1701 				; optimize OK (ai.inc), line = 10
  1702
  1703 17B6 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1704 17C0 A0 04			ldy #PLY.DIR-DATAORIGIN
  1705 17C2 B1 12			lda (:bp2),y
  1706 17C4 C9 04			cmp #$04
  1707 17C6 F0 04			jeq l_0684
  1708 17C8 A9 08			lda #$08
  1709 17CA 85 5B			sta NEWDIR
  1710 17CC			l_0684
  1711
  1712 17CC			l_0672
  1713 17CC			a_0005
  1714
  1715 				; optimize OK (ai.inc), line = 13
  1716
  1717 17CC A5 5B			lda NEWDIR
  1718 17CE 25 5C			and AVAILDIR
  1719 17D0 D0 12			jne l_06AB
  1720
  1721 				; optimize OK (ai.inc), line = 14
  1722
  1723 17D2 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1724 17DC A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1725 17DE A9 00			lda #$00
  1726 17E0 91 12			sta (:bp2),y
  1727 17E2 C6 5A			dec ALIVE
  1728 17E4			l_06AB
  1729
  1730 				; ------------------------------------------------------------
  1731
  1732 = 2BA7			@CASETMP_0005	= DATAORIGIN+$007B
  1733
  1734 = 2BA7			@VarData	= @CASETMP_0005
  1735 = 0001			@VarDataSize	= 1
  1736
  1737 17E4			@exit
  1738 					.ifdef @new
  1739 					lda <@VarData
  1740 					sta :ztmp
  1741 					lda >@VarData
  1742 					ldy #@VarDataSize-1
  1743 					jmp @FreeMem
  1744 					els
  1745 17E4 60				rts						; ret
  1746 					eif
  1747 				.endl
  1748
  1749 17E5			.local	AISTRAIGHT					; PROCEDURE
  1750
  1751 				; optimize OK (ai.inc), line = 22
  1752
  1753 17E5 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1754 17EF A0 04			ldy #PLY.DIR-DATAORIGIN
  1755 17F1 B1 12			lda (:bp2),y
  1756 17F3 25 5C			and AVAILDIR
  1757 17F5 F0 07			jeq l_06D2
  1758 17F7 B1 12			lda (:bp2),y
  1759 17F9 85 5B			sta NEWDIR
  1760 17FB 4C 61 18			jmp l_06E2
  1761 17FE			l_06D2
  1762
  1763 				; optimize OK (ai.inc), line = 24
  1764
  1765 17FE A5 5C			lda AVAILDIR
  1766 1800 C9 03			cmp #$03
  1767 1802 D0 10			jne l_06F4
  1768 1804 A9 02			lda #$02
  1769 1806 20 B4 11			jsr SYSTEM.RANDOM_006E
  1770 1809 B4 18			ldy :STACKORIGIN,x
  1771 180B B9 40 10			lda adr.DIRECTION,y
  1772 180E 85 5B			sta NEWDIR
  1773 1810 CA				dex
  1774 1811 4C 2C 18			jmp l_0706
  1775 1814			l_06F4
  1776
  1777 				; optimize OK (ai.inc), line = 26
  1778
  1779 1814 A5 5C			lda AVAILDIR
  1780 1816 8D A8 2B			sta @CASETMP_0006
  1781 1819 C9 01			cmp #$01
  1782 181B D0 07			jne l_0711
  1783 181D			@
  1784
  1785 				; optimize OK (ai.inc), line = 27
  1786
  1787 181D A9 01			lda #$01
  1788 181F 85 5B			sta NEWDIR
  1789
  1790 1821 4C 2C 18			jmp a_0006
  1791 1824			l_0711
  1792 1824 C9 02			cmp #$02
  1793 1826 D0 04			jne l_071E
  1794 1828			@
  1795
  1796 				; optimize OK (ai.inc), line = 28
  1797
  1798 1828 A9 02			lda #$02
  1799 182A 85 5B			sta NEWDIR
  1800
  1801 182C			l_071E
  1802 182C			a_0006
  1803 182C			l_0706
  1804
  1805 				; optimize OK (ai.inc), line = 31
  1806
  1807 182C A5 5C			lda AVAILDIR
  1808 182E C9 0C			cmp #$0C
  1809 1830 D0 17			jne l_073A
  1810 1832 A9 02			lda #$02
  1811 1834 20 B4 11			jsr SYSTEM.RANDOM_006E
  1812 1837 B5 18			lda :STACKORIGIN,x
  1813 1839 18 69 02			add #$02
  1814 183C 95 18			sta :STACKORIGIN,x
  1815 183E B4 18			ldy :STACKORIGIN,x
  1816 1840 B9 40 10			lda adr.DIRECTION,y
  1817 1843 85 5B			sta NEWDIR
  1818 1845 CA				dex
  1819 1846 4C 61 18			jmp l_0750
  1820 1849			l_073A
  1821
  1822 				; optimize OK (ai.inc), line = 33
  1823
  1824 1849 A5 5C			lda AVAILDIR
  1825 184B 8D A9 2B			sta @CASETMP_0007
  1826 184E C9 04			cmp #$04
  1827 1850 D0 07			jne l_075B
  1828 1852			@
  1829
  1830 				; optimize OK (ai.inc), line = 34
  1831
  1832 1852 A9 04			lda #$04
  1833 1854 85 5B			sta NEWDIR
  1834
  1835 1856 4C 61 18			jmp a_0007
  1836 1859			l_075B
  1837 1859 C9 08			cmp #$08
  1838 185B D0 04			jne l_0768
  1839 185D			@
  1840
  1841 				; optimize OK (ai.inc), line = 35
  1842
  1843 185D A9 08			lda #$08
  1844 185F 85 5B			sta NEWDIR
  1845
  1846 1861			l_0768
  1847 1861			a_0007
  1848 1861			l_0750
  1849 1861			l_06E2
  1850
  1851 				; ------------------------------------------------------------
  1852
  1853 = 2BA8			@CASETMP_0006	= DATAORIGIN+$007C
  1854 = 2BA9			@CASETMP_0007	= DATAORIGIN+$007D
  1855
  1856 = 2BA8			@VarData	= @CASETMP_0006
  1857 = 0002			@VarDataSize	= 2
  1858
  1859 1861			@exit
  1860 					.ifdef @new
  1861 					lda <@VarData
  1862 					sta :ztmp
  1863 					lda >@VarData
  1864 					ldy #@VarDataSize-1
  1865 					jmp @FreeMem
  1866 					els
  1867 1861 60				rts						; ret
  1868 					eif
  1869 				.endl
  1870
  1871 1862			.local	AISAPPER					; PROCEDURE
  1872
  1873 				; optimize OK (ai.inc), line = 48
  1874
  1875 1862 A9 00			lda #$00
  1876 1864 8D AA 2B			sta L
  1877 1867 8D AB 2B			sta R
  1878 186A 8D AC 2B			sta U
  1879 186D 8D AD 2B			sta D
  1880
  1881 				; optimize OK (ai.inc), line = 49
  1882
  1883 1870 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  1884 187A A0 01			ldy #PLY.Y-DATAORIGIN
  1885 187C B1 12			lda (:bp2),y
  1886 187E 0A				asl @
  1887 187F A8				tay
  1888 1880 A9 00			lda #$00
  1889 1882 18 79 0E 10			add adr.MUL40,y
  1890 1886 85 21			sta :STACKORIGIN+9
  1891 1888 A9 0C			lda #$0C
  1892 188A 79 0F 10			adc adr.MUL40+1,y
  1893 188D 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1894 188F A0 00			ldy #PLY.X-DATAORIGIN
  1895 1891 A5 21			lda :STACKORIGIN+9
  1896 1893 18 71 12			add (:bp2),y
  1897 1896 85 5E			sta T0W
  1898 1898 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1899 189A 69 00			adc #$00
  1900 189C 85 5F			sta T0W+1
  1901
  1902 				; optimize OK (ai.inc), line = 51
  1903
  1904 189E A5 5C			lda AVAILDIR
  1905 18A0 29 01			and #$01
  1906 18A2 F0 73			jeq l_07AE
  1907
  1908 				; optimize OK (ai.inc), line = 52
  1909
  1910 18A4 A9 05			lda #$05
  1911 18A6 85 59			sta I0B
  1912
  1913 18A8			l_07B8
  1914 				; --- ForToDoCondition
  1915 18A8 A5 59			lda I0B
  1916 18AA C9 01			cmp #$01
  1917 18AC 90 69			jcc l_07C6
  1918
  1919 				; optimize OK (ai.inc), line = 53
  1920
  1921 18AE 0A				asl @
  1922 18AF A8				tay
  1923 18B0 A5 5E			lda T0W
  1924 18B2 38 F9 0E 10			sub adr.MUL40,y
  1925 18B6 85 21			sta :STACKORIGIN+9
  1926 18B8 A5 5F			lda T0W+1
  1927 18BA F9 0F 10			sbc adr.MUL40+1,y
  1928 18BD 85 11			sta :bp+1
  1929 18BF A4 21			ldy :STACKORIGIN+9
  1930 18C1 B1 10			lda (:bp),y
  1931 18C3 C9 20			cmp #$20
  1932 18C5 D0 03			jne l_07E0
  1933 18C7 EE AC 2B			inc U
  1934 18CA			l_07E0
  1935
  1936 				; optimize OK (ai.inc), line = 54
  1937
  1938 18CA A5 59			lda I0B
  1939 18CC 0A				asl @
  1940 18CD A8				tay
  1941 18CE A5 5E			lda T0W
  1942 18D0 38 F9 0E 10			sub adr.MUL40,y
  1943 18D4 85 21			sta :STACKORIGIN+9
  1944 18D6 A5 5F			lda T0W+1
  1945 18D8 F9 0F 10			sbc adr.MUL40+1,y
  1946 18DB 85 11			sta :bp+1
  1947 18DD A5 21			lda :STACKORIGIN+9
  1948 18DF 18 69 01			add #$01
  1949 18E2 A8				tay
  1950 18E3 90 02			scc
  1951 18E5 E6 11			inc :bp+1
  1952 18E7 B1 10			lda (:bp),y
  1953 18E9 C9 20			cmp #$20
  1954 18EB D0 03			jne l_0805
  1955 18ED EE AC 2B			inc U
  1956 18F0			l_0805
  1957
  1958 				; optimize OK (ai.inc), line = 55
  1959
  1960 18F0 A5 59			lda I0B
  1961 18F2 0A				asl @
  1962 18F3 A8				tay
  1963 18F4 A5 5E			lda T0W
  1964 18F6 38 F9 0E 10			sub adr.MUL40,y
  1965 18FA 85 21			sta :STACKORIGIN+9
  1966 18FC A5 5F			lda T0W+1
  1967 18FE F9 0F 10			sbc adr.MUL40+1,y
  1968 1901 85 11			sta :bp+1
  1969 1903 A4 21			ldy :STACKORIGIN+9
  1970 1905 88				dey
  1971 1906 B0 02			scs
  1972 1908 C6 11			dec :bp+1
  1973 190A B1 10			lda (:bp),y
  1974 190C C9 20			cmp #$20
  1975 190E D0 03			jne l_082A
  1976 1910 EE AC 2B			inc U
  1977 1913			l_082A
  1978
  1979 				; --- ForToDoEpilog
  1980 1913 C6 59			dec I0B
  1981 1915 10 91			jpl l_07B8
  1982 1917			l_07C6
  1983 1917			l_07AE
  1984
  1985 				; optimize OK (ai.inc), line = 59
  1986
  1987 1917 A5 5C			lda AVAILDIR
  1988 1919 29 02			and #$02
  1989 191B F0 73			jeq l_084E
  1990
  1991 				; optimize OK (ai.inc), line = 60
  1992
  1993 191D A9 05			lda #$05
  1994 191F 85 59			sta I0B
  1995
  1996 1921			l_0858
  1997 				; --- ForToDoCondition
  1998 1921 A5 59			lda I0B
  1999 1923 C9 01			cmp #$01
  2000 1925 90 69			jcc l_0866
  2001
  2002 				; optimize OK (ai.inc), line = 61
  2003
  2004 1927 0A				asl @
  2005 1928 A8				tay
  2006 1929 A5 5E			lda T0W
  2007 192B 18 79 0E 10			add adr.MUL40,y
  2008 192F 85 21			sta :STACKORIGIN+9
  2009 1931 A5 5F			lda T0W+1
  2010 1933 79 0F 10			adc adr.MUL40+1,y
  2011 1936 85 11			sta :bp+1
  2012 1938 A4 21			ldy :STACKORIGIN+9
  2013 193A B1 10			lda (:bp),y
  2014 193C C9 20			cmp #$20
  2015 193E D0 03			jne l_0880
  2016 1940 EE AD 2B			inc D
  2017 1943			l_0880
  2018
  2019 				; optimize OK (ai.inc), line = 62
  2020
  2021 1943 A5 59			lda I0B
  2022 1945 0A				asl @
  2023 1946 A8				tay
  2024 1947 A5 5E			lda T0W
  2025 1949 18 79 0E 10			add adr.MUL40,y
  2026 194D 85 21			sta :STACKORIGIN+9
  2027 194F A5 5F			lda T0W+1
  2028 1951 79 0F 10			adc adr.MUL40+1,y
  2029 1954 85 11			sta :bp+1
  2030 1956 A5 21			lda :STACKORIGIN+9
  2031 1958 18 69 01			add #$01
  2032 195B A8				tay
  2033 195C 90 02			scc
  2034 195E E6 11			inc :bp+1
  2035 1960 B1 10			lda (:bp),y
  2036 1962 C9 20			cmp #$20
  2037 1964 D0 03			jne l_08A5
  2038 1966 EE AD 2B			inc D
  2039 1969			l_08A5
  2040
  2041 				; optimize OK (ai.inc), line = 63
  2042
  2043 1969 A5 59			lda I0B
  2044 196B 0A				asl @
  2045 196C A8				tay
  2046 196D A5 5E			lda T0W
  2047 196F 18 79 0E 10			add adr.MUL40,y
  2048 1973 85 21			sta :STACKORIGIN+9
  2049 1975 A5 5F			lda T0W+1
  2050 1977 79 0F 10			adc adr.MUL40+1,y
  2051 197A 85 11			sta :bp+1
  2052 197C A4 21			ldy :STACKORIGIN+9
  2053 197E 88				dey
  2054 197F B0 02			scs
  2055 1981 C6 11			dec :bp+1
  2056 1983 B1 10			lda (:bp),y
  2057 1985 C9 20			cmp #$20
  2058 1987 D0 03			jne l_08CA
  2059 1989 EE AD 2B			inc D
  2060 198C			l_08CA
  2061
  2062 				; --- ForToDoEpilog
  2063 198C C6 59			dec I0B
  2064 198E 10 91			jpl l_0858
  2065 1990			l_0866
  2066 1990			l_084E
  2067
  2068 				; optimize OK (ai.inc), line = 67
  2069
  2070 1990 A5 5C			lda AVAILDIR
  2071 1992 29 04			and #$04
  2072 1994 F0 5F			jeq l_08EE
  2073
  2074 				; optimize OK (ai.inc), line = 68
  2075
  2076 1996 A9 05			lda #$05
  2077 1998 85 59			sta I0B
  2078
  2079 199A			l_08F8
  2080 				; --- ForToDoCondition
  2081 199A A5 59			lda I0B
  2082 199C C9 01			cmp #$01
  2083 199E 90 55			jcc l_0906
  2084
  2085 				; optimize OK (ai.inc), line = 69
  2086
  2087 19A0 A5 5E			lda T0W
  2088 19A2 38 E5 59			sub I0B
  2089 19A5 A8				tay
  2090 19A6 A5 5F			lda T0W+1
  2091 19A8 E9 00			sbc #$00
  2092 19AA 85 11			sta :bp+1
  2093 19AC B1 10			lda (:bp),y
  2094 19AE C9 20			cmp #$20
  2095 19B0 D0 03			jne l_091E
  2096 19B2 EE AA 2B			inc L
  2097 19B5			l_091E
  2098
  2099 				; optimize OK (ai.inc), line = 70
  2100
  2101 19B5 A5 5E			lda T0W
  2102 19B7 38 E5 59			sub I0B
  2103 19BA A8				tay
  2104 19BB A5 5F			lda T0W+1
  2105 19BD E9 00			sbc #$00
  2106 19BF 85 11			sta :bp+1
  2107 19C1 98				tya
  2108 19C2 18 69 28			add #$28
  2109 19C5 A8				tay
  2110 19C6 90 02			scc
  2111 19C8 E6 11			inc :bp+1
  2112 19CA B1 10			lda (:bp),y
  2113 19CC C9 20			cmp #$20
  2114 19CE D0 03			jne l_0941
  2115 19D0 EE AA 2B			inc L
  2116 19D3			l_0941
  2117
  2118 				; optimize OK (ai.inc), line = 71
  2119
  2120 19D3 A5 5E			lda T0W
  2121 19D5 38 E5 59			sub I0B
  2122 19D8 A8				tay
  2123 19D9 A5 5F			lda T0W+1
  2124 19DB E9 00			sbc #$00
  2125 19DD 85 11			sta :bp+1
  2126 19DF 98				tya
  2127 19E0 38 E9 28			sub #$28
  2128 19E3 A8				tay
  2129 19E4 B0 02			scs
  2130 19E6 C6 11			dec :bp+1
  2131 19E8 B1 10			lda (:bp),y
  2132 19EA C9 20			cmp #$20
  2133 19EC D0 03			jne l_0964
  2134 19EE EE AA 2B			inc L
  2135 19F1			l_0964
  2136
  2137 				; --- ForToDoEpilog
  2138 19F1 C6 59			dec I0B
  2139 19F3 10 A5			jpl l_08F8
  2140 19F5			l_0906
  2141 19F5			l_08EE
  2142
  2143 				; optimize OK (ai.inc), line = 75
  2144
  2145 19F5 A5 5C			lda AVAILDIR
  2146 19F7 29 08			and #$08
  2147 19F9 F0 5D			jeq l_0988
  2148
  2149 				; optimize OK (ai.inc), line = 76
  2150
  2151 19FB A9 05			lda #$05
  2152 19FD 85 59			sta I0B
  2153
  2154 19FF			l_0992
  2155 				; --- ForToDoCondition
  2156 19FF A5 59			lda I0B
  2157 1A01 C9 01			cmp #$01
  2158 1A03 90 53			jcc l_09A0
  2159
  2160 				; optimize OK (ai.inc), line = 77
  2161
  2162 1A05 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
  2163 1A0D A4 59			ldy I0B
  2164 1A0F B1 12			lda (:bp2),y
  2165 1A11 C9 20			cmp #$20
  2166 1A13 D0 03			jne l_09B8
  2167 1A15 EE AB 2B			inc R
  2168 1A18			l_09B8
  2169
  2170 				; optimize OK (ai.inc), line = 78
  2171
  2172 1A18 A5 5E			lda T0W
  2173 1A1A 18 65 59			add I0B
  2174 1A1D A8				tay
  2175 1A1E A5 5F			lda T0W+1
  2176 1A20 69 00			adc #$00
  2177 1A22 85 11			sta :bp+1
  2178 1A24 98				tya
  2179 1A25 18 69 28			add #$28
  2180 1A28 A8				tay
  2181 1A29 90 02			scc
  2182 1A2B E6 11			inc :bp+1
  2183 1A2D B1 10			lda (:bp),y
  2184 1A2F C9 20			cmp #$20
  2185 1A31 D0 03			jne l_09DB
  2186 1A33 EE AB 2B			inc R
  2187 1A36			l_09DB
  2188
  2189 				; optimize OK (ai.inc), line = 79
  2190
  2191 1A36 A5 5E			lda T0W
  2192 1A38 18 65 59			add I0B
  2193 1A3B A8				tay
  2194 1A3C A5 5F			lda T0W+1
  2195 1A3E 69 00			adc #$00
  2196 1A40 85 11			sta :bp+1
  2197 1A42 98				tya
  2198 1A43 38 E9 28			sub #$28
  2199 1A46 A8				tay
  2200 1A47 B0 02			scs
  2201 1A49 C6 11			dec :bp+1
  2202 1A4B B1 10			lda (:bp),y
  2203 1A4D C9 20			cmp #$20
  2204 1A4F D0 03			jne l_09FE
  2205 1A51 EE AB 2B			inc R
  2206 1A54			l_09FE
  2207
  2208 				; --- ForToDoEpilog
  2209 1A54 C6 59			dec I0B
  2210 1A56 10 A7			jpl l_0992
  2211 1A58			l_09A0
  2212 1A58			l_0988
  2213
  2214 				; optimize OK (ai.inc), line = 83
  2215
  2216 1A58 AD AD 2B			lda D
  2217 1A5B 85 58			sta T0B
  2218
  2219 				; optimize OK (ai.inc), line = 84
  2220
  2221 1A5D CD AC 2B			cmp U
  2222 1A60 B0 05			jcs l_0A26
  2223 1A62 AD AC 2B			lda U
  2224 1A65 85 58			sta T0B
  2225 1A67			l_0A26
  2226
  2227 				; optimize OK (ai.inc), line = 85
  2228
  2229 1A67 A5 58			lda T0B
  2230 1A69 CD AA 2B			cmp L
  2231 1A6C B0 05			jcs l_0A43
  2232 1A6E AD AA 2B			lda L
  2233 1A71 85 58			sta T0B
  2234 1A73			l_0A43
  2235
  2236 				; optimize OK (ai.inc), line = 86
  2237
  2238 1A73 A5 58			lda T0B
  2239 1A75 CD AB 2B			cmp R
  2240 1A78 B0 05			jcs l_0A60
  2241 1A7A AD AB 2B			lda R
  2242 1A7D 85 58			sta T0B
  2243 1A7F			l_0A60
  2244
  2245 				; optimize OK (ai.inc), line = 88
  2246
  2247 1A7F A5 58			lda T0B
  2248 1A81 CD AD 2B			cmp D
  2249 1A84 D0 04			jne l_0A7D
  2250 1A86 A9 02			lda #$02
  2251 1A88 85 58			sta T0B
  2252 1A8A			l_0A7D
  2253
  2254 				; optimize OK (ai.inc), line = 89
  2255
  2256 1A8A A5 58			lda T0B
  2257 1A8C CD AC 2B			cmp U
  2258 1A8F D0 04			jne l_0A98
  2259 1A91 A9 01			lda #$01
  2260 1A93 85 58			sta T0B
  2261 1A95			l_0A98
  2262
  2263 				; optimize OK (ai.inc), line = 90
  2264
  2265 1A95 A5 58			lda T0B
  2266 1A97 CD AA 2B			cmp L
  2267 1A9A D0 04			jne l_0AB3
  2268 1A9C A9 04			lda #$04
  2269 1A9E 85 58			sta T0B
  2270 1AA0			l_0AB3
  2271
  2272 				; optimize OK (ai.inc), line = 91
  2273
  2274 1AA0 A5 58			lda T0B
  2275 1AA2 CD AB 2B			cmp R
  2276 1AA5 D0 04			jne l_0ACE
  2277 1AA7 A9 08			lda #$08
  2278 1AA9 85 58			sta T0B
  2279 1AAB			l_0ACE
  2280
  2281 				; optimize OK (ai.inc), line = 93
  2282
  2283 1AAB A5 5C			lda AVAILDIR
  2284 1AAD 25 58			and T0B
  2285 1AAF F0 07			jeq l_0AED
  2286 1AB1 A5 58			lda T0B
  2287 1AB3 85 5B			sta NEWDIR
  2288 1AB5 4C BB 1A			jmp l_0AFD
  2289 1AB8			l_0AED
  2290
  2291 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94
  2292
  2293 1AB8 20 E5 17			jsr AISTRAIGHT
  2294 1ABB			l_0AFD
  2295
  2296 				; ------------------------------------------------------------
  2297
  2298 = 2BAA			L	= DATAORIGIN+$007E
  2299 = 2BAB			R	= DATAORIGIN+$007F
  2300 = 2BAC			U	= DATAORIGIN+$0080
  2301 = 2BAD			D	= DATAORIGIN+$0081
  2302 = 0001			@FORTMP_07B5	= $01
  2303 = 0001			@FORTMP_0855	= $01
  2304 = 0001			@FORTMP_08F5	= $01
  2305 = 0001			@FORTMP_098F	= $01
  2306
  2307 = 2BAA			@VarData	= L
  2308 = 0004			@VarDataSize	= 4
  2309
  2310 1ABB			@exit
  2311 					.ifdef @new
  2312 					lda <@VarData
  2313 					sta :ztmp
  2314 					lda >@VarData
  2315 					ldy #@VarDataSize-1
  2316 					jmp @FreeMem
  2317 					els
  2318 1ABB 60				rts						; ret
  2319 					eif
  2320 				.endl
  2321
  2322 1ABC			.local	AIBULLY						; PROCEDURE
  2323
  2324 				; optimize OK (ai.inc), line = 101
  2325
  2326 1ABC AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  2327 1AC6 A0 04			ldy #PLY.DIR-DATAORIGIN
  2328 1AC8 B1 12			lda (:bp2),y
  2329 1ACA 85 58			sta T0B
  2330
  2331 				; optimize OK (ai.inc), line = 103
  2332
  2333 1ACC AD 45 2B			lda PLAYER1.ISALIVE
  2334 1ACF 0D 4D 2B			ora PLAYER2.ISALIVE
  2335 1AD2 D0 03 4C 79 1B		jeq l_0B1A
  2336
  2337 				; optimize OK (ai.inc), line = 105
  2338
  2339 1AD7 AD 45 2B			lda PLAYER1.ISALIVE
  2340 1ADA F0 0F			jeq l_0B27
  2341 1ADC AD 23 2B			lda PLAYER1
  2342 1ADF 8D 1F 2B			sta TMPPLY
  2343 1AE2 AD 24 2B			lda PLAYER1+1
  2344 1AE5 8D 20 2B			sta TMPPLY+1
  2345 1AE8 4C F7 1A			jmp l_0B36
  2346 1AEB			l_0B27
  2347 1AEB AD 25 2B			lda PLAYER2
  2348 1AEE 8D 1F 2B			sta TMPPLY
  2349 1AF1 AD 26 2B			lda PLAYER2+1
  2350 1AF4 8D 20 2B			sta TMPPLY+1
  2351 1AF7			l_0B36
  2352
  2353 				; optimize OK (ai.inc), line = 107
  2354
  2355 1AF7 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  2356 1B01 A0 01			ldy #PLY.Y-DATAORIGIN
  2357 1B03 B1 12			lda (:bp2),y
  2358 1B05 85 21			sta :STACKORIGIN+9
  2359 1B07 AC 1F 2B 84 12 AC + 	mwy TMPPLY :bp2
  2360 1B11 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2361 1B13 B1 12			lda (:bp2),y
  2362 1B15 C5 21			cmp :STACKORIGIN+9
  2363 1B17 B0 07			jcs l_0B4F
  2364 1B19 A9 01			lda #$01
  2365 1B1B 85 58			sta T0B
  2366 1B1D 4C 24 1B			jmp l_0B5D
  2367 1B20			l_0B4F
  2368 1B20 A9 02			lda #$02
  2369 1B22 85 58			sta T0B
  2370 1B24			l_0B5D
  2371
  2372 				; optimize OK (ai.inc), line = 108
  2373
  2374 1B24 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  2375 1B2E A0 01			ldy #PLY.Y-DATAORIGIN
  2376 1B30 B1 12			lda (:bp2),y
  2377 1B32 85 21			sta :STACKORIGIN+9
  2378 1B34 AC 1F 2B 84 12 AC + 	mwy TMPPLY :bp2
  2379 1B3E A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2380 1B40 B1 12			lda (:bp2),y
  2381 1B42 C5 21			cmp :STACKORIGIN+9
  2382 1B44 F0 06			jeq l_0B87x
  2383 1B46 A5 5C			lda AVAILDIR
  2384 1B48 25 58			and T0B
  2385 1B4A D0 2D			jne l_0B87
  2386 1B4C			l_0B87x
  2387
  2388 				; optimize OK (ai.inc), line = 109
  2389
  2390 1B4C AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  2391 1B56 A0 00			ldy #PLY.X-DATAORIGIN
  2392 1B58 B1 12			lda (:bp2),y
  2393 1B5A 85 21			sta :STACKORIGIN+9
  2394 1B5C AC 1F 2B 84 12 AC + 	mwy TMPPLY :bp2
  2395 1B66 A0 00			ldy #TMPPLY.X-DATAORIGIN
  2396 1B68 B1 12			lda (:bp2),y
  2397 1B6A C5 21			cmp :STACKORIGIN+9
  2398 1B6C B0 07			jcs l_0B9C
  2399 1B6E A9 04			lda #$04
  2400 1B70 85 58			sta T0B
  2401 1B72 4C 79 1B			jmp l_0BAA
  2402 1B75			l_0B9C
  2403 1B75 A9 08			lda #$08
  2404 1B77 85 58			sta T0B
  2405 1B79			l_0BAA
  2406 1B79			l_0B87
  2407 1B79			l_0B1A
  2408
  2409 				; optimize OK (ai.inc), line = 113
  2410
  2411 1B79 A5 5C			lda AVAILDIR
  2412 1B7B 25 58			and T0B
  2413 1B7D F0 07			jeq l_0BCA
  2414 1B7F A5 58			lda T0B
  2415 1B81 85 5B			sta NEWDIR
  2416 1B83 4C 89 1B			jmp l_0BDA
  2417 1B86			l_0BCA
  2418
  2419 				; optimize FAIL ('AISAPPER', ai.inc), line = 114
  2420
  2421 1B86 20 62 18			jsr AISAPPER
  2422 1B89			l_0BDA
  2423 1B89			@exit
  2424 					.ifdef @new
  2425 					lda <@VarData
  2426 					sta :ztmp
  2427 					lda >@VarData
  2428 					ldy #@VarDataSize-1
  2429 					jmp @FreeMem
  2430 					els
  2431 1B89 60				rts						; ret
  2432 					eif
  2433 				.endl
  2434
  2435 1B8A			.local	AIMIRROR					; PROCEDURE
  2436
  2437 				; optimize OK (ai.inc), line = 122
  2438
  2439 1B8A AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  2440 1B94 A0 04			ldy #PLY.DIR-DATAORIGIN
  2441 1B96 B1 12			lda (:bp2),y
  2442 1B98 85 58			sta T0B
  2443
  2444 				; optimize OK (ai.inc), line = 124
  2445
  2446 1B9A AD 45 2B			lda PLAYER1.ISALIVE
  2447 1B9D F0 2F			jeq l_0BF1
  2448
  2449 				; optimize OK (ai.inc), line = 125
  2450
  2451 1B9F AD 42 2B			lda PLAYER1.DIR
  2452 1BA2 8D AE 2B			sta @CASETMP_0008
  2453 1BA5 C9 01			cmp #$01
  2454 1BA7 D0 07			jne l_0BFD
  2455 1BA9			@
  2456
  2457 				; optimize OK (ai.inc), line = 126
  2458
  2459 1BA9 A9 02			lda #$02
  2460 1BAB 85 58			sta T0B
  2461
  2462 1BAD 4C CE 1B			jmp a_0008
  2463 1BB0			l_0BFD
  2464 1BB0 C9 02			cmp #$02
  2465 1BB2 D0 07			jne l_0C0A
  2466 1BB4			@
  2467
  2468 				; optimize OK (ai.inc), line = 127
  2469
  2470 1BB4 A9 01			lda #$01
  2471 1BB6 85 58			sta T0B
  2472
  2473 1BB8 4C CE 1B			jmp a_0008
  2474 1BBB			l_0C0A
  2475 1BBB C9 04			cmp #$04
  2476 1BBD D0 07			jne l_0C17
  2477 1BBF			@
  2478
  2479 				; optimize OK (ai.inc), line = 128
  2480
  2481 1BBF A9 08			lda #$08
  2482 1BC1 85 58			sta T0B
  2483
  2484 1BC3 4C CE 1B			jmp a_0008
  2485 1BC6			l_0C17
  2486 1BC6 C9 08			cmp #$08
  2487 1BC8 D0 04			jne l_0C24
  2488 1BCA			@
  2489
  2490 				; optimize OK (ai.inc), line = 129
  2491
  2492 1BCA A9 04			lda #$04
  2493 1BCC 85 58			sta T0B
  2494
  2495 1BCE			l_0C24
  2496 1BCE			a_0008
  2497 1BCE			l_0BF1
  2498
  2499 				; optimize OK (ai.inc), line = 133
  2500
  2501 1BCE A5 5C			lda AVAILDIR
  2502 1BD0 25 58			and T0B
  2503 1BD2 F0 07			jeq l_0C4A
  2504 1BD4 A5 58			lda T0B
  2505 1BD6 85 5B			sta NEWDIR
  2506 1BD8 4C DE 1B			jmp l_0C5A
  2507 1BDB			l_0C4A
  2508
  2509 				; optimize FAIL ('AISAPPER', ai.inc), line = 134
  2510
  2511 1BDB 20 62 18			jsr AISAPPER
  2512 1BDE			l_0C5A
  2513
  2514 				; ------------------------------------------------------------
  2515
  2516 = 2BAE			@CASETMP_0008	= DATAORIGIN+$0082
  2517
  2518 = 2BAE			@VarData	= @CASETMP_0008
  2519 = 0001			@VarDataSize	= 1
  2520
  2521 1BDE			@exit
  2522 					.ifdef @new
  2523 					lda <@VarData
  2524 					sta :ztmp
  2525 					lda >@VarData
  2526 					ldy #@VarDataSize-1
  2527 					jmp @FreeMem
  2528 					els
  2529 1BDE 60				rts						; ret
  2530 					eif
  2531 				.endl
  2532
  2533 1BDF			.local	SETLEVEL00					; PROCEDURE
  2534
  2535 				; optimize OK (levels.inc), line = 5
  2536
  2537 1BDF A9 01			lda #$01
  2538 1BE1 8D 73 2B			sta SETPLAYER.ISALIVE
  2539 1BE4 A9 62			lda #$62
  2540 1BE6 8D 72 2B			sta SETPLAYER.COLOUR
  2541 1BE9 A9 00			lda #$00
  2542 1BEB 8D 71 2B			sta SETPLAYER.BRAIN
  2543 1BEE A9 08			lda #$08
  2544 1BF0 8D 70 2B			sta SETPLAYER.DIR
  2545 1BF3 A9 0C			lda #$0C
  2546 1BF5 8D 6F 2B			sta SETPLAYER.Y
  2547 1BF8 A9 0A			lda #$0A
  2548 1BFA 8D 6E 2B			sta SETPLAYER.X
  2549 1BFD AD 23 2B			lda PLAYER1
  2550 1C00 8D 6C 2B			sta SETPLAYER.P
  2551 1C03 AD 24 2B			lda PLAYER1+1
  2552 1C06 8D 6D 2B			sta SETPLAYER.P+1
  2553 1C09 20 B3 15			jsr SETPLAYER
  2554
  2555 				; optimize OK (levels.inc), line = 6
  2556
  2557 1C0C A9 01			lda #$01
  2558 1C0E 8D 73 2B			sta SETPLAYER.ISALIVE
  2559 1C11 A9 5D			lda #$5D
  2560 1C13 8D 72 2B			sta SETPLAYER.COLOUR
  2561 1C16 A9 01			lda #$01
  2562 1C18 8D 71 2B			sta SETPLAYER.BRAIN
  2563 1C1B A9 04			lda #$04
  2564 1C1D 8D 70 2B			sta SETPLAYER.DIR
  2565 1C20 A9 0C			lda #$0C
  2566 1C22 8D 6F 2B			sta SETPLAYER.Y
  2567 1C25 A9 1E			lda #$1E
  2568 1C27 8D 6E 2B			sta SETPLAYER.X
  2569 1C2A AD 25 2B			lda PLAYER2
  2570 1C2D 8D 6C 2B			sta SETPLAYER.P
  2571 1C30 AD 26 2B			lda PLAYER2+1
  2572 1C33 8D 6D 2B			sta SETPLAYER.P+1
  2573 1C36 20 B3 15			jsr SETPLAYER
  2574
  2575 				; optimize FAIL (1, levels.inc), line = 8
  2576
  2577 1C39 E8				inx
  2578 1C3A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2579 1C3E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2580 1C40 A9 06			lda #$06
  2581 1C42 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2582 1C45 A9 0A			lda #$0A
  2583 1C47 8D 67 2B			sta CALCOBSTACLEADDR.X
  2584 1C4A 20 95 13			jsr CALCOBSTACLEADDR
  2585 1C4D B4 17			ldy :STACKORIGIN-1,x
  2586 1C4F B5 18			lda :STACKORIGIN,x
  2587 1C51 99 60 00			sta adr.OBSTACLES,y
  2588 1C54 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2589 1C56 99 61 00			sta adr.OBSTACLES+1,y
  2590 1C59 CA				dex
  2591 1C5A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2592 1C5E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2593 1C62 A9 06			lda #$06
  2594 1C64 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2595 1C67 A9 1E			lda #$1E
  2596 1C69 8D 67 2B			sta CALCOBSTACLEADDR.X
  2597 1C6C 20 95 13			jsr CALCOBSTACLEADDR
  2598 1C6F B4 17			ldy :STACKORIGIN-1,x
  2599 1C71 B5 18			lda :STACKORIGIN,x
  2600 1C73 99 60 00			sta adr.OBSTACLES,y
  2601 1C76 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2602 1C78 99 61 00			sta adr.OBSTACLES+1,y
  2603 1C7B CA				dex
  2604
  2605 				; optimize FAIL (1, levels.inc), line = 9
  2606
  2607 1C7C A9 04 95 18			mva #$04 :STACKORIGIN,x
  2608 1C80 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2609 1C84 A9 12			lda #$12
  2610 1C86 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2611 1C89 A9 0A			lda #$0A
  2612 1C8B 8D 67 2B			sta CALCOBSTACLEADDR.X
  2613 1C8E 20 95 13			jsr CALCOBSTACLEADDR
  2614 1C91 B4 17			ldy :STACKORIGIN-1,x
  2615 1C93 B5 18			lda :STACKORIGIN,x
  2616 1C95 99 60 00			sta adr.OBSTACLES,y
  2617 1C98 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2618 1C9A 99 61 00			sta adr.OBSTACLES+1,y
  2619 1C9D CA				dex
  2620 1C9E A9 06 95 18			mva #$06 :STACKORIGIN,x
  2621 1CA2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2622 1CA6 A9 12			lda #$12
  2623 1CA8 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2624 1CAB A9 1E			lda #$1E
  2625 1CAD 8D 67 2B			sta CALCOBSTACLEADDR.X
  2626 1CB0 20 95 13			jsr CALCOBSTACLEADDR
  2627 1CB3 B4 17			ldy :STACKORIGIN-1,x
  2628 1CB5 B5 18			lda :STACKORIGIN,x
  2629 1CB7 99 60 00			sta adr.OBSTACLES,y
  2630 1CBA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2631 1CBC 99 61 00			sta adr.OBSTACLES+1,y
  2632 1CBF CA				dex
  2633
  2634 				; optimize FAIL (1, levels.inc), line = 10
  2635
  2636 1CC0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2637 1CC4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2638 1CC8 A9 02			lda #$02
  2639 1CCA 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2640 1CCD A9 14			lda #$14
  2641 1CCF 8D 67 2B			sta CALCOBSTACLEADDR.X
  2642 1CD2 20 95 13			jsr CALCOBSTACLEADDR
  2643 1CD5 B4 17			ldy :STACKORIGIN-1,x
  2644 1CD7 B5 18			lda :STACKORIGIN,x
  2645 1CD9 99 60 00			sta adr.OBSTACLES,y
  2646 1CDC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2647 1CDE 99 61 00			sta adr.OBSTACLES+1,y
  2648 1CE1 CA				dex
  2649 1CE2 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2650 1CE6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2651 1CEA A9 16			lda #$16
  2652 1CEC 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2653 1CEF A9 14			lda #$14
  2654 1CF1 8D 67 2B			sta CALCOBSTACLEADDR.X
  2655 1CF4 20 95 13			jsr CALCOBSTACLEADDR
  2656 1CF7 B4 17			ldy :STACKORIGIN-1,x
  2657 1CF9 B5 18			lda :STACKORIGIN,x
  2658 1CFB 99 60 00			sta adr.OBSTACLES,y
  2659 1CFE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2660 1D00 99 61 00			sta adr.OBSTACLES+1,y
  2661 1D03 CA				dex
  2662 1D04 CA				dex
  2663 1D05			@exit
  2664 					.ifdef @new
  2665 					lda <@VarData
  2666 					sta :ztmp
  2667 					lda >@VarData
  2668 					ldy #@VarDataSize-1
  2669 					jmp @FreeMem
  2670 					els
  2671 1D05 60				rts						; ret
  2672 					eif
  2673 				.endl
  2674
  2675 1D06			.local	SETLEVEL01					; PROCEDURE
  2676
  2677 				; optimize OK (levels.inc), line = 17
  2678
  2679 1D06 A9 01			lda #$01
  2680 1D08 8D 73 2B			sta SETPLAYER.ISALIVE
  2681 1D0B A9 62			lda #$62
  2682 1D0D 8D 72 2B			sta SETPLAYER.COLOUR
  2683 1D10 A9 00			lda #$00
  2684 1D12 8D 71 2B			sta SETPLAYER.BRAIN
  2685 1D15 A9 08			lda #$08
  2686 1D17 8D 70 2B			sta SETPLAYER.DIR
  2687 1D1A A9 0C			lda #$0C
  2688 1D1C 8D 6F 2B			sta SETPLAYER.Y
  2689 1D1F A9 0A			lda #$0A
  2690 1D21 8D 6E 2B			sta SETPLAYER.X
  2691 1D24 AD 23 2B			lda PLAYER1
  2692 1D27 8D 6C 2B			sta SETPLAYER.P
  2693 1D2A AD 24 2B			lda PLAYER1+1
  2694 1D2D 8D 6D 2B			sta SETPLAYER.P+1
  2695 1D30 20 B3 15			jsr SETPLAYER
  2696
  2697 				; optimize OK (levels.inc), line = 18
  2698
  2699 1D33 A9 01			lda #$01
  2700 1D35 8D 73 2B			sta SETPLAYER.ISALIVE
  2701 1D38 A9 5D			lda #$5D
  2702 1D3A 8D 72 2B			sta SETPLAYER.COLOUR
  2703 1D3D A9 01			lda #$01
  2704 1D3F 8D 71 2B			sta SETPLAYER.BRAIN
  2705 1D42 A9 04			lda #$04
  2706 1D44 8D 70 2B			sta SETPLAYER.DIR
  2707 1D47 A9 0C			lda #$0C
  2708 1D49 8D 6F 2B			sta SETPLAYER.Y
  2709 1D4C A9 1E			lda #$1E
  2710 1D4E 8D 6E 2B			sta SETPLAYER.X
  2711 1D51 AD 25 2B			lda PLAYER2
  2712 1D54 8D 6C 2B			sta SETPLAYER.P
  2713 1D57 AD 26 2B			lda PLAYER2+1
  2714 1D5A 8D 6D 2B			sta SETPLAYER.P+1
  2715 1D5D 20 B3 15			jsr SETPLAYER
  2716
  2717 				; optimize FAIL (1, levels.inc), line = 20
  2718
  2719 1D60 E8				inx
  2720 1D61 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2721 1D65 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2722 1D67 A9 06			lda #$06
  2723 1D69 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2724 1D6C A9 0A			lda #$0A
  2725 1D6E 8D 67 2B			sta CALCOBSTACLEADDR.X
  2726 1D71 20 95 13			jsr CALCOBSTACLEADDR
  2727 1D74 B4 17			ldy :STACKORIGIN-1,x
  2728 1D76 B5 18			lda :STACKORIGIN,x
  2729 1D78 99 60 00			sta adr.OBSTACLES,y
  2730 1D7B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2731 1D7D 99 61 00			sta adr.OBSTACLES+1,y
  2732 1D80 CA				dex
  2733 1D81 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2734 1D85 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2735 1D89 A9 06			lda #$06
  2736 1D8B 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2737 1D8E A9 1E			lda #$1E
  2738 1D90 8D 67 2B			sta CALCOBSTACLEADDR.X
  2739 1D93 20 95 13			jsr CALCOBSTACLEADDR
  2740 1D96 B4 17			ldy :STACKORIGIN-1,x
  2741 1D98 B5 18			lda :STACKORIGIN,x
  2742 1D9A 99 60 00			sta adr.OBSTACLES,y
  2743 1D9D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2744 1D9F 99 61 00			sta adr.OBSTACLES+1,y
  2745 1DA2 CA				dex
  2746
  2747 				; optimize FAIL (1, levels.inc), line = 21
  2748
  2749 1DA3 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2750 1DA7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2751 1DAB A9 12			lda #$12
  2752 1DAD 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2753 1DB0 A9 0A			lda #$0A
  2754 1DB2 8D 67 2B			sta CALCOBSTACLEADDR.X
  2755 1DB5 20 95 13			jsr CALCOBSTACLEADDR
  2756 1DB8 B4 17			ldy :STACKORIGIN-1,x
  2757 1DBA B5 18			lda :STACKORIGIN,x
  2758 1DBC 99 60 00			sta adr.OBSTACLES,y
  2759 1DBF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2760 1DC1 99 61 00			sta adr.OBSTACLES+1,y
  2761 1DC4 CA				dex
  2762 1DC5 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2763 1DC9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2764 1DCD A9 12			lda #$12
  2765 1DCF 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2766 1DD2 A9 1E			lda #$1E
  2767 1DD4 8D 67 2B			sta CALCOBSTACLEADDR.X
  2768 1DD7 20 95 13			jsr CALCOBSTACLEADDR
  2769 1DDA B4 17			ldy :STACKORIGIN-1,x
  2770 1DDC B5 18			lda :STACKORIGIN,x
  2771 1DDE 99 60 00			sta adr.OBSTACLES,y
  2772 1DE1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2773 1DE3 99 61 00			sta adr.OBSTACLES+1,y
  2774 1DE6 CA				dex
  2775
  2776 				; optimize FAIL (1, levels.inc), line = 22
  2777
  2778 1DE7 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2779 1DEB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2780 1DEF A9 02			lda #$02
  2781 1DF1 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2782 1DF4 A9 14			lda #$14
  2783 1DF6 8D 67 2B			sta CALCOBSTACLEADDR.X
  2784 1DF9 20 95 13			jsr CALCOBSTACLEADDR
  2785 1DFC B4 17			ldy :STACKORIGIN-1,x
  2786 1DFE B5 18			lda :STACKORIGIN,x
  2787 1E00 99 60 00			sta adr.OBSTACLES,y
  2788 1E03 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2789 1E05 99 61 00			sta adr.OBSTACLES+1,y
  2790 1E08 CA				dex
  2791 1E09 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2792 1E0D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2793 1E11 A9 16			lda #$16
  2794 1E13 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2795 1E16 A9 14			lda #$14
  2796 1E18 8D 67 2B			sta CALCOBSTACLEADDR.X
  2797 1E1B 20 95 13			jsr CALCOBSTACLEADDR
  2798 1E1E B4 17			ldy :STACKORIGIN-1,x
  2799 1E20 B5 18			lda :STACKORIGIN,x
  2800 1E22 99 60 00			sta adr.OBSTACLES,y
  2801 1E25 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2802 1E27 99 61 00			sta adr.OBSTACLES+1,y
  2803 1E2A CA				dex
  2804 1E2B CA				dex
  2805 1E2C			@exit
  2806 					.ifdef @new
  2807 					lda <@VarData
  2808 					sta :ztmp
  2809 					lda >@VarData
  2810 					ldy #@VarDataSize-1
  2811 					jmp @FreeMem
  2812 					els
  2813 1E2C 60				rts						; ret
  2814 					eif
  2815 				.endl
  2816
  2817 1E2D			.local	SETLEVEL02					; PROCEDURE
  2818
  2819 				; optimize OK (levels.inc), line = 29
  2820
  2821 1E2D A9 01			lda #$01
  2822 1E2F 8D 73 2B			sta SETPLAYER.ISALIVE
  2823 1E32 A9 62			lda #$62
  2824 1E34 8D 72 2B			sta SETPLAYER.COLOUR
  2825 1E37 A9 00			lda #$00
  2826 1E39 8D 71 2B			sta SETPLAYER.BRAIN
  2827 1E3C A9 08			lda #$08
  2828 1E3E 8D 70 2B			sta SETPLAYER.DIR
  2829 1E41 A9 0C			lda #$0C
  2830 1E43 8D 6F 2B			sta SETPLAYER.Y
  2831 1E46 A9 0A			lda #$0A
  2832 1E48 8D 6E 2B			sta SETPLAYER.X
  2833 1E4B AD 23 2B			lda PLAYER1
  2834 1E4E 8D 6C 2B			sta SETPLAYER.P
  2835 1E51 AD 24 2B			lda PLAYER1+1
  2836 1E54 8D 6D 2B			sta SETPLAYER.P+1
  2837 1E57 20 B3 15			jsr SETPLAYER
  2838
  2839 				; optimize OK (levels.inc), line = 30
  2840
  2841 1E5A A9 01			lda #$01
  2842 1E5C 8D 73 2B			sta SETPLAYER.ISALIVE
  2843 1E5F A9 5D			lda #$5D
  2844 1E61 8D 72 2B			sta SETPLAYER.COLOUR
  2845 1E64 A9 03			lda #$03
  2846 1E66 8D 71 2B			sta SETPLAYER.BRAIN
  2847 1E69 A9 04			lda #$04
  2848 1E6B 8D 70 2B			sta SETPLAYER.DIR
  2849 1E6E A9 0C			lda #$0C
  2850 1E70 8D 6F 2B			sta SETPLAYER.Y
  2851 1E73 A9 1E			lda #$1E
  2852 1E75 8D 6E 2B			sta SETPLAYER.X
  2853 1E78 AD 25 2B			lda PLAYER2
  2854 1E7B 8D 6C 2B			sta SETPLAYER.P
  2855 1E7E AD 26 2B			lda PLAYER2+1
  2856 1E81 8D 6D 2B			sta SETPLAYER.P+1
  2857 1E84 20 B3 15			jsr SETPLAYER
  2858
  2859 				; optimize FAIL (1, levels.inc), line = 32
  2860
  2861 1E87 E8				inx
  2862 1E88 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2863 1E8C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2864 1E8E A9 06			lda #$06
  2865 1E90 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2866 1E93 A9 0A			lda #$0A
  2867 1E95 8D 67 2B			sta CALCOBSTACLEADDR.X
  2868 1E98 20 95 13			jsr CALCOBSTACLEADDR
  2869 1E9B B4 17			ldy :STACKORIGIN-1,x
  2870 1E9D B5 18			lda :STACKORIGIN,x
  2871 1E9F 99 60 00			sta adr.OBSTACLES,y
  2872 1EA2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2873 1EA4 99 61 00			sta adr.OBSTACLES+1,y
  2874 1EA7 CA				dex
  2875 1EA8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2876 1EAC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2877 1EB0 A9 06			lda #$06
  2878 1EB2 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2879 1EB5 A9 1E			lda #$1E
  2880 1EB7 8D 67 2B			sta CALCOBSTACLEADDR.X
  2881 1EBA 20 95 13			jsr CALCOBSTACLEADDR
  2882 1EBD B4 17			ldy :STACKORIGIN-1,x
  2883 1EBF B5 18			lda :STACKORIGIN,x
  2884 1EC1 99 60 00			sta adr.OBSTACLES,y
  2885 1EC4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2886 1EC6 99 61 00			sta adr.OBSTACLES+1,y
  2887 1EC9 CA				dex
  2888
  2889 				; optimize FAIL (1, levels.inc), line = 33
  2890
  2891 1ECA A9 04 95 18			mva #$04 :STACKORIGIN,x
  2892 1ECE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2893 1ED2 A9 12			lda #$12
  2894 1ED4 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2895 1ED7 A9 0A			lda #$0A
  2896 1ED9 8D 67 2B			sta CALCOBSTACLEADDR.X
  2897 1EDC 20 95 13			jsr CALCOBSTACLEADDR
  2898 1EDF B4 17			ldy :STACKORIGIN-1,x
  2899 1EE1 B5 18			lda :STACKORIGIN,x
  2900 1EE3 99 60 00			sta adr.OBSTACLES,y
  2901 1EE6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2902 1EE8 99 61 00			sta adr.OBSTACLES+1,y
  2903 1EEB CA				dex
  2904 1EEC A9 06 95 18			mva #$06 :STACKORIGIN,x
  2905 1EF0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2906 1EF4 A9 12			lda #$12
  2907 1EF6 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2908 1EF9 A9 1E			lda #$1E
  2909 1EFB 8D 67 2B			sta CALCOBSTACLEADDR.X
  2910 1EFE 20 95 13			jsr CALCOBSTACLEADDR
  2911 1F01 B4 17			ldy :STACKORIGIN-1,x
  2912 1F03 B5 18			lda :STACKORIGIN,x
  2913 1F05 99 60 00			sta adr.OBSTACLES,y
  2914 1F08 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2915 1F0A 99 61 00			sta adr.OBSTACLES+1,y
  2916 1F0D CA				dex
  2917
  2918 				; optimize FAIL (1, levels.inc), line = 34
  2919
  2920 1F0E A9 08 95 18			mva #$08 :STACKORIGIN,x
  2921 1F12 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2922 1F16 A9 02			lda #$02
  2923 1F18 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2924 1F1B A9 14			lda #$14
  2925 1F1D 8D 67 2B			sta CALCOBSTACLEADDR.X
  2926 1F20 20 95 13			jsr CALCOBSTACLEADDR
  2927 1F23 B4 17			ldy :STACKORIGIN-1,x
  2928 1F25 B5 18			lda :STACKORIGIN,x
  2929 1F27 99 60 00			sta adr.OBSTACLES,y
  2930 1F2A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2931 1F2C 99 61 00			sta adr.OBSTACLES+1,y
  2932 1F2F CA				dex
  2933 1F30 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2934 1F34 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2935 1F38 A9 16			lda #$16
  2936 1F3A 8D 68 2B			sta CALCOBSTACLEADDR.Y
  2937 1F3D A9 14			lda #$14
  2938 1F3F 8D 67 2B			sta CALCOBSTACLEADDR.X
  2939 1F42 20 95 13			jsr CALCOBSTACLEADDR
  2940 1F45 B4 17			ldy :STACKORIGIN-1,x
  2941 1F47 B5 18			lda :STACKORIGIN,x
  2942 1F49 99 60 00			sta adr.OBSTACLES,y
  2943 1F4C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2944 1F4E 99 61 00			sta adr.OBSTACLES+1,y
  2945 1F51 CA				dex
  2946 1F52 CA				dex
  2947 1F53			@exit
  2948 					.ifdef @new
  2949 					lda <@VarData
  2950 					sta :ztmp
  2951 					lda >@VarData
  2952 					ldy #@VarDataSize-1
  2953 					jmp @FreeMem
  2954 					els
  2955 1F53 60				rts						; ret
  2956 					eif
  2957 				.endl
  2958
  2959 1F54			.local	SETLEVEL03					; PROCEDURE
  2960
  2961 				; optimize OK (levels.inc), line = 41
  2962
  2963 1F54 A9 01			lda #$01
  2964 1F56 8D 73 2B			sta SETPLAYER.ISALIVE
  2965 1F59 A9 62			lda #$62
  2966 1F5B 8D 72 2B			sta SETPLAYER.COLOUR
  2967 1F5E A9 00			lda #$00
  2968 1F60 8D 71 2B			sta SETPLAYER.BRAIN
  2969 1F63 A9 08			lda #$08
  2970 1F65 8D 70 2B			sta SETPLAYER.DIR
  2971 1F68 A9 0C			lda #$0C
  2972 1F6A 8D 6F 2B			sta SETPLAYER.Y
  2973 1F6D A9 0A			lda #$0A
  2974 1F6F 8D 6E 2B			sta SETPLAYER.X
  2975 1F72 AD 23 2B			lda PLAYER1
  2976 1F75 8D 6C 2B			sta SETPLAYER.P
  2977 1F78 AD 24 2B			lda PLAYER1+1
  2978 1F7B 8D 6D 2B			sta SETPLAYER.P+1
  2979 1F7E 20 B3 15			jsr SETPLAYER
  2980
  2981 				; optimize OK (levels.inc), line = 42
  2982
  2983 1F81 A9 01			lda #$01
  2984 1F83 8D 73 2B			sta SETPLAYER.ISALIVE
  2985 1F86 A9 5D			lda #$5D
  2986 1F88 8D 72 2B			sta SETPLAYER.COLOUR
  2987 1F8B A9 02			lda #$02
  2988 1F8D 8D 71 2B			sta SETPLAYER.BRAIN
  2989 1F90 A9 04			lda #$04
  2990 1F92 8D 70 2B			sta SETPLAYER.DIR
  2991 1F95 A9 0C			lda #$0C
  2992 1F97 8D 6F 2B			sta SETPLAYER.Y
  2993 1F9A A9 1E			lda #$1E
  2994 1F9C 8D 6E 2B			sta SETPLAYER.X
  2995 1F9F AD 25 2B			lda PLAYER2
  2996 1FA2 8D 6C 2B			sta SETPLAYER.P
  2997 1FA5 AD 26 2B			lda PLAYER2+1
  2998 1FA8 8D 6D 2B			sta SETPLAYER.P+1
  2999 1FAB 20 B3 15			jsr SETPLAYER
  3000
  3001 				; optimize FAIL (1, levels.inc), line = 44
  3002
  3003 1FAE E8				inx
  3004 1FAF A9 00 95 18			mva #$00 :STACKORIGIN,x
  3005 1FB3 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3006 1FB5 A9 06			lda #$06
  3007 1FB7 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3008 1FBA A9 0A			lda #$0A
  3009 1FBC 8D 67 2B			sta CALCOBSTACLEADDR.X
  3010 1FBF 20 95 13			jsr CALCOBSTACLEADDR
  3011 1FC2 B4 17			ldy :STACKORIGIN-1,x
  3012 1FC4 B5 18			lda :STACKORIGIN,x
  3013 1FC6 99 60 00			sta adr.OBSTACLES,y
  3014 1FC9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3015 1FCB 99 61 00			sta adr.OBSTACLES+1,y
  3016 1FCE CA				dex
  3017 1FCF A9 02 95 18			mva #$02 :STACKORIGIN,x
  3018 1FD3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3019 1FD7 A9 06			lda #$06
  3020 1FD9 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3021 1FDC A9 1E			lda #$1E
  3022 1FDE 8D 67 2B			sta CALCOBSTACLEADDR.X
  3023 1FE1 20 95 13			jsr CALCOBSTACLEADDR
  3024 1FE4 B4 17			ldy :STACKORIGIN-1,x
  3025 1FE6 B5 18			lda :STACKORIGIN,x
  3026 1FE8 99 60 00			sta adr.OBSTACLES,y
  3027 1FEB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3028 1FED 99 61 00			sta adr.OBSTACLES+1,y
  3029 1FF0 CA				dex
  3030
  3031 				; optimize FAIL (1, levels.inc), line = 45
  3032
  3033 1FF1 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3034 1FF5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3035 1FF9 A9 12			lda #$12
  3036 1FFB 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3037 1FFE A9 0A			lda #$0A
  3038 2000 8D 67 2B			sta CALCOBSTACLEADDR.X
  3039 2003 20 95 13			jsr CALCOBSTACLEADDR
  3040 2006 B4 17			ldy :STACKORIGIN-1,x
  3041 2008 B5 18			lda :STACKORIGIN,x
  3042 200A 99 60 00			sta adr.OBSTACLES,y
  3043 200D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3044 200F 99 61 00			sta adr.OBSTACLES+1,y
  3045 2012 CA				dex
  3046 2013 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3047 2017 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3048 201B A9 12			lda #$12
  3049 201D 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3050 2020 A9 1E			lda #$1E
  3051 2022 8D 67 2B			sta CALCOBSTACLEADDR.X
  3052 2025 20 95 13			jsr CALCOBSTACLEADDR
  3053 2028 B4 17			ldy :STACKORIGIN-1,x
  3054 202A B5 18			lda :STACKORIGIN,x
  3055 202C 99 60 00			sta adr.OBSTACLES,y
  3056 202F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3057 2031 99 61 00			sta adr.OBSTACLES+1,y
  3058 2034 CA				dex
  3059
  3060 				; optimize FAIL (1, levels.inc), line = 46
  3061
  3062 2035 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3063 2039 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3064 203D A9 0C			lda #$0C
  3065 203F 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3066 2042 A9 01			lda #$01
  3067 2044 8D 67 2B			sta CALCOBSTACLEADDR.X
  3068 2047 20 95 13			jsr CALCOBSTACLEADDR
  3069 204A B4 17			ldy :STACKORIGIN-1,x
  3070 204C B5 18			lda :STACKORIGIN,x
  3071 204E 99 60 00			sta adr.OBSTACLES,y
  3072 2051 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3073 2053 99 61 00			sta adr.OBSTACLES+1,y
  3074 2056 CA				dex
  3075 2057 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3076 205B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3077 205F A9 02			lda #$02
  3078 2061 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3079 2064 A9 14			lda #$14
  3080 2066 8D 67 2B			sta CALCOBSTACLEADDR.X
  3081 2069 20 95 13			jsr CALCOBSTACLEADDR
  3082 206C B4 17			ldy :STACKORIGIN-1,x
  3083 206E B5 18			lda :STACKORIGIN,x
  3084 2070 99 60 00			sta adr.OBSTACLES,y
  3085 2073 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3086 2075 99 61 00			sta adr.OBSTACLES+1,y
  3087 2078 CA				dex
  3088
  3089 				; optimize FAIL (1, levels.inc), line = 47
  3090
  3091 2079 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3092 207D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3093 2081 A9 16			lda #$16
  3094 2083 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3095 2086 A9 14			lda #$14
  3096 2088 8D 67 2B			sta CALCOBSTACLEADDR.X
  3097 208B 20 95 13			jsr CALCOBSTACLEADDR
  3098 208E B4 17			ldy :STACKORIGIN-1,x
  3099 2090 B5 18			lda :STACKORIGIN,x
  3100 2092 99 60 00			sta adr.OBSTACLES,y
  3101 2095 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3102 2097 99 61 00			sta adr.OBSTACLES+1,y
  3103 209A CA				dex
  3104 209B CA				dex
  3105 209C			@exit
  3106 					.ifdef @new
  3107 					lda <@VarData
  3108 					sta :ztmp
  3109 					lda >@VarData
  3110 					ldy #@VarDataSize-1
  3111 					jmp @FreeMem
  3112 					els
  3113 209C 60				rts						; ret
  3114 					eif
  3115 				.endl
  3116
  3117 209D			.local	SETLEVEL04					; PROCEDURE
  3118
  3119 				; optimize OK (levels.inc), line = 54
  3120
  3121 209D A9 01			lda #$01
  3122 209F 8D 73 2B			sta SETPLAYER.ISALIVE
  3123 20A2 A9 62			lda #$62
  3124 20A4 8D 72 2B			sta SETPLAYER.COLOUR
  3125 20A7 A9 00			lda #$00
  3126 20A9 8D 71 2B			sta SETPLAYER.BRAIN
  3127 20AC A9 04			lda #$04
  3128 20AE 8D 70 2B			sta SETPLAYER.DIR
  3129 20B1 A9 0C			lda #$0C
  3130 20B3 8D 6F 2B			sta SETPLAYER.Y
  3131 20B6 A9 12			lda #$12
  3132 20B8 8D 6E 2B			sta SETPLAYER.X
  3133 20BB AD 23 2B			lda PLAYER1
  3134 20BE 8D 6C 2B			sta SETPLAYER.P
  3135 20C1 AD 24 2B			lda PLAYER1+1
  3136 20C4 8D 6D 2B			sta SETPLAYER.P+1
  3137 20C7 20 B3 15			jsr SETPLAYER
  3138
  3139 				; optimize OK (levels.inc), line = 55
  3140
  3141 20CA A9 01			lda #$01
  3142 20CC 8D 73 2B			sta SETPLAYER.ISALIVE
  3143 20CF A9 5D			lda #$5D
  3144 20D1 8D 72 2B			sta SETPLAYER.COLOUR
  3145 20D4 A9 04			lda #$04
  3146 20D6 8D 71 2B			sta SETPLAYER.BRAIN
  3147 20D9 A9 08			lda #$08
  3148 20DB 8D 70 2B			sta SETPLAYER.DIR
  3149 20DE A9 0C			lda #$0C
  3150 20E0 8D 6F 2B			sta SETPLAYER.Y
  3151 20E3 A9 16			lda #$16
  3152 20E5 8D 6E 2B			sta SETPLAYER.X
  3153 20E8 AD 25 2B			lda PLAYER2
  3154 20EB 8D 6C 2B			sta SETPLAYER.P
  3155 20EE AD 26 2B			lda PLAYER2+1
  3156 20F1 8D 6D 2B			sta SETPLAYER.P+1
  3157 20F4 20 B3 15			jsr SETPLAYER
  3158
  3159 				; optimize FAIL (1, levels.inc), line = 57
  3160
  3161 20F7 E8				inx
  3162 20F8 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3163 20FC 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3164 20FE A9 06			lda #$06
  3165 2100 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3166 2103 A9 0A			lda #$0A
  3167 2105 8D 67 2B			sta CALCOBSTACLEADDR.X
  3168 2108 20 95 13			jsr CALCOBSTACLEADDR
  3169 210B B4 17			ldy :STACKORIGIN-1,x
  3170 210D B5 18			lda :STACKORIGIN,x
  3171 210F 99 60 00			sta adr.OBSTACLES,y
  3172 2112 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3173 2114 99 61 00			sta adr.OBSTACLES+1,y
  3174 2117 CA				dex
  3175 2118 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3176 211C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3177 2120 A9 06			lda #$06
  3178 2122 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3179 2125 A9 1E			lda #$1E
  3180 2127 8D 67 2B			sta CALCOBSTACLEADDR.X
  3181 212A 20 95 13			jsr CALCOBSTACLEADDR
  3182 212D B4 17			ldy :STACKORIGIN-1,x
  3183 212F B5 18			lda :STACKORIGIN,x
  3184 2131 99 60 00			sta adr.OBSTACLES,y
  3185 2134 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3186 2136 99 61 00			sta adr.OBSTACLES+1,y
  3187 2139 CA				dex
  3188
  3189 				; optimize FAIL (1, levels.inc), line = 58
  3190
  3191 213A A9 04 95 18			mva #$04 :STACKORIGIN,x
  3192 213E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3193 2142 A9 12			lda #$12
  3194 2144 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3195 2147 A9 0A			lda #$0A
  3196 2149 8D 67 2B			sta CALCOBSTACLEADDR.X
  3197 214C 20 95 13			jsr CALCOBSTACLEADDR
  3198 214F B4 17			ldy :STACKORIGIN-1,x
  3199 2151 B5 18			lda :STACKORIGIN,x
  3200 2153 99 60 00			sta adr.OBSTACLES,y
  3201 2156 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3202 2158 99 61 00			sta adr.OBSTACLES+1,y
  3203 215B CA				dex
  3204 215C A9 06 95 18			mva #$06 :STACKORIGIN,x
  3205 2160 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3206 2164 A9 12			lda #$12
  3207 2166 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3208 2169 A9 1E			lda #$1E
  3209 216B 8D 67 2B			sta CALCOBSTACLEADDR.X
  3210 216E 20 95 13			jsr CALCOBSTACLEADDR
  3211 2171 B4 17			ldy :STACKORIGIN-1,x
  3212 2173 B5 18			lda :STACKORIGIN,x
  3213 2175 99 60 00			sta adr.OBSTACLES,y
  3214 2178 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3215 217A 99 61 00			sta adr.OBSTACLES+1,y
  3216 217D CA				dex
  3217
  3218 				; optimize FAIL (1, levels.inc), line = 59
  3219
  3220 217E A9 08 95 18			mva #$08 :STACKORIGIN,x
  3221 2182 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3222 2186 A9 0C			lda #$0C
  3223 2188 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3224 218B A9 01			lda #$01
  3225 218D 8D 67 2B			sta CALCOBSTACLEADDR.X
  3226 2190 20 95 13			jsr CALCOBSTACLEADDR
  3227 2193 B4 17			ldy :STACKORIGIN-1,x
  3228 2195 B5 18			lda :STACKORIGIN,x
  3229 2197 99 60 00			sta adr.OBSTACLES,y
  3230 219A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3231 219C 99 61 00			sta adr.OBSTACLES+1,y
  3232 219F CA				dex
  3233 21A0 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3234 21A4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3235 21A8 A9 02			lda #$02
  3236 21AA 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3237 21AD A9 14			lda #$14
  3238 21AF 8D 67 2B			sta CALCOBSTACLEADDR.X
  3239 21B2 20 95 13			jsr CALCOBSTACLEADDR
  3240 21B5 B4 17			ldy :STACKORIGIN-1,x
  3241 21B7 B5 18			lda :STACKORIGIN,x
  3242 21B9 99 60 00			sta adr.OBSTACLES,y
  3243 21BC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3244 21BE 99 61 00			sta adr.OBSTACLES+1,y
  3245 21C1 CA				dex
  3246
  3247 				; optimize FAIL (1, levels.inc), line = 60
  3248
  3249 21C2 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3250 21C6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3251 21CA A9 16			lda #$16
  3252 21CC 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3253 21CF A9 14			lda #$14
  3254 21D1 8D 67 2B			sta CALCOBSTACLEADDR.X
  3255 21D4 20 95 13			jsr CALCOBSTACLEADDR
  3256 21D7 B4 17			ldy :STACKORIGIN-1,x
  3257 21D9 B5 18			lda :STACKORIGIN,x
  3258 21DB 99 60 00			sta adr.OBSTACLES,y
  3259 21DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3260 21E0 99 61 00			sta adr.OBSTACLES+1,y
  3261 21E3 CA				dex
  3262 21E4 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3263 21E8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3264 21EC A9 0C			lda #$0C
  3265 21EE 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3266 21F1 A9 14			lda #$14
  3267 21F3 8D 67 2B			sta CALCOBSTACLEADDR.X
  3268 21F6 20 95 13			jsr CALCOBSTACLEADDR
  3269 21F9 B4 17			ldy :STACKORIGIN-1,x
  3270 21FB B5 18			lda :STACKORIGIN,x
  3271 21FD 99 60 00			sta adr.OBSTACLES,y
  3272 2200 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3273 2202 99 61 00			sta adr.OBSTACLES+1,y
  3274 2205 CA				dex
  3275 2206 CA				dex
  3276 2207			@exit
  3277 					.ifdef @new
  3278 					lda <@VarData
  3279 					sta :ztmp
  3280 					lda >@VarData
  3281 					ldy #@VarDataSize-1
  3282 					jmp @FreeMem
  3283 					els
  3284 2207 60				rts						; ret
  3285 					eif
  3286 				.endl
  3287
  3288 2208			.local	SETLEVEL05					; PROCEDURE
  3289
  3290 				; optimize OK (levels.inc), line = 67
  3291
  3292 2208 A9 01			lda #$01
  3293 220A 8D 73 2B			sta SETPLAYER.ISALIVE
  3294 220D A9 62			lda #$62
  3295 220F 8D 72 2B			sta SETPLAYER.COLOUR
  3296 2212 A9 00			lda #$00
  3297 2214 8D 71 2B			sta SETPLAYER.BRAIN
  3298 2217 A9 08			lda #$08
  3299 2219 8D 70 2B			sta SETPLAYER.DIR
  3300 221C A9 0C			lda #$0C
  3301 221E 8D 6F 2B			sta SETPLAYER.Y
  3302 2221 A9 0A			lda #$0A
  3303 2223 8D 6E 2B			sta SETPLAYER.X
  3304 2226 AD 23 2B			lda PLAYER1
  3305 2229 8D 6C 2B			sta SETPLAYER.P
  3306 222C AD 24 2B			lda PLAYER1+1
  3307 222F 8D 6D 2B			sta SETPLAYER.P+1
  3308 2232 20 B3 15			jsr SETPLAYER
  3309
  3310 				; optimize OK (levels.inc), line = 68
  3311
  3312 2235 A9 01			lda #$01
  3313 2237 8D 73 2B			sta SETPLAYER.ISALIVE
  3314 223A A9 5D			lda #$5D
  3315 223C 8D 72 2B			sta SETPLAYER.COLOUR
  3316 223F A9 04			lda #$04
  3317 2241 8D 71 2B			sta SETPLAYER.BRAIN
  3318 2244 8D 70 2B			sta SETPLAYER.DIR
  3319 2247 A9 0C			lda #$0C
  3320 2249 8D 6F 2B			sta SETPLAYER.Y
  3321 224C A9 1E			lda #$1E
  3322 224E 8D 6E 2B			sta SETPLAYER.X
  3323 2251 AD 25 2B			lda PLAYER2
  3324 2254 8D 6C 2B			sta SETPLAYER.P
  3325 2257 AD 26 2B			lda PLAYER2+1
  3326 225A 8D 6D 2B			sta SETPLAYER.P+1
  3327 225D 20 B3 15			jsr SETPLAYER
  3328
  3329 				; optimize OK (levels.inc), line = 69
  3330
  3331 2260 A9 01			lda #$01
  3332 2262 8D 73 2B			sta SETPLAYER.ISALIVE
  3333 2265 A9 71			lda #$71
  3334 2267 8D 72 2B			sta SETPLAYER.COLOUR
  3335 226A A9 03			lda #$03
  3336 226C 8D 71 2B			sta SETPLAYER.BRAIN
  3337 226F A9 02			lda #$02
  3338 2271 8D 70 2B			sta SETPLAYER.DIR
  3339 2274 A9 04			lda #$04
  3340 2276 8D 6F 2B			sta SETPLAYER.Y
  3341 2279 A9 14			lda #$14
  3342 227B 8D 6E 2B			sta SETPLAYER.X
  3343 227E AD 27 2B			lda PLAYER3
  3344 2281 8D 6C 2B			sta SETPLAYER.P
  3345 2284 AD 28 2B			lda PLAYER3+1
  3346 2287 8D 6D 2B			sta SETPLAYER.P+1
  3347 228A 20 B3 15			jsr SETPLAYER
  3348
  3349 				; optimize OK (levels.inc), line = 70
  3350
  3351 228D A9 01			lda #$01
  3352 228F 8D 73 2B			sta SETPLAYER.ISALIVE
  3353 2292 A9 55			lda #$55
  3354 2294 8D 72 2B			sta SETPLAYER.COLOUR
  3355 2297 A9 02			lda #$02
  3356 2299 8D 71 2B			sta SETPLAYER.BRAIN
  3357 229C A9 01			lda #$01
  3358 229E 8D 70 2B			sta SETPLAYER.DIR
  3359 22A1 A9 12			lda #$12
  3360 22A3 8D 6F 2B			sta SETPLAYER.Y
  3361 22A6 A9 14			lda #$14
  3362 22A8 8D 6E 2B			sta SETPLAYER.X
  3363 22AB AD 29 2B			lda PLAYER4
  3364 22AE 8D 6C 2B			sta SETPLAYER.P
  3365 22B1 AD 2A 2B			lda PLAYER4+1
  3366 22B4 8D 6D 2B			sta SETPLAYER.P+1
  3367 22B7 20 B3 15			jsr SETPLAYER
  3368
  3369 				; optimize FAIL (1, levels.inc), line = 72
  3370
  3371 22BA E8				inx
  3372 22BB A9 00 95 18			mva #$00 :STACKORIGIN,x
  3373 22BF 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3374 22C1 A9 06			lda #$06
  3375 22C3 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3376 22C6 A9 0A			lda #$0A
  3377 22C8 8D 67 2B			sta CALCOBSTACLEADDR.X
  3378 22CB 20 95 13			jsr CALCOBSTACLEADDR
  3379 22CE B4 17			ldy :STACKORIGIN-1,x
  3380 22D0 B5 18			lda :STACKORIGIN,x
  3381 22D2 99 60 00			sta adr.OBSTACLES,y
  3382 22D5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3383 22D7 99 61 00			sta adr.OBSTACLES+1,y
  3384 22DA CA				dex
  3385 22DB A9 02 95 18			mva #$02 :STACKORIGIN,x
  3386 22DF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3387 22E3 A9 06			lda #$06
  3388 22E5 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3389 22E8 A9 1E			lda #$1E
  3390 22EA 8D 67 2B			sta CALCOBSTACLEADDR.X
  3391 22ED 20 95 13			jsr CALCOBSTACLEADDR
  3392 22F0 B4 17			ldy :STACKORIGIN-1,x
  3393 22F2 B5 18			lda :STACKORIGIN,x
  3394 22F4 99 60 00			sta adr.OBSTACLES,y
  3395 22F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3396 22F9 99 61 00			sta adr.OBSTACLES+1,y
  3397 22FC CA				dex
  3398
  3399 				; optimize FAIL (1, levels.inc), line = 73
  3400
  3401 22FD A9 04 95 18			mva #$04 :STACKORIGIN,x
  3402 2301 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3403 2305 A9 12			lda #$12
  3404 2307 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3405 230A A9 0A			lda #$0A
  3406 230C 8D 67 2B			sta CALCOBSTACLEADDR.X
  3407 230F 20 95 13			jsr CALCOBSTACLEADDR
  3408 2312 B4 17			ldy :STACKORIGIN-1,x
  3409 2314 B5 18			lda :STACKORIGIN,x
  3410 2316 99 60 00			sta adr.OBSTACLES,y
  3411 2319 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3412 231B 99 61 00			sta adr.OBSTACLES+1,y
  3413 231E CA				dex
  3414 231F A9 06 95 18			mva #$06 :STACKORIGIN,x
  3415 2323 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3416 2327 A9 12			lda #$12
  3417 2329 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3418 232C A9 1E			lda #$1E
  3419 232E 8D 67 2B			sta CALCOBSTACLEADDR.X
  3420 2331 20 95 13			jsr CALCOBSTACLEADDR
  3421 2334 B4 17			ldy :STACKORIGIN-1,x
  3422 2336 B5 18			lda :STACKORIGIN,x
  3423 2338 99 60 00			sta adr.OBSTACLES,y
  3424 233B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3425 233D 99 61 00			sta adr.OBSTACLES+1,y
  3426 2340 CA				dex
  3427
  3428 				; optimize FAIL (1, levels.inc), line = 74
  3429
  3430 2341 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3431 2345 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3432 2349 A9 0C			lda #$0C
  3433 234B 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3434 234E A9 01			lda #$01
  3435 2350 8D 67 2B			sta CALCOBSTACLEADDR.X
  3436 2353 20 95 13			jsr CALCOBSTACLEADDR
  3437 2356 B4 17			ldy :STACKORIGIN-1,x
  3438 2358 B5 18			lda :STACKORIGIN,x
  3439 235A 99 60 00			sta adr.OBSTACLES,y
  3440 235D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3441 235F 99 61 00			sta adr.OBSTACLES+1,y
  3442 2362 CA				dex
  3443 2363 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3444 2367 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3445 236B A9 02			lda #$02
  3446 236D 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3447 2370 A9 14			lda #$14
  3448 2372 8D 67 2B			sta CALCOBSTACLEADDR.X
  3449 2375 20 95 13			jsr CALCOBSTACLEADDR
  3450 2378 B4 17			ldy :STACKORIGIN-1,x
  3451 237A B5 18			lda :STACKORIGIN,x
  3452 237C 99 60 00			sta adr.OBSTACLES,y
  3453 237F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3454 2381 99 61 00			sta adr.OBSTACLES+1,y
  3455 2384 CA				dex
  3456
  3457 				; optimize FAIL (1, levels.inc), line = 75
  3458
  3459 2385 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3460 2389 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3461 238D A9 16			lda #$16
  3462 238F 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3463 2392 A9 14			lda #$14
  3464 2394 8D 67 2B			sta CALCOBSTACLEADDR.X
  3465 2397 20 95 13			jsr CALCOBSTACLEADDR
  3466 239A B4 17			ldy :STACKORIGIN-1,x
  3467 239C B5 18			lda :STACKORIGIN,x
  3468 239E 99 60 00			sta adr.OBSTACLES,y
  3469 23A1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3470 23A3 99 61 00			sta adr.OBSTACLES+1,y
  3471 23A6 CA				dex
  3472 23A7 CA				dex
  3473 23A8			@exit
  3474 					.ifdef @new
  3475 					lda <@VarData
  3476 					sta :ztmp
  3477 					lda >@VarData
  3478 					ldy #@VarDataSize-1
  3479 					jmp @FreeMem
  3480 					els
  3481 23A8 60				rts						; ret
  3482 					eif
  3483 				.endl
  3484
  3485 23A9			.local	SETLEVEL06					; PROCEDURE
  3486
  3487 				; optimize OK (levels.inc), line = 82
  3488
  3489 23A9 A9 01			lda #$01
  3490 23AB 8D 73 2B			sta SETPLAYER.ISALIVE
  3491 23AE A9 62			lda #$62
  3492 23B0 8D 72 2B			sta SETPLAYER.COLOUR
  3493 23B3 A9 00			lda #$00
  3494 23B5 8D 71 2B			sta SETPLAYER.BRAIN
  3495 23B8 A9 04			lda #$04
  3496 23BA 8D 70 2B			sta SETPLAYER.DIR
  3497 23BD A9 0C			lda #$0C
  3498 23BF 8D 6F 2B			sta SETPLAYER.Y
  3499 23C2 A9 12			lda #$12
  3500 23C4 8D 6E 2B			sta SETPLAYER.X
  3501 23C7 AD 23 2B			lda PLAYER1
  3502 23CA 8D 6C 2B			sta SETPLAYER.P
  3503 23CD AD 24 2B			lda PLAYER1+1
  3504 23D0 8D 6D 2B			sta SETPLAYER.P+1
  3505 23D3 20 B3 15			jsr SETPLAYER
  3506
  3507 				; optimize OK (levels.inc), line = 83
  3508
  3509 23D6 A9 01			lda #$01
  3510 23D8 8D 73 2B			sta SETPLAYER.ISALIVE
  3511 23DB A9 5D			lda #$5D
  3512 23DD 8D 72 2B			sta SETPLAYER.COLOUR
  3513 23E0 A9 02			lda #$02
  3514 23E2 8D 71 2B			sta SETPLAYER.BRAIN
  3515 23E5 A9 08			lda #$08
  3516 23E7 8D 70 2B			sta SETPLAYER.DIR
  3517 23EA A9 0C			lda #$0C
  3518 23EC 8D 6F 2B			sta SETPLAYER.Y
  3519 23EF A9 16			lda #$16
  3520 23F1 8D 6E 2B			sta SETPLAYER.X
  3521 23F4 AD 25 2B			lda PLAYER2
  3522 23F7 8D 6C 2B			sta SETPLAYER.P
  3523 23FA AD 26 2B			lda PLAYER2+1
  3524 23FD 8D 6D 2B			sta SETPLAYER.P+1
  3525 2400 20 B3 15			jsr SETPLAYER
  3526
  3527 				; optimize OK (levels.inc), line = 84
  3528
  3529 2403 A9 01			lda #$01
  3530 2405 8D 73 2B			sta SETPLAYER.ISALIVE
  3531 2408 A9 71			lda #$71
  3532 240A 8D 72 2B			sta SETPLAYER.COLOUR
  3533 240D A9 02			lda #$02
  3534 240F 8D 71 2B			sta SETPLAYER.BRAIN
  3535 2412 8D 70 2B			sta SETPLAYER.DIR
  3536 2415 A9 06			lda #$06
  3537 2417 8D 6F 2B			sta SETPLAYER.Y
  3538 241A 8D 6E 2B			sta SETPLAYER.X
  3539 241D AD 27 2B			lda PLAYER3
  3540 2420 8D 6C 2B			sta SETPLAYER.P
  3541 2423 AD 28 2B			lda PLAYER3+1
  3542 2426 8D 6D 2B			sta SETPLAYER.P+1
  3543 2429 20 B3 15			jsr SETPLAYER
  3544
  3545 				; optimize OK (levels.inc), line = 85
  3546
  3547 242C A9 01			lda #$01
  3548 242E 8D 73 2B			sta SETPLAYER.ISALIVE
  3549 2431 A9 55			lda #$55
  3550 2433 8D 72 2B			sta SETPLAYER.COLOUR
  3551 2436 A9 03			lda #$03
  3552 2438 8D 71 2B			sta SETPLAYER.BRAIN
  3553 243B A9 08			lda #$08
  3554 243D 8D 70 2B			sta SETPLAYER.DIR
  3555 2440 A9 12			lda #$12
  3556 2442 8D 6F 2B			sta SETPLAYER.Y
  3557 2445 A9 24			lda #$24
  3558 2447 8D 6E 2B			sta SETPLAYER.X
  3559 244A AD 29 2B			lda PLAYER4
  3560 244D 8D 6C 2B			sta SETPLAYER.P
  3561 2450 AD 2A 2B			lda PLAYER4+1
  3562 2453 8D 6D 2B			sta SETPLAYER.P+1
  3563 2456 20 B3 15			jsr SETPLAYER
  3564
  3565 				; optimize FAIL (1, levels.inc), line = 87
  3566
  3567 2459 E8				inx
  3568 245A A9 00 95 18			mva #$00 :STACKORIGIN,x
  3569 245E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3570 2460 A9 06			lda #$06
  3571 2462 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3572 2465 A9 0A			lda #$0A
  3573 2467 8D 67 2B			sta CALCOBSTACLEADDR.X
  3574 246A 20 95 13			jsr CALCOBSTACLEADDR
  3575 246D B4 17			ldy :STACKORIGIN-1,x
  3576 246F B5 18			lda :STACKORIGIN,x
  3577 2471 99 60 00			sta adr.OBSTACLES,y
  3578 2474 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3579 2476 99 61 00			sta adr.OBSTACLES+1,y
  3580 2479 CA				dex
  3581 247A A9 02 95 18			mva #$02 :STACKORIGIN,x
  3582 247E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3583 2482 A9 06			lda #$06
  3584 2484 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3585 2487 A9 1E			lda #$1E
  3586 2489 8D 67 2B			sta CALCOBSTACLEADDR.X
  3587 248C 20 95 13			jsr CALCOBSTACLEADDR
  3588 248F B4 17			ldy :STACKORIGIN-1,x
  3589 2491 B5 18			lda :STACKORIGIN,x
  3590 2493 99 60 00			sta adr.OBSTACLES,y
  3591 2496 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3592 2498 99 61 00			sta adr.OBSTACLES+1,y
  3593 249B CA				dex
  3594
  3595 				; optimize FAIL (1, levels.inc), line = 88
  3596
  3597 249C A9 04 95 18			mva #$04 :STACKORIGIN,x
  3598 24A0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3599 24A4 A9 12			lda #$12
  3600 24A6 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3601 24A9 A9 0A			lda #$0A
  3602 24AB 8D 67 2B			sta CALCOBSTACLEADDR.X
  3603 24AE 20 95 13			jsr CALCOBSTACLEADDR
  3604 24B1 B4 17			ldy :STACKORIGIN-1,x
  3605 24B3 B5 18			lda :STACKORIGIN,x
  3606 24B5 99 60 00			sta adr.OBSTACLES,y
  3607 24B8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3608 24BA 99 61 00			sta adr.OBSTACLES+1,y
  3609 24BD CA				dex
  3610 24BE A9 06 95 18			mva #$06 :STACKORIGIN,x
  3611 24C2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3612 24C6 A9 12			lda #$12
  3613 24C8 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3614 24CB A9 1E			lda #$1E
  3615 24CD 8D 67 2B			sta CALCOBSTACLEADDR.X
  3616 24D0 20 95 13			jsr CALCOBSTACLEADDR
  3617 24D3 B4 17			ldy :STACKORIGIN-1,x
  3618 24D5 B5 18			lda :STACKORIGIN,x
  3619 24D7 99 60 00			sta adr.OBSTACLES,y
  3620 24DA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3621 24DC 99 61 00			sta adr.OBSTACLES+1,y
  3622 24DF CA				dex
  3623
  3624 				; optimize FAIL (1, levels.inc), line = 89
  3625
  3626 24E0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3627 24E4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3628 24E8 A9 0C			lda #$0C
  3629 24EA 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3630 24ED A9 01			lda #$01
  3631 24EF 8D 67 2B			sta CALCOBSTACLEADDR.X
  3632 24F2 20 95 13			jsr CALCOBSTACLEADDR
  3633 24F5 B4 17			ldy :STACKORIGIN-1,x
  3634 24F7 B5 18			lda :STACKORIGIN,x
  3635 24F9 99 60 00			sta adr.OBSTACLES,y
  3636 24FC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3637 24FE 99 61 00			sta adr.OBSTACLES+1,y
  3638 2501 CA				dex
  3639 2502 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3640 2506 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3641 250A A9 02			lda #$02
  3642 250C 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3643 250F A9 14			lda #$14
  3644 2511 8D 67 2B			sta CALCOBSTACLEADDR.X
  3645 2514 20 95 13			jsr CALCOBSTACLEADDR
  3646 2517 B4 17			ldy :STACKORIGIN-1,x
  3647 2519 B5 18			lda :STACKORIGIN,x
  3648 251B 99 60 00			sta adr.OBSTACLES,y
  3649 251E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3650 2520 99 61 00			sta adr.OBSTACLES+1,y
  3651 2523 CA				dex
  3652
  3653 				; optimize FAIL (1, levels.inc), line = 90
  3654
  3655 2524 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3656 2528 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3657 252C A9 16			lda #$16
  3658 252E 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3659 2531 A9 14			lda #$14
  3660 2533 8D 67 2B			sta CALCOBSTACLEADDR.X
  3661 2536 20 95 13			jsr CALCOBSTACLEADDR
  3662 2539 B4 17			ldy :STACKORIGIN-1,x
  3663 253B B5 18			lda :STACKORIGIN,x
  3664 253D 99 60 00			sta adr.OBSTACLES,y
  3665 2540 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3666 2542 99 61 00			sta adr.OBSTACLES+1,y
  3667 2545 CA				dex
  3668 2546 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3669 254A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3670 254E A9 0C			lda #$0C
  3671 2550 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3672 2553 A9 14			lda #$14
  3673 2555 8D 67 2B			sta CALCOBSTACLEADDR.X
  3674 2558 20 95 13			jsr CALCOBSTACLEADDR
  3675 255B B4 17			ldy :STACKORIGIN-1,x
  3676 255D B5 18			lda :STACKORIGIN,x
  3677 255F 99 60 00			sta adr.OBSTACLES,y
  3678 2562 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3679 2564 99 61 00			sta adr.OBSTACLES+1,y
  3680 2567 CA				dex
  3681 2568 CA				dex
  3682 2569			@exit
  3683 					.ifdef @new
  3684 					lda <@VarData
  3685 					sta :ztmp
  3686 					lda >@VarData
  3687 					ldy #@VarDataSize-1
  3688 					jmp @FreeMem
  3689 					els
  3690 2569 60				rts						; ret
  3691 					eif
  3692 				.endl
  3693
  3694 256A			.local	SETLEVEL07					; PROCEDURE
  3695
  3696 				; optimize OK (levels.inc), line = 97
  3697
  3698 256A A9 01			lda #$01
  3699 256C 8D 73 2B			sta SETPLAYER.ISALIVE
  3700 256F A9 62			lda #$62
  3701 2571 8D 72 2B			sta SETPLAYER.COLOUR
  3702 2574 A9 00			lda #$00
  3703 2576 8D 71 2B			sta SETPLAYER.BRAIN
  3704 2579 A9 04			lda #$04
  3705 257B 8D 70 2B			sta SETPLAYER.DIR
  3706 257E A9 0C			lda #$0C
  3707 2580 8D 6F 2B			sta SETPLAYER.Y
  3708 2583 A9 12			lda #$12
  3709 2585 8D 6E 2B			sta SETPLAYER.X
  3710 2588 AD 23 2B			lda PLAYER1
  3711 258B 8D 6C 2B			sta SETPLAYER.P
  3712 258E AD 24 2B			lda PLAYER1+1
  3713 2591 8D 6D 2B			sta SETPLAYER.P+1
  3714 2594 20 B3 15			jsr SETPLAYER
  3715
  3716 				; optimize OK (levels.inc), line = 98
  3717
  3718 2597 A9 01			lda #$01
  3719 2599 8D 73 2B			sta SETPLAYER.ISALIVE
  3720 259C A9 5D			lda #$5D
  3721 259E 8D 72 2B			sta SETPLAYER.COLOUR
  3722 25A1 A9 03			lda #$03
  3723 25A3 8D 71 2B			sta SETPLAYER.BRAIN
  3724 25A6 A9 08			lda #$08
  3725 25A8 8D 70 2B			sta SETPLAYER.DIR
  3726 25AB A9 17			lda #$17
  3727 25AD 8D 6F 2B			sta SETPLAYER.Y
  3728 25B0 A9 01			lda #$01
  3729 25B2 8D 6E 2B			sta SETPLAYER.X
  3730 25B5 AD 25 2B			lda PLAYER2
  3731 25B8 8D 6C 2B			sta SETPLAYER.P
  3732 25BB AD 26 2B			lda PLAYER2+1
  3733 25BE 8D 6D 2B			sta SETPLAYER.P+1
  3734 25C1 20 B3 15			jsr SETPLAYER
  3735
  3736 				; optimize OK (levels.inc), line = 99
  3737
  3738 25C4 A9 01			lda #$01
  3739 25C6 8D 73 2B			sta SETPLAYER.ISALIVE
  3740 25C9 A9 71			lda #$71
  3741 25CB 8D 72 2B			sta SETPLAYER.COLOUR
  3742 25CE A9 03			lda #$03
  3743 25D0 8D 71 2B			sta SETPLAYER.BRAIN
  3744 25D3 A9 02			lda #$02
  3745 25D5 8D 70 2B			sta SETPLAYER.DIR
  3746 25D8 A9 04			lda #$04
  3747 25DA 8D 6F 2B			sta SETPLAYER.Y
  3748 25DD A9 1E			lda #$1E
  3749 25DF 8D 6E 2B			sta SETPLAYER.X
  3750 25E2 AD 27 2B			lda PLAYER3
  3751 25E5 8D 6C 2B			sta SETPLAYER.P
  3752 25E8 AD 28 2B			lda PLAYER3+1
  3753 25EB 8D 6D 2B			sta SETPLAYER.P+1
  3754 25EE 20 B3 15			jsr SETPLAYER
  3755
  3756 				; optimize OK (levels.inc), line = 100
  3757
  3758 25F1 A9 01			lda #$01
  3759 25F3 8D 73 2B			sta SETPLAYER.ISALIVE
  3760 25F6 A9 55			lda #$55
  3761 25F8 8D 72 2B			sta SETPLAYER.COLOUR
  3762 25FB A9 02			lda #$02
  3763 25FD 8D 71 2B			sta SETPLAYER.BRAIN
  3764 2600 A9 01			lda #$01
  3765 2602 8D 70 2B			sta SETPLAYER.DIR
  3766 2605 A9 15			lda #$15
  3767 2607 8D 6F 2B			sta SETPLAYER.Y
  3768 260A A9 24			lda #$24
  3769 260C 8D 6E 2B			sta SETPLAYER.X
  3770 260F AD 29 2B			lda PLAYER4
  3771 2612 8D 6C 2B			sta SETPLAYER.P
  3772 2615 AD 2A 2B			lda PLAYER4+1
  3773 2618 8D 6D 2B			sta SETPLAYER.P+1
  3774 261B 20 B3 15			jsr SETPLAYER
  3775
  3776 				; optimize FAIL (1, levels.inc), line = 102
  3777
  3778 261E E8				inx
  3779 261F A9 00 95 18			mva #$00 :STACKORIGIN,x
  3780 2623 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3781 2625 A9 06			lda #$06
  3782 2627 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3783 262A A9 0A			lda #$0A
  3784 262C 8D 67 2B			sta CALCOBSTACLEADDR.X
  3785 262F 20 95 13			jsr CALCOBSTACLEADDR
  3786 2632 B4 17			ldy :STACKORIGIN-1,x
  3787 2634 B5 18			lda :STACKORIGIN,x
  3788 2636 99 60 00			sta adr.OBSTACLES,y
  3789 2639 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3790 263B 99 61 00			sta adr.OBSTACLES+1,y
  3791 263E CA				dex
  3792 263F A9 02 95 18			mva #$02 :STACKORIGIN,x
  3793 2643 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3794 2647 A9 06			lda #$06
  3795 2649 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3796 264C A9 1E			lda #$1E
  3797 264E 8D 67 2B			sta CALCOBSTACLEADDR.X
  3798 2651 20 95 13			jsr CALCOBSTACLEADDR
  3799 2654 B4 17			ldy :STACKORIGIN-1,x
  3800 2656 B5 18			lda :STACKORIGIN,x
  3801 2658 99 60 00			sta adr.OBSTACLES,y
  3802 265B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3803 265D 99 61 00			sta adr.OBSTACLES+1,y
  3804 2660 CA				dex
  3805
  3806 				; optimize FAIL (1, levels.inc), line = 103
  3807
  3808 2661 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3809 2665 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3810 2669 A9 12			lda #$12
  3811 266B 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3812 266E A9 0A			lda #$0A
  3813 2670 8D 67 2B			sta CALCOBSTACLEADDR.X
  3814 2673 20 95 13			jsr CALCOBSTACLEADDR
  3815 2676 B4 17			ldy :STACKORIGIN-1,x
  3816 2678 B5 18			lda :STACKORIGIN,x
  3817 267A 99 60 00			sta adr.OBSTACLES,y
  3818 267D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3819 267F 99 61 00			sta adr.OBSTACLES+1,y
  3820 2682 CA				dex
  3821 2683 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3822 2687 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3823 268B A9 12			lda #$12
  3824 268D 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3825 2690 A9 1E			lda #$1E
  3826 2692 8D 67 2B			sta CALCOBSTACLEADDR.X
  3827 2695 20 95 13			jsr CALCOBSTACLEADDR
  3828 2698 B4 17			ldy :STACKORIGIN-1,x
  3829 269A B5 18			lda :STACKORIGIN,x
  3830 269C 99 60 00			sta adr.OBSTACLES,y
  3831 269F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3832 26A1 99 61 00			sta adr.OBSTACLES+1,y
  3833 26A4 CA				dex
  3834
  3835 				; optimize FAIL (1, levels.inc), line = 104
  3836
  3837 26A5 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3838 26A9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3839 26AD A9 0C			lda #$0C
  3840 26AF 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3841 26B2 A9 01			lda #$01
  3842 26B4 8D 67 2B			sta CALCOBSTACLEADDR.X
  3843 26B7 20 95 13			jsr CALCOBSTACLEADDR
  3844 26BA B4 17			ldy :STACKORIGIN-1,x
  3845 26BC B5 18			lda :STACKORIGIN,x
  3846 26BE 99 60 00			sta adr.OBSTACLES,y
  3847 26C1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3848 26C3 99 61 00			sta adr.OBSTACLES+1,y
  3849 26C6 CA				dex
  3850 26C7 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3851 26CB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3852 26CF A9 02			lda #$02
  3853 26D1 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3854 26D4 A9 14			lda #$14
  3855 26D6 8D 67 2B			sta CALCOBSTACLEADDR.X
  3856 26D9 20 95 13			jsr CALCOBSTACLEADDR
  3857 26DC B4 17			ldy :STACKORIGIN-1,x
  3858 26DE B5 18			lda :STACKORIGIN,x
  3859 26E0 99 60 00			sta adr.OBSTACLES,y
  3860 26E3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3861 26E5 99 61 00			sta adr.OBSTACLES+1,y
  3862 26E8 CA				dex
  3863
  3864 				; optimize FAIL (1, levels.inc), line = 105
  3865
  3866 26E9 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3867 26ED A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3868 26F1 A9 16			lda #$16
  3869 26F3 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3870 26F6 A9 14			lda #$14
  3871 26F8 8D 67 2B			sta CALCOBSTACLEADDR.X
  3872 26FB 20 95 13			jsr CALCOBSTACLEADDR
  3873 26FE B4 17			ldy :STACKORIGIN-1,x
  3874 2700 B5 18			lda :STACKORIGIN,x
  3875 2702 99 60 00			sta adr.OBSTACLES,y
  3876 2705 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3877 2707 99 61 00			sta adr.OBSTACLES+1,y
  3878 270A CA				dex
  3879 270B A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3880 270F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3881 2713 A9 0C			lda #$0C
  3882 2715 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3883 2718 A9 14			lda #$14
  3884 271A 8D 67 2B			sta CALCOBSTACLEADDR.X
  3885 271D 20 95 13			jsr CALCOBSTACLEADDR
  3886 2720 B4 17			ldy :STACKORIGIN-1,x
  3887 2722 B5 18			lda :STACKORIGIN,x
  3888 2724 99 60 00			sta adr.OBSTACLES,y
  3889 2727 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3890 2729 99 61 00			sta adr.OBSTACLES+1,y
  3891 272C CA				dex
  3892 272D CA				dex
  3893 272E			@exit
  3894 					.ifdef @new
  3895 					lda <@VarData
  3896 					sta :ztmp
  3897 					lda >@VarData
  3898 					ldy #@VarDataSize-1
  3899 					jmp @FreeMem
  3900 					els
  3901 272E 60				rts						; ret
  3902 					eif
  3903 				.endl
  3904
  3905 272F			.local	SETLEVEL08					; PROCEDURE
  3906
  3907 				; optimize OK (levels.inc), line = 112
  3908
  3909 272F A9 01			lda #$01
  3910 2731 8D 73 2B			sta SETPLAYER.ISALIVE
  3911 2734 A9 62			lda #$62
  3912 2736 8D 72 2B			sta SETPLAYER.COLOUR
  3913 2739 A9 00			lda #$00
  3914 273B 8D 71 2B			sta SETPLAYER.BRAIN
  3915 273E A9 08			lda #$08
  3916 2740 8D 70 2B			sta SETPLAYER.DIR
  3917 2743 A9 17			lda #$17
  3918 2745 8D 6F 2B			sta SETPLAYER.Y
  3919 2748 A9 01			lda #$01
  3920 274A 8D 6E 2B			sta SETPLAYER.X
  3921 274D AD 23 2B			lda PLAYER1
  3922 2750 8D 6C 2B			sta SETPLAYER.P
  3923 2753 AD 24 2B			lda PLAYER1+1
  3924 2756 8D 6D 2B			sta SETPLAYER.P+1
  3925 2759 20 B3 15			jsr SETPLAYER
  3926
  3927 				; optimize OK (levels.inc), line = 113
  3928
  3929 275C A9 01			lda #$01
  3930 275E 8D 73 2B			sta SETPLAYER.ISALIVE
  3931 2761 A9 5D			lda #$5D
  3932 2763 8D 72 2B			sta SETPLAYER.COLOUR
  3933 2766 A9 03			lda #$03
  3934 2768 8D 71 2B			sta SETPLAYER.BRAIN
  3935 276B A9 04			lda #$04
  3936 276D 8D 70 2B			sta SETPLAYER.DIR
  3937 2770 A9 17			lda #$17
  3938 2772 8D 6F 2B			sta SETPLAYER.Y
  3939 2775 A9 26			lda #$26
  3940 2777 8D 6E 2B			sta SETPLAYER.X
  3941 277A AD 25 2B			lda PLAYER2
  3942 277D 8D 6C 2B			sta SETPLAYER.P
  3943 2780 AD 26 2B			lda PLAYER2+1
  3944 2783 8D 6D 2B			sta SETPLAYER.P+1
  3945 2786 20 B3 15			jsr SETPLAYER
  3946
  3947 				; optimize OK (levels.inc), line = 114
  3948
  3949 2789 A9 01			lda #$01
  3950 278B 8D 73 2B			sta SETPLAYER.ISALIVE
  3951 278E A9 71			lda #$71
  3952 2790 8D 72 2B			sta SETPLAYER.COLOUR
  3953 2793 A9 02			lda #$02
  3954 2795 8D 71 2B			sta SETPLAYER.BRAIN
  3955 2798 8D 70 2B			sta SETPLAYER.DIR
  3956 279B A9 01			lda #$01
  3957 279D 8D 6F 2B			sta SETPLAYER.Y
  3958 27A0 A9 0A			lda #$0A
  3959 27A2 8D 6E 2B			sta SETPLAYER.X
  3960 27A5 AD 27 2B			lda PLAYER3
  3961 27A8 8D 6C 2B			sta SETPLAYER.P
  3962 27AB AD 28 2B			lda PLAYER3+1
  3963 27AE 8D 6D 2B			sta SETPLAYER.P+1
  3964 27B1 20 B3 15			jsr SETPLAYER
  3965
  3966 				; optimize OK (levels.inc), line = 115
  3967
  3968 27B4 A9 01			lda #$01
  3969 27B6 8D 73 2B			sta SETPLAYER.ISALIVE
  3970 27B9 A9 55			lda #$55
  3971 27BB 8D 72 2B			sta SETPLAYER.COLOUR
  3972 27BE A9 04			lda #$04
  3973 27C0 8D 71 2B			sta SETPLAYER.BRAIN
  3974 27C3 8D 70 2B			sta SETPLAYER.DIR
  3975 27C6 A9 01			lda #$01
  3976 27C8 8D 6F 2B			sta SETPLAYER.Y
  3977 27CB A9 26			lda #$26
  3978 27CD 8D 6E 2B			sta SETPLAYER.X
  3979 27D0 AD 29 2B			lda PLAYER4
  3980 27D3 8D 6C 2B			sta SETPLAYER.P
  3981 27D6 AD 2A 2B			lda PLAYER4+1
  3982 27D9 8D 6D 2B			sta SETPLAYER.P+1
  3983 27DC 20 B3 15			jsr SETPLAYER
  3984
  3985 				; optimize FAIL (1, levels.inc), line = 117
  3986
  3987 27DF E8				inx
  3988 27E0 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3989 27E4 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3990 27E6 A9 06			lda #$06
  3991 27E8 8D 68 2B			sta CALCOBSTACLEADDR.Y
  3992 27EB A9 0A			lda #$0A
  3993 27ED 8D 67 2B			sta CALCOBSTACLEADDR.X
  3994 27F0 20 95 13			jsr CALCOBSTACLEADDR
  3995 27F3 B4 17			ldy :STACKORIGIN-1,x
  3996 27F5 B5 18			lda :STACKORIGIN,x
  3997 27F7 99 60 00			sta adr.OBSTACLES,y
  3998 27FA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3999 27FC 99 61 00			sta adr.OBSTACLES+1,y
  4000 27FF CA				dex
  4001 2800 A9 02 95 18			mva #$02 :STACKORIGIN,x
  4002 2804 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4003 2808 A9 06			lda #$06
  4004 280A 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4005 280D A9 1E			lda #$1E
  4006 280F 8D 67 2B			sta CALCOBSTACLEADDR.X
  4007 2812 20 95 13			jsr CALCOBSTACLEADDR
  4008 2815 B4 17			ldy :STACKORIGIN-1,x
  4009 2817 B5 18			lda :STACKORIGIN,x
  4010 2819 99 60 00			sta adr.OBSTACLES,y
  4011 281C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4012 281E 99 61 00			sta adr.OBSTACLES+1,y
  4013 2821 CA				dex
  4014
  4015 				; optimize FAIL (1, levels.inc), line = 118
  4016
  4017 2822 A9 04 95 18			mva #$04 :STACKORIGIN,x
  4018 2826 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4019 282A A9 12			lda #$12
  4020 282C 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4021 282F A9 0A			lda #$0A
  4022 2831 8D 67 2B			sta CALCOBSTACLEADDR.X
  4023 2834 20 95 13			jsr CALCOBSTACLEADDR
  4024 2837 B4 17			ldy :STACKORIGIN-1,x
  4025 2839 B5 18			lda :STACKORIGIN,x
  4026 283B 99 60 00			sta adr.OBSTACLES,y
  4027 283E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4028 2840 99 61 00			sta adr.OBSTACLES+1,y
  4029 2843 CA				dex
  4030 2844 A9 06 95 18			mva #$06 :STACKORIGIN,x
  4031 2848 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4032 284C A9 12			lda #$12
  4033 284E 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4034 2851 A9 1E			lda #$1E
  4035 2853 8D 67 2B			sta CALCOBSTACLEADDR.X
  4036 2856 20 95 13			jsr CALCOBSTACLEADDR
  4037 2859 B4 17			ldy :STACKORIGIN-1,x
  4038 285B B5 18			lda :STACKORIGIN,x
  4039 285D 99 60 00			sta adr.OBSTACLES,y
  4040 2860 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4041 2862 99 61 00			sta adr.OBSTACLES+1,y
  4042 2865 CA				dex
  4043
  4044 				; optimize FAIL (1, levels.inc), line = 119
  4045
  4046 2866 A9 08 95 18			mva #$08 :STACKORIGIN,x
  4047 286A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4048 286E A9 0C			lda #$0C
  4049 2870 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4050 2873 A9 01			lda #$01
  4051 2875 8D 67 2B			sta CALCOBSTACLEADDR.X
  4052 2878 20 95 13			jsr CALCOBSTACLEADDR
  4053 287B B4 17			ldy :STACKORIGIN-1,x
  4054 287D B5 18			lda :STACKORIGIN,x
  4055 287F 99 60 00			sta adr.OBSTACLES,y
  4056 2882 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4057 2884 99 61 00			sta adr.OBSTACLES+1,y
  4058 2887 CA				dex
  4059 2888 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4060 288C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4061 2890 A9 02			lda #$02
  4062 2892 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4063 2895 A9 14			lda #$14
  4064 2897 8D 67 2B			sta CALCOBSTACLEADDR.X
  4065 289A 20 95 13			jsr CALCOBSTACLEADDR
  4066 289D B4 17			ldy :STACKORIGIN-1,x
  4067 289F B5 18			lda :STACKORIGIN,x
  4068 28A1 99 60 00			sta adr.OBSTACLES,y
  4069 28A4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4070 28A6 99 61 00			sta adr.OBSTACLES+1,y
  4071 28A9 CA				dex
  4072
  4073 				; optimize FAIL (1, levels.inc), line = 120
  4074
  4075 28AA A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4076 28AE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4077 28B2 A9 16			lda #$16
  4078 28B4 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4079 28B7 A9 14			lda #$14
  4080 28B9 8D 67 2B			sta CALCOBSTACLEADDR.X
  4081 28BC 20 95 13			jsr CALCOBSTACLEADDR
  4082 28BF B4 17			ldy :STACKORIGIN-1,x
  4083 28C1 B5 18			lda :STACKORIGIN,x
  4084 28C3 99 60 00			sta adr.OBSTACLES,y
  4085 28C6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4086 28C8 99 61 00			sta adr.OBSTACLES+1,y
  4087 28CB CA				dex
  4088 28CC A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4089 28D0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4090 28D4 A9 0C			lda #$0C
  4091 28D6 8D 68 2B			sta CALCOBSTACLEADDR.Y
  4092 28D9 A9 14			lda #$14
  4093 28DB 8D 67 2B			sta CALCOBSTACLEADDR.X
  4094 28DE 20 95 13			jsr CALCOBSTACLEADDR
  4095 28E1 B4 17			ldy :STACKORIGIN-1,x
  4096 28E3 B5 18			lda :STACKORIGIN,x
  4097 28E5 99 60 00			sta adr.OBSTACLES,y
  4098 28E8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4099 28EA 99 61 00			sta adr.OBSTACLES+1,y
  4100 28ED CA				dex
  4101 28EE CA				dex
  4102 28EF			@exit
  4103 					.ifdef @new
  4104 					lda <@VarData
  4105 					sta :ztmp
  4106 					lda >@VarData
  4107 					ldy #@VarDataSize-1
  4108 					jmp @FreeMem
  4109 					els
  4110 28EF 60				rts						; ret
  4111 					eif
  4112 				.endl
  4113
  4114 28F0			.local	INITPLAYFIELD					; PROCEDURE
  4115
  4116 				; optimize OK (init.inc), line = 5
  4117
  4118 28F0 A9 1F			lda #$1F
  4119 28F2 8D 15 FF			sta BACKGROUND
  4120 28F5 A9 00			lda #$00
  4121 28F7 8D 19 FF			sta BOREDER
  4122
  4123 				; optimize OK (init.inc), line = 6
  4124
  4125 28FA A9 20			lda #$20
  4126 28FC 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  4127 28FE A9 C0			lda #$C0
  4128 2900 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  4129 2902 A9 03			lda #$03
  4130 2904 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  4131 2906 A9 00			lda #$00
  4132 2908 85 08			sta SYSTEM.FILLCHAR_0056.A
  4133 290A A9 0C			lda #$0C
  4134 290C 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  4135 290E 20 88 11			jsr SYSTEM.FILLCHAR_0056
  4136
  4137 				; optimize OK (init.inc), line = 8
  4138
  4139 2911 A9 27			lda #$27
  4140 2913 85 58			sta T0B
  4141
  4142 2915			l_0F42
  4143 				; --- ForToDoCondition
  4144
  4145 				; optimize OK (init.inc), line = 9
  4146
  4147 2915 A4 58			ldy T0B
  4148 2917 A9 A0			lda #$A0
  4149 2919 99 00 0C			sta $0C00,y
  4150
  4151 				; optimize OK (init.inc), line = 10
  4152
  4153 291C 99 C0 0F			sta $0FC0,y
  4154
  4155 				; optimize OK (init.inc), line = 11
  4156
  4157 291F A9 41			lda #$41
  4158 2921 99 00 08			sta $0800,y
  4159
  4160 				; optimize OK (init.inc), line = 12
  4161
  4162 2924 99 C0 0B			sta $0BC0,y
  4163
  4164 				; --- ForToDoEpilog
  4165 2927 C6 58			dec T0B
  4166 2929 10 EA			jpl l_0F42
  4167 292B			l_0F50
  4168
  4169 				; optimize OK (init.inc), line = 15
  4170
  4171 292B A9 18			lda #$18
  4172 292D 85 58			sta T0B
  4173
  4174 292F			l_0F82
  4175 				; --- ForToDoCondition
  4176 292F A5 58			lda T0B
  4177 2931 C9 01			cmp #$01
  4178 2933 90 3A			jcc l_0F90
  4179
  4180 				; optimize OK (init.inc), line = 16
  4181
  4182 2935 0A				asl @
  4183 2936 A8				tay
  4184 2937 A9 FF			lda #$FF
  4185 2939 18 79 0E 10			add adr.MUL40,y
  4186 293D 85 12			sta :bp2
  4187 293F A9 0B			lda #$0B
  4188 2941 79 0F 10			adc adr.MUL40+1,y
  4189 2944 85 13			sta :bp2+1
  4190 2946 A0 00			ldy #$00
  4191 2948 A9 A0			lda #$A0
  4192 294A 91 12			sta (:bp2),y
  4193 294C C8				iny
  4194 294D 91 12			sta (:bp2),y
  4195
  4196 				; optimize OK (init.inc), line = 17
  4197
  4198 294F A5 58			lda T0B
  4199 2951 0A				asl @
  4200 2952 A8				tay
  4201 2953 A9 FF			lda #$FF
  4202 2955 18 79 0E 10			add adr.MUL40,y
  4203 2959 85 12			sta :bp2
  4204 295B A9 07			lda #$07
  4205 295D 79 0F 10			adc adr.MUL40+1,y
  4206 2960 85 13			sta :bp2+1
  4207 2962 A0 00			ldy #$00
  4208 2964 A9 41			lda #$41
  4209 2966 91 12			sta (:bp2),y
  4210 2968 C8				iny
  4211 2969 91 12			sta (:bp2),y
  4212
  4213 				; --- ForToDoEpilog
  4214 296B C6 58			dec T0B
  4215 296D 10 C0			jpl l_0F82
  4216 296F			l_0F90
  4217
  4218 				; optimize OK (init.inc), line = 20
  4219
  4220 296F A9 07			lda #$07
  4221 2971 85 59			sta I0B
  4222
  4223 2973			l_0FB4
  4224 				; --- ForToDoCondition
  4225 2973 A5 59			lda I0B
  4226 2975 0A				asl @
  4227 2976 A8				tay
  4228 2977 A9 5E			lda #$5E
  4229 2979 99 60 00			sta adr.OBSTACLES,y
  4230 297C A9 00			lda #$00
  4231 297E 99 61 00			sta adr.OBSTACLES+1,y
  4232
  4233 				; --- ForToDoEpilog
  4234 2981 C6 59			dec I0B
  4235 2983 10 EE			jpl l_0FB4
  4236 2985			l_0FC2
  4237
  4238 				; ------------------------------------------------------------
  4239
  4240 = 0000			@FORTMP_0F3F	= $00
  4241 = 0001			@FORTMP_0F7F	= $01
  4242 = 0000			@FORTMP_0FB1	= $00
  4243 2985			@exit
  4244 					.ifdef @new
  4245 					lda <@VarData
  4246 					sta :ztmp
  4247 					lda >@VarData
  4248 					ldy #@VarDataSize-1
  4249 					jmp @FreeMem
  4250 					els
  4251 2985 60				rts						; ret
  4252 					eif
  4253 				.endl
  4254
  4255 2986			.local	INITPLAYERS					; PROCEDURE
  4256
  4257 				; optimize OK (init.inc), line = 27
  4258
  4259 2986 A9 FF			lda #$FF
  4260 2988 85 5A			sta ALIVE
  4261
  4262 				; optimize OK (init.inc), line = 28
  4263
  4264 298A A9 00			lda #$00
  4265 298C 8D 45 2B			sta PLAYER1.ISALIVE
  4266 298F 8D 4D 2B			sta PLAYER2.ISALIVE
  4267
  4268 				; optimize OK (init.inc), line = 29
  4269
  4270 2992 8D 55 2B			sta PLAYER3.ISALIVE
  4271 2995 8D 5D 2B			sta PLAYER4.ISALIVE
  4272 2998			@exit
  4273 					.ifdef @new
  4274 					lda <@VarData
  4275 					sta :ztmp
  4276 					lda >@VarData
  4277 					ldy #@VarDataSize-1
  4278 					jmp @FreeMem
  4279 					els
  4280 2998 60				rts						; ret
  4281 					eif
  4282 				.endl
  4283
  4284 2999			.local	INITSCORE					; PROCEDURE
  4285
  4286 				; optimize OK (init.inc), line = 36
  4287
  4288 2999 A9 30			lda #$30
  4289 299B 8D 44 2B			sta PLAYER1.SCORE
  4290 299E 8D 4C 2B			sta PLAYER2.SCORE
  4291
  4292 				; optimize OK (init.inc), line = 37
  4293
  4294 29A1 8D 54 2B			sta PLAYER3.SCORE
  4295 29A4 8D 5C 2B			sta PLAYER4.SCORE
  4296 29A7			@exit
  4297 					.ifdef @new
  4298 					lda <@VarData
  4299 					sta :ztmp
  4300 					lda >@VarData
  4301 					ldy #@VarDataSize-1
  4302 					jmp @FreeMem
  4303 					els
  4304 29A7 60				rts						; ret
  4305 					eif
  4306 				.endl
  4307
  4308 29A8			.local	INITARENA					; PROCEDURE
  4309
  4310 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  4311
  4312 29A8 20 F0 28			jsr INITPLAYFIELD
  4313 29AB 20 86 29			jsr INITPLAYERS
  4314
  4315 				; optimize OK (init.inc), line = 46
  4316
  4317 29AE AD 3C 2B			lda LEVEL
  4318 29B1 8D AF 2B			sta @CASETMP_0009
  4319 29B4 C9 00			cmp #$00
  4320 29B6 D0 06			jne l_100B
  4321 29B8			@
  4322
  4323 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  4324
  4325 29B8 20 DF 1B			jsr SETLEVEL00
  4326 29BB 4C 0B 2A			jmp a_0009
  4327 29BE			l_100B
  4328 29BE C9 01			cmp #$01
  4329 29C0 D0 06			jne l_1015
  4330 29C2			@
  4331
  4332 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4333
  4334 29C2 20 06 1D			jsr SETLEVEL01
  4335 29C5 4C 0B 2A			jmp a_0009
  4336 29C8			l_1015
  4337 29C8 C9 02			cmp #$02
  4338 29CA D0 06			jne l_101F
  4339 29CC			@
  4340
  4341 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4342
  4343 29CC 20 2D 1E			jsr SETLEVEL02
  4344 29CF 4C 0B 2A			jmp a_0009
  4345 29D2			l_101F
  4346 29D2 C9 03			cmp #$03
  4347 29D4 D0 06			jne l_1029
  4348 29D6			@
  4349
  4350 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4351
  4352 29D6 20 54 1F			jsr SETLEVEL03
  4353 29D9 4C 0B 2A			jmp a_0009
  4354 29DC			l_1029
  4355 29DC C9 04			cmp #$04
  4356 29DE D0 06			jne l_1033
  4357 29E0			@
  4358
  4359 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4360
  4361 29E0 20 9D 20			jsr SETLEVEL04
  4362 29E3 4C 0B 2A			jmp a_0009
  4363 29E6			l_1033
  4364 29E6 C9 05			cmp #$05
  4365 29E8 D0 06			jne l_103D
  4366 29EA			@
  4367
  4368 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4369
  4370 29EA 20 08 22			jsr SETLEVEL05
  4371 29ED 4C 0B 2A			jmp a_0009
  4372 29F0			l_103D
  4373 29F0 C9 06			cmp #$06
  4374 29F2 D0 06			jne l_1047
  4375 29F4			@
  4376
  4377 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4378
  4379 29F4 20 A9 23			jsr SETLEVEL06
  4380 29F7 4C 0B 2A			jmp a_0009
  4381 29FA			l_1047
  4382 29FA C9 07			cmp #$07
  4383 29FC D0 06			jne l_1051
  4384 29FE			@
  4385
  4386 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4387
  4388 29FE 20 6A 25			jsr SETLEVEL07
  4389 2A01 4C 0B 2A			jmp a_0009
  4390 2A04			l_1051
  4391 2A04 C9 08			cmp #$08
  4392 2A06 D0 03			jne l_105B
  4393 2A08			@
  4394
  4395 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4396
  4397 2A08 20 2F 27			jsr SETLEVEL08
  4398 2A0B			l_105B
  4399 2A0B			a_0009
  4400
  4401 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4402
  4403 2A0B 20 B8 13			jsr SAVEOBSTACLES
  4404 2A0E 20 60 13			jsr ANIMATEOBSTACLES
  4405 2A11 20 31 12			jsr SHOWSCORE
  4406
  4407 				; ------------------------------------------------------------
  4408
  4409 = 2BAF			@CASETMP_0009	= DATAORIGIN+$0083
  4410
  4411 = 2BAF			@VarData	= @CASETMP_0009
  4412 = 0001			@VarDataSize	= 1
  4413
  4414 2A14			@exit
  4415 					.ifdef @new
  4416 					lda <@VarData
  4417 					sta :ztmp
  4418 					lda >@VarData
  4419 					ldy #@VarDataSize-1
  4420 					jmp @FreeMem
  4421 					els
  4422 2A14 60				rts						; ret
  4423 					eif
  4424 				.endl
  4425
  4426 2A15			.local	PLAYERMOVE					; PROCEDURE
  4427
  4428 				; optimize OK (main.pas), line = 15
  4429
  4430 2A15 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  4431 2A1F A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4432 2A21 B1 12			lda (:bp2),y
  4433 2A23 F0 50			jeq l_107C
  4434
  4435 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17
  4436
  4437 2A25 20 CB 12			jsr CHECKAVAILDIR
  4438
  4439 				; optimize OK (main.pas), line = 18
  4440
  4441 2A28 A5 5C			lda AVAILDIR
  4442 2A2A D0 06			jne l_1090
  4443
  4444 				; optimize FAIL ('PLAYERBUSTED', main.pas), line = 19
  4445
  4446 2A2C 20 6C 15			jsr PLAYERBUSTED
  4447 2A2F 4C 75 2A			jmp l_109B
  4448 2A32			l_1090
  4449
  4450 				; optimize OK (main.pas), line = 21
  4451
  4452 2A32 AC 1D 2B 84 12 AC + 	mwy PLY :bp2
  4453 2A3C A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4454 2A3E B1 12			lda (:bp2),y
  4455 2A40 8D B0 2B			sta @CASETMP_000A
  4456 2A43 C9 00			cmp #$00
  4457 2A45 D0 06			jne l_10A6
  4458 2A47			@
  4459
  4460 				; optimize FAIL ('HUMAN', main.pas), line = 22
  4461
  4462 2A47 20 43 17			jsr HUMAN
  4463 2A4A 4C 72 2A			jmp a_000A
  4464 2A4D			l_10A6
  4465 2A4D C9 01			cmp #$01
  4466 2A4F D0 06			jne l_10B0
  4467 2A51			@
  4468
  4469 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 23
  4470
  4471 2A51 20 E5 17			jsr AISTRAIGHT
  4472 2A54 4C 72 2A			jmp a_000A
  4473 2A57			l_10B0
  4474 2A57 C9 02			cmp #$02
  4475 2A59 D0 06			jne l_10BA
  4476 2A5B			@
  4477
  4478 				; optimize FAIL ('AISAPPER', main.pas), line = 24
  4479
  4480 2A5B 20 62 18			jsr AISAPPER
  4481 2A5E 4C 72 2A			jmp a_000A
  4482 2A61			l_10BA
  4483 2A61 C9 03			cmp #$03
  4484 2A63 D0 06			jne l_10C4
  4485 2A65			@
  4486
  4487 				; optimize FAIL ('AIBULLY', main.pas), line = 25
  4488
  4489 2A65 20 BC 1A			jsr AIBULLY
  4490 2A68 4C 72 2A			jmp a_000A
  4491 2A6B			l_10C4
  4492 2A6B C9 04			cmp #$04
  4493 2A6D D0 03			jne l_10CE
  4494 2A6F			@
  4495
  4496 				; optimize FAIL ('AIMIRROR', main.pas), line = 26
  4497
  4498 2A6F 20 8A 1B			jsr AIMIRROR
  4499 2A72			l_10CE
  4500 2A72			a_000A
  4501
  4502 				; optimize FAIL ('DRAWPLAYER', main.pas), line = 29
  4503
  4504 2A72 20 FC 13			jsr DRAWPLAYER
  4505 2A75			l_109B
  4506 2A75			l_107C
  4507
  4508 				; ------------------------------------------------------------
  4509
  4510 = 2BB0			@CASETMP_000A	= DATAORIGIN+$0084
  4511
  4512 = 2BB0			@VarData	= @CASETMP_000A
  4513 = 0001			@VarDataSize	= 1
  4514
  4515 2A75			@exit
  4516 					.ifdef @new
  4517 					lda <@VarData
  4518 					sta :ztmp
  4519 					lda >@VarData
  4520 					ldy #@VarDataSize-1
  4521 					jmp @FreeMem
  4522 					els
  4523 2A75 60				rts						; ret
  4524 					eif
  4525 				.endl
  4526
  4527 2A76			.local	MAINLOOP					; PROCEDURE
  4528
  4529 				; optimize FAIL ('INITARENA', main.pas), line = 39
  4530
  4531 2A76 20 A8 29			jsr INITARENA
  4532 2A79 20 5A 16			jsr STARTSCREEN
  4533
  4534 				; --- RepeatUntilProlog
  4535 2A7C			l_10E2
  4536
  4537 				; optimize FAIL ('SYSTEM.PAUSE_006C', main.pas), line = 42
  4538
  4539 2A7C 20 90 11			jsr SYSTEM.PAUSE_006C
  4540 2A7F AD 23 2B			lda PLAYER1
  4541 2A82 8D 1D 2B			sta PLY
  4542 2A85 AD 24 2B			lda PLAYER1+1
  4543 2A88 8D 1E 2B			sta PLY+1
  4544 2A8B 20 15 2A			jsr PLAYERMOVE
  4545
  4546 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44
  4547
  4548 2A8E 20 60 13			jsr ANIMATEOBSTACLES
  4549
  4550 				; optimize OK (main.pas), line = 46
  4551
  4552 2A91 A9 02			lda #$02
  4553 2A93 8D 38 2B			sta SYSTEM.PAUSE_006D.N
  4554 2A96 A9 00			lda #$00
  4555 2A98 8D 39 2B			sta SYSTEM.PAUSE_006D.N+1
  4556 2A9B 20 97 11			jsr SYSTEM.PAUSE_006D
  4557
  4558 				; optimize OK (main.pas), line = 47
  4559
  4560 2A9E AD 25 2B			lda PLAYER2
  4561 2AA1 8D 1D 2B			sta PLY
  4562 2AA4 AD 26 2B			lda PLAYER2+1
  4563 2AA7 8D 1E 2B			sta PLY+1
  4564 2AAA 20 15 2A			jsr PLAYERMOVE
  4565
  4566 				; optimize OK (main.pas), line = 48
  4567
  4568 2AAD AD 27 2B			lda PLAYER3
  4569 2AB0 8D 1D 2B			sta PLY
  4570 2AB3 AD 28 2B			lda PLAYER3+1
  4571 2AB6 8D 1E 2B			sta PLY+1
  4572 2AB9 20 15 2A			jsr PLAYERMOVE
  4573
  4574 				; optimize OK (main.pas), line = 49
  4575
  4576 2ABC AD 29 2B			lda PLAYER4
  4577 2ABF 8D 1D 2B			sta PLY
  4578 2AC2 AD 2A 2B			lda PLAYER4+1
  4579 2AC5 8D 1E 2B			sta PLY+1
  4580 2AC8 20 15 2A			jsr PLAYERMOVE
  4581
  4582 				; optimize FAIL ('ISONELEFT', main.pas), line = 50
  4583
  4584 2ACB 20 DA 16			jsr ISONELEFT
  4585 2ACE CA				dex
  4586 2ACF B5 19			lda :STACKORIGIN+1,x
  4587 2AD1 F0 A9			jeq l_10E2
  4588
  4589 				; optimize FAIL ('UPDATESCORE', main.pas), line = 52
  4590
  4591 2AD3 20 AA 12			jsr UPDATESCORE
  4592 2AD6 A9 64			lda #$64
  4593 2AD8 8D 38 2B			sta SYSTEM.PAUSE_006D.N
  4594 2ADB A9 00			lda #$00
  4595 2ADD 8D 39 2B			sta SYSTEM.PAUSE_006D.N+1
  4596 2AE0 20 97 11			jsr SYSTEM.PAUSE_006D
  4597 2AE3 20 4A 16			jsr NEXTLEVEL
  4598 2AE6			@exit
  4599 					.ifdef @new
  4600 					lda <@VarData
  4601 					sta :ztmp
  4602 					lda >@VarData
  4603 					ldy #@VarDataSize-1
  4604 					jmp @FreeMem
  4605 					els
  4606 2AE6 60				rts						; ret
  4607 					eif
  4608 				.endl
  4609 2AE7			l_0007
  4610
  4611 				; optimize FAIL ('SETFONTS', main.pas), line = 58
  4612
  4613 2AE7 20 F9 16			jsr SETFONTS
  4614
  4615 				; --- RepeatUntilProlog
  4616 2AEA			l_110A
  4617
  4618 				; optimize FAIL ('INITSCORE', main.pas), line = 61
  4619
  4620 2AEA 20 99 29			jsr INITSCORE
  4621 2AED A9 00			lda #$00
  4622 2AEF 8D 3D 2B			sta GAMEOVER
  4623 2AF2 A9 01			lda #$01
  4624 2AF4 8D 3C 2B			sta LEVEL
  4625
  4626 				; --- RepeatUntilProlog
  4627 2AF7			l_1114
  4628
  4629 				; optimize FAIL ('MAINLOOP', main.pas), line = 63
  4630
  4631 2AF7 20 76 2A			jsr MAINLOOP
  4632 2AFA 20 9D 16			jsr ISGAMEOVER
  4633 2AFD CA				dex
  4634 2AFE B5 19			lda :STACKORIGIN+1,x
  4635 2B00 F0 F5			jeq l_1114
  4636
  4637 				; optimize FAIL ('SHOWSCORE', main.pas), line = 65
  4638
  4639 2B02 20 31 12			jsr SHOWSCORE
  4640 2B05 A9 C8			lda #$C8
  4641 2B07 8D 38 2B			sta SYSTEM.PAUSE_006D.N
  4642 2B0A A9 00			lda #$00
  4643 2B0C 8D 39 2B			sta SYSTEM.PAUSE_006D.N+1
  4644 2B0F 20 97 11			jsr SYSTEM.PAUSE_006D
  4645
  4646 				; optimize OK (main.pas), line = 66
  4647
  4648 2B12 4C EA 2A			jmp l_110A
  4649
  4650 				; ------------------------------------------------------------
  4651
  4652 = 0800			ATTRIBUTE_ADDR	= $0800
  4653 = 0C00			SCREEN_ADDR	= $0C00
  4654 = 001F			BACKGROUND_COLOUR	= $1F
  4655 = 0000			BOREDER_COLOUR	= $00
  4656 = 0007			OBST_QUANTITY	= $07
  4657 = 0009			VICTORIES	= $09
  4658 = 005E			TRASH	= $5E
  4659 = 0005			LOOK_AHEAD	= $05
  4660 = 0020			EMPTY	= $20
  4661 = 00A0			WALL	= $A0
  4662 = 0041			WALL_COLOUR	= $41
  4663 = 0030			ZERO	= $30
  4664 = 0054			OBSTACLE_1	= $54
  4665 = 0055			OBSTACLE_2	= $55
  4666 = 0065			OBST_COLOUR	= $65
  4667 = 0050			PLY_HEAD_UP	= $50
  4668 = 0051			PLY_HEAD_LEFT	= $51
  4669 = 0052			PLY_HEAD_RIGHT	= $52
  4670 = 0053			PLY_HEAD_DOWN	= $53
  4671 = 002A			PLY_CRASH	= $2A
  4672 = 0057			PLY_BUSTED	= $57
  4673 = 0042			PLY_TAIL_UD	= $42
  4674 = 0040			PLY_TAIL_LR	= $40
  4675 = 007D			PLY_TAIL_RD	= $7D
  4676 = 006E			PLY_TAIL_RU	= $6E
  4677 = 006D			PLY_TAIL_LD	= $6D
  4678 = 0070			PLY_TAIL_LU	= $70
  4679 = 0062			PLY1_COLOUR	= $62
  4680 = 005D			PLY2_COLOUR	= $5D
  4681 = 0071			PLY3_COLOUR	= $71
  4682 = 0055			PLY4_COLOUR	= $55
  4683 = 0000			PLY_CTRL	= $00
  4684 = 0001			AI_STRAIGHT	= $01
  4685 = 0002			AI_SAPPER	= $02
  4686 = 0003			AI_BULLY	= $03
  4687 = 0004			AI_MIRROR	= $04
  4688 = 0001			JOY_UP	= $01
  4689 = 0002			JOY_DOWN	= $02
  4690 = 0004			JOY_LEFT	= $04
  4691 = 0008			JOY_RIGHT	= $08
  4692 = 0040			JOY_FIRE	= $40
  4693 = 0002			JOY_SELECT_1	= $02
  4694 = 0004			JOY_SELECT_2	= $04
  4695 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4696 2B15			.var MUL40	= adr.MUL40 .word
  4697 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4698 2B15			.var DIRECTION	= adr.DIRECTION .word
  4699 = FD30			KEYSCAN	= $FD30
  4700 = FF08			JOY	= $FF08
  4701 = FF12			RAMROMSEL	= $FF12
  4702 = FF13			CHBAS	= $FF13
  4703 = FF15			BACKGROUND	= $FF15
  4704 = FF19			BOREDER	= $FF19
  4705 = 0058			T0B	= $58
  4706 = 0059			I0B	= $59
  4707 = 005A			ALIVE	= $5A
  4708 = 005B			NEWDIR	= $5B
  4709 = 005C			AVAILDIR	= $5C
  4710 = 005D			JOYSTATUS	= $5D
  4711 = 005E			T0W	= $5E
  4712 = 0070			adr.PLY	= $70
  4713 2B15			.var PLY	= adr.PLY .word
  4714 = 2B2C			PLY.X	= DATAORIGIN+$0000
  4715 = 2B2D			PLY.Y	= DATAORIGIN+$0001
  4716 = 2B2E			PLY.HEAD	= DATAORIGIN+$0002
  4717 = 2B2F			PLY.COLOUR	= DATAORIGIN+$0003
  4718 = 2B30			PLY.DIR	= DATAORIGIN+$0004
  4719 = 2B31			PLY.BRAIN	= DATAORIGIN+$0005
  4720 = 2B32			PLY.SCORE	= DATAORIGIN+$0006
  4721 = 2B33			PLY.ISALIVE	= DATAORIGIN+$0007
  4722 = 0072			adr.TMPPLY	= $72
  4723 2B15			.var TMPPLY	= adr.TMPPLY .word
  4724 = 2B2C			TMPPLY.X	= DATAORIGIN+$0000
  4725 = 2B2D			TMPPLY.Y	= DATAORIGIN+$0001
  4726 = 2B2E			TMPPLY.HEAD	= DATAORIGIN+$0002
  4727 = 2B2F			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4728 = 2B30			TMPPLY.DIR	= DATAORIGIN+$0004
  4729 = 2B31			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4730 = 2B32			TMPPLY.SCORE	= DATAORIGIN+$0006
  4731 = 2B33			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4732 = 0060			adr.OBSTACLES	= $60
  4733 2B15			.var OBSTACLES	= adr.OBSTACLES .word
  4734 = 2B3C			LEVEL	= DATAORIGIN+$0010
  4735 = 2B3D			GAMEOVER	= DATAORIGIN+$0011
  4736 = 2B3E			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4737 2B15			.var PLAYER1	= adr.PLAYER1 .word
  4738 = 2B3E			PLAYER1.X	= DATAORIGIN+$0012
  4739 = 2B3F			PLAYER1.Y	= DATAORIGIN+$0013
  4740 = 2B40			PLAYER1.HEAD	= DATAORIGIN+$0014
  4741 = 2B41			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4742 = 2B42			PLAYER1.DIR	= DATAORIGIN+$0016
  4743 = 2B43			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4744 = 2B44			PLAYER1.SCORE	= DATAORIGIN+$0018
  4745 = 2B45			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4746 = 2B46			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4747 2B15			.var PLAYER2	= adr.PLAYER2 .word
  4748 = 2B46			PLAYER2.X	= DATAORIGIN+$001A
  4749 = 2B47			PLAYER2.Y	= DATAORIGIN+$001B
  4750 = 2B48			PLAYER2.HEAD	= DATAORIGIN+$001C
  4751 = 2B49			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4752 = 2B4A			PLAYER2.DIR	= DATAORIGIN+$001E
  4753 = 2B4B			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4754 = 2B4C			PLAYER2.SCORE	= DATAORIGIN+$0020
  4755 = 2B4D			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4756 = 2B4E			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4757 2B15			.var PLAYER3	= adr.PLAYER3 .word
  4758 = 2B4E			PLAYER3.X	= DATAORIGIN+$0022
  4759 = 2B4F			PLAYER3.Y	= DATAORIGIN+$0023
  4760 = 2B50			PLAYER3.HEAD	= DATAORIGIN+$0024
  4761 = 2B51			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4762 = 2B52			PLAYER3.DIR	= DATAORIGIN+$0026
  4763 = 2B53			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4764 = 2B54			PLAYER3.SCORE	= DATAORIGIN+$0028
  4765 = 2B55			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4766 = 2B56			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4767 2B15			.var PLAYER4	= adr.PLAYER4 .word
  4768 = 2B56			PLAYER4.X	= DATAORIGIN+$002A
  4769 = 2B57			PLAYER4.Y	= DATAORIGIN+$002B
  4770 = 2B58			PLAYER4.HEAD	= DATAORIGIN+$002C
  4771 = 2B59			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4772 = 2B5A			PLAYER4.DIR	= DATAORIGIN+$002E
  4773 = 2B5B			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4774 = 2B5C			PLAYER4.SCORE	= DATAORIGIN+$0030
  4775 = 2B5D			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4776 2B15			@exit
  4777
  4778 2B15 A2 00		@halt	ldx #$00
  4779 2B17 9A				txs
  4780
  4781 2B18 60				rts
  4782
  4783 				; ------------------------------------------------------------
  4784
  4785 				; ------------------------------------------------------------
  4786
  4787 2B19			.local	@DEFINES
  4788 2B19			C4P
  4789 				.endl
  4790
  4791 2B19			.local	@RESOURCE
  4792 				.endl
  4793
  4794 = 2B19 0E 10		MUL40
  4794 = 2B1B 40 10		DIRECTION
  4794 = 2B1D 70 00		PLY
  4794 = 2B1F 72 00		TMPPLY
  4794 = 2B21 60 00		OBSTACLES
  4794 = 2B23 3E 2B		PLAYER1
  4794 = 2B25 46 2B		PLAYER2
  4794 = 2B27 4E 2B		PLAYER3
  4794 = 2B29 56 2B		PLAYER4
  4794 				.endl							; MAIN
  4795
  4796 				; ------------------------------------------------------------
  4797 				; ------------------------------------------------------------
  4798
  4799 				.macro	UNITINITIALIZATION
  4800 				
  4801 					.ifdef MAIN.SYSTEM.@UnitInit
  4802 					jsr MAIN.SYSTEM.@UnitInit
  4803 					eif
  4804 				.endm
  4805
  4806 				; ------------------------------------------------------------
  4807
  4808 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4809 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4809 				SYSTEM: $113E..$11E4
  4810 					eif
  4811
  4812 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4812 				CODE: $100E..$2B18
  4813
  4814 				; ------------------------------------------------------------
  4815
  4816 2B2B				.align $04
  4817
  4818 2B2C			DATAORIGIN
  4819 2B2C 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4820 2B44 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4821 2B5C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4822 2B74 00 00 00 18 18 24 + .by  $00 $00 $00 $18 $18 $24 $24 $24  $3C $66 $5A $00 $03 $3E $C5 $C5  $3E $03 $00 $00 $C0 $7C $A3 $A3
  4823 2B8C 7C C0 00 5A 66 3C + .by  $7C $C0 $00 $5A $66 $3C $24 $24  $24 $18 $18 $00 $3C $6E $62 $46  $76 $3C $00 $00 $3C $76 $46 $62
  4824 2BA4 6E 3C		.by  $6E $3C
  4825
  4826 = 007A			VARINITSIZE	= *-DATAORIGIN
  4827 = 0085			VARDATASIZE	= 133
  4828
  4829 = 2BB1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4830
  4831 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4831 				DATA: $2B2C..$2BB1
  4832
  4833 				; ------------------------------------------------------------
  4834
  4835 				.macro	STATICDATA
  4836 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4837 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4838 				.by  $C0 $03 $01 $02 $04 $08
  4839 				.endm
  4840
  4841 					end
