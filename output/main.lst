mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E 59 16			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0036			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 166E			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 CA			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D A4 15 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 A4 85 02 A9 16 + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C AA 15			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D 73 16		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD 73 16 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1673			RESULT	= DATAORIGIN+$000B
   182
   183 = 1673			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 110C AD 74 16		loop  lda n
   307 110F 0D 75 16		  ora n+1
   308 1112 F0 14		  beq stop
   309
   310 1114 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 111A AD 74 16 D0 03 CE +   dew n
   313
   314 1125 4C 0C 11		  jmp loop
   315 1128			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1674			N	= DATAORIGIN+$000C
   321
   322 = 1674			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 1128			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 1128 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1129			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1129 8D 76 16			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 112C AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 112F 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1132 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 1135 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 1138 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 113B 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 113E A8			  tay
   350
   351 113F AD 76 16		  lda range
   352 1142 F0 08		  beq stop
   353
   354 1144 85 0C		  sta ecx
   355 1146 84 04		  sty eax
   356
   357 1148 20 8C 10		  jsr imulCL
   358 114B A8			  tay
   359
   360 114C 8C 77 16		stop  sty Result
   361
   362 114F			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 114F E8				inx
   370 1150 AD 77 16 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1676			RANGE	= DATAORIGIN+$000E
   383 = 1677			RESULT	= DATAORIGIN+$000F
   384
   385 = 1676			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 1155 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1668			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 166A			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 166C			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 1156			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 1156			.var HPALETTE	= adr.HPALETTE .word
   449 = 166D			FILEMODE	= DATAORIGIN+$0005
   450 = 166E			GRAPHMODE	= DATAORIGIN+$0006
   451 = 166F			IORESULT	= DATAORIGIN+$0007
   452 = 1670			EOLN	= DATAORIGIN+$0008
   453 = 1671			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 1156 C0 02		PALETTE
   455 = 1158 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 115A			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 115A A9 1F			lda #$1F
   462 115C 8D 15 FF			sta BORDERCOLOR
   463 115F A9 00			lda #$00
   464 1161 8D 19 FF			sta BGCOLOR
   465
   466 				; optimize OK (main.pas), line = 66
   467
   468 1164 A9 20			lda #$20
   469 1166 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   470 1168 A9 C0			lda #$C0
   471 116A 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   472 116C A9 03			lda #$03
   473 116E 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   474 1170 A9 00			lda #$00
   475 1172 85 08			sta SYSTEM.FILLCHAR_0056.A
   476 1174 A9 0C			lda #$0C
   477 1176 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   478 1178 20 08 11			jsr SYSTEM.FILLCHAR_0056
   479
   480 				; optimize OK (main.pas), line = 68
   481
   482 117B A9 27			lda #$27
   483 117D 85 58			sta T0B
   484
   485 117F			l_0089
   486 				; --- ForToDoCondition
   487
   488 				; optimize OK (main.pas), line = 69
   489
   490 117F A4 58			ldy T0B
   491 1181 A9 A0			lda #$A0
   492 1183 99 00 0C			sta $0C00,y
   493
   494 				; optimize OK (main.pas), line = 70
   495
   496 1186 99 C0 0F			sta $0FC0,y
   497
   498 				; optimize OK (main.pas), line = 71
   499
   500 1189 A9 41			lda #$41
   501 118B 99 00 08			sta $0800,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 118E 99 C0 0B			sta $0BC0,y
   506
   507 				; --- ForToDoEpilog
   508 1191 C6 58			dec T0B
   509 1193 10 EA			jpl l_0089
   510 1195			l_0097
   511
   512 				; optimize OK (main.pas), line = 75
   513
   514 1195 A9 18			lda #$18
   515 1197 85 58			sta T0B
   516
   517 1199			l_00C9
   518 				; --- ForToDoCondition
   519 1199 A5 58			lda T0B
   520 119B C9 01			cmp #$01
   521 119D 90 3A			jcc l_00D7
   522
   523 				; optimize OK (main.pas), line = 76
   524
   525 119F 0A				asl @
   526 11A0 A8				tay
   527 11A1 A9 FF			lda #$FF
   528 11A3 18 79 0E 10			add adr.MUL40,y
   529 11A7 85 12			sta :bp2
   530 11A9 A9 0B			lda #$0B
   531 11AB 79 0F 10			adc adr.MUL40+1,y
   532 11AE 85 13			sta :bp2+1
   533 11B0 A0 00			ldy #$00
   534 11B2 A9 A0			lda #$A0
   535 11B4 91 12			sta (:bp2),y
   536 11B6 C8				iny
   537 11B7 91 12			sta (:bp2),y
   538
   539 				; optimize OK (main.pas), line = 77
   540
   541 11B9 A5 58			lda T0B
   542 11BB 0A				asl @
   543 11BC A8				tay
   544 11BD A9 FF			lda #$FF
   545 11BF 18 79 0E 10			add adr.MUL40,y
   546 11C3 85 12			sta :bp2
   547 11C5 A9 07			lda #$07
   548 11C7 79 0F 10			adc adr.MUL40+1,y
   549 11CA 85 13			sta :bp2+1
   550 11CC A0 00			ldy #$00
   551 11CE A9 41			lda #$41
   552 11D0 91 12			sta (:bp2),y
   553 11D2 C8				iny
   554 11D3 91 12			sta (:bp2),y
   555
   556 				; --- ForToDoEpilog
   557 11D5 C6 58			dec T0B
   558 11D7 10 C0			jpl l_00C9
   559 11D9			l_00D7
   560
   561 				; ------------------------------------------------------------
   562
   563 = 0000			@FORTMP_0086	= $00
   564 = 0001			@FORTMP_00C6	= $01
   565 11D9			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 11D9 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 11DA			.local	INITPLAYERS					; PROCEDURE
   578
   579 				; optimize OK (main.pas), line = 83
   580
   581 11DA A9 01			lda #$01
   582 11DC 8D 82 16			sta PLAYER1.BRAIN
   583 11DF A9 0A			lda #$0A
   584 11E1 8D 7D 16			sta PLAYER1.X
   585 11E4 A9 0C			lda #$0C
   586 11E6 8D 7E 16			sta PLAYER1.Y
   587 11E9 A9 51			lda #$51
   588 11EB 8D 7F 16			sta PLAYER1.HEAD
   589
   590 				; optimize OK (main.pas), line = 84
   591
   592 11EE A9 5F			lda #$5F
   593 11F0 8D 80 16			sta PLAYER1.COLOUR
   594 11F3 A9 00			lda #$00
   595 11F5 8D 83 16			sta PLAYER1.ISDEAD
   596 11F8 A9 08			lda #$08
   597 11FA 8D 81 16			sta PLAYER1.DIR
   598
   599 				; optimize OK (main.pas), line = 86
   600
   601 11FD A9 01			lda #$01
   602 11FF 8D 89 16			sta PLAYER2.BRAIN
   603 1202 A9 1E			lda #$1E
   604 1204 8D 84 16			sta PLAYER2.X
   605 1207 A9 0C			lda #$0C
   606 1209 8D 85 16			sta PLAYER2.Y
   607 120C A9 51			lda #$51
   608 120E 8D 86 16			sta PLAYER2.HEAD
   609
   610 				; optimize OK (main.pas), line = 87
   611
   612 1211 A9 5D			lda #$5D
   613 1213 8D 87 16			sta PLAYER2.COLOUR
   614 1216 A9 00			lda #$00
   615 1218 8D 8A 16			sta PLAYER2.ISDEAD
   616 121B A9 04			lda #$04
   617 121D 8D 88 16			sta PLAYER2.DIR
   618
   619 				; optimize OK (main.pas), line = 89
   620
   621 1220 A9 01			lda #$01
   622 1222 8D 90 16			sta PLAYER3.BRAIN
   623 1225 A9 14			lda #$14
   624 1227 8D 8B 16			sta PLAYER3.X
   625 122A A9 06			lda #$06
   626 122C 8D 8C 16			sta PLAYER3.Y
   627 122F A9 51			lda #$51
   628 1231 8D 8D 16			sta PLAYER3.HEAD
   629
   630 				; optimize OK (main.pas), line = 90
   631
   632 1234 A9 71			lda #$71
   633 1236 8D 8E 16			sta PLAYER3.COLOUR
   634 1239 A9 00			lda #$00
   635 123B 8D 91 16			sta PLAYER3.ISDEAD
   636 123E A9 02			lda #$02
   637 1240 8D 8F 16			sta PLAYER3.DIR
   638
   639 				; optimize OK (main.pas), line = 92
   640
   641 1243 A9 01			lda #$01
   642 1245 8D 97 16			sta PLAYER4.BRAIN
   643 1248 A9 14			lda #$14
   644 124A 8D 92 16			sta PLAYER4.X
   645 124D A9 12			lda #$12
   646 124F 8D 93 16			sta PLAYER4.Y
   647 1252 A9 51			lda #$51
   648 1254 8D 94 16			sta PLAYER4.HEAD
   649
   650 				; optimize OK (main.pas), line = 93
   651
   652 1257 A9 55			lda #$55
   653 1259 8D 95 16			sta PLAYER4.COLOUR
   654 125C A9 00			lda #$00
   655 125E 8D 98 16			sta PLAYER4.ISDEAD
   656 1261 A9 01			lda #$01
   657 1263 8D 96 16			sta PLAYER4.DIR
   658 1266			@exit
   659 					.ifdef @new
   660 					lda <@VarData
   661 					sta :ztmp
   662 					lda >@VarData
   663 					ldy #@VarDataSize-1
   664 					jmp @FreeMem
   665 					els
   666 1266 60				rts						; ret
   667 					eif
   668 				.endl
   669
   670 1267			.local	PUTCHAR						; PROCEDURE
   671
   672 				; optimize OK (main.pas), line = 100
   673
   674 1267 AD 9A 16			lda Y
   675 126A 0A				asl @
   676 126B A8				tay
   677 126C B9 0E 10			lda adr.MUL40,y
   678 126F 18 6D 99 16			add X
   679 1273 85 5B			sta T0W
   680 1275 B9 0F 10			lda adr.MUL40+1,y
   681 1278 69 08			adc #$08
   682 127A 85 5C			sta T0W+1
   683
   684 				; optimize OK (main.pas), line = 101
   685
   686 127C 85 11			sta :bp+1
   687 127E A4 5B			ldy T0W
   688 1280 AD 9C 16			lda C
   689 1283 91 10			sta (:bp),y
   690 1285 A5 5C			lda T0W+1
   691 1287 18 69 04			add #$04
   692 128A 85 11			sta :bp+1
   693 128C AD 9B 16			lda V
   694 128F 91 10			sta (:bp),y
   695
   696 				; ------------------------------------------------------------
   697
   698 = 1699			X	= DATAORIGIN+$0031
   699 = 169A			Y	= DATAORIGIN+$0032
   700 = 169B			V	= DATAORIGIN+$0033
   701 = 169C			C	= DATAORIGIN+$0034
   702
   703 = 1699			@VarData	= X
   704 = 0004			@VarDataSize	= 4
   705
   706 1291			@exit
   707 					.ifdef @new
   708 					lda <@VarData
   709 					sta :ztmp
   710 					lda >@VarData
   711 					ldy #@VarDataSize-1
   712 					jmp @FreeMem
   713 					els
   714 1291 60				rts						; ret
   715 					eif
   716 				.endl
   717
   718 1292			.local	CHECKAVAILDIR					; PROCEDURE
   719
   720 				; optimize OK (main.pas), line = 106
   721
   722 1292 A9 00			lda #$00
   723 1294 8D 79 16			sta AVAILDIR
   724
   725 				; optimize OK (main.pas), line = 107
   726
   727 1297 AD 9E 16			lda Y
   728 129A 0A				asl @
   729 129B A8				tay
   730 129C B9 0E 10			lda adr.MUL40,y
   731 129F 18 6D 9D 16			add X
   732 12A3 85 5B			sta T0W
   733 12A5 B9 0F 10			lda adr.MUL40+1,y
   734 12A8 69 0C			adc #$0C
   735 12AA 85 5C			sta T0W+1
   736
   737 				; optimize OK (main.pas), line = 109
   738
   739 12AC A5 5B			lda T0W
   740 12AE 38 E9 28			sub #$28
   741 12B1 85 21			sta :STACKORIGIN+9
   742 12B3 A5 5C			lda T0W+1
   743 12B5 E9 00			sbc #$00
   744 12B7 85 11			sta :bp+1
   745 12B9 A4 21			ldy :STACKORIGIN+9
   746 12BB B1 10			lda (:bp),y
   747 12BD C9 20			cmp #$20
   748 12BF D0 08			jne l_01BC
   749 12C1 AD 79 16			lda AVAILDIR
   750 12C4 09 01			ora #$01
   751 12C6 8D 79 16			sta AVAILDIR
   752 12C9			l_01BC
   753
   754 				; optimize OK (main.pas), line = 110
   755
   756 12C9 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   757 12D1 A0 28			ldy #$28
   758 12D3 B1 12			lda (:bp2),y
   759 12D5 C9 20			cmp #$20
   760 12D7 D0 08			jne l_01DF
   761 12D9 AD 79 16			lda AVAILDIR
   762 12DC 09 02			ora #$02
   763 12DE 8D 79 16			sta AVAILDIR
   764 12E1			l_01DF
   765
   766 				; optimize OK (main.pas), line = 111
   767
   768 12E1 A5 5B			lda T0W
   769 12E3 38 E9 01			sub #$01
   770 12E6 85 21			sta :STACKORIGIN+9
   771 12E8 A5 5C			lda T0W+1
   772 12EA E9 00			sbc #$00
   773 12EC 85 11			sta :bp+1
   774 12EE A4 21			ldy :STACKORIGIN+9
   775 12F0 B1 10			lda (:bp),y
   776 12F2 C9 20			cmp #$20
   777 12F4 D0 08			jne l_0202
   778 12F6 AD 79 16			lda AVAILDIR
   779 12F9 09 04			ora #$04
   780 12FB 8D 79 16			sta AVAILDIR
   781 12FE			l_0202
   782
   783 				; optimize OK (main.pas), line = 112
   784
   785 12FE A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   786 1306 A0 01			ldy #$01
   787 1308 B1 12			lda (:bp2),y
   788 130A C9 20			cmp #$20
   789 130C D0 08			jne l_0225
   790 130E AD 79 16			lda AVAILDIR
   791 1311 09 08			ora #$08
   792 1313 8D 79 16			sta AVAILDIR
   793 1316			l_0225
   794
   795 				; ------------------------------------------------------------
   796
   797 = 169D			X	= DATAORIGIN+$0035
   798 = 169E			Y	= DATAORIGIN+$0036
   799
   800 = 169D			@VarData	= X
   801 = 0002			@VarDataSize	= 2
   802
   803 1316			@exit
   804 					.ifdef @new
   805 					lda <@VarData
   806 					sta :ztmp
   807 					lda >@VarData
   808 					ldy #@VarDataSize-1
   809 					jmp @FreeMem
   810 					els
   811 1316 60				rts						; ret
   812 					eif
   813 				.endl
   814
   815 1317			.local	HUMAN						; PROCEDURE
   816
   817 				; optimize OK (main.pas), line = 120
   818
   819 1317 AC 7B 16 84 12 AC + 	mwy PLY :bp2
   820 1321 A0 04			ldy #PLY.DIR-DATAORIGIN
   821 1323 B1 12			lda (:bp2),y
   822 1325 85 59			sta NEWDIR
   823
   824 				; optimize OK (main.pas), line = 121
   825
   826 1327 A9 02			lda #$02
   827 1329 8D 08 FF			sta JOY
   828 132C A9 FF			lda #$FF
   829 132E 8D 30 FD			sta KEY_PIO
   830 1331 AD 08 FF			lda JOY
   831 1334 49 FF			eor #$FF
   832 1336 85 58			sta T0B
   833
   834 				; optimize OK (main.pas), line = 123
   835
   836 1338 8D 9F 16			sta @CASETMP_0003
   837 133B C9 01			cmp #$01
   838 133D D0 07			jne l_0259
   839 133F			@
   840
   841 				; optimize OK (main.pas), line = 124
   842
   843 133F A5 58			lda T0B
   844 1341 85 59			sta NEWDIR
   845
   846 1343 4C 64 13			jmp a_0003
   847 1346			l_0259
   848 1346 C9 02			cmp #$02
   849 1348 D0 07			jne l_0268
   850 134A			@
   851
   852 				; optimize OK (main.pas), line = 125
   853
   854 134A A5 58			lda T0B
   855 134C 85 59			sta NEWDIR
   856
   857 134E 4C 64 13			jmp a_0003
   858 1351			l_0268
   859 1351 C9 04			cmp #$04
   860 1353 D0 07			jne l_0277
   861 1355			@
   862
   863 				; optimize OK (main.pas), line = 126
   864
   865 1355 A5 58			lda T0B
   866 1357 85 59			sta NEWDIR
   867
   868 1359 4C 64 13			jmp a_0003
   869 135C			l_0277
   870 135C C9 08			cmp #$08
   871 135E D0 04			jne l_0286
   872 1360			@
   873
   874 				; optimize OK (main.pas), line = 127
   875
   876 1360 A5 58			lda T0B
   877 1362 85 59			sta NEWDIR
   878
   879 1364			l_0286
   880 1364			a_0003
   881
   882 				; optimize OK (main.pas), line = 130
   883
   884 1364 A5 59			lda NEWDIR
   885 1366 2D 79 16			and AVAILDIR
   886 1369 D0 1B			jne l_02AC
   887
   888 				; optimize OK (main.pas), line = 131
   889
   890 136B AC 7B 16 84 12 AC + 	mwy PLY :bp2
   891 1375 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   892 1377 A9 01			lda #$01
   893 1379 91 12			sta (:bp2),y
   894 137B A9 00			lda #$00
   895 137D 8D 7A 16			sta ALIVE
   896 1380 A0 02			ldy #PLY.HEAD-DATAORIGIN
   897 1382 A9 57			lda #$57
   898 1384 91 12			sta (:bp2),y
   899 1386			l_02AC
   900
   901 				; ------------------------------------------------------------
   902
   903 = 169F			@CASETMP_0003	= DATAORIGIN+$0037
   904
   905 = 169F			@VarData	= @CASETMP_0003
   906 = 0001			@VarDataSize	= 1
   907
   908 1386			@exit
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					els
   916 1386 60				rts						; ret
   917 					eif
   918 				.endl
   919
   920 1387			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   921
   922 				; optimize OK (main.pas), line = 138
   923
   924 1387 AC 7B 16 84 12 AC + 	mwy PLY :bp2
   925 1391 A0 04			ldy #PLY.DIR-DATAORIGIN
   926 1393 B1 12			lda (:bp2),y
   927 1395 2D 79 16			and AVAILDIR
   928 1398 F0 07			jeq l_02D7
   929 139A B1 12			lda (:bp2),y
   930 139C 85 59			sta NEWDIR
   931 139E 4C C1 13			jmp l_02E7
   932 13A1			l_02D7
   933
   934 				; optimize OK (main.pas), line = 140
   935
   936 13A1 A9 00			lda #$00
   937 13A3 85 5A			sta T0N
   938
   939 				; --- RepeatUntilProlog
   940 13A5			l_02EC
   941
   942 				; optimize FAIL (0, main.pas), line = 142
   943
   944 13A5 A9 04			lda #$04
   945 13A7 20 29 11			jsr SYSTEM.RANDOM_006C
   946 13AA B4 18			ldy :STACKORIGIN,x
   947 13AC B9 40 10			lda adr.DIRECTION,y
   948 13AF 85 59			sta NEWDIR
   949 13B1 CA				dex
   950
   951 				; optimize OK (main.pas), line = 143
   952
   953 13B2 AD 79 16			lda AVAILDIR
   954 13B5 25 59			and NEWDIR
   955 13B7 F0 04			jeq l_030C
   956 13B9 A9 01			lda #$01
   957 13BB 85 5A			sta T0N
   958 13BD			l_030C
   959
   960 				; optimize OK (main.pas), line = 144
   961
   962 13BD A5 5A			lda T0N
   963 13BF F0 E4			jeq l_02EC
   964 13C1			l_02E7
   965 13C1			@exit
   966 					.ifdef @new
   967 					lda <@VarData
   968 					sta :ztmp
   969 					lda >@VarData
   970 					ldy #@VarDataSize-1
   971 					jmp @FreeMem
   972 					els
   973 13C1 60				rts						; ret
   974 					eif
   975 				.endl
   976
   977 13C2			.local	PLAYERMOVE					; PROCEDURE
   978
   979 				; optimize OK (main.pas), line = 152
   980
   981 13C2 AD A0 16			lda P
   982 13C5 8D 7B 16			sta PLY
   983 13C8 85 12			sta :bp2
   984 13CA AD A1 16			lda P+1
   985 13CD 8D 7C 16			sta PLY+1
   986 13D0 85 13			sta :bp2+1
   987 				; optimize OK (main.pas), line = 154
   988 13D2 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   989 13D4 B1 12			lda (:bp2),y
   990 13D6 F0 03 4C A9 15		jne l_0332
   991
   992 				; optimize OK (main.pas), line = 156
   993
   994 13DB A0 00			ldy #PLY.X-DATAORIGIN
   995 13DD B1 12			lda (:bp2),y
   996 13DF 8D 9D 16			sta CHECKAVAILDIR.X
   997 13E2 A0 01			ldy #PLY.Y-DATAORIGIN
   998 13E4 B1 12			lda (:bp2),y
   999 13E6 8D 9E 16			sta CHECKAVAILDIR.Y
  1000 13E9 20 92 12			jsr CHECKAVAILDIR
  1001
  1002 				; optimize OK (main.pas), line = 158
  1003
  1004 13EC AD 79 16			lda AVAILDIR
  1005 13EF D0 36			jne l_034C
  1006
  1007 				; optimize OK (main.pas), line = 159
  1008
  1009 13F1 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1010 13FB A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1011 13FD A9 01			lda #$01
  1012 13FF 91 12			sta (:bp2),y
  1013 1401 CE 7A 16			dec ALIVE
  1014
  1015 				; optimize OK (main.pas), line = 160
  1016
  1017 1404 A0 00			ldy #PLY.X-DATAORIGIN
  1018 1406 B1 12			lda (:bp2),y
  1019 1408 8D 99 16			sta PUTCHAR.X
  1020 140B A0 01			ldy #PLY.Y-DATAORIGIN
  1021 140D B1 12			lda (:bp2),y
  1022 140F 8D 9A 16			sta PUTCHAR.Y
  1023 1412 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1024 1414 B1 12			lda (:bp2),y
  1025 1416 18 69 80			add #$80
  1026 1419 8D 9C 16			sta PUTCHAR.C
  1027 141C A9 57			lda #$57
  1028 141E 8D 9B 16			sta PUTCHAR.V
  1029 1421 20 67 12			jsr PUTCHAR
  1030 1424 4C A9 15			jmp l_036D
  1031 1427			l_034C
  1032
  1033 				; optimize OK (main.pas), line = 163
  1034
  1035 1427 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1036 1431 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1037 1433 B1 12			lda (:bp2),y
  1038 1435 8D A2 16			sta @CASETMP_0004
  1039 1438 C9 00			cmp #$00
  1040 143A D0 06			jne l_0378
  1041 143C			@
  1042
  1043 				; optimize FAIL ('HUMAN', main.pas), line = 164
  1044
  1045 143C 20 17 13			jsr HUMAN
  1046 143F 4C 49 14			jmp a_0004
  1047 1442			l_0378
  1048 1442 C9 01			cmp #$01
  1049 1444 D0 03			jne l_0382
  1050 1446			@
  1051
  1052 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 165
  1053
  1054 1446 20 87 13			jsr AI_STRAIGHTFORWARD
  1055 1449			l_0382
  1056 1449			a_0004
  1057
  1058 				; optimize OK (main.pas), line = 168
  1059
  1060 1449 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1061 1453 A0 04			ldy #PLY.DIR-DATAORIGIN
  1062 1455 B1 12			lda (:bp2),y
  1063 1457 C5 59			cmp NEWDIR
  1064 1459 D0 14			jne l_039D
  1065
  1066 				; optimize OK (main.pas), line = 169
  1067
  1068 145B A5 59			lda NEWDIR
  1069 145D 29 0C			and #$0C
  1070 145F F0 07			jeq l_03B4
  1071 1461 A9 40			lda #$40
  1072 1463 85 58			sta T0B
  1073 1465 4C 6C 14			jmp l_03C2
  1074 1468			l_03B4
  1075 1468 A9 42			lda #$42
  1076 146A 85 58			sta T0B
  1077 146C			l_03C2
  1078 146C 4C DF 14			jmp l_03CF
  1079 146F			l_039D
  1080
  1081 				; optimize OK (main.pas), line = 171
  1082
  1083 146F AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1084 1479 A0 04			ldy #PLY.DIR-DATAORIGIN
  1085 147B B1 12			lda (:bp2),y
  1086 147D 29 0A			and #$0A
  1087 147F F0 0A			jeq l_03F5
  1088 1481 A5 59			lda NEWDIR
  1089 1483 29 05			and #$05
  1090 1485 F0 04			jeq l_03F5
  1091 1487 A9 7D			lda #$7D
  1092 1489 85 58			sta T0B
  1093 148B			l_03F5
  1094
  1095 				; optimize OK (main.pas), line = 172
  1096
  1097 148B AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1098 1495 A0 04			ldy #PLY.DIR-DATAORIGIN
  1099 1497 B1 12			lda (:bp2),y
  1100 1499 29 09			and #$09
  1101 149B F0 0A			jeq l_0422
  1102 149D A5 59			lda NEWDIR
  1103 149F 29 06			and #$06
  1104 14A1 F0 04			jeq l_0422
  1105 14A3 A9 6E			lda #$6E
  1106 14A5 85 58			sta T0B
  1107 14A7			l_0422
  1108
  1109 				; optimize OK (main.pas), line = 173
  1110
  1111 14A7 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1112 14B1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1113 14B3 B1 12			lda (:bp2),y
  1114 14B5 29 06			and #$06
  1115 14B7 F0 0A			jeq l_044F
  1116 14B9 A5 59			lda NEWDIR
  1117 14BB 29 09			and #$09
  1118 14BD F0 04			jeq l_044F
  1119 14BF A9 6D			lda #$6D
  1120 14C1 85 58			sta T0B
  1121 14C3			l_044F
  1122
  1123 				; optimize OK (main.pas), line = 174
  1124
  1125 14C3 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1126 14CD A0 04			ldy #PLY.DIR-DATAORIGIN
  1127 14CF B1 12			lda (:bp2),y
  1128 14D1 29 05			and #$05
  1129 14D3 F0 0A			jeq l_047C
  1130 14D5 A5 59			lda NEWDIR
  1131 14D7 29 0A			and #$0A
  1132 14D9 F0 04			jeq l_047C
  1133 14DB A9 70			lda #$70
  1134 14DD 85 58			sta T0B
  1135 14DF			l_047C
  1136 14DF			l_03CF
  1137
  1138 				; optimize OK (main.pas), line = 176
  1139
  1140 14DF AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1141 14E9 A0 00			ldy #PLY.X-DATAORIGIN
  1142 14EB B1 12			lda (:bp2),y
  1143 14ED 8D 99 16			sta PUTCHAR.X
  1144 14F0 A0 01			ldy #PLY.Y-DATAORIGIN
  1145 14F2 B1 12			lda (:bp2),y
  1146 14F4 8D 9A 16			sta PUTCHAR.Y
  1147 14F7 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1148 14F9 B1 12			lda (:bp2),y
  1149 14FB 8D 9C 16			sta PUTCHAR.C
  1150 14FE A5 58			lda T0B
  1151 1500 8D 9B 16			sta PUTCHAR.V
  1152 1503 20 67 12			jsr PUTCHAR
  1153
  1154 				; optimize OK (main.pas), line = 178
  1155
  1156 1506 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1157 1510 A0 04			ldy #PLY.DIR-DATAORIGIN
  1158 1512 A5 59			lda NEWDIR
  1159 1514 91 12			sta (:bp2),y
  1160
  1161 				; optimize OK (main.pas), line = 180
  1162
  1163 1516 A5 59			lda NEWDIR
  1164 1518 8D A3 16			sta @CASETMP_0005
  1165 151B C9 01			cmp #$01
  1166 151D D0 16			jne l_04A1
  1167 151F			@
  1168
  1169 				; optimize OK (main.pas), line = 181
  1170
  1171 151F AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1172 1529 A0 01			ldy #PLY.Y-DATAORIGIN
  1173 152B B1 12			lda (:bp2),y
  1174 152D 38 E9 01			sub #$01
  1175 1530 91 12			sta (:bp2),y
  1176
  1177 1532 4C 80 15			jmp a_0005
  1178 1535			l_04A1
  1179 1535 C9 02			cmp #$02
  1180 1537 D0 16			jne l_04AB
  1181 1539			@
  1182
  1183 				; optimize OK (main.pas), line = 182
  1184
  1185 1539 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1186 1543 A0 01			ldy #PLY.Y-DATAORIGIN
  1187 1545 B1 12			lda (:bp2),y
  1188 1547 18 69 01			add #$01
  1189 154A 91 12			sta (:bp2),y
  1190
  1191 154C 4C 80 15			jmp a_0005
  1192 154F			l_04AB
  1193 154F C9 04			cmp #$04
  1194 1551 D0 16			jne l_04B5
  1195 1553			@
  1196
  1197 				; optimize OK (main.pas), line = 183
  1198
  1199 1553 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1200 155D A0 00			ldy #PLY.X-DATAORIGIN
  1201 155F B1 12			lda (:bp2),y
  1202 1561 38 E9 01			sub #$01
  1203 1564 91 12			sta (:bp2),y
  1204
  1205 1566 4C 80 15			jmp a_0005
  1206 1569			l_04B5
  1207 1569 C9 08			cmp #$08
  1208 156B D0 13			jne l_04BF
  1209 156D			@
  1210
  1211 				; optimize OK (main.pas), line = 184
  1212
  1213 156D AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1214 1577 A0 00			ldy #PLY.X-DATAORIGIN
  1215 1579 B1 12			lda (:bp2),y
  1216 157B 18 69 01			add #$01
  1217 157E 91 12			sta (:bp2),y
  1218
  1219 1580			l_04BF
  1220 1580			a_0005
  1221
  1222 				; optimize OK (main.pas), line = 187
  1223
  1224 1580 AC 7B 16 84 12 AC + 	mwy PLY :bp2
  1225 158A A0 00			ldy #PLY.X-DATAORIGIN
  1226 158C B1 12			lda (:bp2),y
  1227 158E 8D 99 16			sta PUTCHAR.X
  1228 1591 A0 01			ldy #PLY.Y-DATAORIGIN
  1229 1593 B1 12			lda (:bp2),y
  1230 1595 8D 9A 16			sta PUTCHAR.Y
  1231 1598 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1232 159A B1 12			lda (:bp2),y
  1233 159C 8D 9B 16			sta PUTCHAR.V
  1234 159F A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1235 15A1 B1 12			lda (:bp2),y
  1236 15A3 8D 9C 16			sta PUTCHAR.C
  1237 15A6 20 67 12			jsr PUTCHAR
  1238 15A9			l_036D
  1239 15A9			l_0332
  1240
  1241 				; ------------------------------------------------------------
  1242
  1243 = 16A0			P	= DATAORIGIN+$0038
  1244 = 16A2			@CASETMP_0004	= DATAORIGIN+$003A
  1245 = 16A3			@CASETMP_0005	= DATAORIGIN+$003B
  1246
  1247 = 16A0			@VarData	= P
  1248 = 0004			@VarDataSize	= 4
  1249
  1250 15A9			@exit
  1251 					.ifdef @new
  1252 					lda <@VarData
  1253 					sta :ztmp
  1254 					lda >@VarData
  1255 					ldy #@VarDataSize-1
  1256 					jmp @FreeMem
  1257 					els
  1258 15A9 60				rts						; ret
  1259 					eif
  1260 				.endl
  1261 15AA			l_0007
  1262
  1263 				; optimize OK (main.pas), line = 198
  1264
  1265 15AA A9 00			lda #$00
  1266 15AC 8D 78 16			sta GAMEOVER
  1267
  1268 				; --- RepeatUntilProlog
  1269 15AF			l_04DD
  1270
  1271 				; optimize OK (main.pas), line = 201
  1272
  1273 15AF A9 03			lda #$03
  1274 15B1 8D 7A 16			sta ALIVE
  1275
  1276 				; optimize FAIL ('INITPLAYERS', main.pas), line = 202
  1277
  1278 15B4 20 DA 11			jsr INITPLAYERS
  1279
  1280 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 203
  1281
  1282 15B7 20 5A 11			jsr INITPLAYFIELD
  1283
  1284 				; optimize OK (main.pas), line = 205
  1285
  1286 15BA A9 01			lda #$01
  1287 15BC 8D 82 16			sta PLAYER1.BRAIN
  1288
  1289 				; optimize OK (main.pas), line = 206
  1290
  1291 15BF 8D 89 16			sta PLAYER2.BRAIN
  1292
  1293 				; optimize OK (main.pas), line = 207
  1294
  1295 15C2 8D 90 16			sta PLAYER3.BRAIN
  1296
  1297 				; optimize OK (main.pas), line = 208
  1298
  1299 15C5 A9 00			lda #$00
  1300 15C7 8D 97 16			sta PLAYER4.BRAIN
  1301
  1302 				; --- RepeatUntilProlog
  1303 15CA			l_04F4
  1304
  1305 				; optimize OK (main.pas), line = 211
  1306
  1307 15CA A9 01			lda #$01
  1308 15CC 8D 74 16			sta SYSTEM.PAUSE_006B.N
  1309 15CF A9 00			lda #$00
  1310 15D1 8D 75 16			sta SYSTEM.PAUSE_006B.N+1
  1311 15D4 20 0C 11			jsr SYSTEM.PAUSE_006B
  1312 15D7 AD 60 16			lda PLAYER1
  1313 15DA 8D A0 16			sta PLAYERMOVE.P
  1314 15DD AD 61 16			lda PLAYER1+1
  1315 15E0 8D A1 16			sta PLAYERMOVE.P+1
  1316 15E3 20 C2 13			jsr PLAYERMOVE
  1317
  1318 				; optimize OK (main.pas), line = 212
  1319
  1320 15E6 A9 01			lda #$01
  1321 15E8 8D 74 16			sta SYSTEM.PAUSE_006B.N
  1322 15EB A9 00			lda #$00
  1323 15ED 8D 75 16			sta SYSTEM.PAUSE_006B.N+1
  1324 15F0 20 0C 11			jsr SYSTEM.PAUSE_006B
  1325 15F3 AD 62 16			lda PLAYER2
  1326 15F6 8D A0 16			sta PLAYERMOVE.P
  1327 15F9 AD 63 16			lda PLAYER2+1
  1328 15FC 8D A1 16			sta PLAYERMOVE.P+1
  1329 15FF 20 C2 13			jsr PLAYERMOVE
  1330
  1331 				; optimize OK (main.pas), line = 213
  1332
  1333 1602 A9 01			lda #$01
  1334 1604 8D 74 16			sta SYSTEM.PAUSE_006B.N
  1335 1607 A9 00			lda #$00
  1336 1609 8D 75 16			sta SYSTEM.PAUSE_006B.N+1
  1337 160C 20 0C 11			jsr SYSTEM.PAUSE_006B
  1338 160F AD 64 16			lda PLAYER3
  1339 1612 8D A0 16			sta PLAYERMOVE.P
  1340 1615 AD 65 16			lda PLAYER3+1
  1341 1618 8D A1 16			sta PLAYERMOVE.P+1
  1342 161B 20 C2 13			jsr PLAYERMOVE
  1343
  1344 				; optimize OK (main.pas), line = 214
  1345
  1346 161E A9 01			lda #$01
  1347 1620 8D 74 16			sta SYSTEM.PAUSE_006B.N
  1348 1623 A9 00			lda #$00
  1349 1625 8D 75 16			sta SYSTEM.PAUSE_006B.N+1
  1350 1628 20 0C 11			jsr SYSTEM.PAUSE_006B
  1351 162B AD 66 16			lda PLAYER4
  1352 162E 8D A0 16			sta PLAYERMOVE.P
  1353 1631 AD 67 16			lda PLAYER4+1
  1354 1634 8D A1 16			sta PLAYERMOVE.P+1
  1355 1637 20 C2 13			jsr PLAYERMOVE
  1356
  1357 				; optimize OK (main.pas), line = 215
  1358
  1359 163A AD 7A 16			lda ALIVE
  1360 163D F0 04			jeq l_04F4x
  1361 163F C9 FF			cmp #$FF
  1362 1641 D0 87			jne l_04F4
  1363 1643			l_04F4x
  1364
  1365 				; optimize OK (main.pas), line = 217
  1366
  1367 1643 A9 64			lda #$64
  1368 1645 8D 74 16			sta SYSTEM.PAUSE_006B.N
  1369 1648 A9 00			lda #$00
  1370 164A 8D 75 16			sta SYSTEM.PAUSE_006B.N+1
  1371 164D 20 0C 11			jsr SYSTEM.PAUSE_006B
  1372
  1373 				; optimize OK (main.pas), line = 218
  1374
  1375 1650 AD 78 16			lda GAMEOVER
  1376 1653 D0 03 4C AF 15		jeq l_04DD
  1377
  1378 				; ------------------------------------------------------------
  1379
  1380 = 0800			ATTRIBUTE_ADDR	= $0800
  1381 = 0C00			SCREEN_ADDR	= $0C00
  1382 = 0020			EMPTY	= $20
  1383 = 00A0			WALL	= $A0
  1384 = 0041			WALL_COLOUR	= $41
  1385 = 0051			PLY_HEAD	= $51
  1386 = 0057			PLY_CRASH	= $57
  1387 = 0042			PLY_TAIL_UD	= $42
  1388 = 0040			PLY_TAIL_LR	= $40
  1389 = 007D			PLY_TAIL_RD	= $7D
  1390 = 006E			PLY_TAIL_RU	= $6E
  1391 = 006D			PLY_TAIL_LD	= $6D
  1392 = 0070			PLY_TAIL_LU	= $70
  1393 = 005F			PLY1_COLOUR	= $5F
  1394 = 005D			PLY2_COLOUR	= $5D
  1395 = 0071			PLY3_COLOUR	= $71
  1396 = 0055			PLY4_COLOUR	= $55
  1397 = 0001			JOY_UP	= $01
  1398 = 0002			JOY_DOWN	= $02
  1399 = 0004			JOY_LEFT	= $04
  1400 = 0008			JOY_RIGHT	= $08
  1401 = 0040			JOY_FIRE	= $40
  1402 = 0002			JOY_SELECT_1	= $02
  1403 = 0004			JOY_SELECT_2	= $04
  1404 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1405 1658			.var MUL40	= adr.MUL40 .word
  1406 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1407 1658			.var DIRECTION	= adr.DIRECTION .word
  1408 = FD30			KEY_PIO	= $FD30
  1409 = FF08			JOY	= $FF08
  1410 = FF15			BORDERCOLOR	= $FF15
  1411 = FF19			BGCOLOR	= $FF19
  1412 = 0058			T0B	= $58
  1413 = 0059			NEWDIR	= $59
  1414 = 005A			T0N	= $5A
  1415 = 005B			T0W	= $5B
  1416 = 1678			GAMEOVER	= DATAORIGIN+$0010
  1417 = 1679			AVAILDIR	= DATAORIGIN+$0011
  1418 = 167A			ALIVE	= DATAORIGIN+$0012
  1419 = 167B			PLY	= DATAORIGIN+$0013
  1420 = 1668			PLY.X	= DATAORIGIN+$0000
  1421 = 1669			PLY.Y	= DATAORIGIN+$0001
  1422 = 166A			PLY.HEAD	= DATAORIGIN+$0002
  1423 = 166B			PLY.COLOUR	= DATAORIGIN+$0003
  1424 = 166C			PLY.DIR	= DATAORIGIN+$0004
  1425 = 166D			PLY.BRAIN	= DATAORIGIN+$0005
  1426 = 166E			PLY.ISDEAD	= DATAORIGIN+$0006
  1427 = 167D			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1428 1658			.var PLAYER1	= adr.PLAYER1 .word
  1429 = 167D			PLAYER1.X	= DATAORIGIN+$0015
  1430 = 167E			PLAYER1.Y	= DATAORIGIN+$0016
  1431 = 167F			PLAYER1.HEAD	= DATAORIGIN+$0017
  1432 = 1680			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1433 = 1681			PLAYER1.DIR	= DATAORIGIN+$0019
  1434 = 1682			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1435 = 1683			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1436 = 1684			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1437 1658			.var PLAYER2	= adr.PLAYER2 .word
  1438 = 1684			PLAYER2.X	= DATAORIGIN+$001C
  1439 = 1685			PLAYER2.Y	= DATAORIGIN+$001D
  1440 = 1686			PLAYER2.HEAD	= DATAORIGIN+$001E
  1441 = 1687			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1442 = 1688			PLAYER2.DIR	= DATAORIGIN+$0020
  1443 = 1689			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1444 = 168A			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1445 = 168B			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1446 1658			.var PLAYER3	= adr.PLAYER3 .word
  1447 = 168B			PLAYER3.X	= DATAORIGIN+$0023
  1448 = 168C			PLAYER3.Y	= DATAORIGIN+$0024
  1449 = 168D			PLAYER3.HEAD	= DATAORIGIN+$0025
  1450 = 168E			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1451 = 168F			PLAYER3.DIR	= DATAORIGIN+$0027
  1452 = 1690			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1453 = 1691			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1454 = 1692			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1455 1658			.var PLAYER4	= adr.PLAYER4 .word
  1456 = 1692			PLAYER4.X	= DATAORIGIN+$002A
  1457 = 1693			PLAYER4.Y	= DATAORIGIN+$002B
  1458 = 1694			PLAYER4.HEAD	= DATAORIGIN+$002C
  1459 = 1695			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1460 = 1696			PLAYER4.DIR	= DATAORIGIN+$002E
  1461 = 1697			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1462 = 1698			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1463 1658			@exit
  1464
  1465 1658 A2 00		@halt	ldx #$00
  1466 165A 9A				txs
  1467
  1468 165B 60				rts
  1469
  1470 				; ------------------------------------------------------------
  1471
  1472 				; ------------------------------------------------------------
  1473
  1474 165C			.local	@DEFINES
  1475 165C			C4P
  1476 				.endl
  1477
  1478 165C			.local	@RESOURCE
  1479 				.endl
  1480
  1481 = 165C 0E 10		MUL40
  1481 = 165E 40 10		DIRECTION
  1481 = 1660 7D 16		PLAYER1
  1481 = 1662 84 16		PLAYER2
  1481 = 1664 8B 16		PLAYER3
  1481 = 1666 92 16		PLAYER4
  1481 				.endl							; MAIN
  1482
  1483 				; ------------------------------------------------------------
  1484 				; ------------------------------------------------------------
  1485
  1486 				.macro	UNITINITIALIZATION
  1487 				
  1488 					.ifdef MAIN.SYSTEM.@UnitInit
  1489 					jsr MAIN.SYSTEM.@UnitInit
  1490 					eif
  1491 				.endm
  1492
  1493 				; ------------------------------------------------------------
  1494
  1495 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1496 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1496 				SYSTEM: $10BE..$1159
  1497 					eif
  1498
  1499 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1499 				CODE: $100E..$165B
  1500
  1501 				; ------------------------------------------------------------
  1502
  1503 1668				.align $04
  1504
  1505 1668			DATAORIGIN
  1506 1668 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1507
  1508 = 0006			VARINITSIZE	= *-DATAORIGIN
  1509 = 003C			VARDATASIZE	= 60
  1510
  1511 = 16A4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1512
  1513 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1513 				DATA: $1668..$16A4
  1514
  1515 				; ------------------------------------------------------------
  1516
  1517 				.macro	STATICDATA
  1518 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1519 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1520 				.by  $C0 $03 $01 $02 $04 $08
  1521 				.endm
  1522
  1523 					end
