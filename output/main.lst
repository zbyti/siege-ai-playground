mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $105C..$1137
   102
   103 				; ------------------------------------------------------------
   104
   105 1138			START
   106 1138 BA				tsx
   107 1139 8E 4C 2C			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0002			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 30EA			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 113C A2 FE			ldx #256-VLEN
   120 113E A9 00			lda #$00
   121 1140 9D EC 2F E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 1146 A9 EC 85 02 A9 30 + 	mwa #PROGRAMSTACK psptr
   127
   128 114E A2 00			ldx #$00
   129 1150 86 10			stx bp						; BP = 0
   130
   131 1152 CA				dex						; X = 255
   132
   133 1153				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 1153			.local	MAIN						; PROCEDURE
   136
   137 1153 4C 1A 2C			jmp l_001F
   138
   139 				; ------------------------------------------------------------
   140
   141 1156			.local	SYSTEM						; UNIT
   142
   143 1156			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 1156 B5 18			lda :STACKORIGIN,x
   150 1158 85 08			sta A
   151 115A B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 115C 85 09			sta A+1
   153 115E CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 115F A0 00			ldy #0
   158 1161 B1 08 8D 6F 2C		mva (edx),y Result
   159
   160 1166			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 1166 E8				inx
   168 1167 AD 6F 2C 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2C6F			RESULT	= DATAORIGIN+$000B
   182
   183 = 2C6F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 116C 60				rts						; ret
   187 				.endl
   188
   189 116D			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 116D B5 18			lda :STACKORIGIN,x
   196 116F 85 0C			sta VALUE
   197 1171 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 1172 B5 18			lda :STACKORIGIN,x
   204 1174 85 08			sta A
   205 1176 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 1178 85 09			sta A+1
   207 117A CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 117B A0 00			ldy #0
   212 117D A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1181			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1181 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1182			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1182 B5 18			lda :STACKORIGIN,x
   238 1184 85 0C			sta VALUE
   239 1186 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1188 85 0D			sta VALUE+1
   241 118A CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 118B B5 18			lda :STACKORIGIN,x
   248 118D 85 08			sta A
   249 118F B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1191 85 09			sta A+1
   251 1193 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1194 A0 00			ldy #0
   256 1196 A5 0C 91 08			mva value (edx),y
   257 119A C8				iny
   258 119B A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 119F			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 119F 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 11A0			.local	FILLCHAR_006E					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 11A0 20 DC 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 11A3			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 11A3 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 11A4			.local	MOVE_006F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   302
   303 				; ---------------------  ASM Block 026  ---------------------
   304
   305 11A4 20 87 10			jsr @move
   306
   307
   308 				; ------------------------------------------------------------
   309
   310 = 0008			SOURCE	= edx
   311 = 000C			DEST	= ecx
   312 = 0004			COUNT	= eax
   313 11A7			@exit
   314 					.ifdef @new
   315 					lda <@VarData
   316 					sta :ztmp
   317 					lda >@VarData
   318 					ldy #@VarDataSize-1
   319 					jmp @FreeMem
   320 					els
   321 11A7 60				rts						; ret
   322 					eif
   323 				.endl
   324
   325 11A8			.local	MOVE_0070					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   326
   327 				; ---------------------  ASM Block 028  ---------------------
   328
   329 11A8 20 87 10			jsr @move
   330
   331
   332 				; ------------------------------------------------------------
   333
   334 = 0008			SOURCE	= edx
   335 = 000C			DEST	= ecx
   336 = 0004			COUNT	= eax
   337 11AB			@exit
   338 					.ifdef @new
   339 					lda <@VarData
   340 					sta :ztmp
   341 					lda >@VarData
   342 					ldy #@VarDataSize-1
   343 					jmp @FreeMem
   344 					els
   345 11AB 60				rts						; ret
   346 					eif
   347 				.endl
   348
   349 11AC			.local	PAUSE_0085					; PROCEDURE | ASSEMBLER | OVERLOAD
   350
   351 				; ---------------------  ASM Block 034  ---------------------
   352
   353 11AC A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   354
   355 11B2			@exit
   356 					.ifdef @new
   357 					lda <@VarData
   358 					sta :ztmp
   359 					lda >@VarData
   360 					ldy #@VarDataSize-1
   361 					jmp @FreeMem
   362 					els
   363 11B2 60				rts						; ret
   364 					eif
   365 				.endl
   366
   367 11B3			.local	PAUSE_0086					; PROCEDURE | ASSEMBLER | OVERLOAD
   368
   369 				; ---------------------  ASM Block 035  ---------------------
   370
   371
   372 11B3 AD 70 2C		loop  lda n
   373 11B6 0D 71 2C		  ora n+1
   374 11B9 F0 14		  beq stop
   375
   376 11BB A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   377
   378 11C1 AD 70 2C D0 03 CE +   dew n
   379
   380 11CC 4C B3 11		  jmp loop
   381 11CF			stop
   382
   383
   384 				; ------------------------------------------------------------
   385
   386 = 2C70			N	= DATAORIGIN+$000C
   387
   388 = 2C70			@VarData	= N
   389 = 0002			@VarDataSize	= 2
   390
   391 11CF			@exit
   392 					.ifdef @new
   393 					lda <@VarData
   394 					sta :ztmp
   395 					lda >@VarData
   396 					ldy #@VarDataSize-1
   397 					jmp @FreeMem
   398 					els
   399 11CF 60				rts						; ret
   400 					eif
   401 				.endl
   402
   403 11D0			.local	RANDOM_0087					; FUNCTION | ASSEMBLER | OVERLOAD
   404 11D0 8D 72 2C			sta RANGE
   405
   406 				; ---------------------  ASM Block 039  ---------------------
   407
   408
   409 11D3 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   410 11D6 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   411 11D9 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   412 11DC 6D 1E FF		  adc ted_hcount    //Horizontal counter
   413 11DF 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   414 11E2 4D 1E FF		  eor ted_hcount    //Horizontal counter
   415 11E5 A8			  tay
   416
   417 11E6 AD 72 2C		  lda range
   418 11E9 F0 08		  beq stop
   419
   420 11EB 85 0C		  sta ecx
   421 11ED 84 04		  sty eax
   422
   423 11EF 20 24 11		  jsr imulCL
   424 11F2 A8			  tay
   425
   426 11F3 8C 73 2C		stop  sty Result
   427
   428 11F6			@exit
   429
   430 				; ------------------------------------------------------------
   431
   432 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   433 				; as Pointer
   434
   435 11F6 E8				inx
   436 11F7 AD 73 2C 95 18		mva RESULT :STACKORIGIN,x
   437
   438 					.ifdef @new
   439 					lda <@VarData
   440 					sta :ztmp
   441 					lda >@VarData
   442 					ldy #@VarDataSize-1
   443 					jmp @FreeMem
   444 					eif
   445
   446 				; ------------------------------------------------------------
   447
   448 = 2C72			RANGE	= DATAORIGIN+$000E
   449 = 2C73			RESULT	= DATAORIGIN+$000F
   450
   451 = 2C72			@VarData	= RANGE
   452 = 0002			@VarDataSize	= 2
   453
   454 11FC 60				rts						; ret
   455 				.endl
   456
   457 				; ------------------------------------------------------------
   458
   459 = 0101			__PORTB_BANKS	= $0101
   460 = 0648			M_PI_2	= $0648
   461 = 0192			D_PI_2	= $0192
   462 = 0004			D_PI_180	= $04
   463 = 0000			MGTIA	= $00
   464 = 0080			MVBXE	= $80
   465 = 0000			VBXE_XDLADR	= $00
   466 = 0100			VBXE_BCBADR	= $0100
   467 = 1000			VBXE_MAPADR	= $1000
   468 = 1000			VBXE_CHBASE	= $1000
   469 = 5000			VBXE_OVRADR	= $5000
   470 = B000			VBXE_WINDOW	= $B000
   471 = 0000			IDLI	= $00
   472 = 0001			IVBL	= $01
   473 = 00FE			CH_DELCHR	= $FE
   474 = 009B			CH_ENTER	= $9B
   475 = 001B			CH_ESC	= $1B
   476 = 001C			CH_CURS_UP	= $1C
   477 = 001D			CH_CURS_DOWN	= $1D
   478 = 001E			CH_CURS_LEFT	= $1E
   479 = 001F			CH_CURS_RIGHT	= $1F
   480 = 007F			CH_TAB	= $7F
   481 = 009B			CH_EOL	= $9B
   482 = 007D			CH_CLR	= $7D
   483 = 00FD			CH_BELL	= $FD
   484 = 007E			CH_DEL	= $7E
   485 = 009C			CH_DELLINE	= $9C
   486 = 009D			CH_INSLINE	= $9D
   487 = 0000			COLOR_BLACK	= $00
   488 = 000E			COLOR_WHITE	= $0E
   489 = 0032			COLOR_RED	= $32
   490 = 0096			COLOR_CYAN	= $96
   491 = 0068			COLOR_VIOLET	= $68
   492 = 00C4			COLOR_GREEN	= $C4
   493 = 0074			COLOR_BLUE	= $74
   494 = 00EE			COLOR_YELLOW	= $EE
   495 = 0028			COLOR_ORANGE	= $28
   496 = 00E4			COLOR_BROWN	= $E4
   497 = 003C			COLOR_LIGHTRED	= $3C
   498 = 0004			COLOR_GRAY1	= $04
   499 = 0006			COLOR_GRAY2	= $06
   500 = 000A			COLOR_GRAY3	= $0A
   501 = 00CC			COLOR_LIGHTGREEN	= $CC
   502 = 007C			COLOR_LIGHTBLUE	= $7C
   503 = 0004			FMOPENREAD	= $04
   504 = 0008			FMOPENWRITE	= $08
   505 = 0009			FMOPENAPPEND	= $09
   506 = 000C			FMOPENREADWRITE	= $0C
   507 = 2C64			SCREENWIDTH	= DATAORIGIN+$0000
   508 = 2C66			SCREENHEIGHT	= DATAORIGIN+$0002
   509 = 2C68			DATESEPARATOR	= DATAORIGIN+$0004
   510 = D20A			RND	= $D20A
   511 = 02C0			adr.PALETTE	= $02C0
   512 11FD			.var PALETTE	= adr.PALETTE .word
   513 = D012			adr.HPALETTE	= $D012
   514 11FD			.var HPALETTE	= adr.HPALETTE .word
   515 = 2C69			FILEMODE	= DATAORIGIN+$0005
   516 = 2C6A			GRAPHMODE	= DATAORIGIN+$0006
   517 = 2C6B			IORESULT	= DATAORIGIN+$0007
   518 = 2C6C			EOLN	= DATAORIGIN+$0008
   519 = 2C6D			RNDSEED	= DATAORIGIN+$0009
   520
   521 = 11FD C0 02		PALETTE
   521 = 11FF 12 D0		HPALETTE
   521 				.endl							; UNIT SYSTEM
   522
   523 1201			.local	PUTCHAR_008C					; PROCEDURE | OVERLOAD
   524
   525 				; optimize OK (tools.inc), line = 5
   526
   527 1201 AD 97 2C			lda Y
   528 1204 0A				asl @
   529 1205 A8				tay
   530 1206 B9 26 10			lda adr.MUL40,y
   531 1209 18 6D 96 2C			add X
   532 120D 85 5E			sta T0W
   533 120F B9 27 10			lda adr.MUL40+1,y
   534 1212 69 0C			adc #$0C
   535 1214 85 5F			sta T0W+1
   536 1216 A4 5F			ldy T0W+1
   537 1218 84 11			sty :bp+1
   538 121A A4 5E			ldy T0W
   539 121C AD 98 2C			lda V
   540 121F 91 10			sta (:bp),y
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2C96			X	= DATAORIGIN+$0032
   545 = 2C97			Y	= DATAORIGIN+$0033
   546 = 2C98			V	= DATAORIGIN+$0034
   547
   548 = 2C96			@VarData	= X
   549 = 0003			@VarDataSize	= 3
   550
   551 1221			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 1221 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 1222			.local	PRINTXY						; PROCEDURE
   564
   565 				; ------------------------------------------------------------
   566
   567 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   568 				; as Pointer
   569 1222 B5 18			lda :STACKORIGIN,x
   570 1224 8D 9B 2D			sta C
   571 1227 CA				dex
   572
   573 				; ------------------------------------------------------------
   574
   575 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   576 				; as Pointer
   577 1228 B5 18			lda :STACKORIGIN,x
   578 122A 8D 9A 2D			sta Y
   579 122D CA				dex
   580
   581 				; ------------------------------------------------------------
   582
   583 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   584 				; as Pointer
   585 122E B5 18			lda :STACKORIGIN,x
   586 1230 8D 99 2D			sta X
   587 1233 CA				dex
   588
   589 				; ------------------------------------------------------------
   590
   591 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   592 				; as Pointer
   593 1234 B5 18			lda :STACKORIGIN,x
   594 1236 85 12			sta :bp2
   595 1238 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   596 123A 85 13			sta :bp2+1
   597 123C A0 00			ldy #$00
   598 123E B1 12 99 99 2C C8 + 	mva:rne (:bp2),y adr.S,y+
   599 1246 A9 99 8D 9F 12 A9 + 	mwa #adr.S S
   600 1250 CA				dex
   601
   602 				; optimize OK (tools.inc), line = 12
   603
   604 1251 AD 9A 2D			lda Y
   605 1254 0A				asl @
   606 1255 A8				tay
   607 1256 B9 26 10			lda adr.MUL40,y
   608 1259 18 6D 99 2D			add X
   609 125D 85 5E			sta T0W
   610 125F B9 27 10			lda adr.MUL40+1,y
   611 1262 69 0C			adc #$0C
   612 1264 85 5F			sta T0W+1
   613
   614 				; optimize OK (tools.inc), line = 14
   615
   616 1266 A9 9A			lda <adr.S+$01
   617 1268 85 08			sta SYSTEM.MOVE_0070.SOURCE
   618 126A A9 2C			lda >adr.S+$01
   619 126C 85 09			sta SYSTEM.MOVE_0070.SOURCE+1
   620 126E AD 99 2C			lda adr.S
   621 1271 85 04			sta SYSTEM.MOVE_0070.COUNT
   622 1273 A9 00			lda #$00
   623 1275 85 05			sta SYSTEM.MOVE_0070.COUNT+1
   624 1277 A5 5E			lda T0W
   625 1279 85 0C			sta SYSTEM.MOVE_0070.DEST
   626 127B A5 5F			lda T0W+1
   627 127D 85 0D			sta SYSTEM.MOVE_0070.DEST+1
   628 127F 20 A8 11			jsr SYSTEM.MOVE_0070
   629
   630 				; optimize OK (tools.inc), line = 15
   631
   632 1282 A5 5E			lda T0W
   633 1284 85 08			sta SYSTEM.FILLCHAR_006E.A
   634 1286 A5 5F			lda T0W+1
   635 1288 38 E9 04			sub #$04
   636 128B 85 09			sta SYSTEM.FILLCHAR_006E.A+1
   637 128D AD 99 2C			lda adr.S
   638 1290 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
   639 1292 AD 9B 2D			lda C
   640 1295 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
   641 1297 A9 00			lda #$00
   642 1299 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
   643 129B 20 A0 11			jsr SYSTEM.FILLCHAR_006E
   644
   645 				; ------------------------------------------------------------
   646
   647 = 2C99			adr.S	= [DATAORIGIN+$0035] .array [256]
   648 129E			.var S	= adr.S .word
   649 = 2D99			X	= DATAORIGIN+$0135
   650 = 2D9A			Y	= DATAORIGIN+$0136
   651 = 2D9B			C	= DATAORIGIN+$0137
   652
   653 = 129F			@VarData	= S
   654 = 0103			@VarDataSize	= 259
   655
   656 129E			@exit
   657 					.ifdef @new
   658 					lda <@VarData
   659 					sta :ztmp
   660 					lda >@VarData
   661 					ldy #@VarDataSize-1
   662 					jmp @FreeMem
   663 					els
   664 129E 60				rts						; ret
   665 					eif
   666 = 129F 99 2C		S
   666 				.endl
   667
   668 12A1			.local	PUTCHAR_00D8					; PROCEDURE | OVERLOAD
   669
   670 				; optimize OK (tools.inc), line = 23
   671
   672 12A1 AD 9D 2D			lda Y
   673 12A4 0A				asl @
   674 12A5 A8				tay
   675 12A6 B9 26 10			lda adr.MUL40,y
   676 12A9 18 6D 9C 2D			add X
   677 12AD 85 5E			sta T0W
   678 12AF B9 27 10			lda adr.MUL40+1,y
   679 12B2 69 08			adc #$08
   680 12B4 85 5F			sta T0W+1
   681
   682 				; optimize OK (tools.inc), line = 24
   683
   684 12B6 85 11			sta :bp+1
   685 12B8 A4 5E			ldy T0W
   686 12BA AD 9F 2D			lda C
   687 12BD 91 10			sta (:bp),y
   688 12BF A5 5F			lda T0W+1
   689 12C1 18 69 04			add #$04
   690 12C4 85 11			sta :bp+1
   691 12C6 AD 9E 2D			lda V
   692 12C9 91 10			sta (:bp),y
   693
   694 				; ------------------------------------------------------------
   695
   696 = 2D9C			X	= DATAORIGIN+$0138
   697 = 2D9D			Y	= DATAORIGIN+$0139
   698 = 2D9E			V	= DATAORIGIN+$013A
   699 = 2D9F			C	= DATAORIGIN+$013B
   700
   701 = 2D9C			@VarData	= X
   702 = 0004			@VarDataSize	= 4
   703
   704 12CB			@exit
   705 					.ifdef @new
   706 					lda <@VarData
   707 					sta :ztmp
   708 					lda >@VarData
   709 					ldy #@VarDataSize-1
   710 					jmp @FreeMem
   711 					els
   712 12CB 60				rts						; ret
   713 					eif
   714 				.endl
   715
   716 12CC			.local	SHOWSCORE					; PROCEDURE
   717
   718 				; optimize OK (tools.inc), line = 39
   719
   720 12CC AD 7D 2C			lda PLAYER1.ISALIVE
   721 12CF F0 19			jeq l_010D
   722 12D1 AD 79 2C			lda PLAYER1.COLOUR
   723 12D4 8D 9F 2D			sta PUTCHAR_00D8.C
   724 12D7 AD 7C 2C			lda PLAYER1.SCORE
   725 12DA 8D 9E 2D			sta PUTCHAR_00D8.V
   726 12DD A9 00			lda #$00
   727 12DF 8D 9D 2D			sta PUTCHAR_00D8.Y
   728 12E2 A9 1E			lda #$1E
   729 12E4 8D 9C 2D			sta PUTCHAR_00D8.X
   730 12E7 20 A1 12			jsr PUTCHAR_00D8
   731 12EA			l_010D
   732
   733 				; optimize OK (tools.inc), line = 40
   734
   735 12EA AD 85 2C			lda PLAYER2.ISALIVE
   736 12ED F0 19			jeq l_0125
   737 12EF AD 81 2C			lda PLAYER2.COLOUR
   738 12F2 8D 9F 2D			sta PUTCHAR_00D8.C
   739 12F5 AD 84 2C			lda PLAYER2.SCORE
   740 12F8 8D 9E 2D			sta PUTCHAR_00D8.V
   741 12FB A9 00			lda #$00
   742 12FD 8D 9D 2D			sta PUTCHAR_00D8.Y
   743 1300 A9 20			lda #$20
   744 1302 8D 9C 2D			sta PUTCHAR_00D8.X
   745 1305 20 A1 12			jsr PUTCHAR_00D8
   746 1308			l_0125
   747
   748 				; optimize OK (tools.inc), line = 41
   749
   750 1308 AD 8D 2C			lda PLAYER3.ISALIVE
   751 130B F0 19			jeq l_013D
   752 130D AD 89 2C			lda PLAYER3.COLOUR
   753 1310 8D 9F 2D			sta PUTCHAR_00D8.C
   754 1313 AD 8C 2C			lda PLAYER3.SCORE
   755 1316 8D 9E 2D			sta PUTCHAR_00D8.V
   756 1319 A9 00			lda #$00
   757 131B 8D 9D 2D			sta PUTCHAR_00D8.Y
   758 131E A9 22			lda #$22
   759 1320 8D 9C 2D			sta PUTCHAR_00D8.X
   760 1323 20 A1 12			jsr PUTCHAR_00D8
   761 1326			l_013D
   762
   763 				; optimize OK (tools.inc), line = 42
   764
   765 1326 AD 95 2C			lda PLAYER4.ISALIVE
   766 1329 F0 19			jeq l_0155
   767 132B AD 91 2C			lda PLAYER4.COLOUR
   768 132E 8D 9F 2D			sta PUTCHAR_00D8.C
   769 1331 AD 94 2C			lda PLAYER4.SCORE
   770 1334 8D 9E 2D			sta PUTCHAR_00D8.V
   771 1337 A9 00			lda #$00
   772 1339 8D 9D 2D			sta PUTCHAR_00D8.Y
   773 133C A9 24			lda #$24
   774 133E 8D 9C 2D			sta PUTCHAR_00D8.X
   775 1341 20 A1 12			jsr PUTCHAR_00D8
   776 1344			l_0155
   777 1344			@exit
   778 					.ifdef @new
   779 					lda <@VarData
   780 					sta :ztmp
   781 					lda >@VarData
   782 					ldy #@VarDataSize-1
   783 					jmp @FreeMem
   784 					els
   785 1344 60				rts						; ret
   786 					eif
   787 				.endl
   788
   789 1345			.local	UPDATESCORE					; PROCEDURE
   790
   791 				; optimize OK (tools.inc), line = 49
   792
   793 1345 AD 7D 2C			lda PLAYER1.ISALIVE
   794 1348 F0 03			jeq l_0171
   795 134A EE 7C 2C			inc PLAYER1.SCORE
   796 134D			l_0171
   797
   798 				; optimize OK (tools.inc), line = 50
   799
   800 134D AD 85 2C			lda PLAYER2.ISALIVE
   801 1350 F0 03			jeq l_0184
   802 1352 EE 84 2C			inc PLAYER2.SCORE
   803 1355			l_0184
   804
   805 				; optimize OK (tools.inc), line = 51
   806
   807 1355 AD 8D 2C			lda PLAYER3.ISALIVE
   808 1358 F0 03			jeq l_0197
   809 135A EE 8C 2C			inc PLAYER3.SCORE
   810 135D			l_0197
   811
   812 				; optimize OK (tools.inc), line = 52
   813
   814 135D AD 95 2C			lda PLAYER4.ISALIVE
   815 1360 F0 03			jeq l_01AA
   816 1362 EE 94 2C			inc PLAYER4.SCORE
   817 1365			l_01AA
   818 1365			@exit
   819 					.ifdef @new
   820 					lda <@VarData
   821 					sta :ztmp
   822 					lda >@VarData
   823 					ldy #@VarDataSize-1
   824 					jmp @FreeMem
   825 					els
   826 1365 60				rts						; ret
   827 					eif
   828 				.endl
   829
   830 1366			.local	CHECKAVAILDIR					; PROCEDURE
   831
   832 				; optimize OK (tools.inc), line = 59
   833
   834 1366 A9 00			lda #$00
   835 1368 85 5C			sta AVAILDIR
   836
   837 				; optimize OK (tools.inc), line = 60
   838
   839 136A AC 53 2C 84 12 AC + 	mwy PLY :bp2
   840 1374 A0 01			ldy #PLY.Y-DATAORIGIN
   841 1376 B1 12			lda (:bp2),y
   842 1378 0A				asl @
   843 1379 A8				tay
   844 137A A9 00			lda #$00
   845 137C 18 79 26 10			add adr.MUL40,y
   846 1380 85 21			sta :STACKORIGIN+9
   847 1382 A9 0C			lda #$0C
   848 1384 79 27 10			adc adr.MUL40+1,y
   849 1387 85 31			sta :STACKORIGIN+STACKWIDTH+9
   850 1389 A0 00			ldy #PLY.X-DATAORIGIN
   851 138B A5 21			lda :STACKORIGIN+9
   852 138D 18 71 12			add (:bp2),y
   853 1390 85 5E			sta T0W
   854 1392 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   855 1394 69 00			adc #$00
   856 1396 85 5F			sta T0W+1
   857
   858 				; optimize OK (tools.inc), line = 62
   859
   860 1398 A5 5E			lda T0W
   861 139A 38 E9 28			sub #$28
   862 139D 85 21			sta :STACKORIGIN+9
   863 139F A5 5F			lda T0W+1
   864 13A1 E9 00			sbc #$00
   865 13A3 85 11			sta :bp+1
   866 13A5 A4 21			ldy :STACKORIGIN+9
   867 13A7 B1 10			lda (:bp),y
   868 13A9 C9 20			cmp #$20
   869 13AB D0 06			jne l_01E1
   870 13AD A5 5C			lda AVAILDIR
   871 13AF 09 01			ora #$01
   872 13B1 85 5C			sta AVAILDIR
   873 13B3			l_01E1
   874
   875 				; optimize OK (tools.inc), line = 63
   876
   877 13B3 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   878 13BB A0 28			ldy #$28
   879 13BD B1 12			lda (:bp2),y
   880 13BF C9 20			cmp #$20
   881 13C1 D0 06			jne l_0204
   882 13C3 A5 5C			lda AVAILDIR
   883 13C5 09 02			ora #$02
   884 13C7 85 5C			sta AVAILDIR
   885 13C9			l_0204
   886
   887 				; optimize OK (tools.inc), line = 64
   888
   889 13C9 A5 5E			lda T0W
   890 13CB 38 E9 01			sub #$01
   891 13CE 85 21			sta :STACKORIGIN+9
   892 13D0 A5 5F			lda T0W+1
   893 13D2 E9 00			sbc #$00
   894 13D4 85 11			sta :bp+1
   895 13D6 A4 21			ldy :STACKORIGIN+9
   896 13D8 B1 10			lda (:bp),y
   897 13DA C9 20			cmp #$20
   898 13DC D0 06			jne l_0227
   899 13DE A5 5C			lda AVAILDIR
   900 13E0 09 04			ora #$04
   901 13E2 85 5C			sta AVAILDIR
   902 13E4			l_0227
   903
   904 				; optimize OK (tools.inc), line = 65
   905
   906 13E4 A4 5E 84 12 A4 5F + 	mwy T0W :bp2
   907 13EC A0 01			ldy #$01
   908 13EE B1 12			lda (:bp2),y
   909 13F0 C9 20			cmp #$20
   910 13F2 D0 06			jne l_024A
   911 13F4 A5 5C			lda AVAILDIR
   912 13F6 09 08			ora #$08
   913 13F8 85 5C			sta AVAILDIR
   914 13FA			l_024A
   915 13FA			@exit
   916 					.ifdef @new
   917 					lda <@VarData
   918 					sta :ztmp
   919 					lda >@VarData
   920 					ldy #@VarDataSize-1
   921 					jmp @FreeMem
   922 					els
   923 13FA 60				rts						; ret
   924 					eif
   925 				.endl
   926
   927 13FB			.local	ANIMATEOBSTACLES				; PROCEDURE
   928
   929 				; optimize FAIL (0, tools.inc), line = 74
   930
   931 13FB EE A0 2D			inc COUNTER
   932
   933 				; optimize OK (tools.inc), line = 75
   934
   935 13FE AD A0 2D			lda COUNTER
   936 1401 29 01			and #$01
   937 1403 F0 08			jeq l_0275
   938 1405 A9 54			lda #$54
   939 1407 8D A1 2D			sta OBST
   940 140A 4C 12 14			jmp l_0283
   941 140D			l_0275
   942 140D A9 55			lda #$55
   943 140F 8D A1 2D			sta OBST
   944 1412			l_0283
   945
   946 				; optimize OK (tools.inc), line = 76
   947
   948 1412 A9 07			lda #$07
   949 1414 85 59			sta I0B
   950
   951 1416			l_0290
   952 				; --- ForToDoCondition
   953 1416 A5 59			lda I0B
   954 1418 0A				asl @
   955 1419 A8				tay
   956 141A B9 60 00			lda adr.OBSTACLES,y
   957 141D 85 21			sta :STACKORIGIN+9
   958 141F B9 61 00			lda adr.OBSTACLES+1,y
   959 1422 85 11			sta :bp+1
   960 1424 A4 21			ldy :STACKORIGIN+9
   961 1426 AD A1 2D			lda OBST
   962 1429 91 10			sta (:bp),y
   963 142B C6 59			dec I0B
   964 142D 10 E7			jpl l_0290
   965 142F			l_029E
   966
   967 				; ------------------------------------------------------------
   968
   969 = 2DA0			COUNTER	= DATAORIGIN+$013C
   970 = 2DA1			OBST	= DATAORIGIN+$013D
   971 = 0000			@FORTMP_028D	= $00
   972
   973 = 2DA0			@VarData	= COUNTER
   974 = 0002			@VarDataSize	= 2
   975
   976 142F			@exit
   977 					.ifdef @new
   978 					lda <@VarData
   979 					sta :ztmp
   980 					lda >@VarData
   981 					ldy #@VarDataSize-1
   982 					jmp @FreeMem
   983 					els
   984 142F 60				rts						; ret
   985 					eif
   986 				.endl
   987
   988 1430			.local	CALCOBSTACLEADDR				; FUNCTION
   989
   990 				; optimize OK (tools.inc), line = 83
   991
   992 1430 AD A3 2D			lda Y
   993 1433 0A				asl @
   994 1434 A8				tay
   995 1435 AD A2 2D			lda X
   996 1438 18 79 26 10			add adr.MUL40,y
   997 143C 8D A4 2D			sta RESULT
   998 143F A9 0C			lda #$0C
   999 1441 79 27 10			adc adr.MUL40+1,y
  1000 1444 8D A5 2D			sta RESULT+1
  1001 1447			@exit
  1002
  1003 				; ------------------------------------------------------------
  1004
  1005 				; Push WORD / SMALLINT / SHORTREAL / POINTER
  1006 				; as Pointer
  1007
  1008 1447 E8				inx
  1009 1448 AD A4 2D 95 18		mva RESULT :STACKORIGIN,x
  1010 144D AD A5 2D 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1011
  1012 					.ifdef @new
  1013 					lda <@VarData
  1014 					sta :ztmp
  1015 					lda >@VarData
  1016 					ldy #@VarDataSize-1
  1017 					jmp @FreeMem
  1018 					eif
  1019
  1020 				; ------------------------------------------------------------
  1021
  1022 = 2DA2			X	= DATAORIGIN+$013E
  1023 = 2DA3			Y	= DATAORIGIN+$013F
  1024 = 2DA4			RESULT	= DATAORIGIN+$0140
  1025
  1026 = 2DA2			@VarData	= X
  1027 = 0004			@VarDataSize	= 4
  1028
  1029 1452 60				rts						; ret
  1030 				.endl
  1031
  1032 1453			.local	SAVEOBSTACLES					; PROCEDURE
  1033
  1034 				; optimize OK (tools.inc), line = 90
  1035
  1036 1453 A9 07			lda #$07
  1037 1455 85 59			sta I0B
  1038
  1039 1457			l_02D1
  1040 				; --- ForToDoCondition
  1041
  1042 				; optimize OK (tools.inc), line = 91
  1043
  1044 1457 A5 59			lda I0B
  1045 1459 0A				asl @
  1046 145A A8				tay
  1047 145B B9 61 00			lda adr.OBSTACLES+1,y
  1048 145E C9 00			cmp #$00
  1049 1460 D0 05			bne @+
  1050 1462 B9 60 00			lda adr.OBSTACLES,y
  1051 1465 C9 5E			cmp #$5E
  1052 1467			@
  1053 1467 F0 29			jeq l_02F3
  1054
  1055 				; optimize OK (tools.inc), line = 92
  1056
  1057 1469 B9 60 00			lda adr.OBSTACLES,y
  1058 146C 85 21			sta :STACKORIGIN+9
  1059 146E B9 61 00			lda adr.OBSTACLES+1,y
  1060 1471 85 11			sta :bp+1
  1061 1473 A4 21			ldy :STACKORIGIN+9
  1062 1475 A9 54			lda #$54
  1063 1477 91 10			sta (:bp),y
  1064
  1065 				; optimize OK (tools.inc), line = 93
  1066
  1067 1479 A5 59			lda I0B
  1068 147B 0A				asl @
  1069 147C A8				tay
  1070 147D B9 60 00			lda adr.OBSTACLES,y
  1071 1480 38 E9 00			sub #$00
  1072 1483 85 21			sta :STACKORIGIN+9
  1073 1485 B9 61 00			lda adr.OBSTACLES+1,y
  1074 1488 E9 04			sbc #$04
  1075 148A 85 11			sta :bp+1
  1076 148C A4 21			ldy :STACKORIGIN+9
  1077 148E A9 65			lda #$65
  1078 1490 91 10			sta (:bp),y
  1079 1492			l_02F3
  1080
  1081 				; --- ForToDoEpilog
  1082 1492 C6 59			dec I0B
  1083 1494 10 C1			jpl l_02D1
  1084 1496			l_02DF
  1085
  1086 				; ------------------------------------------------------------
  1087
  1088 = 0000			@FORTMP_02CE	= $00
  1089 1496			@exit
  1090 					.ifdef @new
  1091 					lda <@VarData
  1092 					sta :ztmp
  1093 					lda >@VarData
  1094 					ldy #@VarDataSize-1
  1095 					jmp @FreeMem
  1096 					els
  1097 1496 60				rts						; ret
  1098 					eif
  1099 				.endl
  1100
  1101 1497			.local	DRAWPLAYER					; PROCEDURE
  1102
  1103 				; optimize OK (tools.inc), line = 102
  1104
  1105 1497 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1106 14A1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1107 14A3 B1 12			lda (:bp2),y
  1108 14A5 C5 5B			cmp NEWDIR
  1109 14A7 D0 14			jne l_0325
  1110
  1111 				; optimize OK (tools.inc), line = 103
  1112
  1113 14A9 A5 5B			lda NEWDIR
  1114 14AB 29 0C			and #$0C
  1115 14AD F0 07			jeq l_033C
  1116 14AF A9 40			lda #$40
  1117 14B1 85 58			sta T0B
  1118 14B3 4C BA 14			jmp l_034A
  1119 14B6			l_033C
  1120 14B6 A9 42			lda #$42
  1121 14B8 85 58			sta T0B
  1122 14BA			l_034A
  1123 14BA 4C 2D 15			jmp l_0357
  1124 14BD			l_0325
  1125
  1126 				; optimize OK (tools.inc), line = 105
  1127
  1128 14BD AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1129 14C7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1130 14C9 B1 12			lda (:bp2),y
  1131 14CB 29 0A			and #$0A
  1132 14CD F0 0A			jeq l_037D
  1133 14CF A5 5B			lda NEWDIR
  1134 14D1 29 05			and #$05
  1135 14D3 F0 04			jeq l_037D
  1136 14D5 A9 7D			lda #$7D
  1137 14D7 85 58			sta T0B
  1138 14D9			l_037D
  1139
  1140 				; optimize OK (tools.inc), line = 106
  1141
  1142 14D9 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1143 14E3 A0 04			ldy #PLY.DIR-DATAORIGIN
  1144 14E5 B1 12			lda (:bp2),y
  1145 14E7 29 09			and #$09
  1146 14E9 F0 0A			jeq l_03AA
  1147 14EB A5 5B			lda NEWDIR
  1148 14ED 29 06			and #$06
  1149 14EF F0 04			jeq l_03AA
  1150 14F1 A9 6E			lda #$6E
  1151 14F3 85 58			sta T0B
  1152 14F5			l_03AA
  1153
  1154 				; optimize OK (tools.inc), line = 107
  1155
  1156 14F5 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1157 14FF A0 04			ldy #PLY.DIR-DATAORIGIN
  1158 1501 B1 12			lda (:bp2),y
  1159 1503 29 06			and #$06
  1160 1505 F0 0A			jeq l_03D7
  1161 1507 A5 5B			lda NEWDIR
  1162 1509 29 09			and #$09
  1163 150B F0 04			jeq l_03D7
  1164 150D A9 6D			lda #$6D
  1165 150F 85 58			sta T0B
  1166 1511			l_03D7
  1167
  1168 				; optimize OK (tools.inc), line = 108
  1169
  1170 1511 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1171 151B A0 04			ldy #PLY.DIR-DATAORIGIN
  1172 151D B1 12			lda (:bp2),y
  1173 151F 29 05			and #$05
  1174 1521 F0 0A			jeq l_0404
  1175 1523 A5 5B			lda NEWDIR
  1176 1525 29 0A			and #$0A
  1177 1527 F0 04			jeq l_0404
  1178 1529 A9 70			lda #$70
  1179 152B 85 58			sta T0B
  1180 152D			l_0404
  1181 152D			l_0357
  1182
  1183 				; optimize OK (tools.inc), line = 110
  1184
  1185 152D AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1186 1537 A0 00			ldy #PLY.X-DATAORIGIN
  1187 1539 B1 12			lda (:bp2),y
  1188 153B 8D 96 2C			sta PUTCHAR_008C.X
  1189 153E A0 01			ldy #PLY.Y-DATAORIGIN
  1190 1540 B1 12			lda (:bp2),y
  1191 1542 8D 97 2C			sta PUTCHAR_008C.Y
  1192 1545 A5 58			lda T0B
  1193 1547 8D 98 2C			sta PUTCHAR_008C.V
  1194 154A 20 01 12			jsr PUTCHAR_008C
  1195
  1196 				; optimize OK (tools.inc), line = 112
  1197
  1198 154D AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1199 1557 A0 04			ldy #PLY.DIR-DATAORIGIN
  1200 1559 A5 5B			lda NEWDIR
  1201 155B 91 12			sta (:bp2),y
  1202
  1203 				; optimize OK (tools.inc), line = 114
  1204
  1205 155D A5 5B			lda NEWDIR
  1206 155F 8D A6 2D			sta @CASETMP_0003
  1207 1562 C9 01			cmp #$01
  1208 1564 D0 1A			jne l_0426
  1209 1566			@
  1210
  1211 				; optimize OK (tools.inc), line = 115
  1212
  1213 1566 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1214 1570 A0 01			ldy #PLY.Y-DATAORIGIN
  1215 1572 B1 12			lda (:bp2),y
  1216 1574 38 E9 01			sub #$01
  1217 1577 91 12			sta (:bp2),y
  1218 1579 A9 50			lda #$50
  1219 157B 85 58			sta T0B
  1220
  1221 157D 4C D7 15			jmp a_0003
  1222 1580			l_0426
  1223 1580 C9 02			cmp #$02
  1224 1582 D0 1A			jne l_0434
  1225 1584			@
  1226
  1227 				; optimize OK (tools.inc), line = 116
  1228
  1229 1584 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1230 158E A0 01			ldy #PLY.Y-DATAORIGIN
  1231 1590 B1 12			lda (:bp2),y
  1232 1592 18 69 01			add #$01
  1233 1595 91 12			sta (:bp2),y
  1234 1597 A9 53			lda #$53
  1235 1599 85 58			sta T0B
  1236
  1237 159B 4C D7 15			jmp a_0003
  1238 159E			l_0434
  1239 159E C9 04			cmp #$04
  1240 15A0 D0 1A			jne l_0442
  1241 15A2			@
  1242
  1243 				; optimize OK (tools.inc), line = 117
  1244
  1245 15A2 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1246 15AC A0 00			ldy #PLY.X-DATAORIGIN
  1247 15AE B1 12			lda (:bp2),y
  1248 15B0 38 E9 01			sub #$01
  1249 15B3 91 12			sta (:bp2),y
  1250 15B5 A9 51			lda #$51
  1251 15B7 85 58			sta T0B
  1252
  1253 15B9 4C D7 15			jmp a_0003
  1254 15BC			l_0442
  1255 15BC C9 08			cmp #$08
  1256 15BE D0 17			jne l_0450
  1257 15C0			@
  1258
  1259 				; optimize OK (tools.inc), line = 118
  1260
  1261 15C0 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1262 15CA A0 00			ldy #PLY.X-DATAORIGIN
  1263 15CC B1 12			lda (:bp2),y
  1264 15CE 18 69 01			add #$01
  1265 15D1 91 12			sta (:bp2),y
  1266 15D3 A9 52			lda #$52
  1267 15D5 85 58			sta T0B
  1268
  1269 15D7			l_0450
  1270 15D7			a_0003
  1271
  1272 				; optimize OK (tools.inc), line = 121
  1273
  1274 15D7 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1275 15E1 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1276 15E3 A5 58			lda T0B
  1277 15E5 91 12			sta (:bp2),y
  1278
  1279 				; optimize OK (tools.inc), line = 123
  1280
  1281 15E7 A0 00			ldy #PLY.X-DATAORIGIN
  1282 15E9 B1 12			lda (:bp2),y
  1283 15EB 8D 9C 2D			sta PUTCHAR_00D8.X
  1284 15EE A0 01			ldy #PLY.Y-DATAORIGIN
  1285 15F0 B1 12			lda (:bp2),y
  1286 15F2 8D 9D 2D			sta PUTCHAR_00D8.Y
  1287 15F5 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1288 15F7 B1 12			lda (:bp2),y
  1289 15F9 8D 9E 2D			sta PUTCHAR_00D8.V
  1290 15FC A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1291 15FE B1 12			lda (:bp2),y
  1292 1600 8D 9F 2D			sta PUTCHAR_00D8.C
  1293 1603 20 A1 12			jsr PUTCHAR_00D8
  1294
  1295 				; ------------------------------------------------------------
  1296
  1297 = 2DA6			@CASETMP_0003	= DATAORIGIN+$0142
  1298
  1299 = 2DA6			@VarData	= @CASETMP_0003
  1300 = 0001			@VarDataSize	= 1
  1301
  1302 1606			@exit
  1303 					.ifdef @new
  1304 					lda <@VarData
  1305 					sta :ztmp
  1306 					lda >@VarData
  1307 					ldy #@VarDataSize-1
  1308 					jmp @FreeMem
  1309 					els
  1310 1606 60				rts						; ret
  1311 					eif
  1312 				.endl
  1313
  1314 1607			.local	PLAYERBUSTED					; PROCEDURE
  1315
  1316 				; optimize OK (tools.inc), line = 130
  1317
  1318 1607 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1319 1611 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1320 1613 A9 00			lda #$00
  1321 1615 91 12			sta (:bp2),y
  1322 1617 C6 5A			dec ALIVE
  1323
  1324 				; optimize OK (tools.inc), line = 131
  1325
  1326 1619 A0 00			ldy #PLY.X-DATAORIGIN
  1327 161B B1 12			lda (:bp2),y
  1328 161D 8D 9C 2D			sta PUTCHAR_00D8.X
  1329 1620 A0 01			ldy #PLY.Y-DATAORIGIN
  1330 1622 B1 12			lda (:bp2),y
  1331 1624 8D 9D 2D			sta PUTCHAR_00D8.Y
  1332 1627 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1333 1629 B1 12			lda (:bp2),y
  1334 162B 8D 9E 2D			sta PUTCHAR_00D8.V
  1335 162E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1336 1630 B1 12			lda (:bp2),y
  1337 1632 18 69 80			add #$80
  1338 1635 8D 9F 2D			sta PUTCHAR_00D8.C
  1339 1638 20 A1 12			jsr PUTCHAR_00D8
  1340 163B			@exit
  1341 					.ifdef @new
  1342 					lda <@VarData
  1343 					sta :ztmp
  1344 					lda >@VarData
  1345 					ldy #@VarDataSize-1
  1346 					jmp @FreeMem
  1347 					els
  1348 163B 60				rts						; ret
  1349 					eif
  1350 				.endl
  1351
  1352 163C			.local	CHECKJOYSTATUS					; PROCEDURE
  1353
  1354 				; optimize OK (tools.inc), line = 138
  1355
  1356 163C A9 02			lda #$02
  1357 163E 8D 08 FF			sta JOY
  1358 1641 A9 FF			lda #$FF
  1359 1643 8D 30 FD			sta KEYSCAN
  1360
  1361 				; optimize OK (tools.inc), line = 139
  1362
  1363 1646 AD 08 FF			lda JOY
  1364 1649 49 FF			eor #$FF
  1365 164B 85 5D			sta JOYSTATUS
  1366 164D			@exit
  1367 					.ifdef @new
  1368 					lda <@VarData
  1369 					sta :ztmp
  1370 					lda >@VarData
  1371 					ldy #@VarDataSize-1
  1372 					jmp @FreeMem
  1373 					els
  1374 164D 60				rts						; ret
  1375 					eif
  1376 				.endl
  1377
  1378 164E			.local	SETPLAYER					; PROCEDURE
  1379
  1380 				; optimize OK (tools.inc), line = 146
  1381
  1382 164E AD A7 2D			lda P
  1383 1651 8D 53 2C			sta PLY
  1384 1654 AD A8 2D			lda P+1
  1385 1657 8D 54 2C			sta PLY+1
  1386
  1387 				; optimize OK (tools.inc), line = 148
  1388
  1389 165A AD AB 2D			lda DIR
  1390 165D 8D AF 2D			sta @CASETMP_0004
  1391 1660 C9 01			cmp #$01
  1392 1662 D0 07			jne l_04B7
  1393 1664			@
  1394
  1395 				; optimize OK (tools.inc), line = 149
  1396
  1397 1664 A9 50			lda #$50
  1398 1666 85 58			sta T0B
  1399
  1400 1668 4C 89 16			jmp a_0004
  1401 166B			l_04B7
  1402 166B C9 02			cmp #$02
  1403 166D D0 07			jne l_04C4
  1404 166F			@
  1405
  1406 				; optimize OK (tools.inc), line = 150
  1407
  1408 166F A9 53			lda #$53
  1409 1671 85 58			sta T0B
  1410
  1411 1673 4C 89 16			jmp a_0004
  1412 1676			l_04C4
  1413 1676 C9 04			cmp #$04
  1414 1678 D0 07			jne l_04D1
  1415 167A			@
  1416
  1417 				; optimize OK (tools.inc), line = 151
  1418
  1419 167A A9 51			lda #$51
  1420 167C 85 58			sta T0B
  1421
  1422 167E 4C 89 16			jmp a_0004
  1423 1681			l_04D1
  1424 1681 C9 08			cmp #$08
  1425 1683 D0 04			jne l_04DE
  1426 1685			@
  1427
  1428 				; optimize OK (tools.inc), line = 152
  1429
  1430 1685 A9 52			lda #$52
  1431 1687 85 58			sta T0B
  1432
  1433 1689			l_04DE
  1434 1689			a_0004
  1435
  1436 				; optimize OK (tools.inc), line = 155
  1437
  1438 1689 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1439 1693 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1440 1695 AD AC 2D			lda BRAIN
  1441 1698 91 12			sta (:bp2),y
  1442 169A A0 00			ldy #PLY.X-DATAORIGIN
  1443 169C AD A9 2D			lda X
  1444 169F 91 12			sta (:bp2),y
  1445 16A1 A0 01			ldy #PLY.Y-DATAORIGIN
  1446 16A3 AD AA 2D			lda Y
  1447 16A6 91 12			sta (:bp2),y
  1448 16A8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1449 16AA AD AB 2D			lda DIR
  1450 16AD 91 12			sta (:bp2),y
  1451
  1452 				; optimize OK (tools.inc), line = 156
  1453
  1454 16AF A0 02			ldy #PLY.HEAD-DATAORIGIN
  1455 16B1 A5 58			lda T0B
  1456 16B3 91 12			sta (:bp2),y
  1457 16B5 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1458 16B7 AD AD 2D			lda COLOUR
  1459 16BA 91 12			sta (:bp2),y
  1460 16BC A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1461 16BE AD AE 2D			lda ISALIVE
  1462 16C1 91 12			sta (:bp2),y
  1463
  1464 				; optimize OK (tools.inc), line = 157
  1465
  1466 16C3 AD AE 2D			lda ISALIVE
  1467 16C6 F0 1C			jeq l_0520
  1468
  1469 				; optimize FAIL (0, tools.inc), line = 158
  1470
  1471 16C8 E6 5A			inc ALIVE
  1472 16CA AD AD 2D			lda COLOUR
  1473 16CD 8D 9F 2D			sta PUTCHAR_00D8.C
  1474 16D0 A5 58			lda T0B
  1475 16D2 8D 9E 2D			sta PUTCHAR_00D8.V
  1476 16D5 AD AA 2D			lda Y
  1477 16D8 8D 9D 2D			sta PUTCHAR_00D8.Y
  1478 16DB AD A9 2D			lda X
  1479 16DE 8D 9C 2D			sta PUTCHAR_00D8.X
  1480 16E1 20 A1 12			jsr PUTCHAR_00D8
  1481 16E4			l_0520
  1482
  1483 				; ------------------------------------------------------------
  1484
  1485 = 2DA7			P	= DATAORIGIN+$0143
  1486 = 2DA9			X	= DATAORIGIN+$0145
  1487 = 2DAA			Y	= DATAORIGIN+$0146
  1488 = 2DAB			DIR	= DATAORIGIN+$0147
  1489 = 2DAC			BRAIN	= DATAORIGIN+$0148
  1490 = 2DAD			COLOUR	= DATAORIGIN+$0149
  1491 = 2DAE			ISALIVE	= DATAORIGIN+$014A
  1492 = 2DAF			@CASETMP_0004	= DATAORIGIN+$014B
  1493
  1494 = 2DA7			@VarData	= P
  1495 = 0009			@VarDataSize	= 9
  1496
  1497 16E4			@exit
  1498 					.ifdef @new
  1499 					lda <@VarData
  1500 					sta :ztmp
  1501 					lda >@VarData
  1502 					ldy #@VarDataSize-1
  1503 					jmp @FreeMem
  1504 					els
  1505 16E4 60				rts						; ret
  1506 					eif
  1507 				.endl
  1508
  1509 16E5			.local	NEXTLEVEL					; PROCEDURE
  1510
  1511 				; optimize FAIL (0, tools.inc), line = 166
  1512
  1513 16E5 EE 74 2C			inc LEVEL
  1514 16E8 AD 74 2C			lda LEVEL
  1515 16EB C9 08			cmp #$08
  1516 16ED D0 05			jne l_054E
  1517 16EF A9 05			lda #$05
  1518 16F1 8D 74 2C			sta LEVEL
  1519 16F4			l_054E
  1520 16F4			@exit
  1521 					.ifdef @new
  1522 					lda <@VarData
  1523 					sta :ztmp
  1524 					lda >@VarData
  1525 					ldy #@VarDataSize-1
  1526 					jmp @FreeMem
  1527 					els
  1528 16F4 60				rts						; ret
  1529 					eif
  1530 				.endl
  1531
  1532 16F5			.local	STARTSCREEN					; PROCEDURE
  1533
  1534 				; optimize FAIL ('PRINTXY', tools.inc), line = 175
  1535
  1536 16F5 E8				inx
  1537 16F6 AD 85 17 95 18		mva INFO :STACKORIGIN,x
  1538 16FB AD 86 17 95 28		mva INFO+1 :STACKORIGIN+STACKWIDTH,x
  1539 1700 E8				inx
  1540 1701 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1541 1705 E8				inx
  1542 1706 A9 00 95 18			mva #$00 :STACKORIGIN,x
  1543 170A E8				inx
  1544 170B A9 F1 95 18			mva #$F1 :STACKORIGIN,x
  1545 170F 20 22 12			jsr PRINTXY
  1546
  1547 				; optimize OK (tools.inc), line = 176
  1548
  1549 1712 AD 79 2C			lda PLAYER1.COLOUR
  1550 1715 18 69 80			add #$80
  1551 1718 8D 9F 2D			sta PUTCHAR_00D8.C
  1552 171B AD 78 2C			lda PLAYER1.HEAD
  1553 171E 8D 9E 2D			sta PUTCHAR_00D8.V
  1554 1721 AD 77 2C			lda PLAYER1.Y
  1555 1724 8D 9D 2D			sta PUTCHAR_00D8.Y
  1556 1727 AD 76 2C			lda PLAYER1.X
  1557 172A 8D 9C 2D			sta PUTCHAR_00D8.X
  1558 172D 20 A1 12			jsr PUTCHAR_00D8
  1559
  1560 				; --- RepeatUntilProlog
  1561 1730			l_0571
  1562
  1563 				; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 178
  1564
  1565 1730 20 3C 16			jsr CHECKJOYSTATUS
  1566 1733 A5 5D			lda JOYSTATUS
  1567 1735 C9 40			cmp #$40
  1568 1737 D0 F7			jne l_0571
  1569
  1570 				; optimize OK (tools.inc), line = 180
  1571
  1572 1739 AD B0 2D			lda adr.INFO
  1573 173C 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1574 173E A9 A0			lda #$A0
  1575 1740 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1576 1742 A9 00			lda #$00
  1577 1744 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1578 1746 A9 02			lda #$02
  1579 1748 85 08			sta SYSTEM.FILLCHAR_006E.A
  1580 174A A9 0C			lda #$0C
  1581 174C 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1582 174E 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1583
  1584 				; optimize OK (tools.inc), line = 181
  1585
  1586 1751 AD B0 2D			lda adr.INFO
  1587 1754 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  1588 1756 A9 41			lda #$41
  1589 1758 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  1590 175A A9 00			lda #$00
  1591 175C 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  1592 175E A9 02			lda #$02
  1593 1760 85 08			sta SYSTEM.FILLCHAR_006E.A
  1594 1762 A9 08			lda #$08
  1595 1764 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  1596 1766 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  1597
  1598 				; optimize OK (tools.inc), line = 182
  1599
  1600 1769 AD 79 2C			lda PLAYER1.COLOUR
  1601 176C 8D 9F 2D			sta PUTCHAR_00D8.C
  1602 176F AD 78 2C			lda PLAYER1.HEAD
  1603 1772 8D 9E 2D			sta PUTCHAR_00D8.V
  1604 1775 AD 77 2C			lda PLAYER1.Y
  1605 1778 8D 9D 2D			sta PUTCHAR_00D8.Y
  1606 177B AD 76 2C			lda PLAYER1.X
  1607 177E 8D 9C 2D			sta PUTCHAR_00D8.X
  1608 1781 20 A1 12			jsr PUTCHAR_00D8
  1609
  1610 				; ------------------------------------------------------------
  1611
  1612 = 2DB0			adr.INFO	= [DATAORIGIN+$014C] .array [256]
  1613 1784			.var INFO	= adr.INFO .word
  1614
  1615 = 1785			@VarData	= INFO
  1616 = 0100			@VarDataSize	= 256
  1617
  1618 1784			@exit
  1619 					.ifdef @new
  1620 					lda <@VarData
  1621 					sta :ztmp
  1622 					lda >@VarData
  1623 					ldy #@VarDataSize-1
  1624 					jmp @FreeMem
  1625 					els
  1626 1784 60				rts						; ret
  1627 					eif
  1628 = 1785 B0 2D		INFO
  1628 				.endl
  1629
  1630 1787			.local	ENDSCREEN					; PROCEDURE
  1631
  1632 				; optimize OK (tools.inc), line = 192
  1633
  1634 1787 AD 7C 2C			lda PLAYER1.SCORE
  1635 178A C9 39			cmp #$39
  1636 178C D0 20			jne l_05A8
  1637 178E E8				inx
  1638 178F AD CC 17 95 18		mva WINNER :STACKORIGIN,x
  1639 1794 AD CD 17 95 28		mva WINNER+1 :STACKORIGIN+STACKWIDTH,x
  1640 1799 E8				inx
  1641 179A A9 02 95 18			mva #$02 :STACKORIGIN,x
  1642 179E E8				inx
  1643 179F A9 00 95 18			mva #$00 :STACKORIGIN,x
  1644 17A3 E8				inx
  1645 17A4 A9 F1 95 18			mva #$F1 :STACKORIGIN,x
  1646 17A8 20 22 12			jsr PRINTXY
  1647 17AB 4C CB 17			jmp l_05B8
  1648 17AE			l_05A8
  1649
  1650 				; optimize FAIL ('PRINTXY', tools.inc), line = 193
  1651
  1652 17AE E8				inx
  1653 17AF AD CE 17 95 18		mva LOSER :STACKORIGIN,x
  1654 17B4 AD CF 17 95 28		mva LOSER+1 :STACKORIGIN+STACKWIDTH,x
  1655 17B9 E8				inx
  1656 17BA A9 02 95 18			mva #$02 :STACKORIGIN,x
  1657 17BE E8				inx
  1658 17BF A9 00 95 18			mva #$00 :STACKORIGIN,x
  1659 17C3 E8				inx
  1660 17C4 A9 F1 95 18			mva #$F1 :STACKORIGIN,x
  1661 17C8 20 22 12			jsr PRINTXY
  1662 17CB			l_05B8
  1663
  1664 				; ------------------------------------------------------------
  1665
  1666 = 2EB0			adr.WINNER	= [DATAORIGIN+$024C] .array [256]
  1667 17CB			.var WINNER	= adr.WINNER .word
  1668 = 2FB0			adr.LOSER	= [DATAORIGIN+$034C] .array [256]
  1669 17CB			.var LOSER	= adr.LOSER .word
  1670
  1671 = 17CC			@VarData	= WINNER
  1672 = 0200			@VarDataSize	= 512
  1673
  1674 17CB			@exit
  1675 					.ifdef @new
  1676 					lda <@VarData
  1677 					sta :ztmp
  1678 					lda >@VarData
  1679 					ldy #@VarDataSize-1
  1680 					jmp @FreeMem
  1681 					els
  1682 17CB 60				rts						; ret
  1683 					eif
  1684 = 17CC B0 2E		WINNER
  1684 = 17CE B0 2F		LOSER
  1684 				.endl
  1685
  1686 17D0			.local	ISGAMEOVER					; FUNCTION
  1687
  1688 				; optimize OK (tools.inc), line = 200
  1689
  1690 17D0 AD 7C 2C			lda PLAYER1.SCORE
  1691 17D3 C9 39			cmp #$39
  1692 17D5 D0 05			jne l_05D4
  1693 17D7 A9 01			lda #$01
  1694 17D9 8D 75 2C			sta GAMEOVER
  1695 17DC			l_05D4
  1696
  1697 				; optimize OK (tools.inc), line = 201
  1698
  1699 17DC AD 84 2C			lda PLAYER2.SCORE
  1700 17DF C9 39			cmp #$39
  1701 17E1 D0 05			jne l_05ED
  1702 17E3 A9 01			lda #$01
  1703 17E5 8D 75 2C			sta GAMEOVER
  1704 17E8			l_05ED
  1705
  1706 				; optimize OK (tools.inc), line = 202
  1707
  1708 17E8 AD 8C 2C			lda PLAYER3.SCORE
  1709 17EB C9 39			cmp #$39
  1710 17ED D0 05			jne l_0606
  1711 17EF A9 01			lda #$01
  1712 17F1 8D 75 2C			sta GAMEOVER
  1713 17F4			l_0606
  1714
  1715 				; optimize OK (tools.inc), line = 203
  1716
  1717 17F4 AD 94 2C			lda PLAYER4.SCORE
  1718 17F7 C9 39			cmp #$39
  1719 17F9 D0 05			jne l_061F
  1720 17FB A9 01			lda #$01
  1721 17FD 8D 75 2C			sta GAMEOVER
  1722 1800			l_061F
  1723
  1724 				; optimize OK (tools.inc), line = 204
  1725
  1726 1800 AD 75 2C			lda GAMEOVER
  1727 1803 8D B0 30			sta RESULT
  1728 1806			@exit
  1729
  1730 				; ------------------------------------------------------------
  1731
  1732 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1733 				; as Pointer
  1734
  1735 1806 E8				inx
  1736 1807 AD B0 30 95 18		mva RESULT :STACKORIGIN,x
  1737
  1738 					.ifdef @new
  1739 					lda <@VarData
  1740 					sta :ztmp
  1741 					lda >@VarData
  1742 					ldy #@VarDataSize-1
  1743 					jmp @FreeMem
  1744 					eif
  1745
  1746 				; ------------------------------------------------------------
  1747
  1748 = 30B0			RESULT	= DATAORIGIN+$044C
  1749
  1750 = 30B0			@VarData	= RESULT
  1751 = 0001			@VarDataSize	= 1
  1752
  1753 180C 60				rts						; ret
  1754 				.endl
  1755
  1756 180D			.local	ISONELEFT					; FUNCTION
  1757
  1758 				; optimize OK (tools.inc), line = 211
  1759
  1760 180D A0 01			ldy #1
  1761 180F A5 5A			lda ALIVE
  1762 1811 F0 01			beq @+
  1763 1813 88				dey
  1764 1814			@
  1765 1814 84 21			sty :STACKORIGIN+9
  1766 1816 A0 01			ldy #1
  1767 1818 A5 5A			lda ALIVE
  1768 181A C9 FF			cmp #$FF
  1769 181C F0 01			beq @+
  1770 181E 88				dey
  1771 181F			@
  1772 181F 98				tya
  1773 1820 05 21			ora :STACKORIGIN+9
  1774 1822 8D B1 30			sta RESULT
  1775 1825			@exit
  1776
  1777 				; ------------------------------------------------------------
  1778
  1779 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1780 				; as Pointer
  1781
  1782 1825 E8				inx
  1783 1826 AD B1 30 95 18		mva RESULT :STACKORIGIN,x
  1784
  1785 					.ifdef @new
  1786 					lda <@VarData
  1787 					sta :ztmp
  1788 					lda >@VarData
  1789 					ldy #@VarDataSize-1
  1790 					jmp @FreeMem
  1791 					eif
  1792
  1793 				; ------------------------------------------------------------
  1794
  1795 = 30B1			RESULT	= DATAORIGIN+$044D
  1796
  1797 = 30B1			@VarData	= RESULT
  1798 = 0001			@VarDataSize	= 1
  1799
  1800 182B 60				rts						; ret
  1801 				.endl
  1802
  1803 182C			.local	HUMAN						; PROCEDURE
  1804
  1805 				; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5
  1806
  1807 182C 20 3C 16			jsr CHECKJOYSTATUS
  1808 182F AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1809 1839 A0 04			ldy #PLY.DIR-DATAORIGIN
  1810 183B B1 12			lda (:bp2),y
  1811 183D 85 5B			sta NEWDIR
  1812
  1813 				; optimize OK (ai.inc), line = 6
  1814
  1815 183F A5 5D			lda JOYSTATUS
  1816 1841 8D B2 30			sta @CASETMP_0005
  1817 1844 C9 01			cmp #$01
  1818 1846 D0 19			jne l_0664
  1819 1848			@
  1820
  1821 				; optimize OK (ai.inc), line = 7
  1822
  1823 1848 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1824 1852 A0 04			ldy #PLY.DIR-DATAORIGIN
  1825 1854 B1 12			lda (:bp2),y
  1826 1856 C9 02			cmp #$02
  1827 1858 F0 04			jeq l_0676
  1828 185A A9 01			lda #$01
  1829 185C 85 5B			sta NEWDIR
  1830 185E			l_0676
  1831
  1832 185E 4C B5 18			jmp a_0005
  1833 1861			l_0664
  1834 1861 C9 02			cmp #$02
  1835 1863 D0 19			jne l_0686
  1836 1865			@
  1837
  1838 				; optimize OK (ai.inc), line = 8
  1839
  1840 1865 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1841 186F A0 04			ldy #PLY.DIR-DATAORIGIN
  1842 1871 B1 12			lda (:bp2),y
  1843 1873 C9 01			cmp #$01
  1844 1875 F0 04			jeq l_0698
  1845 1877 A9 02			lda #$02
  1846 1879 85 5B			sta NEWDIR
  1847 187B			l_0698
  1848
  1849 187B 4C B5 18			jmp a_0005
  1850 187E			l_0686
  1851 187E C9 04			cmp #$04
  1852 1880 D0 19			jne l_06A8
  1853 1882			@
  1854
  1855 				; optimize OK (ai.inc), line = 9
  1856
  1857 1882 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1858 188C A0 04			ldy #PLY.DIR-DATAORIGIN
  1859 188E B1 12			lda (:bp2),y
  1860 1890 C9 08			cmp #$08
  1861 1892 F0 04			jeq l_06BA
  1862 1894 A9 04			lda #$04
  1863 1896 85 5B			sta NEWDIR
  1864 1898			l_06BA
  1865
  1866 1898 4C B5 18			jmp a_0005
  1867 189B			l_06A8
  1868 189B C9 08			cmp #$08
  1869 189D D0 16			jne l_06CA
  1870 189F			@
  1871
  1872 				; optimize OK (ai.inc), line = 10
  1873
  1874 189F AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1875 18A9 A0 04			ldy #PLY.DIR-DATAORIGIN
  1876 18AB B1 12			lda (:bp2),y
  1877 18AD C9 04			cmp #$04
  1878 18AF F0 04			jeq l_06DC
  1879 18B1 A9 08			lda #$08
  1880 18B3 85 5B			sta NEWDIR
  1881 18B5			l_06DC
  1882
  1883 18B5			l_06CA
  1884 18B5			a_0005
  1885
  1886 				; optimize OK (ai.inc), line = 13
  1887
  1888 18B5 A5 5B			lda NEWDIR
  1889 18B7 25 5C			and AVAILDIR
  1890 18B9 D0 12			jne l_0703
  1891
  1892 				; optimize OK (ai.inc), line = 14
  1893
  1894 18BB AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1895 18C5 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1896 18C7 A9 00			lda #$00
  1897 18C9 91 12			sta (:bp2),y
  1898 18CB C6 5A			dec ALIVE
  1899 18CD			l_0703
  1900
  1901 				; ------------------------------------------------------------
  1902
  1903 = 30B2			@CASETMP_0005	= DATAORIGIN+$044E
  1904
  1905 = 30B2			@VarData	= @CASETMP_0005
  1906 = 0001			@VarDataSize	= 1
  1907
  1908 18CD			@exit
  1909 					.ifdef @new
  1910 					lda <@VarData
  1911 					sta :ztmp
  1912 					lda >@VarData
  1913 					ldy #@VarDataSize-1
  1914 					jmp @FreeMem
  1915 					els
  1916 18CD 60				rts						; ret
  1917 					eif
  1918 				.endl
  1919
  1920 18CE			.local	AISTRAIGHT					; PROCEDURE
  1921
  1922 				; optimize OK (ai.inc), line = 22
  1923
  1924 18CE AC 53 2C 84 12 AC + 	mwy PLY :bp2
  1925 18D8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1926 18DA B1 12			lda (:bp2),y
  1927 18DC 25 5C			and AVAILDIR
  1928 18DE F0 07			jeq l_072A
  1929 18E0 B1 12			lda (:bp2),y
  1930 18E2 85 5B			sta NEWDIR
  1931 18E4 4C 4A 19			jmp l_073A
  1932 18E7			l_072A
  1933
  1934 				; optimize OK (ai.inc), line = 24
  1935
  1936 18E7 A5 5C			lda AVAILDIR
  1937 18E9 C9 03			cmp #$03
  1938 18EB D0 10			jne l_074C
  1939 18ED A9 02			lda #$02
  1940 18EF 20 D0 11			jsr SYSTEM.RANDOM_0087
  1941 18F2 B4 18			ldy :STACKORIGIN,x
  1942 18F4 B9 58 10			lda adr.DIRECTION,y
  1943 18F7 85 5B			sta NEWDIR
  1944 18F9 CA				dex
  1945 18FA 4C 15 19			jmp l_075E
  1946 18FD			l_074C
  1947
  1948 				; optimize OK (ai.inc), line = 26
  1949
  1950 18FD A5 5C			lda AVAILDIR
  1951 18FF 8D B3 30			sta @CASETMP_0006
  1952 1902 C9 01			cmp #$01
  1953 1904 D0 07			jne l_0769
  1954 1906			@
  1955
  1956 				; optimize OK (ai.inc), line = 27
  1957
  1958 1906 A9 01			lda #$01
  1959 1908 85 5B			sta NEWDIR
  1960
  1961 190A 4C 15 19			jmp a_0006
  1962 190D			l_0769
  1963 190D C9 02			cmp #$02
  1964 190F D0 04			jne l_0776
  1965 1911			@
  1966
  1967 				; optimize OK (ai.inc), line = 28
  1968
  1969 1911 A9 02			lda #$02
  1970 1913 85 5B			sta NEWDIR
  1971
  1972 1915			l_0776
  1973 1915			a_0006
  1974 1915			l_075E
  1975
  1976 				; optimize OK (ai.inc), line = 31
  1977
  1978 1915 A5 5C			lda AVAILDIR
  1979 1917 C9 0C			cmp #$0C
  1980 1919 D0 17			jne l_0792
  1981 191B A9 02			lda #$02
  1982 191D 20 D0 11			jsr SYSTEM.RANDOM_0087
  1983 1920 B5 18			lda :STACKORIGIN,x
  1984 1922 18 69 02			add #$02
  1985 1925 95 18			sta :STACKORIGIN,x
  1986 1927 B4 18			ldy :STACKORIGIN,x
  1987 1929 B9 58 10			lda adr.DIRECTION,y
  1988 192C 85 5B			sta NEWDIR
  1989 192E CA				dex
  1990 192F 4C 4A 19			jmp l_07A8
  1991 1932			l_0792
  1992
  1993 				; optimize OK (ai.inc), line = 33
  1994
  1995 1932 A5 5C			lda AVAILDIR
  1996 1934 8D B4 30			sta @CASETMP_0007
  1997 1937 C9 04			cmp #$04
  1998 1939 D0 07			jne l_07B3
  1999 193B			@
  2000
  2001 				; optimize OK (ai.inc), line = 34
  2002
  2003 193B A9 04			lda #$04
  2004 193D 85 5B			sta NEWDIR
  2005
  2006 193F 4C 4A 19			jmp a_0007
  2007 1942			l_07B3
  2008 1942 C9 08			cmp #$08
  2009 1944 D0 04			jne l_07C0
  2010 1946			@
  2011
  2012 				; optimize OK (ai.inc), line = 35
  2013
  2014 1946 A9 08			lda #$08
  2015 1948 85 5B			sta NEWDIR
  2016
  2017 194A			l_07C0
  2018 194A			a_0007
  2019 194A			l_07A8
  2020 194A			l_073A
  2021
  2022 				; ------------------------------------------------------------
  2023
  2024 = 30B3			@CASETMP_0006	= DATAORIGIN+$044F
  2025 = 30B4			@CASETMP_0007	= DATAORIGIN+$0450
  2026
  2027 = 30B3			@VarData	= @CASETMP_0006
  2028 = 0002			@VarDataSize	= 2
  2029
  2030 194A			@exit
  2031 					.ifdef @new
  2032 					lda <@VarData
  2033 					sta :ztmp
  2034 					lda >@VarData
  2035 					ldy #@VarDataSize-1
  2036 					jmp @FreeMem
  2037 					els
  2038 194A 60				rts						; ret
  2039 					eif
  2040 				.endl
  2041
  2042 194B			.local	AISAPPER					; PROCEDURE
  2043
  2044 				; optimize OK (ai.inc), line = 48
  2045
  2046 194B A9 00			lda #$00
  2047 194D 8D B5 30			sta L
  2048 1950 8D B6 30			sta R
  2049 1953 8D B7 30			sta U
  2050 1956 8D B8 30			sta D
  2051
  2052 				; optimize OK (ai.inc), line = 49
  2053
  2054 1959 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2055 1963 A0 01			ldy #PLY.Y-DATAORIGIN
  2056 1965 B1 12			lda (:bp2),y
  2057 1967 0A				asl @
  2058 1968 A8				tay
  2059 1969 A9 00			lda #$00
  2060 196B 18 79 26 10			add adr.MUL40,y
  2061 196F 85 21			sta :STACKORIGIN+9
  2062 1971 A9 0C			lda #$0C
  2063 1973 79 27 10			adc adr.MUL40+1,y
  2064 1976 85 31			sta :STACKORIGIN+STACKWIDTH+9
  2065 1978 A0 00			ldy #PLY.X-DATAORIGIN
  2066 197A A5 21			lda :STACKORIGIN+9
  2067 197C 18 71 12			add (:bp2),y
  2068 197F 85 5E			sta T0W
  2069 1981 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  2070 1983 69 00			adc #$00
  2071 1985 85 5F			sta T0W+1
  2072
  2073 				; optimize OK (ai.inc), line = 51
  2074
  2075 1987 A5 5C			lda AVAILDIR
  2076 1989 29 01			and #$01
  2077 198B F0 73			jeq l_0806
  2078
  2079 				; optimize OK (ai.inc), line = 52
  2080
  2081 198D A9 05			lda #$05
  2082 198F 85 59			sta I0B
  2083
  2084 1991			l_0810
  2085 				; --- ForToDoCondition
  2086 1991 A5 59			lda I0B
  2087 1993 C9 01			cmp #$01
  2088 1995 90 69			jcc l_081E
  2089
  2090 				; optimize OK (ai.inc), line = 53
  2091
  2092 1997 0A				asl @
  2093 1998 A8				tay
  2094 1999 A5 5E			lda T0W
  2095 199B 38 F9 26 10			sub adr.MUL40,y
  2096 199F 85 21			sta :STACKORIGIN+9
  2097 19A1 A5 5F			lda T0W+1
  2098 19A3 F9 27 10			sbc adr.MUL40+1,y
  2099 19A6 85 11			sta :bp+1
  2100 19A8 A4 21			ldy :STACKORIGIN+9
  2101 19AA B1 10			lda (:bp),y
  2102 19AC C9 20			cmp #$20
  2103 19AE D0 03			jne l_0838
  2104 19B0 EE B7 30			inc U
  2105 19B3			l_0838
  2106
  2107 				; optimize OK (ai.inc), line = 54
  2108
  2109 19B3 A5 59			lda I0B
  2110 19B5 0A				asl @
  2111 19B6 A8				tay
  2112 19B7 A5 5E			lda T0W
  2113 19B9 38 F9 26 10			sub adr.MUL40,y
  2114 19BD 85 21			sta :STACKORIGIN+9
  2115 19BF A5 5F			lda T0W+1
  2116 19C1 F9 27 10			sbc adr.MUL40+1,y
  2117 19C4 85 11			sta :bp+1
  2118 19C6 A5 21			lda :STACKORIGIN+9
  2119 19C8 18 69 01			add #$01
  2120 19CB A8				tay
  2121 19CC 90 02			scc
  2122 19CE E6 11			inc :bp+1
  2123 19D0 B1 10			lda (:bp),y
  2124 19D2 C9 20			cmp #$20
  2125 19D4 D0 03			jne l_085D
  2126 19D6 EE B7 30			inc U
  2127 19D9			l_085D
  2128
  2129 				; optimize OK (ai.inc), line = 55
  2130
  2131 19D9 A5 59			lda I0B
  2132 19DB 0A				asl @
  2133 19DC A8				tay
  2134 19DD A5 5E			lda T0W
  2135 19DF 38 F9 26 10			sub adr.MUL40,y
  2136 19E3 85 21			sta :STACKORIGIN+9
  2137 19E5 A5 5F			lda T0W+1
  2138 19E7 F9 27 10			sbc adr.MUL40+1,y
  2139 19EA 85 11			sta :bp+1
  2140 19EC A4 21			ldy :STACKORIGIN+9
  2141 19EE 88				dey
  2142 19EF B0 02			scs
  2143 19F1 C6 11			dec :bp+1
  2144 19F3 B1 10			lda (:bp),y
  2145 19F5 C9 20			cmp #$20
  2146 19F7 D0 03			jne l_0882
  2147 19F9 EE B7 30			inc U
  2148 19FC			l_0882
  2149
  2150 				; --- ForToDoEpilog
  2151 19FC C6 59			dec I0B
  2152 19FE 10 91			jpl l_0810
  2153 1A00			l_081E
  2154 1A00			l_0806
  2155
  2156 				; optimize OK (ai.inc), line = 59
  2157
  2158 1A00 A5 5C			lda AVAILDIR
  2159 1A02 29 02			and #$02
  2160 1A04 F0 73			jeq l_08A6
  2161
  2162 				; optimize OK (ai.inc), line = 60
  2163
  2164 1A06 A9 05			lda #$05
  2165 1A08 85 59			sta I0B
  2166
  2167 1A0A			l_08B0
  2168 				; --- ForToDoCondition
  2169 1A0A A5 59			lda I0B
  2170 1A0C C9 01			cmp #$01
  2171 1A0E 90 69			jcc l_08BE
  2172
  2173 				; optimize OK (ai.inc), line = 61
  2174
  2175 1A10 0A				asl @
  2176 1A11 A8				tay
  2177 1A12 A5 5E			lda T0W
  2178 1A14 18 79 26 10			add adr.MUL40,y
  2179 1A18 85 21			sta :STACKORIGIN+9
  2180 1A1A A5 5F			lda T0W+1
  2181 1A1C 79 27 10			adc adr.MUL40+1,y
  2182 1A1F 85 11			sta :bp+1
  2183 1A21 A4 21			ldy :STACKORIGIN+9
  2184 1A23 B1 10			lda (:bp),y
  2185 1A25 C9 20			cmp #$20
  2186 1A27 D0 03			jne l_08D8
  2187 1A29 EE B8 30			inc D
  2188 1A2C			l_08D8
  2189
  2190 				; optimize OK (ai.inc), line = 62
  2191
  2192 1A2C A5 59			lda I0B
  2193 1A2E 0A				asl @
  2194 1A2F A8				tay
  2195 1A30 A5 5E			lda T0W
  2196 1A32 18 79 26 10			add adr.MUL40,y
  2197 1A36 85 21			sta :STACKORIGIN+9
  2198 1A38 A5 5F			lda T0W+1
  2199 1A3A 79 27 10			adc adr.MUL40+1,y
  2200 1A3D 85 11			sta :bp+1
  2201 1A3F A5 21			lda :STACKORIGIN+9
  2202 1A41 18 69 01			add #$01
  2203 1A44 A8				tay
  2204 1A45 90 02			scc
  2205 1A47 E6 11			inc :bp+1
  2206 1A49 B1 10			lda (:bp),y
  2207 1A4B C9 20			cmp #$20
  2208 1A4D D0 03			jne l_08FD
  2209 1A4F EE B8 30			inc D
  2210 1A52			l_08FD
  2211
  2212 				; optimize OK (ai.inc), line = 63
  2213
  2214 1A52 A5 59			lda I0B
  2215 1A54 0A				asl @
  2216 1A55 A8				tay
  2217 1A56 A5 5E			lda T0W
  2218 1A58 18 79 26 10			add adr.MUL40,y
  2219 1A5C 85 21			sta :STACKORIGIN+9
  2220 1A5E A5 5F			lda T0W+1
  2221 1A60 79 27 10			adc adr.MUL40+1,y
  2222 1A63 85 11			sta :bp+1
  2223 1A65 A4 21			ldy :STACKORIGIN+9
  2224 1A67 88				dey
  2225 1A68 B0 02			scs
  2226 1A6A C6 11			dec :bp+1
  2227 1A6C B1 10			lda (:bp),y
  2228 1A6E C9 20			cmp #$20
  2229 1A70 D0 03			jne l_0922
  2230 1A72 EE B8 30			inc D
  2231 1A75			l_0922
  2232
  2233 				; --- ForToDoEpilog
  2234 1A75 C6 59			dec I0B
  2235 1A77 10 91			jpl l_08B0
  2236 1A79			l_08BE
  2237 1A79			l_08A6
  2238
  2239 				; optimize OK (ai.inc), line = 67
  2240
  2241 1A79 A5 5C			lda AVAILDIR
  2242 1A7B 29 04			and #$04
  2243 1A7D F0 5F			jeq l_0946
  2244
  2245 				; optimize OK (ai.inc), line = 68
  2246
  2247 1A7F A9 05			lda #$05
  2248 1A81 85 59			sta I0B
  2249
  2250 1A83			l_0950
  2251 				; --- ForToDoCondition
  2252 1A83 A5 59			lda I0B
  2253 1A85 C9 01			cmp #$01
  2254 1A87 90 55			jcc l_095E
  2255
  2256 				; optimize OK (ai.inc), line = 69
  2257
  2258 1A89 A5 5E			lda T0W
  2259 1A8B 38 E5 59			sub I0B
  2260 1A8E A8				tay
  2261 1A8F A5 5F			lda T0W+1
  2262 1A91 E9 00			sbc #$00
  2263 1A93 85 11			sta :bp+1
  2264 1A95 B1 10			lda (:bp),y
  2265 1A97 C9 20			cmp #$20
  2266 1A99 D0 03			jne l_0976
  2267 1A9B EE B5 30			inc L
  2268 1A9E			l_0976
  2269
  2270 				; optimize OK (ai.inc), line = 70
  2271
  2272 1A9E A5 5E			lda T0W
  2273 1AA0 38 E5 59			sub I0B
  2274 1AA3 A8				tay
  2275 1AA4 A5 5F			lda T0W+1
  2276 1AA6 E9 00			sbc #$00
  2277 1AA8 85 11			sta :bp+1
  2278 1AAA 98				tya
  2279 1AAB 18 69 28			add #$28
  2280 1AAE A8				tay
  2281 1AAF 90 02			scc
  2282 1AB1 E6 11			inc :bp+1
  2283 1AB3 B1 10			lda (:bp),y
  2284 1AB5 C9 20			cmp #$20
  2285 1AB7 D0 03			jne l_0999
  2286 1AB9 EE B5 30			inc L
  2287 1ABC			l_0999
  2288
  2289 				; optimize OK (ai.inc), line = 71
  2290
  2291 1ABC A5 5E			lda T0W
  2292 1ABE 38 E5 59			sub I0B
  2293 1AC1 A8				tay
  2294 1AC2 A5 5F			lda T0W+1
  2295 1AC4 E9 00			sbc #$00
  2296 1AC6 85 11			sta :bp+1
  2297 1AC8 98				tya
  2298 1AC9 38 E9 28			sub #$28
  2299 1ACC A8				tay
  2300 1ACD B0 02			scs
  2301 1ACF C6 11			dec :bp+1
  2302 1AD1 B1 10			lda (:bp),y
  2303 1AD3 C9 20			cmp #$20
  2304 1AD5 D0 03			jne l_09BC
  2305 1AD7 EE B5 30			inc L
  2306 1ADA			l_09BC
  2307
  2308 				; --- ForToDoEpilog
  2309 1ADA C6 59			dec I0B
  2310 1ADC 10 A5			jpl l_0950
  2311 1ADE			l_095E
  2312 1ADE			l_0946
  2313
  2314 				; optimize OK (ai.inc), line = 75
  2315
  2316 1ADE A5 5C			lda AVAILDIR
  2317 1AE0 29 08			and #$08
  2318 1AE2 F0 5D			jeq l_09E0
  2319
  2320 				; optimize OK (ai.inc), line = 76
  2321
  2322 1AE4 A9 05			lda #$05
  2323 1AE6 85 59			sta I0B
  2324
  2325 1AE8			l_09EA
  2326 				; --- ForToDoCondition
  2327 1AE8 A5 59			lda I0B
  2328 1AEA C9 01			cmp #$01
  2329 1AEC 90 53			jcc l_09F8
  2330
  2331 				; optimize OK (ai.inc), line = 77
  2332
  2333 1AEE A4 5E 84 12 A4 5F + 	mwy T0W :bp2
  2334 1AF6 A4 59			ldy I0B
  2335 1AF8 B1 12			lda (:bp2),y
  2336 1AFA C9 20			cmp #$20
  2337 1AFC D0 03			jne l_0A10
  2338 1AFE EE B6 30			inc R
  2339 1B01			l_0A10
  2340
  2341 				; optimize OK (ai.inc), line = 78
  2342
  2343 1B01 A5 5E			lda T0W
  2344 1B03 18 65 59			add I0B
  2345 1B06 A8				tay
  2346 1B07 A5 5F			lda T0W+1
  2347 1B09 69 00			adc #$00
  2348 1B0B 85 11			sta :bp+1
  2349 1B0D 98				tya
  2350 1B0E 18 69 28			add #$28
  2351 1B11 A8				tay
  2352 1B12 90 02			scc
  2353 1B14 E6 11			inc :bp+1
  2354 1B16 B1 10			lda (:bp),y
  2355 1B18 C9 20			cmp #$20
  2356 1B1A D0 03			jne l_0A33
  2357 1B1C EE B6 30			inc R
  2358 1B1F			l_0A33
  2359
  2360 				; optimize OK (ai.inc), line = 79
  2361
  2362 1B1F A5 5E			lda T0W
  2363 1B21 18 65 59			add I0B
  2364 1B24 A8				tay
  2365 1B25 A5 5F			lda T0W+1
  2366 1B27 69 00			adc #$00
  2367 1B29 85 11			sta :bp+1
  2368 1B2B 98				tya
  2369 1B2C 38 E9 28			sub #$28
  2370 1B2F A8				tay
  2371 1B30 B0 02			scs
  2372 1B32 C6 11			dec :bp+1
  2373 1B34 B1 10			lda (:bp),y
  2374 1B36 C9 20			cmp #$20
  2375 1B38 D0 03			jne l_0A56
  2376 1B3A EE B6 30			inc R
  2377 1B3D			l_0A56
  2378
  2379 				; --- ForToDoEpilog
  2380 1B3D C6 59			dec I0B
  2381 1B3F 10 A7			jpl l_09EA
  2382 1B41			l_09F8
  2383 1B41			l_09E0
  2384
  2385 				; optimize OK (ai.inc), line = 83
  2386
  2387 1B41 AD B8 30			lda D
  2388 1B44 85 58			sta T0B
  2389
  2390 				; optimize OK (ai.inc), line = 84
  2391
  2392 1B46 CD B7 30			cmp U
  2393 1B49 B0 05			jcs l_0A7E
  2394 1B4B AD B7 30			lda U
  2395 1B4E 85 58			sta T0B
  2396 1B50			l_0A7E
  2397
  2398 				; optimize OK (ai.inc), line = 85
  2399
  2400 1B50 A5 58			lda T0B
  2401 1B52 CD B5 30			cmp L
  2402 1B55 B0 05			jcs l_0A9B
  2403 1B57 AD B5 30			lda L
  2404 1B5A 85 58			sta T0B
  2405 1B5C			l_0A9B
  2406
  2407 				; optimize OK (ai.inc), line = 86
  2408
  2409 1B5C A5 58			lda T0B
  2410 1B5E CD B6 30			cmp R
  2411 1B61 B0 05			jcs l_0AB8
  2412 1B63 AD B6 30			lda R
  2413 1B66 85 58			sta T0B
  2414 1B68			l_0AB8
  2415
  2416 				; optimize OK (ai.inc), line = 88
  2417
  2418 1B68 A5 58			lda T0B
  2419 1B6A CD B8 30			cmp D
  2420 1B6D D0 04			jne l_0AD5
  2421 1B6F A9 02			lda #$02
  2422 1B71 85 58			sta T0B
  2423 1B73			l_0AD5
  2424
  2425 				; optimize OK (ai.inc), line = 89
  2426
  2427 1B73 A5 58			lda T0B
  2428 1B75 CD B7 30			cmp U
  2429 1B78 D0 04			jne l_0AF0
  2430 1B7A A9 01			lda #$01
  2431 1B7C 85 58			sta T0B
  2432 1B7E			l_0AF0
  2433
  2434 				; optimize OK (ai.inc), line = 90
  2435
  2436 1B7E A5 58			lda T0B
  2437 1B80 CD B5 30			cmp L
  2438 1B83 D0 04			jne l_0B0B
  2439 1B85 A9 04			lda #$04
  2440 1B87 85 58			sta T0B
  2441 1B89			l_0B0B
  2442
  2443 				; optimize OK (ai.inc), line = 91
  2444
  2445 1B89 A5 58			lda T0B
  2446 1B8B CD B6 30			cmp R
  2447 1B8E D0 04			jne l_0B26
  2448 1B90 A9 08			lda #$08
  2449 1B92 85 58			sta T0B
  2450 1B94			l_0B26
  2451
  2452 				; optimize OK (ai.inc), line = 93
  2453
  2454 1B94 A5 5C			lda AVAILDIR
  2455 1B96 25 58			and T0B
  2456 1B98 F0 07			jeq l_0B45
  2457 1B9A A5 58			lda T0B
  2458 1B9C 85 5B			sta NEWDIR
  2459 1B9E 4C A4 1B			jmp l_0B55
  2460 1BA1			l_0B45
  2461
  2462 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94
  2463
  2464 1BA1 20 CE 18			jsr AISTRAIGHT
  2465 1BA4			l_0B55
  2466
  2467 				; ------------------------------------------------------------
  2468
  2469 = 30B5			L	= DATAORIGIN+$0451
  2470 = 30B6			R	= DATAORIGIN+$0452
  2471 = 30B7			U	= DATAORIGIN+$0453
  2472 = 30B8			D	= DATAORIGIN+$0454
  2473 = 0001			@FORTMP_080D	= $01
  2474 = 0001			@FORTMP_08AD	= $01
  2475 = 0001			@FORTMP_094D	= $01
  2476 = 0001			@FORTMP_09E7	= $01
  2477
  2478 = 30B5			@VarData	= L
  2479 = 0004			@VarDataSize	= 4
  2480
  2481 1BA4			@exit
  2482 					.ifdef @new
  2483 					lda <@VarData
  2484 					sta :ztmp
  2485 					lda >@VarData
  2486 					ldy #@VarDataSize-1
  2487 					jmp @FreeMem
  2488 					els
  2489 1BA4 60				rts						; ret
  2490 					eif
  2491 				.endl
  2492
  2493 1BA5			.local	AIBULLY						; PROCEDURE
  2494
  2495 				; optimize OK (ai.inc), line = 101
  2496
  2497 1BA5 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2498 1BAF A0 04			ldy #PLY.DIR-DATAORIGIN
  2499 1BB1 B1 12			lda (:bp2),y
  2500 1BB3 85 58			sta T0B
  2501
  2502 				; optimize OK (ai.inc), line = 103
  2503
  2504 1BB5 AD 7D 2C			lda PLAYER1.ISALIVE
  2505 1BB8 0D 85 2C			ora PLAYER2.ISALIVE
  2506 1BBB D0 03 4C 62 1C		jeq l_0B72
  2507
  2508 				; optimize OK (ai.inc), line = 105
  2509
  2510 1BC0 AD 7D 2C			lda PLAYER1.ISALIVE
  2511 1BC3 F0 0F			jeq l_0B7F
  2512 1BC5 AD 59 2C			lda PLAYER1
  2513 1BC8 8D 55 2C			sta TMPPLY
  2514 1BCB AD 5A 2C			lda PLAYER1+1
  2515 1BCE 8D 56 2C			sta TMPPLY+1
  2516 1BD1 4C E0 1B			jmp l_0B8E
  2517 1BD4			l_0B7F
  2518 1BD4 AD 5B 2C			lda PLAYER2
  2519 1BD7 8D 55 2C			sta TMPPLY
  2520 1BDA AD 5C 2C			lda PLAYER2+1
  2521 1BDD 8D 56 2C			sta TMPPLY+1
  2522 1BE0			l_0B8E
  2523
  2524 				; optimize OK (ai.inc), line = 107
  2525
  2526 1BE0 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2527 1BEA A0 01			ldy #PLY.Y-DATAORIGIN
  2528 1BEC B1 12			lda (:bp2),y
  2529 1BEE 85 21			sta :STACKORIGIN+9
  2530 1BF0 AC 55 2C 84 12 AC + 	mwy TMPPLY :bp2
  2531 1BFA A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2532 1BFC B1 12			lda (:bp2),y
  2533 1BFE C5 21			cmp :STACKORIGIN+9
  2534 1C00 B0 07			jcs l_0BA7
  2535 1C02 A9 01			lda #$01
  2536 1C04 85 58			sta T0B
  2537 1C06 4C 0D 1C			jmp l_0BB5
  2538 1C09			l_0BA7
  2539 1C09 A9 02			lda #$02
  2540 1C0B 85 58			sta T0B
  2541 1C0D			l_0BB5
  2542
  2543 				; optimize OK (ai.inc), line = 108
  2544
  2545 1C0D AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2546 1C17 A0 01			ldy #PLY.Y-DATAORIGIN
  2547 1C19 B1 12			lda (:bp2),y
  2548 1C1B 85 21			sta :STACKORIGIN+9
  2549 1C1D AC 55 2C 84 12 AC + 	mwy TMPPLY :bp2
  2550 1C27 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2551 1C29 B1 12			lda (:bp2),y
  2552 1C2B C5 21			cmp :STACKORIGIN+9
  2553 1C2D F0 06			jeq l_0BDFx
  2554 1C2F A5 5C			lda AVAILDIR
  2555 1C31 25 58			and T0B
  2556 1C33 D0 2D			jne l_0BDF
  2557 1C35			l_0BDFx
  2558
  2559 				; optimize OK (ai.inc), line = 109
  2560
  2561 1C35 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2562 1C3F A0 00			ldy #PLY.X-DATAORIGIN
  2563 1C41 B1 12			lda (:bp2),y
  2564 1C43 85 21			sta :STACKORIGIN+9
  2565 1C45 AC 55 2C 84 12 AC + 	mwy TMPPLY :bp2
  2566 1C4F A0 00			ldy #TMPPLY.X-DATAORIGIN
  2567 1C51 B1 12			lda (:bp2),y
  2568 1C53 C5 21			cmp :STACKORIGIN+9
  2569 1C55 B0 07			jcs l_0BF4
  2570 1C57 A9 04			lda #$04
  2571 1C59 85 58			sta T0B
  2572 1C5B 4C 62 1C			jmp l_0C02
  2573 1C5E			l_0BF4
  2574 1C5E A9 08			lda #$08
  2575 1C60 85 58			sta T0B
  2576 1C62			l_0C02
  2577 1C62			l_0BDF
  2578 1C62			l_0B72
  2579
  2580 				; optimize OK (ai.inc), line = 113
  2581
  2582 1C62 A5 5C			lda AVAILDIR
  2583 1C64 25 58			and T0B
  2584 1C66 F0 07			jeq l_0C22
  2585 1C68 A5 58			lda T0B
  2586 1C6A 85 5B			sta NEWDIR
  2587 1C6C 4C 72 1C			jmp l_0C32
  2588 1C6F			l_0C22
  2589
  2590 				; optimize FAIL ('AISAPPER', ai.inc), line = 114
  2591
  2592 1C6F 20 4B 19			jsr AISAPPER
  2593 1C72			l_0C32
  2594 1C72			@exit
  2595 					.ifdef @new
  2596 					lda <@VarData
  2597 					sta :ztmp
  2598 					lda >@VarData
  2599 					ldy #@VarDataSize-1
  2600 					jmp @FreeMem
  2601 					els
  2602 1C72 60				rts						; ret
  2603 					eif
  2604 				.endl
  2605
  2606 1C73			.local	AIMIRROR					; PROCEDURE
  2607
  2608 				; optimize OK (ai.inc), line = 122
  2609
  2610 1C73 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  2611 1C7D A0 04			ldy #PLY.DIR-DATAORIGIN
  2612 1C7F B1 12			lda (:bp2),y
  2613 1C81 85 58			sta T0B
  2614
  2615 				; optimize OK (ai.inc), line = 124
  2616
  2617 1C83 AD 7D 2C			lda PLAYER1.ISALIVE
  2618 1C86 F0 2F			jeq l_0C49
  2619
  2620 				; optimize OK (ai.inc), line = 125
  2621
  2622 1C88 AD 7A 2C			lda PLAYER1.DIR
  2623 1C8B 8D B9 30			sta @CASETMP_0008
  2624 1C8E C9 01			cmp #$01
  2625 1C90 D0 07			jne l_0C55
  2626 1C92			@
  2627
  2628 				; optimize OK (ai.inc), line = 126
  2629
  2630 1C92 A9 02			lda #$02
  2631 1C94 85 58			sta T0B
  2632
  2633 1C96 4C B7 1C			jmp a_0008
  2634 1C99			l_0C55
  2635 1C99 C9 02			cmp #$02
  2636 1C9B D0 07			jne l_0C62
  2637 1C9D			@
  2638
  2639 				; optimize OK (ai.inc), line = 127
  2640
  2641 1C9D A9 01			lda #$01
  2642 1C9F 85 58			sta T0B
  2643
  2644 1CA1 4C B7 1C			jmp a_0008
  2645 1CA4			l_0C62
  2646 1CA4 C9 04			cmp #$04
  2647 1CA6 D0 07			jne l_0C6F
  2648 1CA8			@
  2649
  2650 				; optimize OK (ai.inc), line = 128
  2651
  2652 1CA8 A9 08			lda #$08
  2653 1CAA 85 58			sta T0B
  2654
  2655 1CAC 4C B7 1C			jmp a_0008
  2656 1CAF			l_0C6F
  2657 1CAF C9 08			cmp #$08
  2658 1CB1 D0 04			jne l_0C7C
  2659 1CB3			@
  2660
  2661 				; optimize OK (ai.inc), line = 129
  2662
  2663 1CB3 A9 04			lda #$04
  2664 1CB5 85 58			sta T0B
  2665
  2666 1CB7			l_0C7C
  2667 1CB7			a_0008
  2668 1CB7			l_0C49
  2669
  2670 				; optimize OK (ai.inc), line = 133
  2671
  2672 1CB7 A5 5C			lda AVAILDIR
  2673 1CB9 25 58			and T0B
  2674 1CBB F0 07			jeq l_0CA2
  2675 1CBD A5 58			lda T0B
  2676 1CBF 85 5B			sta NEWDIR
  2677 1CC1 4C C7 1C			jmp l_0CB2
  2678 1CC4			l_0CA2
  2679
  2680 				; optimize FAIL ('AISAPPER', ai.inc), line = 134
  2681
  2682 1CC4 20 4B 19			jsr AISAPPER
  2683 1CC7			l_0CB2
  2684
  2685 				; ------------------------------------------------------------
  2686
  2687 = 30B9			@CASETMP_0008	= DATAORIGIN+$0455
  2688
  2689 = 30B9			@VarData	= @CASETMP_0008
  2690 = 0001			@VarDataSize	= 1
  2691
  2692 1CC7			@exit
  2693 					.ifdef @new
  2694 					lda <@VarData
  2695 					sta :ztmp
  2696 					lda >@VarData
  2697 					ldy #@VarDataSize-1
  2698 					jmp @FreeMem
  2699 					els
  2700 1CC7 60				rts						; ret
  2701 					eif
  2702 				.endl
  2703
  2704 1CC8			.local	SETLEVEL00					; PROCEDURE
  2705
  2706 				; optimize OK (levels.inc), line = 5
  2707
  2708 1CC8 A9 01			lda #$01
  2709 1CCA 8D AE 2D			sta SETPLAYER.ISALIVE
  2710 1CCD A9 62			lda #$62
  2711 1CCF 8D AD 2D			sta SETPLAYER.COLOUR
  2712 1CD2 A9 00			lda #$00
  2713 1CD4 8D AC 2D			sta SETPLAYER.BRAIN
  2714 1CD7 A9 08			lda #$08
  2715 1CD9 8D AB 2D			sta SETPLAYER.DIR
  2716 1CDC A9 0C			lda #$0C
  2717 1CDE 8D AA 2D			sta SETPLAYER.Y
  2718 1CE1 A9 0A			lda #$0A
  2719 1CE3 8D A9 2D			sta SETPLAYER.X
  2720 1CE6 AD 59 2C			lda PLAYER1
  2721 1CE9 8D A7 2D			sta SETPLAYER.P
  2722 1CEC AD 5A 2C			lda PLAYER1+1
  2723 1CEF 8D A8 2D			sta SETPLAYER.P+1
  2724 1CF2 20 4E 16			jsr SETPLAYER
  2725
  2726 				; optimize OK (levels.inc), line = 6
  2727
  2728 1CF5 A9 01			lda #$01
  2729 1CF7 8D AE 2D			sta SETPLAYER.ISALIVE
  2730 1CFA A9 5D			lda #$5D
  2731 1CFC 8D AD 2D			sta SETPLAYER.COLOUR
  2732 1CFF A9 01			lda #$01
  2733 1D01 8D AC 2D			sta SETPLAYER.BRAIN
  2734 1D04 A9 04			lda #$04
  2735 1D06 8D AB 2D			sta SETPLAYER.DIR
  2736 1D09 A9 0C			lda #$0C
  2737 1D0B 8D AA 2D			sta SETPLAYER.Y
  2738 1D0E A9 1E			lda #$1E
  2739 1D10 8D A9 2D			sta SETPLAYER.X
  2740 1D13 AD 5B 2C			lda PLAYER2
  2741 1D16 8D A7 2D			sta SETPLAYER.P
  2742 1D19 AD 5C 2C			lda PLAYER2+1
  2743 1D1C 8D A8 2D			sta SETPLAYER.P+1
  2744 1D1F 20 4E 16			jsr SETPLAYER
  2745
  2746 				; optimize FAIL (1, levels.inc), line = 8
  2747
  2748 1D22 E8				inx
  2749 1D23 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2750 1D27 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2751 1D29 A9 06			lda #$06
  2752 1D2B 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2753 1D2E A9 0A			lda #$0A
  2754 1D30 8D A2 2D			sta CALCOBSTACLEADDR.X
  2755 1D33 20 30 14			jsr CALCOBSTACLEADDR
  2756 1D36 B4 17			ldy :STACKORIGIN-1,x
  2757 1D38 B5 18			lda :STACKORIGIN,x
  2758 1D3A 99 60 00			sta adr.OBSTACLES,y
  2759 1D3D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2760 1D3F 99 61 00			sta adr.OBSTACLES+1,y
  2761 1D42 CA				dex
  2762 1D43 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2763 1D47 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2764 1D4B A9 06			lda #$06
  2765 1D4D 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2766 1D50 A9 1E			lda #$1E
  2767 1D52 8D A2 2D			sta CALCOBSTACLEADDR.X
  2768 1D55 20 30 14			jsr CALCOBSTACLEADDR
  2769 1D58 B4 17			ldy :STACKORIGIN-1,x
  2770 1D5A B5 18			lda :STACKORIGIN,x
  2771 1D5C 99 60 00			sta adr.OBSTACLES,y
  2772 1D5F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2773 1D61 99 61 00			sta adr.OBSTACLES+1,y
  2774 1D64 CA				dex
  2775
  2776 				; optimize FAIL (1, levels.inc), line = 9
  2777
  2778 1D65 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2779 1D69 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2780 1D6D A9 12			lda #$12
  2781 1D6F 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2782 1D72 A9 0A			lda #$0A
  2783 1D74 8D A2 2D			sta CALCOBSTACLEADDR.X
  2784 1D77 20 30 14			jsr CALCOBSTACLEADDR
  2785 1D7A B4 17			ldy :STACKORIGIN-1,x
  2786 1D7C B5 18			lda :STACKORIGIN,x
  2787 1D7E 99 60 00			sta adr.OBSTACLES,y
  2788 1D81 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2789 1D83 99 61 00			sta adr.OBSTACLES+1,y
  2790 1D86 CA				dex
  2791 1D87 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2792 1D8B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2793 1D8F A9 12			lda #$12
  2794 1D91 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2795 1D94 A9 1E			lda #$1E
  2796 1D96 8D A2 2D			sta CALCOBSTACLEADDR.X
  2797 1D99 20 30 14			jsr CALCOBSTACLEADDR
  2798 1D9C B4 17			ldy :STACKORIGIN-1,x
  2799 1D9E B5 18			lda :STACKORIGIN,x
  2800 1DA0 99 60 00			sta adr.OBSTACLES,y
  2801 1DA3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2802 1DA5 99 61 00			sta adr.OBSTACLES+1,y
  2803 1DA8 CA				dex
  2804
  2805 				; optimize FAIL (1, levels.inc), line = 10
  2806
  2807 1DA9 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2808 1DAD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2809 1DB1 A9 02			lda #$02
  2810 1DB3 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2811 1DB6 A9 14			lda #$14
  2812 1DB8 8D A2 2D			sta CALCOBSTACLEADDR.X
  2813 1DBB 20 30 14			jsr CALCOBSTACLEADDR
  2814 1DBE B4 17			ldy :STACKORIGIN-1,x
  2815 1DC0 B5 18			lda :STACKORIGIN,x
  2816 1DC2 99 60 00			sta adr.OBSTACLES,y
  2817 1DC5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2818 1DC7 99 61 00			sta adr.OBSTACLES+1,y
  2819 1DCA CA				dex
  2820 1DCB A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2821 1DCF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2822 1DD3 A9 16			lda #$16
  2823 1DD5 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2824 1DD8 A9 14			lda #$14
  2825 1DDA 8D A2 2D			sta CALCOBSTACLEADDR.X
  2826 1DDD 20 30 14			jsr CALCOBSTACLEADDR
  2827 1DE0 B4 17			ldy :STACKORIGIN-1,x
  2828 1DE2 B5 18			lda :STACKORIGIN,x
  2829 1DE4 99 60 00			sta adr.OBSTACLES,y
  2830 1DE7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2831 1DE9 99 61 00			sta adr.OBSTACLES+1,y
  2832 1DEC CA				dex
  2833 1DED CA				dex
  2834 1DEE			@exit
  2835 					.ifdef @new
  2836 					lda <@VarData
  2837 					sta :ztmp
  2838 					lda >@VarData
  2839 					ldy #@VarDataSize-1
  2840 					jmp @FreeMem
  2841 					els
  2842 1DEE 60				rts						; ret
  2843 					eif
  2844 				.endl
  2845
  2846 1DEF			.local	SETLEVEL01					; PROCEDURE
  2847
  2848 				; optimize OK (levels.inc), line = 17
  2849
  2850 1DEF A9 01			lda #$01
  2851 1DF1 8D AE 2D			sta SETPLAYER.ISALIVE
  2852 1DF4 A9 62			lda #$62
  2853 1DF6 8D AD 2D			sta SETPLAYER.COLOUR
  2854 1DF9 A9 00			lda #$00
  2855 1DFB 8D AC 2D			sta SETPLAYER.BRAIN
  2856 1DFE A9 08			lda #$08
  2857 1E00 8D AB 2D			sta SETPLAYER.DIR
  2858 1E03 A9 0C			lda #$0C
  2859 1E05 8D AA 2D			sta SETPLAYER.Y
  2860 1E08 A9 0A			lda #$0A
  2861 1E0A 8D A9 2D			sta SETPLAYER.X
  2862 1E0D AD 59 2C			lda PLAYER1
  2863 1E10 8D A7 2D			sta SETPLAYER.P
  2864 1E13 AD 5A 2C			lda PLAYER1+1
  2865 1E16 8D A8 2D			sta SETPLAYER.P+1
  2866 1E19 20 4E 16			jsr SETPLAYER
  2867
  2868 				; optimize OK (levels.inc), line = 18
  2869
  2870 1E1C A9 01			lda #$01
  2871 1E1E 8D AE 2D			sta SETPLAYER.ISALIVE
  2872 1E21 A9 5D			lda #$5D
  2873 1E23 8D AD 2D			sta SETPLAYER.COLOUR
  2874 1E26 A9 01			lda #$01
  2875 1E28 8D AC 2D			sta SETPLAYER.BRAIN
  2876 1E2B A9 04			lda #$04
  2877 1E2D 8D AB 2D			sta SETPLAYER.DIR
  2878 1E30 A9 0C			lda #$0C
  2879 1E32 8D AA 2D			sta SETPLAYER.Y
  2880 1E35 A9 1E			lda #$1E
  2881 1E37 8D A9 2D			sta SETPLAYER.X
  2882 1E3A AD 5B 2C			lda PLAYER2
  2883 1E3D 8D A7 2D			sta SETPLAYER.P
  2884 1E40 AD 5C 2C			lda PLAYER2+1
  2885 1E43 8D A8 2D			sta SETPLAYER.P+1
  2886 1E46 20 4E 16			jsr SETPLAYER
  2887
  2888 				; optimize FAIL (1, levels.inc), line = 20
  2889
  2890 1E49 E8				inx
  2891 1E4A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2892 1E4E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2893 1E50 A9 06			lda #$06
  2894 1E52 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2895 1E55 A9 0A			lda #$0A
  2896 1E57 8D A2 2D			sta CALCOBSTACLEADDR.X
  2897 1E5A 20 30 14			jsr CALCOBSTACLEADDR
  2898 1E5D B4 17			ldy :STACKORIGIN-1,x
  2899 1E5F B5 18			lda :STACKORIGIN,x
  2900 1E61 99 60 00			sta adr.OBSTACLES,y
  2901 1E64 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2902 1E66 99 61 00			sta adr.OBSTACLES+1,y
  2903 1E69 CA				dex
  2904 1E6A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2905 1E6E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2906 1E72 A9 06			lda #$06
  2907 1E74 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2908 1E77 A9 1E			lda #$1E
  2909 1E79 8D A2 2D			sta CALCOBSTACLEADDR.X
  2910 1E7C 20 30 14			jsr CALCOBSTACLEADDR
  2911 1E7F B4 17			ldy :STACKORIGIN-1,x
  2912 1E81 B5 18			lda :STACKORIGIN,x
  2913 1E83 99 60 00			sta adr.OBSTACLES,y
  2914 1E86 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2915 1E88 99 61 00			sta adr.OBSTACLES+1,y
  2916 1E8B CA				dex
  2917
  2918 				; optimize FAIL (1, levels.inc), line = 21
  2919
  2920 1E8C A9 04 95 18			mva #$04 :STACKORIGIN,x
  2921 1E90 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2922 1E94 A9 12			lda #$12
  2923 1E96 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2924 1E99 A9 0A			lda #$0A
  2925 1E9B 8D A2 2D			sta CALCOBSTACLEADDR.X
  2926 1E9E 20 30 14			jsr CALCOBSTACLEADDR
  2927 1EA1 B4 17			ldy :STACKORIGIN-1,x
  2928 1EA3 B5 18			lda :STACKORIGIN,x
  2929 1EA5 99 60 00			sta adr.OBSTACLES,y
  2930 1EA8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2931 1EAA 99 61 00			sta adr.OBSTACLES+1,y
  2932 1EAD CA				dex
  2933 1EAE A9 06 95 18			mva #$06 :STACKORIGIN,x
  2934 1EB2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2935 1EB6 A9 12			lda #$12
  2936 1EB8 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2937 1EBB A9 1E			lda #$1E
  2938 1EBD 8D A2 2D			sta CALCOBSTACLEADDR.X
  2939 1EC0 20 30 14			jsr CALCOBSTACLEADDR
  2940 1EC3 B4 17			ldy :STACKORIGIN-1,x
  2941 1EC5 B5 18			lda :STACKORIGIN,x
  2942 1EC7 99 60 00			sta adr.OBSTACLES,y
  2943 1ECA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2944 1ECC 99 61 00			sta adr.OBSTACLES+1,y
  2945 1ECF CA				dex
  2946
  2947 				; optimize FAIL (1, levels.inc), line = 22
  2948
  2949 1ED0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2950 1ED4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2951 1ED8 A9 02			lda #$02
  2952 1EDA 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2953 1EDD A9 14			lda #$14
  2954 1EDF 8D A2 2D			sta CALCOBSTACLEADDR.X
  2955 1EE2 20 30 14			jsr CALCOBSTACLEADDR
  2956 1EE5 B4 17			ldy :STACKORIGIN-1,x
  2957 1EE7 B5 18			lda :STACKORIGIN,x
  2958 1EE9 99 60 00			sta adr.OBSTACLES,y
  2959 1EEC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2960 1EEE 99 61 00			sta adr.OBSTACLES+1,y
  2961 1EF1 CA				dex
  2962 1EF2 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2963 1EF6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2964 1EFA A9 16			lda #$16
  2965 1EFC 8D A3 2D			sta CALCOBSTACLEADDR.Y
  2966 1EFF A9 14			lda #$14
  2967 1F01 8D A2 2D			sta CALCOBSTACLEADDR.X
  2968 1F04 20 30 14			jsr CALCOBSTACLEADDR
  2969 1F07 B4 17			ldy :STACKORIGIN-1,x
  2970 1F09 B5 18			lda :STACKORIGIN,x
  2971 1F0B 99 60 00			sta adr.OBSTACLES,y
  2972 1F0E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2973 1F10 99 61 00			sta adr.OBSTACLES+1,y
  2974 1F13 CA				dex
  2975 1F14 CA				dex
  2976 1F15			@exit
  2977 					.ifdef @new
  2978 					lda <@VarData
  2979 					sta :ztmp
  2980 					lda >@VarData
  2981 					ldy #@VarDataSize-1
  2982 					jmp @FreeMem
  2983 					els
  2984 1F15 60				rts						; ret
  2985 					eif
  2986 				.endl
  2987
  2988 1F16			.local	SETLEVEL02					; PROCEDURE
  2989
  2990 				; optimize OK (levels.inc), line = 29
  2991
  2992 1F16 A9 01			lda #$01
  2993 1F18 8D AE 2D			sta SETPLAYER.ISALIVE
  2994 1F1B A9 62			lda #$62
  2995 1F1D 8D AD 2D			sta SETPLAYER.COLOUR
  2996 1F20 A9 00			lda #$00
  2997 1F22 8D AC 2D			sta SETPLAYER.BRAIN
  2998 1F25 A9 08			lda #$08
  2999 1F27 8D AB 2D			sta SETPLAYER.DIR
  3000 1F2A A9 0C			lda #$0C
  3001 1F2C 8D AA 2D			sta SETPLAYER.Y
  3002 1F2F A9 0A			lda #$0A
  3003 1F31 8D A9 2D			sta SETPLAYER.X
  3004 1F34 AD 59 2C			lda PLAYER1
  3005 1F37 8D A7 2D			sta SETPLAYER.P
  3006 1F3A AD 5A 2C			lda PLAYER1+1
  3007 1F3D 8D A8 2D			sta SETPLAYER.P+1
  3008 1F40 20 4E 16			jsr SETPLAYER
  3009
  3010 				; optimize OK (levels.inc), line = 30
  3011
  3012 1F43 A9 01			lda #$01
  3013 1F45 8D AE 2D			sta SETPLAYER.ISALIVE
  3014 1F48 A9 5D			lda #$5D
  3015 1F4A 8D AD 2D			sta SETPLAYER.COLOUR
  3016 1F4D A9 03			lda #$03
  3017 1F4F 8D AC 2D			sta SETPLAYER.BRAIN
  3018 1F52 A9 04			lda #$04
  3019 1F54 8D AB 2D			sta SETPLAYER.DIR
  3020 1F57 A9 0C			lda #$0C
  3021 1F59 8D AA 2D			sta SETPLAYER.Y
  3022 1F5C A9 1E			lda #$1E
  3023 1F5E 8D A9 2D			sta SETPLAYER.X
  3024 1F61 AD 5B 2C			lda PLAYER2
  3025 1F64 8D A7 2D			sta SETPLAYER.P
  3026 1F67 AD 5C 2C			lda PLAYER2+1
  3027 1F6A 8D A8 2D			sta SETPLAYER.P+1
  3028 1F6D 20 4E 16			jsr SETPLAYER
  3029
  3030 				; optimize FAIL (1, levels.inc), line = 32
  3031
  3032 1F70 E8				inx
  3033 1F71 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3034 1F75 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3035 1F77 A9 06			lda #$06
  3036 1F79 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3037 1F7C A9 0A			lda #$0A
  3038 1F7E 8D A2 2D			sta CALCOBSTACLEADDR.X
  3039 1F81 20 30 14			jsr CALCOBSTACLEADDR
  3040 1F84 B4 17			ldy :STACKORIGIN-1,x
  3041 1F86 B5 18			lda :STACKORIGIN,x
  3042 1F88 99 60 00			sta adr.OBSTACLES,y
  3043 1F8B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3044 1F8D 99 61 00			sta adr.OBSTACLES+1,y
  3045 1F90 CA				dex
  3046 1F91 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3047 1F95 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3048 1F99 A9 06			lda #$06
  3049 1F9B 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3050 1F9E A9 1E			lda #$1E
  3051 1FA0 8D A2 2D			sta CALCOBSTACLEADDR.X
  3052 1FA3 20 30 14			jsr CALCOBSTACLEADDR
  3053 1FA6 B4 17			ldy :STACKORIGIN-1,x
  3054 1FA8 B5 18			lda :STACKORIGIN,x
  3055 1FAA 99 60 00			sta adr.OBSTACLES,y
  3056 1FAD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3057 1FAF 99 61 00			sta adr.OBSTACLES+1,y
  3058 1FB2 CA				dex
  3059
  3060 				; optimize FAIL (1, levels.inc), line = 33
  3061
  3062 1FB3 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3063 1FB7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3064 1FBB A9 12			lda #$12
  3065 1FBD 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3066 1FC0 A9 0A			lda #$0A
  3067 1FC2 8D A2 2D			sta CALCOBSTACLEADDR.X
  3068 1FC5 20 30 14			jsr CALCOBSTACLEADDR
  3069 1FC8 B4 17			ldy :STACKORIGIN-1,x
  3070 1FCA B5 18			lda :STACKORIGIN,x
  3071 1FCC 99 60 00			sta adr.OBSTACLES,y
  3072 1FCF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3073 1FD1 99 61 00			sta adr.OBSTACLES+1,y
  3074 1FD4 CA				dex
  3075 1FD5 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3076 1FD9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3077 1FDD A9 12			lda #$12
  3078 1FDF 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3079 1FE2 A9 1E			lda #$1E
  3080 1FE4 8D A2 2D			sta CALCOBSTACLEADDR.X
  3081 1FE7 20 30 14			jsr CALCOBSTACLEADDR
  3082 1FEA B4 17			ldy :STACKORIGIN-1,x
  3083 1FEC B5 18			lda :STACKORIGIN,x
  3084 1FEE 99 60 00			sta adr.OBSTACLES,y
  3085 1FF1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3086 1FF3 99 61 00			sta adr.OBSTACLES+1,y
  3087 1FF6 CA				dex
  3088
  3089 				; optimize FAIL (1, levels.inc), line = 34
  3090
  3091 1FF7 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3092 1FFB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3093 1FFF A9 02			lda #$02
  3094 2001 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3095 2004 A9 14			lda #$14
  3096 2006 8D A2 2D			sta CALCOBSTACLEADDR.X
  3097 2009 20 30 14			jsr CALCOBSTACLEADDR
  3098 200C B4 17			ldy :STACKORIGIN-1,x
  3099 200E B5 18			lda :STACKORIGIN,x
  3100 2010 99 60 00			sta adr.OBSTACLES,y
  3101 2013 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3102 2015 99 61 00			sta adr.OBSTACLES+1,y
  3103 2018 CA				dex
  3104 2019 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3105 201D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3106 2021 A9 16			lda #$16
  3107 2023 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3108 2026 A9 14			lda #$14
  3109 2028 8D A2 2D			sta CALCOBSTACLEADDR.X
  3110 202B 20 30 14			jsr CALCOBSTACLEADDR
  3111 202E B4 17			ldy :STACKORIGIN-1,x
  3112 2030 B5 18			lda :STACKORIGIN,x
  3113 2032 99 60 00			sta adr.OBSTACLES,y
  3114 2035 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3115 2037 99 61 00			sta adr.OBSTACLES+1,y
  3116 203A CA				dex
  3117 203B CA				dex
  3118 203C			@exit
  3119 					.ifdef @new
  3120 					lda <@VarData
  3121 					sta :ztmp
  3122 					lda >@VarData
  3123 					ldy #@VarDataSize-1
  3124 					jmp @FreeMem
  3125 					els
  3126 203C 60				rts						; ret
  3127 					eif
  3128 				.endl
  3129
  3130 203D			.local	SETLEVEL03					; PROCEDURE
  3131
  3132 				; optimize OK (levels.inc), line = 41
  3133
  3134 203D A9 01			lda #$01
  3135 203F 8D AE 2D			sta SETPLAYER.ISALIVE
  3136 2042 A9 62			lda #$62
  3137 2044 8D AD 2D			sta SETPLAYER.COLOUR
  3138 2047 A9 00			lda #$00
  3139 2049 8D AC 2D			sta SETPLAYER.BRAIN
  3140 204C A9 08			lda #$08
  3141 204E 8D AB 2D			sta SETPLAYER.DIR
  3142 2051 A9 0C			lda #$0C
  3143 2053 8D AA 2D			sta SETPLAYER.Y
  3144 2056 A9 0A			lda #$0A
  3145 2058 8D A9 2D			sta SETPLAYER.X
  3146 205B AD 59 2C			lda PLAYER1
  3147 205E 8D A7 2D			sta SETPLAYER.P
  3148 2061 AD 5A 2C			lda PLAYER1+1
  3149 2064 8D A8 2D			sta SETPLAYER.P+1
  3150 2067 20 4E 16			jsr SETPLAYER
  3151
  3152 				; optimize OK (levels.inc), line = 42
  3153
  3154 206A A9 01			lda #$01
  3155 206C 8D AE 2D			sta SETPLAYER.ISALIVE
  3156 206F A9 5D			lda #$5D
  3157 2071 8D AD 2D			sta SETPLAYER.COLOUR
  3158 2074 A9 02			lda #$02
  3159 2076 8D AC 2D			sta SETPLAYER.BRAIN
  3160 2079 A9 04			lda #$04
  3161 207B 8D AB 2D			sta SETPLAYER.DIR
  3162 207E A9 0C			lda #$0C
  3163 2080 8D AA 2D			sta SETPLAYER.Y
  3164 2083 A9 1E			lda #$1E
  3165 2085 8D A9 2D			sta SETPLAYER.X
  3166 2088 AD 5B 2C			lda PLAYER2
  3167 208B 8D A7 2D			sta SETPLAYER.P
  3168 208E AD 5C 2C			lda PLAYER2+1
  3169 2091 8D A8 2D			sta SETPLAYER.P+1
  3170 2094 20 4E 16			jsr SETPLAYER
  3171
  3172 				; optimize FAIL (1, levels.inc), line = 44
  3173
  3174 2097 E8				inx
  3175 2098 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3176 209C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3177 209E A9 06			lda #$06
  3178 20A0 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3179 20A3 A9 0A			lda #$0A
  3180 20A5 8D A2 2D			sta CALCOBSTACLEADDR.X
  3181 20A8 20 30 14			jsr CALCOBSTACLEADDR
  3182 20AB B4 17			ldy :STACKORIGIN-1,x
  3183 20AD B5 18			lda :STACKORIGIN,x
  3184 20AF 99 60 00			sta adr.OBSTACLES,y
  3185 20B2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3186 20B4 99 61 00			sta adr.OBSTACLES+1,y
  3187 20B7 CA				dex
  3188 20B8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3189 20BC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3190 20C0 A9 06			lda #$06
  3191 20C2 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3192 20C5 A9 1E			lda #$1E
  3193 20C7 8D A2 2D			sta CALCOBSTACLEADDR.X
  3194 20CA 20 30 14			jsr CALCOBSTACLEADDR
  3195 20CD B4 17			ldy :STACKORIGIN-1,x
  3196 20CF B5 18			lda :STACKORIGIN,x
  3197 20D1 99 60 00			sta adr.OBSTACLES,y
  3198 20D4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3199 20D6 99 61 00			sta adr.OBSTACLES+1,y
  3200 20D9 CA				dex
  3201
  3202 				; optimize FAIL (1, levels.inc), line = 45
  3203
  3204 20DA A9 04 95 18			mva #$04 :STACKORIGIN,x
  3205 20DE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3206 20E2 A9 12			lda #$12
  3207 20E4 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3208 20E7 A9 0A			lda #$0A
  3209 20E9 8D A2 2D			sta CALCOBSTACLEADDR.X
  3210 20EC 20 30 14			jsr CALCOBSTACLEADDR
  3211 20EF B4 17			ldy :STACKORIGIN-1,x
  3212 20F1 B5 18			lda :STACKORIGIN,x
  3213 20F3 99 60 00			sta adr.OBSTACLES,y
  3214 20F6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3215 20F8 99 61 00			sta adr.OBSTACLES+1,y
  3216 20FB CA				dex
  3217 20FC A9 06 95 18			mva #$06 :STACKORIGIN,x
  3218 2100 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3219 2104 A9 12			lda #$12
  3220 2106 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3221 2109 A9 1E			lda #$1E
  3222 210B 8D A2 2D			sta CALCOBSTACLEADDR.X
  3223 210E 20 30 14			jsr CALCOBSTACLEADDR
  3224 2111 B4 17			ldy :STACKORIGIN-1,x
  3225 2113 B5 18			lda :STACKORIGIN,x
  3226 2115 99 60 00			sta adr.OBSTACLES,y
  3227 2118 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3228 211A 99 61 00			sta adr.OBSTACLES+1,y
  3229 211D CA				dex
  3230
  3231 				; optimize FAIL (1, levels.inc), line = 46
  3232
  3233 211E A9 08 95 18			mva #$08 :STACKORIGIN,x
  3234 2122 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3235 2126 A9 0C			lda #$0C
  3236 2128 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3237 212B A9 01			lda #$01
  3238 212D 8D A2 2D			sta CALCOBSTACLEADDR.X
  3239 2130 20 30 14			jsr CALCOBSTACLEADDR
  3240 2133 B4 17			ldy :STACKORIGIN-1,x
  3241 2135 B5 18			lda :STACKORIGIN,x
  3242 2137 99 60 00			sta adr.OBSTACLES,y
  3243 213A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3244 213C 99 61 00			sta adr.OBSTACLES+1,y
  3245 213F CA				dex
  3246 2140 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3247 2144 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3248 2148 A9 02			lda #$02
  3249 214A 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3250 214D A9 14			lda #$14
  3251 214F 8D A2 2D			sta CALCOBSTACLEADDR.X
  3252 2152 20 30 14			jsr CALCOBSTACLEADDR
  3253 2155 B4 17			ldy :STACKORIGIN-1,x
  3254 2157 B5 18			lda :STACKORIGIN,x
  3255 2159 99 60 00			sta adr.OBSTACLES,y
  3256 215C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3257 215E 99 61 00			sta adr.OBSTACLES+1,y
  3258 2161 CA				dex
  3259
  3260 				; optimize FAIL (1, levels.inc), line = 47
  3261
  3262 2162 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3263 2166 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3264 216A A9 16			lda #$16
  3265 216C 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3266 216F A9 14			lda #$14
  3267 2171 8D A2 2D			sta CALCOBSTACLEADDR.X
  3268 2174 20 30 14			jsr CALCOBSTACLEADDR
  3269 2177 B4 17			ldy :STACKORIGIN-1,x
  3270 2179 B5 18			lda :STACKORIGIN,x
  3271 217B 99 60 00			sta adr.OBSTACLES,y
  3272 217E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3273 2180 99 61 00			sta adr.OBSTACLES+1,y
  3274 2183 CA				dex
  3275 2184 CA				dex
  3276 2185			@exit
  3277 					.ifdef @new
  3278 					lda <@VarData
  3279 					sta :ztmp
  3280 					lda >@VarData
  3281 					ldy #@VarDataSize-1
  3282 					jmp @FreeMem
  3283 					els
  3284 2185 60				rts						; ret
  3285 					eif
  3286 				.endl
  3287
  3288 2186			.local	SETLEVEL04					; PROCEDURE
  3289
  3290 				; optimize OK (levels.inc), line = 54
  3291
  3292 2186 A9 01			lda #$01
  3293 2188 8D AE 2D			sta SETPLAYER.ISALIVE
  3294 218B A9 62			lda #$62
  3295 218D 8D AD 2D			sta SETPLAYER.COLOUR
  3296 2190 A9 00			lda #$00
  3297 2192 8D AC 2D			sta SETPLAYER.BRAIN
  3298 2195 A9 04			lda #$04
  3299 2197 8D AB 2D			sta SETPLAYER.DIR
  3300 219A A9 0C			lda #$0C
  3301 219C 8D AA 2D			sta SETPLAYER.Y
  3302 219F A9 12			lda #$12
  3303 21A1 8D A9 2D			sta SETPLAYER.X
  3304 21A4 AD 59 2C			lda PLAYER1
  3305 21A7 8D A7 2D			sta SETPLAYER.P
  3306 21AA AD 5A 2C			lda PLAYER1+1
  3307 21AD 8D A8 2D			sta SETPLAYER.P+1
  3308 21B0 20 4E 16			jsr SETPLAYER
  3309
  3310 				; optimize OK (levels.inc), line = 55
  3311
  3312 21B3 A9 01			lda #$01
  3313 21B5 8D AE 2D			sta SETPLAYER.ISALIVE
  3314 21B8 A9 5D			lda #$5D
  3315 21BA 8D AD 2D			sta SETPLAYER.COLOUR
  3316 21BD A9 04			lda #$04
  3317 21BF 8D AC 2D			sta SETPLAYER.BRAIN
  3318 21C2 A9 08			lda #$08
  3319 21C4 8D AB 2D			sta SETPLAYER.DIR
  3320 21C7 A9 0C			lda #$0C
  3321 21C9 8D AA 2D			sta SETPLAYER.Y
  3322 21CC A9 16			lda #$16
  3323 21CE 8D A9 2D			sta SETPLAYER.X
  3324 21D1 AD 5B 2C			lda PLAYER2
  3325 21D4 8D A7 2D			sta SETPLAYER.P
  3326 21D7 AD 5C 2C			lda PLAYER2+1
  3327 21DA 8D A8 2D			sta SETPLAYER.P+1
  3328 21DD 20 4E 16			jsr SETPLAYER
  3329
  3330 				; optimize FAIL (1, levels.inc), line = 57
  3331
  3332 21E0 E8				inx
  3333 21E1 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3334 21E5 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3335 21E7 A9 06			lda #$06
  3336 21E9 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3337 21EC A9 0A			lda #$0A
  3338 21EE 8D A2 2D			sta CALCOBSTACLEADDR.X
  3339 21F1 20 30 14			jsr CALCOBSTACLEADDR
  3340 21F4 B4 17			ldy :STACKORIGIN-1,x
  3341 21F6 B5 18			lda :STACKORIGIN,x
  3342 21F8 99 60 00			sta adr.OBSTACLES,y
  3343 21FB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3344 21FD 99 61 00			sta adr.OBSTACLES+1,y
  3345 2200 CA				dex
  3346 2201 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3347 2205 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3348 2209 A9 06			lda #$06
  3349 220B 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3350 220E A9 1E			lda #$1E
  3351 2210 8D A2 2D			sta CALCOBSTACLEADDR.X
  3352 2213 20 30 14			jsr CALCOBSTACLEADDR
  3353 2216 B4 17			ldy :STACKORIGIN-1,x
  3354 2218 B5 18			lda :STACKORIGIN,x
  3355 221A 99 60 00			sta adr.OBSTACLES,y
  3356 221D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3357 221F 99 61 00			sta adr.OBSTACLES+1,y
  3358 2222 CA				dex
  3359
  3360 				; optimize FAIL (1, levels.inc), line = 58
  3361
  3362 2223 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3363 2227 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3364 222B A9 12			lda #$12
  3365 222D 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3366 2230 A9 0A			lda #$0A
  3367 2232 8D A2 2D			sta CALCOBSTACLEADDR.X
  3368 2235 20 30 14			jsr CALCOBSTACLEADDR
  3369 2238 B4 17			ldy :STACKORIGIN-1,x
  3370 223A B5 18			lda :STACKORIGIN,x
  3371 223C 99 60 00			sta adr.OBSTACLES,y
  3372 223F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3373 2241 99 61 00			sta adr.OBSTACLES+1,y
  3374 2244 CA				dex
  3375 2245 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3376 2249 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3377 224D A9 12			lda #$12
  3378 224F 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3379 2252 A9 1E			lda #$1E
  3380 2254 8D A2 2D			sta CALCOBSTACLEADDR.X
  3381 2257 20 30 14			jsr CALCOBSTACLEADDR
  3382 225A B4 17			ldy :STACKORIGIN-1,x
  3383 225C B5 18			lda :STACKORIGIN,x
  3384 225E 99 60 00			sta adr.OBSTACLES,y
  3385 2261 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3386 2263 99 61 00			sta adr.OBSTACLES+1,y
  3387 2266 CA				dex
  3388
  3389 				; optimize FAIL (1, levels.inc), line = 59
  3390
  3391 2267 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3392 226B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3393 226F A9 0C			lda #$0C
  3394 2271 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3395 2274 A9 01			lda #$01
  3396 2276 8D A2 2D			sta CALCOBSTACLEADDR.X
  3397 2279 20 30 14			jsr CALCOBSTACLEADDR
  3398 227C B4 17			ldy :STACKORIGIN-1,x
  3399 227E B5 18			lda :STACKORIGIN,x
  3400 2280 99 60 00			sta adr.OBSTACLES,y
  3401 2283 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3402 2285 99 61 00			sta adr.OBSTACLES+1,y
  3403 2288 CA				dex
  3404 2289 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3405 228D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3406 2291 A9 02			lda #$02
  3407 2293 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3408 2296 A9 14			lda #$14
  3409 2298 8D A2 2D			sta CALCOBSTACLEADDR.X
  3410 229B 20 30 14			jsr CALCOBSTACLEADDR
  3411 229E B4 17			ldy :STACKORIGIN-1,x
  3412 22A0 B5 18			lda :STACKORIGIN,x
  3413 22A2 99 60 00			sta adr.OBSTACLES,y
  3414 22A5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3415 22A7 99 61 00			sta adr.OBSTACLES+1,y
  3416 22AA CA				dex
  3417
  3418 				; optimize FAIL (1, levels.inc), line = 60
  3419
  3420 22AB A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3421 22AF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3422 22B3 A9 16			lda #$16
  3423 22B5 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3424 22B8 A9 14			lda #$14
  3425 22BA 8D A2 2D			sta CALCOBSTACLEADDR.X
  3426 22BD 20 30 14			jsr CALCOBSTACLEADDR
  3427 22C0 B4 17			ldy :STACKORIGIN-1,x
  3428 22C2 B5 18			lda :STACKORIGIN,x
  3429 22C4 99 60 00			sta adr.OBSTACLES,y
  3430 22C7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3431 22C9 99 61 00			sta adr.OBSTACLES+1,y
  3432 22CC CA				dex
  3433 22CD A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3434 22D1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3435 22D5 A9 0C			lda #$0C
  3436 22D7 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3437 22DA A9 14			lda #$14
  3438 22DC 8D A2 2D			sta CALCOBSTACLEADDR.X
  3439 22DF 20 30 14			jsr CALCOBSTACLEADDR
  3440 22E2 B4 17			ldy :STACKORIGIN-1,x
  3441 22E4 B5 18			lda :STACKORIGIN,x
  3442 22E6 99 60 00			sta adr.OBSTACLES,y
  3443 22E9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3444 22EB 99 61 00			sta adr.OBSTACLES+1,y
  3445 22EE CA				dex
  3446 22EF CA				dex
  3447 22F0			@exit
  3448 					.ifdef @new
  3449 					lda <@VarData
  3450 					sta :ztmp
  3451 					lda >@VarData
  3452 					ldy #@VarDataSize-1
  3453 					jmp @FreeMem
  3454 					els
  3455 22F0 60				rts						; ret
  3456 					eif
  3457 				.endl
  3458
  3459 22F1			.local	SETLEVEL05					; PROCEDURE
  3460
  3461 				; optimize OK (levels.inc), line = 67
  3462
  3463 22F1 A9 01			lda #$01
  3464 22F3 8D AE 2D			sta SETPLAYER.ISALIVE
  3465 22F6 A9 62			lda #$62
  3466 22F8 8D AD 2D			sta SETPLAYER.COLOUR
  3467 22FB A9 00			lda #$00
  3468 22FD 8D AC 2D			sta SETPLAYER.BRAIN
  3469 2300 A9 08			lda #$08
  3470 2302 8D AB 2D			sta SETPLAYER.DIR
  3471 2305 A9 0C			lda #$0C
  3472 2307 8D AA 2D			sta SETPLAYER.Y
  3473 230A A9 0A			lda #$0A
  3474 230C 8D A9 2D			sta SETPLAYER.X
  3475 230F AD 59 2C			lda PLAYER1
  3476 2312 8D A7 2D			sta SETPLAYER.P
  3477 2315 AD 5A 2C			lda PLAYER1+1
  3478 2318 8D A8 2D			sta SETPLAYER.P+1
  3479 231B 20 4E 16			jsr SETPLAYER
  3480
  3481 				; optimize OK (levels.inc), line = 68
  3482
  3483 231E A9 01			lda #$01
  3484 2320 8D AE 2D			sta SETPLAYER.ISALIVE
  3485 2323 A9 5D			lda #$5D
  3486 2325 8D AD 2D			sta SETPLAYER.COLOUR
  3487 2328 A9 04			lda #$04
  3488 232A 8D AC 2D			sta SETPLAYER.BRAIN
  3489 232D 8D AB 2D			sta SETPLAYER.DIR
  3490 2330 A9 0C			lda #$0C
  3491 2332 8D AA 2D			sta SETPLAYER.Y
  3492 2335 A9 1E			lda #$1E
  3493 2337 8D A9 2D			sta SETPLAYER.X
  3494 233A AD 5B 2C			lda PLAYER2
  3495 233D 8D A7 2D			sta SETPLAYER.P
  3496 2340 AD 5C 2C			lda PLAYER2+1
  3497 2343 8D A8 2D			sta SETPLAYER.P+1
  3498 2346 20 4E 16			jsr SETPLAYER
  3499
  3500 				; optimize OK (levels.inc), line = 69
  3501
  3502 2349 A9 01			lda #$01
  3503 234B 8D AE 2D			sta SETPLAYER.ISALIVE
  3504 234E A9 71			lda #$71
  3505 2350 8D AD 2D			sta SETPLAYER.COLOUR
  3506 2353 A9 03			lda #$03
  3507 2355 8D AC 2D			sta SETPLAYER.BRAIN
  3508 2358 A9 02			lda #$02
  3509 235A 8D AB 2D			sta SETPLAYER.DIR
  3510 235D A9 04			lda #$04
  3511 235F 8D AA 2D			sta SETPLAYER.Y
  3512 2362 A9 14			lda #$14
  3513 2364 8D A9 2D			sta SETPLAYER.X
  3514 2367 AD 5D 2C			lda PLAYER3
  3515 236A 8D A7 2D			sta SETPLAYER.P
  3516 236D AD 5E 2C			lda PLAYER3+1
  3517 2370 8D A8 2D			sta SETPLAYER.P+1
  3518 2373 20 4E 16			jsr SETPLAYER
  3519
  3520 				; optimize OK (levels.inc), line = 70
  3521
  3522 2376 A9 01			lda #$01
  3523 2378 8D AE 2D			sta SETPLAYER.ISALIVE
  3524 237B A9 55			lda #$55
  3525 237D 8D AD 2D			sta SETPLAYER.COLOUR
  3526 2380 A9 02			lda #$02
  3527 2382 8D AC 2D			sta SETPLAYER.BRAIN
  3528 2385 A9 01			lda #$01
  3529 2387 8D AB 2D			sta SETPLAYER.DIR
  3530 238A A9 12			lda #$12
  3531 238C 8D AA 2D			sta SETPLAYER.Y
  3532 238F A9 14			lda #$14
  3533 2391 8D A9 2D			sta SETPLAYER.X
  3534 2394 AD 5F 2C			lda PLAYER4
  3535 2397 8D A7 2D			sta SETPLAYER.P
  3536 239A AD 60 2C			lda PLAYER4+1
  3537 239D 8D A8 2D			sta SETPLAYER.P+1
  3538 23A0 20 4E 16			jsr SETPLAYER
  3539
  3540 				; optimize FAIL (1, levels.inc), line = 72
  3541
  3542 23A3 E8				inx
  3543 23A4 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3544 23A8 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3545 23AA A9 06			lda #$06
  3546 23AC 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3547 23AF A9 0A			lda #$0A
  3548 23B1 8D A2 2D			sta CALCOBSTACLEADDR.X
  3549 23B4 20 30 14			jsr CALCOBSTACLEADDR
  3550 23B7 B4 17			ldy :STACKORIGIN-1,x
  3551 23B9 B5 18			lda :STACKORIGIN,x
  3552 23BB 99 60 00			sta adr.OBSTACLES,y
  3553 23BE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3554 23C0 99 61 00			sta adr.OBSTACLES+1,y
  3555 23C3 CA				dex
  3556 23C4 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3557 23C8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3558 23CC A9 06			lda #$06
  3559 23CE 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3560 23D1 A9 1E			lda #$1E
  3561 23D3 8D A2 2D			sta CALCOBSTACLEADDR.X
  3562 23D6 20 30 14			jsr CALCOBSTACLEADDR
  3563 23D9 B4 17			ldy :STACKORIGIN-1,x
  3564 23DB B5 18			lda :STACKORIGIN,x
  3565 23DD 99 60 00			sta adr.OBSTACLES,y
  3566 23E0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3567 23E2 99 61 00			sta adr.OBSTACLES+1,y
  3568 23E5 CA				dex
  3569
  3570 				; optimize FAIL (1, levels.inc), line = 73
  3571
  3572 23E6 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3573 23EA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3574 23EE A9 12			lda #$12
  3575 23F0 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3576 23F3 A9 0A			lda #$0A
  3577 23F5 8D A2 2D			sta CALCOBSTACLEADDR.X
  3578 23F8 20 30 14			jsr CALCOBSTACLEADDR
  3579 23FB B4 17			ldy :STACKORIGIN-1,x
  3580 23FD B5 18			lda :STACKORIGIN,x
  3581 23FF 99 60 00			sta adr.OBSTACLES,y
  3582 2402 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3583 2404 99 61 00			sta adr.OBSTACLES+1,y
  3584 2407 CA				dex
  3585 2408 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3586 240C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3587 2410 A9 12			lda #$12
  3588 2412 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3589 2415 A9 1E			lda #$1E
  3590 2417 8D A2 2D			sta CALCOBSTACLEADDR.X
  3591 241A 20 30 14			jsr CALCOBSTACLEADDR
  3592 241D B4 17			ldy :STACKORIGIN-1,x
  3593 241F B5 18			lda :STACKORIGIN,x
  3594 2421 99 60 00			sta adr.OBSTACLES,y
  3595 2424 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3596 2426 99 61 00			sta adr.OBSTACLES+1,y
  3597 2429 CA				dex
  3598
  3599 				; optimize FAIL (1, levels.inc), line = 74
  3600
  3601 242A A9 08 95 18			mva #$08 :STACKORIGIN,x
  3602 242E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3603 2432 A9 0C			lda #$0C
  3604 2434 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3605 2437 A9 01			lda #$01
  3606 2439 8D A2 2D			sta CALCOBSTACLEADDR.X
  3607 243C 20 30 14			jsr CALCOBSTACLEADDR
  3608 243F B4 17			ldy :STACKORIGIN-1,x
  3609 2441 B5 18			lda :STACKORIGIN,x
  3610 2443 99 60 00			sta adr.OBSTACLES,y
  3611 2446 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3612 2448 99 61 00			sta adr.OBSTACLES+1,y
  3613 244B CA				dex
  3614 244C A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3615 2450 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3616 2454 A9 02			lda #$02
  3617 2456 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3618 2459 A9 14			lda #$14
  3619 245B 8D A2 2D			sta CALCOBSTACLEADDR.X
  3620 245E 20 30 14			jsr CALCOBSTACLEADDR
  3621 2461 B4 17			ldy :STACKORIGIN-1,x
  3622 2463 B5 18			lda :STACKORIGIN,x
  3623 2465 99 60 00			sta adr.OBSTACLES,y
  3624 2468 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3625 246A 99 61 00			sta adr.OBSTACLES+1,y
  3626 246D CA				dex
  3627
  3628 				; optimize FAIL (1, levels.inc), line = 75
  3629
  3630 246E A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3631 2472 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3632 2476 A9 16			lda #$16
  3633 2478 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3634 247B A9 14			lda #$14
  3635 247D 8D A2 2D			sta CALCOBSTACLEADDR.X
  3636 2480 20 30 14			jsr CALCOBSTACLEADDR
  3637 2483 B4 17			ldy :STACKORIGIN-1,x
  3638 2485 B5 18			lda :STACKORIGIN,x
  3639 2487 99 60 00			sta adr.OBSTACLES,y
  3640 248A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3641 248C 99 61 00			sta adr.OBSTACLES+1,y
  3642 248F CA				dex
  3643 2490 CA				dex
  3644 2491			@exit
  3645 					.ifdef @new
  3646 					lda <@VarData
  3647 					sta :ztmp
  3648 					lda >@VarData
  3649 					ldy #@VarDataSize-1
  3650 					jmp @FreeMem
  3651 					els
  3652 2491 60				rts						; ret
  3653 					eif
  3654 				.endl
  3655
  3656 2492			.local	SETLEVEL06					; PROCEDURE
  3657
  3658 				; optimize OK (levels.inc), line = 82
  3659
  3660 2492 A9 01			lda #$01
  3661 2494 8D AE 2D			sta SETPLAYER.ISALIVE
  3662 2497 A9 62			lda #$62
  3663 2499 8D AD 2D			sta SETPLAYER.COLOUR
  3664 249C A9 00			lda #$00
  3665 249E 8D AC 2D			sta SETPLAYER.BRAIN
  3666 24A1 A9 04			lda #$04
  3667 24A3 8D AB 2D			sta SETPLAYER.DIR
  3668 24A6 A9 0C			lda #$0C
  3669 24A8 8D AA 2D			sta SETPLAYER.Y
  3670 24AB A9 12			lda #$12
  3671 24AD 8D A9 2D			sta SETPLAYER.X
  3672 24B0 AD 59 2C			lda PLAYER1
  3673 24B3 8D A7 2D			sta SETPLAYER.P
  3674 24B6 AD 5A 2C			lda PLAYER1+1
  3675 24B9 8D A8 2D			sta SETPLAYER.P+1
  3676 24BC 20 4E 16			jsr SETPLAYER
  3677
  3678 				; optimize OK (levels.inc), line = 83
  3679
  3680 24BF A9 01			lda #$01
  3681 24C1 8D AE 2D			sta SETPLAYER.ISALIVE
  3682 24C4 A9 5D			lda #$5D
  3683 24C6 8D AD 2D			sta SETPLAYER.COLOUR
  3684 24C9 A9 02			lda #$02
  3685 24CB 8D AC 2D			sta SETPLAYER.BRAIN
  3686 24CE A9 08			lda #$08
  3687 24D0 8D AB 2D			sta SETPLAYER.DIR
  3688 24D3 A9 0C			lda #$0C
  3689 24D5 8D AA 2D			sta SETPLAYER.Y
  3690 24D8 A9 16			lda #$16
  3691 24DA 8D A9 2D			sta SETPLAYER.X
  3692 24DD AD 5B 2C			lda PLAYER2
  3693 24E0 8D A7 2D			sta SETPLAYER.P
  3694 24E3 AD 5C 2C			lda PLAYER2+1
  3695 24E6 8D A8 2D			sta SETPLAYER.P+1
  3696 24E9 20 4E 16			jsr SETPLAYER
  3697
  3698 				; optimize OK (levels.inc), line = 84
  3699
  3700 24EC A9 01			lda #$01
  3701 24EE 8D AE 2D			sta SETPLAYER.ISALIVE
  3702 24F1 A9 71			lda #$71
  3703 24F3 8D AD 2D			sta SETPLAYER.COLOUR
  3704 24F6 A9 02			lda #$02
  3705 24F8 8D AC 2D			sta SETPLAYER.BRAIN
  3706 24FB 8D AB 2D			sta SETPLAYER.DIR
  3707 24FE A9 06			lda #$06
  3708 2500 8D AA 2D			sta SETPLAYER.Y
  3709 2503 8D A9 2D			sta SETPLAYER.X
  3710 2506 AD 5D 2C			lda PLAYER3
  3711 2509 8D A7 2D			sta SETPLAYER.P
  3712 250C AD 5E 2C			lda PLAYER3+1
  3713 250F 8D A8 2D			sta SETPLAYER.P+1
  3714 2512 20 4E 16			jsr SETPLAYER
  3715
  3716 				; optimize OK (levels.inc), line = 85
  3717
  3718 2515 A9 01			lda #$01
  3719 2517 8D AE 2D			sta SETPLAYER.ISALIVE
  3720 251A A9 55			lda #$55
  3721 251C 8D AD 2D			sta SETPLAYER.COLOUR
  3722 251F A9 03			lda #$03
  3723 2521 8D AC 2D			sta SETPLAYER.BRAIN
  3724 2524 A9 08			lda #$08
  3725 2526 8D AB 2D			sta SETPLAYER.DIR
  3726 2529 A9 12			lda #$12
  3727 252B 8D AA 2D			sta SETPLAYER.Y
  3728 252E A9 24			lda #$24
  3729 2530 8D A9 2D			sta SETPLAYER.X
  3730 2533 AD 5F 2C			lda PLAYER4
  3731 2536 8D A7 2D			sta SETPLAYER.P
  3732 2539 AD 60 2C			lda PLAYER4+1
  3733 253C 8D A8 2D			sta SETPLAYER.P+1
  3734 253F 20 4E 16			jsr SETPLAYER
  3735
  3736 				; optimize FAIL (1, levels.inc), line = 87
  3737
  3738 2542 E8				inx
  3739 2543 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3740 2547 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3741 2549 A9 06			lda #$06
  3742 254B 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3743 254E A9 0A			lda #$0A
  3744 2550 8D A2 2D			sta CALCOBSTACLEADDR.X
  3745 2553 20 30 14			jsr CALCOBSTACLEADDR
  3746 2556 B4 17			ldy :STACKORIGIN-1,x
  3747 2558 B5 18			lda :STACKORIGIN,x
  3748 255A 99 60 00			sta adr.OBSTACLES,y
  3749 255D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3750 255F 99 61 00			sta adr.OBSTACLES+1,y
  3751 2562 CA				dex
  3752 2563 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3753 2567 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3754 256B A9 06			lda #$06
  3755 256D 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3756 2570 A9 1E			lda #$1E
  3757 2572 8D A2 2D			sta CALCOBSTACLEADDR.X
  3758 2575 20 30 14			jsr CALCOBSTACLEADDR
  3759 2578 B4 17			ldy :STACKORIGIN-1,x
  3760 257A B5 18			lda :STACKORIGIN,x
  3761 257C 99 60 00			sta adr.OBSTACLES,y
  3762 257F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3763 2581 99 61 00			sta adr.OBSTACLES+1,y
  3764 2584 CA				dex
  3765
  3766 				; optimize FAIL (1, levels.inc), line = 88
  3767
  3768 2585 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3769 2589 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3770 258D A9 12			lda #$12
  3771 258F 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3772 2592 A9 0A			lda #$0A
  3773 2594 8D A2 2D			sta CALCOBSTACLEADDR.X
  3774 2597 20 30 14			jsr CALCOBSTACLEADDR
  3775 259A B4 17			ldy :STACKORIGIN-1,x
  3776 259C B5 18			lda :STACKORIGIN,x
  3777 259E 99 60 00			sta adr.OBSTACLES,y
  3778 25A1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3779 25A3 99 61 00			sta adr.OBSTACLES+1,y
  3780 25A6 CA				dex
  3781 25A7 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3782 25AB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3783 25AF A9 12			lda #$12
  3784 25B1 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3785 25B4 A9 1E			lda #$1E
  3786 25B6 8D A2 2D			sta CALCOBSTACLEADDR.X
  3787 25B9 20 30 14			jsr CALCOBSTACLEADDR
  3788 25BC B4 17			ldy :STACKORIGIN-1,x
  3789 25BE B5 18			lda :STACKORIGIN,x
  3790 25C0 99 60 00			sta adr.OBSTACLES,y
  3791 25C3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3792 25C5 99 61 00			sta adr.OBSTACLES+1,y
  3793 25C8 CA				dex
  3794
  3795 				; optimize FAIL (1, levels.inc), line = 89
  3796
  3797 25C9 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3798 25CD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3799 25D1 A9 0C			lda #$0C
  3800 25D3 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3801 25D6 A9 01			lda #$01
  3802 25D8 8D A2 2D			sta CALCOBSTACLEADDR.X
  3803 25DB 20 30 14			jsr CALCOBSTACLEADDR
  3804 25DE B4 17			ldy :STACKORIGIN-1,x
  3805 25E0 B5 18			lda :STACKORIGIN,x
  3806 25E2 99 60 00			sta adr.OBSTACLES,y
  3807 25E5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3808 25E7 99 61 00			sta adr.OBSTACLES+1,y
  3809 25EA CA				dex
  3810 25EB A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3811 25EF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3812 25F3 A9 02			lda #$02
  3813 25F5 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3814 25F8 A9 14			lda #$14
  3815 25FA 8D A2 2D			sta CALCOBSTACLEADDR.X
  3816 25FD 20 30 14			jsr CALCOBSTACLEADDR
  3817 2600 B4 17			ldy :STACKORIGIN-1,x
  3818 2602 B5 18			lda :STACKORIGIN,x
  3819 2604 99 60 00			sta adr.OBSTACLES,y
  3820 2607 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3821 2609 99 61 00			sta adr.OBSTACLES+1,y
  3822 260C CA				dex
  3823
  3824 				; optimize FAIL (1, levels.inc), line = 90
  3825
  3826 260D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3827 2611 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3828 2615 A9 16			lda #$16
  3829 2617 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3830 261A A9 14			lda #$14
  3831 261C 8D A2 2D			sta CALCOBSTACLEADDR.X
  3832 261F 20 30 14			jsr CALCOBSTACLEADDR
  3833 2622 B4 17			ldy :STACKORIGIN-1,x
  3834 2624 B5 18			lda :STACKORIGIN,x
  3835 2626 99 60 00			sta adr.OBSTACLES,y
  3836 2629 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3837 262B 99 61 00			sta adr.OBSTACLES+1,y
  3838 262E CA				dex
  3839 262F A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3840 2633 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3841 2637 A9 0C			lda #$0C
  3842 2639 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3843 263C A9 14			lda #$14
  3844 263E 8D A2 2D			sta CALCOBSTACLEADDR.X
  3845 2641 20 30 14			jsr CALCOBSTACLEADDR
  3846 2644 B4 17			ldy :STACKORIGIN-1,x
  3847 2646 B5 18			lda :STACKORIGIN,x
  3848 2648 99 60 00			sta adr.OBSTACLES,y
  3849 264B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3850 264D 99 61 00			sta adr.OBSTACLES+1,y
  3851 2650 CA				dex
  3852 2651 CA				dex
  3853 2652			@exit
  3854 					.ifdef @new
  3855 					lda <@VarData
  3856 					sta :ztmp
  3857 					lda >@VarData
  3858 					ldy #@VarDataSize-1
  3859 					jmp @FreeMem
  3860 					els
  3861 2652 60				rts						; ret
  3862 					eif
  3863 				.endl
  3864
  3865 2653			.local	SETLEVEL07					; PROCEDURE
  3866
  3867 				; optimize OK (levels.inc), line = 97
  3868
  3869 2653 A9 01			lda #$01
  3870 2655 8D AE 2D			sta SETPLAYER.ISALIVE
  3871 2658 A9 62			lda #$62
  3872 265A 8D AD 2D			sta SETPLAYER.COLOUR
  3873 265D A9 00			lda #$00
  3874 265F 8D AC 2D			sta SETPLAYER.BRAIN
  3875 2662 A9 04			lda #$04
  3876 2664 8D AB 2D			sta SETPLAYER.DIR
  3877 2667 A9 0C			lda #$0C
  3878 2669 8D AA 2D			sta SETPLAYER.Y
  3879 266C A9 12			lda #$12
  3880 266E 8D A9 2D			sta SETPLAYER.X
  3881 2671 AD 59 2C			lda PLAYER1
  3882 2674 8D A7 2D			sta SETPLAYER.P
  3883 2677 AD 5A 2C			lda PLAYER1+1
  3884 267A 8D A8 2D			sta SETPLAYER.P+1
  3885 267D 20 4E 16			jsr SETPLAYER
  3886
  3887 				; optimize OK (levels.inc), line = 98
  3888
  3889 2680 A9 01			lda #$01
  3890 2682 8D AE 2D			sta SETPLAYER.ISALIVE
  3891 2685 A9 5D			lda #$5D
  3892 2687 8D AD 2D			sta SETPLAYER.COLOUR
  3893 268A A9 03			lda #$03
  3894 268C 8D AC 2D			sta SETPLAYER.BRAIN
  3895 268F A9 08			lda #$08
  3896 2691 8D AB 2D			sta SETPLAYER.DIR
  3897 2694 A9 17			lda #$17
  3898 2696 8D AA 2D			sta SETPLAYER.Y
  3899 2699 A9 01			lda #$01
  3900 269B 8D A9 2D			sta SETPLAYER.X
  3901 269E AD 5B 2C			lda PLAYER2
  3902 26A1 8D A7 2D			sta SETPLAYER.P
  3903 26A4 AD 5C 2C			lda PLAYER2+1
  3904 26A7 8D A8 2D			sta SETPLAYER.P+1
  3905 26AA 20 4E 16			jsr SETPLAYER
  3906
  3907 				; optimize OK (levels.inc), line = 99
  3908
  3909 26AD A9 01			lda #$01
  3910 26AF 8D AE 2D			sta SETPLAYER.ISALIVE
  3911 26B2 A9 71			lda #$71
  3912 26B4 8D AD 2D			sta SETPLAYER.COLOUR
  3913 26B7 A9 03			lda #$03
  3914 26B9 8D AC 2D			sta SETPLAYER.BRAIN
  3915 26BC A9 02			lda #$02
  3916 26BE 8D AB 2D			sta SETPLAYER.DIR
  3917 26C1 A9 04			lda #$04
  3918 26C3 8D AA 2D			sta SETPLAYER.Y
  3919 26C6 A9 1E			lda #$1E
  3920 26C8 8D A9 2D			sta SETPLAYER.X
  3921 26CB AD 5D 2C			lda PLAYER3
  3922 26CE 8D A7 2D			sta SETPLAYER.P
  3923 26D1 AD 5E 2C			lda PLAYER3+1
  3924 26D4 8D A8 2D			sta SETPLAYER.P+1
  3925 26D7 20 4E 16			jsr SETPLAYER
  3926
  3927 				; optimize OK (levels.inc), line = 100
  3928
  3929 26DA A9 01			lda #$01
  3930 26DC 8D AE 2D			sta SETPLAYER.ISALIVE
  3931 26DF A9 55			lda #$55
  3932 26E1 8D AD 2D			sta SETPLAYER.COLOUR
  3933 26E4 A9 02			lda #$02
  3934 26E6 8D AC 2D			sta SETPLAYER.BRAIN
  3935 26E9 A9 01			lda #$01
  3936 26EB 8D AB 2D			sta SETPLAYER.DIR
  3937 26EE A9 15			lda #$15
  3938 26F0 8D AA 2D			sta SETPLAYER.Y
  3939 26F3 A9 24			lda #$24
  3940 26F5 8D A9 2D			sta SETPLAYER.X
  3941 26F8 AD 5F 2C			lda PLAYER4
  3942 26FB 8D A7 2D			sta SETPLAYER.P
  3943 26FE AD 60 2C			lda PLAYER4+1
  3944 2701 8D A8 2D			sta SETPLAYER.P+1
  3945 2704 20 4E 16			jsr SETPLAYER
  3946
  3947 				; optimize FAIL (1, levels.inc), line = 102
  3948
  3949 2707 E8				inx
  3950 2708 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3951 270C 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3952 270E A9 06			lda #$06
  3953 2710 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3954 2713 A9 0A			lda #$0A
  3955 2715 8D A2 2D			sta CALCOBSTACLEADDR.X
  3956 2718 20 30 14			jsr CALCOBSTACLEADDR
  3957 271B B4 17			ldy :STACKORIGIN-1,x
  3958 271D B5 18			lda :STACKORIGIN,x
  3959 271F 99 60 00			sta adr.OBSTACLES,y
  3960 2722 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3961 2724 99 61 00			sta adr.OBSTACLES+1,y
  3962 2727 CA				dex
  3963 2728 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3964 272C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3965 2730 A9 06			lda #$06
  3966 2732 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3967 2735 A9 1E			lda #$1E
  3968 2737 8D A2 2D			sta CALCOBSTACLEADDR.X
  3969 273A 20 30 14			jsr CALCOBSTACLEADDR
  3970 273D B4 17			ldy :STACKORIGIN-1,x
  3971 273F B5 18			lda :STACKORIGIN,x
  3972 2741 99 60 00			sta adr.OBSTACLES,y
  3973 2744 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3974 2746 99 61 00			sta adr.OBSTACLES+1,y
  3975 2749 CA				dex
  3976
  3977 				; optimize FAIL (1, levels.inc), line = 103
  3978
  3979 274A A9 04 95 18			mva #$04 :STACKORIGIN,x
  3980 274E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3981 2752 A9 12			lda #$12
  3982 2754 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3983 2757 A9 0A			lda #$0A
  3984 2759 8D A2 2D			sta CALCOBSTACLEADDR.X
  3985 275C 20 30 14			jsr CALCOBSTACLEADDR
  3986 275F B4 17			ldy :STACKORIGIN-1,x
  3987 2761 B5 18			lda :STACKORIGIN,x
  3988 2763 99 60 00			sta adr.OBSTACLES,y
  3989 2766 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3990 2768 99 61 00			sta adr.OBSTACLES+1,y
  3991 276B CA				dex
  3992 276C A9 06 95 18			mva #$06 :STACKORIGIN,x
  3993 2770 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3994 2774 A9 12			lda #$12
  3995 2776 8D A3 2D			sta CALCOBSTACLEADDR.Y
  3996 2779 A9 1E			lda #$1E
  3997 277B 8D A2 2D			sta CALCOBSTACLEADDR.X
  3998 277E 20 30 14			jsr CALCOBSTACLEADDR
  3999 2781 B4 17			ldy :STACKORIGIN-1,x
  4000 2783 B5 18			lda :STACKORIGIN,x
  4001 2785 99 60 00			sta adr.OBSTACLES,y
  4002 2788 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4003 278A 99 61 00			sta adr.OBSTACLES+1,y
  4004 278D CA				dex
  4005
  4006 				; optimize FAIL (1, levels.inc), line = 104
  4007
  4008 278E A9 08 95 18			mva #$08 :STACKORIGIN,x
  4009 2792 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4010 2796 A9 0C			lda #$0C
  4011 2798 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4012 279B A9 01			lda #$01
  4013 279D 8D A2 2D			sta CALCOBSTACLEADDR.X
  4014 27A0 20 30 14			jsr CALCOBSTACLEADDR
  4015 27A3 B4 17			ldy :STACKORIGIN-1,x
  4016 27A5 B5 18			lda :STACKORIGIN,x
  4017 27A7 99 60 00			sta adr.OBSTACLES,y
  4018 27AA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4019 27AC 99 61 00			sta adr.OBSTACLES+1,y
  4020 27AF CA				dex
  4021 27B0 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4022 27B4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4023 27B8 A9 02			lda #$02
  4024 27BA 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4025 27BD A9 14			lda #$14
  4026 27BF 8D A2 2D			sta CALCOBSTACLEADDR.X
  4027 27C2 20 30 14			jsr CALCOBSTACLEADDR
  4028 27C5 B4 17			ldy :STACKORIGIN-1,x
  4029 27C7 B5 18			lda :STACKORIGIN,x
  4030 27C9 99 60 00			sta adr.OBSTACLES,y
  4031 27CC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4032 27CE 99 61 00			sta adr.OBSTACLES+1,y
  4033 27D1 CA				dex
  4034
  4035 				; optimize FAIL (1, levels.inc), line = 105
  4036
  4037 27D2 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4038 27D6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4039 27DA A9 16			lda #$16
  4040 27DC 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4041 27DF A9 14			lda #$14
  4042 27E1 8D A2 2D			sta CALCOBSTACLEADDR.X
  4043 27E4 20 30 14			jsr CALCOBSTACLEADDR
  4044 27E7 B4 17			ldy :STACKORIGIN-1,x
  4045 27E9 B5 18			lda :STACKORIGIN,x
  4046 27EB 99 60 00			sta adr.OBSTACLES,y
  4047 27EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4048 27F0 99 61 00			sta adr.OBSTACLES+1,y
  4049 27F3 CA				dex
  4050 27F4 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4051 27F8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4052 27FC A9 0C			lda #$0C
  4053 27FE 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4054 2801 A9 14			lda #$14
  4055 2803 8D A2 2D			sta CALCOBSTACLEADDR.X
  4056 2806 20 30 14			jsr CALCOBSTACLEADDR
  4057 2809 B4 17			ldy :STACKORIGIN-1,x
  4058 280B B5 18			lda :STACKORIGIN,x
  4059 280D 99 60 00			sta adr.OBSTACLES,y
  4060 2810 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4061 2812 99 61 00			sta adr.OBSTACLES+1,y
  4062 2815 CA				dex
  4063 2816 CA				dex
  4064 2817			@exit
  4065 					.ifdef @new
  4066 					lda <@VarData
  4067 					sta :ztmp
  4068 					lda >@VarData
  4069 					ldy #@VarDataSize-1
  4070 					jmp @FreeMem
  4071 					els
  4072 2817 60				rts						; ret
  4073 					eif
  4074 				.endl
  4075
  4076 2818			.local	SETLEVEL08					; PROCEDURE
  4077
  4078 				; optimize OK (levels.inc), line = 112
  4079
  4080 2818 A9 01			lda #$01
  4081 281A 8D AE 2D			sta SETPLAYER.ISALIVE
  4082 281D A9 62			lda #$62
  4083 281F 8D AD 2D			sta SETPLAYER.COLOUR
  4084 2822 A9 00			lda #$00
  4085 2824 8D AC 2D			sta SETPLAYER.BRAIN
  4086 2827 A9 08			lda #$08
  4087 2829 8D AB 2D			sta SETPLAYER.DIR
  4088 282C A9 17			lda #$17
  4089 282E 8D AA 2D			sta SETPLAYER.Y
  4090 2831 A9 01			lda #$01
  4091 2833 8D A9 2D			sta SETPLAYER.X
  4092 2836 AD 59 2C			lda PLAYER1
  4093 2839 8D A7 2D			sta SETPLAYER.P
  4094 283C AD 5A 2C			lda PLAYER1+1
  4095 283F 8D A8 2D			sta SETPLAYER.P+1
  4096 2842 20 4E 16			jsr SETPLAYER
  4097
  4098 				; optimize OK (levels.inc), line = 113
  4099
  4100 2845 A9 01			lda #$01
  4101 2847 8D AE 2D			sta SETPLAYER.ISALIVE
  4102 284A A9 5D			lda #$5D
  4103 284C 8D AD 2D			sta SETPLAYER.COLOUR
  4104 284F A9 03			lda #$03
  4105 2851 8D AC 2D			sta SETPLAYER.BRAIN
  4106 2854 A9 04			lda #$04
  4107 2856 8D AB 2D			sta SETPLAYER.DIR
  4108 2859 A9 17			lda #$17
  4109 285B 8D AA 2D			sta SETPLAYER.Y
  4110 285E A9 26			lda #$26
  4111 2860 8D A9 2D			sta SETPLAYER.X
  4112 2863 AD 5B 2C			lda PLAYER2
  4113 2866 8D A7 2D			sta SETPLAYER.P
  4114 2869 AD 5C 2C			lda PLAYER2+1
  4115 286C 8D A8 2D			sta SETPLAYER.P+1
  4116 286F 20 4E 16			jsr SETPLAYER
  4117
  4118 				; optimize OK (levels.inc), line = 114
  4119
  4120 2872 A9 01			lda #$01
  4121 2874 8D AE 2D			sta SETPLAYER.ISALIVE
  4122 2877 A9 71			lda #$71
  4123 2879 8D AD 2D			sta SETPLAYER.COLOUR
  4124 287C A9 02			lda #$02
  4125 287E 8D AC 2D			sta SETPLAYER.BRAIN
  4126 2881 8D AB 2D			sta SETPLAYER.DIR
  4127 2884 A9 01			lda #$01
  4128 2886 8D AA 2D			sta SETPLAYER.Y
  4129 2889 A9 0A			lda #$0A
  4130 288B 8D A9 2D			sta SETPLAYER.X
  4131 288E AD 5D 2C			lda PLAYER3
  4132 2891 8D A7 2D			sta SETPLAYER.P
  4133 2894 AD 5E 2C			lda PLAYER3+1
  4134 2897 8D A8 2D			sta SETPLAYER.P+1
  4135 289A 20 4E 16			jsr SETPLAYER
  4136
  4137 				; optimize OK (levels.inc), line = 115
  4138
  4139 289D A9 01			lda #$01
  4140 289F 8D AE 2D			sta SETPLAYER.ISALIVE
  4141 28A2 A9 55			lda #$55
  4142 28A4 8D AD 2D			sta SETPLAYER.COLOUR
  4143 28A7 A9 04			lda #$04
  4144 28A9 8D AC 2D			sta SETPLAYER.BRAIN
  4145 28AC 8D AB 2D			sta SETPLAYER.DIR
  4146 28AF A9 01			lda #$01
  4147 28B1 8D AA 2D			sta SETPLAYER.Y
  4148 28B4 A9 26			lda #$26
  4149 28B6 8D A9 2D			sta SETPLAYER.X
  4150 28B9 AD 5F 2C			lda PLAYER4
  4151 28BC 8D A7 2D			sta SETPLAYER.P
  4152 28BF AD 60 2C			lda PLAYER4+1
  4153 28C2 8D A8 2D			sta SETPLAYER.P+1
  4154 28C5 20 4E 16			jsr SETPLAYER
  4155
  4156 				; optimize FAIL (1, levels.inc), line = 117
  4157
  4158 28C8 E8				inx
  4159 28C9 A9 00 95 18			mva #$00 :STACKORIGIN,x
  4160 28CD 95 28			sta :STACKORIGIN+STACKWIDTH,x
  4161 28CF A9 06			lda #$06
  4162 28D1 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4163 28D4 A9 0A			lda #$0A
  4164 28D6 8D A2 2D			sta CALCOBSTACLEADDR.X
  4165 28D9 20 30 14			jsr CALCOBSTACLEADDR
  4166 28DC B4 17			ldy :STACKORIGIN-1,x
  4167 28DE B5 18			lda :STACKORIGIN,x
  4168 28E0 99 60 00			sta adr.OBSTACLES,y
  4169 28E3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4170 28E5 99 61 00			sta adr.OBSTACLES+1,y
  4171 28E8 CA				dex
  4172 28E9 A9 02 95 18			mva #$02 :STACKORIGIN,x
  4173 28ED A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4174 28F1 A9 06			lda #$06
  4175 28F3 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4176 28F6 A9 1E			lda #$1E
  4177 28F8 8D A2 2D			sta CALCOBSTACLEADDR.X
  4178 28FB 20 30 14			jsr CALCOBSTACLEADDR
  4179 28FE B4 17			ldy :STACKORIGIN-1,x
  4180 2900 B5 18			lda :STACKORIGIN,x
  4181 2902 99 60 00			sta adr.OBSTACLES,y
  4182 2905 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4183 2907 99 61 00			sta adr.OBSTACLES+1,y
  4184 290A CA				dex
  4185
  4186 				; optimize FAIL (1, levels.inc), line = 118
  4187
  4188 290B A9 04 95 18			mva #$04 :STACKORIGIN,x
  4189 290F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4190 2913 A9 12			lda #$12
  4191 2915 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4192 2918 A9 0A			lda #$0A
  4193 291A 8D A2 2D			sta CALCOBSTACLEADDR.X
  4194 291D 20 30 14			jsr CALCOBSTACLEADDR
  4195 2920 B4 17			ldy :STACKORIGIN-1,x
  4196 2922 B5 18			lda :STACKORIGIN,x
  4197 2924 99 60 00			sta adr.OBSTACLES,y
  4198 2927 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4199 2929 99 61 00			sta adr.OBSTACLES+1,y
  4200 292C CA				dex
  4201 292D A9 06 95 18			mva #$06 :STACKORIGIN,x
  4202 2931 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4203 2935 A9 12			lda #$12
  4204 2937 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4205 293A A9 1E			lda #$1E
  4206 293C 8D A2 2D			sta CALCOBSTACLEADDR.X
  4207 293F 20 30 14			jsr CALCOBSTACLEADDR
  4208 2942 B4 17			ldy :STACKORIGIN-1,x
  4209 2944 B5 18			lda :STACKORIGIN,x
  4210 2946 99 60 00			sta adr.OBSTACLES,y
  4211 2949 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4212 294B 99 61 00			sta adr.OBSTACLES+1,y
  4213 294E CA				dex
  4214
  4215 				; optimize FAIL (1, levels.inc), line = 119
  4216
  4217 294F A9 08 95 18			mva #$08 :STACKORIGIN,x
  4218 2953 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4219 2957 A9 0C			lda #$0C
  4220 2959 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4221 295C A9 01			lda #$01
  4222 295E 8D A2 2D			sta CALCOBSTACLEADDR.X
  4223 2961 20 30 14			jsr CALCOBSTACLEADDR
  4224 2964 B4 17			ldy :STACKORIGIN-1,x
  4225 2966 B5 18			lda :STACKORIGIN,x
  4226 2968 99 60 00			sta adr.OBSTACLES,y
  4227 296B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4228 296D 99 61 00			sta adr.OBSTACLES+1,y
  4229 2970 CA				dex
  4230 2971 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4231 2975 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4232 2979 A9 02			lda #$02
  4233 297B 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4234 297E A9 14			lda #$14
  4235 2980 8D A2 2D			sta CALCOBSTACLEADDR.X
  4236 2983 20 30 14			jsr CALCOBSTACLEADDR
  4237 2986 B4 17			ldy :STACKORIGIN-1,x
  4238 2988 B5 18			lda :STACKORIGIN,x
  4239 298A 99 60 00			sta adr.OBSTACLES,y
  4240 298D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4241 298F 99 61 00			sta adr.OBSTACLES+1,y
  4242 2992 CA				dex
  4243
  4244 				; optimize FAIL (1, levels.inc), line = 120
  4245
  4246 2993 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4247 2997 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4248 299B A9 16			lda #$16
  4249 299D 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4250 29A0 A9 14			lda #$14
  4251 29A2 8D A2 2D			sta CALCOBSTACLEADDR.X
  4252 29A5 20 30 14			jsr CALCOBSTACLEADDR
  4253 29A8 B4 17			ldy :STACKORIGIN-1,x
  4254 29AA B5 18			lda :STACKORIGIN,x
  4255 29AC 99 60 00			sta adr.OBSTACLES,y
  4256 29AF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4257 29B1 99 61 00			sta adr.OBSTACLES+1,y
  4258 29B4 CA				dex
  4259 29B5 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4260 29B9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4261 29BD A9 0C			lda #$0C
  4262 29BF 8D A3 2D			sta CALCOBSTACLEADDR.Y
  4263 29C2 A9 14			lda #$14
  4264 29C4 8D A2 2D			sta CALCOBSTACLEADDR.X
  4265 29C7 20 30 14			jsr CALCOBSTACLEADDR
  4266 29CA B4 17			ldy :STACKORIGIN-1,x
  4267 29CC B5 18			lda :STACKORIGIN,x
  4268 29CE 99 60 00			sta adr.OBSTACLES,y
  4269 29D1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4270 29D3 99 61 00			sta adr.OBSTACLES+1,y
  4271 29D6 CA				dex
  4272 29D7 CA				dex
  4273 29D8			@exit
  4274 					.ifdef @new
  4275 					lda <@VarData
  4276 					sta :ztmp
  4277 					lda >@VarData
  4278 					ldy #@VarDataSize-1
  4279 					jmp @FreeMem
  4280 					els
  4281 29D8 60				rts						; ret
  4282 					eif
  4283 				.endl
  4284
  4285 29D9			.local	INITPLAYFIELD					; PROCEDURE
  4286
  4287 				; optimize OK (init.inc), line = 5
  4288
  4289 29D9 A9 1F			lda #$1F
  4290 29DB 8D 15 FF			sta BACKGROUND
  4291 29DE A9 00			lda #$00
  4292 29E0 8D 19 FF			sta BOREDER
  4293
  4294 				; optimize OK (init.inc), line = 6
  4295
  4296 29E3 A9 20			lda #$20
  4297 29E5 85 04			sta SYSTEM.FILLCHAR_006E.VALUE
  4298 29E7 A9 C0			lda #$C0
  4299 29E9 85 0C			sta SYSTEM.FILLCHAR_006E.COUNT
  4300 29EB A9 03			lda #$03
  4301 29ED 85 0D			sta SYSTEM.FILLCHAR_006E.COUNT+1
  4302 29EF A9 00			lda #$00
  4303 29F1 85 08			sta SYSTEM.FILLCHAR_006E.A
  4304 29F3 A9 0C			lda #$0C
  4305 29F5 85 09			sta SYSTEM.FILLCHAR_006E.A+1
  4306 29F7 20 A0 11			jsr SYSTEM.FILLCHAR_006E
  4307
  4308 				; optimize OK (init.inc), line = 8
  4309
  4310 29FA A9 27			lda #$27
  4311 29FC 85 58			sta T0B
  4312
  4313 29FE			l_0F9A
  4314 				; --- ForToDoCondition
  4315
  4316 				; optimize OK (init.inc), line = 9
  4317
  4318 29FE A4 58			ldy T0B
  4319 2A00 A9 A0			lda #$A0
  4320 2A02 99 00 0C			sta $0C00,y
  4321
  4322 				; optimize OK (init.inc), line = 10
  4323
  4324 2A05 99 C0 0F			sta $0FC0,y
  4325
  4326 				; optimize OK (init.inc), line = 11
  4327
  4328 2A08 A9 41			lda #$41
  4329 2A0A 99 00 08			sta $0800,y
  4330
  4331 				; optimize OK (init.inc), line = 12
  4332
  4333 2A0D 99 C0 0B			sta $0BC0,y
  4334
  4335 				; --- ForToDoEpilog
  4336 2A10 C6 58			dec T0B
  4337 2A12 10 EA			jpl l_0F9A
  4338 2A14			l_0FA8
  4339
  4340 				; optimize OK (init.inc), line = 15
  4341
  4342 2A14 A9 18			lda #$18
  4343 2A16 85 58			sta T0B
  4344
  4345 2A18			l_0FDA
  4346 				; --- ForToDoCondition
  4347 2A18 A5 58			lda T0B
  4348 2A1A C9 01			cmp #$01
  4349 2A1C 90 3A			jcc l_0FE8
  4350
  4351 				; optimize OK (init.inc), line = 16
  4352
  4353 2A1E 0A				asl @
  4354 2A1F A8				tay
  4355 2A20 A9 FF			lda #$FF
  4356 2A22 18 79 26 10			add adr.MUL40,y
  4357 2A26 85 12			sta :bp2
  4358 2A28 A9 0B			lda #$0B
  4359 2A2A 79 27 10			adc adr.MUL40+1,y
  4360 2A2D 85 13			sta :bp2+1
  4361 2A2F A0 00			ldy #$00
  4362 2A31 A9 A0			lda #$A0
  4363 2A33 91 12			sta (:bp2),y
  4364 2A35 C8				iny
  4365 2A36 91 12			sta (:bp2),y
  4366
  4367 				; optimize OK (init.inc), line = 17
  4368
  4369 2A38 A5 58			lda T0B
  4370 2A3A 0A				asl @
  4371 2A3B A8				tay
  4372 2A3C A9 FF			lda #$FF
  4373 2A3E 18 79 26 10			add adr.MUL40,y
  4374 2A42 85 12			sta :bp2
  4375 2A44 A9 07			lda #$07
  4376 2A46 79 27 10			adc adr.MUL40+1,y
  4377 2A49 85 13			sta :bp2+1
  4378 2A4B A0 00			ldy #$00
  4379 2A4D A9 41			lda #$41
  4380 2A4F 91 12			sta (:bp2),y
  4381 2A51 C8				iny
  4382 2A52 91 12			sta (:bp2),y
  4383
  4384 				; --- ForToDoEpilog
  4385 2A54 C6 58			dec T0B
  4386 2A56 10 C0			jpl l_0FDA
  4387 2A58			l_0FE8
  4388
  4389 				; optimize OK (init.inc), line = 20
  4390
  4391 2A58 A9 07			lda #$07
  4392 2A5A 85 59			sta I0B
  4393
  4394 2A5C			l_100C
  4395 				; --- ForToDoCondition
  4396 2A5C A5 59			lda I0B
  4397 2A5E 0A				asl @
  4398 2A5F A8				tay
  4399 2A60 A9 5E			lda #$5E
  4400 2A62 99 60 00			sta adr.OBSTACLES,y
  4401 2A65 A9 00			lda #$00
  4402 2A67 99 61 00			sta adr.OBSTACLES+1,y
  4403
  4404 				; --- ForToDoEpilog
  4405 2A6A C6 59			dec I0B
  4406 2A6C 10 EE			jpl l_100C
  4407 2A6E			l_101A
  4408
  4409 				; ------------------------------------------------------------
  4410
  4411 = 0000			@FORTMP_0F97	= $00
  4412 = 0001			@FORTMP_0FD7	= $01
  4413 = 0000			@FORTMP_1009	= $00
  4414 2A6E			@exit
  4415 					.ifdef @new
  4416 					lda <@VarData
  4417 					sta :ztmp
  4418 					lda >@VarData
  4419 					ldy #@VarDataSize-1
  4420 					jmp @FreeMem
  4421 					els
  4422 2A6E 60				rts						; ret
  4423 					eif
  4424 				.endl
  4425
  4426 2A6F			.local	INITPLAYERS					; PROCEDURE
  4427
  4428 				; optimize OK (init.inc), line = 27
  4429
  4430 2A6F A9 FF			lda #$FF
  4431 2A71 85 5A			sta ALIVE
  4432
  4433 				; optimize OK (init.inc), line = 28
  4434
  4435 2A73 A9 00			lda #$00
  4436 2A75 8D 7D 2C			sta PLAYER1.ISALIVE
  4437 2A78 8D 85 2C			sta PLAYER2.ISALIVE
  4438
  4439 				; optimize OK (init.inc), line = 29
  4440
  4441 2A7B 8D 8D 2C			sta PLAYER3.ISALIVE
  4442 2A7E 8D 95 2C			sta PLAYER4.ISALIVE
  4443 2A81			@exit
  4444 					.ifdef @new
  4445 					lda <@VarData
  4446 					sta :ztmp
  4447 					lda >@VarData
  4448 					ldy #@VarDataSize-1
  4449 					jmp @FreeMem
  4450 					els
  4451 2A81 60				rts						; ret
  4452 					eif
  4453 				.endl
  4454
  4455 2A82			.local	INITSCORE					; PROCEDURE
  4456
  4457 				; optimize OK (init.inc), line = 36
  4458
  4459 2A82 A9 30			lda #$30
  4460 2A84 8D 7C 2C			sta PLAYER1.SCORE
  4461 2A87 8D 84 2C			sta PLAYER2.SCORE
  4462
  4463 				; optimize OK (init.inc), line = 37
  4464
  4465 2A8A 8D 8C 2C			sta PLAYER3.SCORE
  4466 2A8D 8D 94 2C			sta PLAYER4.SCORE
  4467 2A90			@exit
  4468 					.ifdef @new
  4469 					lda <@VarData
  4470 					sta :ztmp
  4471 					lda >@VarData
  4472 					ldy #@VarDataSize-1
  4473 					jmp @FreeMem
  4474 					els
  4475 2A90 60				rts						; ret
  4476 					eif
  4477 				.endl
  4478
  4479 2A91			.local	INITARENA					; PROCEDURE
  4480
  4481 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  4482
  4483 2A91 20 D9 29			jsr INITPLAYFIELD
  4484 2A94 20 6F 2A			jsr INITPLAYERS
  4485
  4486 				; optimize OK (init.inc), line = 46
  4487
  4488 2A97 AD 74 2C			lda LEVEL
  4489 2A9A 8D BA 30			sta @CASETMP_0009
  4490 2A9D C9 00			cmp #$00
  4491 2A9F D0 06			jne l_1063
  4492 2AA1			@
  4493
  4494 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  4495
  4496 2AA1 20 C8 1C			jsr SETLEVEL00
  4497 2AA4 4C F4 2A			jmp a_0009
  4498 2AA7			l_1063
  4499 2AA7 C9 01			cmp #$01
  4500 2AA9 D0 06			jne l_106D
  4501 2AAB			@
  4502
  4503 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4504
  4505 2AAB 20 EF 1D			jsr SETLEVEL01
  4506 2AAE 4C F4 2A			jmp a_0009
  4507 2AB1			l_106D
  4508 2AB1 C9 02			cmp #$02
  4509 2AB3 D0 06			jne l_1077
  4510 2AB5			@
  4511
  4512 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4513
  4514 2AB5 20 16 1F			jsr SETLEVEL02
  4515 2AB8 4C F4 2A			jmp a_0009
  4516 2ABB			l_1077
  4517 2ABB C9 03			cmp #$03
  4518 2ABD D0 06			jne l_1081
  4519 2ABF			@
  4520
  4521 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4522
  4523 2ABF 20 3D 20			jsr SETLEVEL03
  4524 2AC2 4C F4 2A			jmp a_0009
  4525 2AC5			l_1081
  4526 2AC5 C9 04			cmp #$04
  4527 2AC7 D0 06			jne l_108B
  4528 2AC9			@
  4529
  4530 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4531
  4532 2AC9 20 86 21			jsr SETLEVEL04
  4533 2ACC 4C F4 2A			jmp a_0009
  4534 2ACF			l_108B
  4535 2ACF C9 05			cmp #$05
  4536 2AD1 D0 06			jne l_1095
  4537 2AD3			@
  4538
  4539 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4540
  4541 2AD3 20 F1 22			jsr SETLEVEL05
  4542 2AD6 4C F4 2A			jmp a_0009
  4543 2AD9			l_1095
  4544 2AD9 C9 06			cmp #$06
  4545 2ADB D0 06			jne l_109F
  4546 2ADD			@
  4547
  4548 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4549
  4550 2ADD 20 92 24			jsr SETLEVEL06
  4551 2AE0 4C F4 2A			jmp a_0009
  4552 2AE3			l_109F
  4553 2AE3 C9 07			cmp #$07
  4554 2AE5 D0 06			jne l_10A9
  4555 2AE7			@
  4556
  4557 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4558
  4559 2AE7 20 53 26			jsr SETLEVEL07
  4560 2AEA 4C F4 2A			jmp a_0009
  4561 2AED			l_10A9
  4562 2AED C9 08			cmp #$08
  4563 2AEF D0 03			jne l_10B3
  4564 2AF1			@
  4565
  4566 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4567
  4568 2AF1 20 18 28			jsr SETLEVEL08
  4569 2AF4			l_10B3
  4570 2AF4			a_0009
  4571
  4572 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4573
  4574 2AF4 20 53 14			jsr SAVEOBSTACLES
  4575 2AF7 20 FB 13			jsr ANIMATEOBSTACLES
  4576 2AFA 20 CC 12			jsr SHOWSCORE
  4577
  4578 				; ------------------------------------------------------------
  4579
  4580 = 30BA			@CASETMP_0009	= DATAORIGIN+$0456
  4581
  4582 = 30BA			@VarData	= @CASETMP_0009
  4583 = 0001			@VarDataSize	= 1
  4584
  4585 2AFD			@exit
  4586 					.ifdef @new
  4587 					lda <@VarData
  4588 					sta :ztmp
  4589 					lda >@VarData
  4590 					ldy #@VarDataSize-1
  4591 					jmp @FreeMem
  4592 					els
  4593 2AFD 60				rts						; ret
  4594 					eif
  4595 				.endl
  4596
  4597 2AFE			.local	INITFONTS					; PROCEDURE
  4598
  4599 				; optimize OK (init.inc), line = 73
  4600
  4601 2AFE A9 00			lda #$00
  4602 2B00 85 04			sta SYSTEM.MOVE_006F.COUNT
  4603 2B02 A9 04			lda #$04
  4604 2B04 85 05			sta SYSTEM.MOVE_006F.COUNT+1
  4605 2B06 A9 00			lda #$00
  4606 2B08 85 0C			sta SYSTEM.MOVE_006F.DEST
  4607 2B0A A9 60			lda #$60
  4608 2B0C 85 0D			sta SYSTEM.MOVE_006F.DEST+1
  4609 2B0E A9 00			lda #$00
  4610 2B10 85 08			sta SYSTEM.MOVE_006F.SOURCE
  4611 2B12 A9 D0			lda #$D0
  4612 2B14 85 09			sta SYSTEM.MOVE_006F.SOURCE+1
  4613 2B16 20 A4 11			jsr SYSTEM.MOVE_006F
  4614
  4615 				; optimize OK (init.inc), line = 74
  4616
  4617 2B19 AD 46 2B			lda FONTS
  4618 2B1C 85 12			sta :bp2
  4619 2B1E AD 47 2B			lda FONTS+1
  4620 2B21 85 13			sta :bp2+1
  4621 2B23 A0 2F			ldy #$2F
  4622 2B25 B1 12 99 80 62 88 + 	mva:rpl (:bp2),y $6280,y-
  4623
  4624 				; optimize OK (init.inc), line = 77
  4625
  4626 2B2D AD 12 FF			lda RAMROMSEL
  4627 2B30 29 FB			and #$FB
  4628 2B32 8D 12 FF			sta RAMROMSEL
  4629
  4630 				; optimize OK (init.inc), line = 80
  4631
  4632 2B35 AD 13 FF			lda CHBAS
  4633 2B38 29 03			and #$03
  4634 2B3A 85 21			sta :STACKORIGIN+9
  4635 2B3C A9 18			lda #$18
  4636 2B3E 0A				asl @
  4637 2B3F 0A				asl @
  4638 2B40 05 21			ora :STACKORIGIN+9
  4639 2B42 8D 13 FF			sta CHBAS
  4640
  4641 				; ------------------------------------------------------------
  4642
  4643 = 30BB			adr.FONTS	= [DATAORIGIN+$0457] .array [48]
  4644 2B45			.var FONTS	= adr.FONTS .word
  4645
  4646 = 2B46			@VarData	= FONTS
  4647 = 0030			@VarDataSize	= 48
  4648
  4649 2B45			@exit
  4650 					.ifdef @new
  4651 					lda <@VarData
  4652 					sta :ztmp
  4653 					lda >@VarData
  4654 					ldy #@VarDataSize-1
  4655 					jmp @FreeMem
  4656 					els
  4657 2B45 60				rts						; ret
  4658 					eif
  4659 = 2B46 BB 30		FONTS
  4659 				.endl
  4660
  4661 2B48			.local	PLAYERMOVE					; PROCEDURE
  4662
  4663 				; optimize OK (main.pas), line = 15
  4664
  4665 2B48 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  4666 2B52 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4667 2B54 B1 12			lda (:bp2),y
  4668 2B56 F0 50			jeq l_10FD
  4669
  4670 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17
  4671
  4672 2B58 20 66 13			jsr CHECKAVAILDIR
  4673
  4674 				; optimize OK (main.pas), line = 18
  4675
  4676 2B5B A5 5C			lda AVAILDIR
  4677 2B5D D0 06			jne l_1111
  4678
  4679 				; optimize FAIL ('PLAYERBUSTED', main.pas), line = 19
  4680
  4681 2B5F 20 07 16			jsr PLAYERBUSTED
  4682 2B62 4C A8 2B			jmp l_111C
  4683 2B65			l_1111
  4684
  4685 				; optimize OK (main.pas), line = 21
  4686
  4687 2B65 AC 53 2C 84 12 AC + 	mwy PLY :bp2
  4688 2B6F A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4689 2B71 B1 12			lda (:bp2),y
  4690 2B73 8D EB 30			sta @CASETMP_000A
  4691 2B76 C9 00			cmp #$00
  4692 2B78 D0 06			jne l_1127
  4693 2B7A			@
  4694
  4695 				; optimize FAIL ('HUMAN', main.pas), line = 22
  4696
  4697 2B7A 20 2C 18			jsr HUMAN
  4698 2B7D 4C A5 2B			jmp a_000A
  4699 2B80			l_1127
  4700 2B80 C9 01			cmp #$01
  4701 2B82 D0 06			jne l_1131
  4702 2B84			@
  4703
  4704 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 23
  4705
  4706 2B84 20 CE 18			jsr AISTRAIGHT
  4707 2B87 4C A5 2B			jmp a_000A
  4708 2B8A			l_1131
  4709 2B8A C9 02			cmp #$02
  4710 2B8C D0 06			jne l_113B
  4711 2B8E			@
  4712
  4713 				; optimize FAIL ('AISAPPER', main.pas), line = 24
  4714
  4715 2B8E 20 4B 19			jsr AISAPPER
  4716 2B91 4C A5 2B			jmp a_000A
  4717 2B94			l_113B
  4718 2B94 C9 03			cmp #$03
  4719 2B96 D0 06			jne l_1145
  4720 2B98			@
  4721
  4722 				; optimize FAIL ('AIBULLY', main.pas), line = 25
  4723
  4724 2B98 20 A5 1B			jsr AIBULLY
  4725 2B9B 4C A5 2B			jmp a_000A
  4726 2B9E			l_1145
  4727 2B9E C9 04			cmp #$04
  4728 2BA0 D0 03			jne l_114F
  4729 2BA2			@
  4730
  4731 				; optimize FAIL ('AIMIRROR', main.pas), line = 26
  4732
  4733 2BA2 20 73 1C			jsr AIMIRROR
  4734 2BA5			l_114F
  4735 2BA5			a_000A
  4736
  4737 				; optimize FAIL ('DRAWPLAYER', main.pas), line = 29
  4738
  4739 2BA5 20 97 14			jsr DRAWPLAYER
  4740 2BA8			l_111C
  4741 2BA8			l_10FD
  4742
  4743 				; ------------------------------------------------------------
  4744
  4745 = 30EB			@CASETMP_000A	= DATAORIGIN+$0487
  4746
  4747 = 30EB			@VarData	= @CASETMP_000A
  4748 = 0001			@VarDataSize	= 1
  4749
  4750 2BA8			@exit
  4751 					.ifdef @new
  4752 					lda <@VarData
  4753 					sta :ztmp
  4754 					lda >@VarData
  4755 					ldy #@VarDataSize-1
  4756 					jmp @FreeMem
  4757 					els
  4758 2BA8 60				rts						; ret
  4759 					eif
  4760 				.endl
  4761
  4762 2BA9			.local	MAINLOOP					; PROCEDURE
  4763
  4764 				; optimize FAIL ('INITARENA', main.pas), line = 39
  4765
  4766 2BA9 20 91 2A			jsr INITARENA
  4767 2BAC 20 F5 16			jsr STARTSCREEN
  4768
  4769 				; --- RepeatUntilProlog
  4770 2BAF			l_1163
  4771
  4772 				; optimize FAIL ('SYSTEM.PAUSE_0085', main.pas), line = 42
  4773
  4774 2BAF 20 AC 11			jsr SYSTEM.PAUSE_0085
  4775 2BB2 AD 59 2C			lda PLAYER1
  4776 2BB5 8D 53 2C			sta PLY
  4777 2BB8 AD 5A 2C			lda PLAYER1+1
  4778 2BBB 8D 54 2C			sta PLY+1
  4779 2BBE 20 48 2B			jsr PLAYERMOVE
  4780
  4781 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44
  4782
  4783 2BC1 20 FB 13			jsr ANIMATEOBSTACLES
  4784
  4785 				; optimize OK (main.pas), line = 46
  4786
  4787 2BC4 A9 02			lda #$02
  4788 2BC6 8D 70 2C			sta SYSTEM.PAUSE_0086.N
  4789 2BC9 A9 00			lda #$00
  4790 2BCB 8D 71 2C			sta SYSTEM.PAUSE_0086.N+1
  4791 2BCE 20 B3 11			jsr SYSTEM.PAUSE_0086
  4792
  4793 				; optimize OK (main.pas), line = 47
  4794
  4795 2BD1 AD 5B 2C			lda PLAYER2
  4796 2BD4 8D 53 2C			sta PLY
  4797 2BD7 AD 5C 2C			lda PLAYER2+1
  4798 2BDA 8D 54 2C			sta PLY+1
  4799 2BDD 20 48 2B			jsr PLAYERMOVE
  4800
  4801 				; optimize OK (main.pas), line = 48
  4802
  4803 2BE0 AD 5D 2C			lda PLAYER3
  4804 2BE3 8D 53 2C			sta PLY
  4805 2BE6 AD 5E 2C			lda PLAYER3+1
  4806 2BE9 8D 54 2C			sta PLY+1
  4807 2BEC 20 48 2B			jsr PLAYERMOVE
  4808
  4809 				; optimize OK (main.pas), line = 49
  4810
  4811 2BEF AD 5F 2C			lda PLAYER4
  4812 2BF2 8D 53 2C			sta PLY
  4813 2BF5 AD 60 2C			lda PLAYER4+1
  4814 2BF8 8D 54 2C			sta PLY+1
  4815 2BFB 20 48 2B			jsr PLAYERMOVE
  4816
  4817 				; optimize FAIL ('ISONELEFT', main.pas), line = 50
  4818
  4819 2BFE 20 0D 18			jsr ISONELEFT
  4820 2C01 CA				dex
  4821 2C02 B5 19			lda :STACKORIGIN+1,x
  4822 2C04 F0 A9			jeq l_1163
  4823
  4824 				; optimize FAIL ('UPDATESCORE', main.pas), line = 52
  4825
  4826 2C06 20 45 13			jsr UPDATESCORE
  4827 2C09 A9 64			lda #$64
  4828 2C0B 8D 70 2C			sta SYSTEM.PAUSE_0086.N
  4829 2C0E A9 00			lda #$00
  4830 2C10 8D 71 2C			sta SYSTEM.PAUSE_0086.N+1
  4831 2C13 20 B3 11			jsr SYSTEM.PAUSE_0086
  4832 2C16 20 E5 16			jsr NEXTLEVEL
  4833 2C19			@exit
  4834 					.ifdef @new
  4835 					lda <@VarData
  4836 					sta :ztmp
  4837 					lda >@VarData
  4838 					ldy #@VarDataSize-1
  4839 					jmp @FreeMem
  4840 					els
  4841 2C19 60				rts						; ret
  4842 					eif
  4843 				.endl
  4844 2C1A			l_001F
  4845
  4846 				; optimize FAIL ('INITFONTS', main.pas), line = 58
  4847
  4848 2C1A 20 FE 2A			jsr INITFONTS
  4849
  4850 				; --- RepeatUntilProlog
  4851 2C1D			l_118B
  4852
  4853 				; optimize FAIL ('INITSCORE', main.pas), line = 61
  4854
  4855 2C1D 20 82 2A			jsr INITSCORE
  4856 2C20 A9 00			lda #$00
  4857 2C22 8D 75 2C			sta GAMEOVER
  4858 2C25 A9 01			lda #$01
  4859 2C27 8D 74 2C			sta LEVEL
  4860
  4861 				; --- RepeatUntilProlog
  4862 2C2A			l_1195
  4863
  4864 				; optimize FAIL ('MAINLOOP', main.pas), line = 63
  4865
  4866 2C2A 20 A9 2B			jsr MAINLOOP
  4867 2C2D 20 D0 17			jsr ISGAMEOVER
  4868 2C30 CA				dex
  4869 2C31 B5 19			lda :STACKORIGIN+1,x
  4870 2C33 F0 F5			jeq l_1195
  4871
  4872 				; optimize FAIL ('SHOWSCORE', main.pas), line = 65
  4873
  4874 2C35 20 CC 12			jsr SHOWSCORE
  4875 2C38 20 87 17			jsr ENDSCREEN
  4876 2C3B A9 C8			lda #$C8
  4877 2C3D 8D 70 2C			sta SYSTEM.PAUSE_0086.N
  4878 2C40 A9 00			lda #$00
  4879 2C42 8D 71 2C			sta SYSTEM.PAUSE_0086.N+1
  4880 2C45 20 B3 11			jsr SYSTEM.PAUSE_0086
  4881
  4882 				; optimize OK (main.pas), line = 66
  4883
  4884 2C48 4C 1D 2C			jmp l_118B
  4885
  4886 				; ------------------------------------------------------------
  4887
  4888 = 0800			ATTRIBUTE_ADDR	= $0800
  4889 = 0C00			SCREEN_ADDR	= $0C00
  4890 = 0400			OFFSET	= $0400
  4891 = 001F			BACKGROUND_COLOUR	= $1F
  4892 = 0000			BOREDER_COLOUR	= $00
  4893 = 0007			OBST_QUANTITY	= $07
  4894 = 0009			VICTORIES	= $09
  4895 = 005E			TRASH	= $5E
  4896 = 0005			LOOK_AHEAD	= $05
  4897 = 0020			EMPTY	= $20
  4898 = 00A0			WALL	= $A0
  4899 = 0041			WALL_COLOUR	= $41
  4900 = 0030			ZERO	= $30
  4901 = 0054			OBSTACLE_1	= $54
  4902 = 0055			OBSTACLE_2	= $55
  4903 = 0065			OBST_COLOUR	= $65
  4904 = 0050			PLY_HEAD_UP	= $50
  4905 = 0051			PLY_HEAD_LEFT	= $51
  4906 = 0052			PLY_HEAD_RIGHT	= $52
  4907 = 0053			PLY_HEAD_DOWN	= $53
  4908 = 002A			PLY_CRASH	= $2A
  4909 = 0057			PLY_BUSTED	= $57
  4910 = 0042			PLY_TAIL_UD	= $42
  4911 = 0040			PLY_TAIL_LR	= $40
  4912 = 007D			PLY_TAIL_RD	= $7D
  4913 = 006E			PLY_TAIL_RU	= $6E
  4914 = 006D			PLY_TAIL_LD	= $6D
  4915 = 0070			PLY_TAIL_LU	= $70
  4916 = 0062			PLY1_COLOUR	= $62
  4917 = 005D			PLY2_COLOUR	= $5D
  4918 = 0071			PLY3_COLOUR	= $71
  4919 = 0055			PLY4_COLOUR	= $55
  4920 = 0000			PLY_CTRL	= $00
  4921 = 0001			AI_STRAIGHT	= $01
  4922 = 0002			AI_SAPPER	= $02
  4923 = 0003			AI_BULLY	= $03
  4924 = 0004			AI_MIRROR	= $04
  4925 = 0001			JOY_UP	= $01
  4926 = 0002			JOY_DOWN	= $02
  4927 = 0004			JOY_LEFT	= $04
  4928 = 0008			JOY_RIGHT	= $08
  4929 = 0040			JOY_FIRE	= $40
  4930 = 0002			JOY_SELECT_1	= $02
  4931 = 0004			JOY_SELECT_2	= $04
  4932 = 1026			adr.MUL40	= CODEORIGIN+$0018
  4933 2C4B			.var MUL40	= adr.MUL40 .word
  4934 = 1058			adr.DIRECTION	= CODEORIGIN+$004A
  4935 2C4B			.var DIRECTION	= adr.DIRECTION .word
  4936 = FD30			KEYSCAN	= $FD30
  4937 = FF08			JOY	= $FF08
  4938 = FF12			RAMROMSEL	= $FF12
  4939 = FF13			CHBAS	= $FF13
  4940 = FF15			BACKGROUND	= $FF15
  4941 = FF19			BOREDER	= $FF19
  4942 = 0058			T0B	= $58
  4943 = 0059			I0B	= $59
  4944 = 005A			ALIVE	= $5A
  4945 = 005B			NEWDIR	= $5B
  4946 = 005C			AVAILDIR	= $5C
  4947 = 005D			JOYSTATUS	= $5D
  4948 = 005E			T0W	= $5E
  4949 = 0070			adr.PLY	= $70
  4950 2C4B			.var PLY	= adr.PLY .word
  4951 = 2C64			PLY.X	= DATAORIGIN+$0000
  4952 = 2C65			PLY.Y	= DATAORIGIN+$0001
  4953 = 2C66			PLY.HEAD	= DATAORIGIN+$0002
  4954 = 2C67			PLY.COLOUR	= DATAORIGIN+$0003
  4955 = 2C68			PLY.DIR	= DATAORIGIN+$0004
  4956 = 2C69			PLY.BRAIN	= DATAORIGIN+$0005
  4957 = 2C6A			PLY.SCORE	= DATAORIGIN+$0006
  4958 = 2C6B			PLY.ISALIVE	= DATAORIGIN+$0007
  4959 = 0072			adr.TMPPLY	= $72
  4960 2C4B			.var TMPPLY	= adr.TMPPLY .word
  4961 = 2C64			TMPPLY.X	= DATAORIGIN+$0000
  4962 = 2C65			TMPPLY.Y	= DATAORIGIN+$0001
  4963 = 2C66			TMPPLY.HEAD	= DATAORIGIN+$0002
  4964 = 2C67			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4965 = 2C68			TMPPLY.DIR	= DATAORIGIN+$0004
  4966 = 2C69			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4967 = 2C6A			TMPPLY.SCORE	= DATAORIGIN+$0006
  4968 = 2C6B			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4969 = 0060			adr.OBSTACLES	= $60
  4970 2C4B			.var OBSTACLES	= adr.OBSTACLES .word
  4971 = 2C74			LEVEL	= DATAORIGIN+$0010
  4972 = 2C75			GAMEOVER	= DATAORIGIN+$0011
  4973 = 2C76			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4974 2C4B			.var PLAYER1	= adr.PLAYER1 .word
  4975 = 2C76			PLAYER1.X	= DATAORIGIN+$0012
  4976 = 2C77			PLAYER1.Y	= DATAORIGIN+$0013
  4977 = 2C78			PLAYER1.HEAD	= DATAORIGIN+$0014
  4978 = 2C79			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4979 = 2C7A			PLAYER1.DIR	= DATAORIGIN+$0016
  4980 = 2C7B			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4981 = 2C7C			PLAYER1.SCORE	= DATAORIGIN+$0018
  4982 = 2C7D			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4983 = 2C7E			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4984 2C4B			.var PLAYER2	= adr.PLAYER2 .word
  4985 = 2C7E			PLAYER2.X	= DATAORIGIN+$001A
  4986 = 2C7F			PLAYER2.Y	= DATAORIGIN+$001B
  4987 = 2C80			PLAYER2.HEAD	= DATAORIGIN+$001C
  4988 = 2C81			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4989 = 2C82			PLAYER2.DIR	= DATAORIGIN+$001E
  4990 = 2C83			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4991 = 2C84			PLAYER2.SCORE	= DATAORIGIN+$0020
  4992 = 2C85			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4993 = 2C86			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4994 2C4B			.var PLAYER3	= adr.PLAYER3 .word
  4995 = 2C86			PLAYER3.X	= DATAORIGIN+$0022
  4996 = 2C87			PLAYER3.Y	= DATAORIGIN+$0023
  4997 = 2C88			PLAYER3.HEAD	= DATAORIGIN+$0024
  4998 = 2C89			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4999 = 2C8A			PLAYER3.DIR	= DATAORIGIN+$0026
  5000 = 2C8B			PLAYER3.BRAIN	= DATAORIGIN+$0027
  5001 = 2C8C			PLAYER3.SCORE	= DATAORIGIN+$0028
  5002 = 2C8D			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  5003 = 2C8E			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  5004 2C4B			.var PLAYER4	= adr.PLAYER4 .word
  5005 = 2C8E			PLAYER4.X	= DATAORIGIN+$002A
  5006 = 2C8F			PLAYER4.Y	= DATAORIGIN+$002B
  5007 = 2C90			PLAYER4.HEAD	= DATAORIGIN+$002C
  5008 = 2C91			PLAYER4.COLOUR	= DATAORIGIN+$002D
  5009 = 2C92			PLAYER4.DIR	= DATAORIGIN+$002E
  5010 = 2C93			PLAYER4.BRAIN	= DATAORIGIN+$002F
  5011 = 2C94			PLAYER4.SCORE	= DATAORIGIN+$0030
  5012 = 2C95			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  5013 2C4B			@exit
  5014
  5015 2C4B A2 00		@halt	ldx #$00
  5016 2C4D 9A				txs
  5017
  5018 2C4E 60				rts
  5019
  5020 				; ------------------------------------------------------------
  5021
  5022 				; ------------------------------------------------------------
  5023
  5024 2C4F			.local	@DEFINES
  5025 2C4F			C4P
  5026 				.endl
  5027
  5028 2C4F			.local	@RESOURCE
  5029 				.endl
  5030
  5031 = 2C4F 26 10		MUL40
  5031 = 2C51 58 10		DIRECTION
  5031 = 2C53 70 00		PLY
  5031 = 2C55 72 00		TMPPLY
  5031 = 2C57 60 00		OBSTACLES
  5031 = 2C59 76 2C		PLAYER1
  5031 = 2C5B 7E 2C		PLAYER2
  5031 = 2C5D 86 2C		PLAYER3
  5031 = 2C5F 8E 2C		PLAYER4
  5031 				.endl							; MAIN
  5032
  5033 				; ------------------------------------------------------------
  5034 				; ------------------------------------------------------------
  5035
  5036 				.macro	UNITINITIALIZATION
  5037 				
  5038 					.ifdef MAIN.SYSTEM.@UnitInit
  5039 					jsr MAIN.SYSTEM.@UnitInit
  5040 					eif
  5041 				.endm
  5042
  5043 				; ------------------------------------------------------------
  5044
  5045 					ift .SIZEOF(MAIN.SYSTEM) > 0
  5046 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  5046 				SYSTEM: $1156..$1200
  5047 					eif
  5048
  5049 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  5049 				CODE: $100E..$2C4E
  5050
  5051 				; ------------------------------------------------------------
  5052
  5053 2C61				.align $04
  5054
  5055 2C64			DATAORIGIN
  5056 2C64 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5057 2C7C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5058 2C94 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5059 2CAC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5060 2CC4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5061 2CDC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5062 2CF4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5063 2D0C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5064 2D24 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5065 2D3C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5066 2D54 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5067 2D6C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5068 2D84 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5069 2D9C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $05 $06 $09 $12
  5070 2DB4 05 21 00 00 00 00 + .by  $05 $21 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5071 2DCC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5072 2DE4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5073 2DFC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5074 2E14 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5075 2E2C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5076 2E44 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5077 2E5C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5078 2E74 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5079 2E8C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5080 2EA4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $07 $17 $09 $0E  $0E $05 $12 $21 $00 $00 $00 $00
  5081 2EBC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5082 2ED4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5083 2EEC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5084 2F04 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5085 2F1C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5086 2F34 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5087 2F4C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5088 2F64 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5089 2F7C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5090 2F94 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5091 2FAC 00 00 00 00 06 0C + .by  $00 $00 $00 $00 $06 $0C $0F $13  $05 $12 $21 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5092 2FC4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5093 2FDC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5094 2FF4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5095 300C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5096 3024 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5097 303C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5098 3054 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5099 306C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5100 3084 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5101 309C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5102 30B4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $18  $18 $24 $24 $24 $3C $66 $5A $00  $03 $3E $C5 $C5 $3E $03 $00 $00
  5103 30CC C0 7C A3 A3 7C C0 + .by  $C0 $7C $A3 $A3 $7C $C0 $00 $5A  $66 $3C $24 $24 $24 $18 $18 $00  $3C $6E $62 $46 $76 $3C $00 $00
  5104 30E4 3C 76 46 62 6E 3C	.by  $3C $76 $46 $62 $6E $3C
  5105
  5106 = 0486			VARINITSIZE	= *-DATAORIGIN
  5107 = 0488			VARDATASIZE	= 1160
  5108
  5109 = 30EC			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  5110
  5111 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  5111 				DATA: $2C64..$30EC
  5112
  5113 				; ------------------------------------------------------------
  5114
  5115 				.macro	STATICDATA
  5116 				.by  $05 $06 $09 $12 $05 $21 $00 $07  $17 $09 $0E $0E $05 $12 $21 $00  $06 $0C $0F $13 $05 $12 $21 $00
  5117 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  5118 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  5119 				.by  $C0 $03 $01 $02 $04 $08
  5120 				.endm
  5121
  5122 					end
