mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 94 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0060			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2AB2			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A0			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 12 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 12 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 2C 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D B7 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD B7 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2AB7			RESULT	= DATAORIGIN+$000B
   182
   183 = 2AB7			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD B8 2A		loop  lda n
   325 112D 0D B9 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD B8 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2AB8			N	= DATAORIGIN+$000C
   339
   340 = 2AB8			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D BA 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD BA 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C BB 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD BB 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2ABA			RANGE	= DATAORIGIN+$000E
   401 = 2ABB			RESULT	= DATAORIGIN+$000F
   402
   403 = 2ABA			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2AAC			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2AAE			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2AB0			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2AB1			FILEMODE	= DATAORIGIN+$0005
   468 = 2AB2			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2AB3			IORESULT	= DATAORIGIN+$0007
   470 = 2AB4			EOLN	= DATAORIGIN+$0008
   471 = 2AB5			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD EF 2A			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D EE 2A			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD F0 2A			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2AEE			X	= DATAORIGIN+$0042
   497 = 2AEF			Y	= DATAORIGIN+$0043
   498 = 2AF0			V	= DATAORIGIN+$0044
   499
   500 = 2AEE			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD F2 2A			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D F1 2A			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD F4 2A			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD F3 2A			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2AF1			X	= DATAORIGIN+$0045
   544 = 2AF2			Y	= DATAORIGIN+$0046
   545 = 2AF3			V	= DATAORIGIN+$0047
   546 = 2AF4			C	= DATAORIGIN+$0048
   547
   548 = 2AF1			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD F6 2A			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D F5 2A			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D F7 2A			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD F7 2A 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2AF5			X	= DATAORIGIN+$0049
   604 = 2AF6			Y	= DATAORIGIN+$004A
   605 = 2AF7			RESULT	= DATAORIGIN+$004B
   606
   607 = 2AF5			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD C1 2A			lda PLAYER1.COLOUR
   618 11EC 8D F4 2A			sta PUTCHAR_008E.C
   619 11EF AD C4 2A			lda PLAYER1.SCORE
   620 11F2 8D F3 2A			sta PUTCHAR_008E.V
   621 11F5 A9 00			lda #$00
   622 11F7 8D F2 2A			sta PUTCHAR_008E.Y
   623 11FA A9 1E			lda #$1E
   624 11FC 8D F1 2A			sta PUTCHAR_008E.X
   625 11FF 20 99 11			jsr PUTCHAR_008E
   626
   627 				; optimize OK (tools.inc), line = 29
   628
   629 1202 AD C9 2A			lda PLAYER2.COLOUR
   630 1205 8D F4 2A			sta PUTCHAR_008E.C
   631 1208 AD CC 2A			lda PLAYER2.SCORE
   632 120B 8D F3 2A			sta PUTCHAR_008E.V
   633 120E A9 00			lda #$00
   634 1210 8D F2 2A			sta PUTCHAR_008E.Y
   635 1213 A9 20			lda #$20
   636 1215 8D F1 2A			sta PUTCHAR_008E.X
   637 1218 20 99 11			jsr PUTCHAR_008E
   638
   639 				; optimize OK (tools.inc), line = 30
   640
   641 121B AD D1 2A			lda PLAYER3.COLOUR
   642 121E 8D F4 2A			sta PUTCHAR_008E.C
   643 1221 AD D4 2A			lda PLAYER3.SCORE
   644 1224 8D F3 2A			sta PUTCHAR_008E.V
   645 1227 A9 00			lda #$00
   646 1229 8D F2 2A			sta PUTCHAR_008E.Y
   647 122C A9 22			lda #$22
   648 122E 8D F1 2A			sta PUTCHAR_008E.X
   649 1231 20 99 11			jsr PUTCHAR_008E
   650
   651 				; optimize OK (tools.inc), line = 31
   652
   653 1234 AD D9 2A			lda PLAYER4.COLOUR
   654 1237 8D F4 2A			sta PUTCHAR_008E.C
   655 123A AD DC 2A			lda PLAYER4.SCORE
   656 123D 8D F3 2A			sta PUTCHAR_008E.V
   657 1240 A9 00			lda #$00
   658 1242 8D F2 2A			sta PUTCHAR_008E.Y
   659 1245 A9 24			lda #$24
   660 1247 8D F1 2A			sta PUTCHAR_008E.X
   661 124A 20 99 11			jsr PUTCHAR_008E
   662 124D			@exit
   663 					.ifdef @new
   664 					lda <@VarData
   665 					sta :ztmp
   666 					lda >@VarData
   667 					ldy #@VarDataSize-1
   668 					jmp @FreeMem
   669 					els
   670 124D 60				rts						; ret
   671 					eif
   672 				.endl
   673
   674 124E			.local	CHECKAVAILDIR					; PROCEDURE
   675
   676 				; optimize OK (tools.inc), line = 38
   677
   678 124E A9 00			lda #$00
   679 1250 85 5C			sta AVAILDIR
   680
   681 				; optimize OK (tools.inc), line = 39
   682
   683 1252 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
   684 125C A0 01			ldy #PLY.Y-DATAORIGIN
   685 125E B1 12			lda (:bp2),y
   686 1260 0A				asl @
   687 1261 A8				tay
   688 1262 A9 00			lda #$00
   689 1264 18 79 0E 10			add adr.MUL40,y
   690 1268 85 21			sta :STACKORIGIN+9
   691 126A A9 0C			lda #$0C
   692 126C 79 0F 10			adc adr.MUL40+1,y
   693 126F 85 31			sta :STACKORIGIN+STACKWIDTH+9
   694 1271 A0 00			ldy #PLY.X-DATAORIGIN
   695 1273 A5 21			lda :STACKORIGIN+9
   696 1275 18 71 12			add (:bp2),y
   697 1278 85 5D			sta T0W
   698 127A A5 31			lda :STACKORIGIN+STACKWIDTH+9
   699 127C 69 00			adc #$00
   700 127E 85 5E			sta T0W+1
   701
   702 				; optimize OK (tools.inc), line = 41
   703
   704 1280 A5 5D			lda T0W
   705 1282 38 E9 28			sub #$28
   706 1285 85 21			sta :STACKORIGIN+9
   707 1287 A5 5E			lda T0W+1
   708 1289 E9 00			sbc #$00
   709 128B 85 11			sta :bp+1
   710 128D A4 21			ldy :STACKORIGIN+9
   711 128F B1 10			lda (:bp),y
   712 1291 C9 20			cmp #$20
   713 1293 D0 06			jne l_012A
   714 1295 A5 5C			lda AVAILDIR
   715 1297 09 01			ora #$01
   716 1299 85 5C			sta AVAILDIR
   717 129B			l_012A
   718
   719 				; optimize OK (tools.inc), line = 42
   720
   721 129B A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   722 12A3 A0 28			ldy #$28
   723 12A5 B1 12			lda (:bp2),y
   724 12A7 C9 20			cmp #$20
   725 12A9 D0 06			jne l_014D
   726 12AB A5 5C			lda AVAILDIR
   727 12AD 09 02			ora #$02
   728 12AF 85 5C			sta AVAILDIR
   729 12B1			l_014D
   730
   731 				; optimize OK (tools.inc), line = 43
   732
   733 12B1 A5 5D			lda T0W
   734 12B3 38 E9 01			sub #$01
   735 12B6 85 21			sta :STACKORIGIN+9
   736 12B8 A5 5E			lda T0W+1
   737 12BA E9 00			sbc #$00
   738 12BC 85 11			sta :bp+1
   739 12BE A4 21			ldy :STACKORIGIN+9
   740 12C0 B1 10			lda (:bp),y
   741 12C2 C9 20			cmp #$20
   742 12C4 D0 06			jne l_0170
   743 12C6 A5 5C			lda AVAILDIR
   744 12C8 09 04			ora #$04
   745 12CA 85 5C			sta AVAILDIR
   746 12CC			l_0170
   747
   748 				; optimize OK (tools.inc), line = 44
   749
   750 12CC A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   751 12D4 A0 01			ldy #$01
   752 12D6 B1 12			lda (:bp2),y
   753 12D8 C9 20			cmp #$20
   754 12DA D0 06			jne l_0193
   755 12DC A5 5C			lda AVAILDIR
   756 12DE 09 08			ora #$08
   757 12E0 85 5C			sta AVAILDIR
   758 12E2			l_0193
   759 12E2			@exit
   760 					.ifdef @new
   761 					lda <@VarData
   762 					sta :ztmp
   763 					lda >@VarData
   764 					ldy #@VarDataSize-1
   765 					jmp @FreeMem
   766 					els
   767 12E2 60				rts						; ret
   768 					eif
   769 				.endl
   770
   771 12E3			.local	ANIMATEOBSTACLES				; PROCEDURE
   772
   773 				; optimize FAIL (0, tools.inc), line = 53
   774
   775 12E3 EE F8 2A			inc COUNTER
   776
   777 				; optimize OK (tools.inc), line = 54
   778
   779 12E6 AD F8 2A			lda COUNTER
   780 12E9 29 01			and #$01
   781 12EB F0 08			jeq l_01BE
   782 12ED A9 56			lda #$56
   783 12EF 8D F9 2A			sta OBST
   784 12F2 4C FA 12			jmp l_01CC
   785 12F5			l_01BE
   786 12F5 A9 5B			lda #$5B
   787 12F7 8D F9 2A			sta OBST
   788 12FA			l_01CC
   789
   790 				; optimize OK (tools.inc), line = 55
   791
   792 12FA A9 07			lda #$07
   793 12FC 85 59			sta I0B
   794
   795 12FE			l_01D9
   796 				; --- ForToDoCondition
   797 12FE A5 59			lda I0B
   798 1300 0A				asl @
   799 1301 A8				tay
   800 1302 B9 DE 2A			lda adr.OBSTACLES,y
   801 1305 85 21			sta :STACKORIGIN+9
   802 1307 B9 DF 2A			lda adr.OBSTACLES+1,y
   803 130A 85 11			sta :bp+1
   804 130C A4 21			ldy :STACKORIGIN+9
   805 130E AD F9 2A			lda OBST
   806 1311 91 10			sta (:bp),y
   807 1313 C6 59			dec I0B
   808 1315 10 E7			jpl l_01D9
   809 1317			l_01E7
   810
   811 				; ------------------------------------------------------------
   812
   813 = 2AF8			COUNTER	= DATAORIGIN+$004C
   814 = 2AF9			OBST	= DATAORIGIN+$004D
   815 = 0000			@FORTMP_01D6	= $00
   816
   817 = 2AF8			@VarData	= COUNTER
   818 = 0002			@VarDataSize	= 2
   819
   820 1317			@exit
   821 					.ifdef @new
   822 					lda <@VarData
   823 					sta :ztmp
   824 					lda >@VarData
   825 					ldy #@VarDataSize-1
   826 					jmp @FreeMem
   827 					els
   828 1317 60				rts						; ret
   829 					eif
   830 				.endl
   831
   832 1318			.local	CALCOBSTACLEADDR				; FUNCTION
   833
   834 				; optimize OK (tools.inc), line = 62
   835
   836 1318 AD FB 2A			lda Y
   837 131B 0A				asl @
   838 131C A8				tay
   839 131D AD FA 2A			lda X
   840 1320 18 79 0E 10			add adr.MUL40,y
   841 1324 8D FC 2A			sta RESULT
   842 1327 A9 0C			lda #$0C
   843 1329 79 0F 10			adc adr.MUL40+1,y
   844 132C 8D FD 2A			sta RESULT+1
   845 132F			@exit
   846
   847 				; ------------------------------------------------------------
   848
   849 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   850 				; as Pointer
   851
   852 132F E8				inx
   853 1330 AD FC 2A 95 18		mva RESULT :STACKORIGIN,x
   854 1335 AD FD 2A 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   855
   856 					.ifdef @new
   857 					lda <@VarData
   858 					sta :ztmp
   859 					lda >@VarData
   860 					ldy #@VarDataSize-1
   861 					jmp @FreeMem
   862 					eif
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2AFA			X	= DATAORIGIN+$004E
   867 = 2AFB			Y	= DATAORIGIN+$004F
   868 = 2AFC			RESULT	= DATAORIGIN+$0050
   869
   870 = 2AFA			@VarData	= X
   871 = 0004			@VarDataSize	= 4
   872
   873 133A 60				rts						; ret
   874 				.endl
   875
   876 133B			.local	SAVEOBSTACLES					; PROCEDURE
   877
   878 				; optimize OK (tools.inc), line = 69
   879
   880 133B A9 07			lda #$07
   881 133D 85 59			sta I0B
   882
   883 133F			l_021A
   884 				; --- ForToDoCondition
   885
   886 				; optimize OK (tools.inc), line = 70
   887
   888 133F A5 59			lda I0B
   889 1341 0A				asl @
   890 1342 A8				tay
   891 1343 B9 DF 2A			lda adr.OBSTACLES+1,y
   892 1346 C9 00			cmp #$00
   893 1348 D0 05			bne @+
   894 134A B9 DE 2A			lda adr.OBSTACLES,y
   895 134D C9 7E			cmp #$7E
   896 134F			@
   897 134F F0 29			jeq l_023C
   898
   899 				; optimize OK (tools.inc), line = 71
   900
   901 1351 B9 DE 2A			lda adr.OBSTACLES,y
   902 1354 85 21			sta :STACKORIGIN+9
   903 1356 B9 DF 2A			lda adr.OBSTACLES+1,y
   904 1359 85 11			sta :bp+1
   905 135B A4 21			ldy :STACKORIGIN+9
   906 135D A9 56			lda #$56
   907 135F 91 10			sta (:bp),y
   908
   909 				; optimize OK (tools.inc), line = 72
   910
   911 1361 A5 59			lda I0B
   912 1363 0A				asl @
   913 1364 A8				tay
   914 1365 B9 DE 2A			lda adr.OBSTACLES,y
   915 1368 38 E9 00			sub #$00
   916 136B 85 21			sta :STACKORIGIN+9
   917 136D B9 DF 2A			lda adr.OBSTACLES+1,y
   918 1370 E9 04			sbc #$04
   919 1372 85 11			sta :bp+1
   920 1374 A4 21			ldy :STACKORIGIN+9
   921 1376 A9 35			lda #$35
   922 1378 91 10			sta (:bp),y
   923 137A			l_023C
   924
   925 				; --- ForToDoEpilog
   926 137A C6 59			dec I0B
   927 137C 10 C1			jpl l_021A
   928 137E			l_0228
   929
   930 				; ------------------------------------------------------------
   931
   932 = 0000			@FORTMP_0217	= $00
   933 137E			@exit
   934 					.ifdef @new
   935 					lda <@VarData
   936 					sta :ztmp
   937 					lda >@VarData
   938 					ldy #@VarDataSize-1
   939 					jmp @FreeMem
   940 					els
   941 137E 60				rts						; ret
   942 					eif
   943 				.endl
   944
   945 137F			.local	DRAWTAIL					; PROCEDURE
   946
   947 				; optimize OK (tools.inc), line = 81
   948
   949 137F AC 9B 2A 84 12 AC + 	mwy PLY :bp2
   950 1389 A0 04			ldy #PLY.DIR-DATAORIGIN
   951 138B B1 12			lda (:bp2),y
   952 138D C5 5B			cmp NEWDIR
   953 138F D0 14			jne l_026E
   954
   955 				; optimize OK (tools.inc), line = 82
   956
   957 1391 A5 5B			lda NEWDIR
   958 1393 29 0C			and #$0C
   959 1395 F0 07			jeq l_0285
   960 1397 A9 40			lda #$40
   961 1399 85 58			sta T0B
   962 139B 4C A2 13			jmp l_0293
   963 139E			l_0285
   964 139E A9 42			lda #$42
   965 13A0 85 58			sta T0B
   966 13A2			l_0293
   967 13A2 4C 15 14			jmp l_02A0
   968 13A5			l_026E
   969
   970 				; optimize OK (tools.inc), line = 84
   971
   972 13A5 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
   973 13AF A0 04			ldy #PLY.DIR-DATAORIGIN
   974 13B1 B1 12			lda (:bp2),y
   975 13B3 29 0A			and #$0A
   976 13B5 F0 0A			jeq l_02C6
   977 13B7 A5 5B			lda NEWDIR
   978 13B9 29 05			and #$05
   979 13BB F0 04			jeq l_02C6
   980 13BD A9 7D			lda #$7D
   981 13BF 85 58			sta T0B
   982 13C1			l_02C6
   983
   984 				; optimize OK (tools.inc), line = 85
   985
   986 13C1 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
   987 13CB A0 04			ldy #PLY.DIR-DATAORIGIN
   988 13CD B1 12			lda (:bp2),y
   989 13CF 29 09			and #$09
   990 13D1 F0 0A			jeq l_02F3
   991 13D3 A5 5B			lda NEWDIR
   992 13D5 29 06			and #$06
   993 13D7 F0 04			jeq l_02F3
   994 13D9 A9 6E			lda #$6E
   995 13DB 85 58			sta T0B
   996 13DD			l_02F3
   997
   998 				; optimize OK (tools.inc), line = 86
   999
  1000 13DD AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1001 13E7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1002 13E9 B1 12			lda (:bp2),y
  1003 13EB 29 06			and #$06
  1004 13ED F0 0A			jeq l_0320
  1005 13EF A5 5B			lda NEWDIR
  1006 13F1 29 09			and #$09
  1007 13F3 F0 04			jeq l_0320
  1008 13F5 A9 6D			lda #$6D
  1009 13F7 85 58			sta T0B
  1010 13F9			l_0320
  1011
  1012 				; optimize OK (tools.inc), line = 87
  1013
  1014 13F9 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1015 1403 A0 04			ldy #PLY.DIR-DATAORIGIN
  1016 1405 B1 12			lda (:bp2),y
  1017 1407 29 05			and #$05
  1018 1409 F0 0A			jeq l_034D
  1019 140B A5 5B			lda NEWDIR
  1020 140D 29 0A			and #$0A
  1021 140F F0 04			jeq l_034D
  1022 1411 A9 70			lda #$70
  1023 1413 85 58			sta T0B
  1024 1415			l_034D
  1025 1415			l_02A0
  1026
  1027 				; optimize OK (tools.inc), line = 90
  1028
  1029 1415 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1030 141F A0 00			ldy #PLY.X-DATAORIGIN
  1031 1421 B1 12			lda (:bp2),y
  1032 1423 8D F5 2A			sta GETCHAR.X
  1033 1426 A0 01			ldy #PLY.Y-DATAORIGIN
  1034 1428 B1 12			lda (:bp2),y
  1035 142A 8D F6 2A			sta GETCHAR.Y
  1036 142D 20 C4 11			jsr GETCHAR
  1037 1430 CA				dex
  1038 1431 B5 19			lda :STACKORIGIN+1,x
  1039 1433 C9 2A			cmp #$2A
  1040 1435 F0 20			jeq l_036A
  1041 1437			@
  1042 1437 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1043 1441 A0 00			ldy #PLY.X-DATAORIGIN
  1044 1443 B1 12			lda (:bp2),y
  1045 1445 8D EE 2A			sta PUTCHAR_0072.X
  1046 1448 A0 01			ldy #PLY.Y-DATAORIGIN
  1047 144A B1 12			lda (:bp2),y
  1048 144C 8D EF 2A			sta PUTCHAR_0072.Y
  1049 144F A5 58			lda T0B
  1050 1451 8D F0 2A			sta PUTCHAR_0072.V
  1051 1454 20 78 11			jsr PUTCHAR_0072
  1052 1457			l_036A
  1053 1457			@exit
  1054 					.ifdef @new
  1055 					lda <@VarData
  1056 					sta :ztmp
  1057 					lda >@VarData
  1058 					ldy #@VarDataSize-1
  1059 					jmp @FreeMem
  1060 					els
  1061 1457 60				rts						; ret
  1062 					eif
  1063 				.endl
  1064
  1065 1458			.local	CHECKJOYSTATUS					; PROCEDURE
  1066
  1067 				; optimize OK (tools.inc), line = 97
  1068
  1069 1458 A9 02			lda #$02
  1070 145A 8D 08 FF			sta JOY
  1071 145D A9 FF			lda #$FF
  1072 145F 8D 30 FD			sta KEYSCAN
  1073
  1074 				; optimize OK (tools.inc), line = 98
  1075
  1076 1462 AD 08 FF			lda JOY
  1077 1465 49 FF			eor #$FF
  1078 1467 85 63			sta JOYSTATUS
  1079 1469			@exit
  1080 					.ifdef @new
  1081 					lda <@VarData
  1082 					sta :ztmp
  1083 					lda >@VarData
  1084 					ldy #@VarDataSize-1
  1085 					jmp @FreeMem
  1086 					els
  1087 1469 60				rts						; ret
  1088 					eif
  1089 				.endl
  1090
  1091 146A			.local	SETPLAYER					; PROCEDURE
  1092
  1093 				; optimize OK (tools.inc), line = 105
  1094
  1095 146A AD FE 2A			lda P
  1096 146D 8D 9B 2A			sta PLY
  1097 1470 85 12			sta :bp2
  1098 1472 AD FF 2A			lda P+1
  1099 1475 8D 9C 2A			sta PLY+1
  1100 1478 85 13			sta :bp2+1
  1101 				; optimize OK (tools.inc), line = 106
  1102 147A A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1103 147C AD 03 2B			lda BRAIN
  1104 147F 91 12			sta (:bp2),y
  1105 1481 A0 00			ldy #PLY.X-DATAORIGIN
  1106 1483 AD 00 2B			lda X
  1107 1486 91 12			sta (:bp2),y
  1108 1488 A0 01			ldy #PLY.Y-DATAORIGIN
  1109 148A AD 01 2B			lda Y
  1110 148D 91 12			sta (:bp2),y
  1111 148F A0 04			ldy #PLY.DIR-DATAORIGIN
  1112 1491 AD 02 2B			lda DIR
  1113 1494 91 12			sta (:bp2),y
  1114
  1115 				; optimize OK (tools.inc), line = 107
  1116
  1117 1496 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1118 1498 AD 04 2B			lda HEAD
  1119 149B 91 12			sta (:bp2),y
  1120 149D A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1121 149F AD 05 2B			lda COLOUR
  1122 14A2 91 12			sta (:bp2),y
  1123 14A4 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1124 14A6 AD 06 2B			lda ISALIVE
  1125 14A9 91 12			sta (:bp2),y
  1126
  1127 				; optimize OK (tools.inc), line = 108
  1128
  1129 14AB AD 06 2B			lda ISALIVE
  1130 14AE F0 1D			jeq l_03CC
  1131
  1132 				; optimize FAIL (0, tools.inc), line = 109
  1133
  1134 14B0 E6 5A			inc ALIVE
  1135 14B2 AD 05 2B			lda COLOUR
  1136 14B5 8D F4 2A			sta PUTCHAR_008E.C
  1137 14B8 AD 04 2B			lda HEAD
  1138 14BB 8D F3 2A			sta PUTCHAR_008E.V
  1139 14BE AD 01 2B			lda Y
  1140 14C1 8D F2 2A			sta PUTCHAR_008E.Y
  1141 14C4 AD 00 2B			lda X
  1142 14C7 8D F1 2A			sta PUTCHAR_008E.X
  1143 14CA 20 99 11			jsr PUTCHAR_008E
  1144 14CD			l_03CC
  1145
  1146 				; ------------------------------------------------------------
  1147
  1148 = 2AFE			P	= DATAORIGIN+$0052
  1149 = 2B00			X	= DATAORIGIN+$0054
  1150 = 2B01			Y	= DATAORIGIN+$0055
  1151 = 2B02			DIR	= DATAORIGIN+$0056
  1152 = 2B03			BRAIN	= DATAORIGIN+$0057
  1153 = 2B04			HEAD	= DATAORIGIN+$0058
  1154 = 2B05			COLOUR	= DATAORIGIN+$0059
  1155 = 2B06			ISALIVE	= DATAORIGIN+$005A
  1156
  1157 = 2AFE			@VarData	= P
  1158 = 0009			@VarDataSize	= 9
  1159
  1160 14CD			@exit
  1161 					.ifdef @new
  1162 					lda <@VarData
  1163 					sta :ztmp
  1164 					lda >@VarData
  1165 					ldy #@VarDataSize-1
  1166 					jmp @FreeMem
  1167 					els
  1168 14CD 60				rts						; ret
  1169 					eif
  1170 				.endl
  1171
  1172 14CE			.local	AISTRAIGHT					; PROCEDURE
  1173
  1174 				; optimize OK (ai.inc), line = 5
  1175
  1176 14CE AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1177 14D8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1178 14DA B1 12			lda (:bp2),y
  1179 14DC 25 5C			and AVAILDIR
  1180 14DE F0 07			jeq l_03FC
  1181 14E0 B1 12			lda (:bp2),y
  1182 14E2 85 5B			sta NEWDIR
  1183 14E4 4C 52 15			jmp l_040C
  1184 14E7			l_03FC
  1185
  1186 				; optimize OK (ai.inc), line = 7
  1187
  1188 14E7 A5 5C			lda AVAILDIR
  1189 14E9 C9 03			cmp #$03
  1190 14EB D0 10			jne l_041E
  1191 14ED A9 02			lda #$02
  1192 14EF 20 47 11			jsr SYSTEM.RANDOM_006D
  1193 14F2 B4 18			ldy :STACKORIGIN,x
  1194 14F4 B9 40 10			lda adr.DIRECTION,y
  1195 14F7 85 5B			sta NEWDIR
  1196 14F9 CA				dex
  1197 14FA 4C 15 15			jmp l_0430
  1198 14FD			l_041E
  1199
  1200 				; optimize OK (ai.inc), line = 9
  1201
  1202 14FD A5 5C			lda AVAILDIR
  1203 14FF 8D 07 2B			sta @CASETMP_0003
  1204 1502 C9 01			cmp #$01
  1205 1504 D0 07			jne l_043B
  1206 1506			@
  1207
  1208 				; optimize OK (ai.inc), line = 10
  1209
  1210 1506 A9 01			lda #$01
  1211 1508 85 5B			sta NEWDIR
  1212
  1213 150A 4C 15 15			jmp a_0003
  1214 150D			l_043B
  1215 150D C9 02			cmp #$02
  1216 150F D0 04			jne l_0448
  1217 1511			@
  1218
  1219 				; optimize OK (ai.inc), line = 11
  1220
  1221 1511 A9 02			lda #$02
  1222 1513 85 5B			sta NEWDIR
  1223
  1224 1515			l_0448
  1225 1515			a_0003
  1226 1515			l_0430
  1227
  1228 				; optimize OK (ai.inc), line = 14
  1229
  1230 1515 A5 5C			lda AVAILDIR
  1231 1517 C9 0C			cmp #$0C
  1232 1519 D0 1F			jne l_0464
  1233 151B A9 02			lda #$02
  1234 151D 20 47 11			jsr SYSTEM.RANDOM_006D
  1235 1520 E8				inx
  1236 1521 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1237 1525 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1238 1529 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1239 152B 20 44 10			jsr addAX_CX
  1240 152E CA				dex
  1241 152F B4 18			ldy :STACKORIGIN,x
  1242 1531 B9 40 10			lda adr.DIRECTION,y
  1243 1534 85 5B			sta NEWDIR
  1244 1536 CA				dex
  1245 1537 4C 52 15			jmp l_047A
  1246 153A			l_0464
  1247
  1248 				; optimize OK (ai.inc), line = 16
  1249
  1250 153A A5 5C			lda AVAILDIR
  1251 153C 8D 08 2B			sta @CASETMP_0004
  1252 153F C9 04			cmp #$04
  1253 1541 D0 07			jne l_0485
  1254 1543			@
  1255
  1256 				; optimize OK (ai.inc), line = 17
  1257
  1258 1543 A9 04			lda #$04
  1259 1545 85 5B			sta NEWDIR
  1260
  1261 1547 4C 52 15			jmp a_0004
  1262 154A			l_0485
  1263 154A C9 08			cmp #$08
  1264 154C D0 04			jne l_0492
  1265 154E			@
  1266
  1267 				; optimize OK (ai.inc), line = 18
  1268
  1269 154E A9 08			lda #$08
  1270 1550 85 5B			sta NEWDIR
  1271
  1272 1552			l_0492
  1273 1552			a_0004
  1274 1552			l_047A
  1275 1552			l_040C
  1276
  1277 				; ------------------------------------------------------------
  1278
  1279 = 2B07			@CASETMP_0003	= DATAORIGIN+$005B
  1280 = 2B08			@CASETMP_0004	= DATAORIGIN+$005C
  1281
  1282 = 2B07			@VarData	= @CASETMP_0003
  1283 = 0002			@VarDataSize	= 2
  1284
  1285 1552			@exit
  1286 					.ifdef @new
  1287 					lda <@VarData
  1288 					sta :ztmp
  1289 					lda >@VarData
  1290 					ldy #@VarDataSize-1
  1291 					jmp @FreeMem
  1292 					els
  1293 1552 60				rts						; ret
  1294 					eif
  1295 				.endl
  1296
  1297 1553			.local	AISAPPER					; PROCEDURE
  1298
  1299 				; optimize OK (ai.inc), line = 31
  1300
  1301 1553 A9 00			lda #$00
  1302 1555 8D 09 2B			sta L
  1303 1558 8D 0A 2B			sta R
  1304 155B 8D 0B 2B			sta U
  1305 155E 8D 0C 2B			sta D
  1306
  1307 				; optimize OK (ai.inc), line = 32
  1308
  1309 1561 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1310 156B A0 01			ldy #PLY.Y-DATAORIGIN
  1311 156D B1 12			lda (:bp2),y
  1312 156F 0A				asl @
  1313 1570 A8				tay
  1314 1571 A9 00			lda #$00
  1315 1573 18 79 0E 10			add adr.MUL40,y
  1316 1577 85 21			sta :STACKORIGIN+9
  1317 1579 A9 0C			lda #$0C
  1318 157B 79 0F 10			adc adr.MUL40+1,y
  1319 157E 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1320 1580 A0 00			ldy #PLY.X-DATAORIGIN
  1321 1582 A5 21			lda :STACKORIGIN+9
  1322 1584 18 71 12			add (:bp2),y
  1323 1587 85 5D			sta T0W
  1324 1589 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1325 158B 69 00			adc #$00
  1326 158D 85 5E			sta T0W+1
  1327
  1328 				; optimize OK (ai.inc), line = 34
  1329
  1330 158F A5 5C			lda AVAILDIR
  1331 1591 29 01			and #$01
  1332 1593 F0 73			jeq l_04D8
  1333
  1334 				; optimize OK (ai.inc), line = 35
  1335
  1336 1595 A9 05			lda #$05
  1337 1597 85 59			sta I0B
  1338
  1339 1599			l_04E2
  1340 				; --- ForToDoCondition
  1341 1599 A5 59			lda I0B
  1342 159B C9 01			cmp #$01
  1343 159D 90 69			jcc l_04F0
  1344
  1345 				; optimize OK (ai.inc), line = 36
  1346
  1347 159F 0A				asl @
  1348 15A0 A8				tay
  1349 15A1 A5 5D			lda T0W
  1350 15A3 38 F9 0E 10			sub adr.MUL40,y
  1351 15A7 85 21			sta :STACKORIGIN+9
  1352 15A9 A5 5E			lda T0W+1
  1353 15AB F9 0F 10			sbc adr.MUL40+1,y
  1354 15AE 85 11			sta :bp+1
  1355 15B0 A4 21			ldy :STACKORIGIN+9
  1356 15B2 B1 10			lda (:bp),y
  1357 15B4 C9 20			cmp #$20
  1358 15B6 D0 03			jne l_050A
  1359 15B8 EE 0B 2B			inc U
  1360 15BB			l_050A
  1361
  1362 				; optimize OK (ai.inc), line = 37
  1363
  1364 15BB A5 59			lda I0B
  1365 15BD 0A				asl @
  1366 15BE A8				tay
  1367 15BF A5 5D			lda T0W
  1368 15C1 38 F9 0E 10			sub adr.MUL40,y
  1369 15C5 85 21			sta :STACKORIGIN+9
  1370 15C7 A5 5E			lda T0W+1
  1371 15C9 F9 0F 10			sbc adr.MUL40+1,y
  1372 15CC 85 11			sta :bp+1
  1373 15CE A5 21			lda :STACKORIGIN+9
  1374 15D0 18 69 01			add #$01
  1375 15D3 A8				tay
  1376 15D4 90 02			scc
  1377 15D6 E6 11			inc :bp+1
  1378 15D8 B1 10			lda (:bp),y
  1379 15DA C9 20			cmp #$20
  1380 15DC D0 03			jne l_052F
  1381 15DE EE 0B 2B			inc U
  1382 15E1			l_052F
  1383
  1384 				; optimize OK (ai.inc), line = 38
  1385
  1386 15E1 A5 59			lda I0B
  1387 15E3 0A				asl @
  1388 15E4 A8				tay
  1389 15E5 A5 5D			lda T0W
  1390 15E7 38 F9 0E 10			sub adr.MUL40,y
  1391 15EB 85 21			sta :STACKORIGIN+9
  1392 15ED A5 5E			lda T0W+1
  1393 15EF F9 0F 10			sbc adr.MUL40+1,y
  1394 15F2 85 11			sta :bp+1
  1395 15F4 A4 21			ldy :STACKORIGIN+9
  1396 15F6 88				dey
  1397 15F7 B0 02			scs
  1398 15F9 C6 11			dec :bp+1
  1399 15FB B1 10			lda (:bp),y
  1400 15FD C9 20			cmp #$20
  1401 15FF D0 03			jne l_0554
  1402 1601 EE 0B 2B			inc U
  1403 1604			l_0554
  1404
  1405 				; --- ForToDoEpilog
  1406 1604 C6 59			dec I0B
  1407 1606 10 91			jpl l_04E2
  1408 1608			l_04F0
  1409 1608			l_04D8
  1410
  1411 				; optimize OK (ai.inc), line = 42
  1412
  1413 1608 A5 5C			lda AVAILDIR
  1414 160A 29 02			and #$02
  1415 160C F0 73			jeq l_0578
  1416
  1417 				; optimize OK (ai.inc), line = 43
  1418
  1419 160E A9 05			lda #$05
  1420 1610 85 59			sta I0B
  1421
  1422 1612			l_0582
  1423 				; --- ForToDoCondition
  1424 1612 A5 59			lda I0B
  1425 1614 C9 01			cmp #$01
  1426 1616 90 69			jcc l_0590
  1427
  1428 				; optimize OK (ai.inc), line = 44
  1429
  1430 1618 0A				asl @
  1431 1619 A8				tay
  1432 161A A5 5D			lda T0W
  1433 161C 18 79 0E 10			add adr.MUL40,y
  1434 1620 85 21			sta :STACKORIGIN+9
  1435 1622 A5 5E			lda T0W+1
  1436 1624 79 0F 10			adc adr.MUL40+1,y
  1437 1627 85 11			sta :bp+1
  1438 1629 A4 21			ldy :STACKORIGIN+9
  1439 162B B1 10			lda (:bp),y
  1440 162D C9 20			cmp #$20
  1441 162F D0 03			jne l_05AA
  1442 1631 EE 0C 2B			inc D
  1443 1634			l_05AA
  1444
  1445 				; optimize OK (ai.inc), line = 45
  1446
  1447 1634 A5 59			lda I0B
  1448 1636 0A				asl @
  1449 1637 A8				tay
  1450 1638 A5 5D			lda T0W
  1451 163A 18 79 0E 10			add adr.MUL40,y
  1452 163E 85 21			sta :STACKORIGIN+9
  1453 1640 A5 5E			lda T0W+1
  1454 1642 79 0F 10			adc adr.MUL40+1,y
  1455 1645 85 11			sta :bp+1
  1456 1647 A5 21			lda :STACKORIGIN+9
  1457 1649 18 69 01			add #$01
  1458 164C A8				tay
  1459 164D 90 02			scc
  1460 164F E6 11			inc :bp+1
  1461 1651 B1 10			lda (:bp),y
  1462 1653 C9 20			cmp #$20
  1463 1655 D0 03			jne l_05CF
  1464 1657 EE 0C 2B			inc D
  1465 165A			l_05CF
  1466
  1467 				; optimize OK (ai.inc), line = 46
  1468
  1469 165A A5 59			lda I0B
  1470 165C 0A				asl @
  1471 165D A8				tay
  1472 165E A5 5D			lda T0W
  1473 1660 18 79 0E 10			add adr.MUL40,y
  1474 1664 85 21			sta :STACKORIGIN+9
  1475 1666 A5 5E			lda T0W+1
  1476 1668 79 0F 10			adc adr.MUL40+1,y
  1477 166B 85 11			sta :bp+1
  1478 166D A4 21			ldy :STACKORIGIN+9
  1479 166F 88				dey
  1480 1670 B0 02			scs
  1481 1672 C6 11			dec :bp+1
  1482 1674 B1 10			lda (:bp),y
  1483 1676 C9 20			cmp #$20
  1484 1678 D0 03			jne l_05F4
  1485 167A EE 0C 2B			inc D
  1486 167D			l_05F4
  1487
  1488 				; --- ForToDoEpilog
  1489 167D C6 59			dec I0B
  1490 167F 10 91			jpl l_0582
  1491 1681			l_0590
  1492 1681			l_0578
  1493
  1494 				; optimize OK (ai.inc), line = 50
  1495
  1496 1681 A5 5C			lda AVAILDIR
  1497 1683 29 04			and #$04
  1498 1685 F0 5F			jeq l_0618
  1499
  1500 				; optimize OK (ai.inc), line = 51
  1501
  1502 1687 A9 05			lda #$05
  1503 1689 85 59			sta I0B
  1504
  1505 168B			l_0622
  1506 				; --- ForToDoCondition
  1507 168B A5 59			lda I0B
  1508 168D C9 01			cmp #$01
  1509 168F 90 55			jcc l_0630
  1510
  1511 				; optimize OK (ai.inc), line = 52
  1512
  1513 1691 A5 5D			lda T0W
  1514 1693 38 E5 59			sub I0B
  1515 1696 A8				tay
  1516 1697 A5 5E			lda T0W+1
  1517 1699 E9 00			sbc #$00
  1518 169B 85 11			sta :bp+1
  1519 169D B1 10			lda (:bp),y
  1520 169F C9 20			cmp #$20
  1521 16A1 D0 03			jne l_0648
  1522 16A3 EE 09 2B			inc L
  1523 16A6			l_0648
  1524
  1525 				; optimize OK (ai.inc), line = 53
  1526
  1527 16A6 A5 5D			lda T0W
  1528 16A8 38 E5 59			sub I0B
  1529 16AB A8				tay
  1530 16AC A5 5E			lda T0W+1
  1531 16AE E9 00			sbc #$00
  1532 16B0 85 11			sta :bp+1
  1533 16B2 98				tya
  1534 16B3 18 69 28			add #$28
  1535 16B6 A8				tay
  1536 16B7 90 02			scc
  1537 16B9 E6 11			inc :bp+1
  1538 16BB B1 10			lda (:bp),y
  1539 16BD C9 20			cmp #$20
  1540 16BF D0 03			jne l_066B
  1541 16C1 EE 09 2B			inc L
  1542 16C4			l_066B
  1543
  1544 				; optimize OK (ai.inc), line = 54
  1545
  1546 16C4 A5 5D			lda T0W
  1547 16C6 38 E5 59			sub I0B
  1548 16C9 A8				tay
  1549 16CA A5 5E			lda T0W+1
  1550 16CC E9 00			sbc #$00
  1551 16CE 85 11			sta :bp+1
  1552 16D0 98				tya
  1553 16D1 38 E9 28			sub #$28
  1554 16D4 A8				tay
  1555 16D5 B0 02			scs
  1556 16D7 C6 11			dec :bp+1
  1557 16D9 B1 10			lda (:bp),y
  1558 16DB C9 20			cmp #$20
  1559 16DD D0 03			jne l_068E
  1560 16DF EE 09 2B			inc L
  1561 16E2			l_068E
  1562
  1563 				; --- ForToDoEpilog
  1564 16E2 C6 59			dec I0B
  1565 16E4 10 A5			jpl l_0622
  1566 16E6			l_0630
  1567 16E6			l_0618
  1568
  1569 				; optimize OK (ai.inc), line = 58
  1570
  1571 16E6 A5 5C			lda AVAILDIR
  1572 16E8 29 08			and #$08
  1573 16EA F0 5D			jeq l_06B2
  1574
  1575 				; optimize OK (ai.inc), line = 59
  1576
  1577 16EC A9 05			lda #$05
  1578 16EE 85 59			sta I0B
  1579
  1580 16F0			l_06BC
  1581 				; --- ForToDoCondition
  1582 16F0 A5 59			lda I0B
  1583 16F2 C9 01			cmp #$01
  1584 16F4 90 53			jcc l_06CA
  1585
  1586 				; optimize OK (ai.inc), line = 60
  1587
  1588 16F6 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1589 16FE A4 59			ldy I0B
  1590 1700 B1 12			lda (:bp2),y
  1591 1702 C9 20			cmp #$20
  1592 1704 D0 03			jne l_06E2
  1593 1706 EE 0A 2B			inc R
  1594 1709			l_06E2
  1595
  1596 				; optimize OK (ai.inc), line = 61
  1597
  1598 1709 A5 5D			lda T0W
  1599 170B 18 65 59			add I0B
  1600 170E A8				tay
  1601 170F A5 5E			lda T0W+1
  1602 1711 69 00			adc #$00
  1603 1713 85 11			sta :bp+1
  1604 1715 98				tya
  1605 1716 18 69 28			add #$28
  1606 1719 A8				tay
  1607 171A 90 02			scc
  1608 171C E6 11			inc :bp+1
  1609 171E B1 10			lda (:bp),y
  1610 1720 C9 20			cmp #$20
  1611 1722 D0 03			jne l_0705
  1612 1724 EE 0A 2B			inc R
  1613 1727			l_0705
  1614
  1615 				; optimize OK (ai.inc), line = 62
  1616
  1617 1727 A5 5D			lda T0W
  1618 1729 18 65 59			add I0B
  1619 172C A8				tay
  1620 172D A5 5E			lda T0W+1
  1621 172F 69 00			adc #$00
  1622 1731 85 11			sta :bp+1
  1623 1733 98				tya
  1624 1734 38 E9 28			sub #$28
  1625 1737 A8				tay
  1626 1738 B0 02			scs
  1627 173A C6 11			dec :bp+1
  1628 173C B1 10			lda (:bp),y
  1629 173E C9 20			cmp #$20
  1630 1740 D0 03			jne l_0728
  1631 1742 EE 0A 2B			inc R
  1632 1745			l_0728
  1633
  1634 				; --- ForToDoEpilog
  1635 1745 C6 59			dec I0B
  1636 1747 10 A7			jpl l_06BC
  1637 1749			l_06CA
  1638 1749			l_06B2
  1639
  1640 				; optimize OK (ai.inc), line = 66
  1641
  1642 1749 AD 0C 2B			lda D
  1643 174C 85 58			sta T0B
  1644
  1645 				; optimize OK (ai.inc), line = 67
  1646
  1647 174E CD 0B 2B			cmp U
  1648 1751 B0 05			jcs l_0750
  1649 1753 AD 0B 2B			lda U
  1650 1756 85 58			sta T0B
  1651 1758			l_0750
  1652
  1653 				; optimize OK (ai.inc), line = 68
  1654
  1655 1758 A5 58			lda T0B
  1656 175A CD 09 2B			cmp L
  1657 175D B0 05			jcs l_076D
  1658 175F AD 09 2B			lda L
  1659 1762 85 58			sta T0B
  1660 1764			l_076D
  1661
  1662 				; optimize OK (ai.inc), line = 69
  1663
  1664 1764 A5 58			lda T0B
  1665 1766 CD 0A 2B			cmp R
  1666 1769 B0 05			jcs l_078A
  1667 176B AD 0A 2B			lda R
  1668 176E 85 58			sta T0B
  1669 1770			l_078A
  1670
  1671 				; optimize OK (ai.inc), line = 71
  1672
  1673 1770 A5 58			lda T0B
  1674 1772 CD 0C 2B			cmp D
  1675 1775 D0 04			jne l_07A7
  1676 1777 A9 02			lda #$02
  1677 1779 85 58			sta T0B
  1678 177B			l_07A7
  1679
  1680 				; optimize OK (ai.inc), line = 72
  1681
  1682 177B A5 58			lda T0B
  1683 177D CD 0B 2B			cmp U
  1684 1780 D0 04			jne l_07C2
  1685 1782 A9 01			lda #$01
  1686 1784 85 58			sta T0B
  1687 1786			l_07C2
  1688
  1689 				; optimize OK (ai.inc), line = 73
  1690
  1691 1786 A5 58			lda T0B
  1692 1788 CD 09 2B			cmp L
  1693 178B D0 04			jne l_07DD
  1694 178D A9 04			lda #$04
  1695 178F 85 58			sta T0B
  1696 1791			l_07DD
  1697
  1698 				; optimize OK (ai.inc), line = 74
  1699
  1700 1791 A5 58			lda T0B
  1701 1793 CD 0A 2B			cmp R
  1702 1796 D0 04			jne l_07F8
  1703 1798 A9 08			lda #$08
  1704 179A 85 58			sta T0B
  1705 179C			l_07F8
  1706
  1707 				; optimize OK (ai.inc), line = 76
  1708
  1709 179C A5 5C			lda AVAILDIR
  1710 179E 25 58			and T0B
  1711 17A0 F0 07			jeq l_0817
  1712 17A2 A5 58			lda T0B
  1713 17A4 85 5B			sta NEWDIR
  1714 17A6 4C AC 17			jmp l_0827
  1715 17A9			l_0817
  1716
  1717 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1718
  1719 17A9 20 CE 14			jsr AISTRAIGHT
  1720 17AC			l_0827
  1721
  1722 				; ------------------------------------------------------------
  1723
  1724 = 2B09			L	= DATAORIGIN+$005D
  1725 = 2B0A			R	= DATAORIGIN+$005E
  1726 = 2B0B			U	= DATAORIGIN+$005F
  1727 = 2B0C			D	= DATAORIGIN+$0060
  1728 = 0001			@FORTMP_04DF	= $01
  1729 = 0001			@FORTMP_057F	= $01
  1730 = 0001			@FORTMP_061F	= $01
  1731 = 0001			@FORTMP_06B9	= $01
  1732
  1733 = 2B09			@VarData	= L
  1734 = 0004			@VarDataSize	= 4
  1735
  1736 17AC			@exit
  1737 					.ifdef @new
  1738 					lda <@VarData
  1739 					sta :ztmp
  1740 					lda >@VarData
  1741 					ldy #@VarDataSize-1
  1742 					jmp @FreeMem
  1743 					els
  1744 17AC 60				rts						; ret
  1745 					eif
  1746 				.endl
  1747
  1748 17AD			.local	AIBULLY						; PROCEDURE
  1749
  1750 				; optimize OK (ai.inc), line = 84
  1751
  1752 17AD AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1753 17B7 A0 04			ldy #PLY.DIR-DATAORIGIN
  1754 17B9 B1 12			lda (:bp2),y
  1755 17BB 85 58			sta T0B
  1756
  1757 				; optimize OK (ai.inc), line = 86
  1758
  1759 17BD AD C5 2A			lda PLAYER1.ISALIVE
  1760 17C0 0D CD 2A			ora PLAYER2.ISALIVE
  1761 17C3 D0 03 4C 6A 18		jeq l_0844
  1762
  1763 				; optimize OK (ai.inc), line = 88
  1764
  1765 17C8 AD C5 2A			lda PLAYER1.ISALIVE
  1766 17CB F0 0F			jeq l_0851
  1767 17CD AD 9F 2A			lda PLAYER1
  1768 17D0 8D 9D 2A			sta TMPPLY
  1769 17D3 AD A0 2A			lda PLAYER1+1
  1770 17D6 8D 9E 2A			sta TMPPLY+1
  1771 17D9 4C E8 17			jmp l_0860
  1772 17DC			l_0851
  1773 17DC AD A1 2A			lda PLAYER2
  1774 17DF 8D 9D 2A			sta TMPPLY
  1775 17E2 AD A2 2A			lda PLAYER2+1
  1776 17E5 8D 9E 2A			sta TMPPLY+1
  1777 17E8			l_0860
  1778
  1779 				; optimize OK (ai.inc), line = 90
  1780
  1781 17E8 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1782 17F2 A0 01			ldy #PLY.Y-DATAORIGIN
  1783 17F4 B1 12			lda (:bp2),y
  1784 17F6 85 21			sta :STACKORIGIN+9
  1785 17F8 AC 9D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1786 1802 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1787 1804 B1 12			lda (:bp2),y
  1788 1806 C5 21			cmp :STACKORIGIN+9
  1789 1808 B0 07			jcs l_0879
  1790 180A A9 01			lda #$01
  1791 180C 85 58			sta T0B
  1792 180E 4C 15 18			jmp l_0887
  1793 1811			l_0879
  1794 1811 A9 02			lda #$02
  1795 1813 85 58			sta T0B
  1796 1815			l_0887
  1797
  1798 				; optimize OK (ai.inc), line = 91
  1799
  1800 1815 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1801 181F A0 01			ldy #PLY.Y-DATAORIGIN
  1802 1821 B1 12			lda (:bp2),y
  1803 1823 85 21			sta :STACKORIGIN+9
  1804 1825 AC 9D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1805 182F A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1806 1831 B1 12			lda (:bp2),y
  1807 1833 C5 21			cmp :STACKORIGIN+9
  1808 1835 F0 06			jeq l_08B1x
  1809 1837 A5 5C			lda AVAILDIR
  1810 1839 25 58			and T0B
  1811 183B D0 2D			jne l_08B1
  1812 183D			l_08B1x
  1813
  1814 				; optimize OK (ai.inc), line = 92
  1815
  1816 183D AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1817 1847 A0 00			ldy #PLY.X-DATAORIGIN
  1818 1849 B1 12			lda (:bp2),y
  1819 184B 85 21			sta :STACKORIGIN+9
  1820 184D AC 9D 2A 84 12 AC + 	mwy TMPPLY :bp2
  1821 1857 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1822 1859 B1 12			lda (:bp2),y
  1823 185B C5 21			cmp :STACKORIGIN+9
  1824 185D B0 07			jcs l_08C6
  1825 185F A9 04			lda #$04
  1826 1861 85 58			sta T0B
  1827 1863 4C 6A 18			jmp l_08D4
  1828 1866			l_08C6
  1829 1866 A9 08			lda #$08
  1830 1868 85 58			sta T0B
  1831 186A			l_08D4
  1832 186A			l_08B1
  1833 186A			l_0844
  1834
  1835 				; optimize OK (ai.inc), line = 96
  1836
  1837 186A A5 5C			lda AVAILDIR
  1838 186C 25 58			and T0B
  1839 186E F0 07			jeq l_08F4
  1840 1870 A5 58			lda T0B
  1841 1872 85 5B			sta NEWDIR
  1842 1874 4C 7A 18			jmp l_0904
  1843 1877			l_08F4
  1844
  1845 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1846
  1847 1877 20 53 15			jsr AISAPPER
  1848 187A			l_0904
  1849 187A			@exit
  1850 					.ifdef @new
  1851 					lda <@VarData
  1852 					sta :ztmp
  1853 					lda >@VarData
  1854 					ldy #@VarDataSize-1
  1855 					jmp @FreeMem
  1856 					els
  1857 187A 60				rts						; ret
  1858 					eif
  1859 				.endl
  1860
  1861 187B			.local	AIMIRROR					; PROCEDURE
  1862
  1863 				; optimize OK (ai.inc), line = 105
  1864
  1865 187B AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  1866 1885 A0 04			ldy #PLY.DIR-DATAORIGIN
  1867 1887 B1 12			lda (:bp2),y
  1868 1889 85 58			sta T0B
  1869
  1870 				; optimize OK (ai.inc), line = 107
  1871
  1872 188B AD C5 2A			lda PLAYER1.ISALIVE
  1873 188E F0 2F			jeq l_091B
  1874
  1875 				; optimize OK (ai.inc), line = 108
  1876
  1877 1890 AD C2 2A			lda PLAYER1.DIR
  1878 1893 8D 0D 2B			sta @CASETMP_0005
  1879 1896 C9 01			cmp #$01
  1880 1898 D0 07			jne l_0927
  1881 189A			@
  1882
  1883 				; optimize OK (ai.inc), line = 109
  1884
  1885 189A A9 02			lda #$02
  1886 189C 85 58			sta T0B
  1887
  1888 189E 4C BF 18			jmp a_0005
  1889 18A1			l_0927
  1890 18A1 C9 02			cmp #$02
  1891 18A3 D0 07			jne l_0934
  1892 18A5			@
  1893
  1894 				; optimize OK (ai.inc), line = 110
  1895
  1896 18A5 A9 01			lda #$01
  1897 18A7 85 58			sta T0B
  1898
  1899 18A9 4C BF 18			jmp a_0005
  1900 18AC			l_0934
  1901 18AC C9 04			cmp #$04
  1902 18AE D0 07			jne l_0941
  1903 18B0			@
  1904
  1905 				; optimize OK (ai.inc), line = 111
  1906
  1907 18B0 A9 08			lda #$08
  1908 18B2 85 58			sta T0B
  1909
  1910 18B4 4C BF 18			jmp a_0005
  1911 18B7			l_0941
  1912 18B7 C9 08			cmp #$08
  1913 18B9 D0 04			jne l_094E
  1914 18BB			@
  1915
  1916 				; optimize OK (ai.inc), line = 112
  1917
  1918 18BB A9 04			lda #$04
  1919 18BD 85 58			sta T0B
  1920
  1921 18BF			l_094E
  1922 18BF			a_0005
  1923 18BF			l_091B
  1924
  1925 				; optimize OK (ai.inc), line = 116
  1926
  1927 18BF A5 5C			lda AVAILDIR
  1928 18C1 25 58			and T0B
  1929 18C3 F0 07			jeq l_0974
  1930 18C5 A5 58			lda T0B
  1931 18C7 85 5B			sta NEWDIR
  1932 18C9 4C CF 18			jmp l_0984
  1933 18CC			l_0974
  1934
  1935 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  1936
  1937 18CC 20 53 15			jsr AISAPPER
  1938 18CF			l_0984
  1939
  1940 				; ------------------------------------------------------------
  1941
  1942 = 2B0D			@CASETMP_0005	= DATAORIGIN+$0061
  1943
  1944 = 2B0D			@VarData	= @CASETMP_0005
  1945 = 0001			@VarDataSize	= 1
  1946
  1947 18CF			@exit
  1948 					.ifdef @new
  1949 					lda <@VarData
  1950 					sta :ztmp
  1951 					lda >@VarData
  1952 					ldy #@VarDataSize-1
  1953 					jmp @FreeMem
  1954 					els
  1955 18CF 60				rts						; ret
  1956 					eif
  1957 				.endl
  1958
  1959 18D0			.local	SETLEVEL00					; PROCEDURE
  1960
  1961 				; optimize OK (levels.inc), line = 5
  1962
  1963 18D0 A9 01			lda #$01
  1964 18D2 8D 06 2B			sta SETPLAYER.ISALIVE
  1965 18D5 A9 62			lda #$62
  1966 18D7 8D 05 2B			sta SETPLAYER.COLOUR
  1967 18DA A9 51			lda #$51
  1968 18DC 8D 04 2B			sta SETPLAYER.HEAD
  1969 18DF A9 00			lda #$00
  1970 18E1 8D 03 2B			sta SETPLAYER.BRAIN
  1971 18E4 A9 08			lda #$08
  1972 18E6 8D 02 2B			sta SETPLAYER.DIR
  1973 18E9 A9 0C			lda #$0C
  1974 18EB 8D 01 2B			sta SETPLAYER.Y
  1975 18EE A9 0A			lda #$0A
  1976 18F0 8D 00 2B			sta SETPLAYER.X
  1977 18F3 AD 9F 2A			lda PLAYER1
  1978 18F6 8D FE 2A			sta SETPLAYER.P
  1979 18F9 AD A0 2A			lda PLAYER1+1
  1980 18FC 8D FF 2A			sta SETPLAYER.P+1
  1981 18FF 20 6A 14			jsr SETPLAYER
  1982
  1983 				; optimize OK (levels.inc), line = 6
  1984
  1985 1902 A9 01			lda #$01
  1986 1904 8D 06 2B			sta SETPLAYER.ISALIVE
  1987 1907 A9 5D			lda #$5D
  1988 1909 8D 05 2B			sta SETPLAYER.COLOUR
  1989 190C A9 51			lda #$51
  1990 190E 8D 04 2B			sta SETPLAYER.HEAD
  1991 1911 A9 01			lda #$01
  1992 1913 8D 03 2B			sta SETPLAYER.BRAIN
  1993 1916 A9 04			lda #$04
  1994 1918 8D 02 2B			sta SETPLAYER.DIR
  1995 191B A9 0C			lda #$0C
  1996 191D 8D 01 2B			sta SETPLAYER.Y
  1997 1920 A9 1E			lda #$1E
  1998 1922 8D 00 2B			sta SETPLAYER.X
  1999 1925 AD A1 2A			lda PLAYER2
  2000 1928 8D FE 2A			sta SETPLAYER.P
  2001 192B AD A2 2A			lda PLAYER2+1
  2002 192E 8D FF 2A			sta SETPLAYER.P+1
  2003 1931 20 6A 14			jsr SETPLAYER
  2004
  2005 				; optimize FAIL (1, levels.inc), line = 8
  2006
  2007 1934 E8				inx
  2008 1935 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2009 1939 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2010 193B A9 06			lda #$06
  2011 193D 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2012 1940 A9 0A			lda #$0A
  2013 1942 8D FA 2A			sta CALCOBSTACLEADDR.X
  2014 1945 20 18 13			jsr CALCOBSTACLEADDR
  2015 1948 B4 17			ldy :STACKORIGIN-1,x
  2016 194A B5 18			lda :STACKORIGIN,x
  2017 194C 99 DE 2A			sta adr.OBSTACLES,y
  2018 194F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2019 1951 99 DF 2A			sta adr.OBSTACLES+1,y
  2020 1954 CA				dex
  2021
  2022 				; optimize FAIL (1, levels.inc), line = 9
  2023
  2024 1955 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2025 1959 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2026 195D A9 06			lda #$06
  2027 195F 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2028 1962 A9 1E			lda #$1E
  2029 1964 8D FA 2A			sta CALCOBSTACLEADDR.X
  2030 1967 20 18 13			jsr CALCOBSTACLEADDR
  2031 196A B4 17			ldy :STACKORIGIN-1,x
  2032 196C B5 18			lda :STACKORIGIN,x
  2033 196E 99 DE 2A			sta adr.OBSTACLES,y
  2034 1971 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2035 1973 99 DF 2A			sta adr.OBSTACLES+1,y
  2036 1976 CA				dex
  2037
  2038 				; optimize FAIL (1, levels.inc), line = 10
  2039
  2040 1977 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2041 197B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2042 197F A9 12			lda #$12
  2043 1981 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2044 1984 A9 0A			lda #$0A
  2045 1986 8D FA 2A			sta CALCOBSTACLEADDR.X
  2046 1989 20 18 13			jsr CALCOBSTACLEADDR
  2047 198C B4 17			ldy :STACKORIGIN-1,x
  2048 198E B5 18			lda :STACKORIGIN,x
  2049 1990 99 DE 2A			sta adr.OBSTACLES,y
  2050 1993 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2051 1995 99 DF 2A			sta adr.OBSTACLES+1,y
  2052 1998 CA				dex
  2053
  2054 				; optimize FAIL (1, levels.inc), line = 11
  2055
  2056 1999 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2057 199D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2058 19A1 A9 12			lda #$12
  2059 19A3 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2060 19A6 A9 1E			lda #$1E
  2061 19A8 8D FA 2A			sta CALCOBSTACLEADDR.X
  2062 19AB 20 18 13			jsr CALCOBSTACLEADDR
  2063 19AE B4 17			ldy :STACKORIGIN-1,x
  2064 19B0 B5 18			lda :STACKORIGIN,x
  2065 19B2 99 DE 2A			sta adr.OBSTACLES,y
  2066 19B5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2067 19B7 99 DF 2A			sta adr.OBSTACLES+1,y
  2068 19BA CA				dex
  2069
  2070 				; optimize FAIL (1, levels.inc), line = 12
  2071
  2072 19BB A9 08 95 18			mva #$08 :STACKORIGIN,x
  2073 19BF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2074 19C3 A9 02			lda #$02
  2075 19C5 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2076 19C8 A9 14			lda #$14
  2077 19CA 8D FA 2A			sta CALCOBSTACLEADDR.X
  2078 19CD 20 18 13			jsr CALCOBSTACLEADDR
  2079 19D0 B4 17			ldy :STACKORIGIN-1,x
  2080 19D2 B5 18			lda :STACKORIGIN,x
  2081 19D4 99 DE 2A			sta adr.OBSTACLES,y
  2082 19D7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2083 19D9 99 DF 2A			sta adr.OBSTACLES+1,y
  2084 19DC CA				dex
  2085
  2086 				; optimize FAIL (1, levels.inc), line = 13
  2087
  2088 19DD A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2089 19E1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2090 19E5 A9 16			lda #$16
  2091 19E7 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2092 19EA A9 14			lda #$14
  2093 19EC 8D FA 2A			sta CALCOBSTACLEADDR.X
  2094 19EF 20 18 13			jsr CALCOBSTACLEADDR
  2095 19F2 B4 17			ldy :STACKORIGIN-1,x
  2096 19F4 B5 18			lda :STACKORIGIN,x
  2097 19F6 99 DE 2A			sta adr.OBSTACLES,y
  2098 19F9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2099 19FB 99 DF 2A			sta adr.OBSTACLES+1,y
  2100 19FE CA				dex
  2101 19FF CA				dex
  2102 1A00			@exit
  2103 					.ifdef @new
  2104 					lda <@VarData
  2105 					sta :ztmp
  2106 					lda >@VarData
  2107 					ldy #@VarDataSize-1
  2108 					jmp @FreeMem
  2109 					els
  2110 1A00 60				rts						; ret
  2111 					eif
  2112 				.endl
  2113
  2114 1A01			.local	SETLEVEL01					; PROCEDURE
  2115
  2116 				; optimize OK (levels.inc), line = 20
  2117
  2118 1A01 A9 01			lda #$01
  2119 1A03 8D 06 2B			sta SETPLAYER.ISALIVE
  2120 1A06 A9 62			lda #$62
  2121 1A08 8D 05 2B			sta SETPLAYER.COLOUR
  2122 1A0B A9 51			lda #$51
  2123 1A0D 8D 04 2B			sta SETPLAYER.HEAD
  2124 1A10 A9 00			lda #$00
  2125 1A12 8D 03 2B			sta SETPLAYER.BRAIN
  2126 1A15 A9 08			lda #$08
  2127 1A17 8D 02 2B			sta SETPLAYER.DIR
  2128 1A1A A9 0C			lda #$0C
  2129 1A1C 8D 01 2B			sta SETPLAYER.Y
  2130 1A1F A9 0A			lda #$0A
  2131 1A21 8D 00 2B			sta SETPLAYER.X
  2132 1A24 AD 9F 2A			lda PLAYER1
  2133 1A27 8D FE 2A			sta SETPLAYER.P
  2134 1A2A AD A0 2A			lda PLAYER1+1
  2135 1A2D 8D FF 2A			sta SETPLAYER.P+1
  2136 1A30 20 6A 14			jsr SETPLAYER
  2137
  2138 				; optimize OK (levels.inc), line = 21
  2139
  2140 1A33 A9 01			lda #$01
  2141 1A35 8D 06 2B			sta SETPLAYER.ISALIVE
  2142 1A38 A9 5D			lda #$5D
  2143 1A3A 8D 05 2B			sta SETPLAYER.COLOUR
  2144 1A3D A9 51			lda #$51
  2145 1A3F 8D 04 2B			sta SETPLAYER.HEAD
  2146 1A42 A9 01			lda #$01
  2147 1A44 8D 03 2B			sta SETPLAYER.BRAIN
  2148 1A47 A9 04			lda #$04
  2149 1A49 8D 02 2B			sta SETPLAYER.DIR
  2150 1A4C A9 0C			lda #$0C
  2151 1A4E 8D 01 2B			sta SETPLAYER.Y
  2152 1A51 A9 1E			lda #$1E
  2153 1A53 8D 00 2B			sta SETPLAYER.X
  2154 1A56 AD A1 2A			lda PLAYER2
  2155 1A59 8D FE 2A			sta SETPLAYER.P
  2156 1A5C AD A2 2A			lda PLAYER2+1
  2157 1A5F 8D FF 2A			sta SETPLAYER.P+1
  2158 1A62 20 6A 14			jsr SETPLAYER
  2159
  2160 				; optimize FAIL (1, levels.inc), line = 23
  2161
  2162 1A65 E8				inx
  2163 1A66 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2164 1A6A 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2165 1A6C A9 06			lda #$06
  2166 1A6E 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2167 1A71 A9 0A			lda #$0A
  2168 1A73 8D FA 2A			sta CALCOBSTACLEADDR.X
  2169 1A76 20 18 13			jsr CALCOBSTACLEADDR
  2170 1A79 B4 17			ldy :STACKORIGIN-1,x
  2171 1A7B B5 18			lda :STACKORIGIN,x
  2172 1A7D 99 DE 2A			sta adr.OBSTACLES,y
  2173 1A80 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2174 1A82 99 DF 2A			sta adr.OBSTACLES+1,y
  2175 1A85 CA				dex
  2176
  2177 				; optimize FAIL (1, levels.inc), line = 24
  2178
  2179 1A86 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2180 1A8A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2181 1A8E A9 06			lda #$06
  2182 1A90 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2183 1A93 A9 1E			lda #$1E
  2184 1A95 8D FA 2A			sta CALCOBSTACLEADDR.X
  2185 1A98 20 18 13			jsr CALCOBSTACLEADDR
  2186 1A9B B4 17			ldy :STACKORIGIN-1,x
  2187 1A9D B5 18			lda :STACKORIGIN,x
  2188 1A9F 99 DE 2A			sta adr.OBSTACLES,y
  2189 1AA2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2190 1AA4 99 DF 2A			sta adr.OBSTACLES+1,y
  2191 1AA7 CA				dex
  2192
  2193 				; optimize FAIL (1, levels.inc), line = 25
  2194
  2195 1AA8 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2196 1AAC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2197 1AB0 A9 12			lda #$12
  2198 1AB2 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2199 1AB5 A9 0A			lda #$0A
  2200 1AB7 8D FA 2A			sta CALCOBSTACLEADDR.X
  2201 1ABA 20 18 13			jsr CALCOBSTACLEADDR
  2202 1ABD B4 17			ldy :STACKORIGIN-1,x
  2203 1ABF B5 18			lda :STACKORIGIN,x
  2204 1AC1 99 DE 2A			sta adr.OBSTACLES,y
  2205 1AC4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2206 1AC6 99 DF 2A			sta adr.OBSTACLES+1,y
  2207 1AC9 CA				dex
  2208
  2209 				; optimize FAIL (1, levels.inc), line = 26
  2210
  2211 1ACA A9 06 95 18			mva #$06 :STACKORIGIN,x
  2212 1ACE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2213 1AD2 A9 12			lda #$12
  2214 1AD4 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2215 1AD7 A9 1E			lda #$1E
  2216 1AD9 8D FA 2A			sta CALCOBSTACLEADDR.X
  2217 1ADC 20 18 13			jsr CALCOBSTACLEADDR
  2218 1ADF B4 17			ldy :STACKORIGIN-1,x
  2219 1AE1 B5 18			lda :STACKORIGIN,x
  2220 1AE3 99 DE 2A			sta adr.OBSTACLES,y
  2221 1AE6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2222 1AE8 99 DF 2A			sta adr.OBSTACLES+1,y
  2223 1AEB CA				dex
  2224
  2225 				; optimize FAIL (1, levels.inc), line = 27
  2226
  2227 1AEC A9 08 95 18			mva #$08 :STACKORIGIN,x
  2228 1AF0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2229 1AF4 A9 02			lda #$02
  2230 1AF6 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2231 1AF9 A9 14			lda #$14
  2232 1AFB 8D FA 2A			sta CALCOBSTACLEADDR.X
  2233 1AFE 20 18 13			jsr CALCOBSTACLEADDR
  2234 1B01 B4 17			ldy :STACKORIGIN-1,x
  2235 1B03 B5 18			lda :STACKORIGIN,x
  2236 1B05 99 DE 2A			sta adr.OBSTACLES,y
  2237 1B08 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2238 1B0A 99 DF 2A			sta adr.OBSTACLES+1,y
  2239 1B0D CA				dex
  2240
  2241 				; optimize FAIL (1, levels.inc), line = 28
  2242
  2243 1B0E A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2244 1B12 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2245 1B16 A9 16			lda #$16
  2246 1B18 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2247 1B1B A9 14			lda #$14
  2248 1B1D 8D FA 2A			sta CALCOBSTACLEADDR.X
  2249 1B20 20 18 13			jsr CALCOBSTACLEADDR
  2250 1B23 B4 17			ldy :STACKORIGIN-1,x
  2251 1B25 B5 18			lda :STACKORIGIN,x
  2252 1B27 99 DE 2A			sta adr.OBSTACLES,y
  2253 1B2A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2254 1B2C 99 DF 2A			sta adr.OBSTACLES+1,y
  2255 1B2F CA				dex
  2256 1B30 CA				dex
  2257 1B31			@exit
  2258 					.ifdef @new
  2259 					lda <@VarData
  2260 					sta :ztmp
  2261 					lda >@VarData
  2262 					ldy #@VarDataSize-1
  2263 					jmp @FreeMem
  2264 					els
  2265 1B31 60				rts						; ret
  2266 					eif
  2267 				.endl
  2268
  2269 1B32			.local	SETLEVEL02					; PROCEDURE
  2270
  2271 				; optimize OK (levels.inc), line = 35
  2272
  2273 1B32 A9 01			lda #$01
  2274 1B34 8D 06 2B			sta SETPLAYER.ISALIVE
  2275 1B37 A9 62			lda #$62
  2276 1B39 8D 05 2B			sta SETPLAYER.COLOUR
  2277 1B3C A9 51			lda #$51
  2278 1B3E 8D 04 2B			sta SETPLAYER.HEAD
  2279 1B41 A9 00			lda #$00
  2280 1B43 8D 03 2B			sta SETPLAYER.BRAIN
  2281 1B46 A9 08			lda #$08
  2282 1B48 8D 02 2B			sta SETPLAYER.DIR
  2283 1B4B A9 0C			lda #$0C
  2284 1B4D 8D 01 2B			sta SETPLAYER.Y
  2285 1B50 A9 0A			lda #$0A
  2286 1B52 8D 00 2B			sta SETPLAYER.X
  2287 1B55 AD 9F 2A			lda PLAYER1
  2288 1B58 8D FE 2A			sta SETPLAYER.P
  2289 1B5B AD A0 2A			lda PLAYER1+1
  2290 1B5E 8D FF 2A			sta SETPLAYER.P+1
  2291 1B61 20 6A 14			jsr SETPLAYER
  2292
  2293 				; optimize OK (levels.inc), line = 36
  2294
  2295 1B64 A9 01			lda #$01
  2296 1B66 8D 06 2B			sta SETPLAYER.ISALIVE
  2297 1B69 A9 5D			lda #$5D
  2298 1B6B 8D 05 2B			sta SETPLAYER.COLOUR
  2299 1B6E A9 51			lda #$51
  2300 1B70 8D 04 2B			sta SETPLAYER.HEAD
  2301 1B73 A9 03			lda #$03
  2302 1B75 8D 03 2B			sta SETPLAYER.BRAIN
  2303 1B78 A9 04			lda #$04
  2304 1B7A 8D 02 2B			sta SETPLAYER.DIR
  2305 1B7D A9 0C			lda #$0C
  2306 1B7F 8D 01 2B			sta SETPLAYER.Y
  2307 1B82 A9 1E			lda #$1E
  2308 1B84 8D 00 2B			sta SETPLAYER.X
  2309 1B87 AD A1 2A			lda PLAYER2
  2310 1B8A 8D FE 2A			sta SETPLAYER.P
  2311 1B8D AD A2 2A			lda PLAYER2+1
  2312 1B90 8D FF 2A			sta SETPLAYER.P+1
  2313 1B93 20 6A 14			jsr SETPLAYER
  2314
  2315 				; optimize FAIL (1, levels.inc), line = 38
  2316
  2317 1B96 E8				inx
  2318 1B97 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2319 1B9B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2320 1B9D A9 06			lda #$06
  2321 1B9F 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2322 1BA2 A9 0A			lda #$0A
  2323 1BA4 8D FA 2A			sta CALCOBSTACLEADDR.X
  2324 1BA7 20 18 13			jsr CALCOBSTACLEADDR
  2325 1BAA B4 17			ldy :STACKORIGIN-1,x
  2326 1BAC B5 18			lda :STACKORIGIN,x
  2327 1BAE 99 DE 2A			sta adr.OBSTACLES,y
  2328 1BB1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2329 1BB3 99 DF 2A			sta adr.OBSTACLES+1,y
  2330 1BB6 CA				dex
  2331
  2332 				; optimize FAIL (1, levels.inc), line = 39
  2333
  2334 1BB7 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2335 1BBB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2336 1BBF A9 06			lda #$06
  2337 1BC1 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2338 1BC4 A9 1E			lda #$1E
  2339 1BC6 8D FA 2A			sta CALCOBSTACLEADDR.X
  2340 1BC9 20 18 13			jsr CALCOBSTACLEADDR
  2341 1BCC B4 17			ldy :STACKORIGIN-1,x
  2342 1BCE B5 18			lda :STACKORIGIN,x
  2343 1BD0 99 DE 2A			sta adr.OBSTACLES,y
  2344 1BD3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2345 1BD5 99 DF 2A			sta adr.OBSTACLES+1,y
  2346 1BD8 CA				dex
  2347
  2348 				; optimize FAIL (1, levels.inc), line = 40
  2349
  2350 1BD9 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2351 1BDD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2352 1BE1 A9 12			lda #$12
  2353 1BE3 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2354 1BE6 A9 0A			lda #$0A
  2355 1BE8 8D FA 2A			sta CALCOBSTACLEADDR.X
  2356 1BEB 20 18 13			jsr CALCOBSTACLEADDR
  2357 1BEE B4 17			ldy :STACKORIGIN-1,x
  2358 1BF0 B5 18			lda :STACKORIGIN,x
  2359 1BF2 99 DE 2A			sta adr.OBSTACLES,y
  2360 1BF5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2361 1BF7 99 DF 2A			sta adr.OBSTACLES+1,y
  2362 1BFA CA				dex
  2363
  2364 				; optimize FAIL (1, levels.inc), line = 41
  2365
  2366 1BFB A9 06 95 18			mva #$06 :STACKORIGIN,x
  2367 1BFF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2368 1C03 A9 12			lda #$12
  2369 1C05 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2370 1C08 A9 1E			lda #$1E
  2371 1C0A 8D FA 2A			sta CALCOBSTACLEADDR.X
  2372 1C0D 20 18 13			jsr CALCOBSTACLEADDR
  2373 1C10 B4 17			ldy :STACKORIGIN-1,x
  2374 1C12 B5 18			lda :STACKORIGIN,x
  2375 1C14 99 DE 2A			sta adr.OBSTACLES,y
  2376 1C17 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2377 1C19 99 DF 2A			sta adr.OBSTACLES+1,y
  2378 1C1C CA				dex
  2379
  2380 				; optimize FAIL (1, levels.inc), line = 42
  2381
  2382 1C1D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2383 1C21 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2384 1C25 A9 02			lda #$02
  2385 1C27 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2386 1C2A A9 14			lda #$14
  2387 1C2C 8D FA 2A			sta CALCOBSTACLEADDR.X
  2388 1C2F 20 18 13			jsr CALCOBSTACLEADDR
  2389 1C32 B4 17			ldy :STACKORIGIN-1,x
  2390 1C34 B5 18			lda :STACKORIGIN,x
  2391 1C36 99 DE 2A			sta adr.OBSTACLES,y
  2392 1C39 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2393 1C3B 99 DF 2A			sta adr.OBSTACLES+1,y
  2394 1C3E CA				dex
  2395
  2396 				; optimize FAIL (1, levels.inc), line = 43
  2397
  2398 1C3F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2399 1C43 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2400 1C47 A9 16			lda #$16
  2401 1C49 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2402 1C4C A9 14			lda #$14
  2403 1C4E 8D FA 2A			sta CALCOBSTACLEADDR.X
  2404 1C51 20 18 13			jsr CALCOBSTACLEADDR
  2405 1C54 B4 17			ldy :STACKORIGIN-1,x
  2406 1C56 B5 18			lda :STACKORIGIN,x
  2407 1C58 99 DE 2A			sta adr.OBSTACLES,y
  2408 1C5B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2409 1C5D 99 DF 2A			sta adr.OBSTACLES+1,y
  2410 1C60 CA				dex
  2411 1C61 CA				dex
  2412 1C62			@exit
  2413 					.ifdef @new
  2414 					lda <@VarData
  2415 					sta :ztmp
  2416 					lda >@VarData
  2417 					ldy #@VarDataSize-1
  2418 					jmp @FreeMem
  2419 					els
  2420 1C62 60				rts						; ret
  2421 					eif
  2422 				.endl
  2423
  2424 1C63			.local	SETLEVEL03					; PROCEDURE
  2425
  2426 				; optimize OK (levels.inc), line = 50
  2427
  2428 1C63 A9 01			lda #$01
  2429 1C65 8D 06 2B			sta SETPLAYER.ISALIVE
  2430 1C68 A9 62			lda #$62
  2431 1C6A 8D 05 2B			sta SETPLAYER.COLOUR
  2432 1C6D A9 51			lda #$51
  2433 1C6F 8D 04 2B			sta SETPLAYER.HEAD
  2434 1C72 A9 00			lda #$00
  2435 1C74 8D 03 2B			sta SETPLAYER.BRAIN
  2436 1C77 A9 08			lda #$08
  2437 1C79 8D 02 2B			sta SETPLAYER.DIR
  2438 1C7C A9 0C			lda #$0C
  2439 1C7E 8D 01 2B			sta SETPLAYER.Y
  2440 1C81 A9 0A			lda #$0A
  2441 1C83 8D 00 2B			sta SETPLAYER.X
  2442 1C86 AD 9F 2A			lda PLAYER1
  2443 1C89 8D FE 2A			sta SETPLAYER.P
  2444 1C8C AD A0 2A			lda PLAYER1+1
  2445 1C8F 8D FF 2A			sta SETPLAYER.P+1
  2446 1C92 20 6A 14			jsr SETPLAYER
  2447
  2448 				; optimize OK (levels.inc), line = 51
  2449
  2450 1C95 A9 01			lda #$01
  2451 1C97 8D 06 2B			sta SETPLAYER.ISALIVE
  2452 1C9A A9 5D			lda #$5D
  2453 1C9C 8D 05 2B			sta SETPLAYER.COLOUR
  2454 1C9F A9 51			lda #$51
  2455 1CA1 8D 04 2B			sta SETPLAYER.HEAD
  2456 1CA4 A9 02			lda #$02
  2457 1CA6 8D 03 2B			sta SETPLAYER.BRAIN
  2458 1CA9 A9 04			lda #$04
  2459 1CAB 8D 02 2B			sta SETPLAYER.DIR
  2460 1CAE A9 0C			lda #$0C
  2461 1CB0 8D 01 2B			sta SETPLAYER.Y
  2462 1CB3 A9 1E			lda #$1E
  2463 1CB5 8D 00 2B			sta SETPLAYER.X
  2464 1CB8 AD A1 2A			lda PLAYER2
  2465 1CBB 8D FE 2A			sta SETPLAYER.P
  2466 1CBE AD A2 2A			lda PLAYER2+1
  2467 1CC1 8D FF 2A			sta SETPLAYER.P+1
  2468 1CC4 20 6A 14			jsr SETPLAYER
  2469
  2470 				; optimize FAIL (1, levels.inc), line = 53
  2471
  2472 1CC7 E8				inx
  2473 1CC8 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2474 1CCC 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2475 1CCE A9 06			lda #$06
  2476 1CD0 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2477 1CD3 A9 0A			lda #$0A
  2478 1CD5 8D FA 2A			sta CALCOBSTACLEADDR.X
  2479 1CD8 20 18 13			jsr CALCOBSTACLEADDR
  2480 1CDB B4 17			ldy :STACKORIGIN-1,x
  2481 1CDD B5 18			lda :STACKORIGIN,x
  2482 1CDF 99 DE 2A			sta adr.OBSTACLES,y
  2483 1CE2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2484 1CE4 99 DF 2A			sta adr.OBSTACLES+1,y
  2485 1CE7 CA				dex
  2486
  2487 				; optimize FAIL (1, levels.inc), line = 54
  2488
  2489 1CE8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2490 1CEC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2491 1CF0 A9 06			lda #$06
  2492 1CF2 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2493 1CF5 A9 1E			lda #$1E
  2494 1CF7 8D FA 2A			sta CALCOBSTACLEADDR.X
  2495 1CFA 20 18 13			jsr CALCOBSTACLEADDR
  2496 1CFD B4 17			ldy :STACKORIGIN-1,x
  2497 1CFF B5 18			lda :STACKORIGIN,x
  2498 1D01 99 DE 2A			sta adr.OBSTACLES,y
  2499 1D04 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2500 1D06 99 DF 2A			sta adr.OBSTACLES+1,y
  2501 1D09 CA				dex
  2502
  2503 				; optimize FAIL (1, levels.inc), line = 55
  2504
  2505 1D0A A9 04 95 18			mva #$04 :STACKORIGIN,x
  2506 1D0E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2507 1D12 A9 12			lda #$12
  2508 1D14 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2509 1D17 A9 0A			lda #$0A
  2510 1D19 8D FA 2A			sta CALCOBSTACLEADDR.X
  2511 1D1C 20 18 13			jsr CALCOBSTACLEADDR
  2512 1D1F B4 17			ldy :STACKORIGIN-1,x
  2513 1D21 B5 18			lda :STACKORIGIN,x
  2514 1D23 99 DE 2A			sta adr.OBSTACLES,y
  2515 1D26 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2516 1D28 99 DF 2A			sta adr.OBSTACLES+1,y
  2517 1D2B CA				dex
  2518
  2519 				; optimize FAIL (1, levels.inc), line = 56
  2520
  2521 1D2C A9 06 95 18			mva #$06 :STACKORIGIN,x
  2522 1D30 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2523 1D34 A9 12			lda #$12
  2524 1D36 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2525 1D39 A9 1E			lda #$1E
  2526 1D3B 8D FA 2A			sta CALCOBSTACLEADDR.X
  2527 1D3E 20 18 13			jsr CALCOBSTACLEADDR
  2528 1D41 B4 17			ldy :STACKORIGIN-1,x
  2529 1D43 B5 18			lda :STACKORIGIN,x
  2530 1D45 99 DE 2A			sta adr.OBSTACLES,y
  2531 1D48 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2532 1D4A 99 DF 2A			sta adr.OBSTACLES+1,y
  2533 1D4D CA				dex
  2534
  2535 				; optimize FAIL (1, levels.inc), line = 57
  2536
  2537 1D4E A9 08 95 18			mva #$08 :STACKORIGIN,x
  2538 1D52 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2539 1D56 A9 0C			lda #$0C
  2540 1D58 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2541 1D5B A9 01			lda #$01
  2542 1D5D 8D FA 2A			sta CALCOBSTACLEADDR.X
  2543 1D60 20 18 13			jsr CALCOBSTACLEADDR
  2544 1D63 B4 17			ldy :STACKORIGIN-1,x
  2545 1D65 B5 18			lda :STACKORIGIN,x
  2546 1D67 99 DE 2A			sta adr.OBSTACLES,y
  2547 1D6A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2548 1D6C 99 DF 2A			sta adr.OBSTACLES+1,y
  2549 1D6F CA				dex
  2550
  2551 				; optimize FAIL (1, levels.inc), line = 58
  2552
  2553 1D70 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2554 1D74 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2555 1D78 A9 02			lda #$02
  2556 1D7A 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2557 1D7D A9 14			lda #$14
  2558 1D7F 8D FA 2A			sta CALCOBSTACLEADDR.X
  2559 1D82 20 18 13			jsr CALCOBSTACLEADDR
  2560 1D85 B4 17			ldy :STACKORIGIN-1,x
  2561 1D87 B5 18			lda :STACKORIGIN,x
  2562 1D89 99 DE 2A			sta adr.OBSTACLES,y
  2563 1D8C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2564 1D8E 99 DF 2A			sta adr.OBSTACLES+1,y
  2565 1D91 CA				dex
  2566
  2567 				; optimize FAIL (1, levels.inc), line = 59
  2568
  2569 1D92 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2570 1D96 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2571 1D9A A9 16			lda #$16
  2572 1D9C 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2573 1D9F A9 14			lda #$14
  2574 1DA1 8D FA 2A			sta CALCOBSTACLEADDR.X
  2575 1DA4 20 18 13			jsr CALCOBSTACLEADDR
  2576 1DA7 B4 17			ldy :STACKORIGIN-1,x
  2577 1DA9 B5 18			lda :STACKORIGIN,x
  2578 1DAB 99 DE 2A			sta adr.OBSTACLES,y
  2579 1DAE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2580 1DB0 99 DF 2A			sta adr.OBSTACLES+1,y
  2581 1DB3 CA				dex
  2582 1DB4 CA				dex
  2583 1DB5			@exit
  2584 					.ifdef @new
  2585 					lda <@VarData
  2586 					sta :ztmp
  2587 					lda >@VarData
  2588 					ldy #@VarDataSize-1
  2589 					jmp @FreeMem
  2590 					els
  2591 1DB5 60				rts						; ret
  2592 					eif
  2593 				.endl
  2594
  2595 1DB6			.local	SETLEVEL04					; PROCEDURE
  2596
  2597 				; optimize OK (levels.inc), line = 66
  2598
  2599 1DB6 A9 01			lda #$01
  2600 1DB8 8D 06 2B			sta SETPLAYER.ISALIVE
  2601 1DBB A9 62			lda #$62
  2602 1DBD 8D 05 2B			sta SETPLAYER.COLOUR
  2603 1DC0 A9 51			lda #$51
  2604 1DC2 8D 04 2B			sta SETPLAYER.HEAD
  2605 1DC5 A9 00			lda #$00
  2606 1DC7 8D 03 2B			sta SETPLAYER.BRAIN
  2607 1DCA A9 04			lda #$04
  2608 1DCC 8D 02 2B			sta SETPLAYER.DIR
  2609 1DCF A9 0C			lda #$0C
  2610 1DD1 8D 01 2B			sta SETPLAYER.Y
  2611 1DD4 A9 12			lda #$12
  2612 1DD6 8D 00 2B			sta SETPLAYER.X
  2613 1DD9 AD 9F 2A			lda PLAYER1
  2614 1DDC 8D FE 2A			sta SETPLAYER.P
  2615 1DDF AD A0 2A			lda PLAYER1+1
  2616 1DE2 8D FF 2A			sta SETPLAYER.P+1
  2617 1DE5 20 6A 14			jsr SETPLAYER
  2618
  2619 				; optimize OK (levels.inc), line = 67
  2620
  2621 1DE8 A9 01			lda #$01
  2622 1DEA 8D 06 2B			sta SETPLAYER.ISALIVE
  2623 1DED A9 5D			lda #$5D
  2624 1DEF 8D 05 2B			sta SETPLAYER.COLOUR
  2625 1DF2 A9 51			lda #$51
  2626 1DF4 8D 04 2B			sta SETPLAYER.HEAD
  2627 1DF7 A9 04			lda #$04
  2628 1DF9 8D 03 2B			sta SETPLAYER.BRAIN
  2629 1DFC A9 08			lda #$08
  2630 1DFE 8D 02 2B			sta SETPLAYER.DIR
  2631 1E01 A9 0C			lda #$0C
  2632 1E03 8D 01 2B			sta SETPLAYER.Y
  2633 1E06 A9 16			lda #$16
  2634 1E08 8D 00 2B			sta SETPLAYER.X
  2635 1E0B AD A1 2A			lda PLAYER2
  2636 1E0E 8D FE 2A			sta SETPLAYER.P
  2637 1E11 AD A2 2A			lda PLAYER2+1
  2638 1E14 8D FF 2A			sta SETPLAYER.P+1
  2639 1E17 20 6A 14			jsr SETPLAYER
  2640
  2641 				; optimize FAIL (1, levels.inc), line = 69
  2642
  2643 1E1A E8				inx
  2644 1E1B A9 00 95 18			mva #$00 :STACKORIGIN,x
  2645 1E1F 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2646 1E21 A9 06			lda #$06
  2647 1E23 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2648 1E26 A9 0A			lda #$0A
  2649 1E28 8D FA 2A			sta CALCOBSTACLEADDR.X
  2650 1E2B 20 18 13			jsr CALCOBSTACLEADDR
  2651 1E2E B4 17			ldy :STACKORIGIN-1,x
  2652 1E30 B5 18			lda :STACKORIGIN,x
  2653 1E32 99 DE 2A			sta adr.OBSTACLES,y
  2654 1E35 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2655 1E37 99 DF 2A			sta adr.OBSTACLES+1,y
  2656 1E3A CA				dex
  2657
  2658 				; optimize FAIL (1, levels.inc), line = 70
  2659
  2660 1E3B A9 02 95 18			mva #$02 :STACKORIGIN,x
  2661 1E3F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2662 1E43 A9 06			lda #$06
  2663 1E45 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2664 1E48 A9 1E			lda #$1E
  2665 1E4A 8D FA 2A			sta CALCOBSTACLEADDR.X
  2666 1E4D 20 18 13			jsr CALCOBSTACLEADDR
  2667 1E50 B4 17			ldy :STACKORIGIN-1,x
  2668 1E52 B5 18			lda :STACKORIGIN,x
  2669 1E54 99 DE 2A			sta adr.OBSTACLES,y
  2670 1E57 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2671 1E59 99 DF 2A			sta adr.OBSTACLES+1,y
  2672 1E5C CA				dex
  2673
  2674 				; optimize FAIL (1, levels.inc), line = 71
  2675
  2676 1E5D A9 04 95 18			mva #$04 :STACKORIGIN,x
  2677 1E61 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2678 1E65 A9 12			lda #$12
  2679 1E67 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2680 1E6A A9 0A			lda #$0A
  2681 1E6C 8D FA 2A			sta CALCOBSTACLEADDR.X
  2682 1E6F 20 18 13			jsr CALCOBSTACLEADDR
  2683 1E72 B4 17			ldy :STACKORIGIN-1,x
  2684 1E74 B5 18			lda :STACKORIGIN,x
  2685 1E76 99 DE 2A			sta adr.OBSTACLES,y
  2686 1E79 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2687 1E7B 99 DF 2A			sta adr.OBSTACLES+1,y
  2688 1E7E CA				dex
  2689
  2690 				; optimize FAIL (1, levels.inc), line = 72
  2691
  2692 1E7F A9 06 95 18			mva #$06 :STACKORIGIN,x
  2693 1E83 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2694 1E87 A9 12			lda #$12
  2695 1E89 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2696 1E8C A9 1E			lda #$1E
  2697 1E8E 8D FA 2A			sta CALCOBSTACLEADDR.X
  2698 1E91 20 18 13			jsr CALCOBSTACLEADDR
  2699 1E94 B4 17			ldy :STACKORIGIN-1,x
  2700 1E96 B5 18			lda :STACKORIGIN,x
  2701 1E98 99 DE 2A			sta adr.OBSTACLES,y
  2702 1E9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2703 1E9D 99 DF 2A			sta adr.OBSTACLES+1,y
  2704 1EA0 CA				dex
  2705
  2706 				; optimize FAIL (1, levels.inc), line = 73
  2707
  2708 1EA1 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2709 1EA5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2710 1EA9 A9 0C			lda #$0C
  2711 1EAB 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2712 1EAE A9 01			lda #$01
  2713 1EB0 8D FA 2A			sta CALCOBSTACLEADDR.X
  2714 1EB3 20 18 13			jsr CALCOBSTACLEADDR
  2715 1EB6 B4 17			ldy :STACKORIGIN-1,x
  2716 1EB8 B5 18			lda :STACKORIGIN,x
  2717 1EBA 99 DE 2A			sta adr.OBSTACLES,y
  2718 1EBD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2719 1EBF 99 DF 2A			sta adr.OBSTACLES+1,y
  2720 1EC2 CA				dex
  2721
  2722 				; optimize FAIL (1, levels.inc), line = 74
  2723
  2724 1EC3 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2725 1EC7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2726 1ECB A9 02			lda #$02
  2727 1ECD 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2728 1ED0 A9 14			lda #$14
  2729 1ED2 8D FA 2A			sta CALCOBSTACLEADDR.X
  2730 1ED5 20 18 13			jsr CALCOBSTACLEADDR
  2731 1ED8 B4 17			ldy :STACKORIGIN-1,x
  2732 1EDA B5 18			lda :STACKORIGIN,x
  2733 1EDC 99 DE 2A			sta adr.OBSTACLES,y
  2734 1EDF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2735 1EE1 99 DF 2A			sta adr.OBSTACLES+1,y
  2736 1EE4 CA				dex
  2737
  2738 				; optimize FAIL (1, levels.inc), line = 75
  2739
  2740 1EE5 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2741 1EE9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2742 1EED A9 16			lda #$16
  2743 1EEF 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2744 1EF2 A9 14			lda #$14
  2745 1EF4 8D FA 2A			sta CALCOBSTACLEADDR.X
  2746 1EF7 20 18 13			jsr CALCOBSTACLEADDR
  2747 1EFA B4 17			ldy :STACKORIGIN-1,x
  2748 1EFC B5 18			lda :STACKORIGIN,x
  2749 1EFE 99 DE 2A			sta adr.OBSTACLES,y
  2750 1F01 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2751 1F03 99 DF 2A			sta adr.OBSTACLES+1,y
  2752 1F06 CA				dex
  2753
  2754 				; optimize FAIL (1, levels.inc), line = 76
  2755
  2756 1F07 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2757 1F0B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2758 1F0F A9 0C			lda #$0C
  2759 1F11 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2760 1F14 A9 14			lda #$14
  2761 1F16 8D FA 2A			sta CALCOBSTACLEADDR.X
  2762 1F19 20 18 13			jsr CALCOBSTACLEADDR
  2763 1F1C B4 17			ldy :STACKORIGIN-1,x
  2764 1F1E B5 18			lda :STACKORIGIN,x
  2765 1F20 99 DE 2A			sta adr.OBSTACLES,y
  2766 1F23 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2767 1F25 99 DF 2A			sta adr.OBSTACLES+1,y
  2768 1F28 CA				dex
  2769 1F29 CA				dex
  2770 1F2A			@exit
  2771 					.ifdef @new
  2772 					lda <@VarData
  2773 					sta :ztmp
  2774 					lda >@VarData
  2775 					ldy #@VarDataSize-1
  2776 					jmp @FreeMem
  2777 					els
  2778 1F2A 60				rts						; ret
  2779 					eif
  2780 				.endl
  2781
  2782 1F2B			.local	SETLEVEL05					; PROCEDURE
  2783
  2784 				; optimize OK (levels.inc), line = 83
  2785
  2786 1F2B A9 01			lda #$01
  2787 1F2D 8D 06 2B			sta SETPLAYER.ISALIVE
  2788 1F30 A9 62			lda #$62
  2789 1F32 8D 05 2B			sta SETPLAYER.COLOUR
  2790 1F35 A9 51			lda #$51
  2791 1F37 8D 04 2B			sta SETPLAYER.HEAD
  2792 1F3A A9 00			lda #$00
  2793 1F3C 8D 03 2B			sta SETPLAYER.BRAIN
  2794 1F3F A9 08			lda #$08
  2795 1F41 8D 02 2B			sta SETPLAYER.DIR
  2796 1F44 A9 0C			lda #$0C
  2797 1F46 8D 01 2B			sta SETPLAYER.Y
  2798 1F49 A9 0A			lda #$0A
  2799 1F4B 8D 00 2B			sta SETPLAYER.X
  2800 1F4E AD 9F 2A			lda PLAYER1
  2801 1F51 8D FE 2A			sta SETPLAYER.P
  2802 1F54 AD A0 2A			lda PLAYER1+1
  2803 1F57 8D FF 2A			sta SETPLAYER.P+1
  2804 1F5A 20 6A 14			jsr SETPLAYER
  2805
  2806 				; optimize OK (levels.inc), line = 84
  2807
  2808 1F5D A9 01			lda #$01
  2809 1F5F 8D 06 2B			sta SETPLAYER.ISALIVE
  2810 1F62 A9 5D			lda #$5D
  2811 1F64 8D 05 2B			sta SETPLAYER.COLOUR
  2812 1F67 A9 51			lda #$51
  2813 1F69 8D 04 2B			sta SETPLAYER.HEAD
  2814 1F6C A9 04			lda #$04
  2815 1F6E 8D 03 2B			sta SETPLAYER.BRAIN
  2816 1F71 8D 02 2B			sta SETPLAYER.DIR
  2817 1F74 A9 0C			lda #$0C
  2818 1F76 8D 01 2B			sta SETPLAYER.Y
  2819 1F79 A9 1E			lda #$1E
  2820 1F7B 8D 00 2B			sta SETPLAYER.X
  2821 1F7E AD A1 2A			lda PLAYER2
  2822 1F81 8D FE 2A			sta SETPLAYER.P
  2823 1F84 AD A2 2A			lda PLAYER2+1
  2824 1F87 8D FF 2A			sta SETPLAYER.P+1
  2825 1F8A 20 6A 14			jsr SETPLAYER
  2826
  2827 				; optimize OK (levels.inc), line = 85
  2828
  2829 1F8D A9 01			lda #$01
  2830 1F8F 8D 06 2B			sta SETPLAYER.ISALIVE
  2831 1F92 A9 71			lda #$71
  2832 1F94 8D 05 2B			sta SETPLAYER.COLOUR
  2833 1F97 A9 51			lda #$51
  2834 1F99 8D 04 2B			sta SETPLAYER.HEAD
  2835 1F9C A9 03			lda #$03
  2836 1F9E 8D 03 2B			sta SETPLAYER.BRAIN
  2837 1FA1 A9 02			lda #$02
  2838 1FA3 8D 02 2B			sta SETPLAYER.DIR
  2839 1FA6 A9 04			lda #$04
  2840 1FA8 8D 01 2B			sta SETPLAYER.Y
  2841 1FAB A9 14			lda #$14
  2842 1FAD 8D 00 2B			sta SETPLAYER.X
  2843 1FB0 AD A3 2A			lda PLAYER3
  2844 1FB3 8D FE 2A			sta SETPLAYER.P
  2845 1FB6 AD A4 2A			lda PLAYER3+1
  2846 1FB9 8D FF 2A			sta SETPLAYER.P+1
  2847 1FBC 20 6A 14			jsr SETPLAYER
  2848
  2849 				; optimize OK (levels.inc), line = 86
  2850
  2851 1FBF A9 01			lda #$01
  2852 1FC1 8D 06 2B			sta SETPLAYER.ISALIVE
  2853 1FC4 A9 55			lda #$55
  2854 1FC6 8D 05 2B			sta SETPLAYER.COLOUR
  2855 1FC9 A9 51			lda #$51
  2856 1FCB 8D 04 2B			sta SETPLAYER.HEAD
  2857 1FCE A9 02			lda #$02
  2858 1FD0 8D 03 2B			sta SETPLAYER.BRAIN
  2859 1FD3 A9 01			lda #$01
  2860 1FD5 8D 02 2B			sta SETPLAYER.DIR
  2861 1FD8 A9 12			lda #$12
  2862 1FDA 8D 01 2B			sta SETPLAYER.Y
  2863 1FDD A9 14			lda #$14
  2864 1FDF 8D 00 2B			sta SETPLAYER.X
  2865 1FE2 AD A5 2A			lda PLAYER4
  2866 1FE5 8D FE 2A			sta SETPLAYER.P
  2867 1FE8 AD A6 2A			lda PLAYER4+1
  2868 1FEB 8D FF 2A			sta SETPLAYER.P+1
  2869 1FEE 20 6A 14			jsr SETPLAYER
  2870
  2871 				; optimize FAIL (1, levels.inc), line = 88
  2872
  2873 1FF1 E8				inx
  2874 1FF2 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2875 1FF6 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2876 1FF8 A9 06			lda #$06
  2877 1FFA 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2878 1FFD A9 0A			lda #$0A
  2879 1FFF 8D FA 2A			sta CALCOBSTACLEADDR.X
  2880 2002 20 18 13			jsr CALCOBSTACLEADDR
  2881 2005 B4 17			ldy :STACKORIGIN-1,x
  2882 2007 B5 18			lda :STACKORIGIN,x
  2883 2009 99 DE 2A			sta adr.OBSTACLES,y
  2884 200C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2885 200E 99 DF 2A			sta adr.OBSTACLES+1,y
  2886 2011 CA				dex
  2887
  2888 				; optimize FAIL (1, levels.inc), line = 89
  2889
  2890 2012 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2891 2016 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2892 201A A9 06			lda #$06
  2893 201C 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2894 201F A9 1E			lda #$1E
  2895 2021 8D FA 2A			sta CALCOBSTACLEADDR.X
  2896 2024 20 18 13			jsr CALCOBSTACLEADDR
  2897 2027 B4 17			ldy :STACKORIGIN-1,x
  2898 2029 B5 18			lda :STACKORIGIN,x
  2899 202B 99 DE 2A			sta adr.OBSTACLES,y
  2900 202E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2901 2030 99 DF 2A			sta adr.OBSTACLES+1,y
  2902 2033 CA				dex
  2903
  2904 				; optimize FAIL (1, levels.inc), line = 90
  2905
  2906 2034 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2907 2038 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2908 203C A9 12			lda #$12
  2909 203E 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2910 2041 A9 0A			lda #$0A
  2911 2043 8D FA 2A			sta CALCOBSTACLEADDR.X
  2912 2046 20 18 13			jsr CALCOBSTACLEADDR
  2913 2049 B4 17			ldy :STACKORIGIN-1,x
  2914 204B B5 18			lda :STACKORIGIN,x
  2915 204D 99 DE 2A			sta adr.OBSTACLES,y
  2916 2050 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2917 2052 99 DF 2A			sta adr.OBSTACLES+1,y
  2918 2055 CA				dex
  2919
  2920 				; optimize FAIL (1, levels.inc), line = 91
  2921
  2922 2056 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2923 205A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2924 205E A9 12			lda #$12
  2925 2060 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2926 2063 A9 1E			lda #$1E
  2927 2065 8D FA 2A			sta CALCOBSTACLEADDR.X
  2928 2068 20 18 13			jsr CALCOBSTACLEADDR
  2929 206B B4 17			ldy :STACKORIGIN-1,x
  2930 206D B5 18			lda :STACKORIGIN,x
  2931 206F 99 DE 2A			sta adr.OBSTACLES,y
  2932 2072 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2933 2074 99 DF 2A			sta adr.OBSTACLES+1,y
  2934 2077 CA				dex
  2935
  2936 				; optimize FAIL (1, levels.inc), line = 92
  2937
  2938 2078 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2939 207C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2940 2080 A9 0C			lda #$0C
  2941 2082 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2942 2085 A9 01			lda #$01
  2943 2087 8D FA 2A			sta CALCOBSTACLEADDR.X
  2944 208A 20 18 13			jsr CALCOBSTACLEADDR
  2945 208D B4 17			ldy :STACKORIGIN-1,x
  2946 208F B5 18			lda :STACKORIGIN,x
  2947 2091 99 DE 2A			sta adr.OBSTACLES,y
  2948 2094 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2949 2096 99 DF 2A			sta adr.OBSTACLES+1,y
  2950 2099 CA				dex
  2951
  2952 				; optimize FAIL (1, levels.inc), line = 93
  2953
  2954 209A A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2955 209E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2956 20A2 A9 02			lda #$02
  2957 20A4 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2958 20A7 A9 14			lda #$14
  2959 20A9 8D FA 2A			sta CALCOBSTACLEADDR.X
  2960 20AC 20 18 13			jsr CALCOBSTACLEADDR
  2961 20AF B4 17			ldy :STACKORIGIN-1,x
  2962 20B1 B5 18			lda :STACKORIGIN,x
  2963 20B3 99 DE 2A			sta adr.OBSTACLES,y
  2964 20B6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2965 20B8 99 DF 2A			sta adr.OBSTACLES+1,y
  2966 20BB CA				dex
  2967
  2968 				; optimize FAIL (1, levels.inc), line = 94
  2969
  2970 20BC A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2971 20C0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2972 20C4 A9 16			lda #$16
  2973 20C6 8D FB 2A			sta CALCOBSTACLEADDR.Y
  2974 20C9 A9 14			lda #$14
  2975 20CB 8D FA 2A			sta CALCOBSTACLEADDR.X
  2976 20CE 20 18 13			jsr CALCOBSTACLEADDR
  2977 20D1 B4 17			ldy :STACKORIGIN-1,x
  2978 20D3 B5 18			lda :STACKORIGIN,x
  2979 20D5 99 DE 2A			sta adr.OBSTACLES,y
  2980 20D8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2981 20DA 99 DF 2A			sta adr.OBSTACLES+1,y
  2982 20DD CA				dex
  2983 20DE CA				dex
  2984 20DF			@exit
  2985 					.ifdef @new
  2986 					lda <@VarData
  2987 					sta :ztmp
  2988 					lda >@VarData
  2989 					ldy #@VarDataSize-1
  2990 					jmp @FreeMem
  2991 					els
  2992 20DF 60				rts						; ret
  2993 					eif
  2994 				.endl
  2995
  2996 20E0			.local	SETLEVEL06					; PROCEDURE
  2997
  2998 				; optimize OK (levels.inc), line = 101
  2999
  3000 20E0 A9 01			lda #$01
  3001 20E2 8D 06 2B			sta SETPLAYER.ISALIVE
  3002 20E5 A9 62			lda #$62
  3003 20E7 8D 05 2B			sta SETPLAYER.COLOUR
  3004 20EA A9 51			lda #$51
  3005 20EC 8D 04 2B			sta SETPLAYER.HEAD
  3006 20EF A9 00			lda #$00
  3007 20F1 8D 03 2B			sta SETPLAYER.BRAIN
  3008 20F4 A9 04			lda #$04
  3009 20F6 8D 02 2B			sta SETPLAYER.DIR
  3010 20F9 A9 0C			lda #$0C
  3011 20FB 8D 01 2B			sta SETPLAYER.Y
  3012 20FE A9 12			lda #$12
  3013 2100 8D 00 2B			sta SETPLAYER.X
  3014 2103 AD 9F 2A			lda PLAYER1
  3015 2106 8D FE 2A			sta SETPLAYER.P
  3016 2109 AD A0 2A			lda PLAYER1+1
  3017 210C 8D FF 2A			sta SETPLAYER.P+1
  3018 210F 20 6A 14			jsr SETPLAYER
  3019
  3020 				; optimize OK (levels.inc), line = 102
  3021
  3022 2112 A9 01			lda #$01
  3023 2114 8D 06 2B			sta SETPLAYER.ISALIVE
  3024 2117 A9 5D			lda #$5D
  3025 2119 8D 05 2B			sta SETPLAYER.COLOUR
  3026 211C A9 51			lda #$51
  3027 211E 8D 04 2B			sta SETPLAYER.HEAD
  3028 2121 A9 02			lda #$02
  3029 2123 8D 03 2B			sta SETPLAYER.BRAIN
  3030 2126 A9 08			lda #$08
  3031 2128 8D 02 2B			sta SETPLAYER.DIR
  3032 212B A9 0C			lda #$0C
  3033 212D 8D 01 2B			sta SETPLAYER.Y
  3034 2130 A9 16			lda #$16
  3035 2132 8D 00 2B			sta SETPLAYER.X
  3036 2135 AD A1 2A			lda PLAYER2
  3037 2138 8D FE 2A			sta SETPLAYER.P
  3038 213B AD A2 2A			lda PLAYER2+1
  3039 213E 8D FF 2A			sta SETPLAYER.P+1
  3040 2141 20 6A 14			jsr SETPLAYER
  3041
  3042 				; optimize OK (levels.inc), line = 103
  3043
  3044 2144 A9 01			lda #$01
  3045 2146 8D 06 2B			sta SETPLAYER.ISALIVE
  3046 2149 A9 71			lda #$71
  3047 214B 8D 05 2B			sta SETPLAYER.COLOUR
  3048 214E A9 51			lda #$51
  3049 2150 8D 04 2B			sta SETPLAYER.HEAD
  3050 2153 A9 02			lda #$02
  3051 2155 8D 03 2B			sta SETPLAYER.BRAIN
  3052 2158 8D 02 2B			sta SETPLAYER.DIR
  3053 215B A9 06			lda #$06
  3054 215D 8D 01 2B			sta SETPLAYER.Y
  3055 2160 8D 00 2B			sta SETPLAYER.X
  3056 2163 AD A3 2A			lda PLAYER3
  3057 2166 8D FE 2A			sta SETPLAYER.P
  3058 2169 AD A4 2A			lda PLAYER3+1
  3059 216C 8D FF 2A			sta SETPLAYER.P+1
  3060 216F 20 6A 14			jsr SETPLAYER
  3061
  3062 				; optimize OK (levels.inc), line = 104
  3063
  3064 2172 A9 01			lda #$01
  3065 2174 8D 06 2B			sta SETPLAYER.ISALIVE
  3066 2177 A9 55			lda #$55
  3067 2179 8D 05 2B			sta SETPLAYER.COLOUR
  3068 217C A9 51			lda #$51
  3069 217E 8D 04 2B			sta SETPLAYER.HEAD
  3070 2181 A9 03			lda #$03
  3071 2183 8D 03 2B			sta SETPLAYER.BRAIN
  3072 2186 A9 08			lda #$08
  3073 2188 8D 02 2B			sta SETPLAYER.DIR
  3074 218B A9 12			lda #$12
  3075 218D 8D 01 2B			sta SETPLAYER.Y
  3076 2190 A9 24			lda #$24
  3077 2192 8D 00 2B			sta SETPLAYER.X
  3078 2195 AD A5 2A			lda PLAYER4
  3079 2198 8D FE 2A			sta SETPLAYER.P
  3080 219B AD A6 2A			lda PLAYER4+1
  3081 219E 8D FF 2A			sta SETPLAYER.P+1
  3082 21A1 20 6A 14			jsr SETPLAYER
  3083
  3084 				; optimize FAIL (1, levels.inc), line = 106
  3085
  3086 21A4 E8				inx
  3087 21A5 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3088 21A9 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3089 21AB A9 06			lda #$06
  3090 21AD 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3091 21B0 A9 0A			lda #$0A
  3092 21B2 8D FA 2A			sta CALCOBSTACLEADDR.X
  3093 21B5 20 18 13			jsr CALCOBSTACLEADDR
  3094 21B8 B4 17			ldy :STACKORIGIN-1,x
  3095 21BA B5 18			lda :STACKORIGIN,x
  3096 21BC 99 DE 2A			sta adr.OBSTACLES,y
  3097 21BF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3098 21C1 99 DF 2A			sta adr.OBSTACLES+1,y
  3099 21C4 CA				dex
  3100
  3101 				; optimize FAIL (1, levels.inc), line = 107
  3102
  3103 21C5 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3104 21C9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3105 21CD A9 06			lda #$06
  3106 21CF 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3107 21D2 A9 1E			lda #$1E
  3108 21D4 8D FA 2A			sta CALCOBSTACLEADDR.X
  3109 21D7 20 18 13			jsr CALCOBSTACLEADDR
  3110 21DA B4 17			ldy :STACKORIGIN-1,x
  3111 21DC B5 18			lda :STACKORIGIN,x
  3112 21DE 99 DE 2A			sta adr.OBSTACLES,y
  3113 21E1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3114 21E3 99 DF 2A			sta adr.OBSTACLES+1,y
  3115 21E6 CA				dex
  3116
  3117 				; optimize FAIL (1, levels.inc), line = 108
  3118
  3119 21E7 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3120 21EB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3121 21EF A9 12			lda #$12
  3122 21F1 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3123 21F4 A9 0A			lda #$0A
  3124 21F6 8D FA 2A			sta CALCOBSTACLEADDR.X
  3125 21F9 20 18 13			jsr CALCOBSTACLEADDR
  3126 21FC B4 17			ldy :STACKORIGIN-1,x
  3127 21FE B5 18			lda :STACKORIGIN,x
  3128 2200 99 DE 2A			sta adr.OBSTACLES,y
  3129 2203 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3130 2205 99 DF 2A			sta adr.OBSTACLES+1,y
  3131 2208 CA				dex
  3132
  3133 				; optimize FAIL (1, levels.inc), line = 109
  3134
  3135 2209 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3136 220D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3137 2211 A9 12			lda #$12
  3138 2213 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3139 2216 A9 1E			lda #$1E
  3140 2218 8D FA 2A			sta CALCOBSTACLEADDR.X
  3141 221B 20 18 13			jsr CALCOBSTACLEADDR
  3142 221E B4 17			ldy :STACKORIGIN-1,x
  3143 2220 B5 18			lda :STACKORIGIN,x
  3144 2222 99 DE 2A			sta adr.OBSTACLES,y
  3145 2225 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3146 2227 99 DF 2A			sta adr.OBSTACLES+1,y
  3147 222A CA				dex
  3148
  3149 				; optimize FAIL (1, levels.inc), line = 110
  3150
  3151 222B A9 08 95 18			mva #$08 :STACKORIGIN,x
  3152 222F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3153 2233 A9 0C			lda #$0C
  3154 2235 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3155 2238 A9 01			lda #$01
  3156 223A 8D FA 2A			sta CALCOBSTACLEADDR.X
  3157 223D 20 18 13			jsr CALCOBSTACLEADDR
  3158 2240 B4 17			ldy :STACKORIGIN-1,x
  3159 2242 B5 18			lda :STACKORIGIN,x
  3160 2244 99 DE 2A			sta adr.OBSTACLES,y
  3161 2247 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3162 2249 99 DF 2A			sta adr.OBSTACLES+1,y
  3163 224C CA				dex
  3164
  3165 				; optimize FAIL (1, levels.inc), line = 111
  3166
  3167 224D A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3168 2251 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3169 2255 A9 02			lda #$02
  3170 2257 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3171 225A A9 14			lda #$14
  3172 225C 8D FA 2A			sta CALCOBSTACLEADDR.X
  3173 225F 20 18 13			jsr CALCOBSTACLEADDR
  3174 2262 B4 17			ldy :STACKORIGIN-1,x
  3175 2264 B5 18			lda :STACKORIGIN,x
  3176 2266 99 DE 2A			sta adr.OBSTACLES,y
  3177 2269 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3178 226B 99 DF 2A			sta adr.OBSTACLES+1,y
  3179 226E CA				dex
  3180
  3181 				; optimize FAIL (1, levels.inc), line = 112
  3182
  3183 226F A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3184 2273 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3185 2277 A9 16			lda #$16
  3186 2279 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3187 227C A9 14			lda #$14
  3188 227E 8D FA 2A			sta CALCOBSTACLEADDR.X
  3189 2281 20 18 13			jsr CALCOBSTACLEADDR
  3190 2284 B4 17			ldy :STACKORIGIN-1,x
  3191 2286 B5 18			lda :STACKORIGIN,x
  3192 2288 99 DE 2A			sta adr.OBSTACLES,y
  3193 228B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3194 228D 99 DF 2A			sta adr.OBSTACLES+1,y
  3195 2290 CA				dex
  3196
  3197 				; optimize FAIL (1, levels.inc), line = 113
  3198
  3199 2291 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3200 2295 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3201 2299 A9 0C			lda #$0C
  3202 229B 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3203 229E A9 14			lda #$14
  3204 22A0 8D FA 2A			sta CALCOBSTACLEADDR.X
  3205 22A3 20 18 13			jsr CALCOBSTACLEADDR
  3206 22A6 B4 17			ldy :STACKORIGIN-1,x
  3207 22A8 B5 18			lda :STACKORIGIN,x
  3208 22AA 99 DE 2A			sta adr.OBSTACLES,y
  3209 22AD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3210 22AF 99 DF 2A			sta adr.OBSTACLES+1,y
  3211 22B2 CA				dex
  3212 22B3 CA				dex
  3213 22B4			@exit
  3214 					.ifdef @new
  3215 					lda <@VarData
  3216 					sta :ztmp
  3217 					lda >@VarData
  3218 					ldy #@VarDataSize-1
  3219 					jmp @FreeMem
  3220 					els
  3221 22B4 60				rts						; ret
  3222 					eif
  3223 				.endl
  3224
  3225 22B5			.local	SETLEVEL07					; PROCEDURE
  3226
  3227 				; optimize OK (levels.inc), line = 120
  3228
  3229 22B5 A9 01			lda #$01
  3230 22B7 8D 06 2B			sta SETPLAYER.ISALIVE
  3231 22BA A9 62			lda #$62
  3232 22BC 8D 05 2B			sta SETPLAYER.COLOUR
  3233 22BF A9 51			lda #$51
  3234 22C1 8D 04 2B			sta SETPLAYER.HEAD
  3235 22C4 A9 00			lda #$00
  3236 22C6 8D 03 2B			sta SETPLAYER.BRAIN
  3237 22C9 A9 04			lda #$04
  3238 22CB 8D 02 2B			sta SETPLAYER.DIR
  3239 22CE A9 0C			lda #$0C
  3240 22D0 8D 01 2B			sta SETPLAYER.Y
  3241 22D3 A9 12			lda #$12
  3242 22D5 8D 00 2B			sta SETPLAYER.X
  3243 22D8 AD 9F 2A			lda PLAYER1
  3244 22DB 8D FE 2A			sta SETPLAYER.P
  3245 22DE AD A0 2A			lda PLAYER1+1
  3246 22E1 8D FF 2A			sta SETPLAYER.P+1
  3247 22E4 20 6A 14			jsr SETPLAYER
  3248
  3249 				; optimize OK (levels.inc), line = 121
  3250
  3251 22E7 A9 01			lda #$01
  3252 22E9 8D 06 2B			sta SETPLAYER.ISALIVE
  3253 22EC A9 5D			lda #$5D
  3254 22EE 8D 05 2B			sta SETPLAYER.COLOUR
  3255 22F1 A9 51			lda #$51
  3256 22F3 8D 04 2B			sta SETPLAYER.HEAD
  3257 22F6 A9 03			lda #$03
  3258 22F8 8D 03 2B			sta SETPLAYER.BRAIN
  3259 22FB A9 08			lda #$08
  3260 22FD 8D 02 2B			sta SETPLAYER.DIR
  3261 2300 A9 17			lda #$17
  3262 2302 8D 01 2B			sta SETPLAYER.Y
  3263 2305 A9 01			lda #$01
  3264 2307 8D 00 2B			sta SETPLAYER.X
  3265 230A AD A1 2A			lda PLAYER2
  3266 230D 8D FE 2A			sta SETPLAYER.P
  3267 2310 AD A2 2A			lda PLAYER2+1
  3268 2313 8D FF 2A			sta SETPLAYER.P+1
  3269 2316 20 6A 14			jsr SETPLAYER
  3270
  3271 				; optimize OK (levels.inc), line = 122
  3272
  3273 2319 A9 01			lda #$01
  3274 231B 8D 06 2B			sta SETPLAYER.ISALIVE
  3275 231E A9 71			lda #$71
  3276 2320 8D 05 2B			sta SETPLAYER.COLOUR
  3277 2323 A9 51			lda #$51
  3278 2325 8D 04 2B			sta SETPLAYER.HEAD
  3279 2328 A9 03			lda #$03
  3280 232A 8D 03 2B			sta SETPLAYER.BRAIN
  3281 232D A9 02			lda #$02
  3282 232F 8D 02 2B			sta SETPLAYER.DIR
  3283 2332 A9 04			lda #$04
  3284 2334 8D 01 2B			sta SETPLAYER.Y
  3285 2337 A9 1E			lda #$1E
  3286 2339 8D 00 2B			sta SETPLAYER.X
  3287 233C AD A3 2A			lda PLAYER3
  3288 233F 8D FE 2A			sta SETPLAYER.P
  3289 2342 AD A4 2A			lda PLAYER3+1
  3290 2345 8D FF 2A			sta SETPLAYER.P+1
  3291 2348 20 6A 14			jsr SETPLAYER
  3292
  3293 				; optimize OK (levels.inc), line = 123
  3294
  3295 234B A9 01			lda #$01
  3296 234D 8D 06 2B			sta SETPLAYER.ISALIVE
  3297 2350 A9 55			lda #$55
  3298 2352 8D 05 2B			sta SETPLAYER.COLOUR
  3299 2355 A9 51			lda #$51
  3300 2357 8D 04 2B			sta SETPLAYER.HEAD
  3301 235A A9 02			lda #$02
  3302 235C 8D 03 2B			sta SETPLAYER.BRAIN
  3303 235F A9 01			lda #$01
  3304 2361 8D 02 2B			sta SETPLAYER.DIR
  3305 2364 A9 15			lda #$15
  3306 2366 8D 01 2B			sta SETPLAYER.Y
  3307 2369 A9 24			lda #$24
  3308 236B 8D 00 2B			sta SETPLAYER.X
  3309 236E AD A5 2A			lda PLAYER4
  3310 2371 8D FE 2A			sta SETPLAYER.P
  3311 2374 AD A6 2A			lda PLAYER4+1
  3312 2377 8D FF 2A			sta SETPLAYER.P+1
  3313 237A 20 6A 14			jsr SETPLAYER
  3314
  3315 				; optimize FAIL (1, levels.inc), line = 125
  3316
  3317 237D E8				inx
  3318 237E A9 00 95 18			mva #$00 :STACKORIGIN,x
  3319 2382 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3320 2384 A9 06			lda #$06
  3321 2386 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3322 2389 A9 0A			lda #$0A
  3323 238B 8D FA 2A			sta CALCOBSTACLEADDR.X
  3324 238E 20 18 13			jsr CALCOBSTACLEADDR
  3325 2391 B4 17			ldy :STACKORIGIN-1,x
  3326 2393 B5 18			lda :STACKORIGIN,x
  3327 2395 99 DE 2A			sta adr.OBSTACLES,y
  3328 2398 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3329 239A 99 DF 2A			sta adr.OBSTACLES+1,y
  3330 239D CA				dex
  3331
  3332 				; optimize FAIL (1, levels.inc), line = 126
  3333
  3334 239E A9 02 95 18			mva #$02 :STACKORIGIN,x
  3335 23A2 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3336 23A6 A9 06			lda #$06
  3337 23A8 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3338 23AB A9 1E			lda #$1E
  3339 23AD 8D FA 2A			sta CALCOBSTACLEADDR.X
  3340 23B0 20 18 13			jsr CALCOBSTACLEADDR
  3341 23B3 B4 17			ldy :STACKORIGIN-1,x
  3342 23B5 B5 18			lda :STACKORIGIN,x
  3343 23B7 99 DE 2A			sta adr.OBSTACLES,y
  3344 23BA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3345 23BC 99 DF 2A			sta adr.OBSTACLES+1,y
  3346 23BF CA				dex
  3347
  3348 				; optimize FAIL (1, levels.inc), line = 127
  3349
  3350 23C0 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3351 23C4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3352 23C8 A9 12			lda #$12
  3353 23CA 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3354 23CD A9 0A			lda #$0A
  3355 23CF 8D FA 2A			sta CALCOBSTACLEADDR.X
  3356 23D2 20 18 13			jsr CALCOBSTACLEADDR
  3357 23D5 B4 17			ldy :STACKORIGIN-1,x
  3358 23D7 B5 18			lda :STACKORIGIN,x
  3359 23D9 99 DE 2A			sta adr.OBSTACLES,y
  3360 23DC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3361 23DE 99 DF 2A			sta adr.OBSTACLES+1,y
  3362 23E1 CA				dex
  3363
  3364 				; optimize FAIL (1, levels.inc), line = 128
  3365
  3366 23E2 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3367 23E6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3368 23EA A9 12			lda #$12
  3369 23EC 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3370 23EF A9 1E			lda #$1E
  3371 23F1 8D FA 2A			sta CALCOBSTACLEADDR.X
  3372 23F4 20 18 13			jsr CALCOBSTACLEADDR
  3373 23F7 B4 17			ldy :STACKORIGIN-1,x
  3374 23F9 B5 18			lda :STACKORIGIN,x
  3375 23FB 99 DE 2A			sta adr.OBSTACLES,y
  3376 23FE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3377 2400 99 DF 2A			sta adr.OBSTACLES+1,y
  3378 2403 CA				dex
  3379
  3380 				; optimize FAIL (1, levels.inc), line = 129
  3381
  3382 2404 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3383 2408 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3384 240C A9 0C			lda #$0C
  3385 240E 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3386 2411 A9 01			lda #$01
  3387 2413 8D FA 2A			sta CALCOBSTACLEADDR.X
  3388 2416 20 18 13			jsr CALCOBSTACLEADDR
  3389 2419 B4 17			ldy :STACKORIGIN-1,x
  3390 241B B5 18			lda :STACKORIGIN,x
  3391 241D 99 DE 2A			sta adr.OBSTACLES,y
  3392 2420 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3393 2422 99 DF 2A			sta adr.OBSTACLES+1,y
  3394 2425 CA				dex
  3395
  3396 				; optimize FAIL (1, levels.inc), line = 130
  3397
  3398 2426 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3399 242A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3400 242E A9 02			lda #$02
  3401 2430 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3402 2433 A9 14			lda #$14
  3403 2435 8D FA 2A			sta CALCOBSTACLEADDR.X
  3404 2438 20 18 13			jsr CALCOBSTACLEADDR
  3405 243B B4 17			ldy :STACKORIGIN-1,x
  3406 243D B5 18			lda :STACKORIGIN,x
  3407 243F 99 DE 2A			sta adr.OBSTACLES,y
  3408 2442 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3409 2444 99 DF 2A			sta adr.OBSTACLES+1,y
  3410 2447 CA				dex
  3411
  3412 				; optimize FAIL (1, levels.inc), line = 131
  3413
  3414 2448 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3415 244C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3416 2450 A9 16			lda #$16
  3417 2452 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3418 2455 A9 14			lda #$14
  3419 2457 8D FA 2A			sta CALCOBSTACLEADDR.X
  3420 245A 20 18 13			jsr CALCOBSTACLEADDR
  3421 245D B4 17			ldy :STACKORIGIN-1,x
  3422 245F B5 18			lda :STACKORIGIN,x
  3423 2461 99 DE 2A			sta adr.OBSTACLES,y
  3424 2464 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3425 2466 99 DF 2A			sta adr.OBSTACLES+1,y
  3426 2469 CA				dex
  3427
  3428 				; optimize FAIL (1, levels.inc), line = 132
  3429
  3430 246A A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3431 246E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3432 2472 A9 0C			lda #$0C
  3433 2474 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3434 2477 A9 14			lda #$14
  3435 2479 8D FA 2A			sta CALCOBSTACLEADDR.X
  3436 247C 20 18 13			jsr CALCOBSTACLEADDR
  3437 247F B4 17			ldy :STACKORIGIN-1,x
  3438 2481 B5 18			lda :STACKORIGIN,x
  3439 2483 99 DE 2A			sta adr.OBSTACLES,y
  3440 2486 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3441 2488 99 DF 2A			sta adr.OBSTACLES+1,y
  3442 248B CA				dex
  3443 248C CA				dex
  3444 248D			@exit
  3445 					.ifdef @new
  3446 					lda <@VarData
  3447 					sta :ztmp
  3448 					lda >@VarData
  3449 					ldy #@VarDataSize-1
  3450 					jmp @FreeMem
  3451 					els
  3452 248D 60				rts						; ret
  3453 					eif
  3454 				.endl
  3455
  3456 248E			.local	SETLEVEL08					; PROCEDURE
  3457
  3458 				; optimize OK (levels.inc), line = 139
  3459
  3460 248E A9 01			lda #$01
  3461 2490 8D 06 2B			sta SETPLAYER.ISALIVE
  3462 2493 A9 62			lda #$62
  3463 2495 8D 05 2B			sta SETPLAYER.COLOUR
  3464 2498 A9 51			lda #$51
  3465 249A 8D 04 2B			sta SETPLAYER.HEAD
  3466 249D A9 00			lda #$00
  3467 249F 8D 03 2B			sta SETPLAYER.BRAIN
  3468 24A2 A9 08			lda #$08
  3469 24A4 8D 02 2B			sta SETPLAYER.DIR
  3470 24A7 A9 17			lda #$17
  3471 24A9 8D 01 2B			sta SETPLAYER.Y
  3472 24AC A9 01			lda #$01
  3473 24AE 8D 00 2B			sta SETPLAYER.X
  3474 24B1 AD 9F 2A			lda PLAYER1
  3475 24B4 8D FE 2A			sta SETPLAYER.P
  3476 24B7 AD A0 2A			lda PLAYER1+1
  3477 24BA 8D FF 2A			sta SETPLAYER.P+1
  3478 24BD 20 6A 14			jsr SETPLAYER
  3479
  3480 				; optimize OK (levels.inc), line = 140
  3481
  3482 24C0 A9 01			lda #$01
  3483 24C2 8D 06 2B			sta SETPLAYER.ISALIVE
  3484 24C5 A9 5D			lda #$5D
  3485 24C7 8D 05 2B			sta SETPLAYER.COLOUR
  3486 24CA A9 51			lda #$51
  3487 24CC 8D 04 2B			sta SETPLAYER.HEAD
  3488 24CF A9 03			lda #$03
  3489 24D1 8D 03 2B			sta SETPLAYER.BRAIN
  3490 24D4 A9 04			lda #$04
  3491 24D6 8D 02 2B			sta SETPLAYER.DIR
  3492 24D9 A9 17			lda #$17
  3493 24DB 8D 01 2B			sta SETPLAYER.Y
  3494 24DE A9 26			lda #$26
  3495 24E0 8D 00 2B			sta SETPLAYER.X
  3496 24E3 AD A1 2A			lda PLAYER2
  3497 24E6 8D FE 2A			sta SETPLAYER.P
  3498 24E9 AD A2 2A			lda PLAYER2+1
  3499 24EC 8D FF 2A			sta SETPLAYER.P+1
  3500 24EF 20 6A 14			jsr SETPLAYER
  3501
  3502 				; optimize OK (levels.inc), line = 141
  3503
  3504 24F2 A9 01			lda #$01
  3505 24F4 8D 06 2B			sta SETPLAYER.ISALIVE
  3506 24F7 A9 71			lda #$71
  3507 24F9 8D 05 2B			sta SETPLAYER.COLOUR
  3508 24FC A9 51			lda #$51
  3509 24FE 8D 04 2B			sta SETPLAYER.HEAD
  3510 2501 A9 02			lda #$02
  3511 2503 8D 03 2B			sta SETPLAYER.BRAIN
  3512 2506 8D 02 2B			sta SETPLAYER.DIR
  3513 2509 A9 01			lda #$01
  3514 250B 8D 01 2B			sta SETPLAYER.Y
  3515 250E A9 0A			lda #$0A
  3516 2510 8D 00 2B			sta SETPLAYER.X
  3517 2513 AD A3 2A			lda PLAYER3
  3518 2516 8D FE 2A			sta SETPLAYER.P
  3519 2519 AD A4 2A			lda PLAYER3+1
  3520 251C 8D FF 2A			sta SETPLAYER.P+1
  3521 251F 20 6A 14			jsr SETPLAYER
  3522
  3523 				; optimize OK (levels.inc), line = 142
  3524
  3525 2522 A9 01			lda #$01
  3526 2524 8D 06 2B			sta SETPLAYER.ISALIVE
  3527 2527 A9 55			lda #$55
  3528 2529 8D 05 2B			sta SETPLAYER.COLOUR
  3529 252C A9 51			lda #$51
  3530 252E 8D 04 2B			sta SETPLAYER.HEAD
  3531 2531 A9 04			lda #$04
  3532 2533 8D 03 2B			sta SETPLAYER.BRAIN
  3533 2536 8D 02 2B			sta SETPLAYER.DIR
  3534 2539 A9 01			lda #$01
  3535 253B 8D 01 2B			sta SETPLAYER.Y
  3536 253E A9 26			lda #$26
  3537 2540 8D 00 2B			sta SETPLAYER.X
  3538 2543 AD A5 2A			lda PLAYER4
  3539 2546 8D FE 2A			sta SETPLAYER.P
  3540 2549 AD A6 2A			lda PLAYER4+1
  3541 254C 8D FF 2A			sta SETPLAYER.P+1
  3542 254F 20 6A 14			jsr SETPLAYER
  3543
  3544 				; optimize FAIL (1, levels.inc), line = 144
  3545
  3546 2552 E8				inx
  3547 2553 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3548 2557 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3549 2559 A9 06			lda #$06
  3550 255B 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3551 255E A9 0A			lda #$0A
  3552 2560 8D FA 2A			sta CALCOBSTACLEADDR.X
  3553 2563 20 18 13			jsr CALCOBSTACLEADDR
  3554 2566 B4 17			ldy :STACKORIGIN-1,x
  3555 2568 B5 18			lda :STACKORIGIN,x
  3556 256A 99 DE 2A			sta adr.OBSTACLES,y
  3557 256D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3558 256F 99 DF 2A			sta adr.OBSTACLES+1,y
  3559 2572 CA				dex
  3560
  3561 				; optimize FAIL (1, levels.inc), line = 145
  3562
  3563 2573 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3564 2577 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3565 257B A9 06			lda #$06
  3566 257D 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3567 2580 A9 1E			lda #$1E
  3568 2582 8D FA 2A			sta CALCOBSTACLEADDR.X
  3569 2585 20 18 13			jsr CALCOBSTACLEADDR
  3570 2588 B4 17			ldy :STACKORIGIN-1,x
  3571 258A B5 18			lda :STACKORIGIN,x
  3572 258C 99 DE 2A			sta adr.OBSTACLES,y
  3573 258F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3574 2591 99 DF 2A			sta adr.OBSTACLES+1,y
  3575 2594 CA				dex
  3576
  3577 				; optimize FAIL (1, levels.inc), line = 146
  3578
  3579 2595 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3580 2599 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3581 259D A9 12			lda #$12
  3582 259F 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3583 25A2 A9 0A			lda #$0A
  3584 25A4 8D FA 2A			sta CALCOBSTACLEADDR.X
  3585 25A7 20 18 13			jsr CALCOBSTACLEADDR
  3586 25AA B4 17			ldy :STACKORIGIN-1,x
  3587 25AC B5 18			lda :STACKORIGIN,x
  3588 25AE 99 DE 2A			sta adr.OBSTACLES,y
  3589 25B1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3590 25B3 99 DF 2A			sta adr.OBSTACLES+1,y
  3591 25B6 CA				dex
  3592
  3593 				; optimize FAIL (1, levels.inc), line = 147
  3594
  3595 25B7 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3596 25BB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3597 25BF A9 12			lda #$12
  3598 25C1 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3599 25C4 A9 1E			lda #$1E
  3600 25C6 8D FA 2A			sta CALCOBSTACLEADDR.X
  3601 25C9 20 18 13			jsr CALCOBSTACLEADDR
  3602 25CC B4 17			ldy :STACKORIGIN-1,x
  3603 25CE B5 18			lda :STACKORIGIN,x
  3604 25D0 99 DE 2A			sta adr.OBSTACLES,y
  3605 25D3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3606 25D5 99 DF 2A			sta adr.OBSTACLES+1,y
  3607 25D8 CA				dex
  3608
  3609 				; optimize FAIL (1, levels.inc), line = 148
  3610
  3611 25D9 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3612 25DD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3613 25E1 A9 0C			lda #$0C
  3614 25E3 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3615 25E6 A9 01			lda #$01
  3616 25E8 8D FA 2A			sta CALCOBSTACLEADDR.X
  3617 25EB 20 18 13			jsr CALCOBSTACLEADDR
  3618 25EE B4 17			ldy :STACKORIGIN-1,x
  3619 25F0 B5 18			lda :STACKORIGIN,x
  3620 25F2 99 DE 2A			sta adr.OBSTACLES,y
  3621 25F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3622 25F7 99 DF 2A			sta adr.OBSTACLES+1,y
  3623 25FA CA				dex
  3624
  3625 				; optimize FAIL (1, levels.inc), line = 149
  3626
  3627 25FB A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3628 25FF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3629 2603 A9 02			lda #$02
  3630 2605 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3631 2608 A9 14			lda #$14
  3632 260A 8D FA 2A			sta CALCOBSTACLEADDR.X
  3633 260D 20 18 13			jsr CALCOBSTACLEADDR
  3634 2610 B4 17			ldy :STACKORIGIN-1,x
  3635 2612 B5 18			lda :STACKORIGIN,x
  3636 2614 99 DE 2A			sta adr.OBSTACLES,y
  3637 2617 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3638 2619 99 DF 2A			sta adr.OBSTACLES+1,y
  3639 261C CA				dex
  3640
  3641 				; optimize FAIL (1, levels.inc), line = 150
  3642
  3643 261D A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3644 2621 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3645 2625 A9 16			lda #$16
  3646 2627 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3647 262A A9 14			lda #$14
  3648 262C 8D FA 2A			sta CALCOBSTACLEADDR.X
  3649 262F 20 18 13			jsr CALCOBSTACLEADDR
  3650 2632 B4 17			ldy :STACKORIGIN-1,x
  3651 2634 B5 18			lda :STACKORIGIN,x
  3652 2636 99 DE 2A			sta adr.OBSTACLES,y
  3653 2639 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3654 263B 99 DF 2A			sta adr.OBSTACLES+1,y
  3655 263E CA				dex
  3656
  3657 				; optimize FAIL (1, levels.inc), line = 151
  3658
  3659 263F A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3660 2643 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3661 2647 A9 0C			lda #$0C
  3662 2649 8D FB 2A			sta CALCOBSTACLEADDR.Y
  3663 264C A9 14			lda #$14
  3664 264E 8D FA 2A			sta CALCOBSTACLEADDR.X
  3665 2651 20 18 13			jsr CALCOBSTACLEADDR
  3666 2654 B4 17			ldy :STACKORIGIN-1,x
  3667 2656 B5 18			lda :STACKORIGIN,x
  3668 2658 99 DE 2A			sta adr.OBSTACLES,y
  3669 265B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3670 265D 99 DF 2A			sta adr.OBSTACLES+1,y
  3671 2660 CA				dex
  3672 2661 CA				dex
  3673 2662			@exit
  3674 					.ifdef @new
  3675 					lda <@VarData
  3676 					sta :ztmp
  3677 					lda >@VarData
  3678 					ldy #@VarDataSize-1
  3679 					jmp @FreeMem
  3680 					els
  3681 2662 60				rts						; ret
  3682 					eif
  3683 				.endl
  3684
  3685 2663			.local	INITPLAYFIELD					; PROCEDURE
  3686
  3687 				; optimize OK (init.inc), line = 5
  3688
  3689 2663 A9 1F			lda #$1F
  3690 2665 8D 15 FF			sta BACKGROUND
  3691 2668 A9 00			lda #$00
  3692 266A 8D 19 FF			sta BOREDER
  3693
  3694 				; optimize OK (init.inc), line = 6
  3695
  3696 266D A9 20			lda #$20
  3697 266F 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  3698 2671 A9 C0			lda #$C0
  3699 2673 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  3700 2675 A9 03			lda #$03
  3701 2677 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  3702 2679 A9 00			lda #$00
  3703 267B 85 08			sta SYSTEM.FILLCHAR_0056.A
  3704 267D A9 0C			lda #$0C
  3705 267F 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  3706 2681 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  3707
  3708 				; optimize OK (init.inc), line = 8
  3709
  3710 2684 A9 27			lda #$27
  3711 2686 85 58			sta T0B
  3712
  3713 2688			l_0C86
  3714 				; --- ForToDoCondition
  3715
  3716 				; optimize OK (init.inc), line = 9
  3717
  3718 2688 A4 58			ldy T0B
  3719 268A A9 A0			lda #$A0
  3720 268C 99 00 0C			sta $0C00,y
  3721
  3722 				; optimize OK (init.inc), line = 10
  3723
  3724 268F 99 C0 0F			sta $0FC0,y
  3725
  3726 				; optimize OK (init.inc), line = 11
  3727
  3728 2692 A9 41			lda #$41
  3729 2694 99 00 08			sta $0800,y
  3730
  3731 				; optimize OK (init.inc), line = 12
  3732
  3733 2697 99 C0 0B			sta $0BC0,y
  3734
  3735 				; --- ForToDoEpilog
  3736 269A C6 58			dec T0B
  3737 269C 10 EA			jpl l_0C86
  3738 269E			l_0C94
  3739
  3740 				; optimize OK (init.inc), line = 15
  3741
  3742 269E A9 18			lda #$18
  3743 26A0 85 58			sta T0B
  3744
  3745 26A2			l_0CC6
  3746 				; --- ForToDoCondition
  3747 26A2 A5 58			lda T0B
  3748 26A4 C9 01			cmp #$01
  3749 26A6 90 3A			jcc l_0CD4
  3750
  3751 				; optimize OK (init.inc), line = 16
  3752
  3753 26A8 0A				asl @
  3754 26A9 A8				tay
  3755 26AA A9 FF			lda #$FF
  3756 26AC 18 79 0E 10			add adr.MUL40,y
  3757 26B0 85 12			sta :bp2
  3758 26B2 A9 0B			lda #$0B
  3759 26B4 79 0F 10			adc adr.MUL40+1,y
  3760 26B7 85 13			sta :bp2+1
  3761 26B9 A0 00			ldy #$00
  3762 26BB A9 A0			lda #$A0
  3763 26BD 91 12			sta (:bp2),y
  3764 26BF C8				iny
  3765 26C0 91 12			sta (:bp2),y
  3766
  3767 				; optimize OK (init.inc), line = 17
  3768
  3769 26C2 A5 58			lda T0B
  3770 26C4 0A				asl @
  3771 26C5 A8				tay
  3772 26C6 A9 FF			lda #$FF
  3773 26C8 18 79 0E 10			add adr.MUL40,y
  3774 26CC 85 12			sta :bp2
  3775 26CE A9 07			lda #$07
  3776 26D0 79 0F 10			adc adr.MUL40+1,y
  3777 26D3 85 13			sta :bp2+1
  3778 26D5 A0 00			ldy #$00
  3779 26D7 A9 41			lda #$41
  3780 26D9 91 12			sta (:bp2),y
  3781 26DB C8				iny
  3782 26DC 91 12			sta (:bp2),y
  3783
  3784 				; --- ForToDoEpilog
  3785 26DE C6 58			dec T0B
  3786 26E0 10 C0			jpl l_0CC6
  3787 26E2			l_0CD4
  3788
  3789 				; optimize OK (init.inc), line = 20
  3790
  3791 26E2 A9 07			lda #$07
  3792 26E4 85 59			sta I0B
  3793
  3794 26E6			l_0CF8
  3795 				; --- ForToDoCondition
  3796 26E6 A5 59			lda I0B
  3797 26E8 0A				asl @
  3798 26E9 A8				tay
  3799 26EA A9 7E			lda #$7E
  3800 26EC 99 DE 2A			sta adr.OBSTACLES,y
  3801 26EF A9 00			lda #$00
  3802 26F1 99 DF 2A			sta adr.OBSTACLES+1,y
  3803
  3804 				; --- ForToDoEpilog
  3805 26F4 C6 59			dec I0B
  3806 26F6 10 EE			jpl l_0CF8
  3807 26F8			l_0D06
  3808
  3809 				; optimize OK (init.inc), line = 22
  3810
  3811 26F8 AD BC 2A			lda LEVEL
  3812 26FB 8D 0E 2B			sta @CASETMP_0006
  3813 26FE C9 00			cmp #$00
  3814 2700 D0 06			jne l_0D1D
  3815 2702			@
  3816
  3817 				; optimize FAIL ('SETLEVEL00', init.inc), line = 23
  3818
  3819 2702 20 D0 18			jsr SETLEVEL00
  3820 2705 4C 55 27			jmp a_0006
  3821 2708			l_0D1D
  3822 2708 C9 01			cmp #$01
  3823 270A D0 06			jne l_0D27
  3824 270C			@
  3825
  3826 				; optimize FAIL ('SETLEVEL01', init.inc), line = 24
  3827
  3828 270C 20 01 1A			jsr SETLEVEL01
  3829 270F 4C 55 27			jmp a_0006
  3830 2712			l_0D27
  3831 2712 C9 02			cmp #$02
  3832 2714 D0 06			jne l_0D31
  3833 2716			@
  3834
  3835 				; optimize FAIL ('SETLEVEL02', init.inc), line = 25
  3836
  3837 2716 20 32 1B			jsr SETLEVEL02
  3838 2719 4C 55 27			jmp a_0006
  3839 271C			l_0D31
  3840 271C C9 03			cmp #$03
  3841 271E D0 06			jne l_0D3B
  3842 2720			@
  3843
  3844 				; optimize FAIL ('SETLEVEL03', init.inc), line = 26
  3845
  3846 2720 20 63 1C			jsr SETLEVEL03
  3847 2723 4C 55 27			jmp a_0006
  3848 2726			l_0D3B
  3849 2726 C9 04			cmp #$04
  3850 2728 D0 06			jne l_0D45
  3851 272A			@
  3852
  3853 				; optimize FAIL ('SETLEVEL04', init.inc), line = 27
  3854
  3855 272A 20 B6 1D			jsr SETLEVEL04
  3856 272D 4C 55 27			jmp a_0006
  3857 2730			l_0D45
  3858 2730 C9 05			cmp #$05
  3859 2732 D0 06			jne l_0D4F
  3860 2734			@
  3861
  3862 				; optimize FAIL ('SETLEVEL05', init.inc), line = 28
  3863
  3864 2734 20 2B 1F			jsr SETLEVEL05
  3865 2737 4C 55 27			jmp a_0006
  3866 273A			l_0D4F
  3867 273A C9 06			cmp #$06
  3868 273C D0 06			jne l_0D59
  3869 273E			@
  3870
  3871 				; optimize FAIL ('SETLEVEL06', init.inc), line = 29
  3872
  3873 273E 20 E0 20			jsr SETLEVEL06
  3874 2741 4C 55 27			jmp a_0006
  3875 2744			l_0D59
  3876 2744 C9 07			cmp #$07
  3877 2746 D0 06			jne l_0D63
  3878 2748			@
  3879
  3880 				; optimize FAIL ('SETLEVEL07', init.inc), line = 30
  3881
  3882 2748 20 B5 22			jsr SETLEVEL07
  3883 274B 4C 55 27			jmp a_0006
  3884 274E			l_0D63
  3885 274E C9 08			cmp #$08
  3886 2750 D0 03			jne l_0D6D
  3887 2752			@
  3888
  3889 				; optimize FAIL ('SETLEVEL08', init.inc), line = 31
  3890
  3891 2752 20 8E 24			jsr SETLEVEL08
  3892 2755			l_0D6D
  3893 2755			a_0006
  3894
  3895 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 34
  3896
  3897 2755 20 3B 13			jsr SAVEOBSTACLES
  3898 2758 20 E3 12			jsr ANIMATEOBSTACLES
  3899 275B 20 E9 11			jsr SHOWSCORE
  3900
  3901 				; ------------------------------------------------------------
  3902
  3903 = 0000			@FORTMP_0C83	= $00
  3904 = 0001			@FORTMP_0CC3	= $01
  3905 = 0000			@FORTMP_0CF5	= $00
  3906 = 2B0E			@CASETMP_0006	= DATAORIGIN+$0062
  3907
  3908 = 2B0E			@VarData	= @CASETMP_0006
  3909 = 0001			@VarDataSize	= 1
  3910
  3911 275E			@exit
  3912 					.ifdef @new
  3913 					lda <@VarData
  3914 					sta :ztmp
  3915 					lda >@VarData
  3916 					ldy #@VarDataSize-1
  3917 					jmp @FreeMem
  3918 					els
  3919 275E 60				rts						; ret
  3920 					eif
  3921 				.endl
  3922
  3923 275F			.local	INITPLAYERS					; PROCEDURE
  3924
  3925 				; optimize OK (init.inc), line = 41
  3926
  3927 275F A9 30			lda #$30
  3928 2761 8D C4 2A			sta PLAYER1.SCORE
  3929 2764 8D CC 2A			sta PLAYER2.SCORE
  3930
  3931 				; optimize OK (init.inc), line = 42
  3932
  3933 2767 8D D4 2A			sta PLAYER3.SCORE
  3934 276A 8D DC 2A			sta PLAYER4.SCORE
  3935
  3936 				; optimize OK (init.inc), line = 44
  3937
  3938 276D A9 00			lda #$00
  3939 276F 8D C5 2A			sta PLAYER1.ISALIVE
  3940 2772 8D CD 2A			sta PLAYER2.ISALIVE
  3941
  3942 				; optimize OK (init.inc), line = 45
  3943
  3944 2775 8D D5 2A			sta PLAYER3.ISALIVE
  3945 2778 8D DD 2A			sta PLAYER4.ISALIVE
  3946 277B			@exit
  3947 					.ifdef @new
  3948 					lda <@VarData
  3949 					sta :ztmp
  3950 					lda >@VarData
  3951 					ldy #@VarDataSize-1
  3952 					jmp @FreeMem
  3953 					els
  3954 277B 60				rts						; ret
  3955 					eif
  3956 				.endl
  3957
  3958 277C			.local	HUMAN						; PROCEDURE
  3959
  3960 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3961
  3962 277C 20 58 14			jsr CHECKJOYSTATUS
  3963 277F AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  3964 2789 A0 04			ldy #PLY.DIR-DATAORIGIN
  3965 278B B1 12			lda (:bp2),y
  3966 278D 85 5B			sta NEWDIR
  3967
  3968 				; optimize OK (main.pas), line = 16
  3969
  3970 278F A5 63			lda JOYSTATUS
  3971 2791 8D 0F 2B			sta @CASETMP_0007
  3972 2794 C9 01			cmp #$01
  3973 2796 D0 19			jne l_0DB8
  3974 2798			@
  3975
  3976 				; optimize OK (main.pas), line = 17
  3977
  3978 2798 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  3979 27A2 A0 04			ldy #PLY.DIR-DATAORIGIN
  3980 27A4 B1 12			lda (:bp2),y
  3981 27A6 C9 02			cmp #$02
  3982 27A8 F0 04			jeq l_0DCA
  3983 27AA A9 01			lda #$01
  3984 27AC 85 5B			sta NEWDIR
  3985 27AE			l_0DCA
  3986
  3987 27AE 4C 05 28			jmp a_0007
  3988 27B1			l_0DB8
  3989 27B1 C9 02			cmp #$02
  3990 27B3 D0 19			jne l_0DDA
  3991 27B5			@
  3992
  3993 				; optimize OK (main.pas), line = 18
  3994
  3995 27B5 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  3996 27BF A0 04			ldy #PLY.DIR-DATAORIGIN
  3997 27C1 B1 12			lda (:bp2),y
  3998 27C3 C9 01			cmp #$01
  3999 27C5 F0 04			jeq l_0DEC
  4000 27C7 A9 02			lda #$02
  4001 27C9 85 5B			sta NEWDIR
  4002 27CB			l_0DEC
  4003
  4004 27CB 4C 05 28			jmp a_0007
  4005 27CE			l_0DDA
  4006 27CE C9 04			cmp #$04
  4007 27D0 D0 19			jne l_0DFC
  4008 27D2			@
  4009
  4010 				; optimize OK (main.pas), line = 19
  4011
  4012 27D2 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4013 27DC A0 04			ldy #PLY.DIR-DATAORIGIN
  4014 27DE B1 12			lda (:bp2),y
  4015 27E0 C9 08			cmp #$08
  4016 27E2 F0 04			jeq l_0E0E
  4017 27E4 A9 04			lda #$04
  4018 27E6 85 5B			sta NEWDIR
  4019 27E8			l_0E0E
  4020
  4021 27E8 4C 05 28			jmp a_0007
  4022 27EB			l_0DFC
  4023 27EB C9 08			cmp #$08
  4024 27ED D0 16			jne l_0E1E
  4025 27EF			@
  4026
  4027 				; optimize OK (main.pas), line = 20
  4028
  4029 27EF AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4030 27F9 A0 04			ldy #PLY.DIR-DATAORIGIN
  4031 27FB B1 12			lda (:bp2),y
  4032 27FD C9 04			cmp #$04
  4033 27FF F0 04			jeq l_0E30
  4034 2801 A9 08			lda #$08
  4035 2803 85 5B			sta NEWDIR
  4036 2805			l_0E30
  4037
  4038 2805			l_0E1E
  4039 2805			a_0007
  4040
  4041 				; optimize OK (main.pas), line = 23
  4042
  4043 2805 A5 5B			lda NEWDIR
  4044 2807 25 5C			and AVAILDIR
  4045 2809 D0 18			jne l_0E57
  4046
  4047 				; optimize OK (main.pas), line = 24
  4048
  4049 280B AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4050 2815 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4051 2817 A9 00			lda #$00
  4052 2819 91 12			sta (:bp2),y
  4053 281B A0 02			ldy #PLY.HEAD-DATAORIGIN
  4054 281D A9 2A			lda #$2A
  4055 281F 91 12			sta (:bp2),y
  4056 2821 C6 5A			dec ALIVE
  4057 2823			l_0E57
  4058
  4059 				; ------------------------------------------------------------
  4060
  4061 = 2B0F			@CASETMP_0007	= DATAORIGIN+$0063
  4062
  4063 = 2B0F			@VarData	= @CASETMP_0007
  4064 = 0001			@VarDataSize	= 1
  4065
  4066 2823			@exit
  4067 					.ifdef @new
  4068 					lda <@VarData
  4069 					sta :ztmp
  4070 					lda >@VarData
  4071 					ldy #@VarDataSize-1
  4072 					jmp @FreeMem
  4073 					els
  4074 2823 60				rts						; ret
  4075 					eif
  4076 				.endl
  4077
  4078 2824			.local	PLAYERMOVE					; PROCEDURE
  4079
  4080 				; optimize OK (main.pas), line = 32
  4081
  4082 2824 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4083 282E A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4084 2830 B1 12			lda (:bp2),y
  4085 2832 D0 03 4C 59 29		jeq l_0E76
  4086
  4087 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  4088
  4089 2837 20 4E 12			jsr CHECKAVAILDIR
  4090
  4091 				; optimize OK (main.pas), line = 35
  4092
  4093 283A A5 5C			lda AVAILDIR
  4094 283C D0 35			jne l_0E8A
  4095
  4096 				; optimize OK (main.pas), line = 36
  4097
  4098 283E AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4099 2848 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4100 284A A9 00			lda #$00
  4101 284C 91 12			sta (:bp2),y
  4102 284E C6 5A			dec ALIVE
  4103
  4104 				; optimize OK (main.pas), line = 37
  4105
  4106 2850 A0 00			ldy #PLY.X-DATAORIGIN
  4107 2852 B1 12			lda (:bp2),y
  4108 2854 8D F1 2A			sta PUTCHAR_008E.X
  4109 2857 A0 01			ldy #PLY.Y-DATAORIGIN
  4110 2859 B1 12			lda (:bp2),y
  4111 285B 8D F2 2A			sta PUTCHAR_008E.Y
  4112 285E A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4113 2860 B1 12			lda (:bp2),y
  4114 2862 18 69 80			add #$80
  4115 2865 8D F4 2A			sta PUTCHAR_008E.C
  4116 2868 A9 57			lda #$57
  4117 286A 8D F3 2A			sta PUTCHAR_008E.V
  4118 286D 20 99 11			jsr PUTCHAR_008E
  4119 2870 4C 59 29			jmp l_0EAB
  4120 2873			l_0E8A
  4121
  4122 				; optimize OK (main.pas), line = 40
  4123
  4124 2873 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4125 287D A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4126 287F B1 12			lda (:bp2),y
  4127 2881 8D 10 2B			sta @CASETMP_0008
  4128 2884 C9 00			cmp #$00
  4129 2886 D0 06			jne l_0EB6
  4130 2888			@
  4131
  4132 				; optimize FAIL ('HUMAN', main.pas), line = 41
  4133
  4134 2888 20 7C 27			jsr HUMAN
  4135 288B 4C B3 28			jmp a_0008
  4136 288E			l_0EB6
  4137 288E C9 01			cmp #$01
  4138 2890 D0 06			jne l_0EC0
  4139 2892			@
  4140
  4141 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  4142
  4143 2892 20 CE 14			jsr AISTRAIGHT
  4144 2895 4C B3 28			jmp a_0008
  4145 2898			l_0EC0
  4146 2898 C9 02			cmp #$02
  4147 289A D0 06			jne l_0ECA
  4148 289C			@
  4149
  4150 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  4151
  4152 289C 20 53 15			jsr AISAPPER
  4153 289F 4C B3 28			jmp a_0008
  4154 28A2			l_0ECA
  4155 28A2 C9 03			cmp #$03
  4156 28A4 D0 06			jne l_0ED4
  4157 28A6			@
  4158
  4159 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  4160
  4161 28A6 20 AD 17			jsr AIBULLY
  4162 28A9 4C B3 28			jmp a_0008
  4163 28AC			l_0ED4
  4164 28AC C9 04			cmp #$04
  4165 28AE D0 03			jne l_0EDE
  4166 28B0			@
  4167
  4168 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4169
  4170 28B0 20 7B 18			jsr AIMIRROR
  4171 28B3			l_0EDE
  4172 28B3			a_0008
  4173
  4174 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4175
  4176 28B3 20 7F 13			jsr DRAWTAIL
  4177 28B6 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4178 28C0 A0 04			ldy #PLY.DIR-DATAORIGIN
  4179 28C2 A5 5B			lda NEWDIR
  4180 28C4 91 12			sta (:bp2),y
  4181
  4182 				; optimize OK (main.pas), line = 50
  4183
  4184 28C6 A5 5B			lda NEWDIR
  4185 28C8 8D 11 2B			sta @CASETMP_0009
  4186 28CB C9 01			cmp #$01
  4187 28CD D0 16			jne l_0EFA
  4188 28CF			@
  4189
  4190 				; optimize OK (main.pas), line = 51
  4191
  4192 28CF AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4193 28D9 A0 01			ldy #PLY.Y-DATAORIGIN
  4194 28DB B1 12			lda (:bp2),y
  4195 28DD 38 E9 01			sub #$01
  4196 28E0 91 12			sta (:bp2),y
  4197
  4198 28E2 4C 30 29			jmp a_0009
  4199 28E5			l_0EFA
  4200 28E5 C9 02			cmp #$02
  4201 28E7 D0 16			jne l_0F04
  4202 28E9			@
  4203
  4204 				; optimize OK (main.pas), line = 52
  4205
  4206 28E9 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4207 28F3 A0 01			ldy #PLY.Y-DATAORIGIN
  4208 28F5 B1 12			lda (:bp2),y
  4209 28F7 18 69 01			add #$01
  4210 28FA 91 12			sta (:bp2),y
  4211
  4212 28FC 4C 30 29			jmp a_0009
  4213 28FF			l_0F04
  4214 28FF C9 04			cmp #$04
  4215 2901 D0 16			jne l_0F0E
  4216 2903			@
  4217
  4218 				; optimize OK (main.pas), line = 53
  4219
  4220 2903 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4221 290D A0 00			ldy #PLY.X-DATAORIGIN
  4222 290F B1 12			lda (:bp2),y
  4223 2911 38 E9 01			sub #$01
  4224 2914 91 12			sta (:bp2),y
  4225
  4226 2916 4C 30 29			jmp a_0009
  4227 2919			l_0F0E
  4228 2919 C9 08			cmp #$08
  4229 291B D0 13			jne l_0F18
  4230 291D			@
  4231
  4232 				; optimize OK (main.pas), line = 54
  4233
  4234 291D AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4235 2927 A0 00			ldy #PLY.X-DATAORIGIN
  4236 2929 B1 12			lda (:bp2),y
  4237 292B 18 69 01			add #$01
  4238 292E 91 12			sta (:bp2),y
  4239
  4240 2930			l_0F18
  4241 2930			a_0009
  4242
  4243 				; optimize OK (main.pas), line = 57
  4244
  4245 2930 AC 9B 2A 84 12 AC + 	mwy PLY :bp2
  4246 293A A0 00			ldy #PLY.X-DATAORIGIN
  4247 293C B1 12			lda (:bp2),y
  4248 293E 8D F1 2A			sta PUTCHAR_008E.X
  4249 2941 A0 01			ldy #PLY.Y-DATAORIGIN
  4250 2943 B1 12			lda (:bp2),y
  4251 2945 8D F2 2A			sta PUTCHAR_008E.Y
  4252 2948 A0 02			ldy #PLY.HEAD-DATAORIGIN
  4253 294A B1 12			lda (:bp2),y
  4254 294C 8D F3 2A			sta PUTCHAR_008E.V
  4255 294F A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4256 2951 B1 12			lda (:bp2),y
  4257 2953 8D F4 2A			sta PUTCHAR_008E.C
  4258 2956 20 99 11			jsr PUTCHAR_008E
  4259 2959			l_0EAB
  4260 2959			l_0E76
  4261
  4262 				; ------------------------------------------------------------
  4263
  4264 = 2B10			@CASETMP_0008	= DATAORIGIN+$0064
  4265 = 2B11			@CASETMP_0009	= DATAORIGIN+$0065
  4266
  4267 = 2B10			@VarData	= @CASETMP_0008
  4268 = 0002			@VarDataSize	= 2
  4269
  4270 2959			@exit
  4271 					.ifdef @new
  4272 					lda <@VarData
  4273 					sta :ztmp
  4274 					lda >@VarData
  4275 					ldy #@VarDataSize-1
  4276 					jmp @FreeMem
  4277 					els
  4278 2959 60				rts						; ret
  4279 					eif
  4280 				.endl
  4281
  4282 295A			.local	STARTSCREEN					; PROCEDURE
  4283
  4284 				; optimize OK (main.pas), line = 68
  4285
  4286 295A AD C1 2A			lda PLAYER1.COLOUR
  4287 295D 18 69 80			add #$80
  4288 2960 8D F4 2A			sta PUTCHAR_008E.C
  4289 2963 AD C0 2A			lda PLAYER1.HEAD
  4290 2966 8D F3 2A			sta PUTCHAR_008E.V
  4291 2969 AD BF 2A			lda PLAYER1.Y
  4292 296C 8D F2 2A			sta PUTCHAR_008E.Y
  4293 296F AD BE 2A			lda PLAYER1.X
  4294 2972 8D F1 2A			sta PUTCHAR_008E.X
  4295 2975 20 99 11			jsr PUTCHAR_008E
  4296
  4297 				; --- RepeatUntilProlog
  4298 2978			l_0F46
  4299
  4300 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 69
  4301
  4302 2978 20 58 14			jsr CHECKJOYSTATUS
  4303 297B A5 63			lda JOYSTATUS
  4304 297D C9 40			cmp #$40
  4305 297F D0 F7			jne l_0F46
  4306
  4307 				; optimize OK (main.pas), line = 70
  4308
  4309 2981 AD C1 2A			lda PLAYER1.COLOUR
  4310 2984 8D F4 2A			sta PUTCHAR_008E.C
  4311 2987 AD C0 2A			lda PLAYER1.HEAD
  4312 298A 8D F3 2A			sta PUTCHAR_008E.V
  4313 298D AD BF 2A			lda PLAYER1.Y
  4314 2990 8D F2 2A			sta PUTCHAR_008E.Y
  4315 2993 AD BE 2A			lda PLAYER1.X
  4316 2996 8D F1 2A			sta PUTCHAR_008E.X
  4317 2999 20 99 11			jsr PUTCHAR_008E
  4318 299C			@exit
  4319 					.ifdef @new
  4320 					lda <@VarData
  4321 					sta :ztmp
  4322 					lda >@VarData
  4323 					ldy #@VarDataSize-1
  4324 					jmp @FreeMem
  4325 					els
  4326 299C 60				rts						; ret
  4327 					eif
  4328 				.endl
  4329
  4330 299D			.local	MAINLOOP					; PROCEDURE
  4331
  4332 				; optimize OK (main.pas), line = 77
  4333
  4334 299D A9 FF			lda #$FF
  4335 299F 85 5A			sta ALIVE
  4336
  4337 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 79
  4338
  4339 29A1 20 63 26			jsr INITPLAYFIELD
  4340 29A4 20 5A 29			jsr STARTSCREEN
  4341
  4342 				; --- RepeatUntilProlog
  4343 29A7			l_0F6C
  4344
  4345 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 82
  4346
  4347 29A7 20 23 11			jsr SYSTEM.PAUSE_006B
  4348
  4349 				; optimize OK (main.pas), line = 83
  4350
  4351 29AA AD 9F 2A			lda PLAYER1
  4352 29AD 8D 9B 2A			sta PLY
  4353 29B0 AD A0 2A			lda PLAYER1+1
  4354 29B3 8D 9C 2A			sta PLY+1
  4355 29B6 20 24 28			jsr PLAYERMOVE
  4356
  4357 				; optimize OK (main.pas), line = 85
  4358
  4359 29B9 A9 02			lda #$02
  4360 29BB 8D B8 2A			sta SYSTEM.PAUSE_006C.N
  4361 29BE A9 00			lda #$00
  4362 29C0 8D B9 2A			sta SYSTEM.PAUSE_006C.N+1
  4363 29C3 20 2A 11			jsr SYSTEM.PAUSE_006C
  4364
  4365 				; optimize OK (main.pas), line = 86
  4366
  4367 29C6 AD A1 2A			lda PLAYER2
  4368 29C9 8D 9B 2A			sta PLY
  4369 29CC AD A2 2A			lda PLAYER2+1
  4370 29CF 8D 9C 2A			sta PLY+1
  4371 29D2 20 24 28			jsr PLAYERMOVE
  4372
  4373 				; optimize OK (main.pas), line = 87
  4374
  4375 29D5 AD A3 2A			lda PLAYER3
  4376 29D8 8D 9B 2A			sta PLY
  4377 29DB AD A4 2A			lda PLAYER3+1
  4378 29DE 8D 9C 2A			sta PLY+1
  4379 29E1 20 24 28			jsr PLAYERMOVE
  4380
  4381 				; optimize OK (main.pas), line = 88
  4382
  4383 29E4 AD A5 2A			lda PLAYER4
  4384 29E7 8D 9B 2A			sta PLY
  4385 29EA AD A6 2A			lda PLAYER4+1
  4386 29ED 8D 9C 2A			sta PLY+1
  4387 29F0 20 24 28			jsr PLAYERMOVE
  4388
  4389 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 89
  4390
  4391 29F3 20 E3 12			jsr ANIMATEOBSTACLES
  4392
  4393 				; optimize OK (main.pas), line = 90
  4394
  4395 29F6 A5 5A			lda ALIVE
  4396 29F8 F0 04			jeq l_0F6Cx
  4397 29FA C9 FF			cmp #$FF
  4398 29FC D0 A9			jne l_0F6C
  4399 29FE			l_0F6Cx
  4400
  4401 				; optimize OK (main.pas), line = 92
  4402
  4403 29FE AD C5 2A			lda PLAYER1.ISALIVE
  4404 2A01 F0 03			jeq l_0FAD
  4405 2A03 EE C4 2A			inc PLAYER1.SCORE
  4406 2A06			l_0FAD
  4407
  4408 				; optimize OK (main.pas), line = 93
  4409
  4410 2A06 AD CD 2A			lda PLAYER2.ISALIVE
  4411 2A09 F0 03			jeq l_0FC0
  4412 2A0B EE CC 2A			inc PLAYER2.SCORE
  4413 2A0E			l_0FC0
  4414
  4415 				; optimize OK (main.pas), line = 94
  4416
  4417 2A0E AD D5 2A			lda PLAYER3.ISALIVE
  4418 2A11 F0 03			jeq l_0FD3
  4419 2A13 EE D4 2A			inc PLAYER3.SCORE
  4420 2A16			l_0FD3
  4421
  4422 				; optimize OK (main.pas), line = 95
  4423
  4424 2A16 AD DD 2A			lda PLAYER4.ISALIVE
  4425 2A19 F0 03			jeq l_0FE6
  4426 2A1B EE DC 2A			inc PLAYER4.SCORE
  4427 2A1E			l_0FE6
  4428
  4429 				; optimize OK (main.pas), line = 97
  4430
  4431 2A1E A9 64			lda #$64
  4432 2A20 8D B8 2A			sta SYSTEM.PAUSE_006C.N
  4433 2A23 A9 00			lda #$00
  4434 2A25 8D B9 2A			sta SYSTEM.PAUSE_006C.N+1
  4435 2A28 20 2A 11			jsr SYSTEM.PAUSE_006C
  4436 2A2B			@exit
  4437 					.ifdef @new
  4438 					lda <@VarData
  4439 					sta :ztmp
  4440 					lda >@VarData
  4441 					ldy #@VarDataSize-1
  4442 					jmp @FreeMem
  4443 					els
  4444 2A2B 60				rts						; ret
  4445 					eif
  4446 				.endl
  4447 2A2C			l_0007
  4448
  4449 				; --- RepeatUntilProlog
  4450 2A2C			l_0FF1
  4451
  4452 				; optimize FAIL ('INITPLAYERS', main.pas), line = 104
  4453
  4454 2A2C 20 5F 27			jsr INITPLAYERS
  4455 2A2F A9 01			lda #$01
  4456 2A31 8D BC 2A			sta LEVEL
  4457
  4458 				; optimize OK (main.pas), line = 106
  4459
  4460 2A34 A9 00			lda #$00
  4461 2A36 8D BD 2A			sta GAMEOVER
  4462
  4463 				; --- RepeatUntilProlog
  4464 2A39			l_0FFB
  4465
  4466 				; optimize FAIL ('MAINLOOP', main.pas), line = 108
  4467
  4468 2A39 20 9D 29			jsr MAINLOOP
  4469
  4470 				; optimize FAIL (0, main.pas), line = 109
  4471
  4472 2A3C EE BC 2A			inc LEVEL
  4473 2A3F AD BC 2A			lda LEVEL
  4474 2A42 C9 08			cmp #$08
  4475 2A44 D0 05			jne l_1012
  4476 2A46 A9 05			lda #$05
  4477 2A48 8D BC 2A			sta LEVEL
  4478 2A4B			l_1012
  4479
  4480 				; optimize OK (main.pas), line = 110
  4481
  4482 2A4B AD C4 2A			lda PLAYER1.SCORE
  4483 2A4E C9 39			cmp #$39
  4484 2A50 D0 05			jne l_102B
  4485 2A52 A9 01			lda #$01
  4486 2A54 8D BD 2A			sta GAMEOVER
  4487 2A57			l_102B
  4488
  4489 				; optimize OK (main.pas), line = 111
  4490
  4491 2A57 AD CC 2A			lda PLAYER2.SCORE
  4492 2A5A C9 39			cmp #$39
  4493 2A5C D0 05			jne l_1044
  4494 2A5E A9 01			lda #$01
  4495 2A60 8D BD 2A			sta GAMEOVER
  4496 2A63			l_1044
  4497
  4498 				; optimize OK (main.pas), line = 112
  4499
  4500 2A63 AD D4 2A			lda PLAYER3.SCORE
  4501 2A66 C9 39			cmp #$39
  4502 2A68 D0 05			jne l_105D
  4503 2A6A A9 01			lda #$01
  4504 2A6C 8D BD 2A			sta GAMEOVER
  4505 2A6F			l_105D
  4506
  4507 				; optimize OK (main.pas), line = 113
  4508
  4509 2A6F AD DC 2A			lda PLAYER4.SCORE
  4510 2A72 C9 39			cmp #$39
  4511 2A74 D0 05			jne l_1076
  4512 2A76 A9 01			lda #$01
  4513 2A78 8D BD 2A			sta GAMEOVER
  4514 2A7B			l_1076
  4515
  4516 				; optimize OK (main.pas), line = 114
  4517
  4518 2A7B AD BD 2A			lda GAMEOVER
  4519 2A7E F0 B9			jeq l_0FFB
  4520
  4521 				; optimize FAIL ('SHOWSCORE', main.pas), line = 116
  4522
  4523 2A80 20 E9 11			jsr SHOWSCORE
  4524
  4525 				; optimize OK (main.pas), line = 118
  4526
  4527 2A83 A9 C8			lda #$C8
  4528 2A85 8D B8 2A			sta SYSTEM.PAUSE_006C.N
  4529 2A88 A9 00			lda #$00
  4530 2A8A 8D B9 2A			sta SYSTEM.PAUSE_006C.N+1
  4531 2A8D 20 2A 11			jsr SYSTEM.PAUSE_006C
  4532
  4533 				; optimize OK (main.pas), line = 119
  4534
  4535 2A90 4C 2C 2A			jmp l_0FF1
  4536
  4537 				; ------------------------------------------------------------
  4538
  4539 = 0800			ATTRIBUTE_ADDR	= $0800
  4540 = 0C00			SCREEN_ADDR	= $0C00
  4541 = 001F			BACKGROUND_COLOUR	= $1F
  4542 = 0000			BOREDER_COLOUR	= $00
  4543 = 0009			VICTORIES	= $09
  4544 = 0005			LOOK_AHEAD	= $05
  4545 = 007E			TRASH	= $7E
  4546 = 0020			EMPTY	= $20
  4547 = 00A0			WALL	= $A0
  4548 = 0041			WALL_COLOUR	= $41
  4549 = 0030			ZERO	= $30
  4550 = 0056			OBSTACLE_1	= $56
  4551 = 005B			OBSTACLE_2	= $5B
  4552 = 0035			OBST_COLOUR	= $35
  4553 = 0007			OBST_QUANTITY	= $07
  4554 = 0051			PLY_HEAD	= $51
  4555 = 002A			PLY_CRASH	= $2A
  4556 = 0057			PLY_BUSTED	= $57
  4557 = 0042			PLY_TAIL_UD	= $42
  4558 = 0040			PLY_TAIL_LR	= $40
  4559 = 007D			PLY_TAIL_RD	= $7D
  4560 = 006E			PLY_TAIL_RU	= $6E
  4561 = 006D			PLY_TAIL_LD	= $6D
  4562 = 0070			PLY_TAIL_LU	= $70
  4563 = 0062			PLY1_COLOUR	= $62
  4564 = 005D			PLY2_COLOUR	= $5D
  4565 = 0071			PLY3_COLOUR	= $71
  4566 = 0055			PLY4_COLOUR	= $55
  4567 = 0000			PLY_CTRL	= $00
  4568 = 0001			AI_STRAIGHT	= $01
  4569 = 0002			AI_SAPPER	= $02
  4570 = 0003			AI_BULLY	= $03
  4571 = 0004			AI_MIRROR	= $04
  4572 = 0001			JOY_UP	= $01
  4573 = 0002			JOY_DOWN	= $02
  4574 = 0004			JOY_LEFT	= $04
  4575 = 0008			JOY_RIGHT	= $08
  4576 = 0040			JOY_FIRE	= $40
  4577 = 0002			JOY_SELECT_1	= $02
  4578 = 0004			JOY_SELECT_2	= $04
  4579 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4580 2A93			.var MUL40	= adr.MUL40 .word
  4581 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4582 2A93			.var DIRECTION	= adr.DIRECTION .word
  4583 = FD30			KEYSCAN	= $FD30
  4584 = FF08			JOY	= $FF08
  4585 = FF15			BACKGROUND	= $FF15
  4586 = FF19			BOREDER	= $FF19
  4587 = 0058			T0B	= $58
  4588 = 0059			I0B	= $59
  4589 = 005A			ALIVE	= $5A
  4590 = 005B			NEWDIR	= $5B
  4591 = 005C			AVAILDIR	= $5C
  4592 = 005D			T0W	= $5D
  4593 = 005F			adr.PLY	= $5F
  4594 2A93			.var PLY	= adr.PLY .word
  4595 = 2AAC			PLY.X	= DATAORIGIN+$0000
  4596 = 2AAD			PLY.Y	= DATAORIGIN+$0001
  4597 = 2AAE			PLY.HEAD	= DATAORIGIN+$0002
  4598 = 2AAF			PLY.COLOUR	= DATAORIGIN+$0003
  4599 = 2AB0			PLY.DIR	= DATAORIGIN+$0004
  4600 = 2AB1			PLY.BRAIN	= DATAORIGIN+$0005
  4601 = 2AB2			PLY.SCORE	= DATAORIGIN+$0006
  4602 = 2AB3			PLY.ISALIVE	= DATAORIGIN+$0007
  4603 = 0061			adr.TMPPLY	= $61
  4604 2A93			.var TMPPLY	= adr.TMPPLY .word
  4605 = 2AAC			TMPPLY.X	= DATAORIGIN+$0000
  4606 = 2AAD			TMPPLY.Y	= DATAORIGIN+$0001
  4607 = 2AAE			TMPPLY.HEAD	= DATAORIGIN+$0002
  4608 = 2AAF			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4609 = 2AB0			TMPPLY.DIR	= DATAORIGIN+$0004
  4610 = 2AB1			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4611 = 2AB2			TMPPLY.SCORE	= DATAORIGIN+$0006
  4612 = 2AB3			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4613 = 0063			JOYSTATUS	= $63
  4614 = 2ABC			LEVEL	= DATAORIGIN+$0010
  4615 = 2ABD			GAMEOVER	= DATAORIGIN+$0011
  4616 = 2ABE			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4617 2A93			.var PLAYER1	= adr.PLAYER1 .word
  4618 = 2ABE			PLAYER1.X	= DATAORIGIN+$0012
  4619 = 2ABF			PLAYER1.Y	= DATAORIGIN+$0013
  4620 = 2AC0			PLAYER1.HEAD	= DATAORIGIN+$0014
  4621 = 2AC1			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4622 = 2AC2			PLAYER1.DIR	= DATAORIGIN+$0016
  4623 = 2AC3			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4624 = 2AC4			PLAYER1.SCORE	= DATAORIGIN+$0018
  4625 = 2AC5			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4626 = 2AC6			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4627 2A93			.var PLAYER2	= adr.PLAYER2 .word
  4628 = 2AC6			PLAYER2.X	= DATAORIGIN+$001A
  4629 = 2AC7			PLAYER2.Y	= DATAORIGIN+$001B
  4630 = 2AC8			PLAYER2.HEAD	= DATAORIGIN+$001C
  4631 = 2AC9			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4632 = 2ACA			PLAYER2.DIR	= DATAORIGIN+$001E
  4633 = 2ACB			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4634 = 2ACC			PLAYER2.SCORE	= DATAORIGIN+$0020
  4635 = 2ACD			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4636 = 2ACE			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4637 2A93			.var PLAYER3	= adr.PLAYER3 .word
  4638 = 2ACE			PLAYER3.X	= DATAORIGIN+$0022
  4639 = 2ACF			PLAYER3.Y	= DATAORIGIN+$0023
  4640 = 2AD0			PLAYER3.HEAD	= DATAORIGIN+$0024
  4641 = 2AD1			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4642 = 2AD2			PLAYER3.DIR	= DATAORIGIN+$0026
  4643 = 2AD3			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4644 = 2AD4			PLAYER3.SCORE	= DATAORIGIN+$0028
  4645 = 2AD5			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4646 = 2AD6			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4647 2A93			.var PLAYER4	= adr.PLAYER4 .word
  4648 = 2AD6			PLAYER4.X	= DATAORIGIN+$002A
  4649 = 2AD7			PLAYER4.Y	= DATAORIGIN+$002B
  4650 = 2AD8			PLAYER4.HEAD	= DATAORIGIN+$002C
  4651 = 2AD9			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4652 = 2ADA			PLAYER4.DIR	= DATAORIGIN+$002E
  4653 = 2ADB			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4654 = 2ADC			PLAYER4.SCORE	= DATAORIGIN+$0030
  4655 = 2ADD			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4656 = 2ADE			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4657 2A93			.var OBSTACLES	= adr.OBSTACLES .word
  4658 2A93			@exit
  4659
  4660 2A93 A2 00		@halt	ldx #$00
  4661 2A95 9A				txs
  4662
  4663 2A96 60				rts
  4664
  4665 				; ------------------------------------------------------------
  4666
  4667 				; ------------------------------------------------------------
  4668
  4669 2A97			.local	@DEFINES
  4670 2A97			C4P
  4671 				.endl
  4672
  4673 2A97			.local	@RESOURCE
  4674 				.endl
  4675
  4676 = 2A97 0E 10		MUL40
  4676 = 2A99 40 10		DIRECTION
  4676 = 2A9B 5F 00		PLY
  4676 = 2A9D 61 00		TMPPLY
  4676 = 2A9F BE 2A		PLAYER1
  4676 = 2AA1 C6 2A		PLAYER2
  4676 = 2AA3 CE 2A		PLAYER3
  4676 = 2AA5 D6 2A		PLAYER4
  4676 = 2AA7 DE 2A		OBSTACLES
  4676 				.endl							; MAIN
  4677
  4678 				; ------------------------------------------------------------
  4679 				; ------------------------------------------------------------
  4680
  4681 				.macro	UNITINITIALIZATION
  4682 				
  4683 					.ifdef MAIN.SYSTEM.@UnitInit
  4684 					jsr MAIN.SYSTEM.@UnitInit
  4685 					eif
  4686 				.endm
  4687
  4688 				; ------------------------------------------------------------
  4689
  4690 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4691 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4691 				SYSTEM: $10D5..$1177
  4692 					eif
  4693
  4694 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4694 				CODE: $100E..$2A96
  4695
  4696 				; ------------------------------------------------------------
  4697
  4698 2AA9				.align $04
  4699
  4700 2AAC			DATAORIGIN
  4701 2AAC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4702
  4703 = 0006			VARINITSIZE	= *-DATAORIGIN
  4704 = 0066			VARDATASIZE	= 102
  4705
  4706 = 2B12			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4707
  4708 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4708 				DATA: $2AAC..$2B12
  4709
  4710 				; ------------------------------------------------------------
  4711
  4712 				.macro	STATICDATA
  4713 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4714 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4715 				.by  $C0 $03 $01 $02 $04 $08
  4716 				.endm
  4717
  4718 					end
