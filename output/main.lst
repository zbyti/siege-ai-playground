mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E C0 1C			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0045			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1CDA			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BB			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 1F 1C E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 1F 85 02 A9 1D + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 61 1C			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D DF 1C		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD DF 1C 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1CDF			RESULT	= DATAORIGIN+$000B
   182
   183 = 1CDF			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD E0 1C		loop  lda n
   307 1126 0D E1 1C		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD E0 1C D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1CE0			N	= DATAORIGIN+$000C
   321
   322 = 1CE0			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D E2 1C			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD E2 1C		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C E3 1C		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD E3 1C 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1CE2			RANGE	= DATAORIGIN+$000E
   383 = 1CE3			RESULT	= DATAORIGIN+$000F
   384
   385 = 1CE2			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1CD4			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1CD6			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1CD8			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1CD9			FILEMODE	= DATAORIGIN+$0005
   450 = 1CDA			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1CDB			IORESULT	= DATAORIGIN+$0007
   452 = 1CDC			EOLN	= DATAORIGIN+$0008
   453 = 1CDD			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 5
   460
   461 1171 AD 06 1D			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D 05 1D			add X
   466 117D 85 5C			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5D			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 6
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5C			ldy T0W
   475 118A AD 08 1D			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5D			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD 07 1D			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 1D05			X	= DATAORIGIN+$0031
   486 = 1D06			Y	= DATAORIGIN+$0032
   487 = 1D07			V	= DATAORIGIN+$0033
   488 = 1D08			C	= DATAORIGIN+$0034
   489
   490 = 1D05			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	SHOWSCORE					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 13
   508
   509 119C AD E8 1C			lda PLAYER1.COLOUR
   510 119F 8D 08 1D			sta PUTCHAR.C
   511 11A2 AD EB 1C			lda PLAYER1.SCORE
   512 11A5 8D 07 1D			sta PUTCHAR.V
   513 11A8 A9 00			lda #$00
   514 11AA 8D 06 1D			sta PUTCHAR.Y
   515 11AD A9 1E			lda #$1E
   516 11AF 8D 05 1D			sta PUTCHAR.X
   517 11B2 20 71 11			jsr PUTCHAR
   518
   519 				; optimize OK (tools.inc), line = 14
   520
   521 11B5 AD F0 1C			lda PLAYER2.COLOUR
   522 11B8 8D 08 1D			sta PUTCHAR.C
   523 11BB AD F3 1C			lda PLAYER2.SCORE
   524 11BE 8D 07 1D			sta PUTCHAR.V
   525 11C1 A9 00			lda #$00
   526 11C3 8D 06 1D			sta PUTCHAR.Y
   527 11C6 A9 20			lda #$20
   528 11C8 8D 05 1D			sta PUTCHAR.X
   529 11CB 20 71 11			jsr PUTCHAR
   530
   531 				; optimize OK (tools.inc), line = 15
   532
   533 11CE AD F8 1C			lda PLAYER3.COLOUR
   534 11D1 8D 08 1D			sta PUTCHAR.C
   535 11D4 AD FB 1C			lda PLAYER3.SCORE
   536 11D7 8D 07 1D			sta PUTCHAR.V
   537 11DA A9 00			lda #$00
   538 11DC 8D 06 1D			sta PUTCHAR.Y
   539 11DF A9 22			lda #$22
   540 11E1 8D 05 1D			sta PUTCHAR.X
   541 11E4 20 71 11			jsr PUTCHAR
   542
   543 				; optimize OK (tools.inc), line = 16
   544
   545 11E7 AD 00 1D			lda PLAYER4.COLOUR
   546 11EA 8D 08 1D			sta PUTCHAR.C
   547 11ED AD 03 1D			lda PLAYER4.SCORE
   548 11F0 8D 07 1D			sta PUTCHAR.V
   549 11F3 A9 00			lda #$00
   550 11F5 8D 06 1D			sta PUTCHAR.Y
   551 11F8 A9 24			lda #$24
   552 11FA 8D 05 1D			sta PUTCHAR.X
   553 11FD 20 71 11			jsr PUTCHAR
   554 1200			@exit
   555 					.ifdef @new
   556 					lda <@VarData
   557 					sta :ztmp
   558 					lda >@VarData
   559 					ldy #@VarDataSize-1
   560 					jmp @FreeMem
   561 					els
   562 1200 60				rts						; ret
   563 					eif
   564 				.endl
   565
   566 1201			.local	CHECKAVAILDIR					; PROCEDURE
   567
   568 				; optimize OK (tools.inc), line = 23
   569
   570 1201 A9 00			lda #$00
   571 1203 85 5B			sta AVAILDIR
   572
   573 				; optimize OK (tools.inc), line = 24
   574
   575 1205 AC C7 1C 84 12 AC + 	mwy PLY :bp2
   576 120F A0 01			ldy #PLY.Y-DATAORIGIN
   577 1211 B1 12			lda (:bp2),y
   578 1213 0A				asl @
   579 1214 A8				tay
   580 1215 A9 00			lda #$00
   581 1217 18 79 0E 10			add adr.MUL40,y
   582 121B 85 21			sta :STACKORIGIN+9
   583 121D A9 0C			lda #$0C
   584 121F 79 0F 10			adc adr.MUL40+1,y
   585 1222 85 31			sta :STACKORIGIN+STACKWIDTH+9
   586 1224 A0 00			ldy #PLY.X-DATAORIGIN
   587 1226 A5 21			lda :STACKORIGIN+9
   588 1228 18 71 12			add (:bp2),y
   589 122B 85 5C			sta T0W
   590 122D A5 31			lda :STACKORIGIN+STACKWIDTH+9
   591 122F 69 00			adc #$00
   592 1231 85 5D			sta T0W+1
   593
   594 				; optimize OK (tools.inc), line = 26
   595
   596 1233 A5 5C			lda T0W
   597 1235 38 E9 28			sub #$28
   598 1238 85 21			sta :STACKORIGIN+9
   599 123A A5 5D			lda T0W+1
   600 123C E9 00			sbc #$00
   601 123E 85 11			sta :bp+1
   602 1240 A4 21			ldy :STACKORIGIN+9
   603 1242 B1 10			lda (:bp),y
   604 1244 C9 20			cmp #$20
   605 1246 D0 06			jne l_00EE
   606 1248 A5 5B			lda AVAILDIR
   607 124A 09 01			ora #$01
   608 124C 85 5B			sta AVAILDIR
   609 124E			l_00EE
   610
   611 				; optimize OK (tools.inc), line = 27
   612
   613 124E A4 5C 84 12 A4 5D + 	mwy T0W :bp2
   614 1256 A0 28			ldy #$28
   615 1258 B1 12			lda (:bp2),y
   616 125A C9 20			cmp #$20
   617 125C D0 06			jne l_0111
   618 125E A5 5B			lda AVAILDIR
   619 1260 09 02			ora #$02
   620 1262 85 5B			sta AVAILDIR
   621 1264			l_0111
   622
   623 				; optimize OK (tools.inc), line = 28
   624
   625 1264 A5 5C			lda T0W
   626 1266 38 E9 01			sub #$01
   627 1269 85 21			sta :STACKORIGIN+9
   628 126B A5 5D			lda T0W+1
   629 126D E9 00			sbc #$00
   630 126F 85 11			sta :bp+1
   631 1271 A4 21			ldy :STACKORIGIN+9
   632 1273 B1 10			lda (:bp),y
   633 1275 C9 20			cmp #$20
   634 1277 D0 06			jne l_0134
   635 1279 A5 5B			lda AVAILDIR
   636 127B 09 04			ora #$04
   637 127D 85 5B			sta AVAILDIR
   638 127F			l_0134
   639
   640 				; optimize OK (tools.inc), line = 29
   641
   642 127F A4 5C 84 12 A4 5D + 	mwy T0W :bp2
   643 1287 A0 01			ldy #$01
   644 1289 B1 12			lda (:bp2),y
   645 128B C9 20			cmp #$20
   646 128D D0 06			jne l_0157
   647 128F A5 5B			lda AVAILDIR
   648 1291 09 08			ora #$08
   649 1293 85 5B			sta AVAILDIR
   650 1295			l_0157
   651 1295			@exit
   652 					.ifdef @new
   653 					lda <@VarData
   654 					sta :ztmp
   655 					lda >@VarData
   656 					ldy #@VarDataSize-1
   657 					jmp @FreeMem
   658 					els
   659 1295 60				rts						; ret
   660 					eif
   661 				.endl
   662
   663 1296			.local	ANIMATEOBSTACLES				; PROCEDURE
   664
   665 				; optimize FAIL (0, tools.inc), line = 38
   666
   667 1296 EE 09 1D			inc COUNTER
   668
   669 				; optimize OK (tools.inc), line = 39
   670
   671 1299 AD 09 1D			lda COUNTER
   672 129C 29 01			and #$01
   673 129E F0 08			jeq l_0182
   674 12A0 A9 56			lda #$56
   675 12A2 8D 0A 1D			sta OBST
   676 12A5 4C AD 12			jmp l_0190
   677 12A8			l_0182
   678 12A8 A9 5B			lda #$5B
   679 12AA 8D 0A 1D			sta OBST
   680 12AD			l_0190
   681
   682 				; optimize OK (tools.inc), line = 40
   683
   684 12AD AD 0A 1D			lda OBST
   685 12B0 8D FA 0C			sta $0CFA
   686
   687 				; optimize OK (tools.inc), line = 41
   688
   689 12B3 8D 0E 0D			sta $0D0E
   690
   691 				; optimize OK (tools.inc), line = 42
   692
   693 12B6 8D DA 0E			sta $0EDA
   694
   695 				; optimize OK (tools.inc), line = 43
   696
   697 12B9 8D EE 0E			sta $0EEE
   698
   699 				; optimize OK (tools.inc), line = 44
   700
   701 12BC 8D E1 0D			sta $0DE1
   702
   703 				; optimize OK (tools.inc), line = 46
   704
   705 12BF 8D 64 0C			sta $0C64
   706
   707 				; optimize OK (tools.inc), line = 47
   708
   709 12C2 8D 84 0F			sta $0F84
   710
   711 				; ------------------------------------------------------------
   712
   713 = 1D09			COUNTER	= DATAORIGIN+$0035
   714 = 1D0A			OBST	= DATAORIGIN+$0036
   715
   716 = 1D09			@VarData	= COUNTER
   717 = 0002			@VarDataSize	= 2
   718
   719 12C5			@exit
   720 					.ifdef @new
   721 					lda <@VarData
   722 					sta :ztmp
   723 					lda >@VarData
   724 					ldy #@VarDataSize-1
   725 					jmp @FreeMem
   726 					els
   727 12C5 60				rts						; ret
   728 					eif
   729 				.endl
   730
   731 12C6			.local	DRAWTAIL					; PROCEDURE
   732
   733 				; optimize OK (tools.inc), line = 54
   734
   735 12C6 AC C7 1C 84 12 AC + 	mwy PLY :bp2
   736 12D0 A0 04			ldy #PLY.DIR-DATAORIGIN
   737 12D2 B1 12			lda (:bp2),y
   738 12D4 C5 5A			cmp NEWDIR
   739 12D6 D0 14			jne l_01CF
   740
   741 				; optimize OK (tools.inc), line = 55
   742
   743 12D8 A5 5A			lda NEWDIR
   744 12DA 29 0C			and #$0C
   745 12DC F0 07			jeq l_01E6
   746 12DE A9 40			lda #$40
   747 12E0 85 58			sta T0B
   748 12E2 4C E9 12			jmp l_01F4
   749 12E5			l_01E6
   750 12E5 A9 42			lda #$42
   751 12E7 85 58			sta T0B
   752 12E9			l_01F4
   753 12E9 4C 5C 13			jmp l_0201
   754 12EC			l_01CF
   755
   756 				; optimize OK (tools.inc), line = 57
   757
   758 12EC AC C7 1C 84 12 AC + 	mwy PLY :bp2
   759 12F6 A0 04			ldy #PLY.DIR-DATAORIGIN
   760 12F8 B1 12			lda (:bp2),y
   761 12FA 29 0A			and #$0A
   762 12FC F0 0A			jeq l_0227
   763 12FE A5 5A			lda NEWDIR
   764 1300 29 05			and #$05
   765 1302 F0 04			jeq l_0227
   766 1304 A9 7D			lda #$7D
   767 1306 85 58			sta T0B
   768 1308			l_0227
   769
   770 				; optimize OK (tools.inc), line = 58
   771
   772 1308 AC C7 1C 84 12 AC + 	mwy PLY :bp2
   773 1312 A0 04			ldy #PLY.DIR-DATAORIGIN
   774 1314 B1 12			lda (:bp2),y
   775 1316 29 09			and #$09
   776 1318 F0 0A			jeq l_0254
   777 131A A5 5A			lda NEWDIR
   778 131C 29 06			and #$06
   779 131E F0 04			jeq l_0254
   780 1320 A9 6E			lda #$6E
   781 1322 85 58			sta T0B
   782 1324			l_0254
   783
   784 				; optimize OK (tools.inc), line = 59
   785
   786 1324 AC C7 1C 84 12 AC + 	mwy PLY :bp2
   787 132E A0 04			ldy #PLY.DIR-DATAORIGIN
   788 1330 B1 12			lda (:bp2),y
   789 1332 29 06			and #$06
   790 1334 F0 0A			jeq l_0281
   791 1336 A5 5A			lda NEWDIR
   792 1338 29 09			and #$09
   793 133A F0 04			jeq l_0281
   794 133C A9 6D			lda #$6D
   795 133E 85 58			sta T0B
   796 1340			l_0281
   797
   798 				; optimize OK (tools.inc), line = 60
   799
   800 1340 AC C7 1C 84 12 AC + 	mwy PLY :bp2
   801 134A A0 04			ldy #PLY.DIR-DATAORIGIN
   802 134C B1 12			lda (:bp2),y
   803 134E 29 05			and #$05
   804 1350 F0 0A			jeq l_02AE
   805 1352 A5 5A			lda NEWDIR
   806 1354 29 0A			and #$0A
   807 1356 F0 04			jeq l_02AE
   808 1358 A9 70			lda #$70
   809 135A 85 58			sta T0B
   810 135C			l_02AE
   811 135C			l_0201
   812
   813 				; optimize OK (tools.inc), line = 62
   814
   815 135C AC C7 1C 84 12 AC + 	mwy PLY :bp2
   816 1366 A0 00			ldy #PLY.X-DATAORIGIN
   817 1368 B1 12			lda (:bp2),y
   818 136A 8D 05 1D			sta PUTCHAR.X
   819 136D A0 01			ldy #PLY.Y-DATAORIGIN
   820 136F B1 12			lda (:bp2),y
   821 1371 8D 06 1D			sta PUTCHAR.Y
   822 1374 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   823 1376 B1 12			lda (:bp2),y
   824 1378 8D 08 1D			sta PUTCHAR.C
   825 137B A5 58			lda T0B
   826 137D 8D 07 1D			sta PUTCHAR.V
   827 1380 20 71 11			jsr PUTCHAR
   828 1383			@exit
   829 					.ifdef @new
   830 					lda <@VarData
   831 					sta :ztmp
   832 					lda >@VarData
   833 					ldy #@VarDataSize-1
   834 					jmp @FreeMem
   835 					els
   836 1383 60				rts						; ret
   837 					eif
   838 				.endl
   839
   840 1384			.local	INITPLAYERS					; PROCEDURE
   841
   842 				; optimize OK (init.inc), line = 5
   843
   844 1384 AD 0B 1D			lda P
   845 1387 8D C7 1C			sta PLY
   846 138A 85 12			sta :bp2
   847 138C AD 0C 1D			lda P+1
   848 138F 8D C8 1C			sta PLY+1
   849 1392 85 13			sta :bp2+1
   850 				; optimize OK (init.inc), line = 6
   851 1394 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   852 1396 AD 10 1D			lda BRAIN
   853 1399 91 12			sta (:bp2),y
   854 139B A0 00			ldy #PLY.X-DATAORIGIN
   855 139D AD 0D 1D			lda X
   856 13A0 91 12			sta (:bp2),y
   857 13A2 A0 01			ldy #PLY.Y-DATAORIGIN
   858 13A4 AD 0E 1D			lda Y
   859 13A7 91 12			sta (:bp2),y
   860 13A9 A0 04			ldy #PLY.DIR-DATAORIGIN
   861 13AB AD 0F 1D			lda DIR
   862 13AE 91 12			sta (:bp2),y
   863
   864 				; optimize OK (init.inc), line = 7
   865
   866 13B0 A0 02			ldy #PLY.HEAD-DATAORIGIN
   867 13B2 AD 11 1D			lda HEAD
   868 13B5 91 12			sta (:bp2),y
   869 13B7 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   870 13B9 AD 12 1D			lda COLOUR
   871 13BC 91 12			sta (:bp2),y
   872 13BE A0 07			ldy #PLY.ISALIVE-DATAORIGIN
   873 13C0 AD 13 1D			lda ISALIVE
   874 13C3 91 12			sta (:bp2),y
   875
   876 				; optimize OK (init.inc), line = 8
   877
   878 13C5 AD 13 1D			lda ISALIVE
   879 13C8 F0 1D			jeq l_0301
   880
   881 				; optimize FAIL (0, init.inc), line = 9
   882
   883 13CA E6 59			inc ALIVE
   884 13CC AD 12 1D			lda COLOUR
   885 13CF 8D 08 1D			sta PUTCHAR.C
   886 13D2 AD 11 1D			lda HEAD
   887 13D5 8D 07 1D			sta PUTCHAR.V
   888 13D8 AD 0E 1D			lda Y
   889 13DB 8D 06 1D			sta PUTCHAR.Y
   890 13DE AD 0D 1D			lda X
   891 13E1 8D 05 1D			sta PUTCHAR.X
   892 13E4 20 71 11			jsr PUTCHAR
   893 13E7			l_0301
   894
   895 				; ------------------------------------------------------------
   896
   897 = 1D0B			P	= DATAORIGIN+$0037
   898 = 1D0D			X	= DATAORIGIN+$0039
   899 = 1D0E			Y	= DATAORIGIN+$003A
   900 = 1D0F			DIR	= DATAORIGIN+$003B
   901 = 1D10			BRAIN	= DATAORIGIN+$003C
   902 = 1D11			HEAD	= DATAORIGIN+$003D
   903 = 1D12			COLOUR	= DATAORIGIN+$003E
   904 = 1D13			ISALIVE	= DATAORIGIN+$003F
   905
   906 = 1D0B			@VarData	= P
   907 = 0009			@VarDataSize	= 9
   908
   909 13E7			@exit
   910 					.ifdef @new
   911 					lda <@VarData
   912 					sta :ztmp
   913 					lda >@VarData
   914 					ldy #@VarDataSize-1
   915 					jmp @FreeMem
   916 					els
   917 13E7 60				rts						; ret
   918 					eif
   919 				.endl
   920
   921 13E8			.local	INITPLAYFIELD					; PROCEDURE
   922
   923 				; optimize OK (init.inc), line = 17
   924
   925 13E8 A9 1F			lda #$1F
   926 13EA 8D 15 FF			sta BORDERCOLOR
   927 13ED A9 00			lda #$00
   928 13EF 8D 19 FF			sta BGCOLOR
   929
   930 				; optimize OK (init.inc), line = 18
   931
   932 13F2 A9 20			lda #$20
   933 13F4 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   934 13F6 A9 C0			lda #$C0
   935 13F8 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   936 13FA A9 03			lda #$03
   937 13FC 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   938 13FE A9 00			lda #$00
   939 1400 85 08			sta SYSTEM.FILLCHAR_0056.A
   940 1402 A9 0C			lda #$0C
   941 1404 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   942 1406 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   943
   944 				; optimize OK (init.inc), line = 20
   945
   946 1409 A9 27			lda #$27
   947 140B 85 58			sta T0B
   948
   949 140D			l_032E
   950 				; --- ForToDoCondition
   951
   952 				; optimize OK (init.inc), line = 21
   953
   954 140D A4 58			ldy T0B
   955 140F A9 A0			lda #$A0
   956 1411 99 00 0C			sta $0C00,y
   957
   958 				; optimize OK (init.inc), line = 22
   959
   960 1414 99 C0 0F			sta $0FC0,y
   961
   962 				; optimize OK (init.inc), line = 23
   963
   964 1417 A9 41			lda #$41
   965 1419 99 00 08			sta $0800,y
   966
   967 				; optimize OK (init.inc), line = 24
   968
   969 141C 99 C0 0B			sta $0BC0,y
   970
   971 				; --- ForToDoEpilog
   972 141F C6 58			dec T0B
   973 1421 10 EA			jpl l_032E
   974 1423			l_033C
   975
   976 				; optimize OK (init.inc), line = 27
   977
   978 1423 A9 18			lda #$18
   979 1425 85 58			sta T0B
   980
   981 1427			l_036E
   982 				; --- ForToDoCondition
   983 1427 A5 58			lda T0B
   984 1429 C9 01			cmp #$01
   985 142B 90 3A			jcc l_037C
   986
   987 				; optimize OK (init.inc), line = 28
   988
   989 142D 0A				asl @
   990 142E A8				tay
   991 142F A9 FF			lda #$FF
   992 1431 18 79 0E 10			add adr.MUL40,y
   993 1435 85 12			sta :bp2
   994 1437 A9 0B			lda #$0B
   995 1439 79 0F 10			adc adr.MUL40+1,y
   996 143C 85 13			sta :bp2+1
   997 143E A0 00			ldy #$00
   998 1440 A9 A0			lda #$A0
   999 1442 91 12			sta (:bp2),y
  1000 1444 C8				iny
  1001 1445 91 12			sta (:bp2),y
  1002
  1003 				; optimize OK (init.inc), line = 29
  1004
  1005 1447 A5 58			lda T0B
  1006 1449 0A				asl @
  1007 144A A8				tay
  1008 144B A9 FF			lda #$FF
  1009 144D 18 79 0E 10			add adr.MUL40,y
  1010 1451 85 12			sta :bp2
  1011 1453 A9 07			lda #$07
  1012 1455 79 0F 10			adc adr.MUL40+1,y
  1013 1458 85 13			sta :bp2+1
  1014 145A A0 00			ldy #$00
  1015 145C A9 41			lda #$41
  1016 145E 91 12			sta (:bp2),y
  1017 1460 C8				iny
  1018 1461 91 12			sta (:bp2),y
  1019
  1020 				; --- ForToDoEpilog
  1021 1463 C6 58			dec T0B
  1022 1465 10 C0			jpl l_036E
  1023 1467			l_037C
  1024
  1025 				; optimize OK (init.inc), line = 37
  1026
  1027 1467 A9 01			lda #$01
  1028 1469 8D 13 1D			sta INITPLAYERS.ISALIVE
  1029 146C A9 5F			lda #$5F
  1030 146E 8D 12 1D			sta INITPLAYERS.COLOUR
  1031 1471 A9 51			lda #$51
  1032 1473 8D 11 1D			sta INITPLAYERS.HEAD
  1033 1476 A9 00			lda #$00
  1034 1478 8D 10 1D			sta INITPLAYERS.BRAIN
  1035 147B A9 08			lda #$08
  1036 147D 8D 0F 1D			sta INITPLAYERS.DIR
  1037 1480 A9 0C			lda #$0C
  1038 1482 8D 0E 1D			sta INITPLAYERS.Y
  1039 1485 A9 0A			lda #$0A
  1040 1487 8D 0D 1D			sta INITPLAYERS.X
  1041 148A AD CB 1C			lda PLAYER1
  1042 148D 8D 0B 1D			sta INITPLAYERS.P
  1043 1490 AD CC 1C			lda PLAYER1+1
  1044 1493 8D 0C 1D			sta INITPLAYERS.P+1
  1045 1496 20 84 13			jsr INITPLAYERS
  1046
  1047 				; optimize OK (init.inc), line = 38
  1048
  1049 1499 A9 01			lda #$01
  1050 149B 8D 13 1D			sta INITPLAYERS.ISALIVE
  1051 149E A9 5D			lda #$5D
  1052 14A0 8D 12 1D			sta INITPLAYERS.COLOUR
  1053 14A3 A9 51			lda #$51
  1054 14A5 8D 11 1D			sta INITPLAYERS.HEAD
  1055 14A8 A9 04			lda #$04
  1056 14AA 8D 10 1D			sta INITPLAYERS.BRAIN
  1057 14AD 8D 0F 1D			sta INITPLAYERS.DIR
  1058 14B0 A9 0C			lda #$0C
  1059 14B2 8D 0E 1D			sta INITPLAYERS.Y
  1060 14B5 A9 1E			lda #$1E
  1061 14B7 8D 0D 1D			sta INITPLAYERS.X
  1062 14BA AD CD 1C			lda PLAYER2
  1063 14BD 8D 0B 1D			sta INITPLAYERS.P
  1064 14C0 AD CE 1C			lda PLAYER2+1
  1065 14C3 8D 0C 1D			sta INITPLAYERS.P+1
  1066 14C6 20 84 13			jsr INITPLAYERS
  1067
  1068 				; optimize OK (init.inc), line = 39
  1069
  1070 14C9 A9 01			lda #$01
  1071 14CB 8D 13 1D			sta INITPLAYERS.ISALIVE
  1072 14CE A9 71			lda #$71
  1073 14D0 8D 12 1D			sta INITPLAYERS.COLOUR
  1074 14D3 A9 51			lda #$51
  1075 14D5 8D 11 1D			sta INITPLAYERS.HEAD
  1076 14D8 A9 03			lda #$03
  1077 14DA 8D 10 1D			sta INITPLAYERS.BRAIN
  1078 14DD A9 02			lda #$02
  1079 14DF 8D 0F 1D			sta INITPLAYERS.DIR
  1080 14E2 A9 04			lda #$04
  1081 14E4 8D 0E 1D			sta INITPLAYERS.Y
  1082 14E7 A9 14			lda #$14
  1083 14E9 8D 0D 1D			sta INITPLAYERS.X
  1084 14EC AD CF 1C			lda PLAYER3
  1085 14EF 8D 0B 1D			sta INITPLAYERS.P
  1086 14F2 AD D0 1C			lda PLAYER3+1
  1087 14F5 8D 0C 1D			sta INITPLAYERS.P+1
  1088 14F8 20 84 13			jsr INITPLAYERS
  1089
  1090 				; optimize OK (init.inc), line = 40
  1091
  1092 14FB A9 01			lda #$01
  1093 14FD 8D 13 1D			sta INITPLAYERS.ISALIVE
  1094 1500 A9 55			lda #$55
  1095 1502 8D 12 1D			sta INITPLAYERS.COLOUR
  1096 1505 A9 51			lda #$51
  1097 1507 8D 11 1D			sta INITPLAYERS.HEAD
  1098 150A A9 02			lda #$02
  1099 150C 8D 10 1D			sta INITPLAYERS.BRAIN
  1100 150F A9 01			lda #$01
  1101 1511 8D 0F 1D			sta INITPLAYERS.DIR
  1102 1514 A9 12			lda #$12
  1103 1516 8D 0E 1D			sta INITPLAYERS.Y
  1104 1519 A9 14			lda #$14
  1105 151B 8D 0D 1D			sta INITPLAYERS.X
  1106 151E AD D1 1C			lda PLAYER4
  1107 1521 8D 0B 1D			sta INITPLAYERS.P
  1108 1524 AD D2 1C			lda PLAYER4+1
  1109 1527 8D 0C 1D			sta INITPLAYERS.P+1
  1110 152A 20 84 13			jsr INITPLAYERS
  1111
  1112 				; optimize OK (init.inc), line = 42
  1113
  1114 152D A9 35			lda #$35
  1115 152F 8D 08 1D			sta PUTCHAR.C
  1116 1532 A9 56			lda #$56
  1117 1534 8D 07 1D			sta PUTCHAR.V
  1118 1537 A9 06			lda #$06
  1119 1539 8D 06 1D			sta PUTCHAR.Y
  1120 153C A9 0A			lda #$0A
  1121 153E 8D 05 1D			sta PUTCHAR.X
  1122 1541 20 71 11			jsr PUTCHAR
  1123
  1124 				; optimize OK (init.inc), line = 43
  1125
  1126 1544 A9 35			lda #$35
  1127 1546 8D 08 1D			sta PUTCHAR.C
  1128 1549 A9 56			lda #$56
  1129 154B 8D 07 1D			sta PUTCHAR.V
  1130 154E A9 06			lda #$06
  1131 1550 8D 06 1D			sta PUTCHAR.Y
  1132 1553 A9 1E			lda #$1E
  1133 1555 8D 05 1D			sta PUTCHAR.X
  1134 1558 20 71 11			jsr PUTCHAR
  1135
  1136 				; optimize OK (init.inc), line = 44
  1137
  1138 155B A9 35			lda #$35
  1139 155D 8D 08 1D			sta PUTCHAR.C
  1140 1560 A9 56			lda #$56
  1141 1562 8D 07 1D			sta PUTCHAR.V
  1142 1565 A9 12			lda #$12
  1143 1567 8D 06 1D			sta PUTCHAR.Y
  1144 156A A9 0A			lda #$0A
  1145 156C 8D 05 1D			sta PUTCHAR.X
  1146 156F 20 71 11			jsr PUTCHAR
  1147
  1148 				; optimize OK (init.inc), line = 45
  1149
  1150 1572 A9 35			lda #$35
  1151 1574 8D 08 1D			sta PUTCHAR.C
  1152 1577 A9 56			lda #$56
  1153 1579 8D 07 1D			sta PUTCHAR.V
  1154 157C A9 12			lda #$12
  1155 157E 8D 06 1D			sta PUTCHAR.Y
  1156 1581 A9 1E			lda #$1E
  1157 1583 8D 05 1D			sta PUTCHAR.X
  1158 1586 20 71 11			jsr PUTCHAR
  1159
  1160 				; optimize OK (init.inc), line = 46
  1161
  1162 1589 A9 35			lda #$35
  1163 158B 8D 08 1D			sta PUTCHAR.C
  1164 158E A9 56			lda #$56
  1165 1590 8D 07 1D			sta PUTCHAR.V
  1166 1593 A9 0C			lda #$0C
  1167 1595 8D 06 1D			sta PUTCHAR.Y
  1168 1598 A9 01			lda #$01
  1169 159A 8D 05 1D			sta PUTCHAR.X
  1170 159D 20 71 11			jsr PUTCHAR
  1171
  1172 				; optimize OK (init.inc), line = 48
  1173
  1174 15A0 A9 35			lda #$35
  1175 15A2 8D 08 1D			sta PUTCHAR.C
  1176 15A5 A9 56			lda #$56
  1177 15A7 8D 07 1D			sta PUTCHAR.V
  1178 15AA A9 02			lda #$02
  1179 15AC 8D 06 1D			sta PUTCHAR.Y
  1180 15AF A9 14			lda #$14
  1181 15B1 8D 05 1D			sta PUTCHAR.X
  1182 15B4 20 71 11			jsr PUTCHAR
  1183
  1184 				; optimize OK (init.inc), line = 49
  1185
  1186 15B7 A9 35			lda #$35
  1187 15B9 8D 08 1D			sta PUTCHAR.C
  1188 15BC A9 56			lda #$56
  1189 15BE 8D 07 1D			sta PUTCHAR.V
  1190 15C1 A9 16			lda #$16
  1191 15C3 8D 06 1D			sta PUTCHAR.Y
  1192 15C6 A9 14			lda #$14
  1193 15C8 8D 05 1D			sta PUTCHAR.X
  1194 15CB 20 71 11			jsr PUTCHAR
  1195
  1196 				; optimize FAIL ('SHOWSCORE', init.inc), line = 51
  1197
  1198 15CE 20 9C 11			jsr SHOWSCORE
  1199
  1200 				; ------------------------------------------------------------
  1201
  1202 = 0000			@FORTMP_032B	= $00
  1203 = 0001			@FORTMP_036B	= $01
  1204 15D1			@exit
  1205 					.ifdef @new
  1206 					lda <@VarData
  1207 					sta :ztmp
  1208 					lda >@VarData
  1209 					ldy #@VarDataSize-1
  1210 					jmp @FreeMem
  1211 					els
  1212 15D1 60				rts						; ret
  1213 					eif
  1214 				.endl
  1215
  1216 15D2			.local	AISTRAIGHT					; PROCEDURE
  1217
  1218 				; optimize OK (ai.inc), line = 5
  1219
  1220 15D2 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1221 15DC A0 04			ldy #PLY.DIR-DATAORIGIN
  1222 15DE B1 12			lda (:bp2),y
  1223 15E0 25 5B			and AVAILDIR
  1224 15E2 F0 07			jeq l_03FF
  1225 15E4 B1 12			lda (:bp2),y
  1226 15E6 85 5A			sta NEWDIR
  1227 15E8 4C 56 16			jmp l_040F
  1228 15EB			l_03FF
  1229
  1230 				; optimize OK (ai.inc), line = 7
  1231
  1232 15EB A5 5B			lda AVAILDIR
  1233 15ED C9 03			cmp #$03
  1234 15EF D0 10			jne l_0421
  1235 15F1 A9 02			lda #$02
  1236 15F3 20 40 11			jsr SYSTEM.RANDOM_006C
  1237 15F6 B4 18			ldy :STACKORIGIN,x
  1238 15F8 B9 40 10			lda adr.DIRECTION,y
  1239 15FB 85 5A			sta NEWDIR
  1240 15FD CA				dex
  1241 15FE 4C 19 16			jmp l_0433
  1242 1601			l_0421
  1243
  1244 				; optimize OK (ai.inc), line = 9
  1245
  1246 1601 A5 5B			lda AVAILDIR
  1247 1603 8D 14 1D			sta @CASETMP_0003
  1248 1606 C9 01			cmp #$01
  1249 1608 D0 07			jne l_043E
  1250 160A			@
  1251
  1252 				; optimize OK (ai.inc), line = 10
  1253
  1254 160A A9 01			lda #$01
  1255 160C 85 5A			sta NEWDIR
  1256
  1257 160E 4C 19 16			jmp a_0003
  1258 1611			l_043E
  1259 1611 C9 02			cmp #$02
  1260 1613 D0 04			jne l_044B
  1261 1615			@
  1262
  1263 				; optimize OK (ai.inc), line = 11
  1264
  1265 1615 A9 02			lda #$02
  1266 1617 85 5A			sta NEWDIR
  1267
  1268 1619			l_044B
  1269 1619			a_0003
  1270 1619			l_0433
  1271
  1272 				; optimize OK (ai.inc), line = 14
  1273
  1274 1619 A5 5B			lda AVAILDIR
  1275 161B C9 0C			cmp #$0C
  1276 161D D0 1F			jne l_0467
  1277 161F A9 02			lda #$02
  1278 1621 20 40 11			jsr SYSTEM.RANDOM_006C
  1279 1624 E8				inx
  1280 1625 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1281 1629 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1282 162D 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1283 162F 20 44 10			jsr addAX_CX
  1284 1632 CA				dex
  1285 1633 B4 18			ldy :STACKORIGIN,x
  1286 1635 B9 40 10			lda adr.DIRECTION,y
  1287 1638 85 5A			sta NEWDIR
  1288 163A CA				dex
  1289 163B 4C 56 16			jmp l_047D
  1290 163E			l_0467
  1291
  1292 				; optimize OK (ai.inc), line = 16
  1293
  1294 163E A5 5B			lda AVAILDIR
  1295 1640 8D 15 1D			sta @CASETMP_0004
  1296 1643 C9 04			cmp #$04
  1297 1645 D0 07			jne l_0488
  1298 1647			@
  1299
  1300 				; optimize OK (ai.inc), line = 17
  1301
  1302 1647 A9 04			lda #$04
  1303 1649 85 5A			sta NEWDIR
  1304
  1305 164B 4C 56 16			jmp a_0004
  1306 164E			l_0488
  1307 164E C9 08			cmp #$08
  1308 1650 D0 04			jne l_0495
  1309 1652			@
  1310
  1311 				; optimize OK (ai.inc), line = 18
  1312
  1313 1652 A9 08			lda #$08
  1314 1654 85 5A			sta NEWDIR
  1315
  1316 1656			l_0495
  1317 1656			a_0004
  1318 1656			l_047D
  1319 1656			l_040F
  1320
  1321 				; ------------------------------------------------------------
  1322
  1323 = 1D14			@CASETMP_0003	= DATAORIGIN+$0040
  1324 = 1D15			@CASETMP_0004	= DATAORIGIN+$0041
  1325
  1326 = 1D14			@VarData	= @CASETMP_0003
  1327 = 0002			@VarDataSize	= 2
  1328
  1329 1656			@exit
  1330 					.ifdef @new
  1331 					lda <@VarData
  1332 					sta :ztmp
  1333 					lda >@VarData
  1334 					ldy #@VarDataSize-1
  1335 					jmp @FreeMem
  1336 					els
  1337 1656 60				rts						; ret
  1338 					eif
  1339 				.endl
  1340
  1341 1657			.local	AISAPER						; PROCEDURE
  1342
  1343 				; optimize OK (ai.inc), line = 31
  1344
  1345 1657 A9 00			lda #$00
  1346 1659 8D 17 1D			sta L
  1347 165C 8D 18 1D			sta R
  1348 165F 8D 19 1D			sta U
  1349 1662 8D 1A 1D			sta D
  1350
  1351 				; optimize OK (ai.inc), line = 32
  1352
  1353 1665 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1354 166F A0 01			ldy #PLY.Y-DATAORIGIN
  1355 1671 B1 12			lda (:bp2),y
  1356 1673 0A				asl @
  1357 1674 A8				tay
  1358 1675 A9 00			lda #$00
  1359 1677 18 79 0E 10			add adr.MUL40,y
  1360 167B 85 21			sta :STACKORIGIN+9
  1361 167D A9 0C			lda #$0C
  1362 167F 79 0F 10			adc adr.MUL40+1,y
  1363 1682 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1364 1684 A0 00			ldy #PLY.X-DATAORIGIN
  1365 1686 A5 21			lda :STACKORIGIN+9
  1366 1688 18 71 12			add (:bp2),y
  1367 168B 85 5C			sta T0W
  1368 168D A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1369 168F 69 00			adc #$00
  1370 1691 85 5D			sta T0W+1
  1371
  1372 				; optimize OK (ai.inc), line = 34
  1373
  1374 1693 A5 5B			lda AVAILDIR
  1375 1695 29 01			and #$01
  1376 1697 F0 78			jeq l_04DB
  1377
  1378 				; optimize OK (ai.inc), line = 35
  1379
  1380 1699 A9 05			lda #$05
  1381 169B 8D 16 1D			sta I0B
  1382
  1383 169E			l_04E5
  1384 				; --- ForToDoCondition
  1385 169E AD 16 1D			lda I0B
  1386 16A1 C9 01			cmp #$01
  1387 16A3 90 6C			jcc l_04F3
  1388
  1389 				; optimize OK (ai.inc), line = 36
  1390
  1391 16A5 0A				asl @
  1392 16A6 A8				tay
  1393 16A7 A5 5C			lda T0W
  1394 16A9 38 F9 0E 10			sub adr.MUL40,y
  1395 16AD 85 21			sta :STACKORIGIN+9
  1396 16AF A5 5D			lda T0W+1
  1397 16B1 F9 0F 10			sbc adr.MUL40+1,y
  1398 16B4 85 11			sta :bp+1
  1399 16B6 A4 21			ldy :STACKORIGIN+9
  1400 16B8 B1 10			lda (:bp),y
  1401 16BA C9 20			cmp #$20
  1402 16BC D0 03			jne l_050D
  1403 16BE EE 19 1D			inc U
  1404 16C1			l_050D
  1405
  1406 				; optimize OK (ai.inc), line = 37
  1407
  1408 16C1 AD 16 1D			lda I0B
  1409 16C4 0A				asl @
  1410 16C5 A8				tay
  1411 16C6 A5 5C			lda T0W
  1412 16C8 38 F9 0E 10			sub adr.MUL40,y
  1413 16CC 85 21			sta :STACKORIGIN+9
  1414 16CE A5 5D			lda T0W+1
  1415 16D0 F9 0F 10			sbc adr.MUL40+1,y
  1416 16D3 85 11			sta :bp+1
  1417 16D5 A5 21			lda :STACKORIGIN+9
  1418 16D7 18 69 01			add #$01
  1419 16DA A8				tay
  1420 16DB 90 02			scc
  1421 16DD E6 11			inc :bp+1
  1422 16DF B1 10			lda (:bp),y
  1423 16E1 C9 20			cmp #$20
  1424 16E3 D0 03			jne l_0532
  1425 16E5 EE 19 1D			inc U
  1426 16E8			l_0532
  1427
  1428 				; optimize OK (ai.inc), line = 38
  1429
  1430 16E8 AD 16 1D			lda I0B
  1431 16EB 0A				asl @
  1432 16EC A8				tay
  1433 16ED A5 5C			lda T0W
  1434 16EF 38 F9 0E 10			sub adr.MUL40,y
  1435 16F3 85 21			sta :STACKORIGIN+9
  1436 16F5 A5 5D			lda T0W+1
  1437 16F7 F9 0F 10			sbc adr.MUL40+1,y
  1438 16FA 85 11			sta :bp+1
  1439 16FC A4 21			ldy :STACKORIGIN+9
  1440 16FE 88				dey
  1441 16FF B0 02			scs
  1442 1701 C6 11			dec :bp+1
  1443 1703 B1 10			lda (:bp),y
  1444 1705 C9 20			cmp #$20
  1445 1707 D0 03			jne l_0557
  1446 1709 EE 19 1D			inc U
  1447 170C			l_0557
  1448
  1449 				; --- ForToDoEpilog
  1450 170C CE 16 1D			dec I0B
  1451 170F 10 8D			jpl l_04E5
  1452 1711			l_04F3
  1453 1711			l_04DB
  1454
  1455 				; optimize OK (ai.inc), line = 42
  1456
  1457 1711 A5 5B			lda AVAILDIR
  1458 1713 29 02			and #$02
  1459 1715 F0 78			jeq l_057B
  1460
  1461 				; optimize OK (ai.inc), line = 43
  1462
  1463 1717 A9 05			lda #$05
  1464 1719 8D 16 1D			sta I0B
  1465
  1466 171C			l_0585
  1467 				; --- ForToDoCondition
  1468 171C AD 16 1D			lda I0B
  1469 171F C9 01			cmp #$01
  1470 1721 90 6C			jcc l_0593
  1471
  1472 				; optimize OK (ai.inc), line = 44
  1473
  1474 1723 0A				asl @
  1475 1724 A8				tay
  1476 1725 A5 5C			lda T0W
  1477 1727 18 79 0E 10			add adr.MUL40,y
  1478 172B 85 21			sta :STACKORIGIN+9
  1479 172D A5 5D			lda T0W+1
  1480 172F 79 0F 10			adc adr.MUL40+1,y
  1481 1732 85 11			sta :bp+1
  1482 1734 A4 21			ldy :STACKORIGIN+9
  1483 1736 B1 10			lda (:bp),y
  1484 1738 C9 20			cmp #$20
  1485 173A D0 03			jne l_05AD
  1486 173C EE 1A 1D			inc D
  1487 173F			l_05AD
  1488
  1489 				; optimize OK (ai.inc), line = 45
  1490
  1491 173F AD 16 1D			lda I0B
  1492 1742 0A				asl @
  1493 1743 A8				tay
  1494 1744 A5 5C			lda T0W
  1495 1746 18 79 0E 10			add adr.MUL40,y
  1496 174A 85 21			sta :STACKORIGIN+9
  1497 174C A5 5D			lda T0W+1
  1498 174E 79 0F 10			adc adr.MUL40+1,y
  1499 1751 85 11			sta :bp+1
  1500 1753 A5 21			lda :STACKORIGIN+9
  1501 1755 18 69 01			add #$01
  1502 1758 A8				tay
  1503 1759 90 02			scc
  1504 175B E6 11			inc :bp+1
  1505 175D B1 10			lda (:bp),y
  1506 175F C9 20			cmp #$20
  1507 1761 D0 03			jne l_05D2
  1508 1763 EE 1A 1D			inc D
  1509 1766			l_05D2
  1510
  1511 				; optimize OK (ai.inc), line = 46
  1512
  1513 1766 AD 16 1D			lda I0B
  1514 1769 0A				asl @
  1515 176A A8				tay
  1516 176B A5 5C			lda T0W
  1517 176D 18 79 0E 10			add adr.MUL40,y
  1518 1771 85 21			sta :STACKORIGIN+9
  1519 1773 A5 5D			lda T0W+1
  1520 1775 79 0F 10			adc adr.MUL40+1,y
  1521 1778 85 11			sta :bp+1
  1522 177A A4 21			ldy :STACKORIGIN+9
  1523 177C 88				dey
  1524 177D B0 02			scs
  1525 177F C6 11			dec :bp+1
  1526 1781 B1 10			lda (:bp),y
  1527 1783 C9 20			cmp #$20
  1528 1785 D0 03			jne l_05F7
  1529 1787 EE 1A 1D			inc D
  1530 178A			l_05F7
  1531
  1532 				; --- ForToDoEpilog
  1533 178A CE 16 1D			dec I0B
  1534 178D 10 8D			jpl l_0585
  1535 178F			l_0593
  1536 178F			l_057B
  1537
  1538 				; optimize OK (ai.inc), line = 50
  1539
  1540 178F A5 5B			lda AVAILDIR
  1541 1791 29 04			and #$04
  1542 1793 F0 65			jeq l_061B
  1543
  1544 				; optimize OK (ai.inc), line = 51
  1545
  1546 1795 A9 05			lda #$05
  1547 1797 8D 16 1D			sta I0B
  1548
  1549 179A			l_0625
  1550 				; --- ForToDoCondition
  1551 179A AD 16 1D			lda I0B
  1552 179D C9 01			cmp #$01
  1553 179F 90 59			jcc l_0633
  1554
  1555 				; optimize OK (ai.inc), line = 52
  1556
  1557 17A1 A5 5C			lda T0W
  1558 17A3 38 ED 16 1D			sub I0B
  1559 17A7 A8				tay
  1560 17A8 A5 5D			lda T0W+1
  1561 17AA E9 00			sbc #$00
  1562 17AC 85 11			sta :bp+1
  1563 17AE B1 10			lda (:bp),y
  1564 17B0 C9 20			cmp #$20
  1565 17B2 D0 03			jne l_064B
  1566 17B4 EE 17 1D			inc L
  1567 17B7			l_064B
  1568
  1569 				; optimize OK (ai.inc), line = 53
  1570
  1571 17B7 A5 5C			lda T0W
  1572 17B9 38 ED 16 1D			sub I0B
  1573 17BD A8				tay
  1574 17BE A5 5D			lda T0W+1
  1575 17C0 E9 00			sbc #$00
  1576 17C2 85 11			sta :bp+1
  1577 17C4 98				tya
  1578 17C5 18 69 28			add #$28
  1579 17C8 A8				tay
  1580 17C9 90 02			scc
  1581 17CB E6 11			inc :bp+1
  1582 17CD B1 10			lda (:bp),y
  1583 17CF C9 20			cmp #$20
  1584 17D1 D0 03			jne l_066E
  1585 17D3 EE 17 1D			inc L
  1586 17D6			l_066E
  1587
  1588 				; optimize OK (ai.inc), line = 54
  1589
  1590 17D6 A5 5C			lda T0W
  1591 17D8 38 ED 16 1D			sub I0B
  1592 17DC A8				tay
  1593 17DD A5 5D			lda T0W+1
  1594 17DF E9 00			sbc #$00
  1595 17E1 85 11			sta :bp+1
  1596 17E3 98				tya
  1597 17E4 38 E9 28			sub #$28
  1598 17E7 A8				tay
  1599 17E8 B0 02			scs
  1600 17EA C6 11			dec :bp+1
  1601 17EC B1 10			lda (:bp),y
  1602 17EE C9 20			cmp #$20
  1603 17F0 D0 03			jne l_0691
  1604 17F2 EE 17 1D			inc L
  1605 17F5			l_0691
  1606
  1607 				; --- ForToDoEpilog
  1608 17F5 CE 16 1D			dec I0B
  1609 17F8 10 A0			jpl l_0625
  1610 17FA			l_0633
  1611 17FA			l_061B
  1612
  1613 				; optimize OK (ai.inc), line = 58
  1614
  1615 17FA A5 5B			lda AVAILDIR
  1616 17FC 29 08			and #$08
  1617 17FE F0 63			jeq l_06B5
  1618
  1619 				; optimize OK (ai.inc), line = 59
  1620
  1621 1800 A9 05			lda #$05
  1622 1802 8D 16 1D			sta I0B
  1623
  1624 1805			l_06BF
  1625 				; --- ForToDoCondition
  1626 1805 AD 16 1D			lda I0B
  1627 1808 C9 01			cmp #$01
  1628 180A 90 57			jcc l_06CD
  1629
  1630 				; optimize OK (ai.inc), line = 60
  1631
  1632 180C A4 5C 84 12 A4 5D + 	mwy T0W :bp2
  1633 1814 AC 16 1D			ldy I0B
  1634 1817 B1 12			lda (:bp2),y
  1635 1819 C9 20			cmp #$20
  1636 181B D0 03			jne l_06E5
  1637 181D EE 18 1D			inc R
  1638 1820			l_06E5
  1639
  1640 				; optimize OK (ai.inc), line = 61
  1641
  1642 1820 A5 5C			lda T0W
  1643 1822 18 6D 16 1D			add I0B
  1644 1826 A8				tay
  1645 1827 A5 5D			lda T0W+1
  1646 1829 69 00			adc #$00
  1647 182B 85 11			sta :bp+1
  1648 182D 98				tya
  1649 182E 18 69 28			add #$28
  1650 1831 A8				tay
  1651 1832 90 02			scc
  1652 1834 E6 11			inc :bp+1
  1653 1836 B1 10			lda (:bp),y
  1654 1838 C9 20			cmp #$20
  1655 183A D0 03			jne l_0708
  1656 183C EE 18 1D			inc R
  1657 183F			l_0708
  1658
  1659 				; optimize OK (ai.inc), line = 62
  1660
  1661 183F A5 5C			lda T0W
  1662 1841 18 6D 16 1D			add I0B
  1663 1845 A8				tay
  1664 1846 A5 5D			lda T0W+1
  1665 1848 69 00			adc #$00
  1666 184A 85 11			sta :bp+1
  1667 184C 98				tya
  1668 184D 38 E9 28			sub #$28
  1669 1850 A8				tay
  1670 1851 B0 02			scs
  1671 1853 C6 11			dec :bp+1
  1672 1855 B1 10			lda (:bp),y
  1673 1857 C9 20			cmp #$20
  1674 1859 D0 03			jne l_072B
  1675 185B EE 18 1D			inc R
  1676 185E			l_072B
  1677
  1678 				; --- ForToDoEpilog
  1679 185E CE 16 1D			dec I0B
  1680 1861 10 A2			jpl l_06BF
  1681 1863			l_06CD
  1682 1863			l_06B5
  1683
  1684 				; optimize OK (ai.inc), line = 66
  1685
  1686 1863 AD 1A 1D			lda D
  1687 1866 85 58			sta T0B
  1688
  1689 				; optimize OK (ai.inc), line = 67
  1690
  1691 1868 CD 19 1D			cmp U
  1692 186B B0 05			jcs l_0753
  1693 186D AD 19 1D			lda U
  1694 1870 85 58			sta T0B
  1695 1872			l_0753
  1696
  1697 				; optimize OK (ai.inc), line = 68
  1698
  1699 1872 A5 58			lda T0B
  1700 1874 CD 17 1D			cmp L
  1701 1877 B0 05			jcs l_0770
  1702 1879 AD 17 1D			lda L
  1703 187C 85 58			sta T0B
  1704 187E			l_0770
  1705
  1706 				; optimize OK (ai.inc), line = 69
  1707
  1708 187E A5 58			lda T0B
  1709 1880 CD 18 1D			cmp R
  1710 1883 B0 05			jcs l_078D
  1711 1885 AD 18 1D			lda R
  1712 1888 85 58			sta T0B
  1713 188A			l_078D
  1714
  1715 				; optimize OK (ai.inc), line = 71
  1716
  1717 188A A5 58			lda T0B
  1718 188C CD 1A 1D			cmp D
  1719 188F D0 04			jne l_07AA
  1720 1891 A9 02			lda #$02
  1721 1893 85 58			sta T0B
  1722 1895			l_07AA
  1723
  1724 				; optimize OK (ai.inc), line = 72
  1725
  1726 1895 A5 58			lda T0B
  1727 1897 CD 19 1D			cmp U
  1728 189A D0 04			jne l_07C5
  1729 189C A9 01			lda #$01
  1730 189E 85 58			sta T0B
  1731 18A0			l_07C5
  1732
  1733 				; optimize OK (ai.inc), line = 73
  1734
  1735 18A0 A5 58			lda T0B
  1736 18A2 CD 17 1D			cmp L
  1737 18A5 D0 04			jne l_07E0
  1738 18A7 A9 04			lda #$04
  1739 18A9 85 58			sta T0B
  1740 18AB			l_07E0
  1741
  1742 				; optimize OK (ai.inc), line = 74
  1743
  1744 18AB A5 58			lda T0B
  1745 18AD CD 18 1D			cmp R
  1746 18B0 D0 04			jne l_07FB
  1747 18B2 A9 08			lda #$08
  1748 18B4 85 58			sta T0B
  1749 18B6			l_07FB
  1750
  1751 				; optimize OK (ai.inc), line = 76
  1752
  1753 18B6 A5 5B			lda AVAILDIR
  1754 18B8 25 58			and T0B
  1755 18BA F0 07			jeq l_081A
  1756 18BC A5 58			lda T0B
  1757 18BE 85 5A			sta NEWDIR
  1758 18C0 4C C6 18			jmp l_082A
  1759 18C3			l_081A
  1760
  1761 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1762
  1763 18C3 20 D2 15			jsr AISTRAIGHT
  1764 18C6			l_082A
  1765
  1766 				; ------------------------------------------------------------
  1767
  1768 = 1D16			I0B	= DATAORIGIN+$0042
  1769 = 1D17			L	= DATAORIGIN+$0043
  1770 = 1D18			R	= DATAORIGIN+$0044
  1771 = 1D19			U	= DATAORIGIN+$0045
  1772 = 1D1A			D	= DATAORIGIN+$0046
  1773 = 0001			@FORTMP_04E2	= $01
  1774 = 0001			@FORTMP_0582	= $01
  1775 = 0001			@FORTMP_0622	= $01
  1776 = 0001			@FORTMP_06BC	= $01
  1777
  1778 = 1D16			@VarData	= I0B
  1779 = 0005			@VarDataSize	= 5
  1780
  1781 18C6			@exit
  1782 					.ifdef @new
  1783 					lda <@VarData
  1784 					sta :ztmp
  1785 					lda >@VarData
  1786 					ldy #@VarDataSize-1
  1787 					jmp @FreeMem
  1788 					els
  1789 18C6 60				rts						; ret
  1790 					eif
  1791 				.endl
  1792
  1793 18C7			.local	AIBULLY						; PROCEDURE
  1794
  1795 				; optimize OK (ai.inc), line = 84
  1796
  1797 18C7 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1798 18D1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1799 18D3 B1 12			lda (:bp2),y
  1800 18D5 85 58			sta T0B
  1801
  1802 				; optimize OK (ai.inc), line = 86
  1803
  1804 18D7 AD EC 1C			lda PLAYER1.ISALIVE
  1805 18DA F0 0F			jeq l_0841
  1806 18DC AD CB 1C			lda PLAYER1
  1807 18DF 8D C9 1C			sta TMPPLY
  1808 18E2 AD CC 1C			lda PLAYER1+1
  1809 18E5 8D CA 1C			sta TMPPLY+1
  1810 18E8 4C F7 18			jmp l_0850
  1811 18EB			l_0841
  1812 18EB AD CD 1C			lda PLAYER2
  1813 18EE 8D C9 1C			sta TMPPLY
  1814 18F1 AD CE 1C			lda PLAYER2+1
  1815 18F4 8D CA 1C			sta TMPPLY+1
  1816 18F7			l_0850
  1817
  1818 				; optimize OK (ai.inc), line = 88
  1819
  1820 18F7 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1821 1901 A0 01			ldy #PLY.Y-DATAORIGIN
  1822 1903 B1 12			lda (:bp2),y
  1823 1905 85 21			sta :STACKORIGIN+9
  1824 1907 AC C9 1C 84 12 AC + 	mwy TMPPLY :bp2
  1825 1911 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1826 1913 B1 12			lda (:bp2),y
  1827 1915 C5 21			cmp :STACKORIGIN+9
  1828 1917 B0 07			jcs l_0869
  1829 1919 A9 01			lda #$01
  1830 191B 85 58			sta T0B
  1831 191D 4C 24 19			jmp l_0877
  1832 1920			l_0869
  1833 1920 A9 02			lda #$02
  1834 1922 85 58			sta T0B
  1835 1924			l_0877
  1836
  1837 				; optimize OK (ai.inc), line = 89
  1838
  1839 1924 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1840 192E A0 01			ldy #PLY.Y-DATAORIGIN
  1841 1930 B1 12			lda (:bp2),y
  1842 1932 85 21			sta :STACKORIGIN+9
  1843 1934 AC C9 1C 84 12 AC + 	mwy TMPPLY :bp2
  1844 193E A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1845 1940 B1 12			lda (:bp2),y
  1846 1942 C5 21			cmp :STACKORIGIN+9
  1847 1944 F0 06			jeq l_08A1x
  1848 1946 A5 5B			lda AVAILDIR
  1849 1948 25 58			and T0B
  1850 194A D0 2D			jne l_08A1
  1851 194C			l_08A1x
  1852
  1853 				; optimize OK (ai.inc), line = 90
  1854
  1855 194C AC C7 1C 84 12 AC + 	mwy PLY :bp2
  1856 1956 A0 00			ldy #PLY.X-DATAORIGIN
  1857 1958 B1 12			lda (:bp2),y
  1858 195A 85 21			sta :STACKORIGIN+9
  1859 195C AC C9 1C 84 12 AC + 	mwy TMPPLY :bp2
  1860 1966 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1861 1968 B1 12			lda (:bp2),y
  1862 196A C5 21			cmp :STACKORIGIN+9
  1863 196C B0 07			jcs l_08B6
  1864 196E A9 04			lda #$04
  1865 1970 85 58			sta T0B
  1866 1972 4C 79 19			jmp l_08C4
  1867 1975			l_08B6
  1868 1975 A9 08			lda #$08
  1869 1977 85 58			sta T0B
  1870 1979			l_08C4
  1871 1979			l_08A1
  1872
  1873 				; optimize OK (ai.inc), line = 92
  1874
  1875 1979 A5 5B			lda AVAILDIR
  1876 197B 25 58			and T0B
  1877 197D F0 07			jeq l_08E2
  1878 197F A5 58			lda T0B
  1879 1981 85 5A			sta NEWDIR
  1880 1983 4C 89 19			jmp l_08F2
  1881 1986			l_08E2
  1882
  1883 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 93
  1884
  1885 1986 20 D2 15			jsr AISTRAIGHT
  1886 1989			l_08F2
  1887 1989			@exit
  1888 					.ifdef @new
  1889 					lda <@VarData
  1890 					sta :ztmp
  1891 					lda >@VarData
  1892 					ldy #@VarDataSize-1
  1893 					jmp @FreeMem
  1894 					els
  1895 1989 60				rts						; ret
  1896 					eif
  1897 				.endl
  1898
  1899 198A			.local	AIMIRROR					; PROCEDURE
  1900
  1901 				; optimize OK (ai.inc), line = 100
  1902
  1903 198A AD EC 1C			lda PLAYER1.ISALIVE
  1904 198D F0 42			jeq l_0903
  1905
  1906 				; optimize OK (ai.inc), line = 101
  1907
  1908 198F AD E9 1C			lda PLAYER1.DIR
  1909 1992 8D 1B 1D			sta @CASETMP_0005
  1910 1995 C9 01			cmp #$01
  1911 1997 D0 07			jne l_090F
  1912 1999			@
  1913
  1914 				; optimize OK (ai.inc), line = 102
  1915
  1916 1999 A9 02			lda #$02
  1917 199B 85 58			sta T0B
  1918
  1919 199D 4C BE 19			jmp a_0005
  1920 19A0			l_090F
  1921 19A0 C9 02			cmp #$02
  1922 19A2 D0 07			jne l_091C
  1923 19A4			@
  1924
  1925 				; optimize OK (ai.inc), line = 103
  1926
  1927 19A4 A9 01			lda #$01
  1928 19A6 85 58			sta T0B
  1929
  1930 19A8 4C BE 19			jmp a_0005
  1931 19AB			l_091C
  1932 19AB C9 04			cmp #$04
  1933 19AD D0 07			jne l_0929
  1934 19AF			@
  1935
  1936 				; optimize OK (ai.inc), line = 104
  1937
  1938 19AF A9 08			lda #$08
  1939 19B1 85 58			sta T0B
  1940
  1941 19B3 4C BE 19			jmp a_0005
  1942 19B6			l_0929
  1943 19B6 C9 08			cmp #$08
  1944 19B8 D0 04			jne l_0936
  1945 19BA			@
  1946
  1947 				; optimize OK (ai.inc), line = 105
  1948
  1949 19BA A9 04			lda #$04
  1950 19BC 85 58			sta T0B
  1951
  1952 19BE			l_0936
  1953 19BE			a_0005
  1954
  1955 				; optimize OK (ai.inc), line = 108
  1956
  1957 19BE A5 5B			lda AVAILDIR
  1958 19C0 25 58			and T0B
  1959 19C2 F0 07			jeq l_095A
  1960 19C4 A5 58			lda T0B
  1961 19C6 85 5A			sta NEWDIR
  1962 19C8 4C CE 19			jmp l_096A
  1963 19CB			l_095A
  1964
  1965 				; optimize FAIL ('AISAPER', ai.inc), line = 109
  1966
  1967 19CB 20 57 16			jsr AISAPER
  1968 19CE			l_096A
  1969 19CE 4C D4 19			jmp l_0974
  1970 19D1			l_0903
  1971
  1972 				; optimize FAIL ('AISAPER', ai.inc), line = 110
  1973
  1974 19D1 20 57 16			jsr AISAPER
  1975 19D4			l_0974
  1976
  1977 				; ------------------------------------------------------------
  1978
  1979 = 1D1B			@CASETMP_0005	= DATAORIGIN+$0047
  1980
  1981 = 1D1B			@VarData	= @CASETMP_0005
  1982 = 0001			@VarDataSize	= 1
  1983
  1984 19D4			@exit
  1985 					.ifdef @new
  1986 					lda <@VarData
  1987 					sta :ztmp
  1988 					lda >@VarData
  1989 					ldy #@VarDataSize-1
  1990 					jmp @FreeMem
  1991 					els
  1992 19D4 60				rts						; ret
  1993 					eif
  1994 				.endl
  1995
  1996 19D5			.local	HUMAN						; PROCEDURE
  1997
  1998 				; optimize OK (main.pas), line = 14
  1999
  2000 19D5 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2001 19DF A0 04			ldy #PLY.DIR-DATAORIGIN
  2002 19E1 B1 12			lda (:bp2),y
  2003 19E3 85 5A			sta NEWDIR
  2004
  2005 				; optimize OK (main.pas), line = 15
  2006
  2007 19E5 A9 02			lda #$02
  2008 19E7 8D 08 FF			sta JOY
  2009 19EA A9 FF			lda #$FF
  2010 19EC 8D 30 FD			sta KEYSCAN
  2011 19EF AD 08 FF			lda JOY
  2012 19F2 49 FF			eor #$FF
  2013 19F4 85 58			sta T0B
  2014
  2015 				; optimize OK (main.pas), line = 17
  2016
  2017 19F6 8D 1C 1D			sta @CASETMP_0006
  2018 19F9 C9 01			cmp #$01
  2019 19FB D0 19			jne l_099C
  2020 19FD			@
  2021
  2022 				; optimize OK (main.pas), line = 18
  2023
  2024 19FD AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2025 1A07 A0 04			ldy #PLY.DIR-DATAORIGIN
  2026 1A09 B1 12			lda (:bp2),y
  2027 1A0B C9 02			cmp #$02
  2028 1A0D F0 04			jeq l_09AE
  2029 1A0F A9 01			lda #$01
  2030 1A11 85 5A			sta NEWDIR
  2031 1A13			l_09AE
  2032
  2033 1A13 4C 6A 1A			jmp a_0006
  2034 1A16			l_099C
  2035 1A16 C9 02			cmp #$02
  2036 1A18 D0 19			jne l_09BE
  2037 1A1A			@
  2038
  2039 				; optimize OK (main.pas), line = 19
  2040
  2041 1A1A AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2042 1A24 A0 04			ldy #PLY.DIR-DATAORIGIN
  2043 1A26 B1 12			lda (:bp2),y
  2044 1A28 C9 01			cmp #$01
  2045 1A2A F0 04			jeq l_09D0
  2046 1A2C A9 02			lda #$02
  2047 1A2E 85 5A			sta NEWDIR
  2048 1A30			l_09D0
  2049
  2050 1A30 4C 6A 1A			jmp a_0006
  2051 1A33			l_09BE
  2052 1A33 C9 04			cmp #$04
  2053 1A35 D0 19			jne l_09E0
  2054 1A37			@
  2055
  2056 				; optimize OK (main.pas), line = 20
  2057
  2058 1A37 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2059 1A41 A0 04			ldy #PLY.DIR-DATAORIGIN
  2060 1A43 B1 12			lda (:bp2),y
  2061 1A45 C9 08			cmp #$08
  2062 1A47 F0 04			jeq l_09F2
  2063 1A49 A9 04			lda #$04
  2064 1A4B 85 5A			sta NEWDIR
  2065 1A4D			l_09F2
  2066
  2067 1A4D 4C 6A 1A			jmp a_0006
  2068 1A50			l_09E0
  2069 1A50 C9 08			cmp #$08
  2070 1A52 D0 16			jne l_0A02
  2071 1A54			@
  2072
  2073 				; optimize OK (main.pas), line = 21
  2074
  2075 1A54 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2076 1A5E A0 04			ldy #PLY.DIR-DATAORIGIN
  2077 1A60 B1 12			lda (:bp2),y
  2078 1A62 C9 04			cmp #$04
  2079 1A64 F0 04			jeq l_0A14
  2080 1A66 A9 08			lda #$08
  2081 1A68 85 5A			sta NEWDIR
  2082 1A6A			l_0A14
  2083
  2084 1A6A			l_0A02
  2085 1A6A			a_0006
  2086
  2087 				; optimize OK (main.pas), line = 24
  2088
  2089 1A6A A5 5A			lda NEWDIR
  2090 1A6C 25 5B			and AVAILDIR
  2091 1A6E D0 18			jne l_0A3B
  2092
  2093 				; optimize OK (main.pas), line = 25
  2094
  2095 1A70 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2096 1A7A A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2097 1A7C A9 00			lda #$00
  2098 1A7E 91 12			sta (:bp2),y
  2099 1A80 A0 02			ldy #PLY.HEAD-DATAORIGIN
  2100 1A82 A9 2A			lda #$2A
  2101 1A84 91 12			sta (:bp2),y
  2102 1A86 C6 59			dec ALIVE
  2103 1A88			l_0A3B
  2104
  2105 				; ------------------------------------------------------------
  2106
  2107 = 1D1C			@CASETMP_0006	= DATAORIGIN+$0048
  2108
  2109 = 1D1C			@VarData	= @CASETMP_0006
  2110 = 0001			@VarDataSize	= 1
  2111
  2112 1A88			@exit
  2113 					.ifdef @new
  2114 					lda <@VarData
  2115 					sta :ztmp
  2116 					lda >@VarData
  2117 					ldy #@VarDataSize-1
  2118 					jmp @FreeMem
  2119 					els
  2120 1A88 60				rts						; ret
  2121 					eif
  2122 				.endl
  2123
  2124 1A89			.local	PLAYERMOVE					; PROCEDURE
  2125
  2126 				; optimize OK (main.pas), line = 33
  2127
  2128 1A89 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2129 1A93 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2130 1A95 B1 12			lda (:bp2),y
  2131 1A97 D0 03 4C BE 1B		jeq l_0A5A
  2132
  2133 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 34
  2134
  2135 1A9C 20 01 12			jsr CHECKAVAILDIR
  2136
  2137 				; optimize OK (main.pas), line = 36
  2138
  2139 1A9F A5 5B			lda AVAILDIR
  2140 1AA1 D0 35			jne l_0A6E
  2141
  2142 				; optimize OK (main.pas), line = 37
  2143
  2144 1AA3 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2145 1AAD A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2146 1AAF A9 00			lda #$00
  2147 1AB1 91 12			sta (:bp2),y
  2148 1AB3 C6 59			dec ALIVE
  2149
  2150 				; optimize OK (main.pas), line = 38
  2151
  2152 1AB5 A0 00			ldy #PLY.X-DATAORIGIN
  2153 1AB7 B1 12			lda (:bp2),y
  2154 1AB9 8D 05 1D			sta PUTCHAR.X
  2155 1ABC A0 01			ldy #PLY.Y-DATAORIGIN
  2156 1ABE B1 12			lda (:bp2),y
  2157 1AC0 8D 06 1D			sta PUTCHAR.Y
  2158 1AC3 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  2159 1AC5 B1 12			lda (:bp2),y
  2160 1AC7 18 69 80			add #$80
  2161 1ACA 8D 08 1D			sta PUTCHAR.C
  2162 1ACD A9 57			lda #$57
  2163 1ACF 8D 07 1D			sta PUTCHAR.V
  2164 1AD2 20 71 11			jsr PUTCHAR
  2165 1AD5 4C BE 1B			jmp l_0A8F
  2166 1AD8			l_0A6E
  2167
  2168 				; optimize OK (main.pas), line = 41
  2169
  2170 1AD8 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2171 1AE2 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  2172 1AE4 B1 12			lda (:bp2),y
  2173 1AE6 8D 1D 1D			sta @CASETMP_0007
  2174 1AE9 C9 00			cmp #$00
  2175 1AEB D0 06			jne l_0A9A
  2176 1AED			@
  2177
  2178 				; optimize FAIL ('HUMAN', main.pas), line = 42
  2179
  2180 1AED 20 D5 19			jsr HUMAN
  2181 1AF0 4C 18 1B			jmp a_0007
  2182 1AF3			l_0A9A
  2183 1AF3 C9 01			cmp #$01
  2184 1AF5 D0 06			jne l_0AA4
  2185 1AF7			@
  2186
  2187 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 43
  2188
  2189 1AF7 20 D2 15			jsr AISTRAIGHT
  2190 1AFA 4C 18 1B			jmp a_0007
  2191 1AFD			l_0AA4
  2192 1AFD C9 02			cmp #$02
  2193 1AFF D0 06			jne l_0AAE
  2194 1B01			@
  2195
  2196 				; optimize FAIL ('AISAPER', main.pas), line = 44
  2197
  2198 1B01 20 57 16			jsr AISAPER
  2199 1B04 4C 18 1B			jmp a_0007
  2200 1B07			l_0AAE
  2201 1B07 C9 03			cmp #$03
  2202 1B09 D0 06			jne l_0AB8
  2203 1B0B			@
  2204
  2205 				; optimize FAIL ('AIBULLY', main.pas), line = 45
  2206
  2207 1B0B 20 C7 18			jsr AIBULLY
  2208 1B0E 4C 18 1B			jmp a_0007
  2209 1B11			l_0AB8
  2210 1B11 C9 04			cmp #$04
  2211 1B13 D0 03			jne l_0AC2
  2212 1B15			@
  2213
  2214 				; optimize FAIL ('AIMIRROR', main.pas), line = 46
  2215
  2216 1B15 20 8A 19			jsr AIMIRROR
  2217 1B18			l_0AC2
  2218 1B18			a_0007
  2219
  2220 				; optimize FAIL ('DRAWTAIL', main.pas), line = 49
  2221
  2222 1B18 20 C6 12			jsr DRAWTAIL
  2223 1B1B AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2224 1B25 A0 04			ldy #PLY.DIR-DATAORIGIN
  2225 1B27 A5 5A			lda NEWDIR
  2226 1B29 91 12			sta (:bp2),y
  2227
  2228 				; optimize OK (main.pas), line = 51
  2229
  2230 1B2B A5 5A			lda NEWDIR
  2231 1B2D 8D 1E 1D			sta @CASETMP_0008
  2232 1B30 C9 01			cmp #$01
  2233 1B32 D0 16			jne l_0ADE
  2234 1B34			@
  2235
  2236 				; optimize OK (main.pas), line = 52
  2237
  2238 1B34 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2239 1B3E A0 01			ldy #PLY.Y-DATAORIGIN
  2240 1B40 B1 12			lda (:bp2),y
  2241 1B42 38 E9 01			sub #$01
  2242 1B45 91 12			sta (:bp2),y
  2243
  2244 1B47 4C 95 1B			jmp a_0008
  2245 1B4A			l_0ADE
  2246 1B4A C9 02			cmp #$02
  2247 1B4C D0 16			jne l_0AE8
  2248 1B4E			@
  2249
  2250 				; optimize OK (main.pas), line = 53
  2251
  2252 1B4E AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2253 1B58 A0 01			ldy #PLY.Y-DATAORIGIN
  2254 1B5A B1 12			lda (:bp2),y
  2255 1B5C 18 69 01			add #$01
  2256 1B5F 91 12			sta (:bp2),y
  2257
  2258 1B61 4C 95 1B			jmp a_0008
  2259 1B64			l_0AE8
  2260 1B64 C9 04			cmp #$04
  2261 1B66 D0 16			jne l_0AF2
  2262 1B68			@
  2263
  2264 				; optimize OK (main.pas), line = 54
  2265
  2266 1B68 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2267 1B72 A0 00			ldy #PLY.X-DATAORIGIN
  2268 1B74 B1 12			lda (:bp2),y
  2269 1B76 38 E9 01			sub #$01
  2270 1B79 91 12			sta (:bp2),y
  2271
  2272 1B7B 4C 95 1B			jmp a_0008
  2273 1B7E			l_0AF2
  2274 1B7E C9 08			cmp #$08
  2275 1B80 D0 13			jne l_0AFC
  2276 1B82			@
  2277
  2278 				; optimize OK (main.pas), line = 55
  2279
  2280 1B82 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2281 1B8C A0 00			ldy #PLY.X-DATAORIGIN
  2282 1B8E B1 12			lda (:bp2),y
  2283 1B90 18 69 01			add #$01
  2284 1B93 91 12			sta (:bp2),y
  2285
  2286 1B95			l_0AFC
  2287 1B95			a_0008
  2288
  2289 				; optimize OK (main.pas), line = 58
  2290
  2291 1B95 AC C7 1C 84 12 AC + 	mwy PLY :bp2
  2292 1B9F A0 00			ldy #PLY.X-DATAORIGIN
  2293 1BA1 B1 12			lda (:bp2),y
  2294 1BA3 8D 05 1D			sta PUTCHAR.X
  2295 1BA6 A0 01			ldy #PLY.Y-DATAORIGIN
  2296 1BA8 B1 12			lda (:bp2),y
  2297 1BAA 8D 06 1D			sta PUTCHAR.Y
  2298 1BAD A0 02			ldy #PLY.HEAD-DATAORIGIN
  2299 1BAF B1 12			lda (:bp2),y
  2300 1BB1 8D 07 1D			sta PUTCHAR.V
  2301 1BB4 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  2302 1BB6 B1 12			lda (:bp2),y
  2303 1BB8 8D 08 1D			sta PUTCHAR.C
  2304 1BBB 20 71 11			jsr PUTCHAR
  2305 1BBE			l_0A8F
  2306 1BBE			l_0A5A
  2307
  2308 				; ------------------------------------------------------------
  2309
  2310 = 1D1D			@CASETMP_0007	= DATAORIGIN+$0049
  2311 = 1D1E			@CASETMP_0008	= DATAORIGIN+$004A
  2312
  2313 = 1D1D			@VarData	= @CASETMP_0007
  2314 = 0002			@VarDataSize	= 2
  2315
  2316 1BBE			@exit
  2317 					.ifdef @new
  2318 					lda <@VarData
  2319 					sta :ztmp
  2320 					lda >@VarData
  2321 					ldy #@VarDataSize-1
  2322 					jmp @FreeMem
  2323 					els
  2324 1BBE 60				rts						; ret
  2325 					eif
  2326 				.endl
  2327
  2328 1BBF			.local	STARTSCREEN					; PROCEDURE
  2329
  2330 				; --- RepeatUntilProlog
  2331 1BBF			l_0B19
  2332
  2333 				; optimize OK (main.pas), line = 70
  2334
  2335 1BBF A9 02			lda #$02
  2336 1BC1 8D 08 FF			sta JOY
  2337 1BC4 A9 FF			lda #$FF
  2338 1BC6 8D 30 FD			sta KEYSCAN
  2339 1BC9 AD 08 FF			lda JOY
  2340 1BCC 49 FF			eor #$FF
  2341 1BCE 85 58			sta T0B
  2342
  2343 				; optimize OK (main.pas), line = 71
  2344
  2345 1BD0 C9 40			cmp #$40
  2346 1BD2 D0 EB			jne l_0B19
  2347 1BD4			@exit
  2348 					.ifdef @new
  2349 					lda <@VarData
  2350 					sta :ztmp
  2351 					lda >@VarData
  2352 					ldy #@VarDataSize-1
  2353 					jmp @FreeMem
  2354 					els
  2355 1BD4 60				rts						; ret
  2356 					eif
  2357 				.endl
  2358
  2359 1BD5			.local	MAINLOOP					; PROCEDURE
  2360
  2361 				; optimize OK (main.pas), line = 78
  2362
  2363 1BD5 A9 FF			lda #$FF
  2364 1BD7 85 59			sta ALIVE
  2365 1BD9 20 E8 13			jsr INITPLAYFIELD
  2366 1BDC 20 BF 1B			jsr STARTSCREEN
  2367
  2368 				; --- RepeatUntilProlog
  2369 1BDF			l_0B43
  2370
  2371 				; optimize OK (main.pas), line = 81
  2372
  2373 1BDF A9 03			lda #$03
  2374 1BE1 8D E0 1C			sta SYSTEM.PAUSE_006B.N
  2375 1BE4 A9 00			lda #$00
  2376 1BE6 8D E1 1C			sta SYSTEM.PAUSE_006B.N+1
  2377 1BE9 20 23 11			jsr SYSTEM.PAUSE_006B
  2378
  2379 				; optimize OK (main.pas), line = 82
  2380
  2381 1BEC AD CB 1C			lda PLAYER1
  2382 1BEF 8D C7 1C			sta PLY
  2383 1BF2 AD CC 1C			lda PLAYER1+1
  2384 1BF5 8D C8 1C			sta PLY+1
  2385 1BF8 20 89 1A			jsr PLAYERMOVE
  2386
  2387 				; optimize OK (main.pas), line = 83
  2388
  2389 1BFB AD CD 1C			lda PLAYER2
  2390 1BFE 8D C7 1C			sta PLY
  2391 1C01 AD CE 1C			lda PLAYER2+1
  2392 1C04 8D C8 1C			sta PLY+1
  2393 1C07 20 89 1A			jsr PLAYERMOVE
  2394
  2395 				; optimize OK (main.pas), line = 84
  2396
  2397 1C0A AD CF 1C			lda PLAYER3
  2398 1C0D 8D C7 1C			sta PLY
  2399 1C10 AD D0 1C			lda PLAYER3+1
  2400 1C13 8D C8 1C			sta PLY+1
  2401 1C16 20 89 1A			jsr PLAYERMOVE
  2402
  2403 				; optimize OK (main.pas), line = 85
  2404
  2405 1C19 AD D1 1C			lda PLAYER4
  2406 1C1C 8D C7 1C			sta PLY
  2407 1C1F AD D2 1C			lda PLAYER4+1
  2408 1C22 8D C8 1C			sta PLY+1
  2409 1C25 20 89 1A			jsr PLAYERMOVE
  2410
  2411 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 86
  2412
  2413 1C28 20 96 12			jsr ANIMATEOBSTACLES
  2414
  2415 				; optimize OK (main.pas), line = 87
  2416
  2417 1C2B A5 59			lda ALIVE
  2418 1C2D F0 04			jeq l_0B43x
  2419 1C2F C9 FF			cmp #$FF
  2420 1C31 D0 AC			jne l_0B43
  2421 1C33			l_0B43x
  2422
  2423 				; optimize OK (main.pas), line = 89
  2424
  2425 1C33 AD EC 1C			lda PLAYER1.ISALIVE
  2426 1C36 F0 03			jeq l_0B83
  2427 1C38 EE EB 1C			inc PLAYER1.SCORE
  2428 1C3B			l_0B83
  2429
  2430 				; optimize OK (main.pas), line = 90
  2431
  2432 1C3B AD F4 1C			lda PLAYER2.ISALIVE
  2433 1C3E F0 03			jeq l_0B96
  2434 1C40 EE F3 1C			inc PLAYER2.SCORE
  2435 1C43			l_0B96
  2436
  2437 				; optimize OK (main.pas), line = 91
  2438
  2439 1C43 AD FC 1C			lda PLAYER3.ISALIVE
  2440 1C46 F0 03			jeq l_0BA9
  2441 1C48 EE FB 1C			inc PLAYER3.SCORE
  2442 1C4B			l_0BA9
  2443
  2444 				; optimize OK (main.pas), line = 92
  2445
  2446 1C4B AD 04 1D			lda PLAYER4.ISALIVE
  2447 1C4E F0 03			jeq l_0BBC
  2448 1C50 EE 03 1D			inc PLAYER4.SCORE
  2449 1C53			l_0BBC
  2450
  2451 				; optimize OK (main.pas), line = 94
  2452
  2453 1C53 A9 64			lda #$64
  2454 1C55 8D E0 1C			sta SYSTEM.PAUSE_006B.N
  2455 1C58 A9 00			lda #$00
  2456 1C5A 8D E1 1C			sta SYSTEM.PAUSE_006B.N+1
  2457 1C5D 20 23 11			jsr SYSTEM.PAUSE_006B
  2458 1C60			@exit
  2459 					.ifdef @new
  2460 					lda <@VarData
  2461 					sta :ztmp
  2462 					lda >@VarData
  2463 					ldy #@VarDataSize-1
  2464 					jmp @FreeMem
  2465 					els
  2466 1C60 60				rts						; ret
  2467 					eif
  2468 				.endl
  2469 1C61			l_0007
  2470
  2471 				; --- RepeatUntilProlog
  2472 1C61			l_0BC7
  2473
  2474 				; optimize OK (main.pas), line = 101
  2475
  2476 1C61 A9 30			lda #$30
  2477 1C63 8D EB 1C			sta PLAYER1.SCORE
  2478 1C66 8D F3 1C			sta PLAYER2.SCORE
  2479
  2480 				; optimize OK (main.pas), line = 102
  2481
  2482 1C69 8D FB 1C			sta PLAYER3.SCORE
  2483 1C6C 8D 03 1D			sta PLAYER4.SCORE
  2484
  2485 				; optimize OK (main.pas), line = 104
  2486
  2487 1C6F A9 00			lda #$00
  2488 1C71 8D E4 1C			sta GAMEOVER
  2489
  2490 				; --- RepeatUntilProlog
  2491 1C74			l_0BDC
  2492
  2493 				; optimize FAIL ('MAINLOOP', main.pas), line = 106
  2494
  2495 1C74 20 D5 1B			jsr MAINLOOP
  2496
  2497 				; optimize OK (main.pas), line = 107
  2498
  2499 1C77 AD EB 1C			lda PLAYER1.SCORE
  2500 1C7A C9 39			cmp #$39
  2501 1C7C D0 05			jne l_0BEF
  2502 1C7E A9 01			lda #$01
  2503 1C80 8D E4 1C			sta GAMEOVER
  2504 1C83			l_0BEF
  2505
  2506 				; optimize OK (main.pas), line = 108
  2507
  2508 1C83 AD F3 1C			lda PLAYER2.SCORE
  2509 1C86 C9 39			cmp #$39
  2510 1C88 D0 05			jne l_0C08
  2511 1C8A A9 01			lda #$01
  2512 1C8C 8D E4 1C			sta GAMEOVER
  2513 1C8F			l_0C08
  2514
  2515 				; optimize OK (main.pas), line = 109
  2516
  2517 1C8F AD FB 1C			lda PLAYER3.SCORE
  2518 1C92 C9 39			cmp #$39
  2519 1C94 D0 05			jne l_0C21
  2520 1C96 A9 01			lda #$01
  2521 1C98 8D E4 1C			sta GAMEOVER
  2522 1C9B			l_0C21
  2523
  2524 				; optimize OK (main.pas), line = 110
  2525
  2526 1C9B AD 03 1D			lda PLAYER4.SCORE
  2527 1C9E C9 39			cmp #$39
  2528 1CA0 D0 05			jne l_0C3A
  2529 1CA2 A9 01			lda #$01
  2530 1CA4 8D E4 1C			sta GAMEOVER
  2531 1CA7			l_0C3A
  2532
  2533 				; optimize OK (main.pas), line = 111
  2534
  2535 1CA7 AD E4 1C			lda GAMEOVER
  2536 1CAA F0 C8			jeq l_0BDC
  2537
  2538 				; optimize FAIL ('SHOWSCORE', main.pas), line = 113
  2539
  2540 1CAC 20 9C 11			jsr SHOWSCORE
  2541
  2542 				; optimize OK (main.pas), line = 115
  2543
  2544 1CAF A9 C8			lda #$C8
  2545 1CB1 8D E0 1C			sta SYSTEM.PAUSE_006B.N
  2546 1CB4 A9 00			lda #$00
  2547 1CB6 8D E1 1C			sta SYSTEM.PAUSE_006B.N+1
  2548 1CB9 20 23 11			jsr SYSTEM.PAUSE_006B
  2549
  2550 				; optimize OK (main.pas), line = 116
  2551
  2552 1CBC 4C 61 1C			jmp l_0BC7
  2553
  2554 				; ------------------------------------------------------------
  2555
  2556 = 0800			ATTRIBUTE_ADDR	= $0800
  2557 = 0C00			SCREEN_ADDR	= $0C00
  2558 = 0009			VICTORIES	= $09
  2559 = 0005			LOOK_AHEAD	= $05
  2560 = 0020			EMPTY	= $20
  2561 = 00A0			WALL	= $A0
  2562 = 0041			WALL_COLOUR	= $41
  2563 = 0030			ZERO	= $30
  2564 = 0056			OBSTACLE_1	= $56
  2565 = 005B			OBSTACLE_2	= $5B
  2566 = 0035			OBST_COLOUR	= $35
  2567 = 0051			PLY_HEAD	= $51
  2568 = 002A			PLY_CRASH	= $2A
  2569 = 0057			PLY_BUSTED	= $57
  2570 = 0042			PLY_TAIL_UD	= $42
  2571 = 0040			PLY_TAIL_LR	= $40
  2572 = 007D			PLY_TAIL_RD	= $7D
  2573 = 006E			PLY_TAIL_RU	= $6E
  2574 = 006D			PLY_TAIL_LD	= $6D
  2575 = 0070			PLY_TAIL_LU	= $70
  2576 = 005F			PLY1_COLOUR	= $5F
  2577 = 005D			PLY2_COLOUR	= $5D
  2578 = 0071			PLY3_COLOUR	= $71
  2579 = 0055			PLY4_COLOUR	= $55
  2580 = 0000			PLY_CTRL	= $00
  2581 = 0001			AI_STRAIGHT	= $01
  2582 = 0002			AI_SAPER	= $02
  2583 = 0003			AI_BULLY	= $03
  2584 = 0004			AI_MIRROR	= $04
  2585 = 0001			JOY_UP	= $01
  2586 = 0002			JOY_DOWN	= $02
  2587 = 0004			JOY_LEFT	= $04
  2588 = 0008			JOY_RIGHT	= $08
  2589 = 0040			JOY_FIRE	= $40
  2590 = 0002			JOY_SELECT_1	= $02
  2591 = 0004			JOY_SELECT_2	= $04
  2592 = 100E			adr.MUL40	= CODEORIGIN+$0000
  2593 1CBF			.var MUL40	= adr.MUL40 .word
  2594 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  2595 1CBF			.var DIRECTION	= adr.DIRECTION .word
  2596 = FD30			KEYSCAN	= $FD30
  2597 = FF08			JOY	= $FF08
  2598 = FF15			BORDERCOLOR	= $FF15
  2599 = FF19			BGCOLOR	= $FF19
  2600 = 0058			T0B	= $58
  2601 = 0059			ALIVE	= $59
  2602 = 005A			NEWDIR	= $5A
  2603 = 005B			AVAILDIR	= $5B
  2604 = 005C			T0W	= $5C
  2605 = 005E			adr.PLY	= $5E
  2606 1CBF			.var PLY	= adr.PLY .word
  2607 = 1CD4			PLY.X	= DATAORIGIN+$0000
  2608 = 1CD5			PLY.Y	= DATAORIGIN+$0001
  2609 = 1CD6			PLY.HEAD	= DATAORIGIN+$0002
  2610 = 1CD7			PLY.COLOUR	= DATAORIGIN+$0003
  2611 = 1CD8			PLY.DIR	= DATAORIGIN+$0004
  2612 = 1CD9			PLY.BRAIN	= DATAORIGIN+$0005
  2613 = 1CDA			PLY.SCORE	= DATAORIGIN+$0006
  2614 = 1CDB			PLY.ISALIVE	= DATAORIGIN+$0007
  2615 = 0060			adr.TMPPLY	= $60
  2616 1CBF			.var TMPPLY	= adr.TMPPLY .word
  2617 = 1CD4			TMPPLY.X	= DATAORIGIN+$0000
  2618 = 1CD5			TMPPLY.Y	= DATAORIGIN+$0001
  2619 = 1CD6			TMPPLY.HEAD	= DATAORIGIN+$0002
  2620 = 1CD7			TMPPLY.COLOUR	= DATAORIGIN+$0003
  2621 = 1CD8			TMPPLY.DIR	= DATAORIGIN+$0004
  2622 = 1CD9			TMPPLY.BRAIN	= DATAORIGIN+$0005
  2623 = 1CDA			TMPPLY.SCORE	= DATAORIGIN+$0006
  2624 = 1CDB			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  2625 = 1CE4			GAMEOVER	= DATAORIGIN+$0010
  2626 = 1CE5			adr.PLAYER1	= [DATAORIGIN+$0011] .array [6]
  2627 1CBF			.var PLAYER1	= adr.PLAYER1 .word
  2628 = 1CE5			PLAYER1.X	= DATAORIGIN+$0011
  2629 = 1CE6			PLAYER1.Y	= DATAORIGIN+$0012
  2630 = 1CE7			PLAYER1.HEAD	= DATAORIGIN+$0013
  2631 = 1CE8			PLAYER1.COLOUR	= DATAORIGIN+$0014
  2632 = 1CE9			PLAYER1.DIR	= DATAORIGIN+$0015
  2633 = 1CEA			PLAYER1.BRAIN	= DATAORIGIN+$0016
  2634 = 1CEB			PLAYER1.SCORE	= DATAORIGIN+$0017
  2635 = 1CEC			PLAYER1.ISALIVE	= DATAORIGIN+$0018
  2636 = 1CED			adr.PLAYER2	= [DATAORIGIN+$0019] .array [6]
  2637 1CBF			.var PLAYER2	= adr.PLAYER2 .word
  2638 = 1CED			PLAYER2.X	= DATAORIGIN+$0019
  2639 = 1CEE			PLAYER2.Y	= DATAORIGIN+$001A
  2640 = 1CEF			PLAYER2.HEAD	= DATAORIGIN+$001B
  2641 = 1CF0			PLAYER2.COLOUR	= DATAORIGIN+$001C
  2642 = 1CF1			PLAYER2.DIR	= DATAORIGIN+$001D
  2643 = 1CF2			PLAYER2.BRAIN	= DATAORIGIN+$001E
  2644 = 1CF3			PLAYER2.SCORE	= DATAORIGIN+$001F
  2645 = 1CF4			PLAYER2.ISALIVE	= DATAORIGIN+$0020
  2646 = 1CF5			adr.PLAYER3	= [DATAORIGIN+$0021] .array [6]
  2647 1CBF			.var PLAYER3	= adr.PLAYER3 .word
  2648 = 1CF5			PLAYER3.X	= DATAORIGIN+$0021
  2649 = 1CF6			PLAYER3.Y	= DATAORIGIN+$0022
  2650 = 1CF7			PLAYER3.HEAD	= DATAORIGIN+$0023
  2651 = 1CF8			PLAYER3.COLOUR	= DATAORIGIN+$0024
  2652 = 1CF9			PLAYER3.DIR	= DATAORIGIN+$0025
  2653 = 1CFA			PLAYER3.BRAIN	= DATAORIGIN+$0026
  2654 = 1CFB			PLAYER3.SCORE	= DATAORIGIN+$0027
  2655 = 1CFC			PLAYER3.ISALIVE	= DATAORIGIN+$0028
  2656 = 1CFD			adr.PLAYER4	= [DATAORIGIN+$0029] .array [6]
  2657 1CBF			.var PLAYER4	= adr.PLAYER4 .word
  2658 = 1CFD			PLAYER4.X	= DATAORIGIN+$0029
  2659 = 1CFE			PLAYER4.Y	= DATAORIGIN+$002A
  2660 = 1CFF			PLAYER4.HEAD	= DATAORIGIN+$002B
  2661 = 1D00			PLAYER4.COLOUR	= DATAORIGIN+$002C
  2662 = 1D01			PLAYER4.DIR	= DATAORIGIN+$002D
  2663 = 1D02			PLAYER4.BRAIN	= DATAORIGIN+$002E
  2664 = 1D03			PLAYER4.SCORE	= DATAORIGIN+$002F
  2665 = 1D04			PLAYER4.ISALIVE	= DATAORIGIN+$0030
  2666 1CBF			@exit
  2667
  2668 1CBF A2 00		@halt	ldx #$00
  2669 1CC1 9A				txs
  2670
  2671 1CC2 60				rts
  2672
  2673 				; ------------------------------------------------------------
  2674
  2675 				; ------------------------------------------------------------
  2676
  2677 1CC3			.local	@DEFINES
  2678 1CC3			C4P
  2679 				.endl
  2680
  2681 1CC3			.local	@RESOURCE
  2682 				.endl
  2683
  2684 = 1CC3 0E 10		MUL40
  2684 = 1CC5 40 10		DIRECTION
  2684 = 1CC7 5E 00		PLY
  2684 = 1CC9 60 00		TMPPLY
  2684 = 1CCB E5 1C		PLAYER1
  2684 = 1CCD ED 1C		PLAYER2
  2684 = 1CCF F5 1C		PLAYER3
  2684 = 1CD1 FD 1C		PLAYER4
  2684 				.endl							; MAIN
  2685
  2686 				; ------------------------------------------------------------
  2687 				; ------------------------------------------------------------
  2688
  2689 				.macro	UNITINITIALIZATION
  2690 				
  2691 					.ifdef MAIN.SYSTEM.@UnitInit
  2692 					jsr MAIN.SYSTEM.@UnitInit
  2693 					eif
  2694 				.endm
  2695
  2696 				; ------------------------------------------------------------
  2697
  2698 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2699 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2699 				SYSTEM: $10D5..$1170
  2700 					eif
  2701
  2702 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2702 				CODE: $100E..$1CC2
  2703
  2704 				; ------------------------------------------------------------
  2705
  2706 1CD3				.align $04
  2707
  2708 1CD4			DATAORIGIN
  2709 1CD4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  2710
  2711 = 0006			VARINITSIZE	= *-DATAORIGIN
  2712 = 004B			VARDATASIZE	= 75
  2713
  2714 = 1D1F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2715
  2716 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2716 				DATA: $1CD4..$1D1F
  2717
  2718 				; ------------------------------------------------------------
  2719
  2720 				.macro	STATICDATA
  2721 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  2722 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  2723 				.by  $C0 $03 $01 $02 $04 $08
  2724 				.endm
  2725
  2726 					end
