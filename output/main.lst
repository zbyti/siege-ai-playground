mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E CF 1C			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0045			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 1CEA			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BB			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 2F 1C E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 2F 85 02 A9 1D + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 70 1C			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D EF 1C		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD EF 1C 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1CEF			RESULT	= DATAORIGIN+$000B
   182
   183 = 1CEF			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD F0 1C		loop  lda n
   307 1126 0D F1 1C		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD F0 1C D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1CF0			N	= DATAORIGIN+$000C
   321
   322 = 1CF0			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D F2 1C			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD F2 1C		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C F3 1C		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD F3 1C 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1CF2			RANGE	= DATAORIGIN+$000E
   383 = 1CF3			RESULT	= DATAORIGIN+$000F
   384
   385 = 1CF2			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 1CE4			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 1CE6			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 1CE8			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 1CE9			FILEMODE	= DATAORIGIN+$0005
   450 = 1CEA			GRAPHMODE	= DATAORIGIN+$0006
   451 = 1CEB			IORESULT	= DATAORIGIN+$0007
   452 = 1CEC			EOLN	= DATAORIGIN+$0008
   453 = 1CED			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 5
   460
   461 1171 AD 16 1D			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D 15 1D			add X
   466 117D 85 5C			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5D			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 6
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5C			ldy T0W
   475 118A AD 18 1D			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5D			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD 17 1D			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 1D15			X	= DATAORIGIN+$0031
   486 = 1D16			Y	= DATAORIGIN+$0032
   487 = 1D17			V	= DATAORIGIN+$0033
   488 = 1D18			C	= DATAORIGIN+$0034
   489
   490 = 1D15			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	SHOWSCORE					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 13
   508
   509 119C AD F8 1C			lda PLAYER1.COLOUR
   510 119F 8D 18 1D			sta PUTCHAR.C
   511 11A2 AD FB 1C			lda PLAYER1.SCORE
   512 11A5 8D 17 1D			sta PUTCHAR.V
   513 11A8 A9 00			lda #$00
   514 11AA 8D 16 1D			sta PUTCHAR.Y
   515 11AD A9 1E			lda #$1E
   516 11AF 8D 15 1D			sta PUTCHAR.X
   517 11B2 20 71 11			jsr PUTCHAR
   518
   519 				; optimize OK (tools.inc), line = 14
   520
   521 11B5 AD 00 1D			lda PLAYER2.COLOUR
   522 11B8 8D 18 1D			sta PUTCHAR.C
   523 11BB AD 03 1D			lda PLAYER2.SCORE
   524 11BE 8D 17 1D			sta PUTCHAR.V
   525 11C1 A9 00			lda #$00
   526 11C3 8D 16 1D			sta PUTCHAR.Y
   527 11C6 A9 20			lda #$20
   528 11C8 8D 15 1D			sta PUTCHAR.X
   529 11CB 20 71 11			jsr PUTCHAR
   530
   531 				; optimize OK (tools.inc), line = 15
   532
   533 11CE AD 08 1D			lda PLAYER3.COLOUR
   534 11D1 8D 18 1D			sta PUTCHAR.C
   535 11D4 AD 0B 1D			lda PLAYER3.SCORE
   536 11D7 8D 17 1D			sta PUTCHAR.V
   537 11DA A9 00			lda #$00
   538 11DC 8D 16 1D			sta PUTCHAR.Y
   539 11DF A9 22			lda #$22
   540 11E1 8D 15 1D			sta PUTCHAR.X
   541 11E4 20 71 11			jsr PUTCHAR
   542
   543 				; optimize OK (tools.inc), line = 16
   544
   545 11E7 AD 10 1D			lda PLAYER4.COLOUR
   546 11EA 8D 18 1D			sta PUTCHAR.C
   547 11ED AD 13 1D			lda PLAYER4.SCORE
   548 11F0 8D 17 1D			sta PUTCHAR.V
   549 11F3 A9 00			lda #$00
   550 11F5 8D 16 1D			sta PUTCHAR.Y
   551 11F8 A9 24			lda #$24
   552 11FA 8D 15 1D			sta PUTCHAR.X
   553 11FD 20 71 11			jsr PUTCHAR
   554 1200			@exit
   555 					.ifdef @new
   556 					lda <@VarData
   557 					sta :ztmp
   558 					lda >@VarData
   559 					ldy #@VarDataSize-1
   560 					jmp @FreeMem
   561 					els
   562 1200 60				rts						; ret
   563 					eif
   564 				.endl
   565
   566 1201			.local	CHECKAVAILDIR					; PROCEDURE
   567
   568 				; optimize OK (tools.inc), line = 23
   569
   570 1201 A9 00			lda #$00
   571 1203 85 5B			sta AVAILDIR
   572
   573 				; optimize OK (tools.inc), line = 24
   574
   575 1205 AC D6 1C 84 12 AC + 	mwy PLY :bp2
   576 120F A0 01			ldy #PLY.Y-DATAORIGIN
   577 1211 B1 12			lda (:bp2),y
   578 1213 0A				asl @
   579 1214 A8				tay
   580 1215 A9 00			lda #$00
   581 1217 18 79 0E 10			add adr.MUL40,y
   582 121B 85 21			sta :STACKORIGIN+9
   583 121D A9 0C			lda #$0C
   584 121F 79 0F 10			adc adr.MUL40+1,y
   585 1222 85 31			sta :STACKORIGIN+STACKWIDTH+9
   586 1224 A0 00			ldy #PLY.X-DATAORIGIN
   587 1226 A5 21			lda :STACKORIGIN+9
   588 1228 18 71 12			add (:bp2),y
   589 122B 85 5C			sta T0W
   590 122D A5 31			lda :STACKORIGIN+STACKWIDTH+9
   591 122F 69 00			adc #$00
   592 1231 85 5D			sta T0W+1
   593
   594 				; optimize OK (tools.inc), line = 26
   595
   596 1233 A5 5C			lda T0W
   597 1235 38 E9 28			sub #$28
   598 1238 85 21			sta :STACKORIGIN+9
   599 123A A5 5D			lda T0W+1
   600 123C E9 00			sbc #$00
   601 123E 85 11			sta :bp+1
   602 1240 A4 21			ldy :STACKORIGIN+9
   603 1242 B1 10			lda (:bp),y
   604 1244 C9 20			cmp #$20
   605 1246 D0 06			jne l_00EE
   606 1248 A5 5B			lda AVAILDIR
   607 124A 09 01			ora #$01
   608 124C 85 5B			sta AVAILDIR
   609 124E			l_00EE
   610
   611 				; optimize OK (tools.inc), line = 27
   612
   613 124E A4 5C 84 12 A4 5D + 	mwy T0W :bp2
   614 1256 A0 28			ldy #$28
   615 1258 B1 12			lda (:bp2),y
   616 125A C9 20			cmp #$20
   617 125C D0 06			jne l_0111
   618 125E A5 5B			lda AVAILDIR
   619 1260 09 02			ora #$02
   620 1262 85 5B			sta AVAILDIR
   621 1264			l_0111
   622
   623 				; optimize OK (tools.inc), line = 28
   624
   625 1264 A5 5C			lda T0W
   626 1266 38 E9 01			sub #$01
   627 1269 85 21			sta :STACKORIGIN+9
   628 126B A5 5D			lda T0W+1
   629 126D E9 00			sbc #$00
   630 126F 85 11			sta :bp+1
   631 1271 A4 21			ldy :STACKORIGIN+9
   632 1273 B1 10			lda (:bp),y
   633 1275 C9 20			cmp #$20
   634 1277 D0 06			jne l_0134
   635 1279 A5 5B			lda AVAILDIR
   636 127B 09 04			ora #$04
   637 127D 85 5B			sta AVAILDIR
   638 127F			l_0134
   639
   640 				; optimize OK (tools.inc), line = 29
   641
   642 127F A4 5C 84 12 A4 5D + 	mwy T0W :bp2
   643 1287 A0 01			ldy #$01
   644 1289 B1 12			lda (:bp2),y
   645 128B C9 20			cmp #$20
   646 128D D0 06			jne l_0157
   647 128F A5 5B			lda AVAILDIR
   648 1291 09 08			ora #$08
   649 1293 85 5B			sta AVAILDIR
   650 1295			l_0157
   651 1295			@exit
   652 					.ifdef @new
   653 					lda <@VarData
   654 					sta :ztmp
   655 					lda >@VarData
   656 					ldy #@VarDataSize-1
   657 					jmp @FreeMem
   658 					els
   659 1295 60				rts						; ret
   660 					eif
   661 				.endl
   662
   663 1296			.local	ANIMATEOBSTACLES				; PROCEDURE
   664
   665 				; optimize FAIL (0, tools.inc), line = 38
   666
   667 1296 EE 19 1D			inc COUNTER
   668
   669 				; optimize OK (tools.inc), line = 39
   670
   671 1299 AD 19 1D			lda COUNTER
   672 129C 29 01			and #$01
   673 129E F0 08			jeq l_0182
   674 12A0 A9 56			lda #$56
   675 12A2 8D 1A 1D			sta OBST
   676 12A5 4C AD 12			jmp l_0190
   677 12A8			l_0182
   678 12A8 A9 5B			lda #$5B
   679 12AA 8D 1A 1D			sta OBST
   680 12AD			l_0190
   681
   682 				; optimize OK (tools.inc), line = 40
   683
   684 12AD AD 1A 1D			lda OBST
   685 12B0 8D FA 0C			sta $0CFA
   686
   687 				; optimize OK (tools.inc), line = 41
   688
   689 12B3 8D 0E 0D			sta $0D0E
   690
   691 				; optimize OK (tools.inc), line = 42
   692
   693 12B6 8D DA 0E			sta $0EDA
   694
   695 				; optimize OK (tools.inc), line = 43
   696
   697 12B9 8D EE 0E			sta $0EEE
   698
   699 				; optimize OK (tools.inc), line = 44
   700
   701 12BC 8D E1 0D			sta $0DE1
   702
   703 				; optimize OK (tools.inc), line = 45
   704
   705 12BF 8D 06 0E			sta $0E06
   706
   707 				; optimize OK (tools.inc), line = 46
   708
   709 12C2 8D 64 0C			sta $0C64
   710
   711 				; optimize OK (tools.inc), line = 47
   712
   713 12C5 8D 84 0F			sta $0F84
   714
   715 				; ------------------------------------------------------------
   716
   717 = 1D19			COUNTER	= DATAORIGIN+$0035
   718 = 1D1A			OBST	= DATAORIGIN+$0036
   719
   720 = 1D19			@VarData	= COUNTER
   721 = 0002			@VarDataSize	= 2
   722
   723 12C8			@exit
   724 					.ifdef @new
   725 					lda <@VarData
   726 					sta :ztmp
   727 					lda >@VarData
   728 					ldy #@VarDataSize-1
   729 					jmp @FreeMem
   730 					els
   731 12C8 60				rts						; ret
   732 					eif
   733 				.endl
   734
   735 12C9			.local	DRAWTAIL					; PROCEDURE
   736
   737 				; optimize OK (tools.inc), line = 54
   738
   739 12C9 AC D6 1C 84 12 AC + 	mwy PLY :bp2
   740 12D3 A0 04			ldy #PLY.DIR-DATAORIGIN
   741 12D5 B1 12			lda (:bp2),y
   742 12D7 C5 5A			cmp NEWDIR
   743 12D9 D0 14			jne l_01D4
   744
   745 				; optimize OK (tools.inc), line = 55
   746
   747 12DB A5 5A			lda NEWDIR
   748 12DD 29 0C			and #$0C
   749 12DF F0 07			jeq l_01EB
   750 12E1 A9 40			lda #$40
   751 12E3 85 58			sta T0B
   752 12E5 4C EC 12			jmp l_01F9
   753 12E8			l_01EB
   754 12E8 A9 42			lda #$42
   755 12EA 85 58			sta T0B
   756 12EC			l_01F9
   757 12EC 4C 5F 13			jmp l_0206
   758 12EF			l_01D4
   759
   760 				; optimize OK (tools.inc), line = 57
   761
   762 12EF AC D6 1C 84 12 AC + 	mwy PLY :bp2
   763 12F9 A0 04			ldy #PLY.DIR-DATAORIGIN
   764 12FB B1 12			lda (:bp2),y
   765 12FD 29 0A			and #$0A
   766 12FF F0 0A			jeq l_022C
   767 1301 A5 5A			lda NEWDIR
   768 1303 29 05			and #$05
   769 1305 F0 04			jeq l_022C
   770 1307 A9 7D			lda #$7D
   771 1309 85 58			sta T0B
   772 130B			l_022C
   773
   774 				; optimize OK (tools.inc), line = 58
   775
   776 130B AC D6 1C 84 12 AC + 	mwy PLY :bp2
   777 1315 A0 04			ldy #PLY.DIR-DATAORIGIN
   778 1317 B1 12			lda (:bp2),y
   779 1319 29 09			and #$09
   780 131B F0 0A			jeq l_0259
   781 131D A5 5A			lda NEWDIR
   782 131F 29 06			and #$06
   783 1321 F0 04			jeq l_0259
   784 1323 A9 6E			lda #$6E
   785 1325 85 58			sta T0B
   786 1327			l_0259
   787
   788 				; optimize OK (tools.inc), line = 59
   789
   790 1327 AC D6 1C 84 12 AC + 	mwy PLY :bp2
   791 1331 A0 04			ldy #PLY.DIR-DATAORIGIN
   792 1333 B1 12			lda (:bp2),y
   793 1335 29 06			and #$06
   794 1337 F0 0A			jeq l_0286
   795 1339 A5 5A			lda NEWDIR
   796 133B 29 09			and #$09
   797 133D F0 04			jeq l_0286
   798 133F A9 6D			lda #$6D
   799 1341 85 58			sta T0B
   800 1343			l_0286
   801
   802 				; optimize OK (tools.inc), line = 60
   803
   804 1343 AC D6 1C 84 12 AC + 	mwy PLY :bp2
   805 134D A0 04			ldy #PLY.DIR-DATAORIGIN
   806 134F B1 12			lda (:bp2),y
   807 1351 29 05			and #$05
   808 1353 F0 0A			jeq l_02B3
   809 1355 A5 5A			lda NEWDIR
   810 1357 29 0A			and #$0A
   811 1359 F0 04			jeq l_02B3
   812 135B A9 70			lda #$70
   813 135D 85 58			sta T0B
   814 135F			l_02B3
   815 135F			l_0206
   816
   817 				; optimize OK (tools.inc), line = 62
   818
   819 135F AC D6 1C 84 12 AC + 	mwy PLY :bp2
   820 1369 A0 00			ldy #PLY.X-DATAORIGIN
   821 136B B1 12			lda (:bp2),y
   822 136D 8D 15 1D			sta PUTCHAR.X
   823 1370 A0 01			ldy #PLY.Y-DATAORIGIN
   824 1372 B1 12			lda (:bp2),y
   825 1374 8D 16 1D			sta PUTCHAR.Y
   826 1377 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   827 1379 B1 12			lda (:bp2),y
   828 137B 8D 18 1D			sta PUTCHAR.C
   829 137E A5 58			lda T0B
   830 1380 8D 17 1D			sta PUTCHAR.V
   831 1383 20 71 11			jsr PUTCHAR
   832 1386			@exit
   833 					.ifdef @new
   834 					lda <@VarData
   835 					sta :ztmp
   836 					lda >@VarData
   837 					ldy #@VarDataSize-1
   838 					jmp @FreeMem
   839 					els
   840 1386 60				rts						; ret
   841 					eif
   842 				.endl
   843
   844 1387			.local	INITPLAYERS					; PROCEDURE
   845
   846 				; optimize OK (init.inc), line = 5
   847
   848 1387 AD 1B 1D			lda P
   849 138A 8D D6 1C			sta PLY
   850 138D 85 12			sta :bp2
   851 138F AD 1C 1D			lda P+1
   852 1392 8D D7 1C			sta PLY+1
   853 1395 85 13			sta :bp2+1
   854 				; optimize OK (init.inc), line = 6
   855 1397 A0 05			ldy #PLY.BRAIN-DATAORIGIN
   856 1399 AD 20 1D			lda BRAIN
   857 139C 91 12			sta (:bp2),y
   858 139E A0 00			ldy #PLY.X-DATAORIGIN
   859 13A0 AD 1D 1D			lda X
   860 13A3 91 12			sta (:bp2),y
   861 13A5 A0 01			ldy #PLY.Y-DATAORIGIN
   862 13A7 AD 1E 1D			lda Y
   863 13AA 91 12			sta (:bp2),y
   864 13AC A0 04			ldy #PLY.DIR-DATAORIGIN
   865 13AE AD 1F 1D			lda DIR
   866 13B1 91 12			sta (:bp2),y
   867
   868 				; optimize OK (init.inc), line = 7
   869
   870 13B3 A0 02			ldy #PLY.HEAD-DATAORIGIN
   871 13B5 AD 21 1D			lda HEAD
   872 13B8 91 12			sta (:bp2),y
   873 13BA A0 03			ldy #PLY.COLOUR-DATAORIGIN
   874 13BC AD 22 1D			lda COLOUR
   875 13BF 91 12			sta (:bp2),y
   876 13C1 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
   877 13C3 AD 23 1D			lda ISALIVE
   878 13C6 91 12			sta (:bp2),y
   879
   880 				; optimize OK (init.inc), line = 8
   881
   882 13C8 AD 23 1D			lda ISALIVE
   883 13CB F0 1D			jeq l_0306
   884
   885 				; optimize FAIL (0, init.inc), line = 9
   886
   887 13CD E6 59			inc ALIVE
   888 13CF AD 22 1D			lda COLOUR
   889 13D2 8D 18 1D			sta PUTCHAR.C
   890 13D5 AD 21 1D			lda HEAD
   891 13D8 8D 17 1D			sta PUTCHAR.V
   892 13DB AD 1E 1D			lda Y
   893 13DE 8D 16 1D			sta PUTCHAR.Y
   894 13E1 AD 1D 1D			lda X
   895 13E4 8D 15 1D			sta PUTCHAR.X
   896 13E7 20 71 11			jsr PUTCHAR
   897 13EA			l_0306
   898
   899 				; ------------------------------------------------------------
   900
   901 = 1D1B			P	= DATAORIGIN+$0037
   902 = 1D1D			X	= DATAORIGIN+$0039
   903 = 1D1E			Y	= DATAORIGIN+$003A
   904 = 1D1F			DIR	= DATAORIGIN+$003B
   905 = 1D20			BRAIN	= DATAORIGIN+$003C
   906 = 1D21			HEAD	= DATAORIGIN+$003D
   907 = 1D22			COLOUR	= DATAORIGIN+$003E
   908 = 1D23			ISALIVE	= DATAORIGIN+$003F
   909
   910 = 1D1B			@VarData	= P
   911 = 0009			@VarDataSize	= 9
   912
   913 13EA			@exit
   914 					.ifdef @new
   915 					lda <@VarData
   916 					sta :ztmp
   917 					lda >@VarData
   918 					ldy #@VarDataSize-1
   919 					jmp @FreeMem
   920 					els
   921 13EA 60				rts						; ret
   922 					eif
   923 				.endl
   924
   925 13EB			.local	INITPLAYFIELD					; PROCEDURE
   926
   927 				; optimize OK (init.inc), line = 17
   928
   929 13EB A9 1F			lda #$1F
   930 13ED 8D 15 FF			sta BORDERCOLOR
   931 13F0 A9 00			lda #$00
   932 13F2 8D 19 FF			sta BGCOLOR
   933
   934 				; optimize OK (init.inc), line = 18
   935
   936 13F5 A9 20			lda #$20
   937 13F7 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   938 13F9 A9 C0			lda #$C0
   939 13FB 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   940 13FD A9 03			lda #$03
   941 13FF 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   942 1401 A9 00			lda #$00
   943 1403 85 08			sta SYSTEM.FILLCHAR_0056.A
   944 1405 A9 0C			lda #$0C
   945 1407 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   946 1409 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   947
   948 				; optimize OK (init.inc), line = 20
   949
   950 140C A9 27			lda #$27
   951 140E 85 58			sta T0B
   952
   953 1410			l_0333
   954 				; --- ForToDoCondition
   955
   956 				; optimize OK (init.inc), line = 21
   957
   958 1410 A4 58			ldy T0B
   959 1412 A9 A0			lda #$A0
   960 1414 99 00 0C			sta $0C00,y
   961
   962 				; optimize OK (init.inc), line = 22
   963
   964 1417 99 C0 0F			sta $0FC0,y
   965
   966 				; optimize OK (init.inc), line = 23
   967
   968 141A A9 41			lda #$41
   969 141C 99 00 08			sta $0800,y
   970
   971 				; optimize OK (init.inc), line = 24
   972
   973 141F 99 C0 0B			sta $0BC0,y
   974
   975 				; --- ForToDoEpilog
   976 1422 C6 58			dec T0B
   977 1424 10 EA			jpl l_0333
   978 1426			l_0341
   979
   980 				; optimize OK (init.inc), line = 27
   981
   982 1426 A9 18			lda #$18
   983 1428 85 58			sta T0B
   984
   985 142A			l_0373
   986 				; --- ForToDoCondition
   987 142A A5 58			lda T0B
   988 142C C9 01			cmp #$01
   989 142E 90 3A			jcc l_0381
   990
   991 				; optimize OK (init.inc), line = 28
   992
   993 1430 0A				asl @
   994 1431 A8				tay
   995 1432 A9 FF			lda #$FF
   996 1434 18 79 0E 10			add adr.MUL40,y
   997 1438 85 12			sta :bp2
   998 143A A9 0B			lda #$0B
   999 143C 79 0F 10			adc adr.MUL40+1,y
  1000 143F 85 13			sta :bp2+1
  1001 1441 A0 00			ldy #$00
  1002 1443 A9 A0			lda #$A0
  1003 1445 91 12			sta (:bp2),y
  1004 1447 C8				iny
  1005 1448 91 12			sta (:bp2),y
  1006
  1007 				; optimize OK (init.inc), line = 29
  1008
  1009 144A A5 58			lda T0B
  1010 144C 0A				asl @
  1011 144D A8				tay
  1012 144E A9 FF			lda #$FF
  1013 1450 18 79 0E 10			add adr.MUL40,y
  1014 1454 85 12			sta :bp2
  1015 1456 A9 07			lda #$07
  1016 1458 79 0F 10			adc adr.MUL40+1,y
  1017 145B 85 13			sta :bp2+1
  1018 145D A0 00			ldy #$00
  1019 145F A9 41			lda #$41
  1020 1461 91 12			sta (:bp2),y
  1021 1463 C8				iny
  1022 1464 91 12			sta (:bp2),y
  1023
  1024 				; --- ForToDoEpilog
  1025 1466 C6 58			dec T0B
  1026 1468 10 C0			jpl l_0373
  1027 146A			l_0381
  1028
  1029 				; optimize OK (init.inc), line = 32
  1030
  1031 146A A9 01			lda #$01
  1032 146C 8D 23 1D			sta INITPLAYERS.ISALIVE
  1033 146F A9 5F			lda #$5F
  1034 1471 8D 22 1D			sta INITPLAYERS.COLOUR
  1035 1474 A9 51			lda #$51
  1036 1476 8D 21 1D			sta INITPLAYERS.HEAD
  1037 1479 A9 00			lda #$00
  1038 147B 8D 20 1D			sta INITPLAYERS.BRAIN
  1039 147E A9 08			lda #$08
  1040 1480 8D 1F 1D			sta INITPLAYERS.DIR
  1041 1483 A9 0C			lda #$0C
  1042 1485 8D 1E 1D			sta INITPLAYERS.Y
  1043 1488 A9 0A			lda #$0A
  1044 148A 8D 1D 1D			sta INITPLAYERS.X
  1045 148D AD DA 1C			lda PLAYER1
  1046 1490 8D 1B 1D			sta INITPLAYERS.P
  1047 1493 AD DB 1C			lda PLAYER1+1
  1048 1496 8D 1C 1D			sta INITPLAYERS.P+1
  1049 1499 20 87 13			jsr INITPLAYERS
  1050
  1051 				; optimize OK (init.inc), line = 33
  1052
  1053 149C A9 01			lda #$01
  1054 149E 8D 23 1D			sta INITPLAYERS.ISALIVE
  1055 14A1 A9 5D			lda #$5D
  1056 14A3 8D 22 1D			sta INITPLAYERS.COLOUR
  1057 14A6 A9 51			lda #$51
  1058 14A8 8D 21 1D			sta INITPLAYERS.HEAD
  1059 14AB A9 03			lda #$03
  1060 14AD 8D 20 1D			sta INITPLAYERS.BRAIN
  1061 14B0 A9 04			lda #$04
  1062 14B2 8D 1F 1D			sta INITPLAYERS.DIR
  1063 14B5 A9 0C			lda #$0C
  1064 14B7 8D 1E 1D			sta INITPLAYERS.Y
  1065 14BA A9 1E			lda #$1E
  1066 14BC 8D 1D 1D			sta INITPLAYERS.X
  1067 14BF AD DC 1C			lda PLAYER2
  1068 14C2 8D 1B 1D			sta INITPLAYERS.P
  1069 14C5 AD DD 1C			lda PLAYER2+1
  1070 14C8 8D 1C 1D			sta INITPLAYERS.P+1
  1071 14CB 20 87 13			jsr INITPLAYERS
  1072
  1073 				; optimize OK (init.inc), line = 34
  1074
  1075 14CE A9 01			lda #$01
  1076 14D0 8D 23 1D			sta INITPLAYERS.ISALIVE
  1077 14D3 A9 71			lda #$71
  1078 14D5 8D 22 1D			sta INITPLAYERS.COLOUR
  1079 14D8 A9 51			lda #$51
  1080 14DA 8D 21 1D			sta INITPLAYERS.HEAD
  1081 14DD A9 02			lda #$02
  1082 14DF 8D 20 1D			sta INITPLAYERS.BRAIN
  1083 14E2 8D 1F 1D			sta INITPLAYERS.DIR
  1084 14E5 A9 06			lda #$06
  1085 14E7 8D 1E 1D			sta INITPLAYERS.Y
  1086 14EA A9 14			lda #$14
  1087 14EC 8D 1D 1D			sta INITPLAYERS.X
  1088 14EF AD DE 1C			lda PLAYER3
  1089 14F2 8D 1B 1D			sta INITPLAYERS.P
  1090 14F5 AD DF 1C			lda PLAYER3+1
  1091 14F8 8D 1C 1D			sta INITPLAYERS.P+1
  1092 14FB 20 87 13			jsr INITPLAYERS
  1093
  1094 				; optimize OK (init.inc), line = 35
  1095
  1096 14FE A9 01			lda #$01
  1097 1500 8D 23 1D			sta INITPLAYERS.ISALIVE
  1098 1503 A9 55			lda #$55
  1099 1505 8D 22 1D			sta INITPLAYERS.COLOUR
  1100 1508 A9 51			lda #$51
  1101 150A 8D 21 1D			sta INITPLAYERS.HEAD
  1102 150D A9 04			lda #$04
  1103 150F 8D 20 1D			sta INITPLAYERS.BRAIN
  1104 1512 A9 01			lda #$01
  1105 1514 8D 1F 1D			sta INITPLAYERS.DIR
  1106 1517 A9 12			lda #$12
  1107 1519 8D 1E 1D			sta INITPLAYERS.Y
  1108 151C A9 14			lda #$14
  1109 151E 8D 1D 1D			sta INITPLAYERS.X
  1110 1521 AD E0 1C			lda PLAYER4
  1111 1524 8D 1B 1D			sta INITPLAYERS.P
  1112 1527 AD E1 1C			lda PLAYER4+1
  1113 152A 8D 1C 1D			sta INITPLAYERS.P+1
  1114 152D 20 87 13			jsr INITPLAYERS
  1115
  1116 				; optimize OK (init.inc), line = 37
  1117
  1118 1530 A9 35			lda #$35
  1119 1532 8D 18 1D			sta PUTCHAR.C
  1120 1535 A9 56			lda #$56
  1121 1537 8D 17 1D			sta PUTCHAR.V
  1122 153A A9 06			lda #$06
  1123 153C 8D 16 1D			sta PUTCHAR.Y
  1124 153F A9 0A			lda #$0A
  1125 1541 8D 15 1D			sta PUTCHAR.X
  1126 1544 20 71 11			jsr PUTCHAR
  1127
  1128 				; optimize OK (init.inc), line = 38
  1129
  1130 1547 A9 35			lda #$35
  1131 1549 8D 18 1D			sta PUTCHAR.C
  1132 154C A9 56			lda #$56
  1133 154E 8D 17 1D			sta PUTCHAR.V
  1134 1551 A9 06			lda #$06
  1135 1553 8D 16 1D			sta PUTCHAR.Y
  1136 1556 A9 1E			lda #$1E
  1137 1558 8D 15 1D			sta PUTCHAR.X
  1138 155B 20 71 11			jsr PUTCHAR
  1139
  1140 				; optimize OK (init.inc), line = 39
  1141
  1142 155E A9 35			lda #$35
  1143 1560 8D 18 1D			sta PUTCHAR.C
  1144 1563 A9 56			lda #$56
  1145 1565 8D 17 1D			sta PUTCHAR.V
  1146 1568 A9 12			lda #$12
  1147 156A 8D 16 1D			sta PUTCHAR.Y
  1148 156D A9 0A			lda #$0A
  1149 156F 8D 15 1D			sta PUTCHAR.X
  1150 1572 20 71 11			jsr PUTCHAR
  1151
  1152 				; optimize OK (init.inc), line = 40
  1153
  1154 1575 A9 35			lda #$35
  1155 1577 8D 18 1D			sta PUTCHAR.C
  1156 157A A9 56			lda #$56
  1157 157C 8D 17 1D			sta PUTCHAR.V
  1158 157F A9 12			lda #$12
  1159 1581 8D 16 1D			sta PUTCHAR.Y
  1160 1584 A9 1E			lda #$1E
  1161 1586 8D 15 1D			sta PUTCHAR.X
  1162 1589 20 71 11			jsr PUTCHAR
  1163
  1164 				; optimize OK (init.inc), line = 41
  1165
  1166 158C A9 35			lda #$35
  1167 158E 8D 18 1D			sta PUTCHAR.C
  1168 1591 A9 56			lda #$56
  1169 1593 8D 17 1D			sta PUTCHAR.V
  1170 1596 A9 0C			lda #$0C
  1171 1598 8D 16 1D			sta PUTCHAR.Y
  1172 159B A9 01			lda #$01
  1173 159D 8D 15 1D			sta PUTCHAR.X
  1174 15A0 20 71 11			jsr PUTCHAR
  1175
  1176 				; optimize OK (init.inc), line = 42
  1177
  1178 15A3 A9 35			lda #$35
  1179 15A5 8D 18 1D			sta PUTCHAR.C
  1180 15A8 A9 56			lda #$56
  1181 15AA 8D 17 1D			sta PUTCHAR.V
  1182 15AD A9 0C			lda #$0C
  1183 15AF 8D 16 1D			sta PUTCHAR.Y
  1184 15B2 A9 26			lda #$26
  1185 15B4 8D 15 1D			sta PUTCHAR.X
  1186 15B7 20 71 11			jsr PUTCHAR
  1187
  1188 				; optimize OK (init.inc), line = 43
  1189
  1190 15BA A9 35			lda #$35
  1191 15BC 8D 18 1D			sta PUTCHAR.C
  1192 15BF A9 56			lda #$56
  1193 15C1 8D 17 1D			sta PUTCHAR.V
  1194 15C4 A9 02			lda #$02
  1195 15C6 8D 16 1D			sta PUTCHAR.Y
  1196 15C9 A9 14			lda #$14
  1197 15CB 8D 15 1D			sta PUTCHAR.X
  1198 15CE 20 71 11			jsr PUTCHAR
  1199
  1200 				; optimize OK (init.inc), line = 44
  1201
  1202 15D1 A9 35			lda #$35
  1203 15D3 8D 18 1D			sta PUTCHAR.C
  1204 15D6 A9 56			lda #$56
  1205 15D8 8D 17 1D			sta PUTCHAR.V
  1206 15DB A9 16			lda #$16
  1207 15DD 8D 16 1D			sta PUTCHAR.Y
  1208 15E0 A9 14			lda #$14
  1209 15E2 8D 15 1D			sta PUTCHAR.X
  1210 15E5 20 71 11			jsr PUTCHAR
  1211
  1212 				; optimize FAIL ('SHOWSCORE', init.inc), line = 46
  1213
  1214 15E8 20 9C 11			jsr SHOWSCORE
  1215
  1216 				; ------------------------------------------------------------
  1217
  1218 = 0000			@FORTMP_0330	= $00
  1219 = 0001			@FORTMP_0370	= $01
  1220 15EB			@exit
  1221 					.ifdef @new
  1222 					lda <@VarData
  1223 					sta :ztmp
  1224 					lda >@VarData
  1225 					ldy #@VarDataSize-1
  1226 					jmp @FreeMem
  1227 					els
  1228 15EB 60				rts						; ret
  1229 					eif
  1230 				.endl
  1231
  1232 15EC			.local	AISTRAIGHT					; PROCEDURE
  1233
  1234 				; optimize OK (ai.inc), line = 5
  1235
  1236 15EC AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1237 15F6 A0 04			ldy #PLY.DIR-DATAORIGIN
  1238 15F8 B1 12			lda (:bp2),y
  1239 15FA 25 5B			and AVAILDIR
  1240 15FC F0 07			jeq l_0409
  1241 15FE B1 12			lda (:bp2),y
  1242 1600 85 5A			sta NEWDIR
  1243 1602 4C 70 16			jmp l_0419
  1244 1605			l_0409
  1245
  1246 				; optimize OK (ai.inc), line = 7
  1247
  1248 1605 A5 5B			lda AVAILDIR
  1249 1607 C9 03			cmp #$03
  1250 1609 D0 10			jne l_042B
  1251 160B A9 02			lda #$02
  1252 160D 20 40 11			jsr SYSTEM.RANDOM_006C
  1253 1610 B4 18			ldy :STACKORIGIN,x
  1254 1612 B9 40 10			lda adr.DIRECTION,y
  1255 1615 85 5A			sta NEWDIR
  1256 1617 CA				dex
  1257 1618 4C 33 16			jmp l_043D
  1258 161B			l_042B
  1259
  1260 				; optimize OK (ai.inc), line = 9
  1261
  1262 161B A5 5B			lda AVAILDIR
  1263 161D 8D 24 1D			sta @CASETMP_0003
  1264 1620 C9 01			cmp #$01
  1265 1622 D0 07			jne l_0448
  1266 1624			@
  1267
  1268 				; optimize OK (ai.inc), line = 10
  1269
  1270 1624 A9 01			lda #$01
  1271 1626 85 5A			sta NEWDIR
  1272
  1273 1628 4C 33 16			jmp a_0003
  1274 162B			l_0448
  1275 162B C9 02			cmp #$02
  1276 162D D0 04			jne l_0455
  1277 162F			@
  1278
  1279 				; optimize OK (ai.inc), line = 11
  1280
  1281 162F A9 02			lda #$02
  1282 1631 85 5A			sta NEWDIR
  1283
  1284 1633			l_0455
  1285 1633			a_0003
  1286 1633			l_043D
  1287
  1288 				; optimize OK (ai.inc), line = 14
  1289
  1290 1633 A5 5B			lda AVAILDIR
  1291 1635 C9 0C			cmp #$0C
  1292 1637 D0 1F			jne l_0471
  1293 1639 A9 02			lda #$02
  1294 163B 20 40 11			jsr SYSTEM.RANDOM_006C
  1295 163E E8				inx
  1296 163F A9 02 95 18			mva #$02 :STACKORIGIN,x
  1297 1643 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1298 1647 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1299 1649 20 44 10			jsr addAX_CX
  1300 164C CA				dex
  1301 164D B4 18			ldy :STACKORIGIN,x
  1302 164F B9 40 10			lda adr.DIRECTION,y
  1303 1652 85 5A			sta NEWDIR
  1304 1654 CA				dex
  1305 1655 4C 70 16			jmp l_0487
  1306 1658			l_0471
  1307
  1308 				; optimize OK (ai.inc), line = 16
  1309
  1310 1658 A5 5B			lda AVAILDIR
  1311 165A 8D 25 1D			sta @CASETMP_0004
  1312 165D C9 04			cmp #$04
  1313 165F D0 07			jne l_0492
  1314 1661			@
  1315
  1316 				; optimize OK (ai.inc), line = 17
  1317
  1318 1661 A9 04			lda #$04
  1319 1663 85 5A			sta NEWDIR
  1320
  1321 1665 4C 70 16			jmp a_0004
  1322 1668			l_0492
  1323 1668 C9 08			cmp #$08
  1324 166A D0 04			jne l_049F
  1325 166C			@
  1326
  1327 				; optimize OK (ai.inc), line = 18
  1328
  1329 166C A9 08			lda #$08
  1330 166E 85 5A			sta NEWDIR
  1331
  1332 1670			l_049F
  1333 1670			a_0004
  1334 1670			l_0487
  1335 1670			l_0419
  1336
  1337 				; ------------------------------------------------------------
  1338
  1339 = 1D24			@CASETMP_0003	= DATAORIGIN+$0040
  1340 = 1D25			@CASETMP_0004	= DATAORIGIN+$0041
  1341
  1342 = 1D24			@VarData	= @CASETMP_0003
  1343 = 0002			@VarDataSize	= 2
  1344
  1345 1670			@exit
  1346 					.ifdef @new
  1347 					lda <@VarData
  1348 					sta :ztmp
  1349 					lda >@VarData
  1350 					ldy #@VarDataSize-1
  1351 					jmp @FreeMem
  1352 					els
  1353 1670 60				rts						; ret
  1354 					eif
  1355 				.endl
  1356
  1357 1671			.local	AIBULLY						; PROCEDURE
  1358
  1359 				; optimize OK (ai.inc), line = 28
  1360
  1361 1671 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1362 167B A0 04			ldy #PLY.DIR-DATAORIGIN
  1363 167D B1 12			lda (:bp2),y
  1364 167F 85 58			sta T0B
  1365
  1366 				; optimize OK (ai.inc), line = 30
  1367
  1368 1681 AD FC 1C			lda PLAYER1.ISALIVE
  1369 1684 F0 0F			jeq l_04BF
  1370 1686 AD DA 1C			lda PLAYER1
  1371 1689 8D D8 1C			sta TMPPLY
  1372 168C AD DB 1C			lda PLAYER1+1
  1373 168F 8D D9 1C			sta TMPPLY+1
  1374 1692 4C A1 16			jmp l_04CE
  1375 1695			l_04BF
  1376 1695 AD DC 1C			lda PLAYER2
  1377 1698 8D D8 1C			sta TMPPLY
  1378 169B AD DD 1C			lda PLAYER2+1
  1379 169E 8D D9 1C			sta TMPPLY+1
  1380 16A1			l_04CE
  1381
  1382 				; optimize OK (ai.inc), line = 32
  1383
  1384 16A1 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1385 16AB A0 01			ldy #PLY.Y-DATAORIGIN
  1386 16AD B1 12			lda (:bp2),y
  1387 16AF 85 21			sta :STACKORIGIN+9
  1388 16B1 AC D8 1C 84 12 AC + 	mwy TMPPLY :bp2
  1389 16BB A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1390 16BD B1 12			lda (:bp2),y
  1391 16BF C5 21			cmp :STACKORIGIN+9
  1392 16C1 B0 07			jcs l_04E7
  1393 16C3 A9 01			lda #$01
  1394 16C5 85 58			sta T0B
  1395 16C7 4C CE 16			jmp l_04F5
  1396 16CA			l_04E7
  1397 16CA A9 02			lda #$02
  1398 16CC 85 58			sta T0B
  1399 16CE			l_04F5
  1400
  1401 				; optimize OK (ai.inc), line = 33
  1402
  1403 16CE AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1404 16D8 A0 01			ldy #PLY.Y-DATAORIGIN
  1405 16DA B1 12			lda (:bp2),y
  1406 16DC 85 21			sta :STACKORIGIN+9
  1407 16DE AC D8 1C 84 12 AC + 	mwy TMPPLY :bp2
  1408 16E8 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1409 16EA B1 12			lda (:bp2),y
  1410 16EC C5 21			cmp :STACKORIGIN+9
  1411 16EE F0 06			jeq l_051Fx
  1412 16F0 A5 5B			lda AVAILDIR
  1413 16F2 25 58			and T0B
  1414 16F4 D0 2D			jne l_051F
  1415 16F6			l_051Fx
  1416
  1417 				; optimize OK (ai.inc), line = 34
  1418
  1419 16F6 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1420 1700 A0 00			ldy #PLY.X-DATAORIGIN
  1421 1702 B1 12			lda (:bp2),y
  1422 1704 85 21			sta :STACKORIGIN+9
  1423 1706 AC D8 1C 84 12 AC + 	mwy TMPPLY :bp2
  1424 1710 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1425 1712 B1 12			lda (:bp2),y
  1426 1714 C5 21			cmp :STACKORIGIN+9
  1427 1716 B0 07			jcs l_0534
  1428 1718 A9 04			lda #$04
  1429 171A 85 58			sta T0B
  1430 171C 4C 23 17			jmp l_0542
  1431 171F			l_0534
  1432 171F A9 08			lda #$08
  1433 1721 85 58			sta T0B
  1434 1723			l_0542
  1435 1723			l_051F
  1436
  1437 				; optimize OK (ai.inc), line = 36
  1438
  1439 1723 A5 5B			lda AVAILDIR
  1440 1725 25 58			and T0B
  1441 1727 F0 07			jeq l_0560
  1442 1729 A5 58			lda T0B
  1443 172B 85 5A			sta NEWDIR
  1444 172D 4C 33 17			jmp l_0570
  1445 1730			l_0560
  1446
  1447 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 37
  1448
  1449 1730 20 EC 15			jsr AISTRAIGHT
  1450 1733			l_0570
  1451 1733			@exit
  1452 					.ifdef @new
  1453 					lda <@VarData
  1454 					sta :ztmp
  1455 					lda >@VarData
  1456 					ldy #@VarDataSize-1
  1457 					jmp @FreeMem
  1458 					els
  1459 1733 60				rts						; ret
  1460 					eif
  1461 				.endl
  1462
  1463 1734			.local	AIMIRROR					; PROCEDURE
  1464
  1465 				; optimize OK (ai.inc), line = 44
  1466
  1467 1734 AD F9 1C			lda PLAYER1.DIR
  1468 1737 8D 26 1D			sta @CASETMP_0005
  1469 173A C9 01			cmp #$01
  1470 173C D0 07			jne l_0580
  1471 173E			@
  1472
  1473 				; optimize OK (ai.inc), line = 45
  1474
  1475 173E A9 02			lda #$02
  1476 1740 85 58			sta T0B
  1477
  1478 1742 4C 63 17			jmp a_0005
  1479 1745			l_0580
  1480 1745 C9 02			cmp #$02
  1481 1747 D0 07			jne l_058D
  1482 1749			@
  1483
  1484 				; optimize OK (ai.inc), line = 46
  1485
  1486 1749 A9 01			lda #$01
  1487 174B 85 58			sta T0B
  1488
  1489 174D 4C 63 17			jmp a_0005
  1490 1750			l_058D
  1491 1750 C9 04			cmp #$04
  1492 1752 D0 07			jne l_059A
  1493 1754			@
  1494
  1495 				; optimize OK (ai.inc), line = 47
  1496
  1497 1754 A9 08			lda #$08
  1498 1756 85 58			sta T0B
  1499
  1500 1758 4C 63 17			jmp a_0005
  1501 175B			l_059A
  1502 175B C9 08			cmp #$08
  1503 175D D0 04			jne l_05A7
  1504 175F			@
  1505
  1506 				; optimize OK (ai.inc), line = 48
  1507
  1508 175F A9 04			lda #$04
  1509 1761 85 58			sta T0B
  1510
  1511 1763			l_05A7
  1512 1763			a_0005
  1513
  1514 				; optimize OK (ai.inc), line = 51
  1515
  1516 1763 A5 5B			lda AVAILDIR
  1517 1765 25 58			and T0B
  1518 1767 F0 07			jeq l_05CB
  1519 1769 A5 58			lda T0B
  1520 176B 85 5A			sta NEWDIR
  1521 176D 4C 73 17			jmp l_05DB
  1522 1770			l_05CB
  1523
  1524 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 52
  1525
  1526 1770 20 EC 15			jsr AISTRAIGHT
  1527 1773			l_05DB
  1528
  1529 				; ------------------------------------------------------------
  1530
  1531 = 1D26			@CASETMP_0005	= DATAORIGIN+$0042
  1532
  1533 = 1D26			@VarData	= @CASETMP_0005
  1534 = 0001			@VarDataSize	= 1
  1535
  1536 1773			@exit
  1537 					.ifdef @new
  1538 					lda <@VarData
  1539 					sta :ztmp
  1540 					lda >@VarData
  1541 					ldy #@VarDataSize-1
  1542 					jmp @FreeMem
  1543 					els
  1544 1773 60				rts						; ret
  1545 					eif
  1546 				.endl
  1547
  1548 1774			.local	AISAPER						; PROCEDURE
  1549
  1550 				; optimize OK (ai.inc), line = 61
  1551
  1552 1774 A9 00			lda #$00
  1553 1776 8D 28 1D			sta L
  1554 1779 8D 29 1D			sta R
  1555 177C 8D 2A 1D			sta U
  1556 177F 8D 2B 1D			sta D
  1557
  1558 				; optimize OK (ai.inc), line = 62
  1559
  1560 1782 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  1561 178C A0 01			ldy #PLY.Y-DATAORIGIN
  1562 178E B1 12			lda (:bp2),y
  1563 1790 0A				asl @
  1564 1791 A8				tay
  1565 1792 A9 00			lda #$00
  1566 1794 18 79 0E 10			add adr.MUL40,y
  1567 1798 85 21			sta :STACKORIGIN+9
  1568 179A A9 0C			lda #$0C
  1569 179C 79 0F 10			adc adr.MUL40+1,y
  1570 179F 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1571 17A1 A0 00			ldy #PLY.X-DATAORIGIN
  1572 17A3 A5 21			lda :STACKORIGIN+9
  1573 17A5 18 71 12			add (:bp2),y
  1574 17A8 85 5C			sta T0W
  1575 17AA A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1576 17AC 69 00			adc #$00
  1577 17AE 85 5D			sta T0W+1
  1578
  1579 				; optimize OK (ai.inc), line = 64
  1580
  1581 17B0 A5 5B			lda AVAILDIR
  1582 17B2 29 01			and #$01
  1583 17B4 F0 78			jeq l_0618
  1584
  1585 				; optimize OK (ai.inc), line = 65
  1586
  1587 17B6 A9 04			lda #$04
  1588 17B8 8D 27 1D			sta I0B
  1589
  1590 17BB			l_0622
  1591 				; --- ForToDoCondition
  1592 17BB AD 27 1D			lda I0B
  1593 17BE C9 01			cmp #$01
  1594 17C0 90 6C			jcc l_0630
  1595
  1596 				; optimize OK (ai.inc), line = 66
  1597
  1598 17C2 0A				asl @
  1599 17C3 A8				tay
  1600 17C4 A5 5C			lda T0W
  1601 17C6 38 F9 0E 10			sub adr.MUL40,y
  1602 17CA 85 21			sta :STACKORIGIN+9
  1603 17CC A5 5D			lda T0W+1
  1604 17CE F9 0F 10			sbc adr.MUL40+1,y
  1605 17D1 85 11			sta :bp+1
  1606 17D3 A4 21			ldy :STACKORIGIN+9
  1607 17D5 B1 10			lda (:bp),y
  1608 17D7 C9 20			cmp #$20
  1609 17D9 D0 03			jne l_064A
  1610 17DB EE 2A 1D			inc U
  1611 17DE			l_064A
  1612
  1613 				; optimize OK (ai.inc), line = 67
  1614
  1615 17DE AD 27 1D			lda I0B
  1616 17E1 0A				asl @
  1617 17E2 A8				tay
  1618 17E3 A5 5C			lda T0W
  1619 17E5 38 F9 0E 10			sub adr.MUL40,y
  1620 17E9 85 21			sta :STACKORIGIN+9
  1621 17EB A5 5D			lda T0W+1
  1622 17ED F9 0F 10			sbc adr.MUL40+1,y
  1623 17F0 85 11			sta :bp+1
  1624 17F2 A5 21			lda :STACKORIGIN+9
  1625 17F4 18 69 01			add #$01
  1626 17F7 A8				tay
  1627 17F8 90 02			scc
  1628 17FA E6 11			inc :bp+1
  1629 17FC B1 10			lda (:bp),y
  1630 17FE C9 20			cmp #$20
  1631 1800 D0 03			jne l_066F
  1632 1802 EE 2A 1D			inc U
  1633 1805			l_066F
  1634
  1635 				; optimize OK (ai.inc), line = 68
  1636
  1637 1805 AD 27 1D			lda I0B
  1638 1808 0A				asl @
  1639 1809 A8				tay
  1640 180A A5 5C			lda T0W
  1641 180C 38 F9 0E 10			sub adr.MUL40,y
  1642 1810 85 21			sta :STACKORIGIN+9
  1643 1812 A5 5D			lda T0W+1
  1644 1814 F9 0F 10			sbc adr.MUL40+1,y
  1645 1817 85 11			sta :bp+1
  1646 1819 A4 21			ldy :STACKORIGIN+9
  1647 181B 88				dey
  1648 181C B0 02			scs
  1649 181E C6 11			dec :bp+1
  1650 1820 B1 10			lda (:bp),y
  1651 1822 C9 20			cmp #$20
  1652 1824 D0 03			jne l_0694
  1653 1826 EE 2A 1D			inc U
  1654 1829			l_0694
  1655
  1656 				; --- ForToDoEpilog
  1657 1829 CE 27 1D			dec I0B
  1658 182C 10 8D			jpl l_0622
  1659 182E			l_0630
  1660 182E			l_0618
  1661
  1662 				; optimize OK (ai.inc), line = 72
  1663
  1664 182E A5 5B			lda AVAILDIR
  1665 1830 29 02			and #$02
  1666 1832 F0 78			jeq l_06B8
  1667
  1668 				; optimize OK (ai.inc), line = 73
  1669
  1670 1834 A9 04			lda #$04
  1671 1836 8D 27 1D			sta I0B
  1672
  1673 1839			l_06C2
  1674 				; --- ForToDoCondition
  1675 1839 AD 27 1D			lda I0B
  1676 183C C9 01			cmp #$01
  1677 183E 90 6C			jcc l_06D0
  1678
  1679 				; optimize OK (ai.inc), line = 74
  1680
  1681 1840 0A				asl @
  1682 1841 A8				tay
  1683 1842 A5 5C			lda T0W
  1684 1844 18 79 0E 10			add adr.MUL40,y
  1685 1848 85 21			sta :STACKORIGIN+9
  1686 184A A5 5D			lda T0W+1
  1687 184C 79 0F 10			adc adr.MUL40+1,y
  1688 184F 85 11			sta :bp+1
  1689 1851 A4 21			ldy :STACKORIGIN+9
  1690 1853 B1 10			lda (:bp),y
  1691 1855 C9 20			cmp #$20
  1692 1857 D0 03			jne l_06EA
  1693 1859 EE 2B 1D			inc D
  1694 185C			l_06EA
  1695
  1696 				; optimize OK (ai.inc), line = 75
  1697
  1698 185C AD 27 1D			lda I0B
  1699 185F 0A				asl @
  1700 1860 A8				tay
  1701 1861 A5 5C			lda T0W
  1702 1863 18 79 0E 10			add adr.MUL40,y
  1703 1867 85 21			sta :STACKORIGIN+9
  1704 1869 A5 5D			lda T0W+1
  1705 186B 79 0F 10			adc adr.MUL40+1,y
  1706 186E 85 11			sta :bp+1
  1707 1870 A5 21			lda :STACKORIGIN+9
  1708 1872 18 69 01			add #$01
  1709 1875 A8				tay
  1710 1876 90 02			scc
  1711 1878 E6 11			inc :bp+1
  1712 187A B1 10			lda (:bp),y
  1713 187C C9 20			cmp #$20
  1714 187E D0 03			jne l_070F
  1715 1880 EE 2B 1D			inc D
  1716 1883			l_070F
  1717
  1718 				; optimize OK (ai.inc), line = 76
  1719
  1720 1883 AD 27 1D			lda I0B
  1721 1886 0A				asl @
  1722 1887 A8				tay
  1723 1888 A5 5C			lda T0W
  1724 188A 18 79 0E 10			add adr.MUL40,y
  1725 188E 85 21			sta :STACKORIGIN+9
  1726 1890 A5 5D			lda T0W+1
  1727 1892 79 0F 10			adc adr.MUL40+1,y
  1728 1895 85 11			sta :bp+1
  1729 1897 A4 21			ldy :STACKORIGIN+9
  1730 1899 88				dey
  1731 189A B0 02			scs
  1732 189C C6 11			dec :bp+1
  1733 189E B1 10			lda (:bp),y
  1734 18A0 C9 20			cmp #$20
  1735 18A2 D0 03			jne l_0734
  1736 18A4 EE 2B 1D			inc D
  1737 18A7			l_0734
  1738
  1739 				; --- ForToDoEpilog
  1740 18A7 CE 27 1D			dec I0B
  1741 18AA 10 8D			jpl l_06C2
  1742 18AC			l_06D0
  1743 18AC			l_06B8
  1744
  1745 				; optimize OK (ai.inc), line = 80
  1746
  1747 18AC A5 5B			lda AVAILDIR
  1748 18AE 29 04			and #$04
  1749 18B0 F0 65			jeq l_0758
  1750
  1751 				; optimize OK (ai.inc), line = 81
  1752
  1753 18B2 A9 04			lda #$04
  1754 18B4 8D 27 1D			sta I0B
  1755
  1756 18B7			l_0762
  1757 				; --- ForToDoCondition
  1758 18B7 AD 27 1D			lda I0B
  1759 18BA C9 01			cmp #$01
  1760 18BC 90 59			jcc l_0770
  1761
  1762 				; optimize OK (ai.inc), line = 82
  1763
  1764 18BE A5 5C			lda T0W
  1765 18C0 38 ED 27 1D			sub I0B
  1766 18C4 A8				tay
  1767 18C5 A5 5D			lda T0W+1
  1768 18C7 E9 00			sbc #$00
  1769 18C9 85 11			sta :bp+1
  1770 18CB B1 10			lda (:bp),y
  1771 18CD C9 20			cmp #$20
  1772 18CF D0 03			jne l_0788
  1773 18D1 EE 28 1D			inc L
  1774 18D4			l_0788
  1775
  1776 				; optimize OK (ai.inc), line = 83
  1777
  1778 18D4 A5 5C			lda T0W
  1779 18D6 38 ED 27 1D			sub I0B
  1780 18DA A8				tay
  1781 18DB A5 5D			lda T0W+1
  1782 18DD E9 00			sbc #$00
  1783 18DF 85 11			sta :bp+1
  1784 18E1 98				tya
  1785 18E2 18 69 28			add #$28
  1786 18E5 A8				tay
  1787 18E6 90 02			scc
  1788 18E8 E6 11			inc :bp+1
  1789 18EA B1 10			lda (:bp),y
  1790 18EC C9 20			cmp #$20
  1791 18EE D0 03			jne l_07AB
  1792 18F0 EE 28 1D			inc L
  1793 18F3			l_07AB
  1794
  1795 				; optimize OK (ai.inc), line = 84
  1796
  1797 18F3 A5 5C			lda T0W
  1798 18F5 38 ED 27 1D			sub I0B
  1799 18F9 A8				tay
  1800 18FA A5 5D			lda T0W+1
  1801 18FC E9 00			sbc #$00
  1802 18FE 85 11			sta :bp+1
  1803 1900 98				tya
  1804 1901 38 E9 28			sub #$28
  1805 1904 A8				tay
  1806 1905 B0 02			scs
  1807 1907 C6 11			dec :bp+1
  1808 1909 B1 10			lda (:bp),y
  1809 190B C9 20			cmp #$20
  1810 190D D0 03			jne l_07CE
  1811 190F EE 28 1D			inc L
  1812 1912			l_07CE
  1813
  1814 				; --- ForToDoEpilog
  1815 1912 CE 27 1D			dec I0B
  1816 1915 10 A0			jpl l_0762
  1817 1917			l_0770
  1818 1917			l_0758
  1819
  1820 				; optimize OK (ai.inc), line = 88
  1821
  1822 1917 A5 5B			lda AVAILDIR
  1823 1919 29 08			and #$08
  1824 191B F0 63			jeq l_07F2
  1825
  1826 				; optimize OK (ai.inc), line = 89
  1827
  1828 191D A9 04			lda #$04
  1829 191F 8D 27 1D			sta I0B
  1830
  1831 1922			l_07FC
  1832 				; --- ForToDoCondition
  1833 1922 AD 27 1D			lda I0B
  1834 1925 C9 01			cmp #$01
  1835 1927 90 57			jcc l_080A
  1836
  1837 				; optimize OK (ai.inc), line = 90
  1838
  1839 1929 A4 5C 84 12 A4 5D + 	mwy T0W :bp2
  1840 1931 AC 27 1D			ldy I0B
  1841 1934 B1 12			lda (:bp2),y
  1842 1936 C9 20			cmp #$20
  1843 1938 D0 03			jne l_0822
  1844 193A EE 29 1D			inc R
  1845 193D			l_0822
  1846
  1847 				; optimize OK (ai.inc), line = 91
  1848
  1849 193D A5 5C			lda T0W
  1850 193F 18 6D 27 1D			add I0B
  1851 1943 A8				tay
  1852 1944 A5 5D			lda T0W+1
  1853 1946 69 00			adc #$00
  1854 1948 85 11			sta :bp+1
  1855 194A 98				tya
  1856 194B 18 69 28			add #$28
  1857 194E A8				tay
  1858 194F 90 02			scc
  1859 1951 E6 11			inc :bp+1
  1860 1953 B1 10			lda (:bp),y
  1861 1955 C9 20			cmp #$20
  1862 1957 D0 03			jne l_0845
  1863 1959 EE 29 1D			inc R
  1864 195C			l_0845
  1865
  1866 				; optimize OK (ai.inc), line = 92
  1867
  1868 195C A5 5C			lda T0W
  1869 195E 18 6D 27 1D			add I0B
  1870 1962 A8				tay
  1871 1963 A5 5D			lda T0W+1
  1872 1965 69 00			adc #$00
  1873 1967 85 11			sta :bp+1
  1874 1969 98				tya
  1875 196A 38 E9 28			sub #$28
  1876 196D A8				tay
  1877 196E B0 02			scs
  1878 1970 C6 11			dec :bp+1
  1879 1972 B1 10			lda (:bp),y
  1880 1974 C9 20			cmp #$20
  1881 1976 D0 03			jne l_0868
  1882 1978 EE 29 1D			inc R
  1883 197B			l_0868
  1884
  1885 				; --- ForToDoEpilog
  1886 197B CE 27 1D			dec I0B
  1887 197E 10 A2			jpl l_07FC
  1888 1980			l_080A
  1889 1980			l_07F2
  1890
  1891 				; optimize OK (ai.inc), line = 96
  1892
  1893 1980 AD 2A 1D			lda U
  1894 1983 85 58			sta T0B
  1895
  1896 				; optimize OK (ai.inc), line = 97
  1897
  1898 1985 CD 2B 1D			cmp D
  1899 1988 B0 05			jcs l_0890
  1900 198A AD 2B 1D			lda D
  1901 198D 85 58			sta T0B
  1902 198F			l_0890
  1903
  1904 				; optimize OK (ai.inc), line = 98
  1905
  1906 198F A5 58			lda T0B
  1907 1991 CD 28 1D			cmp L
  1908 1994 B0 05			jcs l_08AD
  1909 1996 AD 28 1D			lda L
  1910 1999 85 58			sta T0B
  1911 199B			l_08AD
  1912
  1913 				; optimize OK (ai.inc), line = 99
  1914
  1915 199B A5 58			lda T0B
  1916 199D CD 29 1D			cmp R
  1917 19A0 B0 05			jcs l_08CA
  1918 19A2 AD 29 1D			lda R
  1919 19A5 85 58			sta T0B
  1920 19A7			l_08CA
  1921
  1922 				; optimize OK (ai.inc), line = 101
  1923
  1924 19A7 A5 58			lda T0B
  1925 19A9 CD 2A 1D			cmp U
  1926 19AC D0 04			jne l_08E7
  1927 19AE A9 01			lda #$01
  1928 19B0 85 58			sta T0B
  1929 19B2			l_08E7
  1930
  1931 				; optimize OK (ai.inc), line = 102
  1932
  1933 19B2 A5 58			lda T0B
  1934 19B4 CD 2B 1D			cmp D
  1935 19B7 D0 04			jne l_0902
  1936 19B9 A9 02			lda #$02
  1937 19BB 85 58			sta T0B
  1938 19BD			l_0902
  1939
  1940 				; optimize OK (ai.inc), line = 103
  1941
  1942 19BD A5 58			lda T0B
  1943 19BF CD 28 1D			cmp L
  1944 19C2 D0 04			jne l_091D
  1945 19C4 A9 04			lda #$04
  1946 19C6 85 58			sta T0B
  1947 19C8			l_091D
  1948
  1949 				; optimize OK (ai.inc), line = 104
  1950
  1951 19C8 A5 58			lda T0B
  1952 19CA CD 29 1D			cmp R
  1953 19CD D0 04			jne l_0938
  1954 19CF A9 08			lda #$08
  1955 19D1 85 58			sta T0B
  1956 19D3			l_0938
  1957
  1958 				; optimize OK (ai.inc), line = 106
  1959
  1960 19D3 A5 5B			lda AVAILDIR
  1961 19D5 25 58			and T0B
  1962 19D7 F0 07			jeq l_0957
  1963 19D9 A5 58			lda T0B
  1964 19DB 85 5A			sta NEWDIR
  1965 19DD 4C E3 19			jmp l_0967
  1966 19E0			l_0957
  1967
  1968 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 107
  1969
  1970 19E0 20 EC 15			jsr AISTRAIGHT
  1971 19E3			l_0967
  1972
  1973 				; ------------------------------------------------------------
  1974
  1975 = 1D27			I0B	= DATAORIGIN+$0043
  1976 = 1D28			L	= DATAORIGIN+$0044
  1977 = 1D29			R	= DATAORIGIN+$0045
  1978 = 1D2A			U	= DATAORIGIN+$0046
  1979 = 1D2B			D	= DATAORIGIN+$0047
  1980 = 0001			@FORTMP_061F	= $01
  1981 = 0001			@FORTMP_06BF	= $01
  1982 = 0001			@FORTMP_075F	= $01
  1983 = 0001			@FORTMP_07F9	= $01
  1984
  1985 = 1D27			@VarData	= I0B
  1986 = 0005			@VarDataSize	= 5
  1987
  1988 19E3			@exit
  1989 					.ifdef @new
  1990 					lda <@VarData
  1991 					sta :ztmp
  1992 					lda >@VarData
  1993 					ldy #@VarDataSize-1
  1994 					jmp @FreeMem
  1995 					els
  1996 19E3 60				rts						; ret
  1997 					eif
  1998 				.endl
  1999
  2000 19E4			.local	HUMAN						; PROCEDURE
  2001
  2002 				; optimize OK (main.pas), line = 14
  2003
  2004 19E4 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2005 19EE A0 04			ldy #PLY.DIR-DATAORIGIN
  2006 19F0 B1 12			lda (:bp2),y
  2007 19F2 85 5A			sta NEWDIR
  2008
  2009 				; optimize OK (main.pas), line = 15
  2010
  2011 19F4 A9 02			lda #$02
  2012 19F6 8D 08 FF			sta JOY
  2013 19F9 A9 FF			lda #$FF
  2014 19FB 8D 30 FD			sta KEYSCAN
  2015 19FE AD 08 FF			lda JOY
  2016 1A01 49 FF			eor #$FF
  2017 1A03 85 58			sta T0B
  2018
  2019 				; optimize OK (main.pas), line = 17
  2020
  2021 1A05 8D 2C 1D			sta @CASETMP_0006
  2022 1A08 C9 01			cmp #$01
  2023 1A0A D0 19			jne l_098F
  2024 1A0C			@
  2025
  2026 				; optimize OK (main.pas), line = 18
  2027
  2028 1A0C AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2029 1A16 A0 04			ldy #PLY.DIR-DATAORIGIN
  2030 1A18 B1 12			lda (:bp2),y
  2031 1A1A C9 02			cmp #$02
  2032 1A1C F0 04			jeq l_09A1
  2033 1A1E A9 01			lda #$01
  2034 1A20 85 5A			sta NEWDIR
  2035 1A22			l_09A1
  2036
  2037 1A22 4C 79 1A			jmp a_0006
  2038 1A25			l_098F
  2039 1A25 C9 02			cmp #$02
  2040 1A27 D0 19			jne l_09B1
  2041 1A29			@
  2042
  2043 				; optimize OK (main.pas), line = 19
  2044
  2045 1A29 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2046 1A33 A0 04			ldy #PLY.DIR-DATAORIGIN
  2047 1A35 B1 12			lda (:bp2),y
  2048 1A37 C9 01			cmp #$01
  2049 1A39 F0 04			jeq l_09C3
  2050 1A3B A9 02			lda #$02
  2051 1A3D 85 5A			sta NEWDIR
  2052 1A3F			l_09C3
  2053
  2054 1A3F 4C 79 1A			jmp a_0006
  2055 1A42			l_09B1
  2056 1A42 C9 04			cmp #$04
  2057 1A44 D0 19			jne l_09D3
  2058 1A46			@
  2059
  2060 				; optimize OK (main.pas), line = 20
  2061
  2062 1A46 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2063 1A50 A0 04			ldy #PLY.DIR-DATAORIGIN
  2064 1A52 B1 12			lda (:bp2),y
  2065 1A54 C9 08			cmp #$08
  2066 1A56 F0 04			jeq l_09E5
  2067 1A58 A9 04			lda #$04
  2068 1A5A 85 5A			sta NEWDIR
  2069 1A5C			l_09E5
  2070
  2071 1A5C 4C 79 1A			jmp a_0006
  2072 1A5F			l_09D3
  2073 1A5F C9 08			cmp #$08
  2074 1A61 D0 16			jne l_09F5
  2075 1A63			@
  2076
  2077 				; optimize OK (main.pas), line = 21
  2078
  2079 1A63 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2080 1A6D A0 04			ldy #PLY.DIR-DATAORIGIN
  2081 1A6F B1 12			lda (:bp2),y
  2082 1A71 C9 04			cmp #$04
  2083 1A73 F0 04			jeq l_0A07
  2084 1A75 A9 08			lda #$08
  2085 1A77 85 5A			sta NEWDIR
  2086 1A79			l_0A07
  2087
  2088 1A79			l_09F5
  2089 1A79			a_0006
  2090
  2091 				; optimize OK (main.pas), line = 24
  2092
  2093 1A79 A5 5A			lda NEWDIR
  2094 1A7B 25 5B			and AVAILDIR
  2095 1A7D D0 18			jne l_0A2E
  2096
  2097 				; optimize OK (main.pas), line = 25
  2098
  2099 1A7F AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2100 1A89 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2101 1A8B A9 00			lda #$00
  2102 1A8D 91 12			sta (:bp2),y
  2103 1A8F A0 02			ldy #PLY.HEAD-DATAORIGIN
  2104 1A91 A9 2A			lda #$2A
  2105 1A93 91 12			sta (:bp2),y
  2106 1A95 C6 59			dec ALIVE
  2107 1A97			l_0A2E
  2108
  2109 				; ------------------------------------------------------------
  2110
  2111 = 1D2C			@CASETMP_0006	= DATAORIGIN+$0048
  2112
  2113 = 1D2C			@VarData	= @CASETMP_0006
  2114 = 0001			@VarDataSize	= 1
  2115
  2116 1A97			@exit
  2117 					.ifdef @new
  2118 					lda <@VarData
  2119 					sta :ztmp
  2120 					lda >@VarData
  2121 					ldy #@VarDataSize-1
  2122 					jmp @FreeMem
  2123 					els
  2124 1A97 60				rts						; ret
  2125 					eif
  2126 				.endl
  2127
  2128 1A98			.local	PLAYERMOVE					; PROCEDURE
  2129
  2130 				; optimize OK (main.pas), line = 33
  2131
  2132 1A98 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2133 1AA2 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2134 1AA4 B1 12			lda (:bp2),y
  2135 1AA6 D0 03 4C CD 1B		jeq l_0A4D
  2136
  2137 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 34
  2138
  2139 1AAB 20 01 12			jsr CHECKAVAILDIR
  2140
  2141 				; optimize OK (main.pas), line = 36
  2142
  2143 1AAE A5 5B			lda AVAILDIR
  2144 1AB0 D0 35			jne l_0A61
  2145
  2146 				; optimize OK (main.pas), line = 37
  2147
  2148 1AB2 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2149 1ABC A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  2150 1ABE A9 00			lda #$00
  2151 1AC0 91 12			sta (:bp2),y
  2152 1AC2 C6 59			dec ALIVE
  2153
  2154 				; optimize OK (main.pas), line = 38
  2155
  2156 1AC4 A0 00			ldy #PLY.X-DATAORIGIN
  2157 1AC6 B1 12			lda (:bp2),y
  2158 1AC8 8D 15 1D			sta PUTCHAR.X
  2159 1ACB A0 01			ldy #PLY.Y-DATAORIGIN
  2160 1ACD B1 12			lda (:bp2),y
  2161 1ACF 8D 16 1D			sta PUTCHAR.Y
  2162 1AD2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  2163 1AD4 B1 12			lda (:bp2),y
  2164 1AD6 18 69 80			add #$80
  2165 1AD9 8D 18 1D			sta PUTCHAR.C
  2166 1ADC A9 57			lda #$57
  2167 1ADE 8D 17 1D			sta PUTCHAR.V
  2168 1AE1 20 71 11			jsr PUTCHAR
  2169 1AE4 4C CD 1B			jmp l_0A82
  2170 1AE7			l_0A61
  2171
  2172 				; optimize OK (main.pas), line = 41
  2173
  2174 1AE7 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2175 1AF1 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  2176 1AF3 B1 12			lda (:bp2),y
  2177 1AF5 8D 2D 1D			sta @CASETMP_0007
  2178 1AF8 C9 00			cmp #$00
  2179 1AFA D0 06			jne l_0A8D
  2180 1AFC			@
  2181
  2182 				; optimize FAIL ('HUMAN', main.pas), line = 42
  2183
  2184 1AFC 20 E4 19			jsr HUMAN
  2185 1AFF 4C 27 1B			jmp a_0007
  2186 1B02			l_0A8D
  2187 1B02 C9 01			cmp #$01
  2188 1B04 D0 06			jne l_0A97
  2189 1B06			@
  2190
  2191 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 43
  2192
  2193 1B06 20 EC 15			jsr AISTRAIGHT
  2194 1B09 4C 27 1B			jmp a_0007
  2195 1B0C			l_0A97
  2196 1B0C C9 02			cmp #$02
  2197 1B0E D0 06			jne l_0AA1
  2198 1B10			@
  2199
  2200 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  2201
  2202 1B10 20 71 16			jsr AIBULLY
  2203 1B13 4C 27 1B			jmp a_0007
  2204 1B16			l_0AA1
  2205 1B16 C9 03			cmp #$03
  2206 1B18 D0 06			jne l_0AAB
  2207 1B1A			@
  2208
  2209 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  2210
  2211 1B1A 20 34 17			jsr AIMIRROR
  2212 1B1D 4C 27 1B			jmp a_0007
  2213 1B20			l_0AAB
  2214 1B20 C9 04			cmp #$04
  2215 1B22 D0 03			jne l_0AB5
  2216 1B24			@
  2217
  2218 				; optimize FAIL ('AISAPER', main.pas), line = 46
  2219
  2220 1B24 20 74 17			jsr AISAPER
  2221 1B27			l_0AB5
  2222 1B27			a_0007
  2223
  2224 				; optimize FAIL ('DRAWTAIL', main.pas), line = 49
  2225
  2226 1B27 20 C9 12			jsr DRAWTAIL
  2227 1B2A AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2228 1B34 A0 04			ldy #PLY.DIR-DATAORIGIN
  2229 1B36 A5 5A			lda NEWDIR
  2230 1B38 91 12			sta (:bp2),y
  2231
  2232 				; optimize OK (main.pas), line = 51
  2233
  2234 1B3A A5 5A			lda NEWDIR
  2235 1B3C 8D 2E 1D			sta @CASETMP_0008
  2236 1B3F C9 01			cmp #$01
  2237 1B41 D0 16			jne l_0AD1
  2238 1B43			@
  2239
  2240 				; optimize OK (main.pas), line = 52
  2241
  2242 1B43 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2243 1B4D A0 01			ldy #PLY.Y-DATAORIGIN
  2244 1B4F B1 12			lda (:bp2),y
  2245 1B51 38 E9 01			sub #$01
  2246 1B54 91 12			sta (:bp2),y
  2247
  2248 1B56 4C A4 1B			jmp a_0008
  2249 1B59			l_0AD1
  2250 1B59 C9 02			cmp #$02
  2251 1B5B D0 16			jne l_0ADB
  2252 1B5D			@
  2253
  2254 				; optimize OK (main.pas), line = 53
  2255
  2256 1B5D AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2257 1B67 A0 01			ldy #PLY.Y-DATAORIGIN
  2258 1B69 B1 12			lda (:bp2),y
  2259 1B6B 18 69 01			add #$01
  2260 1B6E 91 12			sta (:bp2),y
  2261
  2262 1B70 4C A4 1B			jmp a_0008
  2263 1B73			l_0ADB
  2264 1B73 C9 04			cmp #$04
  2265 1B75 D0 16			jne l_0AE5
  2266 1B77			@
  2267
  2268 				; optimize OK (main.pas), line = 54
  2269
  2270 1B77 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2271 1B81 A0 00			ldy #PLY.X-DATAORIGIN
  2272 1B83 B1 12			lda (:bp2),y
  2273 1B85 38 E9 01			sub #$01
  2274 1B88 91 12			sta (:bp2),y
  2275
  2276 1B8A 4C A4 1B			jmp a_0008
  2277 1B8D			l_0AE5
  2278 1B8D C9 08			cmp #$08
  2279 1B8F D0 13			jne l_0AEF
  2280 1B91			@
  2281
  2282 				; optimize OK (main.pas), line = 55
  2283
  2284 1B91 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2285 1B9B A0 00			ldy #PLY.X-DATAORIGIN
  2286 1B9D B1 12			lda (:bp2),y
  2287 1B9F 18 69 01			add #$01
  2288 1BA2 91 12			sta (:bp2),y
  2289
  2290 1BA4			l_0AEF
  2291 1BA4			a_0008
  2292
  2293 				; optimize OK (main.pas), line = 58
  2294
  2295 1BA4 AC D6 1C 84 12 AC + 	mwy PLY :bp2
  2296 1BAE A0 00			ldy #PLY.X-DATAORIGIN
  2297 1BB0 B1 12			lda (:bp2),y
  2298 1BB2 8D 15 1D			sta PUTCHAR.X
  2299 1BB5 A0 01			ldy #PLY.Y-DATAORIGIN
  2300 1BB7 B1 12			lda (:bp2),y
  2301 1BB9 8D 16 1D			sta PUTCHAR.Y
  2302 1BBC A0 02			ldy #PLY.HEAD-DATAORIGIN
  2303 1BBE B1 12			lda (:bp2),y
  2304 1BC0 8D 17 1D			sta PUTCHAR.V
  2305 1BC3 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  2306 1BC5 B1 12			lda (:bp2),y
  2307 1BC7 8D 18 1D			sta PUTCHAR.C
  2308 1BCA 20 71 11			jsr PUTCHAR
  2309 1BCD			l_0A82
  2310 1BCD			l_0A4D
  2311
  2312 				; ------------------------------------------------------------
  2313
  2314 = 1D2D			@CASETMP_0007	= DATAORIGIN+$0049
  2315 = 1D2E			@CASETMP_0008	= DATAORIGIN+$004A
  2316
  2317 = 1D2D			@VarData	= @CASETMP_0007
  2318 = 0002			@VarDataSize	= 2
  2319
  2320 1BCD			@exit
  2321 					.ifdef @new
  2322 					lda <@VarData
  2323 					sta :ztmp
  2324 					lda >@VarData
  2325 					ldy #@VarDataSize-1
  2326 					jmp @FreeMem
  2327 					els
  2328 1BCD 60				rts						; ret
  2329 					eif
  2330 				.endl
  2331
  2332 1BCE			.local	STARTSCREEN					; PROCEDURE
  2333
  2334 				; --- RepeatUntilProlog
  2335 1BCE			l_0B0C
  2336
  2337 				; optimize OK (main.pas), line = 70
  2338
  2339 1BCE A9 02			lda #$02
  2340 1BD0 8D 08 FF			sta JOY
  2341 1BD3 A9 FF			lda #$FF
  2342 1BD5 8D 30 FD			sta KEYSCAN
  2343 1BD8 AD 08 FF			lda JOY
  2344 1BDB 49 FF			eor #$FF
  2345 1BDD 85 58			sta T0B
  2346
  2347 				; optimize OK (main.pas), line = 71
  2348
  2349 1BDF C9 40			cmp #$40
  2350 1BE1 D0 EB			jne l_0B0C
  2351 1BE3			@exit
  2352 					.ifdef @new
  2353 					lda <@VarData
  2354 					sta :ztmp
  2355 					lda >@VarData
  2356 					ldy #@VarDataSize-1
  2357 					jmp @FreeMem
  2358 					els
  2359 1BE3 60				rts						; ret
  2360 					eif
  2361 				.endl
  2362
  2363 1BE4			.local	MAINLOOP					; PROCEDURE
  2364
  2365 				; optimize OK (main.pas), line = 78
  2366
  2367 1BE4 A9 FF			lda #$FF
  2368 1BE6 85 59			sta ALIVE
  2369 1BE8 20 EB 13			jsr INITPLAYFIELD
  2370 1BEB 20 CE 1B			jsr STARTSCREEN
  2371
  2372 				; --- RepeatUntilProlog
  2373 1BEE			l_0B36
  2374
  2375 				; optimize OK (main.pas), line = 81
  2376
  2377 1BEE A9 03			lda #$03
  2378 1BF0 8D F0 1C			sta SYSTEM.PAUSE_006B.N
  2379 1BF3 A9 00			lda #$00
  2380 1BF5 8D F1 1C			sta SYSTEM.PAUSE_006B.N+1
  2381 1BF8 20 23 11			jsr SYSTEM.PAUSE_006B
  2382
  2383 				; optimize OK (main.pas), line = 82
  2384
  2385 1BFB AD DA 1C			lda PLAYER1
  2386 1BFE 8D D6 1C			sta PLY
  2387 1C01 AD DB 1C			lda PLAYER1+1
  2388 1C04 8D D7 1C			sta PLY+1
  2389 1C07 20 98 1A			jsr PLAYERMOVE
  2390
  2391 				; optimize OK (main.pas), line = 83
  2392
  2393 1C0A AD DC 1C			lda PLAYER2
  2394 1C0D 8D D6 1C			sta PLY
  2395 1C10 AD DD 1C			lda PLAYER2+1
  2396 1C13 8D D7 1C			sta PLY+1
  2397 1C16 20 98 1A			jsr PLAYERMOVE
  2398
  2399 				; optimize OK (main.pas), line = 84
  2400
  2401 1C19 AD DE 1C			lda PLAYER3
  2402 1C1C 8D D6 1C			sta PLY
  2403 1C1F AD DF 1C			lda PLAYER3+1
  2404 1C22 8D D7 1C			sta PLY+1
  2405 1C25 20 98 1A			jsr PLAYERMOVE
  2406
  2407 				; optimize OK (main.pas), line = 85
  2408
  2409 1C28 AD E0 1C			lda PLAYER4
  2410 1C2B 8D D6 1C			sta PLY
  2411 1C2E AD E1 1C			lda PLAYER4+1
  2412 1C31 8D D7 1C			sta PLY+1
  2413 1C34 20 98 1A			jsr PLAYERMOVE
  2414
  2415 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 86
  2416
  2417 1C37 20 96 12			jsr ANIMATEOBSTACLES
  2418
  2419 				; optimize OK (main.pas), line = 87
  2420
  2421 1C3A A5 59			lda ALIVE
  2422 1C3C F0 04			jeq l_0B36x
  2423 1C3E C9 FF			cmp #$FF
  2424 1C40 D0 AC			jne l_0B36
  2425 1C42			l_0B36x
  2426
  2427 				; optimize OK (main.pas), line = 89
  2428
  2429 1C42 AD FC 1C			lda PLAYER1.ISALIVE
  2430 1C45 F0 03			jeq l_0B76
  2431 1C47 EE FB 1C			inc PLAYER1.SCORE
  2432 1C4A			l_0B76
  2433
  2434 				; optimize OK (main.pas), line = 90
  2435
  2436 1C4A AD 04 1D			lda PLAYER2.ISALIVE
  2437 1C4D F0 03			jeq l_0B89
  2438 1C4F EE 03 1D			inc PLAYER2.SCORE
  2439 1C52			l_0B89
  2440
  2441 				; optimize OK (main.pas), line = 91
  2442
  2443 1C52 AD 0C 1D			lda PLAYER3.ISALIVE
  2444 1C55 F0 03			jeq l_0B9C
  2445 1C57 EE 0B 1D			inc PLAYER3.SCORE
  2446 1C5A			l_0B9C
  2447
  2448 				; optimize OK (main.pas), line = 92
  2449
  2450 1C5A AD 14 1D			lda PLAYER4.ISALIVE
  2451 1C5D F0 03			jeq l_0BAF
  2452 1C5F EE 13 1D			inc PLAYER4.SCORE
  2453 1C62			l_0BAF
  2454
  2455 				; optimize OK (main.pas), line = 94
  2456
  2457 1C62 A9 64			lda #$64
  2458 1C64 8D F0 1C			sta SYSTEM.PAUSE_006B.N
  2459 1C67 A9 00			lda #$00
  2460 1C69 8D F1 1C			sta SYSTEM.PAUSE_006B.N+1
  2461 1C6C 20 23 11			jsr SYSTEM.PAUSE_006B
  2462 1C6F			@exit
  2463 					.ifdef @new
  2464 					lda <@VarData
  2465 					sta :ztmp
  2466 					lda >@VarData
  2467 					ldy #@VarDataSize-1
  2468 					jmp @FreeMem
  2469 					els
  2470 1C6F 60				rts						; ret
  2471 					eif
  2472 				.endl
  2473 1C70			l_0007
  2474
  2475 				; --- RepeatUntilProlog
  2476 1C70			l_0BBA
  2477
  2478 				; optimize OK (main.pas), line = 101
  2479
  2480 1C70 A9 30			lda #$30
  2481 1C72 8D FB 1C			sta PLAYER1.SCORE
  2482 1C75 8D 03 1D			sta PLAYER2.SCORE
  2483
  2484 				; optimize OK (main.pas), line = 102
  2485
  2486 1C78 8D 0B 1D			sta PLAYER3.SCORE
  2487 1C7B 8D 13 1D			sta PLAYER4.SCORE
  2488
  2489 				; optimize OK (main.pas), line = 104
  2490
  2491 1C7E A9 00			lda #$00
  2492 1C80 8D F4 1C			sta GAMEOVER
  2493
  2494 				; --- RepeatUntilProlog
  2495 1C83			l_0BCF
  2496
  2497 				; optimize FAIL ('MAINLOOP', main.pas), line = 106
  2498
  2499 1C83 20 E4 1B			jsr MAINLOOP
  2500
  2501 				; optimize OK (main.pas), line = 107
  2502
  2503 1C86 AD FB 1C			lda PLAYER1.SCORE
  2504 1C89 C9 39			cmp #$39
  2505 1C8B D0 05			jne l_0BE2
  2506 1C8D A9 01			lda #$01
  2507 1C8F 8D F4 1C			sta GAMEOVER
  2508 1C92			l_0BE2
  2509
  2510 				; optimize OK (main.pas), line = 108
  2511
  2512 1C92 AD 03 1D			lda PLAYER2.SCORE
  2513 1C95 C9 39			cmp #$39
  2514 1C97 D0 05			jne l_0BFB
  2515 1C99 A9 01			lda #$01
  2516 1C9B 8D F4 1C			sta GAMEOVER
  2517 1C9E			l_0BFB
  2518
  2519 				; optimize OK (main.pas), line = 109
  2520
  2521 1C9E AD 0B 1D			lda PLAYER3.SCORE
  2522 1CA1 C9 39			cmp #$39
  2523 1CA3 D0 05			jne l_0C14
  2524 1CA5 A9 01			lda #$01
  2525 1CA7 8D F4 1C			sta GAMEOVER
  2526 1CAA			l_0C14
  2527
  2528 				; optimize OK (main.pas), line = 110
  2529
  2530 1CAA AD 13 1D			lda PLAYER4.SCORE
  2531 1CAD C9 39			cmp #$39
  2532 1CAF D0 05			jne l_0C2D
  2533 1CB1 A9 01			lda #$01
  2534 1CB3 8D F4 1C			sta GAMEOVER
  2535 1CB6			l_0C2D
  2536
  2537 				; optimize OK (main.pas), line = 111
  2538
  2539 1CB6 AD F4 1C			lda GAMEOVER
  2540 1CB9 F0 C8			jeq l_0BCF
  2541
  2542 				; optimize FAIL ('SHOWSCORE', main.pas), line = 113
  2543
  2544 1CBB 20 9C 11			jsr SHOWSCORE
  2545
  2546 				; optimize OK (main.pas), line = 115
  2547
  2548 1CBE A9 C8			lda #$C8
  2549 1CC0 8D F0 1C			sta SYSTEM.PAUSE_006B.N
  2550 1CC3 A9 00			lda #$00
  2551 1CC5 8D F1 1C			sta SYSTEM.PAUSE_006B.N+1
  2552 1CC8 20 23 11			jsr SYSTEM.PAUSE_006B
  2553
  2554 				; optimize OK (main.pas), line = 116
  2555
  2556 1CCB 4C 70 1C			jmp l_0BBA
  2557
  2558 				; ------------------------------------------------------------
  2559
  2560 = 0800			ATTRIBUTE_ADDR	= $0800
  2561 = 0C00			SCREEN_ADDR	= $0C00
  2562 = 0009			VICTORIES	= $09
  2563 = 0004			LOOK_AHEAD	= $04
  2564 = 0020			EMPTY	= $20
  2565 = 00A0			WALL	= $A0
  2566 = 0041			WALL_COLOUR	= $41
  2567 = 0030			ZERO	= $30
  2568 = 0056			OBSTACLE_1	= $56
  2569 = 005B			OBSTACLE_2	= $5B
  2570 = 0035			OBST_COLOUR	= $35
  2571 = 0051			PLY_HEAD	= $51
  2572 = 002A			PLY_CRASH	= $2A
  2573 = 0057			PLY_BUSTED	= $57
  2574 = 0042			PLY_TAIL_UD	= $42
  2575 = 0040			PLY_TAIL_LR	= $40
  2576 = 007D			PLY_TAIL_RD	= $7D
  2577 = 006E			PLY_TAIL_RU	= $6E
  2578 = 006D			PLY_TAIL_LD	= $6D
  2579 = 0070			PLY_TAIL_LU	= $70
  2580 = 005F			PLY1_COLOUR	= $5F
  2581 = 005D			PLY2_COLOUR	= $5D
  2582 = 0071			PLY3_COLOUR	= $71
  2583 = 0055			PLY4_COLOUR	= $55
  2584 = 0000			PLY_CTRL	= $00
  2585 = 0001			AI_STRAIGHT	= $01
  2586 = 0002			AI_BULLY	= $02
  2587 = 0003			AI_MIRROR	= $03
  2588 = 0004			AI_SAPER	= $04
  2589 = 0001			JOY_UP	= $01
  2590 = 0002			JOY_DOWN	= $02
  2591 = 0004			JOY_LEFT	= $04
  2592 = 0008			JOY_RIGHT	= $08
  2593 = 0040			JOY_FIRE	= $40
  2594 = 0002			JOY_SELECT_1	= $02
  2595 = 0004			JOY_SELECT_2	= $04
  2596 = 100E			adr.MUL40	= CODEORIGIN+$0000
  2597 1CCE			.var MUL40	= adr.MUL40 .word
  2598 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  2599 1CCE			.var DIRECTION	= adr.DIRECTION .word
  2600 = FD30			KEYSCAN	= $FD30
  2601 = FF08			JOY	= $FF08
  2602 = FF15			BORDERCOLOR	= $FF15
  2603 = FF19			BGCOLOR	= $FF19
  2604 = 0058			T0B	= $58
  2605 = 0059			ALIVE	= $59
  2606 = 005A			NEWDIR	= $5A
  2607 = 005B			AVAILDIR	= $5B
  2608 = 005C			T0W	= $5C
  2609 = 005E			adr.PLY	= $5E
  2610 1CCE			.var PLY	= adr.PLY .word
  2611 = 1CE4			PLY.X	= DATAORIGIN+$0000
  2612 = 1CE5			PLY.Y	= DATAORIGIN+$0001
  2613 = 1CE6			PLY.HEAD	= DATAORIGIN+$0002
  2614 = 1CE7			PLY.COLOUR	= DATAORIGIN+$0003
  2615 = 1CE8			PLY.DIR	= DATAORIGIN+$0004
  2616 = 1CE9			PLY.BRAIN	= DATAORIGIN+$0005
  2617 = 1CEA			PLY.SCORE	= DATAORIGIN+$0006
  2618 = 1CEB			PLY.ISALIVE	= DATAORIGIN+$0007
  2619 = 0060			adr.TMPPLY	= $60
  2620 1CCE			.var TMPPLY	= adr.TMPPLY .word
  2621 = 1CE4			TMPPLY.X	= DATAORIGIN+$0000
  2622 = 1CE5			TMPPLY.Y	= DATAORIGIN+$0001
  2623 = 1CE6			TMPPLY.HEAD	= DATAORIGIN+$0002
  2624 = 1CE7			TMPPLY.COLOUR	= DATAORIGIN+$0003
  2625 = 1CE8			TMPPLY.DIR	= DATAORIGIN+$0004
  2626 = 1CE9			TMPPLY.BRAIN	= DATAORIGIN+$0005
  2627 = 1CEA			TMPPLY.SCORE	= DATAORIGIN+$0006
  2628 = 1CEB			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  2629 = 1CF4			GAMEOVER	= DATAORIGIN+$0010
  2630 = 1CF5			adr.PLAYER1	= [DATAORIGIN+$0011] .array [6]
  2631 1CCE			.var PLAYER1	= adr.PLAYER1 .word
  2632 = 1CF5			PLAYER1.X	= DATAORIGIN+$0011
  2633 = 1CF6			PLAYER1.Y	= DATAORIGIN+$0012
  2634 = 1CF7			PLAYER1.HEAD	= DATAORIGIN+$0013
  2635 = 1CF8			PLAYER1.COLOUR	= DATAORIGIN+$0014
  2636 = 1CF9			PLAYER1.DIR	= DATAORIGIN+$0015
  2637 = 1CFA			PLAYER1.BRAIN	= DATAORIGIN+$0016
  2638 = 1CFB			PLAYER1.SCORE	= DATAORIGIN+$0017
  2639 = 1CFC			PLAYER1.ISALIVE	= DATAORIGIN+$0018
  2640 = 1CFD			adr.PLAYER2	= [DATAORIGIN+$0019] .array [6]
  2641 1CCE			.var PLAYER2	= adr.PLAYER2 .word
  2642 = 1CFD			PLAYER2.X	= DATAORIGIN+$0019
  2643 = 1CFE			PLAYER2.Y	= DATAORIGIN+$001A
  2644 = 1CFF			PLAYER2.HEAD	= DATAORIGIN+$001B
  2645 = 1D00			PLAYER2.COLOUR	= DATAORIGIN+$001C
  2646 = 1D01			PLAYER2.DIR	= DATAORIGIN+$001D
  2647 = 1D02			PLAYER2.BRAIN	= DATAORIGIN+$001E
  2648 = 1D03			PLAYER2.SCORE	= DATAORIGIN+$001F
  2649 = 1D04			PLAYER2.ISALIVE	= DATAORIGIN+$0020
  2650 = 1D05			adr.PLAYER3	= [DATAORIGIN+$0021] .array [6]
  2651 1CCE			.var PLAYER3	= adr.PLAYER3 .word
  2652 = 1D05			PLAYER3.X	= DATAORIGIN+$0021
  2653 = 1D06			PLAYER3.Y	= DATAORIGIN+$0022
  2654 = 1D07			PLAYER3.HEAD	= DATAORIGIN+$0023
  2655 = 1D08			PLAYER3.COLOUR	= DATAORIGIN+$0024
  2656 = 1D09			PLAYER3.DIR	= DATAORIGIN+$0025
  2657 = 1D0A			PLAYER3.BRAIN	= DATAORIGIN+$0026
  2658 = 1D0B			PLAYER3.SCORE	= DATAORIGIN+$0027
  2659 = 1D0C			PLAYER3.ISALIVE	= DATAORIGIN+$0028
  2660 = 1D0D			adr.PLAYER4	= [DATAORIGIN+$0029] .array [6]
  2661 1CCE			.var PLAYER4	= adr.PLAYER4 .word
  2662 = 1D0D			PLAYER4.X	= DATAORIGIN+$0029
  2663 = 1D0E			PLAYER4.Y	= DATAORIGIN+$002A
  2664 = 1D0F			PLAYER4.HEAD	= DATAORIGIN+$002B
  2665 = 1D10			PLAYER4.COLOUR	= DATAORIGIN+$002C
  2666 = 1D11			PLAYER4.DIR	= DATAORIGIN+$002D
  2667 = 1D12			PLAYER4.BRAIN	= DATAORIGIN+$002E
  2668 = 1D13			PLAYER4.SCORE	= DATAORIGIN+$002F
  2669 = 1D14			PLAYER4.ISALIVE	= DATAORIGIN+$0030
  2670 1CCE			@exit
  2671
  2672 1CCE A2 00		@halt	ldx #$00
  2673 1CD0 9A				txs
  2674
  2675 1CD1 60				rts
  2676
  2677 				; ------------------------------------------------------------
  2678
  2679 				; ------------------------------------------------------------
  2680
  2681 1CD2			.local	@DEFINES
  2682 1CD2			C4P
  2683 				.endl
  2684
  2685 1CD2			.local	@RESOURCE
  2686 				.endl
  2687
  2688 = 1CD2 0E 10		MUL40
  2688 = 1CD4 40 10		DIRECTION
  2688 = 1CD6 5E 00		PLY
  2688 = 1CD8 60 00		TMPPLY
  2688 = 1CDA F5 1C		PLAYER1
  2688 = 1CDC FD 1C		PLAYER2
  2688 = 1CDE 05 1D		PLAYER3
  2688 = 1CE0 0D 1D		PLAYER4
  2688 				.endl							; MAIN
  2689
  2690 				; ------------------------------------------------------------
  2691 				; ------------------------------------------------------------
  2692
  2693 				.macro	UNITINITIALIZATION
  2694 				
  2695 					.ifdef MAIN.SYSTEM.@UnitInit
  2696 					jsr MAIN.SYSTEM.@UnitInit
  2697 					eif
  2698 				.endm
  2699
  2700 				; ------------------------------------------------------------
  2701
  2702 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2703 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2703 				SYSTEM: $10D5..$1170
  2704 					eif
  2705
  2706 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2706 				CODE: $100E..$1CD1
  2707
  2708 				; ------------------------------------------------------------
  2709
  2710 1CE2				.align $04
  2711
  2712 1CE4			DATAORIGIN
  2713 1CE4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  2714
  2715 = 0006			VARINITSIZE	= *-DATAORIGIN
  2716 = 004B			VARDATASIZE	= 75
  2717
  2718 = 1D2F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2719
  2720 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2720 				DATA: $1CE4..$1D2F
  2721
  2722 				; ------------------------------------------------------------
  2723
  2724 				.macro	STATICDATA
  2725 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  2726 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  2727 				.by  $C0 $03 $01 $02 $04 $08
  2728 				.endm
  2729
  2730 					end
