mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E E5 19			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0045			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 19FE			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 BB			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 43 19 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 43 85 02 A9 1A + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 86 19			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 03 1A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 03 1A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 1A03			RESULT	= DATAORIGIN+$000B
   182
   183 = 1A03			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 1123 AD 04 1A		loop  lda n
   307 1126 0D 05 1A		  ora n+1
   308 1129 F0 14		  beq stop
   309
   310 112B A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 1131 AD 04 1A D0 03 CE +   dew n
   313
   314 113C 4C 23 11		  jmp loop
   315 113F			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 1A04			N	= DATAORIGIN+$000C
   321
   322 = 1A04			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 113F			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 113F 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1140			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1140 8D 06 1A			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 1143 AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 1146 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1149 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 114C 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 114F 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 1152 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 1155 A8			  tay
   350
   351 1156 AD 06 1A		  lda range
   352 1159 F0 08		  beq stop
   353
   354 115B 85 0C		  sta ecx
   355 115D 84 04		  sty eax
   356
   357 115F 20 A3 10		  jsr imulCL
   358 1162 A8			  tay
   359
   360 1163 8C 07 1A		stop  sty Result
   361
   362 1166			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 1166 E8				inx
   370 1167 AD 07 1A 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 1A06			RANGE	= DATAORIGIN+$000E
   383 = 1A07			RESULT	= DATAORIGIN+$000F
   384
   385 = 1A06			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 116C 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 19F8			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 19FA			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 19FC			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 116D			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 116D			.var HPALETTE	= adr.HPALETTE .word
   449 = 19FD			FILEMODE	= DATAORIGIN+$0005
   450 = 19FE			GRAPHMODE	= DATAORIGIN+$0006
   451 = 19FF			IORESULT	= DATAORIGIN+$0007
   452 = 1A00			EOLN	= DATAORIGIN+$0008
   453 = 1A01			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 116D C0 02		PALETTE
   455 = 116F 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 1171			.local	PUTCHAR						; PROCEDURE
   458
   459 				; optimize OK (tools.inc), line = 5
   460
   461 1171 AD 2C 1A			lda Y
   462 1174 0A				asl @
   463 1175 A8				tay
   464 1176 B9 0E 10			lda adr.MUL40,y
   465 1179 18 6D 2B 1A			add X
   466 117D 85 5B			sta T0W
   467 117F B9 0F 10			lda adr.MUL40+1,y
   468 1182 69 08			adc #$08
   469 1184 85 5C			sta T0W+1
   470
   471 				; optimize OK (tools.inc), line = 6
   472
   473 1186 85 11			sta :bp+1
   474 1188 A4 5B			ldy T0W
   475 118A AD 2E 1A			lda C
   476 118D 91 10			sta (:bp),y
   477 118F A5 5C			lda T0W+1
   478 1191 18 69 04			add #$04
   479 1194 85 11			sta :bp+1
   480 1196 AD 2D 1A			lda V
   481 1199 91 10			sta (:bp),y
   482
   483 				; ------------------------------------------------------------
   484
   485 = 1A2B			X	= DATAORIGIN+$0033
   486 = 1A2C			Y	= DATAORIGIN+$0034
   487 = 1A2D			V	= DATAORIGIN+$0035
   488 = 1A2E			C	= DATAORIGIN+$0036
   489
   490 = 1A2B			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 119B			@exit
   494 					.ifdef @new
   495 					lda <@VarData
   496 					sta :ztmp
   497 					lda >@VarData
   498 					ldy #@VarDataSize-1
   499 					jmp @FreeMem
   500 					els
   501 119B 60				rts						; ret
   502 					eif
   503 				.endl
   504
   505 119C			.local	SHOWSCORE					; PROCEDURE
   506
   507 				; optimize OK (tools.inc), line = 13
   508
   509 119C AD 0E 1A			lda PLAYER1.COLOUR
   510 119F 8D 2E 1A			sta PUTCHAR.C
   511 11A2 AD 11 1A			lda PLAYER1.SCORE
   512 11A5 8D 2D 1A			sta PUTCHAR.V
   513 11A8 A9 00			lda #$00
   514 11AA 8D 2C 1A			sta PUTCHAR.Y
   515 11AD A9 1E			lda #$1E
   516 11AF 8D 2B 1A			sta PUTCHAR.X
   517 11B2 20 71 11			jsr PUTCHAR
   518
   519 				; optimize OK (tools.inc), line = 14
   520
   521 11B5 AD 16 1A			lda PLAYER2.COLOUR
   522 11B8 8D 2E 1A			sta PUTCHAR.C
   523 11BB AD 19 1A			lda PLAYER2.SCORE
   524 11BE 8D 2D 1A			sta PUTCHAR.V
   525 11C1 A9 00			lda #$00
   526 11C3 8D 2C 1A			sta PUTCHAR.Y
   527 11C6 A9 20			lda #$20
   528 11C8 8D 2B 1A			sta PUTCHAR.X
   529 11CB 20 71 11			jsr PUTCHAR
   530
   531 				; optimize OK (tools.inc), line = 15
   532
   533 11CE AD 1E 1A			lda PLAYER3.COLOUR
   534 11D1 8D 2E 1A			sta PUTCHAR.C
   535 11D4 AD 21 1A			lda PLAYER3.SCORE
   536 11D7 8D 2D 1A			sta PUTCHAR.V
   537 11DA A9 00			lda #$00
   538 11DC 8D 2C 1A			sta PUTCHAR.Y
   539 11DF A9 22			lda #$22
   540 11E1 8D 2B 1A			sta PUTCHAR.X
   541 11E4 20 71 11			jsr PUTCHAR
   542
   543 				; optimize OK (tools.inc), line = 16
   544
   545 11E7 AD 26 1A			lda PLAYER4.COLOUR
   546 11EA 8D 2E 1A			sta PUTCHAR.C
   547 11ED AD 29 1A			lda PLAYER4.SCORE
   548 11F0 8D 2D 1A			sta PUTCHAR.V
   549 11F3 A9 00			lda #$00
   550 11F5 8D 2C 1A			sta PUTCHAR.Y
   551 11F8 A9 24			lda #$24
   552 11FA 8D 2B 1A			sta PUTCHAR.X
   553 11FD 20 71 11			jsr PUTCHAR
   554 1200			@exit
   555 					.ifdef @new
   556 					lda <@VarData
   557 					sta :ztmp
   558 					lda >@VarData
   559 					ldy #@VarDataSize-1
   560 					jmp @FreeMem
   561 					els
   562 1200 60				rts						; ret
   563 					eif
   564 				.endl
   565
   566 1201			.local	CHECKAVAILDIR					; PROCEDURE
   567
   568 				; optimize OK (tools.inc), line = 23
   569
   570 1201 A9 00			lda #$00
   571 1203 85 5A			sta AVAILDIR
   572
   573 				; optimize OK (tools.inc), line = 24
   574
   575 1205 AD 30 1A			lda Y
   576 1208 0A				asl @
   577 1209 A8				tay
   578 120A B9 0E 10			lda adr.MUL40,y
   579 120D 18 6D 2F 1A			add X
   580 1211 85 5B			sta T0W
   581 1213 B9 0F 10			lda adr.MUL40+1,y
   582 1216 69 0C			adc #$0C
   583 1218 85 5C			sta T0W+1
   584
   585 				; optimize OK (tools.inc), line = 26
   586
   587 121A A5 5B			lda T0W
   588 121C 38 E9 28			sub #$28
   589 121F 85 21			sta :STACKORIGIN+9
   590 1221 A5 5C			lda T0W+1
   591 1223 E9 00			sbc #$00
   592 1225 85 11			sta :bp+1
   593 1227 A4 21			ldy :STACKORIGIN+9
   594 1229 B1 10			lda (:bp),y
   595 122B C9 20			cmp #$20
   596 122D D0 06			jne l_00EE
   597 122F A5 5A			lda AVAILDIR
   598 1231 09 01			ora #$01
   599 1233 85 5A			sta AVAILDIR
   600 1235			l_00EE
   601
   602 				; optimize OK (tools.inc), line = 27
   603
   604 1235 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   605 123D A0 28			ldy #$28
   606 123F B1 12			lda (:bp2),y
   607 1241 C9 20			cmp #$20
   608 1243 D0 06			jne l_0111
   609 1245 A5 5A			lda AVAILDIR
   610 1247 09 02			ora #$02
   611 1249 85 5A			sta AVAILDIR
   612 124B			l_0111
   613
   614 				; optimize OK (tools.inc), line = 28
   615
   616 124B A5 5B			lda T0W
   617 124D 38 E9 01			sub #$01
   618 1250 85 21			sta :STACKORIGIN+9
   619 1252 A5 5C			lda T0W+1
   620 1254 E9 00			sbc #$00
   621 1256 85 11			sta :bp+1
   622 1258 A4 21			ldy :STACKORIGIN+9
   623 125A B1 10			lda (:bp),y
   624 125C C9 20			cmp #$20
   625 125E D0 06			jne l_0134
   626 1260 A5 5A			lda AVAILDIR
   627 1262 09 04			ora #$04
   628 1264 85 5A			sta AVAILDIR
   629 1266			l_0134
   630
   631 				; optimize OK (tools.inc), line = 29
   632
   633 1266 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   634 126E A0 01			ldy #$01
   635 1270 B1 12			lda (:bp2),y
   636 1272 C9 20			cmp #$20
   637 1274 D0 06			jne l_0157
   638 1276 A5 5A			lda AVAILDIR
   639 1278 09 08			ora #$08
   640 127A 85 5A			sta AVAILDIR
   641 127C			l_0157
   642
   643 				; ------------------------------------------------------------
   644
   645 = 1A2F			X	= DATAORIGIN+$0037
   646 = 1A30			Y	= DATAORIGIN+$0038
   647
   648 = 1A2F			@VarData	= X
   649 = 0002			@VarDataSize	= 2
   650
   651 127C			@exit
   652 					.ifdef @new
   653 					lda <@VarData
   654 					sta :ztmp
   655 					lda >@VarData
   656 					ldy #@VarDataSize-1
   657 					jmp @FreeMem
   658 					els
   659 127C 60				rts						; ret
   660 					eif
   661 				.endl
   662
   663 127D			.local	INITPLAYERS					; PROCEDURE
   664
   665 				; optimize OK (init.inc), line = 5
   666
   667 127D AD 31 1A			lda P
   668 1280 8D EC 19			sta PLY
   669 1283 85 12			sta :bp2
   670 1285 AD 32 1A			lda P+1
   671 1288 8D ED 19			sta PLY+1
   672 128B 85 13			sta :bp2+1
   673 				; optimize OK (init.inc), line = 6
   674 128D A0 05			ldy #PLY.BRAIN-DATAORIGIN
   675 128F AD 36 1A			lda BRAIN
   676 1292 91 12			sta (:bp2),y
   677 1294 A0 00			ldy #PLY.X-DATAORIGIN
   678 1296 AD 33 1A			lda X
   679 1299 91 12			sta (:bp2),y
   680 129B A0 01			ldy #PLY.Y-DATAORIGIN
   681 129D AD 34 1A			lda Y
   682 12A0 91 12			sta (:bp2),y
   683 12A2 A0 04			ldy #PLY.DIR-DATAORIGIN
   684 12A4 AD 35 1A			lda DIR
   685 12A7 91 12			sta (:bp2),y
   686
   687 				; optimize OK (init.inc), line = 7
   688
   689 12A9 A0 02			ldy #PLY.HEAD-DATAORIGIN
   690 12AB AD 37 1A			lda HEAD
   691 12AE 91 12			sta (:bp2),y
   692 12B0 A0 03			ldy #PLY.COLOUR-DATAORIGIN
   693 12B2 AD 38 1A			lda COLOUR
   694 12B5 91 12			sta (:bp2),y
   695 12B7 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
   696 12B9 AD 39 1A			lda ISDEAD
   697 12BC 91 12			sta (:bp2),y
   698
   699 				; ------------------------------------------------------------
   700
   701 = 1A31			P	= DATAORIGIN+$0039
   702 = 1A33			X	= DATAORIGIN+$003B
   703 = 1A34			Y	= DATAORIGIN+$003C
   704 = 1A35			DIR	= DATAORIGIN+$003D
   705 = 1A36			BRAIN	= DATAORIGIN+$003E
   706 = 1A37			HEAD	= DATAORIGIN+$003F
   707 = 1A38			COLOUR	= DATAORIGIN+$0040
   708 = 1A39			ISDEAD	= DATAORIGIN+$0041
   709
   710 = 1A31			@VarData	= P
   711 = 0009			@VarDataSize	= 9
   712
   713 12BE			@exit
   714 					.ifdef @new
   715 					lda <@VarData
   716 					sta :ztmp
   717 					lda >@VarData
   718 					ldy #@VarDataSize-1
   719 					jmp @FreeMem
   720 					els
   721 12BE 60				rts						; ret
   722 					eif
   723 				.endl
   724
   725 12BF			.local	INITPLAYFIELD					; PROCEDURE
   726
   727 				; optimize OK (init.inc), line = 14
   728
   729 12BF A9 00			lda #$00
   730 12C1 8D 39 1A			sta INITPLAYERS.ISDEAD
   731 12C4 A9 5F			lda #$5F
   732 12C6 8D 38 1A			sta INITPLAYERS.COLOUR
   733 12C9 A9 51			lda #$51
   734 12CB 8D 37 1A			sta INITPLAYERS.HEAD
   735 12CE A9 00			lda #$00
   736 12D0 8D 36 1A			sta INITPLAYERS.BRAIN
   737 12D3 A9 08			lda #$08
   738 12D5 8D 35 1A			sta INITPLAYERS.DIR
   739 12D8 A9 0C			lda #$0C
   740 12DA 8D 34 1A			sta INITPLAYERS.Y
   741 12DD A9 0A			lda #$0A
   742 12DF 8D 33 1A			sta INITPLAYERS.X
   743 12E2 AD EE 19			lda PLAYER1
   744 12E5 8D 31 1A			sta INITPLAYERS.P
   745 12E8 AD EF 19			lda PLAYER1+1
   746 12EB 8D 32 1A			sta INITPLAYERS.P+1
   747 12EE 20 7D 12			jsr INITPLAYERS
   748
   749 				; optimize OK (init.inc), line = 15
   750
   751 12F1 A9 00			lda #$00
   752 12F3 8D 39 1A			sta INITPLAYERS.ISDEAD
   753 12F6 A9 5D			lda #$5D
   754 12F8 8D 38 1A			sta INITPLAYERS.COLOUR
   755 12FB A9 51			lda #$51
   756 12FD 8D 37 1A			sta INITPLAYERS.HEAD
   757 1300 A9 02			lda #$02
   758 1302 8D 36 1A			sta INITPLAYERS.BRAIN
   759 1305 A9 04			lda #$04
   760 1307 8D 35 1A			sta INITPLAYERS.DIR
   761 130A A9 0C			lda #$0C
   762 130C 8D 34 1A			sta INITPLAYERS.Y
   763 130F A9 1E			lda #$1E
   764 1311 8D 33 1A			sta INITPLAYERS.X
   765 1314 AD F0 19			lda PLAYER2
   766 1317 8D 31 1A			sta INITPLAYERS.P
   767 131A AD F1 19			lda PLAYER2+1
   768 131D 8D 32 1A			sta INITPLAYERS.P+1
   769 1320 20 7D 12			jsr INITPLAYERS
   770
   771 				; optimize OK (init.inc), line = 16
   772
   773 1323 A9 01			lda #$01
   774 1325 8D 39 1A			sta INITPLAYERS.ISDEAD
   775 1328 A9 71			lda #$71
   776 132A 8D 38 1A			sta INITPLAYERS.COLOUR
   777 132D A9 51			lda #$51
   778 132F 8D 37 1A			sta INITPLAYERS.HEAD
   779 1332 A9 01			lda #$01
   780 1334 8D 36 1A			sta INITPLAYERS.BRAIN
   781 1337 A9 02			lda #$02
   782 1339 8D 35 1A			sta INITPLAYERS.DIR
   783 133C A9 06			lda #$06
   784 133E 8D 34 1A			sta INITPLAYERS.Y
   785 1341 A9 14			lda #$14
   786 1343 8D 33 1A			sta INITPLAYERS.X
   787 1346 AD F2 19			lda PLAYER3
   788 1349 8D 31 1A			sta INITPLAYERS.P
   789 134C AD F3 19			lda PLAYER3+1
   790 134F 8D 32 1A			sta INITPLAYERS.P+1
   791 1352 20 7D 12			jsr INITPLAYERS
   792
   793 				; optimize OK (init.inc), line = 17
   794
   795 1355 A9 01			lda #$01
   796 1357 8D 39 1A			sta INITPLAYERS.ISDEAD
   797 135A A9 55			lda #$55
   798 135C 8D 38 1A			sta INITPLAYERS.COLOUR
   799 135F A9 51			lda #$51
   800 1361 8D 37 1A			sta INITPLAYERS.HEAD
   801 1364 A9 03			lda #$03
   802 1366 8D 36 1A			sta INITPLAYERS.BRAIN
   803 1369 A9 01			lda #$01
   804 136B 8D 35 1A			sta INITPLAYERS.DIR
   805 136E A9 12			lda #$12
   806 1370 8D 34 1A			sta INITPLAYERS.Y
   807 1373 A9 14			lda #$14
   808 1375 8D 33 1A			sta INITPLAYERS.X
   809 1378 AD F4 19			lda PLAYER4
   810 137B 8D 31 1A			sta INITPLAYERS.P
   811 137E AD F5 19			lda PLAYER4+1
   812 1381 8D 32 1A			sta INITPLAYERS.P+1
   813 1384 20 7D 12			jsr INITPLAYERS
   814
   815 				; optimize OK (init.inc), line = 19
   816
   817 1387 A9 1F			lda #$1F
   818 1389 8D 15 FF			sta BORDERCOLOR
   819 138C A9 00			lda #$00
   820 138E 8D 19 FF			sta BGCOLOR
   821
   822 				; optimize OK (init.inc), line = 20
   823
   824 1391 A9 20			lda #$20
   825 1393 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   826 1395 A9 C0			lda #$C0
   827 1397 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   828 1399 A9 03			lda #$03
   829 139B 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   830 139D A9 00			lda #$00
   831 139F 85 08			sta SYSTEM.FILLCHAR_0056.A
   832 13A1 A9 0C			lda #$0C
   833 13A3 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   834 13A5 20 1F 11			jsr SYSTEM.FILLCHAR_0056
   835
   836 				; optimize OK (init.inc), line = 22
   837
   838 13A8 A9 27			lda #$27
   839 13AA 85 58			sta T0B
   840
   841 13AC			l_01D8
   842 				; --- ForToDoCondition
   843
   844 				; optimize OK (init.inc), line = 23
   845
   846 13AC A4 58			ldy T0B
   847 13AE A9 A0			lda #$A0
   848 13B0 99 00 0C			sta $0C00,y
   849
   850 				; optimize OK (init.inc), line = 24
   851
   852 13B3 99 C0 0F			sta $0FC0,y
   853
   854 				; optimize OK (init.inc), line = 25
   855
   856 13B6 A9 41			lda #$41
   857 13B8 99 00 08			sta $0800,y
   858
   859 				; optimize OK (init.inc), line = 26
   860
   861 13BB 99 C0 0B			sta $0BC0,y
   862
   863 				; --- ForToDoEpilog
   864 13BE C6 58			dec T0B
   865 13C0 10 EA			jpl l_01D8
   866 13C2			l_01E6
   867
   868 				; optimize OK (init.inc), line = 29
   869
   870 13C2 A9 18			lda #$18
   871 13C4 85 58			sta T0B
   872
   873 13C6			l_0218
   874 				; --- ForToDoCondition
   875 13C6 A5 58			lda T0B
   876 13C8 C9 01			cmp #$01
   877 13CA 90 3A			jcc l_0226
   878
   879 				; optimize OK (init.inc), line = 30
   880
   881 13CC 0A				asl @
   882 13CD A8				tay
   883 13CE A9 FF			lda #$FF
   884 13D0 18 79 0E 10			add adr.MUL40,y
   885 13D4 85 12			sta :bp2
   886 13D6 A9 0B			lda #$0B
   887 13D8 79 0F 10			adc adr.MUL40+1,y
   888 13DB 85 13			sta :bp2+1
   889 13DD A0 00			ldy #$00
   890 13DF A9 A0			lda #$A0
   891 13E1 91 12			sta (:bp2),y
   892 13E3 C8				iny
   893 13E4 91 12			sta (:bp2),y
   894
   895 				; optimize OK (init.inc), line = 31
   896
   897 13E6 A5 58			lda T0B
   898 13E8 0A				asl @
   899 13E9 A8				tay
   900 13EA A9 FF			lda #$FF
   901 13EC 18 79 0E 10			add adr.MUL40,y
   902 13F0 85 12			sta :bp2
   903 13F2 A9 07			lda #$07
   904 13F4 79 0F 10			adc adr.MUL40+1,y
   905 13F7 85 13			sta :bp2+1
   906 13F9 A0 00			ldy #$00
   907 13FB A9 41			lda #$41
   908 13FD 91 12			sta (:bp2),y
   909 13FF C8				iny
   910 1400 91 12			sta (:bp2),y
   911
   912 				; --- ForToDoEpilog
   913 1402 C6 58			dec T0B
   914 1404 10 C0			jpl l_0218
   915 1406			l_0226
   916
   917 				; optimize OK (init.inc), line = 34
   918
   919 1406 AD 0E 1A			lda PLAYER1.COLOUR
   920 1409 8D 2E 1A			sta PUTCHAR.C
   921 140C AD 0D 1A			lda PLAYER1.HEAD
   922 140F 8D 2D 1A			sta PUTCHAR.V
   923 1412 AD 0C 1A			lda PLAYER1.Y
   924 1415 8D 2C 1A			sta PUTCHAR.Y
   925 1418 AD 0B 1A			lda PLAYER1.X
   926 141B 8D 2B 1A			sta PUTCHAR.X
   927 141E 20 71 11			jsr PUTCHAR
   928
   929 				; optimize OK (init.inc), line = 35
   930
   931 1421 AD 16 1A			lda PLAYER2.COLOUR
   932 1424 8D 2E 1A			sta PUTCHAR.C
   933 1427 AD 15 1A			lda PLAYER2.HEAD
   934 142A 8D 2D 1A			sta PUTCHAR.V
   935 142D AD 14 1A			lda PLAYER2.Y
   936 1430 8D 2C 1A			sta PUTCHAR.Y
   937 1433 AD 13 1A			lda PLAYER2.X
   938 1436 8D 2B 1A			sta PUTCHAR.X
   939 1439 20 71 11			jsr PUTCHAR
   940
   941 				; optimize OK (init.inc), line = 36
   942
   943 143C AD 1E 1A			lda PLAYER3.COLOUR
   944 143F 8D 2E 1A			sta PUTCHAR.C
   945 1442 AD 1D 1A			lda PLAYER3.HEAD
   946 1445 8D 2D 1A			sta PUTCHAR.V
   947 1448 AD 1C 1A			lda PLAYER3.Y
   948 144B 8D 2C 1A			sta PUTCHAR.Y
   949 144E AD 1B 1A			lda PLAYER3.X
   950 1451 8D 2B 1A			sta PUTCHAR.X
   951 1454 20 71 11			jsr PUTCHAR
   952
   953 				; optimize OK (init.inc), line = 37
   954
   955 1457 AD 26 1A			lda PLAYER4.COLOUR
   956 145A 8D 2E 1A			sta PUTCHAR.C
   957 145D AD 25 1A			lda PLAYER4.HEAD
   958 1460 8D 2D 1A			sta PUTCHAR.V
   959 1463 AD 24 1A			lda PLAYER4.Y
   960 1466 8D 2C 1A			sta PUTCHAR.Y
   961 1469 AD 23 1A			lda PLAYER4.X
   962 146C 8D 2B 1A			sta PUTCHAR.X
   963 146F 20 71 11			jsr PUTCHAR
   964
   965 				; optimize OK (init.inc), line = 39
   966
   967 1472 A9 35			lda #$35
   968 1474 8D 2E 1A			sta PUTCHAR.C
   969 1477 A9 56			lda #$56
   970 1479 8D 2D 1A			sta PUTCHAR.V
   971 147C A9 06			lda #$06
   972 147E 8D 2C 1A			sta PUTCHAR.Y
   973 1481 A9 0A			lda #$0A
   974 1483 8D 2B 1A			sta PUTCHAR.X
   975 1486 20 71 11			jsr PUTCHAR
   976
   977 				; optimize OK (init.inc), line = 40
   978
   979 1489 A9 35			lda #$35
   980 148B 8D 2E 1A			sta PUTCHAR.C
   981 148E A9 56			lda #$56
   982 1490 8D 2D 1A			sta PUTCHAR.V
   983 1493 A9 06			lda #$06
   984 1495 8D 2C 1A			sta PUTCHAR.Y
   985 1498 A9 1E			lda #$1E
   986 149A 8D 2B 1A			sta PUTCHAR.X
   987 149D 20 71 11			jsr PUTCHAR
   988
   989 				; optimize OK (init.inc), line = 41
   990
   991 14A0 A9 35			lda #$35
   992 14A2 8D 2E 1A			sta PUTCHAR.C
   993 14A5 A9 56			lda #$56
   994 14A7 8D 2D 1A			sta PUTCHAR.V
   995 14AA A9 12			lda #$12
   996 14AC 8D 2C 1A			sta PUTCHAR.Y
   997 14AF A9 0A			lda #$0A
   998 14B1 8D 2B 1A			sta PUTCHAR.X
   999 14B4 20 71 11			jsr PUTCHAR
  1000
  1001 				; optimize OK (init.inc), line = 42
  1002
  1003 14B7 A9 35			lda #$35
  1004 14B9 8D 2E 1A			sta PUTCHAR.C
  1005 14BC A9 56			lda #$56
  1006 14BE 8D 2D 1A			sta PUTCHAR.V
  1007 14C1 A9 12			lda #$12
  1008 14C3 8D 2C 1A			sta PUTCHAR.Y
  1009 14C6 A9 1E			lda #$1E
  1010 14C8 8D 2B 1A			sta PUTCHAR.X
  1011 14CB 20 71 11			jsr PUTCHAR
  1012
  1013 				; optimize FAIL ('SHOWSCORE', init.inc), line = 44
  1014
  1015 14CE 20 9C 11			jsr SHOWSCORE
  1016
  1017 				; ------------------------------------------------------------
  1018
  1019 = 0000			@FORTMP_01D5	= $00
  1020 = 0001			@FORTMP_0215	= $01
  1021 14D1			@exit
  1022 					.ifdef @new
  1023 					lda <@VarData
  1024 					sta :ztmp
  1025 					lda >@VarData
  1026 					ldy #@VarDataSize-1
  1027 					jmp @FreeMem
  1028 					els
  1029 14D1 60				rts						; ret
  1030 					eif
  1031 				.endl
  1032
  1033 14D2			.local	AISTRAIGHT					; PROCEDURE
  1034
  1035 				; optimize OK (ai.inc), line = 5
  1036
  1037 14D2 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1038 14DC A0 04			ldy #PLY.DIR-DATAORIGIN
  1039 14DE B1 12			lda (:bp2),y
  1040 14E0 25 5A			and AVAILDIR
  1041 14E2 F0 07			jeq l_02A6
  1042 14E4 B1 12			lda (:bp2),y
  1043 14E6 85 59			sta NEWDIR
  1044 14E8 4C 62 15			jmp l_02B6
  1045 14EB			l_02A6
  1046
  1047 				; optimize OK (ai.inc), line = 7
  1048
  1049 14EB A5 5A			lda AVAILDIR
  1050 14ED C9 03			cmp #$03
  1051 14EF D0 16			jne l_02C8
  1052 14F1 A9 00			lda #$00
  1053 14F3 20 40 11			jsr SYSTEM.RANDOM_006C
  1054 14F6 B5 18			lda :STACKORIGIN,x
  1055 14F8 29 01			and #$01
  1056 14FA 95 18			sta :STACKORIGIN,x
  1057 14FC B4 18			ldy :STACKORIGIN,x
  1058 14FE B9 40 10			lda adr.DIRECTION,y
  1059 1501 85 59			sta NEWDIR
  1060 1503 CA				dex
  1061 1504 4C 1F 15			jmp l_02DE
  1062 1507			l_02C8
  1063
  1064 				; optimize OK (ai.inc), line = 9
  1065
  1066 1507 A5 5A			lda AVAILDIR
  1067 1509 8D 3A 1A			sta @CASETMP_0003
  1068 150C C9 01			cmp #$01
  1069 150E D0 07			jne l_02E9
  1070 1510			@
  1071
  1072 				; optimize OK (ai.inc), line = 10
  1073
  1074 1510 A9 01			lda #$01
  1075 1512 85 59			sta NEWDIR
  1076
  1077 1514 4C 1F 15			jmp a_0003
  1078 1517			l_02E9
  1079 1517 C9 02			cmp #$02
  1080 1519 D0 04			jne l_02F6
  1081 151B			@
  1082
  1083 				; optimize OK (ai.inc), line = 11
  1084
  1085 151B A9 02			lda #$02
  1086 151D 85 59			sta NEWDIR
  1087
  1088 151F			l_02F6
  1089 151F			a_0003
  1090 151F			l_02DE
  1091
  1092 				; optimize OK (ai.inc), line = 14
  1093
  1094 151F A5 5A			lda AVAILDIR
  1095 1521 C9 0C			cmp #$0C
  1096 1523 D0 25			jne l_0312
  1097 1525 A9 00			lda #$00
  1098 1527 20 40 11			jsr SYSTEM.RANDOM_006C
  1099 152A B5 18			lda :STACKORIGIN,x
  1100 152C 29 01			and #$01
  1101 152E 95 18			sta :STACKORIGIN,x
  1102 1530 E8				inx
  1103 1531 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1104 1535 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1105 1539 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1106 153B 20 44 10			jsr addAX_CX
  1107 153E CA				dex
  1108 153F B4 18			ldy :STACKORIGIN,x
  1109 1541 B9 40 10			lda adr.DIRECTION,y
  1110 1544 85 59			sta NEWDIR
  1111 1546 CA				dex
  1112 1547 4C 62 15			jmp l_032C
  1113 154A			l_0312
  1114
  1115 				; optimize OK (ai.inc), line = 16
  1116
  1117 154A A5 5A			lda AVAILDIR
  1118 154C 8D 3B 1A			sta @CASETMP_0004
  1119 154F C9 04			cmp #$04
  1120 1551 D0 07			jne l_0337
  1121 1553			@
  1122
  1123 				; optimize OK (ai.inc), line = 17
  1124
  1125 1553 A9 04			lda #$04
  1126 1555 85 59			sta NEWDIR
  1127
  1128 1557 4C 62 15			jmp a_0004
  1129 155A			l_0337
  1130 155A C9 08			cmp #$08
  1131 155C D0 04			jne l_0344
  1132 155E			@
  1133
  1134 				; optimize OK (ai.inc), line = 18
  1135
  1136 155E A9 08			lda #$08
  1137 1560 85 59			sta NEWDIR
  1138
  1139 1562			l_0344
  1140 1562			a_0004
  1141 1562			l_032C
  1142 1562			l_02B6
  1143
  1144 				; ------------------------------------------------------------
  1145
  1146 = 1A3A			@CASETMP_0003	= DATAORIGIN+$0042
  1147 = 1A3B			@CASETMP_0004	= DATAORIGIN+$0043
  1148
  1149 = 1A3A			@VarData	= @CASETMP_0003
  1150 = 0002			@VarDataSize	= 2
  1151
  1152 1562			@exit
  1153 					.ifdef @new
  1154 					lda <@VarData
  1155 					sta :ztmp
  1156 					lda >@VarData
  1157 					ldy #@VarDataSize-1
  1158 					jmp @FreeMem
  1159 					els
  1160 1562 60				rts						; ret
  1161 					eif
  1162 				.endl
  1163
  1164 1563			.local	AIMIRROR					; PROCEDURE
  1165
  1166 				; optimize OK (ai.inc), line = 28
  1167
  1168 1563 AD 0F 1A			lda PLAYER1.DIR
  1169 1566 8D 3C 1A			sta @CASETMP_0005
  1170 1569 C9 01			cmp #$01
  1171 156B D0 07			jne l_035D
  1172 156D			@
  1173
  1174 				; optimize OK (ai.inc), line = 29
  1175
  1176 156D A9 02			lda #$02
  1177 156F 85 58			sta T0B
  1178
  1179 1571 4C 92 15			jmp a_0005
  1180 1574			l_035D
  1181 1574 C9 02			cmp #$02
  1182 1576 D0 07			jne l_036A
  1183 1578			@
  1184
  1185 				; optimize OK (ai.inc), line = 30
  1186
  1187 1578 A9 01			lda #$01
  1188 157A 85 58			sta T0B
  1189
  1190 157C 4C 92 15			jmp a_0005
  1191 157F			l_036A
  1192 157F C9 04			cmp #$04
  1193 1581 D0 07			jne l_0377
  1194 1583			@
  1195
  1196 				; optimize OK (ai.inc), line = 31
  1197
  1198 1583 A9 08			lda #$08
  1199 1585 85 58			sta T0B
  1200
  1201 1587 4C 92 15			jmp a_0005
  1202 158A			l_0377
  1203 158A C9 08			cmp #$08
  1204 158C D0 04			jne l_0384
  1205 158E			@
  1206
  1207 				; optimize OK (ai.inc), line = 32
  1208
  1209 158E A9 04			lda #$04
  1210 1590 85 58			sta T0B
  1211
  1212 1592			l_0384
  1213 1592			a_0005
  1214
  1215 				; optimize OK (ai.inc), line = 35
  1216
  1217 1592 A5 5A			lda AVAILDIR
  1218 1594 25 58			and T0B
  1219 1596 F0 07			jeq l_03A8
  1220 1598 A5 58			lda T0B
  1221 159A 85 59			sta NEWDIR
  1222 159C 4C A2 15			jmp l_03B8
  1223 159F			l_03A8
  1224
  1225 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 36
  1226
  1227 159F 20 D2 14			jsr AISTRAIGHT
  1228 15A2			l_03B8
  1229
  1230 				; ------------------------------------------------------------
  1231
  1232 = 1A3C			@CASETMP_0005	= DATAORIGIN+$0044
  1233
  1234 = 1A3C			@VarData	= @CASETMP_0005
  1235 = 0001			@VarDataSize	= 1
  1236
  1237 15A2			@exit
  1238 					.ifdef @new
  1239 					lda <@VarData
  1240 					sta :ztmp
  1241 					lda >@VarData
  1242 					ldy #@VarDataSize-1
  1243 					jmp @FreeMem
  1244 					els
  1245 15A2 60				rts						; ret
  1246 					eif
  1247 				.endl
  1248
  1249 15A3			.local	AIRANDOM					; PROCEDURE
  1250
  1251 				; optimize OK (ai.inc), line = 43
  1252
  1253 15A3 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1254 15AD A0 04			ldy #PLY.DIR-DATAORIGIN
  1255 15AF B1 12			lda (:bp2),y
  1256 15B1 85 58			sta T0B
  1257
  1258 				; optimize OK (ai.inc), line = 44
  1259
  1260 15B3 A9 00			lda #$00
  1261 15B5 20 40 11			jsr SYSTEM.RANDOM_006C
  1262 15B8 CA				dex
  1263 15B9 B5 19			lda :STACKORIGIN+1,x
  1264 15BB 29 03			and #$03
  1265 15BD D0 0D			jne l_03D8
  1266 15BF			@
  1267 15BF A9 04			lda #$04
  1268 15C1 20 40 11			jsr SYSTEM.RANDOM_006C
  1269 15C4 B4 18			ldy :STACKORIGIN,x
  1270 15C6 B9 40 10			lda adr.DIRECTION,y
  1271 15C9 85 58			sta T0B
  1272 15CB CA				dex
  1273 15CC			l_03D8
  1274
  1275 				; optimize OK (ai.inc), line = 46
  1276
  1277 15CC A5 5A			lda AVAILDIR
  1278 15CE 25 58			and T0B
  1279 15D0 F0 07			jeq l_03FB
  1280 15D2 A5 58			lda T0B
  1281 15D4 85 59			sta NEWDIR
  1282 15D6 4C DC 15			jmp l_040B
  1283 15D9			l_03FB
  1284
  1285 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 47
  1286
  1287 15D9 20 D2 14			jsr AISTRAIGHT
  1288 15DC			l_040B
  1289 15DC			@exit
  1290 					.ifdef @new
  1291 					lda <@VarData
  1292 					sta :ztmp
  1293 					lda >@VarData
  1294 					ldy #@VarDataSize-1
  1295 					jmp @FreeMem
  1296 					els
  1297 15DC 60				rts						; ret
  1298 					eif
  1299 				.endl
  1300
  1301 15DD			.local	AIMAD						; PROCEDURE
  1302
  1303 				; optimize OK (ai.inc), line = 54
  1304
  1305 15DD A9 03			lda #$03
  1306 15DF 20 40 11			jsr SYSTEM.RANDOM_006C
  1307 15E2 B5 18			lda :STACKORIGIN,x
  1308 15E4 18 69 01			add #$01
  1309 15E7 85 58			sta T0B
  1310 15E9 CA				dex
  1311
  1312 				; optimize OK (ai.inc), line = 55
  1313
  1314 15EA A5 58			lda T0B
  1315 15EC 8D 3D 1A			sta @CASETMP_0006
  1316 15EF C9 01			cmp #$01
  1317 15F1 D0 06			jne l_0424
  1318 15F3			@
  1319
  1320 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 56
  1321
  1322 15F3 20 D2 14			jsr AISTRAIGHT
  1323 15F6 4C 0A 16			jmp a_0006
  1324 15F9			l_0424
  1325 15F9 C9 02			cmp #$02
  1326 15FB D0 06			jne l_042E
  1327 15FD			@
  1328
  1329 				; optimize FAIL ('AIMIRROR', ai.inc), line = 57
  1330
  1331 15FD 20 63 15			jsr AIMIRROR
  1332 1600 4C 0A 16			jmp a_0006
  1333 1603			l_042E
  1334 1603 C9 03			cmp #$03
  1335 1605 D0 03			jne l_0438
  1336 1607			@
  1337
  1338 				; optimize FAIL ('AIRANDOM', ai.inc), line = 58
  1339
  1340 1607 20 A3 15			jsr AIRANDOM
  1341 160A			l_0438
  1342 160A			a_0006
  1343
  1344 				; ------------------------------------------------------------
  1345
  1346 = 1A3D			@CASETMP_0006	= DATAORIGIN+$0045
  1347
  1348 = 1A3D			@VarData	= @CASETMP_0006
  1349 = 0001			@VarDataSize	= 1
  1350
  1351 160A			@exit
  1352 					.ifdef @new
  1353 					lda <@VarData
  1354 					sta :ztmp
  1355 					lda >@VarData
  1356 					ldy #@VarDataSize-1
  1357 					jmp @FreeMem
  1358 					els
  1359 160A 60				rts						; ret
  1360 					eif
  1361 				.endl
  1362
  1363 160B			.local	HUMAN						; PROCEDURE
  1364
  1365 				; optimize OK (main.pas), line = 14
  1366
  1367 160B AC EC 19 84 12 AC + 	mwy PLY :bp2
  1368 1615 A0 04			ldy #PLY.DIR-DATAORIGIN
  1369 1617 B1 12			lda (:bp2),y
  1370 1619 85 59			sta NEWDIR
  1371
  1372 				; optimize OK (main.pas), line = 15
  1373
  1374 161B A9 02			lda #$02
  1375 161D 8D 08 FF			sta JOY
  1376 1620 A9 FF			lda #$FF
  1377 1622 8D 30 FD			sta KEY_PIO
  1378 1625 AD 08 FF			lda JOY
  1379 1628 49 FF			eor #$FF
  1380 162A 85 58			sta T0B
  1381
  1382 				; optimize OK (main.pas), line = 17
  1383
  1384 162C 8D 3E 1A			sta @CASETMP_0007
  1385 162F C9 01			cmp #$01
  1386 1631 D0 19			jne l_0467
  1387 1633			@
  1388
  1389 				; optimize OK (main.pas), line = 18
  1390
  1391 1633 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1392 163D A0 04			ldy #PLY.DIR-DATAORIGIN
  1393 163F B1 12			lda (:bp2),y
  1394 1641 C9 02			cmp #$02
  1395 1643 F0 04			jeq l_0479
  1396 1645 A9 01			lda #$01
  1397 1647 85 59			sta NEWDIR
  1398 1649			l_0479
  1399
  1400 1649 4C A0 16			jmp a_0007
  1401 164C			l_0467
  1402 164C C9 02			cmp #$02
  1403 164E D0 19			jne l_0489
  1404 1650			@
  1405
  1406 				; optimize OK (main.pas), line = 19
  1407
  1408 1650 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1409 165A A0 04			ldy #PLY.DIR-DATAORIGIN
  1410 165C B1 12			lda (:bp2),y
  1411 165E C9 01			cmp #$01
  1412 1660 F0 04			jeq l_049B
  1413 1662 A9 02			lda #$02
  1414 1664 85 59			sta NEWDIR
  1415 1666			l_049B
  1416
  1417 1666 4C A0 16			jmp a_0007
  1418 1669			l_0489
  1419 1669 C9 04			cmp #$04
  1420 166B D0 19			jne l_04AB
  1421 166D			@
  1422
  1423 				; optimize OK (main.pas), line = 20
  1424
  1425 166D AC EC 19 84 12 AC + 	mwy PLY :bp2
  1426 1677 A0 04			ldy #PLY.DIR-DATAORIGIN
  1427 1679 B1 12			lda (:bp2),y
  1428 167B C9 08			cmp #$08
  1429 167D F0 04			jeq l_04BD
  1430 167F A9 04			lda #$04
  1431 1681 85 59			sta NEWDIR
  1432 1683			l_04BD
  1433
  1434 1683 4C A0 16			jmp a_0007
  1435 1686			l_04AB
  1436 1686 C9 08			cmp #$08
  1437 1688 D0 16			jne l_04CD
  1438 168A			@
  1439
  1440 				; optimize OK (main.pas), line = 21
  1441
  1442 168A AC EC 19 84 12 AC + 	mwy PLY :bp2
  1443 1694 A0 04			ldy #PLY.DIR-DATAORIGIN
  1444 1696 B1 12			lda (:bp2),y
  1445 1698 C9 04			cmp #$04
  1446 169A F0 04			jeq l_04DF
  1447 169C A9 08			lda #$08
  1448 169E 85 59			sta NEWDIR
  1449 16A0			l_04DF
  1450
  1451 16A0			l_04CD
  1452 16A0			a_0007
  1453
  1454 				; optimize OK (main.pas), line = 24
  1455
  1456 16A0 A5 59			lda NEWDIR
  1457 16A2 25 5A			and AVAILDIR
  1458 16A4 D0 19			jne l_0506
  1459
  1460 				; optimize OK (main.pas), line = 25
  1461
  1462 16A6 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1463 16B0 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1464 16B2 A9 01			lda #$01
  1465 16B4 91 12			sta (:bp2),y
  1466 16B6 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1467 16B8 A9 2A			lda #$2A
  1468 16BA 91 12			sta (:bp2),y
  1469 16BC CE 08 1A			dec ALIVE
  1470 16BF			l_0506
  1471
  1472 				; ------------------------------------------------------------
  1473
  1474 = 1A3E			@CASETMP_0007	= DATAORIGIN+$0046
  1475
  1476 = 1A3E			@VarData	= @CASETMP_0007
  1477 = 0001			@VarDataSize	= 1
  1478
  1479 16BF			@exit
  1480 					.ifdef @new
  1481 					lda <@VarData
  1482 					sta :ztmp
  1483 					lda >@VarData
  1484 					ldy #@VarDataSize-1
  1485 					jmp @FreeMem
  1486 					els
  1487 16BF 60				rts						; ret
  1488 					eif
  1489 				.endl
  1490
  1491 16C0			.local	PLAYERMOVE					; PROCEDURE
  1492
  1493 				; optimize OK (main.pas), line = 33
  1494
  1495 16C0 AD 3F 1A			lda P
  1496 16C3 8D EC 19			sta PLY
  1497 16C6 85 12			sta :bp2
  1498 16C8 AD 40 1A			lda P+1
  1499 16CB 8D ED 19			sta PLY+1
  1500 16CE 85 13			sta :bp2+1
  1501 				; optimize OK (main.pas), line = 35
  1502 16D0 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1503 16D2 B1 12			lda (:bp2),y
  1504 16D4 F0 03 4C C4 18		jne l_052D
  1505
  1506 				; optimize OK (main.pas), line = 37
  1507
  1508 16D9 A0 00			ldy #PLY.X-DATAORIGIN
  1509 16DB B1 12			lda (:bp2),y
  1510 16DD 8D 2F 1A			sta CHECKAVAILDIR.X
  1511 16E0 A0 01			ldy #PLY.Y-DATAORIGIN
  1512 16E2 B1 12			lda (:bp2),y
  1513 16E4 8D 30 1A			sta CHECKAVAILDIR.Y
  1514 16E7 20 01 12			jsr CHECKAVAILDIR
  1515
  1516 				; optimize OK (main.pas), line = 39
  1517
  1518 16EA A5 5A			lda AVAILDIR
  1519 16EC D0 36			jne l_0547
  1520
  1521 				; optimize OK (main.pas), line = 40
  1522
  1523 16EE AC EC 19 84 12 AC + 	mwy PLY :bp2
  1524 16F8 A0 07			ldy #PLY.ISDEAD-DATAORIGIN
  1525 16FA A9 01			lda #$01
  1526 16FC 91 12			sta (:bp2),y
  1527 16FE CE 08 1A			dec ALIVE
  1528
  1529 				; optimize OK (main.pas), line = 41
  1530
  1531 1701 A0 00			ldy #PLY.X-DATAORIGIN
  1532 1703 B1 12			lda (:bp2),y
  1533 1705 8D 2B 1A			sta PUTCHAR.X
  1534 1708 A0 01			ldy #PLY.Y-DATAORIGIN
  1535 170A B1 12			lda (:bp2),y
  1536 170C 8D 2C 1A			sta PUTCHAR.Y
  1537 170F A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1538 1711 B1 12			lda (:bp2),y
  1539 1713 18 69 80			add #$80
  1540 1716 8D 2E 1A			sta PUTCHAR.C
  1541 1719 A9 57			lda #$57
  1542 171B 8D 2D 1A			sta PUTCHAR.V
  1543 171E 20 71 11			jsr PUTCHAR
  1544 1721 4C C4 18			jmp l_0568
  1545 1724			l_0547
  1546
  1547 				; optimize OK (main.pas), line = 44
  1548
  1549 1724 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1550 172E A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1551 1730 B1 12			lda (:bp2),y
  1552 1732 8D 41 1A			sta @CASETMP_0008
  1553 1735 C9 00			cmp #$00
  1554 1737 D0 06			jne l_0573
  1555 1739			@
  1556
  1557 				; optimize FAIL ('HUMAN', main.pas), line = 45
  1558
  1559 1739 20 0B 16			jsr HUMAN
  1560 173C 4C 64 17			jmp a_0008
  1561 173F			l_0573
  1562 173F C9 01			cmp #$01
  1563 1741 D0 06			jne l_057D
  1564 1743			@
  1565
  1566 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 46
  1567
  1568 1743 20 D2 14			jsr AISTRAIGHT
  1569 1746 4C 64 17			jmp a_0008
  1570 1749			l_057D
  1571 1749 C9 02			cmp #$02
  1572 174B D0 06			jne l_0587
  1573 174D			@
  1574
  1575 				; optimize FAIL ('AIMIRROR', main.pas), line = 47
  1576
  1577 174D 20 63 15			jsr AIMIRROR
  1578 1750 4C 64 17			jmp a_0008
  1579 1753			l_0587
  1580 1753 C9 03			cmp #$03
  1581 1755 D0 06			jne l_0591
  1582 1757			@
  1583
  1584 				; optimize FAIL ('AIRANDOM', main.pas), line = 48
  1585
  1586 1757 20 A3 15			jsr AIRANDOM
  1587 175A 4C 64 17			jmp a_0008
  1588 175D			l_0591
  1589 175D C9 07			cmp #$07
  1590 175F D0 03			jne l_059B
  1591 1761			@
  1592
  1593 				; optimize FAIL ('AIMAD', main.pas), line = 49
  1594
  1595 1761 20 DD 15			jsr AIMAD
  1596 1764			l_059B
  1597 1764			a_0008
  1598
  1599 				; optimize OK (main.pas), line = 52
  1600
  1601 1764 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1602 176E A0 04			ldy #PLY.DIR-DATAORIGIN
  1603 1770 B1 12			lda (:bp2),y
  1604 1772 C5 59			cmp NEWDIR
  1605 1774 D0 14			jne l_05B9
  1606
  1607 				; optimize OK (main.pas), line = 53
  1608
  1609 1776 A5 59			lda NEWDIR
  1610 1778 29 0C			and #$0C
  1611 177A F0 07			jeq l_05D0
  1612 177C A9 40			lda #$40
  1613 177E 85 58			sta T0B
  1614 1780 4C 87 17			jmp l_05DE
  1615 1783			l_05D0
  1616 1783 A9 42			lda #$42
  1617 1785 85 58			sta T0B
  1618 1787			l_05DE
  1619 1787 4C FA 17			jmp l_05EB
  1620 178A			l_05B9
  1621
  1622 				; optimize OK (main.pas), line = 55
  1623
  1624 178A AC EC 19 84 12 AC + 	mwy PLY :bp2
  1625 1794 A0 04			ldy #PLY.DIR-DATAORIGIN
  1626 1796 B1 12			lda (:bp2),y
  1627 1798 29 0A			and #$0A
  1628 179A F0 0A			jeq l_0611
  1629 179C A5 59			lda NEWDIR
  1630 179E 29 05			and #$05
  1631 17A0 F0 04			jeq l_0611
  1632 17A2 A9 7D			lda #$7D
  1633 17A4 85 58			sta T0B
  1634 17A6			l_0611
  1635
  1636 				; optimize OK (main.pas), line = 56
  1637
  1638 17A6 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1639 17B0 A0 04			ldy #PLY.DIR-DATAORIGIN
  1640 17B2 B1 12			lda (:bp2),y
  1641 17B4 29 09			and #$09
  1642 17B6 F0 0A			jeq l_063E
  1643 17B8 A5 59			lda NEWDIR
  1644 17BA 29 06			and #$06
  1645 17BC F0 04			jeq l_063E
  1646 17BE A9 6E			lda #$6E
  1647 17C0 85 58			sta T0B
  1648 17C2			l_063E
  1649
  1650 				; optimize OK (main.pas), line = 57
  1651
  1652 17C2 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1653 17CC A0 04			ldy #PLY.DIR-DATAORIGIN
  1654 17CE B1 12			lda (:bp2),y
  1655 17D0 29 06			and #$06
  1656 17D2 F0 0A			jeq l_066B
  1657 17D4 A5 59			lda NEWDIR
  1658 17D6 29 09			and #$09
  1659 17D8 F0 04			jeq l_066B
  1660 17DA A9 6D			lda #$6D
  1661 17DC 85 58			sta T0B
  1662 17DE			l_066B
  1663
  1664 				; optimize OK (main.pas), line = 58
  1665
  1666 17DE AC EC 19 84 12 AC + 	mwy PLY :bp2
  1667 17E8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1668 17EA B1 12			lda (:bp2),y
  1669 17EC 29 05			and #$05
  1670 17EE F0 0A			jeq l_0698
  1671 17F0 A5 59			lda NEWDIR
  1672 17F2 29 0A			and #$0A
  1673 17F4 F0 04			jeq l_0698
  1674 17F6 A9 70			lda #$70
  1675 17F8 85 58			sta T0B
  1676 17FA			l_0698
  1677 17FA			l_05EB
  1678
  1679 				; optimize OK (main.pas), line = 60
  1680
  1681 17FA AC EC 19 84 12 AC + 	mwy PLY :bp2
  1682 1804 A0 00			ldy #PLY.X-DATAORIGIN
  1683 1806 B1 12			lda (:bp2),y
  1684 1808 8D 2B 1A			sta PUTCHAR.X
  1685 180B A0 01			ldy #PLY.Y-DATAORIGIN
  1686 180D B1 12			lda (:bp2),y
  1687 180F 8D 2C 1A			sta PUTCHAR.Y
  1688 1812 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1689 1814 B1 12			lda (:bp2),y
  1690 1816 8D 2E 1A			sta PUTCHAR.C
  1691 1819 A5 58			lda T0B
  1692 181B 8D 2D 1A			sta PUTCHAR.V
  1693 181E 20 71 11			jsr PUTCHAR
  1694
  1695 				; optimize OK (main.pas), line = 62
  1696
  1697 1821 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1698 182B A0 04			ldy #PLY.DIR-DATAORIGIN
  1699 182D A5 59			lda NEWDIR
  1700 182F 91 12			sta (:bp2),y
  1701
  1702 				; optimize OK (main.pas), line = 64
  1703
  1704 1831 A5 59			lda NEWDIR
  1705 1833 8D 42 1A			sta @CASETMP_0009
  1706 1836 C9 01			cmp #$01
  1707 1838 D0 16			jne l_06BD
  1708 183A			@
  1709
  1710 				; optimize OK (main.pas), line = 65
  1711
  1712 183A AC EC 19 84 12 AC + 	mwy PLY :bp2
  1713 1844 A0 01			ldy #PLY.Y-DATAORIGIN
  1714 1846 B1 12			lda (:bp2),y
  1715 1848 38 E9 01			sub #$01
  1716 184B 91 12			sta (:bp2),y
  1717
  1718 184D 4C 9B 18			jmp a_0009
  1719 1850			l_06BD
  1720 1850 C9 02			cmp #$02
  1721 1852 D0 16			jne l_06C7
  1722 1854			@
  1723
  1724 				; optimize OK (main.pas), line = 66
  1725
  1726 1854 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1727 185E A0 01			ldy #PLY.Y-DATAORIGIN
  1728 1860 B1 12			lda (:bp2),y
  1729 1862 18 69 01			add #$01
  1730 1865 91 12			sta (:bp2),y
  1731
  1732 1867 4C 9B 18			jmp a_0009
  1733 186A			l_06C7
  1734 186A C9 04			cmp #$04
  1735 186C D0 16			jne l_06D1
  1736 186E			@
  1737
  1738 				; optimize OK (main.pas), line = 67
  1739
  1740 186E AC EC 19 84 12 AC + 	mwy PLY :bp2
  1741 1878 A0 00			ldy #PLY.X-DATAORIGIN
  1742 187A B1 12			lda (:bp2),y
  1743 187C 38 E9 01			sub #$01
  1744 187F 91 12			sta (:bp2),y
  1745
  1746 1881 4C 9B 18			jmp a_0009
  1747 1884			l_06D1
  1748 1884 C9 08			cmp #$08
  1749 1886 D0 13			jne l_06DB
  1750 1888			@
  1751
  1752 				; optimize OK (main.pas), line = 68
  1753
  1754 1888 AC EC 19 84 12 AC + 	mwy PLY :bp2
  1755 1892 A0 00			ldy #PLY.X-DATAORIGIN
  1756 1894 B1 12			lda (:bp2),y
  1757 1896 18 69 01			add #$01
  1758 1899 91 12			sta (:bp2),y
  1759
  1760 189B			l_06DB
  1761 189B			a_0009
  1762
  1763 				; optimize OK (main.pas), line = 71
  1764
  1765 189B AC EC 19 84 12 AC + 	mwy PLY :bp2
  1766 18A5 A0 00			ldy #PLY.X-DATAORIGIN
  1767 18A7 B1 12			lda (:bp2),y
  1768 18A9 8D 2B 1A			sta PUTCHAR.X
  1769 18AC A0 01			ldy #PLY.Y-DATAORIGIN
  1770 18AE B1 12			lda (:bp2),y
  1771 18B0 8D 2C 1A			sta PUTCHAR.Y
  1772 18B3 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1773 18B5 B1 12			lda (:bp2),y
  1774 18B7 8D 2D 1A			sta PUTCHAR.V
  1775 18BA A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1776 18BC B1 12			lda (:bp2),y
  1777 18BE 8D 2E 1A			sta PUTCHAR.C
  1778 18C1 20 71 11			jsr PUTCHAR
  1779 18C4			l_0568
  1780 18C4			l_052D
  1781
  1782 				; ------------------------------------------------------------
  1783
  1784 = 1A3F			P	= DATAORIGIN+$0047
  1785 = 1A41			@CASETMP_0008	= DATAORIGIN+$0049
  1786 = 1A42			@CASETMP_0009	= DATAORIGIN+$004A
  1787
  1788 = 1A3F			@VarData	= P
  1789 = 0004			@VarDataSize	= 4
  1790
  1791 18C4			@exit
  1792 					.ifdef @new
  1793 					lda <@VarData
  1794 					sta :ztmp
  1795 					lda >@VarData
  1796 					ldy #@VarDataSize-1
  1797 					jmp @FreeMem
  1798 					els
  1799 18C4 60				rts						; ret
  1800 					eif
  1801 				.endl
  1802
  1803 18C5			.local	STARTSCREEN					; PROCEDURE
  1804
  1805 				; --- RepeatUntilProlog
  1806 18C5			l_06F8
  1807
  1808 				; optimize OK (main.pas), line = 83
  1809
  1810 18C5 A9 02			lda #$02
  1811 18C7 8D 08 FF			sta JOY
  1812 18CA A9 FF			lda #$FF
  1813 18CC 8D 30 FD			sta KEY_PIO
  1814 18CF AD 08 FF			lda JOY
  1815 18D2 49 FF			eor #$FF
  1816 18D4 85 58			sta T0B
  1817
  1818 				; optimize OK (main.pas), line = 84
  1819
  1820 18D6 C9 40			cmp #$40
  1821 18D8 D0 EB			jne l_06F8
  1822 18DA			@exit
  1823 					.ifdef @new
  1824 					lda <@VarData
  1825 					sta :ztmp
  1826 					lda >@VarData
  1827 					ldy #@VarDataSize-1
  1828 					jmp @FreeMem
  1829 					els
  1830 18DA 60				rts						; ret
  1831 					eif
  1832 				.endl
  1833
  1834 18DB			.local	MAINLOOP					; PROCEDURE
  1835
  1836 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 91
  1837
  1838 18DB 20 BF 12			jsr INITPLAYFIELD
  1839
  1840 				; optimize FAIL ('STARTSCREEN', main.pas), line = 92
  1841
  1842 18DE 20 C5 18			jsr STARTSCREEN
  1843
  1844 				; optimize OK (main.pas), line = 94
  1845
  1846 18E1 A9 FF			lda #$FF
  1847 18E3 8D 08 1A			sta ALIVE
  1848
  1849 				; optimize OK (main.pas), line = 95
  1850
  1851 18E6 AD 12 1A			lda PLAYER1.ISDEAD
  1852 18E9 D0 03			jne l_0730
  1853 18EB EE 08 1A			inc ALIVE
  1854 18EE			l_0730
  1855
  1856 				; optimize OK (main.pas), line = 96
  1857
  1858 18EE AD 1A 1A			lda PLAYER2.ISDEAD
  1859 18F1 D0 03			jne l_0746
  1860 18F3 EE 08 1A			inc ALIVE
  1861 18F6			l_0746
  1862
  1863 				; optimize OK (main.pas), line = 97
  1864
  1865 18F6 AD 22 1A			lda PLAYER3.ISDEAD
  1866 18F9 D0 03			jne l_075C
  1867 18FB EE 08 1A			inc ALIVE
  1868 18FE			l_075C
  1869
  1870 				; optimize OK (main.pas), line = 98
  1871
  1872 18FE AD 2A 1A			lda PLAYER4.ISDEAD
  1873 1901 D0 03			jne l_0772
  1874 1903 EE 08 1A			inc ALIVE
  1875 1906			l_0772
  1876
  1877 				; --- RepeatUntilProlog
  1878 1906			l_077A
  1879
  1880 				; optimize OK (main.pas), line = 101
  1881
  1882 1906 A9 03			lda #$03
  1883 1908 8D 04 1A			sta SYSTEM.PAUSE_006B.N
  1884 190B A9 00			lda #$00
  1885 190D 8D 05 1A			sta SYSTEM.PAUSE_006B.N+1
  1886 1910 20 23 11			jsr SYSTEM.PAUSE_006B
  1887
  1888 				; optimize OK (main.pas), line = 102
  1889
  1890 1913 AD EE 19			lda PLAYER1
  1891 1916 8D 3F 1A			sta PLAYERMOVE.P
  1892 1919 AD EF 19			lda PLAYER1+1
  1893 191C 8D 40 1A			sta PLAYERMOVE.P+1
  1894 191F 20 C0 16			jsr PLAYERMOVE
  1895 1922 AD F0 19			lda PLAYER2
  1896 1925 8D 3F 1A			sta PLAYERMOVE.P
  1897 1928 AD F1 19			lda PLAYER2+1
  1898 192B 8D 40 1A			sta PLAYERMOVE.P+1
  1899 192E 20 C0 16			jsr PLAYERMOVE
  1900
  1901 				; optimize OK (main.pas), line = 103
  1902
  1903 1931 AD F2 19			lda PLAYER3
  1904 1934 8D 3F 1A			sta PLAYERMOVE.P
  1905 1937 AD F3 19			lda PLAYER3+1
  1906 193A 8D 40 1A			sta PLAYERMOVE.P+1
  1907 193D 20 C0 16			jsr PLAYERMOVE
  1908 1940 AD F4 19			lda PLAYER4
  1909 1943 8D 3F 1A			sta PLAYERMOVE.P
  1910 1946 AD F5 19			lda PLAYER4+1
  1911 1949 8D 40 1A			sta PLAYERMOVE.P+1
  1912 194C 20 C0 16			jsr PLAYERMOVE
  1913
  1914 				; optimize OK (main.pas), line = 104
  1915
  1916 194F AD 08 1A			lda ALIVE
  1917 1952 F0 04			jeq l_077Ax
  1918 1954 C9 FF			cmp #$FF
  1919 1956 D0 AE			jne l_077A
  1920 1958			l_077Ax
  1921
  1922 				; optimize OK (main.pas), line = 106
  1923
  1924 1958 AD 12 1A			lda PLAYER1.ISDEAD
  1925 195B D0 03			jne l_07B0
  1926 195D EE 11 1A			inc PLAYER1.SCORE
  1927 1960			l_07B0
  1928
  1929 				; optimize OK (main.pas), line = 107
  1930
  1931 1960 AD 1A 1A			lda PLAYER2.ISDEAD
  1932 1963 D0 03			jne l_07C6
  1933 1965 EE 19 1A			inc PLAYER2.SCORE
  1934 1968			l_07C6
  1935
  1936 				; optimize OK (main.pas), line = 108
  1937
  1938 1968 AD 22 1A			lda PLAYER3.ISDEAD
  1939 196B D0 03			jne l_07DC
  1940 196D EE 21 1A			inc PLAYER3.SCORE
  1941 1970			l_07DC
  1942
  1943 				; optimize OK (main.pas), line = 109
  1944
  1945 1970 AD 2A 1A			lda PLAYER4.ISDEAD
  1946 1973 D0 03			jne l_07F2
  1947 1975 EE 29 1A			inc PLAYER4.SCORE
  1948 1978			l_07F2
  1949
  1950 				; optimize OK (main.pas), line = 111
  1951
  1952 1978 A9 64			lda #$64
  1953 197A 8D 04 1A			sta SYSTEM.PAUSE_006B.N
  1954 197D A9 00			lda #$00
  1955 197F 8D 05 1A			sta SYSTEM.PAUSE_006B.N+1
  1956 1982 20 23 11			jsr SYSTEM.PAUSE_006B
  1957 1985			@exit
  1958 					.ifdef @new
  1959 					lda <@VarData
  1960 					sta :ztmp
  1961 					lda >@VarData
  1962 					ldy #@VarDataSize-1
  1963 					jmp @FreeMem
  1964 					els
  1965 1985 60				rts						; ret
  1966 					eif
  1967 				.endl
  1968 1986			l_0007
  1969
  1970 				; --- RepeatUntilProlog
  1971 1986			l_07FD
  1972
  1973 				; optimize OK (main.pas), line = 118
  1974
  1975 1986 A9 30			lda #$30
  1976 1988 8D 11 1A			sta PLAYER1.SCORE
  1977 198B 8D 19 1A			sta PLAYER2.SCORE
  1978
  1979 				; optimize OK (main.pas), line = 119
  1980
  1981 198E 8D 21 1A			sta PLAYER3.SCORE
  1982 1991 8D 29 1A			sta PLAYER4.SCORE
  1983
  1984 				; optimize OK (main.pas), line = 121
  1985
  1986 1994 A9 00			lda #$00
  1987 1996 8D 0A 1A			sta GAMEOVER
  1988
  1989 				; --- RepeatUntilProlog
  1990 1999			l_0812
  1991
  1992 				; optimize FAIL ('MAINLOOP', main.pas), line = 123
  1993
  1994 1999 20 DB 18			jsr MAINLOOP
  1995
  1996 				; optimize OK (main.pas), line = 124
  1997
  1998 199C AD 11 1A			lda PLAYER1.SCORE
  1999 199F C9 39			cmp #$39
  2000 19A1 D0 05			jne l_0825
  2001 19A3 A9 01			lda #$01
  2002 19A5 8D 0A 1A			sta GAMEOVER
  2003 19A8			l_0825
  2004
  2005 				; optimize OK (main.pas), line = 125
  2006
  2007 19A8 AD 19 1A			lda PLAYER2.SCORE
  2008 19AB C9 39			cmp #$39
  2009 19AD D0 05			jne l_083E
  2010 19AF A9 01			lda #$01
  2011 19B1 8D 0A 1A			sta GAMEOVER
  2012 19B4			l_083E
  2013
  2014 				; optimize OK (main.pas), line = 126
  2015
  2016 19B4 AD 21 1A			lda PLAYER3.SCORE
  2017 19B7 C9 39			cmp #$39
  2018 19B9 D0 05			jne l_0857
  2019 19BB A9 01			lda #$01
  2020 19BD 8D 0A 1A			sta GAMEOVER
  2021 19C0			l_0857
  2022
  2023 				; optimize OK (main.pas), line = 127
  2024
  2025 19C0 AD 29 1A			lda PLAYER4.SCORE
  2026 19C3 C9 39			cmp #$39
  2027 19C5 D0 05			jne l_0870
  2028 19C7 A9 01			lda #$01
  2029 19C9 8D 0A 1A			sta GAMEOVER
  2030 19CC			l_0870
  2031
  2032 				; optimize OK (main.pas), line = 128
  2033
  2034 19CC AD 0A 1A			lda GAMEOVER
  2035 19CF F0 C8			jeq l_0812
  2036
  2037 				; optimize FAIL ('SHOWSCORE', main.pas), line = 129
  2038
  2039 19D1 20 9C 11			jsr SHOWSCORE
  2040
  2041 				; optimize OK (main.pas), line = 131
  2042
  2043 19D4 A9 C8			lda #$C8
  2044 19D6 8D 04 1A			sta SYSTEM.PAUSE_006B.N
  2045 19D9 A9 00			lda #$00
  2046 19DB 8D 05 1A			sta SYSTEM.PAUSE_006B.N+1
  2047 19DE 20 23 11			jsr SYSTEM.PAUSE_006B
  2048
  2049 				; optimize OK (main.pas), line = 132
  2050
  2051 19E1 4C 86 19			jmp l_07FD
  2052
  2053 				; ------------------------------------------------------------
  2054
  2055 = 0800			ATTRIBUTE_ADDR	= $0800
  2056 = 0C00			SCREEN_ADDR	= $0C00
  2057 = 0020			EMPTY	= $20
  2058 = 00A0			WALL	= $A0
  2059 = 0041			WALL_COLOUR	= $41
  2060 = 0030			ZERO	= $30
  2061 = 0056			OBSTACLE	= $56
  2062 = 0035			OBST_COLOUR	= $35
  2063 = 0051			PLY_HEAD	= $51
  2064 = 0057			PLY_CRASH	= $57
  2065 = 002A			PLY_CRASH_1	= $2A
  2066 = 0042			PLY_TAIL_UD	= $42
  2067 = 0040			PLY_TAIL_LR	= $40
  2068 = 007D			PLY_TAIL_RD	= $7D
  2069 = 006E			PLY_TAIL_RU	= $6E
  2070 = 006D			PLY_TAIL_LD	= $6D
  2071 = 0070			PLY_TAIL_LU	= $70
  2072 = 005F			PLY1_COLOUR	= $5F
  2073 = 005D			PLY2_COLOUR	= $5D
  2074 = 0071			PLY3_COLOUR	= $71
  2075 = 0055			PLY4_COLOUR	= $55
  2076 = 0000			PLY_CTRL	= $00
  2077 = 0001			AI_STRAIGHT	= $01
  2078 = 0002			AI_MIRROR	= $02
  2079 = 0003			AI_RANDOM	= $03
  2080 = 0007			AI_MAD	= $07
  2081 = 0001			JOY_UP	= $01
  2082 = 0002			JOY_DOWN	= $02
  2083 = 0004			JOY_LEFT	= $04
  2084 = 0008			JOY_RIGHT	= $08
  2085 = 0040			JOY_FIRE	= $40
  2086 = 0002			JOY_SELECT_1	= $02
  2087 = 0004			JOY_SELECT_2	= $04
  2088 = 100E			adr.MUL40	= CODEORIGIN+$0000
  2089 19E4			.var MUL40	= adr.MUL40 .word
  2090 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  2091 19E4			.var DIRECTION	= adr.DIRECTION .word
  2092 = FD30			KEY_PIO	= $FD30
  2093 = FF08			JOY	= $FF08
  2094 = FF15			BORDERCOLOR	= $FF15
  2095 = FF19			BGCOLOR	= $FF19
  2096 = 0058			T0B	= $58
  2097 = 0059			NEWDIR	= $59
  2098 = 005A			AVAILDIR	= $5A
  2099 = 005B			T0W	= $5B
  2100 = 005D			adr.PLY	= $5D
  2101 19E4			.var PLY	= adr.PLY .word
  2102 = 19F8			PLY.X	= DATAORIGIN+$0000
  2103 = 19F9			PLY.Y	= DATAORIGIN+$0001
  2104 = 19FA			PLY.HEAD	= DATAORIGIN+$0002
  2105 = 19FB			PLY.COLOUR	= DATAORIGIN+$0003
  2106 = 19FC			PLY.DIR	= DATAORIGIN+$0004
  2107 = 19FD			PLY.BRAIN	= DATAORIGIN+$0005
  2108 = 19FE			PLY.SCORE	= DATAORIGIN+$0006
  2109 = 19FF			PLY.ISDEAD	= DATAORIGIN+$0007
  2110 = 1A08			ALIVE	= DATAORIGIN+$0010
  2111 = 1A09			SPEED	= DATAORIGIN+$0011
  2112 = 1A0A			GAMEOVER	= DATAORIGIN+$0012
  2113 = 1A0B			adr.PLAYER1	= [DATAORIGIN+$0013] .array [6]
  2114 19E4			.var PLAYER1	= adr.PLAYER1 .word
  2115 = 1A0B			PLAYER1.X	= DATAORIGIN+$0013
  2116 = 1A0C			PLAYER1.Y	= DATAORIGIN+$0014
  2117 = 1A0D			PLAYER1.HEAD	= DATAORIGIN+$0015
  2118 = 1A0E			PLAYER1.COLOUR	= DATAORIGIN+$0016
  2119 = 1A0F			PLAYER1.DIR	= DATAORIGIN+$0017
  2120 = 1A10			PLAYER1.BRAIN	= DATAORIGIN+$0018
  2121 = 1A11			PLAYER1.SCORE	= DATAORIGIN+$0019
  2122 = 1A12			PLAYER1.ISDEAD	= DATAORIGIN+$001A
  2123 = 1A13			adr.PLAYER2	= [DATAORIGIN+$001B] .array [6]
  2124 19E4			.var PLAYER2	= adr.PLAYER2 .word
  2125 = 1A13			PLAYER2.X	= DATAORIGIN+$001B
  2126 = 1A14			PLAYER2.Y	= DATAORIGIN+$001C
  2127 = 1A15			PLAYER2.HEAD	= DATAORIGIN+$001D
  2128 = 1A16			PLAYER2.COLOUR	= DATAORIGIN+$001E
  2129 = 1A17			PLAYER2.DIR	= DATAORIGIN+$001F
  2130 = 1A18			PLAYER2.BRAIN	= DATAORIGIN+$0020
  2131 = 1A19			PLAYER2.SCORE	= DATAORIGIN+$0021
  2132 = 1A1A			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  2133 = 1A1B			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  2134 19E4			.var PLAYER3	= adr.PLAYER3 .word
  2135 = 1A1B			PLAYER3.X	= DATAORIGIN+$0023
  2136 = 1A1C			PLAYER3.Y	= DATAORIGIN+$0024
  2137 = 1A1D			PLAYER3.HEAD	= DATAORIGIN+$0025
  2138 = 1A1E			PLAYER3.COLOUR	= DATAORIGIN+$0026
  2139 = 1A1F			PLAYER3.DIR	= DATAORIGIN+$0027
  2140 = 1A20			PLAYER3.BRAIN	= DATAORIGIN+$0028
  2141 = 1A21			PLAYER3.SCORE	= DATAORIGIN+$0029
  2142 = 1A22			PLAYER3.ISDEAD	= DATAORIGIN+$002A
  2143 = 1A23			adr.PLAYER4	= [DATAORIGIN+$002B] .array [6]
  2144 19E4			.var PLAYER4	= adr.PLAYER4 .word
  2145 = 1A23			PLAYER4.X	= DATAORIGIN+$002B
  2146 = 1A24			PLAYER4.Y	= DATAORIGIN+$002C
  2147 = 1A25			PLAYER4.HEAD	= DATAORIGIN+$002D
  2148 = 1A26			PLAYER4.COLOUR	= DATAORIGIN+$002E
  2149 = 1A27			PLAYER4.DIR	= DATAORIGIN+$002F
  2150 = 1A28			PLAYER4.BRAIN	= DATAORIGIN+$0030
  2151 = 1A29			PLAYER4.SCORE	= DATAORIGIN+$0031
  2152 = 1A2A			PLAYER4.ISDEAD	= DATAORIGIN+$0032
  2153 19E4			@exit
  2154
  2155 19E4 A2 00		@halt	ldx #$00
  2156 19E6 9A				txs
  2157
  2158 19E7 60				rts
  2159
  2160 				; ------------------------------------------------------------
  2161
  2162 				; ------------------------------------------------------------
  2163
  2164 19E8			.local	@DEFINES
  2165 19E8			C4P
  2166 				.endl
  2167
  2168 19E8			.local	@RESOURCE
  2169 				.endl
  2170
  2171 = 19E8 0E 10		MUL40
  2171 = 19EA 40 10		DIRECTION
  2171 = 19EC 5D 00		PLY
  2171 = 19EE 0B 1A		PLAYER1
  2171 = 19F0 13 1A		PLAYER2
  2171 = 19F2 1B 1A		PLAYER3
  2171 = 19F4 23 1A		PLAYER4
  2171 				.endl							; MAIN
  2172
  2173 				; ------------------------------------------------------------
  2174 				; ------------------------------------------------------------
  2175
  2176 				.macro	UNITINITIALIZATION
  2177 				
  2178 					.ifdef MAIN.SYSTEM.@UnitInit
  2179 					jsr MAIN.SYSTEM.@UnitInit
  2180 					eif
  2181 				.endm
  2182
  2183 				; ------------------------------------------------------------
  2184
  2185 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2186 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2186 				SYSTEM: $10D5..$1170
  2187 					eif
  2188
  2189 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2189 				CODE: $100E..$19E7
  2190
  2191 				; ------------------------------------------------------------
  2192
  2193 19F6				.align $04
  2194
  2195 19F8			DATAORIGIN
  2196 19F8 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  2197
  2198 = 0006			VARINITSIZE	= *-DATAORIGIN
  2199 = 004B			VARDATASIZE	= 75
  2200
  2201 = 1A43			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2202
  2203 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2203 				DATA: $19F8..$1A43
  2204
  2205 				; ------------------------------------------------------------
  2206
  2207 				.macro	STATICDATA
  2208 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  2209 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  2210 				.by  $C0 $03 $01 $02 $04 $08
  2211 				.endm
  2212
  2213 					end
