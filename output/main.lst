mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E 6C 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 005D			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2A8A			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 A3			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D E7 29 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 E7 85 02 A9 2A + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C 04 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 8F 2A		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 8F 2A 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2A8F			RESULT	= DATAORIGIN+$000B
   182
   183 = 2A8F			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD 90 2A		loop  lda n
   325 112D 0D 91 2A		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD 90 2A D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2A90			N	= DATAORIGIN+$000C
   339
   340 = 2A90			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D 92 2A			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD 92 2A		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C 93 2A		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD 93 2A 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2A92			RANGE	= DATAORIGIN+$000E
   401 = 2A93			RESULT	= DATAORIGIN+$000F
   402
   403 = 2A92			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2A84			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2A86			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2A88			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2A89			FILEMODE	= DATAORIGIN+$0005
   468 = 2A8A			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2A8B			IORESULT	= DATAORIGIN+$0007
   470 = 2A8C			EOLN	= DATAORIGIN+$0008
   471 = 2A8D			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD C7 2A			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D C6 2A			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 08			adc #$08
   487 118B 85 5E			sta T0W+1
   488
   489 				; optimize OK (tools.inc), line = 6
   490
   491 118D 85 11			sta :bp+1
   492 118F A4 5D			ldy T0W
   493 1191 AD C9 2A			lda C
   494 1194 91 10			sta (:bp),y
   495 1196 A5 5E			lda T0W+1
   496 1198 18 69 04			add #$04
   497 119B 85 11			sta :bp+1
   498 119D AD C8 2A			lda V
   499 11A0 91 10			sta (:bp),y
   500
   501 				; ------------------------------------------------------------
   502
   503 = 2AC6			X	= DATAORIGIN+$0042
   504 = 2AC7			Y	= DATAORIGIN+$0043
   505 = 2AC8			V	= DATAORIGIN+$0044
   506 = 2AC9			C	= DATAORIGIN+$0045
   507
   508 = 2AC6			@VarData	= X
   509 = 0004			@VarDataSize	= 4
   510
   511 11A2			@exit
   512 					.ifdef @new
   513 					lda <@VarData
   514 					sta :ztmp
   515 					lda >@VarData
   516 					ldy #@VarDataSize-1
   517 					jmp @FreeMem
   518 					els
   519 11A2 60				rts						; ret
   520 					eif
   521 				.endl
   522
   523 11A3			.local	PUTCHAR_0098					; PROCEDURE | OVERLOAD
   524
   525 				; optimize OK (tools.inc), line = 11
   526
   527 11A3 AD CB 2A			lda Y
   528 11A6 0A				asl @
   529 11A7 A8				tay
   530 11A8 B9 0E 10			lda adr.MUL40,y
   531 11AB 18 6D CA 2A			add X
   532 11AF 85 5D			sta T0W
   533 11B1 B9 0F 10			lda adr.MUL40+1,y
   534 11B4 69 0C			adc #$0C
   535 11B6 85 5E			sta T0W+1
   536 11B8 A4 5E			ldy T0W+1
   537 11BA 84 11			sty :bp+1
   538 11BC A4 5D			ldy T0W
   539 11BE AD CC 2A			lda V
   540 11C1 91 10			sta (:bp),y
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2ACA			X	= DATAORIGIN+$0046
   545 = 2ACB			Y	= DATAORIGIN+$0047
   546 = 2ACC			V	= DATAORIGIN+$0048
   547
   548 = 2ACA			@VarData	= X
   549 = 0003			@VarDataSize	= 3
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	SHOWSCORE					; PROCEDURE
   564
   565 				; optimize OK (tools.inc), line = 18
   566
   567 11C4 AD 99 2A			lda PLAYER1.COLOUR
   568 11C7 8D C9 2A			sta PUTCHAR_0072.C
   569 11CA AD 9C 2A			lda PLAYER1.SCORE
   570 11CD 8D C8 2A			sta PUTCHAR_0072.V
   571 11D0 A9 00			lda #$00
   572 11D2 8D C7 2A			sta PUTCHAR_0072.Y
   573 11D5 A9 1E			lda #$1E
   574 11D7 8D C6 2A			sta PUTCHAR_0072.X
   575 11DA 20 78 11			jsr PUTCHAR_0072
   576
   577 				; optimize OK (tools.inc), line = 19
   578
   579 11DD AD A1 2A			lda PLAYER2.COLOUR
   580 11E0 8D C9 2A			sta PUTCHAR_0072.C
   581 11E3 AD A4 2A			lda PLAYER2.SCORE
   582 11E6 8D C8 2A			sta PUTCHAR_0072.V
   583 11E9 A9 00			lda #$00
   584 11EB 8D C7 2A			sta PUTCHAR_0072.Y
   585 11EE A9 20			lda #$20
   586 11F0 8D C6 2A			sta PUTCHAR_0072.X
   587 11F3 20 78 11			jsr PUTCHAR_0072
   588
   589 				; optimize OK (tools.inc), line = 20
   590
   591 11F6 AD A9 2A			lda PLAYER3.COLOUR
   592 11F9 8D C9 2A			sta PUTCHAR_0072.C
   593 11FC AD AC 2A			lda PLAYER3.SCORE
   594 11FF 8D C8 2A			sta PUTCHAR_0072.V
   595 1202 A9 00			lda #$00
   596 1204 8D C7 2A			sta PUTCHAR_0072.Y
   597 1207 A9 22			lda #$22
   598 1209 8D C6 2A			sta PUTCHAR_0072.X
   599 120C 20 78 11			jsr PUTCHAR_0072
   600
   601 				; optimize OK (tools.inc), line = 21
   602
   603 120F AD B1 2A			lda PLAYER4.COLOUR
   604 1212 8D C9 2A			sta PUTCHAR_0072.C
   605 1215 AD B4 2A			lda PLAYER4.SCORE
   606 1218 8D C8 2A			sta PUTCHAR_0072.V
   607 121B A9 00			lda #$00
   608 121D 8D C7 2A			sta PUTCHAR_0072.Y
   609 1220 A9 24			lda #$24
   610 1222 8D C6 2A			sta PUTCHAR_0072.X
   611 1225 20 78 11			jsr PUTCHAR_0072
   612 1228			@exit
   613 					.ifdef @new
   614 					lda <@VarData
   615 					sta :ztmp
   616 					lda >@VarData
   617 					ldy #@VarDataSize-1
   618 					jmp @FreeMem
   619 					els
   620 1228 60				rts						; ret
   621 					eif
   622 				.endl
   623
   624 1229			.local	CHECKAVAILDIR					; PROCEDURE
   625
   626 				; optimize OK (tools.inc), line = 28
   627
   628 1229 A9 00			lda #$00
   629 122B 85 5C			sta AVAILDIR
   630
   631 				; optimize OK (tools.inc), line = 29
   632
   633 122D AC 73 2A 84 12 AC + 	mwy PLY :bp2
   634 1237 A0 01			ldy #PLY.Y-DATAORIGIN
   635 1239 B1 12			lda (:bp2),y
   636 123B 0A				asl @
   637 123C A8				tay
   638 123D A9 00			lda #$00
   639 123F 18 79 0E 10			add adr.MUL40,y
   640 1243 85 21			sta :STACKORIGIN+9
   641 1245 A9 0C			lda #$0C
   642 1247 79 0F 10			adc adr.MUL40+1,y
   643 124A 85 31			sta :STACKORIGIN+STACKWIDTH+9
   644 124C A0 00			ldy #PLY.X-DATAORIGIN
   645 124E A5 21			lda :STACKORIGIN+9
   646 1250 18 71 12			add (:bp2),y
   647 1253 85 5D			sta T0W
   648 1255 A5 31			lda :STACKORIGIN+STACKWIDTH+9
   649 1257 69 00			adc #$00
   650 1259 85 5E			sta T0W+1
   651
   652 				; optimize OK (tools.inc), line = 31
   653
   654 125B A5 5D			lda T0W
   655 125D 38 E9 28			sub #$28
   656 1260 85 21			sta :STACKORIGIN+9
   657 1262 A5 5E			lda T0W+1
   658 1264 E9 00			sbc #$00
   659 1266 85 11			sta :bp+1
   660 1268 A4 21			ldy :STACKORIGIN+9
   661 126A B1 10			lda (:bp),y
   662 126C C9 20			cmp #$20
   663 126E D0 06			jne l_010B
   664 1270 A5 5C			lda AVAILDIR
   665 1272 09 01			ora #$01
   666 1274 85 5C			sta AVAILDIR
   667 1276			l_010B
   668
   669 				; optimize OK (tools.inc), line = 32
   670
   671 1276 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   672 127E A0 28			ldy #$28
   673 1280 B1 12			lda (:bp2),y
   674 1282 C9 20			cmp #$20
   675 1284 D0 06			jne l_012E
   676 1286 A5 5C			lda AVAILDIR
   677 1288 09 02			ora #$02
   678 128A 85 5C			sta AVAILDIR
   679 128C			l_012E
   680
   681 				; optimize OK (tools.inc), line = 33
   682
   683 128C A5 5D			lda T0W
   684 128E 38 E9 01			sub #$01
   685 1291 85 21			sta :STACKORIGIN+9
   686 1293 A5 5E			lda T0W+1
   687 1295 E9 00			sbc #$00
   688 1297 85 11			sta :bp+1
   689 1299 A4 21			ldy :STACKORIGIN+9
   690 129B B1 10			lda (:bp),y
   691 129D C9 20			cmp #$20
   692 129F D0 06			jne l_0151
   693 12A1 A5 5C			lda AVAILDIR
   694 12A3 09 04			ora #$04
   695 12A5 85 5C			sta AVAILDIR
   696 12A7			l_0151
   697
   698 				; optimize OK (tools.inc), line = 34
   699
   700 12A7 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   701 12AF A0 01			ldy #$01
   702 12B1 B1 12			lda (:bp2),y
   703 12B3 C9 20			cmp #$20
   704 12B5 D0 06			jne l_0174
   705 12B7 A5 5C			lda AVAILDIR
   706 12B9 09 08			ora #$08
   707 12BB 85 5C			sta AVAILDIR
   708 12BD			l_0174
   709 12BD			@exit
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					els
   717 12BD 60				rts						; ret
   718 					eif
   719 				.endl
   720
   721 12BE			.local	ANIMATEOBSTACLES				; PROCEDURE
   722
   723 				; optimize FAIL (0, tools.inc), line = 43
   724
   725 12BE EE CD 2A			inc COUNTER
   726
   727 				; optimize OK (tools.inc), line = 44
   728
   729 12C1 AD CD 2A			lda COUNTER
   730 12C4 29 01			and #$01
   731 12C6 F0 08			jeq l_019F
   732 12C8 A9 56			lda #$56
   733 12CA 8D CE 2A			sta OBST
   734 12CD 4C D5 12			jmp l_01AD
   735 12D0			l_019F
   736 12D0 A9 5B			lda #$5B
   737 12D2 8D CE 2A			sta OBST
   738 12D5			l_01AD
   739
   740 				; optimize OK (tools.inc), line = 45
   741
   742 12D5 A9 07			lda #$07
   743 12D7 85 59			sta I0B
   744
   745 12D9			l_01BA
   746 				; --- ForToDoCondition
   747 12D9 A5 59			lda I0B
   748 12DB 0A				asl @
   749 12DC A8				tay
   750 12DD B9 B6 2A			lda adr.OBSTACLES,y
   751 12E0 85 21			sta :STACKORIGIN+9
   752 12E2 B9 B7 2A			lda adr.OBSTACLES+1,y
   753 12E5 85 11			sta :bp+1
   754 12E7 A4 21			ldy :STACKORIGIN+9
   755 12E9 AD CE 2A			lda OBST
   756 12EC 91 10			sta (:bp),y
   757 12EE C6 59			dec I0B
   758 12F0 10 E7			jpl l_01BA
   759 12F2			l_01C8
   760
   761 				; ------------------------------------------------------------
   762
   763 = 2ACD			COUNTER	= DATAORIGIN+$0049
   764 = 2ACE			OBST	= DATAORIGIN+$004A
   765 = 0000			@FORTMP_01B7	= $00
   766
   767 = 2ACD			@VarData	= COUNTER
   768 = 0002			@VarDataSize	= 2
   769
   770 12F2			@exit
   771 					.ifdef @new
   772 					lda <@VarData
   773 					sta :ztmp
   774 					lda >@VarData
   775 					ldy #@VarDataSize-1
   776 					jmp @FreeMem
   777 					els
   778 12F2 60				rts						; ret
   779 					eif
   780 				.endl
   781
   782 12F3			.local	CALCOBSTACLEADDR				; FUNCTION
   783
   784 				; optimize OK (tools.inc), line = 52
   785
   786 12F3 AD D0 2A			lda Y
   787 12F6 0A				asl @
   788 12F7 A8				tay
   789 12F8 AD CF 2A			lda X
   790 12FB 18 79 0E 10			add adr.MUL40,y
   791 12FF 8D D1 2A			sta RESULT
   792 1302 A9 0C			lda #$0C
   793 1304 79 0F 10			adc adr.MUL40+1,y
   794 1307 8D D2 2A			sta RESULT+1
   795 130A			@exit
   796
   797 				; ------------------------------------------------------------
   798
   799 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   800 				; as Pointer
   801
   802 130A E8				inx
   803 130B AD D1 2A 95 18		mva RESULT :STACKORIGIN,x
   804 1310 AD D2 2A 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   805
   806 					.ifdef @new
   807 					lda <@VarData
   808 					sta :ztmp
   809 					lda >@VarData
   810 					ldy #@VarDataSize-1
   811 					jmp @FreeMem
   812 					eif
   813
   814 				; ------------------------------------------------------------
   815
   816 = 2ACF			X	= DATAORIGIN+$004B
   817 = 2AD0			Y	= DATAORIGIN+$004C
   818 = 2AD1			RESULT	= DATAORIGIN+$004D
   819
   820 = 2ACF			@VarData	= X
   821 = 0004			@VarDataSize	= 4
   822
   823 1315 60				rts						; ret
   824 				.endl
   825
   826 1316			.local	SAVEOBSTACLES					; PROCEDURE
   827
   828 				; optimize OK (tools.inc), line = 59
   829
   830 1316 A9 07			lda #$07
   831 1318 85 59			sta I0B
   832
   833 131A			l_01FB
   834 				; --- ForToDoCondition
   835
   836 				; optimize OK (tools.inc), line = 60
   837
   838 131A A5 59			lda I0B
   839 131C 0A				asl @
   840 131D A8				tay
   841 131E B9 B7 2A			lda adr.OBSTACLES+1,y
   842 1321 C9 00			cmp #$00
   843 1323 D0 05			bne @+
   844 1325 B9 B6 2A			lda adr.OBSTACLES,y
   845 1328 C9 7E			cmp #$7E
   846 132A			@
   847 132A F0 29			jeq l_021D
   848
   849 				; optimize OK (tools.inc), line = 61
   850
   851 132C B9 B6 2A			lda adr.OBSTACLES,y
   852 132F 85 21			sta :STACKORIGIN+9
   853 1331 B9 B7 2A			lda adr.OBSTACLES+1,y
   854 1334 85 11			sta :bp+1
   855 1336 A4 21			ldy :STACKORIGIN+9
   856 1338 A9 56			lda #$56
   857 133A 91 10			sta (:bp),y
   858
   859 				; optimize OK (tools.inc), line = 62
   860
   861 133C A5 59			lda I0B
   862 133E 0A				asl @
   863 133F A8				tay
   864 1340 B9 B6 2A			lda adr.OBSTACLES,y
   865 1343 38 E9 00			sub #$00
   866 1346 85 21			sta :STACKORIGIN+9
   867 1348 B9 B7 2A			lda adr.OBSTACLES+1,y
   868 134B E9 04			sbc #$04
   869 134D 85 11			sta :bp+1
   870 134F A4 21			ldy :STACKORIGIN+9
   871 1351 A9 35			lda #$35
   872 1353 91 10			sta (:bp),y
   873 1355			l_021D
   874
   875 				; --- ForToDoEpilog
   876 1355 C6 59			dec I0B
   877 1357 10 C1			jpl l_01FB
   878 1359			l_0209
   879
   880 				; ------------------------------------------------------------
   881
   882 = 0000			@FORTMP_01F8	= $00
   883 1359			@exit
   884 					.ifdef @new
   885 					lda <@VarData
   886 					sta :ztmp
   887 					lda >@VarData
   888 					ldy #@VarDataSize-1
   889 					jmp @FreeMem
   890 					els
   891 1359 60				rts						; ret
   892 					eif
   893 				.endl
   894
   895 135A			.local	DRAWTAIL					; PROCEDURE
   896
   897 				; optimize OK (tools.inc), line = 71
   898
   899 135A AC 73 2A 84 12 AC + 	mwy PLY :bp2
   900 1364 A0 04			ldy #PLY.DIR-DATAORIGIN
   901 1366 B1 12			lda (:bp2),y
   902 1368 C5 5B			cmp NEWDIR
   903 136A D0 14			jne l_024F
   904
   905 				; optimize OK (tools.inc), line = 72
   906
   907 136C A5 5B			lda NEWDIR
   908 136E 29 0C			and #$0C
   909 1370 F0 07			jeq l_0266
   910 1372 A9 40			lda #$40
   911 1374 85 58			sta T0B
   912 1376 4C 7D 13			jmp l_0274
   913 1379			l_0266
   914 1379 A9 42			lda #$42
   915 137B 85 58			sta T0B
   916 137D			l_0274
   917 137D 4C F0 13			jmp l_0281
   918 1380			l_024F
   919
   920 				; optimize OK (tools.inc), line = 74
   921
   922 1380 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   923 138A A0 04			ldy #PLY.DIR-DATAORIGIN
   924 138C B1 12			lda (:bp2),y
   925 138E 29 0A			and #$0A
   926 1390 F0 0A			jeq l_02A7
   927 1392 A5 5B			lda NEWDIR
   928 1394 29 05			and #$05
   929 1396 F0 04			jeq l_02A7
   930 1398 A9 7D			lda #$7D
   931 139A 85 58			sta T0B
   932 139C			l_02A7
   933
   934 				; optimize OK (tools.inc), line = 75
   935
   936 139C AC 73 2A 84 12 AC + 	mwy PLY :bp2
   937 13A6 A0 04			ldy #PLY.DIR-DATAORIGIN
   938 13A8 B1 12			lda (:bp2),y
   939 13AA 29 09			and #$09
   940 13AC F0 0A			jeq l_02D4
   941 13AE A5 5B			lda NEWDIR
   942 13B0 29 06			and #$06
   943 13B2 F0 04			jeq l_02D4
   944 13B4 A9 6E			lda #$6E
   945 13B6 85 58			sta T0B
   946 13B8			l_02D4
   947
   948 				; optimize OK (tools.inc), line = 76
   949
   950 13B8 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   951 13C2 A0 04			ldy #PLY.DIR-DATAORIGIN
   952 13C4 B1 12			lda (:bp2),y
   953 13C6 29 06			and #$06
   954 13C8 F0 0A			jeq l_0301
   955 13CA A5 5B			lda NEWDIR
   956 13CC 29 09			and #$09
   957 13CE F0 04			jeq l_0301
   958 13D0 A9 6D			lda #$6D
   959 13D2 85 58			sta T0B
   960 13D4			l_0301
   961
   962 				; optimize OK (tools.inc), line = 77
   963
   964 13D4 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   965 13DE A0 04			ldy #PLY.DIR-DATAORIGIN
   966 13E0 B1 12			lda (:bp2),y
   967 13E2 29 05			and #$05
   968 13E4 F0 0A			jeq l_032E
   969 13E6 A5 5B			lda NEWDIR
   970 13E8 29 0A			and #$0A
   971 13EA F0 04			jeq l_032E
   972 13EC A9 70			lda #$70
   973 13EE 85 58			sta T0B
   974 13F0			l_032E
   975 13F0			l_0281
   976
   977 				; optimize OK (tools.inc), line = 79
   978
   979 13F0 AC 73 2A 84 12 AC + 	mwy PLY :bp2
   980 13FA A0 00			ldy #PLY.X-DATAORIGIN
   981 13FC B1 12			lda (:bp2),y
   982 13FE 8D CA 2A			sta PUTCHAR_0098.X
   983 1401 A0 01			ldy #PLY.Y-DATAORIGIN
   984 1403 B1 12			lda (:bp2),y
   985 1405 8D CB 2A			sta PUTCHAR_0098.Y
   986 1408 A5 58			lda T0B
   987 140A 8D CC 2A			sta PUTCHAR_0098.V
   988 140D 20 A3 11			jsr PUTCHAR_0098
   989 1410			@exit
   990 					.ifdef @new
   991 					lda <@VarData
   992 					sta :ztmp
   993 					lda >@VarData
   994 					ldy #@VarDataSize-1
   995 					jmp @FreeMem
   996 					els
   997 1410 60				rts						; ret
   998 					eif
   999 				.endl
  1000
  1001 1411			.local	CHECKJOYSTATUS					; PROCEDURE
  1002
  1003 				; optimize OK (tools.inc), line = 86
  1004
  1005 1411 A9 02			lda #$02
  1006 1413 8D 08 FF			sta JOY
  1007 1416 A9 FF			lda #$FF
  1008 1418 8D 30 FD			sta KEYSCAN
  1009
  1010 				; optimize OK (tools.inc), line = 87
  1011
  1012 141B AD 08 FF			lda JOY
  1013 141E 49 FF			eor #$FF
  1014 1420 85 63			sta JOYSTATUS
  1015 1422			@exit
  1016 					.ifdef @new
  1017 					lda <@VarData
  1018 					sta :ztmp
  1019 					lda >@VarData
  1020 					ldy #@VarDataSize-1
  1021 					jmp @FreeMem
  1022 					els
  1023 1422 60				rts						; ret
  1024 					eif
  1025 				.endl
  1026
  1027 1423			.local	SETPLAYER					; PROCEDURE
  1028
  1029 				; optimize OK (tools.inc), line = 94
  1030
  1031 1423 AD D3 2A			lda P
  1032 1426 8D 73 2A			sta PLY
  1033 1429 85 12			sta :bp2
  1034 142B AD D4 2A			lda P+1
  1035 142E 8D 74 2A			sta PLY+1
  1036 1431 85 13			sta :bp2+1
  1037 				; optimize OK (tools.inc), line = 95
  1038 1433 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1039 1435 AD D8 2A			lda BRAIN
  1040 1438 91 12			sta (:bp2),y
  1041 143A A0 00			ldy #PLY.X-DATAORIGIN
  1042 143C AD D5 2A			lda X
  1043 143F 91 12			sta (:bp2),y
  1044 1441 A0 01			ldy #PLY.Y-DATAORIGIN
  1045 1443 AD D6 2A			lda Y
  1046 1446 91 12			sta (:bp2),y
  1047 1448 A0 04			ldy #PLY.DIR-DATAORIGIN
  1048 144A AD D7 2A			lda DIR
  1049 144D 91 12			sta (:bp2),y
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 144F A0 02			ldy #PLY.HEAD-DATAORIGIN
  1054 1451 AD D9 2A			lda HEAD
  1055 1454 91 12			sta (:bp2),y
  1056 1456 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1057 1458 AD DA 2A			lda COLOUR
  1058 145B 91 12			sta (:bp2),y
  1059 145D A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1060 145F AD DB 2A			lda ISALIVE
  1061 1462 91 12			sta (:bp2),y
  1062
  1063 				; optimize OK (tools.inc), line = 97
  1064
  1065 1464 AD DB 2A			lda ISALIVE
  1066 1467 F0 1D			jeq l_0394
  1067
  1068 				; optimize FAIL (0, tools.inc), line = 98
  1069
  1070 1469 E6 5A			inc ALIVE
  1071 146B AD DA 2A			lda COLOUR
  1072 146E 8D C9 2A			sta PUTCHAR_0072.C
  1073 1471 AD D9 2A			lda HEAD
  1074 1474 8D C8 2A			sta PUTCHAR_0072.V
  1075 1477 AD D6 2A			lda Y
  1076 147A 8D C7 2A			sta PUTCHAR_0072.Y
  1077 147D AD D5 2A			lda X
  1078 1480 8D C6 2A			sta PUTCHAR_0072.X
  1079 1483 20 78 11			jsr PUTCHAR_0072
  1080 1486			l_0394
  1081
  1082 				; ------------------------------------------------------------
  1083
  1084 = 2AD3			P	= DATAORIGIN+$004F
  1085 = 2AD5			X	= DATAORIGIN+$0051
  1086 = 2AD6			Y	= DATAORIGIN+$0052
  1087 = 2AD7			DIR	= DATAORIGIN+$0053
  1088 = 2AD8			BRAIN	= DATAORIGIN+$0054
  1089 = 2AD9			HEAD	= DATAORIGIN+$0055
  1090 = 2ADA			COLOUR	= DATAORIGIN+$0056
  1091 = 2ADB			ISALIVE	= DATAORIGIN+$0057
  1092
  1093 = 2AD3			@VarData	= P
  1094 = 0009			@VarDataSize	= 9
  1095
  1096 1486			@exit
  1097 					.ifdef @new
  1098 					lda <@VarData
  1099 					sta :ztmp
  1100 					lda >@VarData
  1101 					ldy #@VarDataSize-1
  1102 					jmp @FreeMem
  1103 					els
  1104 1486 60				rts						; ret
  1105 					eif
  1106 				.endl
  1107
  1108 1487			.local	INITPLAYFIELD					; PROCEDURE
  1109
  1110 				; optimize OK (init.inc), line = 5
  1111
  1112 1487 A9 1F			lda #$1F
  1113 1489 8D 15 FF			sta BACKGROUND
  1114 148C A9 00			lda #$00
  1115 148E 8D 19 FF			sta BOREDER
  1116
  1117 				; optimize OK (init.inc), line = 6
  1118
  1119 1491 A9 20			lda #$20
  1120 1493 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  1121 1495 A9 C0			lda #$C0
  1122 1497 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  1123 1499 A9 03			lda #$03
  1124 149B 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  1125 149D A9 00			lda #$00
  1126 149F 85 08			sta SYSTEM.FILLCHAR_0056.A
  1127 14A1 A9 0C			lda #$0C
  1128 14A3 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  1129 14A5 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  1130
  1131 				; optimize OK (init.inc), line = 8
  1132
  1133 14A8 A9 27			lda #$27
  1134 14AA 85 58			sta T0B
  1135
  1136 14AC			l_03C1
  1137 				; --- ForToDoCondition
  1138
  1139 				; optimize OK (init.inc), line = 9
  1140
  1141 14AC A4 58			ldy T0B
  1142 14AE A9 A0			lda #$A0
  1143 14B0 99 00 0C			sta $0C00,y
  1144
  1145 				; optimize OK (init.inc), line = 10
  1146
  1147 14B3 99 C0 0F			sta $0FC0,y
  1148
  1149 				; optimize OK (init.inc), line = 11
  1150
  1151 14B6 A9 41			lda #$41
  1152 14B8 99 00 08			sta $0800,y
  1153
  1154 				; optimize OK (init.inc), line = 12
  1155
  1156 14BB 99 C0 0B			sta $0BC0,y
  1157
  1158 				; --- ForToDoEpilog
  1159 14BE C6 58			dec T0B
  1160 14C0 10 EA			jpl l_03C1
  1161 14C2			l_03CF
  1162
  1163 				; optimize OK (init.inc), line = 15
  1164
  1165 14C2 A9 18			lda #$18
  1166 14C4 85 58			sta T0B
  1167
  1168 14C6			l_0401
  1169 				; --- ForToDoCondition
  1170 14C6 A5 58			lda T0B
  1171 14C8 C9 01			cmp #$01
  1172 14CA 90 3A			jcc l_040F
  1173
  1174 				; optimize OK (init.inc), line = 16
  1175
  1176 14CC 0A				asl @
  1177 14CD A8				tay
  1178 14CE A9 FF			lda #$FF
  1179 14D0 18 79 0E 10			add adr.MUL40,y
  1180 14D4 85 12			sta :bp2
  1181 14D6 A9 0B			lda #$0B
  1182 14D8 79 0F 10			adc adr.MUL40+1,y
  1183 14DB 85 13			sta :bp2+1
  1184 14DD A0 00			ldy #$00
  1185 14DF A9 A0			lda #$A0
  1186 14E1 91 12			sta (:bp2),y
  1187 14E3 C8				iny
  1188 14E4 91 12			sta (:bp2),y
  1189
  1190 				; optimize OK (init.inc), line = 17
  1191
  1192 14E6 A5 58			lda T0B
  1193 14E8 0A				asl @
  1194 14E9 A8				tay
  1195 14EA A9 FF			lda #$FF
  1196 14EC 18 79 0E 10			add adr.MUL40,y
  1197 14F0 85 12			sta :bp2
  1198 14F2 A9 07			lda #$07
  1199 14F4 79 0F 10			adc adr.MUL40+1,y
  1200 14F7 85 13			sta :bp2+1
  1201 14F9 A0 00			ldy #$00
  1202 14FB A9 41			lda #$41
  1203 14FD 91 12			sta (:bp2),y
  1204 14FF C8				iny
  1205 1500 91 12			sta (:bp2),y
  1206
  1207 				; --- ForToDoEpilog
  1208 1502 C6 58			dec T0B
  1209 1504 10 C0			jpl l_0401
  1210 1506			l_040F
  1211
  1212 				; optimize OK (init.inc), line = 20
  1213
  1214 1506 A9 07			lda #$07
  1215 1508 85 59			sta I0B
  1216
  1217 150A			l_0433
  1218 				; --- ForToDoCondition
  1219 150A A5 59			lda I0B
  1220 150C 0A				asl @
  1221 150D A8				tay
  1222 150E A9 7E			lda #$7E
  1223 1510 99 B6 2A			sta adr.OBSTACLES,y
  1224 1513 A9 00			lda #$00
  1225 1515 99 B7 2A			sta adr.OBSTACLES+1,y
  1226
  1227 				; --- ForToDoEpilog
  1228 1518 C6 59			dec I0B
  1229 151A 10 EE			jpl l_0433
  1230 151C			l_0441
  1231
  1232 				; ------------------------------------------------------------
  1233
  1234 = 0000			@FORTMP_03BE	= $00
  1235 = 0001			@FORTMP_03FE	= $01
  1236 = 0000			@FORTMP_0430	= $00
  1237 151C			@exit
  1238 					.ifdef @new
  1239 					lda <@VarData
  1240 					sta :ztmp
  1241 					lda >@VarData
  1242 					ldy #@VarDataSize-1
  1243 					jmp @FreeMem
  1244 					els
  1245 151C 60				rts						; ret
  1246 					eif
  1247 				.endl
  1248
  1249 151D			.local	INITPLAYERS					; PROCEDURE
  1250
  1251 				; optimize OK (init.inc), line = 27
  1252
  1253 151D A9 30			lda #$30
  1254 151F 8D 9C 2A			sta PLAYER1.SCORE
  1255 1522 8D A4 2A			sta PLAYER2.SCORE
  1256
  1257 				; optimize OK (init.inc), line = 28
  1258
  1259 1525 8D AC 2A			sta PLAYER3.SCORE
  1260 1528 8D B4 2A			sta PLAYER4.SCORE
  1261
  1262 				; optimize OK (init.inc), line = 30
  1263
  1264 152B A9 00			lda #$00
  1265 152D 8D 9D 2A			sta PLAYER1.ISALIVE
  1266 1530 8D A5 2A			sta PLAYER2.ISALIVE
  1267
  1268 				; optimize OK (init.inc), line = 31
  1269
  1270 1533 8D AD 2A			sta PLAYER3.ISALIVE
  1271 1536 8D B5 2A			sta PLAYER4.ISALIVE
  1272 1539			@exit
  1273 					.ifdef @new
  1274 					lda <@VarData
  1275 					sta :ztmp
  1276 					lda >@VarData
  1277 					ldy #@VarDataSize-1
  1278 					jmp @FreeMem
  1279 					els
  1280 1539 60				rts						; ret
  1281 					eif
  1282 				.endl
  1283
  1284 153A			.local	AISTRAIGHT					; PROCEDURE
  1285
  1286 				; optimize OK (ai.inc), line = 5
  1287
  1288 153A AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1289 1544 A0 04			ldy #PLY.DIR-DATAORIGIN
  1290 1546 B1 12			lda (:bp2),y
  1291 1548 25 5C			and AVAILDIR
  1292 154A F0 07			jeq l_048D
  1293 154C B1 12			lda (:bp2),y
  1294 154E 85 5B			sta NEWDIR
  1295 1550 4C BE 15			jmp l_049D
  1296 1553			l_048D
  1297
  1298 				; optimize OK (ai.inc), line = 7
  1299
  1300 1553 A5 5C			lda AVAILDIR
  1301 1555 C9 03			cmp #$03
  1302 1557 D0 10			jne l_04AF
  1303 1559 A9 02			lda #$02
  1304 155B 20 47 11			jsr SYSTEM.RANDOM_006D
  1305 155E B4 18			ldy :STACKORIGIN,x
  1306 1560 B9 40 10			lda adr.DIRECTION,y
  1307 1563 85 5B			sta NEWDIR
  1308 1565 CA				dex
  1309 1566 4C 81 15			jmp l_04C1
  1310 1569			l_04AF
  1311
  1312 				; optimize OK (ai.inc), line = 9
  1313
  1314 1569 A5 5C			lda AVAILDIR
  1315 156B 8D DC 2A			sta @CASETMP_0003
  1316 156E C9 01			cmp #$01
  1317 1570 D0 07			jne l_04CC
  1318 1572			@
  1319
  1320 				; optimize OK (ai.inc), line = 10
  1321
  1322 1572 A9 01			lda #$01
  1323 1574 85 5B			sta NEWDIR
  1324
  1325 1576 4C 81 15			jmp a_0003
  1326 1579			l_04CC
  1327 1579 C9 02			cmp #$02
  1328 157B D0 04			jne l_04D9
  1329 157D			@
  1330
  1331 				; optimize OK (ai.inc), line = 11
  1332
  1333 157D A9 02			lda #$02
  1334 157F 85 5B			sta NEWDIR
  1335
  1336 1581			l_04D9
  1337 1581			a_0003
  1338 1581			l_04C1
  1339
  1340 				; optimize OK (ai.inc), line = 14
  1341
  1342 1581 A5 5C			lda AVAILDIR
  1343 1583 C9 0C			cmp #$0C
  1344 1585 D0 1F			jne l_04F5
  1345 1587 A9 02			lda #$02
  1346 1589 20 47 11			jsr SYSTEM.RANDOM_006D
  1347 158C E8				inx
  1348 158D A9 02 95 18			mva #$02 :STACKORIGIN,x
  1349 1591 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1350 1595 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1351 1597 20 44 10			jsr addAX_CX
  1352 159A CA				dex
  1353 159B B4 18			ldy :STACKORIGIN,x
  1354 159D B9 40 10			lda adr.DIRECTION,y
  1355 15A0 85 5B			sta NEWDIR
  1356 15A2 CA				dex
  1357 15A3 4C BE 15			jmp l_050B
  1358 15A6			l_04F5
  1359
  1360 				; optimize OK (ai.inc), line = 16
  1361
  1362 15A6 A5 5C			lda AVAILDIR
  1363 15A8 8D DD 2A			sta @CASETMP_0004
  1364 15AB C9 04			cmp #$04
  1365 15AD D0 07			jne l_0516
  1366 15AF			@
  1367
  1368 				; optimize OK (ai.inc), line = 17
  1369
  1370 15AF A9 04			lda #$04
  1371 15B1 85 5B			sta NEWDIR
  1372
  1373 15B3 4C BE 15			jmp a_0004
  1374 15B6			l_0516
  1375 15B6 C9 08			cmp #$08
  1376 15B8 D0 04			jne l_0523
  1377 15BA			@
  1378
  1379 				; optimize OK (ai.inc), line = 18
  1380
  1381 15BA A9 08			lda #$08
  1382 15BC 85 5B			sta NEWDIR
  1383
  1384 15BE			l_0523
  1385 15BE			a_0004
  1386 15BE			l_050B
  1387 15BE			l_049D
  1388
  1389 				; ------------------------------------------------------------
  1390
  1391 = 2ADC			@CASETMP_0003	= DATAORIGIN+$0058
  1392 = 2ADD			@CASETMP_0004	= DATAORIGIN+$0059
  1393
  1394 = 2ADC			@VarData	= @CASETMP_0003
  1395 = 0002			@VarDataSize	= 2
  1396
  1397 15BE			@exit
  1398 					.ifdef @new
  1399 					lda <@VarData
  1400 					sta :ztmp
  1401 					lda >@VarData
  1402 					ldy #@VarDataSize-1
  1403 					jmp @FreeMem
  1404 					els
  1405 15BE 60				rts						; ret
  1406 					eif
  1407 				.endl
  1408
  1409 15BF			.local	AISAPPER					; PROCEDURE
  1410
  1411 				; optimize OK (ai.inc), line = 31
  1412
  1413 15BF A9 00			lda #$00
  1414 15C1 8D DE 2A			sta L
  1415 15C4 8D DF 2A			sta R
  1416 15C7 8D E0 2A			sta U
  1417 15CA 8D E1 2A			sta D
  1418
  1419 				; optimize OK (ai.inc), line = 32
  1420
  1421 15CD AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1422 15D7 A0 01			ldy #PLY.Y-DATAORIGIN
  1423 15D9 B1 12			lda (:bp2),y
  1424 15DB 0A				asl @
  1425 15DC A8				tay
  1426 15DD A9 00			lda #$00
  1427 15DF 18 79 0E 10			add adr.MUL40,y
  1428 15E3 85 21			sta :STACKORIGIN+9
  1429 15E5 A9 0C			lda #$0C
  1430 15E7 79 0F 10			adc adr.MUL40+1,y
  1431 15EA 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1432 15EC A0 00			ldy #PLY.X-DATAORIGIN
  1433 15EE A5 21			lda :STACKORIGIN+9
  1434 15F0 18 71 12			add (:bp2),y
  1435 15F3 85 5D			sta T0W
  1436 15F5 A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1437 15F7 69 00			adc #$00
  1438 15F9 85 5E			sta T0W+1
  1439
  1440 				; optimize OK (ai.inc), line = 34
  1441
  1442 15FB A5 5C			lda AVAILDIR
  1443 15FD 29 01			and #$01
  1444 15FF F0 73			jeq l_0569
  1445
  1446 				; optimize OK (ai.inc), line = 35
  1447
  1448 1601 A9 05			lda #$05
  1449 1603 85 59			sta I0B
  1450
  1451 1605			l_0573
  1452 				; --- ForToDoCondition
  1453 1605 A5 59			lda I0B
  1454 1607 C9 01			cmp #$01
  1455 1609 90 69			jcc l_0581
  1456
  1457 				; optimize OK (ai.inc), line = 36
  1458
  1459 160B 0A				asl @
  1460 160C A8				tay
  1461 160D A5 5D			lda T0W
  1462 160F 38 F9 0E 10			sub adr.MUL40,y
  1463 1613 85 21			sta :STACKORIGIN+9
  1464 1615 A5 5E			lda T0W+1
  1465 1617 F9 0F 10			sbc adr.MUL40+1,y
  1466 161A 85 11			sta :bp+1
  1467 161C A4 21			ldy :STACKORIGIN+9
  1468 161E B1 10			lda (:bp),y
  1469 1620 C9 20			cmp #$20
  1470 1622 D0 03			jne l_059B
  1471 1624 EE E0 2A			inc U
  1472 1627			l_059B
  1473
  1474 				; optimize OK (ai.inc), line = 37
  1475
  1476 1627 A5 59			lda I0B
  1477 1629 0A				asl @
  1478 162A A8				tay
  1479 162B A5 5D			lda T0W
  1480 162D 38 F9 0E 10			sub adr.MUL40,y
  1481 1631 85 21			sta :STACKORIGIN+9
  1482 1633 A5 5E			lda T0W+1
  1483 1635 F9 0F 10			sbc adr.MUL40+1,y
  1484 1638 85 11			sta :bp+1
  1485 163A A5 21			lda :STACKORIGIN+9
  1486 163C 18 69 01			add #$01
  1487 163F A8				tay
  1488 1640 90 02			scc
  1489 1642 E6 11			inc :bp+1
  1490 1644 B1 10			lda (:bp),y
  1491 1646 C9 20			cmp #$20
  1492 1648 D0 03			jne l_05C0
  1493 164A EE E0 2A			inc U
  1494 164D			l_05C0
  1495
  1496 				; optimize OK (ai.inc), line = 38
  1497
  1498 164D A5 59			lda I0B
  1499 164F 0A				asl @
  1500 1650 A8				tay
  1501 1651 A5 5D			lda T0W
  1502 1653 38 F9 0E 10			sub adr.MUL40,y
  1503 1657 85 21			sta :STACKORIGIN+9
  1504 1659 A5 5E			lda T0W+1
  1505 165B F9 0F 10			sbc adr.MUL40+1,y
  1506 165E 85 11			sta :bp+1
  1507 1660 A4 21			ldy :STACKORIGIN+9
  1508 1662 88				dey
  1509 1663 B0 02			scs
  1510 1665 C6 11			dec :bp+1
  1511 1667 B1 10			lda (:bp),y
  1512 1669 C9 20			cmp #$20
  1513 166B D0 03			jne l_05E5
  1514 166D EE E0 2A			inc U
  1515 1670			l_05E5
  1516
  1517 				; --- ForToDoEpilog
  1518 1670 C6 59			dec I0B
  1519 1672 10 91			jpl l_0573
  1520 1674			l_0581
  1521 1674			l_0569
  1522
  1523 				; optimize OK (ai.inc), line = 42
  1524
  1525 1674 A5 5C			lda AVAILDIR
  1526 1676 29 02			and #$02
  1527 1678 F0 73			jeq l_0609
  1528
  1529 				; optimize OK (ai.inc), line = 43
  1530
  1531 167A A9 05			lda #$05
  1532 167C 85 59			sta I0B
  1533
  1534 167E			l_0613
  1535 				; --- ForToDoCondition
  1536 167E A5 59			lda I0B
  1537 1680 C9 01			cmp #$01
  1538 1682 90 69			jcc l_0621
  1539
  1540 				; optimize OK (ai.inc), line = 44
  1541
  1542 1684 0A				asl @
  1543 1685 A8				tay
  1544 1686 A5 5D			lda T0W
  1545 1688 18 79 0E 10			add adr.MUL40,y
  1546 168C 85 21			sta :STACKORIGIN+9
  1547 168E A5 5E			lda T0W+1
  1548 1690 79 0F 10			adc adr.MUL40+1,y
  1549 1693 85 11			sta :bp+1
  1550 1695 A4 21			ldy :STACKORIGIN+9
  1551 1697 B1 10			lda (:bp),y
  1552 1699 C9 20			cmp #$20
  1553 169B D0 03			jne l_063B
  1554 169D EE E1 2A			inc D
  1555 16A0			l_063B
  1556
  1557 				; optimize OK (ai.inc), line = 45
  1558
  1559 16A0 A5 59			lda I0B
  1560 16A2 0A				asl @
  1561 16A3 A8				tay
  1562 16A4 A5 5D			lda T0W
  1563 16A6 18 79 0E 10			add adr.MUL40,y
  1564 16AA 85 21			sta :STACKORIGIN+9
  1565 16AC A5 5E			lda T0W+1
  1566 16AE 79 0F 10			adc adr.MUL40+1,y
  1567 16B1 85 11			sta :bp+1
  1568 16B3 A5 21			lda :STACKORIGIN+9
  1569 16B5 18 69 01			add #$01
  1570 16B8 A8				tay
  1571 16B9 90 02			scc
  1572 16BB E6 11			inc :bp+1
  1573 16BD B1 10			lda (:bp),y
  1574 16BF C9 20			cmp #$20
  1575 16C1 D0 03			jne l_0660
  1576 16C3 EE E1 2A			inc D
  1577 16C6			l_0660
  1578
  1579 				; optimize OK (ai.inc), line = 46
  1580
  1581 16C6 A5 59			lda I0B
  1582 16C8 0A				asl @
  1583 16C9 A8				tay
  1584 16CA A5 5D			lda T0W
  1585 16CC 18 79 0E 10			add adr.MUL40,y
  1586 16D0 85 21			sta :STACKORIGIN+9
  1587 16D2 A5 5E			lda T0W+1
  1588 16D4 79 0F 10			adc adr.MUL40+1,y
  1589 16D7 85 11			sta :bp+1
  1590 16D9 A4 21			ldy :STACKORIGIN+9
  1591 16DB 88				dey
  1592 16DC B0 02			scs
  1593 16DE C6 11			dec :bp+1
  1594 16E0 B1 10			lda (:bp),y
  1595 16E2 C9 20			cmp #$20
  1596 16E4 D0 03			jne l_0685
  1597 16E6 EE E1 2A			inc D
  1598 16E9			l_0685
  1599
  1600 				; --- ForToDoEpilog
  1601 16E9 C6 59			dec I0B
  1602 16EB 10 91			jpl l_0613
  1603 16ED			l_0621
  1604 16ED			l_0609
  1605
  1606 				; optimize OK (ai.inc), line = 50
  1607
  1608 16ED A5 5C			lda AVAILDIR
  1609 16EF 29 04			and #$04
  1610 16F1 F0 5F			jeq l_06A9
  1611
  1612 				; optimize OK (ai.inc), line = 51
  1613
  1614 16F3 A9 05			lda #$05
  1615 16F5 85 59			sta I0B
  1616
  1617 16F7			l_06B3
  1618 				; --- ForToDoCondition
  1619 16F7 A5 59			lda I0B
  1620 16F9 C9 01			cmp #$01
  1621 16FB 90 55			jcc l_06C1
  1622
  1623 				; optimize OK (ai.inc), line = 52
  1624
  1625 16FD A5 5D			lda T0W
  1626 16FF 38 E5 59			sub I0B
  1627 1702 A8				tay
  1628 1703 A5 5E			lda T0W+1
  1629 1705 E9 00			sbc #$00
  1630 1707 85 11			sta :bp+1
  1631 1709 B1 10			lda (:bp),y
  1632 170B C9 20			cmp #$20
  1633 170D D0 03			jne l_06D9
  1634 170F EE DE 2A			inc L
  1635 1712			l_06D9
  1636
  1637 				; optimize OK (ai.inc), line = 53
  1638
  1639 1712 A5 5D			lda T0W
  1640 1714 38 E5 59			sub I0B
  1641 1717 A8				tay
  1642 1718 A5 5E			lda T0W+1
  1643 171A E9 00			sbc #$00
  1644 171C 85 11			sta :bp+1
  1645 171E 98				tya
  1646 171F 18 69 28			add #$28
  1647 1722 A8				tay
  1648 1723 90 02			scc
  1649 1725 E6 11			inc :bp+1
  1650 1727 B1 10			lda (:bp),y
  1651 1729 C9 20			cmp #$20
  1652 172B D0 03			jne l_06FC
  1653 172D EE DE 2A			inc L
  1654 1730			l_06FC
  1655
  1656 				; optimize OK (ai.inc), line = 54
  1657
  1658 1730 A5 5D			lda T0W
  1659 1732 38 E5 59			sub I0B
  1660 1735 A8				tay
  1661 1736 A5 5E			lda T0W+1
  1662 1738 E9 00			sbc #$00
  1663 173A 85 11			sta :bp+1
  1664 173C 98				tya
  1665 173D 38 E9 28			sub #$28
  1666 1740 A8				tay
  1667 1741 B0 02			scs
  1668 1743 C6 11			dec :bp+1
  1669 1745 B1 10			lda (:bp),y
  1670 1747 C9 20			cmp #$20
  1671 1749 D0 03			jne l_071F
  1672 174B EE DE 2A			inc L
  1673 174E			l_071F
  1674
  1675 				; --- ForToDoEpilog
  1676 174E C6 59			dec I0B
  1677 1750 10 A5			jpl l_06B3
  1678 1752			l_06C1
  1679 1752			l_06A9
  1680
  1681 				; optimize OK (ai.inc), line = 58
  1682
  1683 1752 A5 5C			lda AVAILDIR
  1684 1754 29 08			and #$08
  1685 1756 F0 5D			jeq l_0743
  1686
  1687 				; optimize OK (ai.inc), line = 59
  1688
  1689 1758 A9 05			lda #$05
  1690 175A 85 59			sta I0B
  1691
  1692 175C			l_074D
  1693 				; --- ForToDoCondition
  1694 175C A5 59			lda I0B
  1695 175E C9 01			cmp #$01
  1696 1760 90 53			jcc l_075B
  1697
  1698 				; optimize OK (ai.inc), line = 60
  1699
  1700 1762 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  1701 176A A4 59			ldy I0B
  1702 176C B1 12			lda (:bp2),y
  1703 176E C9 20			cmp #$20
  1704 1770 D0 03			jne l_0773
  1705 1772 EE DF 2A			inc R
  1706 1775			l_0773
  1707
  1708 				; optimize OK (ai.inc), line = 61
  1709
  1710 1775 A5 5D			lda T0W
  1711 1777 18 65 59			add I0B
  1712 177A A8				tay
  1713 177B A5 5E			lda T0W+1
  1714 177D 69 00			adc #$00
  1715 177F 85 11			sta :bp+1
  1716 1781 98				tya
  1717 1782 18 69 28			add #$28
  1718 1785 A8				tay
  1719 1786 90 02			scc
  1720 1788 E6 11			inc :bp+1
  1721 178A B1 10			lda (:bp),y
  1722 178C C9 20			cmp #$20
  1723 178E D0 03			jne l_0796
  1724 1790 EE DF 2A			inc R
  1725 1793			l_0796
  1726
  1727 				; optimize OK (ai.inc), line = 62
  1728
  1729 1793 A5 5D			lda T0W
  1730 1795 18 65 59			add I0B
  1731 1798 A8				tay
  1732 1799 A5 5E			lda T0W+1
  1733 179B 69 00			adc #$00
  1734 179D 85 11			sta :bp+1
  1735 179F 98				tya
  1736 17A0 38 E9 28			sub #$28
  1737 17A3 A8				tay
  1738 17A4 B0 02			scs
  1739 17A6 C6 11			dec :bp+1
  1740 17A8 B1 10			lda (:bp),y
  1741 17AA C9 20			cmp #$20
  1742 17AC D0 03			jne l_07B9
  1743 17AE EE DF 2A			inc R
  1744 17B1			l_07B9
  1745
  1746 				; --- ForToDoEpilog
  1747 17B1 C6 59			dec I0B
  1748 17B3 10 A7			jpl l_074D
  1749 17B5			l_075B
  1750 17B5			l_0743
  1751
  1752 				; optimize OK (ai.inc), line = 66
  1753
  1754 17B5 AD E1 2A			lda D
  1755 17B8 85 58			sta T0B
  1756
  1757 				; optimize OK (ai.inc), line = 67
  1758
  1759 17BA CD E0 2A			cmp U
  1760 17BD B0 05			jcs l_07E1
  1761 17BF AD E0 2A			lda U
  1762 17C2 85 58			sta T0B
  1763 17C4			l_07E1
  1764
  1765 				; optimize OK (ai.inc), line = 68
  1766
  1767 17C4 A5 58			lda T0B
  1768 17C6 CD DE 2A			cmp L
  1769 17C9 B0 05			jcs l_07FE
  1770 17CB AD DE 2A			lda L
  1771 17CE 85 58			sta T0B
  1772 17D0			l_07FE
  1773
  1774 				; optimize OK (ai.inc), line = 69
  1775
  1776 17D0 A5 58			lda T0B
  1777 17D2 CD DF 2A			cmp R
  1778 17D5 B0 05			jcs l_081B
  1779 17D7 AD DF 2A			lda R
  1780 17DA 85 58			sta T0B
  1781 17DC			l_081B
  1782
  1783 				; optimize OK (ai.inc), line = 71
  1784
  1785 17DC A5 58			lda T0B
  1786 17DE CD E1 2A			cmp D
  1787 17E1 D0 04			jne l_0838
  1788 17E3 A9 02			lda #$02
  1789 17E5 85 58			sta T0B
  1790 17E7			l_0838
  1791
  1792 				; optimize OK (ai.inc), line = 72
  1793
  1794 17E7 A5 58			lda T0B
  1795 17E9 CD E0 2A			cmp U
  1796 17EC D0 04			jne l_0853
  1797 17EE A9 01			lda #$01
  1798 17F0 85 58			sta T0B
  1799 17F2			l_0853
  1800
  1801 				; optimize OK (ai.inc), line = 73
  1802
  1803 17F2 A5 58			lda T0B
  1804 17F4 CD DE 2A			cmp L
  1805 17F7 D0 04			jne l_086E
  1806 17F9 A9 04			lda #$04
  1807 17FB 85 58			sta T0B
  1808 17FD			l_086E
  1809
  1810 				; optimize OK (ai.inc), line = 74
  1811
  1812 17FD A5 58			lda T0B
  1813 17FF CD DF 2A			cmp R
  1814 1802 D0 04			jne l_0889
  1815 1804 A9 08			lda #$08
  1816 1806 85 58			sta T0B
  1817 1808			l_0889
  1818
  1819 				; optimize OK (ai.inc), line = 76
  1820
  1821 1808 A5 5C			lda AVAILDIR
  1822 180A 25 58			and T0B
  1823 180C F0 07			jeq l_08A8
  1824 180E A5 58			lda T0B
  1825 1810 85 5B			sta NEWDIR
  1826 1812 4C 18 18			jmp l_08B8
  1827 1815			l_08A8
  1828
  1829 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77
  1830
  1831 1815 20 3A 15			jsr AISTRAIGHT
  1832 1818			l_08B8
  1833
  1834 				; ------------------------------------------------------------
  1835
  1836 = 2ADE			L	= DATAORIGIN+$005A
  1837 = 2ADF			R	= DATAORIGIN+$005B
  1838 = 2AE0			U	= DATAORIGIN+$005C
  1839 = 2AE1			D	= DATAORIGIN+$005D
  1840 = 0001			@FORTMP_0570	= $01
  1841 = 0001			@FORTMP_0610	= $01
  1842 = 0001			@FORTMP_06B0	= $01
  1843 = 0001			@FORTMP_074A	= $01
  1844
  1845 = 2ADE			@VarData	= L
  1846 = 0004			@VarDataSize	= 4
  1847
  1848 1818			@exit
  1849 					.ifdef @new
  1850 					lda <@VarData
  1851 					sta :ztmp
  1852 					lda >@VarData
  1853 					ldy #@VarDataSize-1
  1854 					jmp @FreeMem
  1855 					els
  1856 1818 60				rts						; ret
  1857 					eif
  1858 				.endl
  1859
  1860 1819			.local	AIBULLY						; PROCEDURE
  1861
  1862 				; optimize OK (ai.inc), line = 84
  1863
  1864 1819 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1865 1823 A0 04			ldy #PLY.DIR-DATAORIGIN
  1866 1825 B1 12			lda (:bp2),y
  1867 1827 85 58			sta T0B
  1868
  1869 				; optimize OK (ai.inc), line = 86
  1870
  1871 1829 AD 9D 2A			lda PLAYER1.ISALIVE
  1872 182C 0D A5 2A			ora PLAYER2.ISALIVE
  1873 182F D0 03 4C D6 18		jeq l_08D5
  1874
  1875 				; optimize OK (ai.inc), line = 88
  1876
  1877 1834 AD 9D 2A			lda PLAYER1.ISALIVE
  1878 1837 F0 0F			jeq l_08E2
  1879 1839 AD 77 2A			lda PLAYER1
  1880 183C 8D 75 2A			sta TMPPLY
  1881 183F AD 78 2A			lda PLAYER1+1
  1882 1842 8D 76 2A			sta TMPPLY+1
  1883 1845 4C 54 18			jmp l_08F1
  1884 1848			l_08E2
  1885 1848 AD 79 2A			lda PLAYER2
  1886 184B 8D 75 2A			sta TMPPLY
  1887 184E AD 7A 2A			lda PLAYER2+1
  1888 1851 8D 76 2A			sta TMPPLY+1
  1889 1854			l_08F1
  1890
  1891 				; optimize OK (ai.inc), line = 90
  1892
  1893 1854 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1894 185E A0 01			ldy #PLY.Y-DATAORIGIN
  1895 1860 B1 12			lda (:bp2),y
  1896 1862 85 21			sta :STACKORIGIN+9
  1897 1864 AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1898 186E A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1899 1870 B1 12			lda (:bp2),y
  1900 1872 C5 21			cmp :STACKORIGIN+9
  1901 1874 B0 07			jcs l_090A
  1902 1876 A9 01			lda #$01
  1903 1878 85 58			sta T0B
  1904 187A 4C 81 18			jmp l_0918
  1905 187D			l_090A
  1906 187D A9 02			lda #$02
  1907 187F 85 58			sta T0B
  1908 1881			l_0918
  1909
  1910 				; optimize OK (ai.inc), line = 91
  1911
  1912 1881 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1913 188B A0 01			ldy #PLY.Y-DATAORIGIN
  1914 188D B1 12			lda (:bp2),y
  1915 188F 85 21			sta :STACKORIGIN+9
  1916 1891 AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1917 189B A0 01			ldy #TMPPLY.Y-DATAORIGIN
  1918 189D B1 12			lda (:bp2),y
  1919 189F C5 21			cmp :STACKORIGIN+9
  1920 18A1 F0 06			jeq l_0942x
  1921 18A3 A5 5C			lda AVAILDIR
  1922 18A5 25 58			and T0B
  1923 18A7 D0 2D			jne l_0942
  1924 18A9			l_0942x
  1925
  1926 				; optimize OK (ai.inc), line = 92
  1927
  1928 18A9 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1929 18B3 A0 00			ldy #PLY.X-DATAORIGIN
  1930 18B5 B1 12			lda (:bp2),y
  1931 18B7 85 21			sta :STACKORIGIN+9
  1932 18B9 AC 75 2A 84 12 AC + 	mwy TMPPLY :bp2
  1933 18C3 A0 00			ldy #TMPPLY.X-DATAORIGIN
  1934 18C5 B1 12			lda (:bp2),y
  1935 18C7 C5 21			cmp :STACKORIGIN+9
  1936 18C9 B0 07			jcs l_0957
  1937 18CB A9 04			lda #$04
  1938 18CD 85 58			sta T0B
  1939 18CF 4C D6 18			jmp l_0965
  1940 18D2			l_0957
  1941 18D2 A9 08			lda #$08
  1942 18D4 85 58			sta T0B
  1943 18D6			l_0965
  1944 18D6			l_0942
  1945 18D6			l_08D5
  1946
  1947 				; optimize OK (ai.inc), line = 96
  1948
  1949 18D6 A5 5C			lda AVAILDIR
  1950 18D8 25 58			and T0B
  1951 18DA F0 07			jeq l_0985
  1952 18DC A5 58			lda T0B
  1953 18DE 85 5B			sta NEWDIR
  1954 18E0 4C E6 18			jmp l_0995
  1955 18E3			l_0985
  1956
  1957 				; optimize FAIL ('AISAPPER', ai.inc), line = 97
  1958
  1959 18E3 20 BF 15			jsr AISAPPER
  1960 18E6			l_0995
  1961 18E6			@exit
  1962 					.ifdef @new
  1963 					lda <@VarData
  1964 					sta :ztmp
  1965 					lda >@VarData
  1966 					ldy #@VarDataSize-1
  1967 					jmp @FreeMem
  1968 					els
  1969 18E6 60				rts						; ret
  1970 					eif
  1971 				.endl
  1972
  1973 18E7			.local	AIMIRROR					; PROCEDURE
  1974
  1975 				; optimize OK (ai.inc), line = 105
  1976
  1977 18E7 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  1978 18F1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1979 18F3 B1 12			lda (:bp2),y
  1980 18F5 85 58			sta T0B
  1981
  1982 				; optimize OK (ai.inc), line = 107
  1983
  1984 18F7 AD 9D 2A			lda PLAYER1.ISALIVE
  1985 18FA F0 2F			jeq l_09AC
  1986
  1987 				; optimize OK (ai.inc), line = 108
  1988
  1989 18FC AD 9A 2A			lda PLAYER1.DIR
  1990 18FF 8D E2 2A			sta @CASETMP_0005
  1991 1902 C9 01			cmp #$01
  1992 1904 D0 07			jne l_09B8
  1993 1906			@
  1994
  1995 				; optimize OK (ai.inc), line = 109
  1996
  1997 1906 A9 02			lda #$02
  1998 1908 85 58			sta T0B
  1999
  2000 190A 4C 2B 19			jmp a_0005
  2001 190D			l_09B8
  2002 190D C9 02			cmp #$02
  2003 190F D0 07			jne l_09C5
  2004 1911			@
  2005
  2006 				; optimize OK (ai.inc), line = 110
  2007
  2008 1911 A9 01			lda #$01
  2009 1913 85 58			sta T0B
  2010
  2011 1915 4C 2B 19			jmp a_0005
  2012 1918			l_09C5
  2013 1918 C9 04			cmp #$04
  2014 191A D0 07			jne l_09D2
  2015 191C			@
  2016
  2017 				; optimize OK (ai.inc), line = 111
  2018
  2019 191C A9 08			lda #$08
  2020 191E 85 58			sta T0B
  2021
  2022 1920 4C 2B 19			jmp a_0005
  2023 1923			l_09D2
  2024 1923 C9 08			cmp #$08
  2025 1925 D0 04			jne l_09DF
  2026 1927			@
  2027
  2028 				; optimize OK (ai.inc), line = 112
  2029
  2030 1927 A9 04			lda #$04
  2031 1929 85 58			sta T0B
  2032
  2033 192B			l_09DF
  2034 192B			a_0005
  2035 192B			l_09AC
  2036
  2037 				; optimize OK (ai.inc), line = 116
  2038
  2039 192B A5 5C			lda AVAILDIR
  2040 192D 25 58			and T0B
  2041 192F F0 07			jeq l_0A05
  2042 1931 A5 58			lda T0B
  2043 1933 85 5B			sta NEWDIR
  2044 1935 4C 3B 19			jmp l_0A15
  2045 1938			l_0A05
  2046
  2047 				; optimize FAIL ('AISAPPER', ai.inc), line = 117
  2048
  2049 1938 20 BF 15			jsr AISAPPER
  2050 193B			l_0A15
  2051
  2052 				; ------------------------------------------------------------
  2053
  2054 = 2AE2			@CASETMP_0005	= DATAORIGIN+$005E
  2055
  2056 = 2AE2			@VarData	= @CASETMP_0005
  2057 = 0001			@VarDataSize	= 1
  2058
  2059 193B			@exit
  2060 					.ifdef @new
  2061 					lda <@VarData
  2062 					sta :ztmp
  2063 					lda >@VarData
  2064 					ldy #@VarDataSize-1
  2065 					jmp @FreeMem
  2066 					els
  2067 193B 60				rts						; ret
  2068 					eif
  2069 				.endl
  2070
  2071 193C			.local	SETLEVEL00					; PROCEDURE
  2072
  2073 				; optimize OK (levels.inc), line = 5
  2074
  2075 193C A9 01			lda #$01
  2076 193E 8D DB 2A			sta SETPLAYER.ISALIVE
  2077 1941 A9 62			lda #$62
  2078 1943 8D DA 2A			sta SETPLAYER.COLOUR
  2079 1946 A9 51			lda #$51
  2080 1948 8D D9 2A			sta SETPLAYER.HEAD
  2081 194B A9 00			lda #$00
  2082 194D 8D D8 2A			sta SETPLAYER.BRAIN
  2083 1950 A9 08			lda #$08
  2084 1952 8D D7 2A			sta SETPLAYER.DIR
  2085 1955 A9 0C			lda #$0C
  2086 1957 8D D6 2A			sta SETPLAYER.Y
  2087 195A A9 0A			lda #$0A
  2088 195C 8D D5 2A			sta SETPLAYER.X
  2089 195F AD 77 2A			lda PLAYER1
  2090 1962 8D D3 2A			sta SETPLAYER.P
  2091 1965 AD 78 2A			lda PLAYER1+1
  2092 1968 8D D4 2A			sta SETPLAYER.P+1
  2093 196B 20 23 14			jsr SETPLAYER
  2094
  2095 				; optimize OK (levels.inc), line = 6
  2096
  2097 196E A9 01			lda #$01
  2098 1970 8D DB 2A			sta SETPLAYER.ISALIVE
  2099 1973 A9 5D			lda #$5D
  2100 1975 8D DA 2A			sta SETPLAYER.COLOUR
  2101 1978 A9 51			lda #$51
  2102 197A 8D D9 2A			sta SETPLAYER.HEAD
  2103 197D A9 01			lda #$01
  2104 197F 8D D8 2A			sta SETPLAYER.BRAIN
  2105 1982 A9 04			lda #$04
  2106 1984 8D D7 2A			sta SETPLAYER.DIR
  2107 1987 A9 0C			lda #$0C
  2108 1989 8D D6 2A			sta SETPLAYER.Y
  2109 198C A9 1E			lda #$1E
  2110 198E 8D D5 2A			sta SETPLAYER.X
  2111 1991 AD 79 2A			lda PLAYER2
  2112 1994 8D D3 2A			sta SETPLAYER.P
  2113 1997 AD 7A 2A			lda PLAYER2+1
  2114 199A 8D D4 2A			sta SETPLAYER.P+1
  2115 199D 20 23 14			jsr SETPLAYER
  2116
  2117 				; optimize FAIL (1, levels.inc), line = 8
  2118
  2119 19A0 E8				inx
  2120 19A1 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2121 19A5 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2122 19A7 A9 06			lda #$06
  2123 19A9 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2124 19AC A9 0A			lda #$0A
  2125 19AE 8D CF 2A			sta CALCOBSTACLEADDR.X
  2126 19B1 20 F3 12			jsr CALCOBSTACLEADDR
  2127 19B4 B4 17			ldy :STACKORIGIN-1,x
  2128 19B6 B5 18			lda :STACKORIGIN,x
  2129 19B8 99 B6 2A			sta adr.OBSTACLES,y
  2130 19BB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2131 19BD 99 B7 2A			sta adr.OBSTACLES+1,y
  2132 19C0 CA				dex
  2133
  2134 				; optimize FAIL (1, levels.inc), line = 9
  2135
  2136 19C1 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2137 19C5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2138 19C9 A9 06			lda #$06
  2139 19CB 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2140 19CE A9 1E			lda #$1E
  2141 19D0 8D CF 2A			sta CALCOBSTACLEADDR.X
  2142 19D3 20 F3 12			jsr CALCOBSTACLEADDR
  2143 19D6 B4 17			ldy :STACKORIGIN-1,x
  2144 19D8 B5 18			lda :STACKORIGIN,x
  2145 19DA 99 B6 2A			sta adr.OBSTACLES,y
  2146 19DD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2147 19DF 99 B7 2A			sta adr.OBSTACLES+1,y
  2148 19E2 CA				dex
  2149
  2150 				; optimize FAIL (1, levels.inc), line = 10
  2151
  2152 19E3 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2153 19E7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2154 19EB A9 12			lda #$12
  2155 19ED 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2156 19F0 A9 0A			lda #$0A
  2157 19F2 8D CF 2A			sta CALCOBSTACLEADDR.X
  2158 19F5 20 F3 12			jsr CALCOBSTACLEADDR
  2159 19F8 B4 17			ldy :STACKORIGIN-1,x
  2160 19FA B5 18			lda :STACKORIGIN,x
  2161 19FC 99 B6 2A			sta adr.OBSTACLES,y
  2162 19FF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2163 1A01 99 B7 2A			sta adr.OBSTACLES+1,y
  2164 1A04 CA				dex
  2165
  2166 				; optimize FAIL (1, levels.inc), line = 11
  2167
  2168 1A05 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2169 1A09 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2170 1A0D A9 12			lda #$12
  2171 1A0F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2172 1A12 A9 1E			lda #$1E
  2173 1A14 8D CF 2A			sta CALCOBSTACLEADDR.X
  2174 1A17 20 F3 12			jsr CALCOBSTACLEADDR
  2175 1A1A B4 17			ldy :STACKORIGIN-1,x
  2176 1A1C B5 18			lda :STACKORIGIN,x
  2177 1A1E 99 B6 2A			sta adr.OBSTACLES,y
  2178 1A21 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2179 1A23 99 B7 2A			sta adr.OBSTACLES+1,y
  2180 1A26 CA				dex
  2181
  2182 				; optimize FAIL (1, levels.inc), line = 12
  2183
  2184 1A27 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2185 1A2B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2186 1A2F A9 02			lda #$02
  2187 1A31 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2188 1A34 A9 14			lda #$14
  2189 1A36 8D CF 2A			sta CALCOBSTACLEADDR.X
  2190 1A39 20 F3 12			jsr CALCOBSTACLEADDR
  2191 1A3C B4 17			ldy :STACKORIGIN-1,x
  2192 1A3E B5 18			lda :STACKORIGIN,x
  2193 1A40 99 B6 2A			sta adr.OBSTACLES,y
  2194 1A43 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2195 1A45 99 B7 2A			sta adr.OBSTACLES+1,y
  2196 1A48 CA				dex
  2197
  2198 				; optimize FAIL (1, levels.inc), line = 13
  2199
  2200 1A49 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2201 1A4D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2202 1A51 A9 16			lda #$16
  2203 1A53 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2204 1A56 A9 14			lda #$14
  2205 1A58 8D CF 2A			sta CALCOBSTACLEADDR.X
  2206 1A5B 20 F3 12			jsr CALCOBSTACLEADDR
  2207 1A5E B4 17			ldy :STACKORIGIN-1,x
  2208 1A60 B5 18			lda :STACKORIGIN,x
  2209 1A62 99 B6 2A			sta adr.OBSTACLES,y
  2210 1A65 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2211 1A67 99 B7 2A			sta adr.OBSTACLES+1,y
  2212 1A6A CA				dex
  2213 1A6B CA				dex
  2214 1A6C			@exit
  2215 					.ifdef @new
  2216 					lda <@VarData
  2217 					sta :ztmp
  2218 					lda >@VarData
  2219 					ldy #@VarDataSize-1
  2220 					jmp @FreeMem
  2221 					els
  2222 1A6C 60				rts						; ret
  2223 					eif
  2224 				.endl
  2225
  2226 1A6D			.local	SETLEVEL01					; PROCEDURE
  2227
  2228 				; optimize OK (levels.inc), line = 20
  2229
  2230 1A6D A9 01			lda #$01
  2231 1A6F 8D DB 2A			sta SETPLAYER.ISALIVE
  2232 1A72 A9 62			lda #$62
  2233 1A74 8D DA 2A			sta SETPLAYER.COLOUR
  2234 1A77 A9 51			lda #$51
  2235 1A79 8D D9 2A			sta SETPLAYER.HEAD
  2236 1A7C A9 00			lda #$00
  2237 1A7E 8D D8 2A			sta SETPLAYER.BRAIN
  2238 1A81 A9 08			lda #$08
  2239 1A83 8D D7 2A			sta SETPLAYER.DIR
  2240 1A86 A9 0C			lda #$0C
  2241 1A88 8D D6 2A			sta SETPLAYER.Y
  2242 1A8B A9 0A			lda #$0A
  2243 1A8D 8D D5 2A			sta SETPLAYER.X
  2244 1A90 AD 77 2A			lda PLAYER1
  2245 1A93 8D D3 2A			sta SETPLAYER.P
  2246 1A96 AD 78 2A			lda PLAYER1+1
  2247 1A99 8D D4 2A			sta SETPLAYER.P+1
  2248 1A9C 20 23 14			jsr SETPLAYER
  2249
  2250 				; optimize OK (levels.inc), line = 21
  2251
  2252 1A9F A9 01			lda #$01
  2253 1AA1 8D DB 2A			sta SETPLAYER.ISALIVE
  2254 1AA4 A9 5D			lda #$5D
  2255 1AA6 8D DA 2A			sta SETPLAYER.COLOUR
  2256 1AA9 A9 51			lda #$51
  2257 1AAB 8D D9 2A			sta SETPLAYER.HEAD
  2258 1AAE A9 01			lda #$01
  2259 1AB0 8D D8 2A			sta SETPLAYER.BRAIN
  2260 1AB3 A9 04			lda #$04
  2261 1AB5 8D D7 2A			sta SETPLAYER.DIR
  2262 1AB8 A9 0C			lda #$0C
  2263 1ABA 8D D6 2A			sta SETPLAYER.Y
  2264 1ABD A9 1E			lda #$1E
  2265 1ABF 8D D5 2A			sta SETPLAYER.X
  2266 1AC2 AD 79 2A			lda PLAYER2
  2267 1AC5 8D D3 2A			sta SETPLAYER.P
  2268 1AC8 AD 7A 2A			lda PLAYER2+1
  2269 1ACB 8D D4 2A			sta SETPLAYER.P+1
  2270 1ACE 20 23 14			jsr SETPLAYER
  2271
  2272 				; optimize FAIL (1, levels.inc), line = 23
  2273
  2274 1AD1 E8				inx
  2275 1AD2 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2276 1AD6 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2277 1AD8 A9 06			lda #$06
  2278 1ADA 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2279 1ADD A9 0A			lda #$0A
  2280 1ADF 8D CF 2A			sta CALCOBSTACLEADDR.X
  2281 1AE2 20 F3 12			jsr CALCOBSTACLEADDR
  2282 1AE5 B4 17			ldy :STACKORIGIN-1,x
  2283 1AE7 B5 18			lda :STACKORIGIN,x
  2284 1AE9 99 B6 2A			sta adr.OBSTACLES,y
  2285 1AEC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2286 1AEE 99 B7 2A			sta adr.OBSTACLES+1,y
  2287 1AF1 CA				dex
  2288
  2289 				; optimize FAIL (1, levels.inc), line = 24
  2290
  2291 1AF2 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2292 1AF6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2293 1AFA A9 06			lda #$06
  2294 1AFC 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2295 1AFF A9 1E			lda #$1E
  2296 1B01 8D CF 2A			sta CALCOBSTACLEADDR.X
  2297 1B04 20 F3 12			jsr CALCOBSTACLEADDR
  2298 1B07 B4 17			ldy :STACKORIGIN-1,x
  2299 1B09 B5 18			lda :STACKORIGIN,x
  2300 1B0B 99 B6 2A			sta adr.OBSTACLES,y
  2301 1B0E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2302 1B10 99 B7 2A			sta adr.OBSTACLES+1,y
  2303 1B13 CA				dex
  2304
  2305 				; optimize FAIL (1, levels.inc), line = 25
  2306
  2307 1B14 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2308 1B18 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2309 1B1C A9 12			lda #$12
  2310 1B1E 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2311 1B21 A9 0A			lda #$0A
  2312 1B23 8D CF 2A			sta CALCOBSTACLEADDR.X
  2313 1B26 20 F3 12			jsr CALCOBSTACLEADDR
  2314 1B29 B4 17			ldy :STACKORIGIN-1,x
  2315 1B2B B5 18			lda :STACKORIGIN,x
  2316 1B2D 99 B6 2A			sta adr.OBSTACLES,y
  2317 1B30 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2318 1B32 99 B7 2A			sta adr.OBSTACLES+1,y
  2319 1B35 CA				dex
  2320
  2321 				; optimize FAIL (1, levels.inc), line = 26
  2322
  2323 1B36 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2324 1B3A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2325 1B3E A9 12			lda #$12
  2326 1B40 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2327 1B43 A9 1E			lda #$1E
  2328 1B45 8D CF 2A			sta CALCOBSTACLEADDR.X
  2329 1B48 20 F3 12			jsr CALCOBSTACLEADDR
  2330 1B4B B4 17			ldy :STACKORIGIN-1,x
  2331 1B4D B5 18			lda :STACKORIGIN,x
  2332 1B4F 99 B6 2A			sta adr.OBSTACLES,y
  2333 1B52 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2334 1B54 99 B7 2A			sta adr.OBSTACLES+1,y
  2335 1B57 CA				dex
  2336
  2337 				; optimize FAIL (1, levels.inc), line = 27
  2338
  2339 1B58 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2340 1B5C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2341 1B60 A9 02			lda #$02
  2342 1B62 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2343 1B65 A9 14			lda #$14
  2344 1B67 8D CF 2A			sta CALCOBSTACLEADDR.X
  2345 1B6A 20 F3 12			jsr CALCOBSTACLEADDR
  2346 1B6D B4 17			ldy :STACKORIGIN-1,x
  2347 1B6F B5 18			lda :STACKORIGIN,x
  2348 1B71 99 B6 2A			sta adr.OBSTACLES,y
  2349 1B74 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2350 1B76 99 B7 2A			sta adr.OBSTACLES+1,y
  2351 1B79 CA				dex
  2352
  2353 				; optimize FAIL (1, levels.inc), line = 28
  2354
  2355 1B7A A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2356 1B7E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2357 1B82 A9 16			lda #$16
  2358 1B84 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2359 1B87 A9 14			lda #$14
  2360 1B89 8D CF 2A			sta CALCOBSTACLEADDR.X
  2361 1B8C 20 F3 12			jsr CALCOBSTACLEADDR
  2362 1B8F B4 17			ldy :STACKORIGIN-1,x
  2363 1B91 B5 18			lda :STACKORIGIN,x
  2364 1B93 99 B6 2A			sta adr.OBSTACLES,y
  2365 1B96 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2366 1B98 99 B7 2A			sta adr.OBSTACLES+1,y
  2367 1B9B CA				dex
  2368 1B9C CA				dex
  2369 1B9D			@exit
  2370 					.ifdef @new
  2371 					lda <@VarData
  2372 					sta :ztmp
  2373 					lda >@VarData
  2374 					ldy #@VarDataSize-1
  2375 					jmp @FreeMem
  2376 					els
  2377 1B9D 60				rts						; ret
  2378 					eif
  2379 				.endl
  2380
  2381 1B9E			.local	SETLEVEL02					; PROCEDURE
  2382
  2383 				; optimize OK (levels.inc), line = 35
  2384
  2385 1B9E A9 01			lda #$01
  2386 1BA0 8D DB 2A			sta SETPLAYER.ISALIVE
  2387 1BA3 A9 62			lda #$62
  2388 1BA5 8D DA 2A			sta SETPLAYER.COLOUR
  2389 1BA8 A9 51			lda #$51
  2390 1BAA 8D D9 2A			sta SETPLAYER.HEAD
  2391 1BAD A9 00			lda #$00
  2392 1BAF 8D D8 2A			sta SETPLAYER.BRAIN
  2393 1BB2 A9 08			lda #$08
  2394 1BB4 8D D7 2A			sta SETPLAYER.DIR
  2395 1BB7 A9 0C			lda #$0C
  2396 1BB9 8D D6 2A			sta SETPLAYER.Y
  2397 1BBC A9 0A			lda #$0A
  2398 1BBE 8D D5 2A			sta SETPLAYER.X
  2399 1BC1 AD 77 2A			lda PLAYER1
  2400 1BC4 8D D3 2A			sta SETPLAYER.P
  2401 1BC7 AD 78 2A			lda PLAYER1+1
  2402 1BCA 8D D4 2A			sta SETPLAYER.P+1
  2403 1BCD 20 23 14			jsr SETPLAYER
  2404
  2405 				; optimize OK (levels.inc), line = 36
  2406
  2407 1BD0 A9 01			lda #$01
  2408 1BD2 8D DB 2A			sta SETPLAYER.ISALIVE
  2409 1BD5 A9 5D			lda #$5D
  2410 1BD7 8D DA 2A			sta SETPLAYER.COLOUR
  2411 1BDA A9 51			lda #$51
  2412 1BDC 8D D9 2A			sta SETPLAYER.HEAD
  2413 1BDF A9 03			lda #$03
  2414 1BE1 8D D8 2A			sta SETPLAYER.BRAIN
  2415 1BE4 A9 04			lda #$04
  2416 1BE6 8D D7 2A			sta SETPLAYER.DIR
  2417 1BE9 A9 0C			lda #$0C
  2418 1BEB 8D D6 2A			sta SETPLAYER.Y
  2419 1BEE A9 1E			lda #$1E
  2420 1BF0 8D D5 2A			sta SETPLAYER.X
  2421 1BF3 AD 79 2A			lda PLAYER2
  2422 1BF6 8D D3 2A			sta SETPLAYER.P
  2423 1BF9 AD 7A 2A			lda PLAYER2+1
  2424 1BFC 8D D4 2A			sta SETPLAYER.P+1
  2425 1BFF 20 23 14			jsr SETPLAYER
  2426
  2427 				; optimize FAIL (1, levels.inc), line = 38
  2428
  2429 1C02 E8				inx
  2430 1C03 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2431 1C07 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2432 1C09 A9 06			lda #$06
  2433 1C0B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2434 1C0E A9 0A			lda #$0A
  2435 1C10 8D CF 2A			sta CALCOBSTACLEADDR.X
  2436 1C13 20 F3 12			jsr CALCOBSTACLEADDR
  2437 1C16 B4 17			ldy :STACKORIGIN-1,x
  2438 1C18 B5 18			lda :STACKORIGIN,x
  2439 1C1A 99 B6 2A			sta adr.OBSTACLES,y
  2440 1C1D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2441 1C1F 99 B7 2A			sta adr.OBSTACLES+1,y
  2442 1C22 CA				dex
  2443
  2444 				; optimize FAIL (1, levels.inc), line = 39
  2445
  2446 1C23 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2447 1C27 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2448 1C2B A9 06			lda #$06
  2449 1C2D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2450 1C30 A9 1E			lda #$1E
  2451 1C32 8D CF 2A			sta CALCOBSTACLEADDR.X
  2452 1C35 20 F3 12			jsr CALCOBSTACLEADDR
  2453 1C38 B4 17			ldy :STACKORIGIN-1,x
  2454 1C3A B5 18			lda :STACKORIGIN,x
  2455 1C3C 99 B6 2A			sta adr.OBSTACLES,y
  2456 1C3F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2457 1C41 99 B7 2A			sta adr.OBSTACLES+1,y
  2458 1C44 CA				dex
  2459
  2460 				; optimize FAIL (1, levels.inc), line = 40
  2461
  2462 1C45 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2463 1C49 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2464 1C4D A9 12			lda #$12
  2465 1C4F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2466 1C52 A9 0A			lda #$0A
  2467 1C54 8D CF 2A			sta CALCOBSTACLEADDR.X
  2468 1C57 20 F3 12			jsr CALCOBSTACLEADDR
  2469 1C5A B4 17			ldy :STACKORIGIN-1,x
  2470 1C5C B5 18			lda :STACKORIGIN,x
  2471 1C5E 99 B6 2A			sta adr.OBSTACLES,y
  2472 1C61 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2473 1C63 99 B7 2A			sta adr.OBSTACLES+1,y
  2474 1C66 CA				dex
  2475
  2476 				; optimize FAIL (1, levels.inc), line = 41
  2477
  2478 1C67 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2479 1C6B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2480 1C6F A9 12			lda #$12
  2481 1C71 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2482 1C74 A9 1E			lda #$1E
  2483 1C76 8D CF 2A			sta CALCOBSTACLEADDR.X
  2484 1C79 20 F3 12			jsr CALCOBSTACLEADDR
  2485 1C7C B4 17			ldy :STACKORIGIN-1,x
  2486 1C7E B5 18			lda :STACKORIGIN,x
  2487 1C80 99 B6 2A			sta adr.OBSTACLES,y
  2488 1C83 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2489 1C85 99 B7 2A			sta adr.OBSTACLES+1,y
  2490 1C88 CA				dex
  2491
  2492 				; optimize FAIL (1, levels.inc), line = 42
  2493
  2494 1C89 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2495 1C8D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2496 1C91 A9 02			lda #$02
  2497 1C93 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2498 1C96 A9 14			lda #$14
  2499 1C98 8D CF 2A			sta CALCOBSTACLEADDR.X
  2500 1C9B 20 F3 12			jsr CALCOBSTACLEADDR
  2501 1C9E B4 17			ldy :STACKORIGIN-1,x
  2502 1CA0 B5 18			lda :STACKORIGIN,x
  2503 1CA2 99 B6 2A			sta adr.OBSTACLES,y
  2504 1CA5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2505 1CA7 99 B7 2A			sta adr.OBSTACLES+1,y
  2506 1CAA CA				dex
  2507
  2508 				; optimize FAIL (1, levels.inc), line = 43
  2509
  2510 1CAB A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2511 1CAF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2512 1CB3 A9 16			lda #$16
  2513 1CB5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2514 1CB8 A9 14			lda #$14
  2515 1CBA 8D CF 2A			sta CALCOBSTACLEADDR.X
  2516 1CBD 20 F3 12			jsr CALCOBSTACLEADDR
  2517 1CC0 B4 17			ldy :STACKORIGIN-1,x
  2518 1CC2 B5 18			lda :STACKORIGIN,x
  2519 1CC4 99 B6 2A			sta adr.OBSTACLES,y
  2520 1CC7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2521 1CC9 99 B7 2A			sta adr.OBSTACLES+1,y
  2522 1CCC CA				dex
  2523 1CCD CA				dex
  2524 1CCE			@exit
  2525 					.ifdef @new
  2526 					lda <@VarData
  2527 					sta :ztmp
  2528 					lda >@VarData
  2529 					ldy #@VarDataSize-1
  2530 					jmp @FreeMem
  2531 					els
  2532 1CCE 60				rts						; ret
  2533 					eif
  2534 				.endl
  2535
  2536 1CCF			.local	SETLEVEL03					; PROCEDURE
  2537
  2538 				; optimize OK (levels.inc), line = 50
  2539
  2540 1CCF A9 01			lda #$01
  2541 1CD1 8D DB 2A			sta SETPLAYER.ISALIVE
  2542 1CD4 A9 62			lda #$62
  2543 1CD6 8D DA 2A			sta SETPLAYER.COLOUR
  2544 1CD9 A9 51			lda #$51
  2545 1CDB 8D D9 2A			sta SETPLAYER.HEAD
  2546 1CDE A9 00			lda #$00
  2547 1CE0 8D D8 2A			sta SETPLAYER.BRAIN
  2548 1CE3 A9 08			lda #$08
  2549 1CE5 8D D7 2A			sta SETPLAYER.DIR
  2550 1CE8 A9 0C			lda #$0C
  2551 1CEA 8D D6 2A			sta SETPLAYER.Y
  2552 1CED A9 0A			lda #$0A
  2553 1CEF 8D D5 2A			sta SETPLAYER.X
  2554 1CF2 AD 77 2A			lda PLAYER1
  2555 1CF5 8D D3 2A			sta SETPLAYER.P
  2556 1CF8 AD 78 2A			lda PLAYER1+1
  2557 1CFB 8D D4 2A			sta SETPLAYER.P+1
  2558 1CFE 20 23 14			jsr SETPLAYER
  2559
  2560 				; optimize OK (levels.inc), line = 51
  2561
  2562 1D01 A9 01			lda #$01
  2563 1D03 8D DB 2A			sta SETPLAYER.ISALIVE
  2564 1D06 A9 5D			lda #$5D
  2565 1D08 8D DA 2A			sta SETPLAYER.COLOUR
  2566 1D0B A9 51			lda #$51
  2567 1D0D 8D D9 2A			sta SETPLAYER.HEAD
  2568 1D10 A9 02			lda #$02
  2569 1D12 8D D8 2A			sta SETPLAYER.BRAIN
  2570 1D15 A9 04			lda #$04
  2571 1D17 8D D7 2A			sta SETPLAYER.DIR
  2572 1D1A A9 0C			lda #$0C
  2573 1D1C 8D D6 2A			sta SETPLAYER.Y
  2574 1D1F A9 1E			lda #$1E
  2575 1D21 8D D5 2A			sta SETPLAYER.X
  2576 1D24 AD 79 2A			lda PLAYER2
  2577 1D27 8D D3 2A			sta SETPLAYER.P
  2578 1D2A AD 7A 2A			lda PLAYER2+1
  2579 1D2D 8D D4 2A			sta SETPLAYER.P+1
  2580 1D30 20 23 14			jsr SETPLAYER
  2581
  2582 				; optimize FAIL (1, levels.inc), line = 53
  2583
  2584 1D33 E8				inx
  2585 1D34 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2586 1D38 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2587 1D3A A9 06			lda #$06
  2588 1D3C 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2589 1D3F A9 0A			lda #$0A
  2590 1D41 8D CF 2A			sta CALCOBSTACLEADDR.X
  2591 1D44 20 F3 12			jsr CALCOBSTACLEADDR
  2592 1D47 B4 17			ldy :STACKORIGIN-1,x
  2593 1D49 B5 18			lda :STACKORIGIN,x
  2594 1D4B 99 B6 2A			sta adr.OBSTACLES,y
  2595 1D4E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2596 1D50 99 B7 2A			sta adr.OBSTACLES+1,y
  2597 1D53 CA				dex
  2598
  2599 				; optimize FAIL (1, levels.inc), line = 54
  2600
  2601 1D54 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2602 1D58 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2603 1D5C A9 06			lda #$06
  2604 1D5E 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2605 1D61 A9 1E			lda #$1E
  2606 1D63 8D CF 2A			sta CALCOBSTACLEADDR.X
  2607 1D66 20 F3 12			jsr CALCOBSTACLEADDR
  2608 1D69 B4 17			ldy :STACKORIGIN-1,x
  2609 1D6B B5 18			lda :STACKORIGIN,x
  2610 1D6D 99 B6 2A			sta adr.OBSTACLES,y
  2611 1D70 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2612 1D72 99 B7 2A			sta adr.OBSTACLES+1,y
  2613 1D75 CA				dex
  2614
  2615 				; optimize FAIL (1, levels.inc), line = 55
  2616
  2617 1D76 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2618 1D7A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2619 1D7E A9 12			lda #$12
  2620 1D80 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2621 1D83 A9 0A			lda #$0A
  2622 1D85 8D CF 2A			sta CALCOBSTACLEADDR.X
  2623 1D88 20 F3 12			jsr CALCOBSTACLEADDR
  2624 1D8B B4 17			ldy :STACKORIGIN-1,x
  2625 1D8D B5 18			lda :STACKORIGIN,x
  2626 1D8F 99 B6 2A			sta adr.OBSTACLES,y
  2627 1D92 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2628 1D94 99 B7 2A			sta adr.OBSTACLES+1,y
  2629 1D97 CA				dex
  2630
  2631 				; optimize FAIL (1, levels.inc), line = 56
  2632
  2633 1D98 A9 06 95 18			mva #$06 :STACKORIGIN,x
  2634 1D9C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2635 1DA0 A9 12			lda #$12
  2636 1DA2 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2637 1DA5 A9 1E			lda #$1E
  2638 1DA7 8D CF 2A			sta CALCOBSTACLEADDR.X
  2639 1DAA 20 F3 12			jsr CALCOBSTACLEADDR
  2640 1DAD B4 17			ldy :STACKORIGIN-1,x
  2641 1DAF B5 18			lda :STACKORIGIN,x
  2642 1DB1 99 B6 2A			sta adr.OBSTACLES,y
  2643 1DB4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2644 1DB6 99 B7 2A			sta adr.OBSTACLES+1,y
  2645 1DB9 CA				dex
  2646
  2647 				; optimize FAIL (1, levels.inc), line = 57
  2648
  2649 1DBA A9 08 95 18			mva #$08 :STACKORIGIN,x
  2650 1DBE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2651 1DC2 A9 0C			lda #$0C
  2652 1DC4 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2653 1DC7 A9 01			lda #$01
  2654 1DC9 8D CF 2A			sta CALCOBSTACLEADDR.X
  2655 1DCC 20 F3 12			jsr CALCOBSTACLEADDR
  2656 1DCF B4 17			ldy :STACKORIGIN-1,x
  2657 1DD1 B5 18			lda :STACKORIGIN,x
  2658 1DD3 99 B6 2A			sta adr.OBSTACLES,y
  2659 1DD6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2660 1DD8 99 B7 2A			sta adr.OBSTACLES+1,y
  2661 1DDB CA				dex
  2662
  2663 				; optimize FAIL (1, levels.inc), line = 58
  2664
  2665 1DDC A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2666 1DE0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2667 1DE4 A9 02			lda #$02
  2668 1DE6 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2669 1DE9 A9 14			lda #$14
  2670 1DEB 8D CF 2A			sta CALCOBSTACLEADDR.X
  2671 1DEE 20 F3 12			jsr CALCOBSTACLEADDR
  2672 1DF1 B4 17			ldy :STACKORIGIN-1,x
  2673 1DF3 B5 18			lda :STACKORIGIN,x
  2674 1DF5 99 B6 2A			sta adr.OBSTACLES,y
  2675 1DF8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2676 1DFA 99 B7 2A			sta adr.OBSTACLES+1,y
  2677 1DFD CA				dex
  2678
  2679 				; optimize FAIL (1, levels.inc), line = 59
  2680
  2681 1DFE A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2682 1E02 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2683 1E06 A9 16			lda #$16
  2684 1E08 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2685 1E0B A9 14			lda #$14
  2686 1E0D 8D CF 2A			sta CALCOBSTACLEADDR.X
  2687 1E10 20 F3 12			jsr CALCOBSTACLEADDR
  2688 1E13 B4 17			ldy :STACKORIGIN-1,x
  2689 1E15 B5 18			lda :STACKORIGIN,x
  2690 1E17 99 B6 2A			sta adr.OBSTACLES,y
  2691 1E1A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2692 1E1C 99 B7 2A			sta adr.OBSTACLES+1,y
  2693 1E1F CA				dex
  2694 1E20 CA				dex
  2695 1E21			@exit
  2696 					.ifdef @new
  2697 					lda <@VarData
  2698 					sta :ztmp
  2699 					lda >@VarData
  2700 					ldy #@VarDataSize-1
  2701 					jmp @FreeMem
  2702 					els
  2703 1E21 60				rts						; ret
  2704 					eif
  2705 				.endl
  2706
  2707 1E22			.local	SETLEVEL04					; PROCEDURE
  2708
  2709 				; optimize OK (levels.inc), line = 66
  2710
  2711 1E22 A9 01			lda #$01
  2712 1E24 8D DB 2A			sta SETPLAYER.ISALIVE
  2713 1E27 A9 62			lda #$62
  2714 1E29 8D DA 2A			sta SETPLAYER.COLOUR
  2715 1E2C A9 51			lda #$51
  2716 1E2E 8D D9 2A			sta SETPLAYER.HEAD
  2717 1E31 A9 00			lda #$00
  2718 1E33 8D D8 2A			sta SETPLAYER.BRAIN
  2719 1E36 A9 04			lda #$04
  2720 1E38 8D D7 2A			sta SETPLAYER.DIR
  2721 1E3B A9 0C			lda #$0C
  2722 1E3D 8D D6 2A			sta SETPLAYER.Y
  2723 1E40 A9 12			lda #$12
  2724 1E42 8D D5 2A			sta SETPLAYER.X
  2725 1E45 AD 77 2A			lda PLAYER1
  2726 1E48 8D D3 2A			sta SETPLAYER.P
  2727 1E4B AD 78 2A			lda PLAYER1+1
  2728 1E4E 8D D4 2A			sta SETPLAYER.P+1
  2729 1E51 20 23 14			jsr SETPLAYER
  2730
  2731 				; optimize OK (levels.inc), line = 67
  2732
  2733 1E54 A9 01			lda #$01
  2734 1E56 8D DB 2A			sta SETPLAYER.ISALIVE
  2735 1E59 A9 5D			lda #$5D
  2736 1E5B 8D DA 2A			sta SETPLAYER.COLOUR
  2737 1E5E A9 51			lda #$51
  2738 1E60 8D D9 2A			sta SETPLAYER.HEAD
  2739 1E63 A9 04			lda #$04
  2740 1E65 8D D8 2A			sta SETPLAYER.BRAIN
  2741 1E68 A9 08			lda #$08
  2742 1E6A 8D D7 2A			sta SETPLAYER.DIR
  2743 1E6D A9 0C			lda #$0C
  2744 1E6F 8D D6 2A			sta SETPLAYER.Y
  2745 1E72 A9 16			lda #$16
  2746 1E74 8D D5 2A			sta SETPLAYER.X
  2747 1E77 AD 79 2A			lda PLAYER2
  2748 1E7A 8D D3 2A			sta SETPLAYER.P
  2749 1E7D AD 7A 2A			lda PLAYER2+1
  2750 1E80 8D D4 2A			sta SETPLAYER.P+1
  2751 1E83 20 23 14			jsr SETPLAYER
  2752
  2753 				; optimize FAIL (1, levels.inc), line = 69
  2754
  2755 1E86 E8				inx
  2756 1E87 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2757 1E8B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2758 1E8D A9 06			lda #$06
  2759 1E8F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2760 1E92 A9 0A			lda #$0A
  2761 1E94 8D CF 2A			sta CALCOBSTACLEADDR.X
  2762 1E97 20 F3 12			jsr CALCOBSTACLEADDR
  2763 1E9A B4 17			ldy :STACKORIGIN-1,x
  2764 1E9C B5 18			lda :STACKORIGIN,x
  2765 1E9E 99 B6 2A			sta adr.OBSTACLES,y
  2766 1EA1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2767 1EA3 99 B7 2A			sta adr.OBSTACLES+1,y
  2768 1EA6 CA				dex
  2769
  2770 				; optimize FAIL (1, levels.inc), line = 70
  2771
  2772 1EA7 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2773 1EAB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2774 1EAF A9 06			lda #$06
  2775 1EB1 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2776 1EB4 A9 1E			lda #$1E
  2777 1EB6 8D CF 2A			sta CALCOBSTACLEADDR.X
  2778 1EB9 20 F3 12			jsr CALCOBSTACLEADDR
  2779 1EBC B4 17			ldy :STACKORIGIN-1,x
  2780 1EBE B5 18			lda :STACKORIGIN,x
  2781 1EC0 99 B6 2A			sta adr.OBSTACLES,y
  2782 1EC3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2783 1EC5 99 B7 2A			sta adr.OBSTACLES+1,y
  2784 1EC8 CA				dex
  2785
  2786 				; optimize FAIL (1, levels.inc), line = 71
  2787
  2788 1EC9 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2789 1ECD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2790 1ED1 A9 12			lda #$12
  2791 1ED3 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2792 1ED6 A9 0A			lda #$0A
  2793 1ED8 8D CF 2A			sta CALCOBSTACLEADDR.X
  2794 1EDB 20 F3 12			jsr CALCOBSTACLEADDR
  2795 1EDE B4 17			ldy :STACKORIGIN-1,x
  2796 1EE0 B5 18			lda :STACKORIGIN,x
  2797 1EE2 99 B6 2A			sta adr.OBSTACLES,y
  2798 1EE5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2799 1EE7 99 B7 2A			sta adr.OBSTACLES+1,y
  2800 1EEA CA				dex
  2801
  2802 				; optimize FAIL (1, levels.inc), line = 72
  2803
  2804 1EEB A9 06 95 18			mva #$06 :STACKORIGIN,x
  2805 1EEF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2806 1EF3 A9 12			lda #$12
  2807 1EF5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2808 1EF8 A9 1E			lda #$1E
  2809 1EFA 8D CF 2A			sta CALCOBSTACLEADDR.X
  2810 1EFD 20 F3 12			jsr CALCOBSTACLEADDR
  2811 1F00 B4 17			ldy :STACKORIGIN-1,x
  2812 1F02 B5 18			lda :STACKORIGIN,x
  2813 1F04 99 B6 2A			sta adr.OBSTACLES,y
  2814 1F07 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2815 1F09 99 B7 2A			sta adr.OBSTACLES+1,y
  2816 1F0C CA				dex
  2817
  2818 				; optimize FAIL (1, levels.inc), line = 73
  2819
  2820 1F0D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2821 1F11 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2822 1F15 A9 0C			lda #$0C
  2823 1F17 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2824 1F1A A9 01			lda #$01
  2825 1F1C 8D CF 2A			sta CALCOBSTACLEADDR.X
  2826 1F1F 20 F3 12			jsr CALCOBSTACLEADDR
  2827 1F22 B4 17			ldy :STACKORIGIN-1,x
  2828 1F24 B5 18			lda :STACKORIGIN,x
  2829 1F26 99 B6 2A			sta adr.OBSTACLES,y
  2830 1F29 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2831 1F2B 99 B7 2A			sta adr.OBSTACLES+1,y
  2832 1F2E CA				dex
  2833
  2834 				; optimize FAIL (1, levels.inc), line = 74
  2835
  2836 1F2F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2837 1F33 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2838 1F37 A9 02			lda #$02
  2839 1F39 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2840 1F3C A9 14			lda #$14
  2841 1F3E 8D CF 2A			sta CALCOBSTACLEADDR.X
  2842 1F41 20 F3 12			jsr CALCOBSTACLEADDR
  2843 1F44 B4 17			ldy :STACKORIGIN-1,x
  2844 1F46 B5 18			lda :STACKORIGIN,x
  2845 1F48 99 B6 2A			sta adr.OBSTACLES,y
  2846 1F4B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2847 1F4D 99 B7 2A			sta adr.OBSTACLES+1,y
  2848 1F50 CA				dex
  2849
  2850 				; optimize FAIL (1, levels.inc), line = 75
  2851
  2852 1F51 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  2853 1F55 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2854 1F59 A9 16			lda #$16
  2855 1F5B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2856 1F5E A9 14			lda #$14
  2857 1F60 8D CF 2A			sta CALCOBSTACLEADDR.X
  2858 1F63 20 F3 12			jsr CALCOBSTACLEADDR
  2859 1F66 B4 17			ldy :STACKORIGIN-1,x
  2860 1F68 B5 18			lda :STACKORIGIN,x
  2861 1F6A 99 B6 2A			sta adr.OBSTACLES,y
  2862 1F6D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2863 1F6F 99 B7 2A			sta adr.OBSTACLES+1,y
  2864 1F72 CA				dex
  2865
  2866 				; optimize FAIL (1, levels.inc), line = 76
  2867
  2868 1F73 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  2869 1F77 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2870 1F7B A9 0C			lda #$0C
  2871 1F7D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2872 1F80 A9 14			lda #$14
  2873 1F82 8D CF 2A			sta CALCOBSTACLEADDR.X
  2874 1F85 20 F3 12			jsr CALCOBSTACLEADDR
  2875 1F88 B4 17			ldy :STACKORIGIN-1,x
  2876 1F8A B5 18			lda :STACKORIGIN,x
  2877 1F8C 99 B6 2A			sta adr.OBSTACLES,y
  2878 1F8F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2879 1F91 99 B7 2A			sta adr.OBSTACLES+1,y
  2880 1F94 CA				dex
  2881 1F95 CA				dex
  2882 1F96			@exit
  2883 					.ifdef @new
  2884 					lda <@VarData
  2885 					sta :ztmp
  2886 					lda >@VarData
  2887 					ldy #@VarDataSize-1
  2888 					jmp @FreeMem
  2889 					els
  2890 1F96 60				rts						; ret
  2891 					eif
  2892 				.endl
  2893
  2894 1F97			.local	SETLEVEL05					; PROCEDURE
  2895
  2896 				; optimize OK (levels.inc), line = 83
  2897
  2898 1F97 A9 01			lda #$01
  2899 1F99 8D DB 2A			sta SETPLAYER.ISALIVE
  2900 1F9C A9 62			lda #$62
  2901 1F9E 8D DA 2A			sta SETPLAYER.COLOUR
  2902 1FA1 A9 51			lda #$51
  2903 1FA3 8D D9 2A			sta SETPLAYER.HEAD
  2904 1FA6 A9 00			lda #$00
  2905 1FA8 8D D8 2A			sta SETPLAYER.BRAIN
  2906 1FAB A9 08			lda #$08
  2907 1FAD 8D D7 2A			sta SETPLAYER.DIR
  2908 1FB0 A9 0C			lda #$0C
  2909 1FB2 8D D6 2A			sta SETPLAYER.Y
  2910 1FB5 A9 0A			lda #$0A
  2911 1FB7 8D D5 2A			sta SETPLAYER.X
  2912 1FBA AD 77 2A			lda PLAYER1
  2913 1FBD 8D D3 2A			sta SETPLAYER.P
  2914 1FC0 AD 78 2A			lda PLAYER1+1
  2915 1FC3 8D D4 2A			sta SETPLAYER.P+1
  2916 1FC6 20 23 14			jsr SETPLAYER
  2917
  2918 				; optimize OK (levels.inc), line = 84
  2919
  2920 1FC9 A9 01			lda #$01
  2921 1FCB 8D DB 2A			sta SETPLAYER.ISALIVE
  2922 1FCE A9 5D			lda #$5D
  2923 1FD0 8D DA 2A			sta SETPLAYER.COLOUR
  2924 1FD3 A9 51			lda #$51
  2925 1FD5 8D D9 2A			sta SETPLAYER.HEAD
  2926 1FD8 A9 04			lda #$04
  2927 1FDA 8D D8 2A			sta SETPLAYER.BRAIN
  2928 1FDD 8D D7 2A			sta SETPLAYER.DIR
  2929 1FE0 A9 0C			lda #$0C
  2930 1FE2 8D D6 2A			sta SETPLAYER.Y
  2931 1FE5 A9 1E			lda #$1E
  2932 1FE7 8D D5 2A			sta SETPLAYER.X
  2933 1FEA AD 79 2A			lda PLAYER2
  2934 1FED 8D D3 2A			sta SETPLAYER.P
  2935 1FF0 AD 7A 2A			lda PLAYER2+1
  2936 1FF3 8D D4 2A			sta SETPLAYER.P+1
  2937 1FF6 20 23 14			jsr SETPLAYER
  2938
  2939 				; optimize OK (levels.inc), line = 85
  2940
  2941 1FF9 A9 01			lda #$01
  2942 1FFB 8D DB 2A			sta SETPLAYER.ISALIVE
  2943 1FFE A9 71			lda #$71
  2944 2000 8D DA 2A			sta SETPLAYER.COLOUR
  2945 2003 A9 51			lda #$51
  2946 2005 8D D9 2A			sta SETPLAYER.HEAD
  2947 2008 A9 03			lda #$03
  2948 200A 8D D8 2A			sta SETPLAYER.BRAIN
  2949 200D A9 02			lda #$02
  2950 200F 8D D7 2A			sta SETPLAYER.DIR
  2951 2012 A9 04			lda #$04
  2952 2014 8D D6 2A			sta SETPLAYER.Y
  2953 2017 A9 14			lda #$14
  2954 2019 8D D5 2A			sta SETPLAYER.X
  2955 201C AD 7B 2A			lda PLAYER3
  2956 201F 8D D3 2A			sta SETPLAYER.P
  2957 2022 AD 7C 2A			lda PLAYER3+1
  2958 2025 8D D4 2A			sta SETPLAYER.P+1
  2959 2028 20 23 14			jsr SETPLAYER
  2960
  2961 				; optimize OK (levels.inc), line = 86
  2962
  2963 202B A9 01			lda #$01
  2964 202D 8D DB 2A			sta SETPLAYER.ISALIVE
  2965 2030 A9 55			lda #$55
  2966 2032 8D DA 2A			sta SETPLAYER.COLOUR
  2967 2035 A9 51			lda #$51
  2968 2037 8D D9 2A			sta SETPLAYER.HEAD
  2969 203A A9 02			lda #$02
  2970 203C 8D D8 2A			sta SETPLAYER.BRAIN
  2971 203F A9 01			lda #$01
  2972 2041 8D D7 2A			sta SETPLAYER.DIR
  2973 2044 A9 12			lda #$12
  2974 2046 8D D6 2A			sta SETPLAYER.Y
  2975 2049 A9 14			lda #$14
  2976 204B 8D D5 2A			sta SETPLAYER.X
  2977 204E AD 7D 2A			lda PLAYER4
  2978 2051 8D D3 2A			sta SETPLAYER.P
  2979 2054 AD 7E 2A			lda PLAYER4+1
  2980 2057 8D D4 2A			sta SETPLAYER.P+1
  2981 205A 20 23 14			jsr SETPLAYER
  2982
  2983 				; optimize FAIL (1, levels.inc), line = 88
  2984
  2985 205D E8				inx
  2986 205E A9 00 95 18			mva #$00 :STACKORIGIN,x
  2987 2062 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2988 2064 A9 06			lda #$06
  2989 2066 8D D0 2A			sta CALCOBSTACLEADDR.Y
  2990 2069 A9 0A			lda #$0A
  2991 206B 8D CF 2A			sta CALCOBSTACLEADDR.X
  2992 206E 20 F3 12			jsr CALCOBSTACLEADDR
  2993 2071 B4 17			ldy :STACKORIGIN-1,x
  2994 2073 B5 18			lda :STACKORIGIN,x
  2995 2075 99 B6 2A			sta adr.OBSTACLES,y
  2996 2078 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2997 207A 99 B7 2A			sta adr.OBSTACLES+1,y
  2998 207D CA				dex
  2999
  3000 				; optimize FAIL (1, levels.inc), line = 89
  3001
  3002 207E A9 02 95 18			mva #$02 :STACKORIGIN,x
  3003 2082 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3004 2086 A9 06			lda #$06
  3005 2088 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3006 208B A9 1E			lda #$1E
  3007 208D 8D CF 2A			sta CALCOBSTACLEADDR.X
  3008 2090 20 F3 12			jsr CALCOBSTACLEADDR
  3009 2093 B4 17			ldy :STACKORIGIN-1,x
  3010 2095 B5 18			lda :STACKORIGIN,x
  3011 2097 99 B6 2A			sta adr.OBSTACLES,y
  3012 209A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3013 209C 99 B7 2A			sta adr.OBSTACLES+1,y
  3014 209F CA				dex
  3015
  3016 				; optimize FAIL (1, levels.inc), line = 90
  3017
  3018 20A0 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3019 20A4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3020 20A8 A9 12			lda #$12
  3021 20AA 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3022 20AD A9 0A			lda #$0A
  3023 20AF 8D CF 2A			sta CALCOBSTACLEADDR.X
  3024 20B2 20 F3 12			jsr CALCOBSTACLEADDR
  3025 20B5 B4 17			ldy :STACKORIGIN-1,x
  3026 20B7 B5 18			lda :STACKORIGIN,x
  3027 20B9 99 B6 2A			sta adr.OBSTACLES,y
  3028 20BC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3029 20BE 99 B7 2A			sta adr.OBSTACLES+1,y
  3030 20C1 CA				dex
  3031
  3032 				; optimize FAIL (1, levels.inc), line = 91
  3033
  3034 20C2 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3035 20C6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3036 20CA A9 12			lda #$12
  3037 20CC 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3038 20CF A9 1E			lda #$1E
  3039 20D1 8D CF 2A			sta CALCOBSTACLEADDR.X
  3040 20D4 20 F3 12			jsr CALCOBSTACLEADDR
  3041 20D7 B4 17			ldy :STACKORIGIN-1,x
  3042 20D9 B5 18			lda :STACKORIGIN,x
  3043 20DB 99 B6 2A			sta adr.OBSTACLES,y
  3044 20DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3045 20E0 99 B7 2A			sta adr.OBSTACLES+1,y
  3046 20E3 CA				dex
  3047
  3048 				; optimize FAIL (1, levels.inc), line = 92
  3049
  3050 20E4 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3051 20E8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3052 20EC A9 0C			lda #$0C
  3053 20EE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3054 20F1 A9 01			lda #$01
  3055 20F3 8D CF 2A			sta CALCOBSTACLEADDR.X
  3056 20F6 20 F3 12			jsr CALCOBSTACLEADDR
  3057 20F9 B4 17			ldy :STACKORIGIN-1,x
  3058 20FB B5 18			lda :STACKORIGIN,x
  3059 20FD 99 B6 2A			sta adr.OBSTACLES,y
  3060 2100 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3061 2102 99 B7 2A			sta adr.OBSTACLES+1,y
  3062 2105 CA				dex
  3063
  3064 				; optimize FAIL (1, levels.inc), line = 93
  3065
  3066 2106 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3067 210A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3068 210E A9 02			lda #$02
  3069 2110 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3070 2113 A9 14			lda #$14
  3071 2115 8D CF 2A			sta CALCOBSTACLEADDR.X
  3072 2118 20 F3 12			jsr CALCOBSTACLEADDR
  3073 211B B4 17			ldy :STACKORIGIN-1,x
  3074 211D B5 18			lda :STACKORIGIN,x
  3075 211F 99 B6 2A			sta adr.OBSTACLES,y
  3076 2122 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3077 2124 99 B7 2A			sta adr.OBSTACLES+1,y
  3078 2127 CA				dex
  3079
  3080 				; optimize FAIL (1, levels.inc), line = 94
  3081
  3082 2128 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3083 212C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3084 2130 A9 16			lda #$16
  3085 2132 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3086 2135 A9 14			lda #$14
  3087 2137 8D CF 2A			sta CALCOBSTACLEADDR.X
  3088 213A 20 F3 12			jsr CALCOBSTACLEADDR
  3089 213D B4 17			ldy :STACKORIGIN-1,x
  3090 213F B5 18			lda :STACKORIGIN,x
  3091 2141 99 B6 2A			sta adr.OBSTACLES,y
  3092 2144 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3093 2146 99 B7 2A			sta adr.OBSTACLES+1,y
  3094 2149 CA				dex
  3095 214A CA				dex
  3096 214B			@exit
  3097 					.ifdef @new
  3098 					lda <@VarData
  3099 					sta :ztmp
  3100 					lda >@VarData
  3101 					ldy #@VarDataSize-1
  3102 					jmp @FreeMem
  3103 					els
  3104 214B 60				rts						; ret
  3105 					eif
  3106 				.endl
  3107
  3108 214C			.local	SETLEVEL06					; PROCEDURE
  3109
  3110 				; optimize OK (levels.inc), line = 101
  3111
  3112 214C A9 01			lda #$01
  3113 214E 8D DB 2A			sta SETPLAYER.ISALIVE
  3114 2151 A9 62			lda #$62
  3115 2153 8D DA 2A			sta SETPLAYER.COLOUR
  3116 2156 A9 51			lda #$51
  3117 2158 8D D9 2A			sta SETPLAYER.HEAD
  3118 215B A9 00			lda #$00
  3119 215D 8D D8 2A			sta SETPLAYER.BRAIN
  3120 2160 A9 04			lda #$04
  3121 2162 8D D7 2A			sta SETPLAYER.DIR
  3122 2165 A9 0C			lda #$0C
  3123 2167 8D D6 2A			sta SETPLAYER.Y
  3124 216A A9 12			lda #$12
  3125 216C 8D D5 2A			sta SETPLAYER.X
  3126 216F AD 77 2A			lda PLAYER1
  3127 2172 8D D3 2A			sta SETPLAYER.P
  3128 2175 AD 78 2A			lda PLAYER1+1
  3129 2178 8D D4 2A			sta SETPLAYER.P+1
  3130 217B 20 23 14			jsr SETPLAYER
  3131
  3132 				; optimize OK (levels.inc), line = 102
  3133
  3134 217E A9 01			lda #$01
  3135 2180 8D DB 2A			sta SETPLAYER.ISALIVE
  3136 2183 A9 5D			lda #$5D
  3137 2185 8D DA 2A			sta SETPLAYER.COLOUR
  3138 2188 A9 51			lda #$51
  3139 218A 8D D9 2A			sta SETPLAYER.HEAD
  3140 218D A9 02			lda #$02
  3141 218F 8D D8 2A			sta SETPLAYER.BRAIN
  3142 2192 A9 08			lda #$08
  3143 2194 8D D7 2A			sta SETPLAYER.DIR
  3144 2197 A9 0C			lda #$0C
  3145 2199 8D D6 2A			sta SETPLAYER.Y
  3146 219C A9 16			lda #$16
  3147 219E 8D D5 2A			sta SETPLAYER.X
  3148 21A1 AD 79 2A			lda PLAYER2
  3149 21A4 8D D3 2A			sta SETPLAYER.P
  3150 21A7 AD 7A 2A			lda PLAYER2+1
  3151 21AA 8D D4 2A			sta SETPLAYER.P+1
  3152 21AD 20 23 14			jsr SETPLAYER
  3153
  3154 				; optimize OK (levels.inc), line = 103
  3155
  3156 21B0 A9 01			lda #$01
  3157 21B2 8D DB 2A			sta SETPLAYER.ISALIVE
  3158 21B5 A9 71			lda #$71
  3159 21B7 8D DA 2A			sta SETPLAYER.COLOUR
  3160 21BA A9 51			lda #$51
  3161 21BC 8D D9 2A			sta SETPLAYER.HEAD
  3162 21BF A9 02			lda #$02
  3163 21C1 8D D8 2A			sta SETPLAYER.BRAIN
  3164 21C4 8D D7 2A			sta SETPLAYER.DIR
  3165 21C7 A9 06			lda #$06
  3166 21C9 8D D6 2A			sta SETPLAYER.Y
  3167 21CC 8D D5 2A			sta SETPLAYER.X
  3168 21CF AD 7B 2A			lda PLAYER3
  3169 21D2 8D D3 2A			sta SETPLAYER.P
  3170 21D5 AD 7C 2A			lda PLAYER3+1
  3171 21D8 8D D4 2A			sta SETPLAYER.P+1
  3172 21DB 20 23 14			jsr SETPLAYER
  3173
  3174 				; optimize OK (levels.inc), line = 104
  3175
  3176 21DE A9 01			lda #$01
  3177 21E0 8D DB 2A			sta SETPLAYER.ISALIVE
  3178 21E3 A9 55			lda #$55
  3179 21E5 8D DA 2A			sta SETPLAYER.COLOUR
  3180 21E8 A9 51			lda #$51
  3181 21EA 8D D9 2A			sta SETPLAYER.HEAD
  3182 21ED A9 03			lda #$03
  3183 21EF 8D D8 2A			sta SETPLAYER.BRAIN
  3184 21F2 A9 08			lda #$08
  3185 21F4 8D D7 2A			sta SETPLAYER.DIR
  3186 21F7 A9 12			lda #$12
  3187 21F9 8D D6 2A			sta SETPLAYER.Y
  3188 21FC A9 24			lda #$24
  3189 21FE 8D D5 2A			sta SETPLAYER.X
  3190 2201 AD 7D 2A			lda PLAYER4
  3191 2204 8D D3 2A			sta SETPLAYER.P
  3192 2207 AD 7E 2A			lda PLAYER4+1
  3193 220A 8D D4 2A			sta SETPLAYER.P+1
  3194 220D 20 23 14			jsr SETPLAYER
  3195
  3196 				; optimize FAIL (1, levels.inc), line = 106
  3197
  3198 2210 E8				inx
  3199 2211 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3200 2215 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3201 2217 A9 06			lda #$06
  3202 2219 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3203 221C A9 0A			lda #$0A
  3204 221E 8D CF 2A			sta CALCOBSTACLEADDR.X
  3205 2221 20 F3 12			jsr CALCOBSTACLEADDR
  3206 2224 B4 17			ldy :STACKORIGIN-1,x
  3207 2226 B5 18			lda :STACKORIGIN,x
  3208 2228 99 B6 2A			sta adr.OBSTACLES,y
  3209 222B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3210 222D 99 B7 2A			sta adr.OBSTACLES+1,y
  3211 2230 CA				dex
  3212
  3213 				; optimize FAIL (1, levels.inc), line = 107
  3214
  3215 2231 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3216 2235 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3217 2239 A9 06			lda #$06
  3218 223B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3219 223E A9 1E			lda #$1E
  3220 2240 8D CF 2A			sta CALCOBSTACLEADDR.X
  3221 2243 20 F3 12			jsr CALCOBSTACLEADDR
  3222 2246 B4 17			ldy :STACKORIGIN-1,x
  3223 2248 B5 18			lda :STACKORIGIN,x
  3224 224A 99 B6 2A			sta adr.OBSTACLES,y
  3225 224D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3226 224F 99 B7 2A			sta adr.OBSTACLES+1,y
  3227 2252 CA				dex
  3228
  3229 				; optimize FAIL (1, levels.inc), line = 108
  3230
  3231 2253 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3232 2257 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3233 225B A9 12			lda #$12
  3234 225D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3235 2260 A9 0A			lda #$0A
  3236 2262 8D CF 2A			sta CALCOBSTACLEADDR.X
  3237 2265 20 F3 12			jsr CALCOBSTACLEADDR
  3238 2268 B4 17			ldy :STACKORIGIN-1,x
  3239 226A B5 18			lda :STACKORIGIN,x
  3240 226C 99 B6 2A			sta adr.OBSTACLES,y
  3241 226F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3242 2271 99 B7 2A			sta adr.OBSTACLES+1,y
  3243 2274 CA				dex
  3244
  3245 				; optimize FAIL (1, levels.inc), line = 109
  3246
  3247 2275 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3248 2279 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3249 227D A9 12			lda #$12
  3250 227F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3251 2282 A9 1E			lda #$1E
  3252 2284 8D CF 2A			sta CALCOBSTACLEADDR.X
  3253 2287 20 F3 12			jsr CALCOBSTACLEADDR
  3254 228A B4 17			ldy :STACKORIGIN-1,x
  3255 228C B5 18			lda :STACKORIGIN,x
  3256 228E 99 B6 2A			sta adr.OBSTACLES,y
  3257 2291 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3258 2293 99 B7 2A			sta adr.OBSTACLES+1,y
  3259 2296 CA				dex
  3260
  3261 				; optimize FAIL (1, levels.inc), line = 110
  3262
  3263 2297 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3264 229B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3265 229F A9 0C			lda #$0C
  3266 22A1 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3267 22A4 A9 01			lda #$01
  3268 22A6 8D CF 2A			sta CALCOBSTACLEADDR.X
  3269 22A9 20 F3 12			jsr CALCOBSTACLEADDR
  3270 22AC B4 17			ldy :STACKORIGIN-1,x
  3271 22AE B5 18			lda :STACKORIGIN,x
  3272 22B0 99 B6 2A			sta adr.OBSTACLES,y
  3273 22B3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3274 22B5 99 B7 2A			sta adr.OBSTACLES+1,y
  3275 22B8 CA				dex
  3276
  3277 				; optimize FAIL (1, levels.inc), line = 111
  3278
  3279 22B9 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3280 22BD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3281 22C1 A9 02			lda #$02
  3282 22C3 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3283 22C6 A9 14			lda #$14
  3284 22C8 8D CF 2A			sta CALCOBSTACLEADDR.X
  3285 22CB 20 F3 12			jsr CALCOBSTACLEADDR
  3286 22CE B4 17			ldy :STACKORIGIN-1,x
  3287 22D0 B5 18			lda :STACKORIGIN,x
  3288 22D2 99 B6 2A			sta adr.OBSTACLES,y
  3289 22D5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3290 22D7 99 B7 2A			sta adr.OBSTACLES+1,y
  3291 22DA CA				dex
  3292
  3293 				; optimize FAIL (1, levels.inc), line = 112
  3294
  3295 22DB A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3296 22DF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3297 22E3 A9 16			lda #$16
  3298 22E5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3299 22E8 A9 14			lda #$14
  3300 22EA 8D CF 2A			sta CALCOBSTACLEADDR.X
  3301 22ED 20 F3 12			jsr CALCOBSTACLEADDR
  3302 22F0 B4 17			ldy :STACKORIGIN-1,x
  3303 22F2 B5 18			lda :STACKORIGIN,x
  3304 22F4 99 B6 2A			sta adr.OBSTACLES,y
  3305 22F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3306 22F9 99 B7 2A			sta adr.OBSTACLES+1,y
  3307 22FC CA				dex
  3308
  3309 				; optimize FAIL (1, levels.inc), line = 113
  3310
  3311 22FD A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3312 2301 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3313 2305 A9 0C			lda #$0C
  3314 2307 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3315 230A A9 14			lda #$14
  3316 230C 8D CF 2A			sta CALCOBSTACLEADDR.X
  3317 230F 20 F3 12			jsr CALCOBSTACLEADDR
  3318 2312 B4 17			ldy :STACKORIGIN-1,x
  3319 2314 B5 18			lda :STACKORIGIN,x
  3320 2316 99 B6 2A			sta adr.OBSTACLES,y
  3321 2319 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3322 231B 99 B7 2A			sta adr.OBSTACLES+1,y
  3323 231E CA				dex
  3324 231F CA				dex
  3325 2320			@exit
  3326 					.ifdef @new
  3327 					lda <@VarData
  3328 					sta :ztmp
  3329 					lda >@VarData
  3330 					ldy #@VarDataSize-1
  3331 					jmp @FreeMem
  3332 					els
  3333 2320 60				rts						; ret
  3334 					eif
  3335 				.endl
  3336
  3337 2321			.local	SETLEVEL07					; PROCEDURE
  3338
  3339 				; optimize OK (levels.inc), line = 120
  3340
  3341 2321 A9 01			lda #$01
  3342 2323 8D DB 2A			sta SETPLAYER.ISALIVE
  3343 2326 A9 62			lda #$62
  3344 2328 8D DA 2A			sta SETPLAYER.COLOUR
  3345 232B A9 51			lda #$51
  3346 232D 8D D9 2A			sta SETPLAYER.HEAD
  3347 2330 A9 00			lda #$00
  3348 2332 8D D8 2A			sta SETPLAYER.BRAIN
  3349 2335 A9 04			lda #$04
  3350 2337 8D D7 2A			sta SETPLAYER.DIR
  3351 233A A9 0C			lda #$0C
  3352 233C 8D D6 2A			sta SETPLAYER.Y
  3353 233F A9 12			lda #$12
  3354 2341 8D D5 2A			sta SETPLAYER.X
  3355 2344 AD 77 2A			lda PLAYER1
  3356 2347 8D D3 2A			sta SETPLAYER.P
  3357 234A AD 78 2A			lda PLAYER1+1
  3358 234D 8D D4 2A			sta SETPLAYER.P+1
  3359 2350 20 23 14			jsr SETPLAYER
  3360
  3361 				; optimize OK (levels.inc), line = 121
  3362
  3363 2353 A9 01			lda #$01
  3364 2355 8D DB 2A			sta SETPLAYER.ISALIVE
  3365 2358 A9 5D			lda #$5D
  3366 235A 8D DA 2A			sta SETPLAYER.COLOUR
  3367 235D A9 51			lda #$51
  3368 235F 8D D9 2A			sta SETPLAYER.HEAD
  3369 2362 A9 03			lda #$03
  3370 2364 8D D8 2A			sta SETPLAYER.BRAIN
  3371 2367 A9 08			lda #$08
  3372 2369 8D D7 2A			sta SETPLAYER.DIR
  3373 236C A9 17			lda #$17
  3374 236E 8D D6 2A			sta SETPLAYER.Y
  3375 2371 A9 01			lda #$01
  3376 2373 8D D5 2A			sta SETPLAYER.X
  3377 2376 AD 79 2A			lda PLAYER2
  3378 2379 8D D3 2A			sta SETPLAYER.P
  3379 237C AD 7A 2A			lda PLAYER2+1
  3380 237F 8D D4 2A			sta SETPLAYER.P+1
  3381 2382 20 23 14			jsr SETPLAYER
  3382
  3383 				; optimize OK (levels.inc), line = 122
  3384
  3385 2385 A9 01			lda #$01
  3386 2387 8D DB 2A			sta SETPLAYER.ISALIVE
  3387 238A A9 71			lda #$71
  3388 238C 8D DA 2A			sta SETPLAYER.COLOUR
  3389 238F A9 51			lda #$51
  3390 2391 8D D9 2A			sta SETPLAYER.HEAD
  3391 2394 A9 03			lda #$03
  3392 2396 8D D8 2A			sta SETPLAYER.BRAIN
  3393 2399 A9 02			lda #$02
  3394 239B 8D D7 2A			sta SETPLAYER.DIR
  3395 239E A9 04			lda #$04
  3396 23A0 8D D6 2A			sta SETPLAYER.Y
  3397 23A3 A9 1E			lda #$1E
  3398 23A5 8D D5 2A			sta SETPLAYER.X
  3399 23A8 AD 7B 2A			lda PLAYER3
  3400 23AB 8D D3 2A			sta SETPLAYER.P
  3401 23AE AD 7C 2A			lda PLAYER3+1
  3402 23B1 8D D4 2A			sta SETPLAYER.P+1
  3403 23B4 20 23 14			jsr SETPLAYER
  3404
  3405 				; optimize OK (levels.inc), line = 123
  3406
  3407 23B7 A9 01			lda #$01
  3408 23B9 8D DB 2A			sta SETPLAYER.ISALIVE
  3409 23BC A9 55			lda #$55
  3410 23BE 8D DA 2A			sta SETPLAYER.COLOUR
  3411 23C1 A9 51			lda #$51
  3412 23C3 8D D9 2A			sta SETPLAYER.HEAD
  3413 23C6 A9 02			lda #$02
  3414 23C8 8D D8 2A			sta SETPLAYER.BRAIN
  3415 23CB A9 01			lda #$01
  3416 23CD 8D D7 2A			sta SETPLAYER.DIR
  3417 23D0 A9 15			lda #$15
  3418 23D2 8D D6 2A			sta SETPLAYER.Y
  3419 23D5 A9 24			lda #$24
  3420 23D7 8D D5 2A			sta SETPLAYER.X
  3421 23DA AD 7D 2A			lda PLAYER4
  3422 23DD 8D D3 2A			sta SETPLAYER.P
  3423 23E0 AD 7E 2A			lda PLAYER4+1
  3424 23E3 8D D4 2A			sta SETPLAYER.P+1
  3425 23E6 20 23 14			jsr SETPLAYER
  3426
  3427 				; optimize FAIL (1, levels.inc), line = 125
  3428
  3429 23E9 E8				inx
  3430 23EA A9 00 95 18			mva #$00 :STACKORIGIN,x
  3431 23EE 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3432 23F0 A9 06			lda #$06
  3433 23F2 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3434 23F5 A9 0A			lda #$0A
  3435 23F7 8D CF 2A			sta CALCOBSTACLEADDR.X
  3436 23FA 20 F3 12			jsr CALCOBSTACLEADDR
  3437 23FD B4 17			ldy :STACKORIGIN-1,x
  3438 23FF B5 18			lda :STACKORIGIN,x
  3439 2401 99 B6 2A			sta adr.OBSTACLES,y
  3440 2404 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3441 2406 99 B7 2A			sta adr.OBSTACLES+1,y
  3442 2409 CA				dex
  3443
  3444 				; optimize FAIL (1, levels.inc), line = 126
  3445
  3446 240A A9 02 95 18			mva #$02 :STACKORIGIN,x
  3447 240E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3448 2412 A9 06			lda #$06
  3449 2414 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3450 2417 A9 1E			lda #$1E
  3451 2419 8D CF 2A			sta CALCOBSTACLEADDR.X
  3452 241C 20 F3 12			jsr CALCOBSTACLEADDR
  3453 241F B4 17			ldy :STACKORIGIN-1,x
  3454 2421 B5 18			lda :STACKORIGIN,x
  3455 2423 99 B6 2A			sta adr.OBSTACLES,y
  3456 2426 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3457 2428 99 B7 2A			sta adr.OBSTACLES+1,y
  3458 242B CA				dex
  3459
  3460 				; optimize FAIL (1, levels.inc), line = 127
  3461
  3462 242C A9 04 95 18			mva #$04 :STACKORIGIN,x
  3463 2430 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3464 2434 A9 12			lda #$12
  3465 2436 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3466 2439 A9 0A			lda #$0A
  3467 243B 8D CF 2A			sta CALCOBSTACLEADDR.X
  3468 243E 20 F3 12			jsr CALCOBSTACLEADDR
  3469 2441 B4 17			ldy :STACKORIGIN-1,x
  3470 2443 B5 18			lda :STACKORIGIN,x
  3471 2445 99 B6 2A			sta adr.OBSTACLES,y
  3472 2448 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3473 244A 99 B7 2A			sta adr.OBSTACLES+1,y
  3474 244D CA				dex
  3475
  3476 				; optimize FAIL (1, levels.inc), line = 128
  3477
  3478 244E A9 06 95 18			mva #$06 :STACKORIGIN,x
  3479 2452 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3480 2456 A9 12			lda #$12
  3481 2458 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3482 245B A9 1E			lda #$1E
  3483 245D 8D CF 2A			sta CALCOBSTACLEADDR.X
  3484 2460 20 F3 12			jsr CALCOBSTACLEADDR
  3485 2463 B4 17			ldy :STACKORIGIN-1,x
  3486 2465 B5 18			lda :STACKORIGIN,x
  3487 2467 99 B6 2A			sta adr.OBSTACLES,y
  3488 246A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3489 246C 99 B7 2A			sta adr.OBSTACLES+1,y
  3490 246F CA				dex
  3491
  3492 				; optimize FAIL (1, levels.inc), line = 129
  3493
  3494 2470 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3495 2474 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3496 2478 A9 0C			lda #$0C
  3497 247A 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3498 247D A9 01			lda #$01
  3499 247F 8D CF 2A			sta CALCOBSTACLEADDR.X
  3500 2482 20 F3 12			jsr CALCOBSTACLEADDR
  3501 2485 B4 17			ldy :STACKORIGIN-1,x
  3502 2487 B5 18			lda :STACKORIGIN,x
  3503 2489 99 B6 2A			sta adr.OBSTACLES,y
  3504 248C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3505 248E 99 B7 2A			sta adr.OBSTACLES+1,y
  3506 2491 CA				dex
  3507
  3508 				; optimize FAIL (1, levels.inc), line = 130
  3509
  3510 2492 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3511 2496 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3512 249A A9 02			lda #$02
  3513 249C 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3514 249F A9 14			lda #$14
  3515 24A1 8D CF 2A			sta CALCOBSTACLEADDR.X
  3516 24A4 20 F3 12			jsr CALCOBSTACLEADDR
  3517 24A7 B4 17			ldy :STACKORIGIN-1,x
  3518 24A9 B5 18			lda :STACKORIGIN,x
  3519 24AB 99 B6 2A			sta adr.OBSTACLES,y
  3520 24AE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3521 24B0 99 B7 2A			sta adr.OBSTACLES+1,y
  3522 24B3 CA				dex
  3523
  3524 				; optimize FAIL (1, levels.inc), line = 131
  3525
  3526 24B4 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3527 24B8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3528 24BC A9 16			lda #$16
  3529 24BE 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3530 24C1 A9 14			lda #$14
  3531 24C3 8D CF 2A			sta CALCOBSTACLEADDR.X
  3532 24C6 20 F3 12			jsr CALCOBSTACLEADDR
  3533 24C9 B4 17			ldy :STACKORIGIN-1,x
  3534 24CB B5 18			lda :STACKORIGIN,x
  3535 24CD 99 B6 2A			sta adr.OBSTACLES,y
  3536 24D0 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3537 24D2 99 B7 2A			sta adr.OBSTACLES+1,y
  3538 24D5 CA				dex
  3539
  3540 				; optimize FAIL (1, levels.inc), line = 132
  3541
  3542 24D6 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3543 24DA A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3544 24DE A9 0C			lda #$0C
  3545 24E0 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3546 24E3 A9 14			lda #$14
  3547 24E5 8D CF 2A			sta CALCOBSTACLEADDR.X
  3548 24E8 20 F3 12			jsr CALCOBSTACLEADDR
  3549 24EB B4 17			ldy :STACKORIGIN-1,x
  3550 24ED B5 18			lda :STACKORIGIN,x
  3551 24EF 99 B6 2A			sta adr.OBSTACLES,y
  3552 24F2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3553 24F4 99 B7 2A			sta adr.OBSTACLES+1,y
  3554 24F7 CA				dex
  3555 24F8 CA				dex
  3556 24F9			@exit
  3557 					.ifdef @new
  3558 					lda <@VarData
  3559 					sta :ztmp
  3560 					lda >@VarData
  3561 					ldy #@VarDataSize-1
  3562 					jmp @FreeMem
  3563 					els
  3564 24F9 60				rts						; ret
  3565 					eif
  3566 				.endl
  3567
  3568 24FA			.local	SETLEVEL08					; PROCEDURE
  3569
  3570 				; optimize OK (levels.inc), line = 139
  3571
  3572 24FA A9 01			lda #$01
  3573 24FC 8D DB 2A			sta SETPLAYER.ISALIVE
  3574 24FF A9 62			lda #$62
  3575 2501 8D DA 2A			sta SETPLAYER.COLOUR
  3576 2504 A9 51			lda #$51
  3577 2506 8D D9 2A			sta SETPLAYER.HEAD
  3578 2509 A9 00			lda #$00
  3579 250B 8D D8 2A			sta SETPLAYER.BRAIN
  3580 250E A9 08			lda #$08
  3581 2510 8D D7 2A			sta SETPLAYER.DIR
  3582 2513 A9 17			lda #$17
  3583 2515 8D D6 2A			sta SETPLAYER.Y
  3584 2518 A9 01			lda #$01
  3585 251A 8D D5 2A			sta SETPLAYER.X
  3586 251D AD 77 2A			lda PLAYER1
  3587 2520 8D D3 2A			sta SETPLAYER.P
  3588 2523 AD 78 2A			lda PLAYER1+1
  3589 2526 8D D4 2A			sta SETPLAYER.P+1
  3590 2529 20 23 14			jsr SETPLAYER
  3591
  3592 				; optimize OK (levels.inc), line = 140
  3593
  3594 252C A9 01			lda #$01
  3595 252E 8D DB 2A			sta SETPLAYER.ISALIVE
  3596 2531 A9 5D			lda #$5D
  3597 2533 8D DA 2A			sta SETPLAYER.COLOUR
  3598 2536 A9 51			lda #$51
  3599 2538 8D D9 2A			sta SETPLAYER.HEAD
  3600 253B A9 03			lda #$03
  3601 253D 8D D8 2A			sta SETPLAYER.BRAIN
  3602 2540 A9 04			lda #$04
  3603 2542 8D D7 2A			sta SETPLAYER.DIR
  3604 2545 A9 17			lda #$17
  3605 2547 8D D6 2A			sta SETPLAYER.Y
  3606 254A A9 26			lda #$26
  3607 254C 8D D5 2A			sta SETPLAYER.X
  3608 254F AD 79 2A			lda PLAYER2
  3609 2552 8D D3 2A			sta SETPLAYER.P
  3610 2555 AD 7A 2A			lda PLAYER2+1
  3611 2558 8D D4 2A			sta SETPLAYER.P+1
  3612 255B 20 23 14			jsr SETPLAYER
  3613
  3614 				; optimize OK (levels.inc), line = 141
  3615
  3616 255E A9 01			lda #$01
  3617 2560 8D DB 2A			sta SETPLAYER.ISALIVE
  3618 2563 A9 71			lda #$71
  3619 2565 8D DA 2A			sta SETPLAYER.COLOUR
  3620 2568 A9 51			lda #$51
  3621 256A 8D D9 2A			sta SETPLAYER.HEAD
  3622 256D A9 02			lda #$02
  3623 256F 8D D8 2A			sta SETPLAYER.BRAIN
  3624 2572 8D D7 2A			sta SETPLAYER.DIR
  3625 2575 A9 01			lda #$01
  3626 2577 8D D6 2A			sta SETPLAYER.Y
  3627 257A A9 0A			lda #$0A
  3628 257C 8D D5 2A			sta SETPLAYER.X
  3629 257F AD 7B 2A			lda PLAYER3
  3630 2582 8D D3 2A			sta SETPLAYER.P
  3631 2585 AD 7C 2A			lda PLAYER3+1
  3632 2588 8D D4 2A			sta SETPLAYER.P+1
  3633 258B 20 23 14			jsr SETPLAYER
  3634
  3635 				; optimize OK (levels.inc), line = 142
  3636
  3637 258E A9 01			lda #$01
  3638 2590 8D DB 2A			sta SETPLAYER.ISALIVE
  3639 2593 A9 55			lda #$55
  3640 2595 8D DA 2A			sta SETPLAYER.COLOUR
  3641 2598 A9 51			lda #$51
  3642 259A 8D D9 2A			sta SETPLAYER.HEAD
  3643 259D A9 04			lda #$04
  3644 259F 8D D8 2A			sta SETPLAYER.BRAIN
  3645 25A2 8D D7 2A			sta SETPLAYER.DIR
  3646 25A5 A9 01			lda #$01
  3647 25A7 8D D6 2A			sta SETPLAYER.Y
  3648 25AA A9 26			lda #$26
  3649 25AC 8D D5 2A			sta SETPLAYER.X
  3650 25AF AD 7D 2A			lda PLAYER4
  3651 25B2 8D D3 2A			sta SETPLAYER.P
  3652 25B5 AD 7E 2A			lda PLAYER4+1
  3653 25B8 8D D4 2A			sta SETPLAYER.P+1
  3654 25BB 20 23 14			jsr SETPLAYER
  3655
  3656 				; optimize FAIL (1, levels.inc), line = 144
  3657
  3658 25BE E8				inx
  3659 25BF A9 00 95 18			mva #$00 :STACKORIGIN,x
  3660 25C3 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3661 25C5 A9 06			lda #$06
  3662 25C7 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3663 25CA A9 0A			lda #$0A
  3664 25CC 8D CF 2A			sta CALCOBSTACLEADDR.X
  3665 25CF 20 F3 12			jsr CALCOBSTACLEADDR
  3666 25D2 B4 17			ldy :STACKORIGIN-1,x
  3667 25D4 B5 18			lda :STACKORIGIN,x
  3668 25D6 99 B6 2A			sta adr.OBSTACLES,y
  3669 25D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3670 25DB 99 B7 2A			sta adr.OBSTACLES+1,y
  3671 25DE CA				dex
  3672
  3673 				; optimize FAIL (1, levels.inc), line = 145
  3674
  3675 25DF A9 02 95 18			mva #$02 :STACKORIGIN,x
  3676 25E3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3677 25E7 A9 06			lda #$06
  3678 25E9 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3679 25EC A9 1E			lda #$1E
  3680 25EE 8D CF 2A			sta CALCOBSTACLEADDR.X
  3681 25F1 20 F3 12			jsr CALCOBSTACLEADDR
  3682 25F4 B4 17			ldy :STACKORIGIN-1,x
  3683 25F6 B5 18			lda :STACKORIGIN,x
  3684 25F8 99 B6 2A			sta adr.OBSTACLES,y
  3685 25FB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3686 25FD 99 B7 2A			sta adr.OBSTACLES+1,y
  3687 2600 CA				dex
  3688
  3689 				; optimize FAIL (1, levels.inc), line = 146
  3690
  3691 2601 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3692 2605 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3693 2609 A9 12			lda #$12
  3694 260B 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3695 260E A9 0A			lda #$0A
  3696 2610 8D CF 2A			sta CALCOBSTACLEADDR.X
  3697 2613 20 F3 12			jsr CALCOBSTACLEADDR
  3698 2616 B4 17			ldy :STACKORIGIN-1,x
  3699 2618 B5 18			lda :STACKORIGIN,x
  3700 261A 99 B6 2A			sta adr.OBSTACLES,y
  3701 261D B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3702 261F 99 B7 2A			sta adr.OBSTACLES+1,y
  3703 2622 CA				dex
  3704
  3705 				; optimize FAIL (1, levels.inc), line = 147
  3706
  3707 2623 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3708 2627 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3709 262B A9 12			lda #$12
  3710 262D 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3711 2630 A9 1E			lda #$1E
  3712 2632 8D CF 2A			sta CALCOBSTACLEADDR.X
  3713 2635 20 F3 12			jsr CALCOBSTACLEADDR
  3714 2638 B4 17			ldy :STACKORIGIN-1,x
  3715 263A B5 18			lda :STACKORIGIN,x
  3716 263C 99 B6 2A			sta adr.OBSTACLES,y
  3717 263F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3718 2641 99 B7 2A			sta adr.OBSTACLES+1,y
  3719 2644 CA				dex
  3720
  3721 				; optimize FAIL (1, levels.inc), line = 148
  3722
  3723 2645 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3724 2649 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3725 264D A9 0C			lda #$0C
  3726 264F 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3727 2652 A9 01			lda #$01
  3728 2654 8D CF 2A			sta CALCOBSTACLEADDR.X
  3729 2657 20 F3 12			jsr CALCOBSTACLEADDR
  3730 265A B4 17			ldy :STACKORIGIN-1,x
  3731 265C B5 18			lda :STACKORIGIN,x
  3732 265E 99 B6 2A			sta adr.OBSTACLES,y
  3733 2661 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3734 2663 99 B7 2A			sta adr.OBSTACLES+1,y
  3735 2666 CA				dex
  3736
  3737 				; optimize FAIL (1, levels.inc), line = 149
  3738
  3739 2667 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3740 266B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3741 266F A9 02			lda #$02
  3742 2671 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3743 2674 A9 14			lda #$14
  3744 2676 8D CF 2A			sta CALCOBSTACLEADDR.X
  3745 2679 20 F3 12			jsr CALCOBSTACLEADDR
  3746 267C B4 17			ldy :STACKORIGIN-1,x
  3747 267E B5 18			lda :STACKORIGIN,x
  3748 2680 99 B6 2A			sta adr.OBSTACLES,y
  3749 2683 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3750 2685 99 B7 2A			sta adr.OBSTACLES+1,y
  3751 2688 CA				dex
  3752
  3753 				; optimize FAIL (1, levels.inc), line = 150
  3754
  3755 2689 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3756 268D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3757 2691 A9 16			lda #$16
  3758 2693 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3759 2696 A9 14			lda #$14
  3760 2698 8D CF 2A			sta CALCOBSTACLEADDR.X
  3761 269B 20 F3 12			jsr CALCOBSTACLEADDR
  3762 269E B4 17			ldy :STACKORIGIN-1,x
  3763 26A0 B5 18			lda :STACKORIGIN,x
  3764 26A2 99 B6 2A			sta adr.OBSTACLES,y
  3765 26A5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3766 26A7 99 B7 2A			sta adr.OBSTACLES+1,y
  3767 26AA CA				dex
  3768
  3769 				; optimize FAIL (1, levels.inc), line = 151
  3770
  3771 26AB A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3772 26AF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3773 26B3 A9 0C			lda #$0C
  3774 26B5 8D D0 2A			sta CALCOBSTACLEADDR.Y
  3775 26B8 A9 14			lda #$14
  3776 26BA 8D CF 2A			sta CALCOBSTACLEADDR.X
  3777 26BD 20 F3 12			jsr CALCOBSTACLEADDR
  3778 26C0 B4 17			ldy :STACKORIGIN-1,x
  3779 26C2 B5 18			lda :STACKORIGIN,x
  3780 26C4 99 B6 2A			sta adr.OBSTACLES,y
  3781 26C7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3782 26C9 99 B7 2A			sta adr.OBSTACLES+1,y
  3783 26CC CA				dex
  3784 26CD CA				dex
  3785 26CE			@exit
  3786 					.ifdef @new
  3787 					lda <@VarData
  3788 					sta :ztmp
  3789 					lda >@VarData
  3790 					ldy #@VarDataSize-1
  3791 					jmp @FreeMem
  3792 					els
  3793 26CE 60				rts						; ret
  3794 					eif
  3795 				.endl
  3796
  3797 26CF			.local	HUMAN						; PROCEDURE
  3798
  3799 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 15
  3800
  3801 26CF 20 11 14			jsr CHECKJOYSTATUS
  3802 26D2 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3803 26DC A0 04			ldy #PLY.DIR-DATAORIGIN
  3804 26DE B1 12			lda (:bp2),y
  3805 26E0 85 5B			sta NEWDIR
  3806
  3807 				; optimize OK (main.pas), line = 16
  3808
  3809 26E2 A5 63			lda JOYSTATUS
  3810 26E4 8D E3 2A			sta @CASETMP_0006
  3811 26E7 C9 01			cmp #$01
  3812 26E9 D0 19			jne l_0D14
  3813 26EB			@
  3814
  3815 				; optimize OK (main.pas), line = 17
  3816
  3817 26EB AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3818 26F5 A0 04			ldy #PLY.DIR-DATAORIGIN
  3819 26F7 B1 12			lda (:bp2),y
  3820 26F9 C9 02			cmp #$02
  3821 26FB F0 04			jeq l_0D26
  3822 26FD A9 01			lda #$01
  3823 26FF 85 5B			sta NEWDIR
  3824 2701			l_0D26
  3825
  3826 2701 4C 58 27			jmp a_0006
  3827 2704			l_0D14
  3828 2704 C9 02			cmp #$02
  3829 2706 D0 19			jne l_0D36
  3830 2708			@
  3831
  3832 				; optimize OK (main.pas), line = 18
  3833
  3834 2708 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3835 2712 A0 04			ldy #PLY.DIR-DATAORIGIN
  3836 2714 B1 12			lda (:bp2),y
  3837 2716 C9 01			cmp #$01
  3838 2718 F0 04			jeq l_0D48
  3839 271A A9 02			lda #$02
  3840 271C 85 5B			sta NEWDIR
  3841 271E			l_0D48
  3842
  3843 271E 4C 58 27			jmp a_0006
  3844 2721			l_0D36
  3845 2721 C9 04			cmp #$04
  3846 2723 D0 19			jne l_0D58
  3847 2725			@
  3848
  3849 				; optimize OK (main.pas), line = 19
  3850
  3851 2725 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3852 272F A0 04			ldy #PLY.DIR-DATAORIGIN
  3853 2731 B1 12			lda (:bp2),y
  3854 2733 C9 08			cmp #$08
  3855 2735 F0 04			jeq l_0D6A
  3856 2737 A9 04			lda #$04
  3857 2739 85 5B			sta NEWDIR
  3858 273B			l_0D6A
  3859
  3860 273B 4C 58 27			jmp a_0006
  3861 273E			l_0D58
  3862 273E C9 08			cmp #$08
  3863 2740 D0 16			jne l_0D7A
  3864 2742			@
  3865
  3866 				; optimize OK (main.pas), line = 20
  3867
  3868 2742 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3869 274C A0 04			ldy #PLY.DIR-DATAORIGIN
  3870 274E B1 12			lda (:bp2),y
  3871 2750 C9 04			cmp #$04
  3872 2752 F0 04			jeq l_0D8C
  3873 2754 A9 08			lda #$08
  3874 2756 85 5B			sta NEWDIR
  3875 2758			l_0D8C
  3876
  3877 2758			l_0D7A
  3878 2758			a_0006
  3879
  3880 				; optimize OK (main.pas), line = 23
  3881
  3882 2758 A5 5B			lda NEWDIR
  3883 275A 25 5C			and AVAILDIR
  3884 275C D0 18			jne l_0DB3
  3885
  3886 				; optimize OK (main.pas), line = 24
  3887
  3888 275E AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3889 2768 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3890 276A A9 00			lda #$00
  3891 276C 91 12			sta (:bp2),y
  3892 276E A0 02			ldy #PLY.HEAD-DATAORIGIN
  3893 2770 A9 2A			lda #$2A
  3894 2772 91 12			sta (:bp2),y
  3895 2774 C6 5A			dec ALIVE
  3896 2776			l_0DB3
  3897
  3898 				; ------------------------------------------------------------
  3899
  3900 = 2AE3			@CASETMP_0006	= DATAORIGIN+$005F
  3901
  3902 = 2AE3			@VarData	= @CASETMP_0006
  3903 = 0001			@VarDataSize	= 1
  3904
  3905 2776			@exit
  3906 					.ifdef @new
  3907 					lda <@VarData
  3908 					sta :ztmp
  3909 					lda >@VarData
  3910 					ldy #@VarDataSize-1
  3911 					jmp @FreeMem
  3912 					els
  3913 2776 60				rts						; ret
  3914 					eif
  3915 				.endl
  3916
  3917 2777			.local	PLAYERMOVE					; PROCEDURE
  3918
  3919 				; optimize OK (main.pas), line = 32
  3920
  3921 2777 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3922 2781 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3923 2783 B1 12			lda (:bp2),y
  3924 2785 D0 03 4C CB 28		jeq l_0DD2
  3925
  3926 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33
  3927
  3928 278A 20 29 12			jsr CHECKAVAILDIR
  3929
  3930 				; optimize OK (main.pas), line = 35
  3931
  3932 278D A5 5C			lda AVAILDIR
  3933 278F D0 35			jne l_0DE6
  3934
  3935 				; optimize OK (main.pas), line = 36
  3936
  3937 2791 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3938 279B A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  3939 279D A9 00			lda #$00
  3940 279F 91 12			sta (:bp2),y
  3941 27A1 C6 5A			dec ALIVE
  3942
  3943 				; optimize OK (main.pas), line = 37
  3944
  3945 27A3 A0 00			ldy #PLY.X-DATAORIGIN
  3946 27A5 B1 12			lda (:bp2),y
  3947 27A7 8D C6 2A			sta PUTCHAR_0072.X
  3948 27AA A0 01			ldy #PLY.Y-DATAORIGIN
  3949 27AC B1 12			lda (:bp2),y
  3950 27AE 8D C7 2A			sta PUTCHAR_0072.Y
  3951 27B1 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  3952 27B3 B1 12			lda (:bp2),y
  3953 27B5 18 69 80			add #$80
  3954 27B8 8D C9 2A			sta PUTCHAR_0072.C
  3955 27BB A9 57			lda #$57
  3956 27BD 8D C8 2A			sta PUTCHAR_0072.V
  3957 27C0 20 78 11			jsr PUTCHAR_0072
  3958 27C3 4C CB 28			jmp l_0E07
  3959 27C6			l_0DE6
  3960
  3961 				; optimize OK (main.pas), line = 40
  3962
  3963 27C6 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  3964 27D0 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  3965 27D2 B1 12			lda (:bp2),y
  3966 27D4 8D E4 2A			sta @CASETMP_0007
  3967 27D7 C9 00			cmp #$00
  3968 27D9 D0 06			jne l_0E12
  3969 27DB			@
  3970
  3971 				; optimize FAIL ('HUMAN', main.pas), line = 41
  3972
  3973 27DB 20 CF 26			jsr HUMAN
  3974 27DE 4C 06 28			jmp a_0007
  3975 27E1			l_0E12
  3976 27E1 C9 01			cmp #$01
  3977 27E3 D0 06			jne l_0E1C
  3978 27E5			@
  3979
  3980 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 42
  3981
  3982 27E5 20 3A 15			jsr AISTRAIGHT
  3983 27E8 4C 06 28			jmp a_0007
  3984 27EB			l_0E1C
  3985 27EB C9 02			cmp #$02
  3986 27ED D0 06			jne l_0E26
  3987 27EF			@
  3988
  3989 				; optimize FAIL ('AISAPPER', main.pas), line = 43
  3990
  3991 27EF 20 BF 15			jsr AISAPPER
  3992 27F2 4C 06 28			jmp a_0007
  3993 27F5			l_0E26
  3994 27F5 C9 03			cmp #$03
  3995 27F7 D0 06			jne l_0E30
  3996 27F9			@
  3997
  3998 				; optimize FAIL ('AIBULLY', main.pas), line = 44
  3999
  4000 27F9 20 19 18			jsr AIBULLY
  4001 27FC 4C 06 28			jmp a_0007
  4002 27FF			l_0E30
  4003 27FF C9 04			cmp #$04
  4004 2801 D0 03			jne l_0E3A
  4005 2803			@
  4006
  4007 				; optimize FAIL ('AIMIRROR', main.pas), line = 45
  4008
  4009 2803 20 E7 18			jsr AIMIRROR
  4010 2806			l_0E3A
  4011 2806			a_0007
  4012
  4013 				; optimize FAIL ('DRAWTAIL', main.pas), line = 48
  4014
  4015 2806 20 5A 13			jsr DRAWTAIL
  4016 2809 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4017 2813 A0 04			ldy #PLY.DIR-DATAORIGIN
  4018 2815 A5 5B			lda NEWDIR
  4019 2817 91 12			sta (:bp2),y
  4020
  4021 				; optimize OK (main.pas), line = 50
  4022
  4023 2819 A5 5B			lda NEWDIR
  4024 281B 8D E5 2A			sta @CASETMP_0008
  4025 281E C9 01			cmp #$01
  4026 2820 D0 16			jne l_0E56
  4027 2822			@
  4028
  4029 				; optimize OK (main.pas), line = 51
  4030
  4031 2822 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4032 282C A0 01			ldy #PLY.Y-DATAORIGIN
  4033 282E B1 12			lda (:bp2),y
  4034 2830 38 E9 01			sub #$01
  4035 2833 91 12			sta (:bp2),y
  4036
  4037 2835 4C 83 28			jmp a_0008
  4038 2838			l_0E56
  4039 2838 C9 02			cmp #$02
  4040 283A D0 16			jne l_0E60
  4041 283C			@
  4042
  4043 				; optimize OK (main.pas), line = 52
  4044
  4045 283C AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4046 2846 A0 01			ldy #PLY.Y-DATAORIGIN
  4047 2848 B1 12			lda (:bp2),y
  4048 284A 18 69 01			add #$01
  4049 284D 91 12			sta (:bp2),y
  4050
  4051 284F 4C 83 28			jmp a_0008
  4052 2852			l_0E60
  4053 2852 C9 04			cmp #$04
  4054 2854 D0 16			jne l_0E6A
  4055 2856			@
  4056
  4057 				; optimize OK (main.pas), line = 53
  4058
  4059 2856 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4060 2860 A0 00			ldy #PLY.X-DATAORIGIN
  4061 2862 B1 12			lda (:bp2),y
  4062 2864 38 E9 01			sub #$01
  4063 2867 91 12			sta (:bp2),y
  4064
  4065 2869 4C 83 28			jmp a_0008
  4066 286C			l_0E6A
  4067 286C C9 08			cmp #$08
  4068 286E D0 13			jne l_0E74
  4069 2870			@
  4070
  4071 				; optimize OK (main.pas), line = 54
  4072
  4073 2870 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4074 287A A0 00			ldy #PLY.X-DATAORIGIN
  4075 287C B1 12			lda (:bp2),y
  4076 287E 18 69 01			add #$01
  4077 2881 91 12			sta (:bp2),y
  4078
  4079 2883			l_0E74
  4080 2883			a_0008
  4081
  4082 				; optimize OK (main.pas), line = 57
  4083
  4084 2883 AC 73 2A 84 12 AC + 	mwy PLY :bp2
  4085 288D A0 00			ldy #PLY.X-DATAORIGIN
  4086 288F B1 12			lda (:bp2),y
  4087 2891 8D C6 2A			sta PUTCHAR_0072.X
  4088 2894 A0 01			ldy #PLY.Y-DATAORIGIN
  4089 2896 B1 12			lda (:bp2),y
  4090 2898 8D C7 2A			sta PUTCHAR_0072.Y
  4091 289B A0 02			ldy #PLY.HEAD-DATAORIGIN
  4092 289D B1 12			lda (:bp2),y
  4093 289F 8D C8 2A			sta PUTCHAR_0072.V
  4094 28A2 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  4095 28A4 B1 12			lda (:bp2),y
  4096 28A6 8D C9 2A			sta PUTCHAR_0072.C
  4097 28A9 20 78 11			jsr PUTCHAR_0072
  4098
  4099 				; optimize OK (main.pas), line = 60
  4100
  4101 28AC AD 9D 2A			lda PLAYER1.ISALIVE
  4102 28AF D0 1A			jne l_0E99
  4103 28B1 AD 99 2A			lda PLAYER1.COLOUR
  4104 28B4 8D C9 2A			sta PUTCHAR_0072.C
  4105 28B7 A9 2A			lda #$2A
  4106 28B9 8D C8 2A			sta PUTCHAR_0072.V
  4107 28BC AD 97 2A			lda PLAYER1.Y
  4108 28BF 8D C7 2A			sta PUTCHAR_0072.Y
  4109 28C2 AD 96 2A			lda PLAYER1.X
  4110 28C5 8D C6 2A			sta PUTCHAR_0072.X
  4111 28C8 20 78 11			jsr PUTCHAR_0072
  4112 28CB			l_0E99
  4113 28CB			l_0E07
  4114 28CB			l_0DD2
  4115
  4116 				; ------------------------------------------------------------
  4117
  4118 = 2AE4			@CASETMP_0007	= DATAORIGIN+$0060
  4119 = 2AE5			@CASETMP_0008	= DATAORIGIN+$0061
  4120
  4121 = 2AE4			@VarData	= @CASETMP_0007
  4122 = 0002			@VarDataSize	= 2
  4123
  4124 28CB			@exit
  4125 					.ifdef @new
  4126 					lda <@VarData
  4127 					sta :ztmp
  4128 					lda >@VarData
  4129 					ldy #@VarDataSize-1
  4130 					jmp @FreeMem
  4131 					els
  4132 28CB 60				rts						; ret
  4133 					eif
  4134 				.endl
  4135
  4136 28CC			.local	STARTSCREEN					; PROCEDURE
  4137
  4138 				; optimize OK (main.pas), line = 71
  4139
  4140 28CC AD 99 2A			lda PLAYER1.COLOUR
  4141 28CF 18 69 80			add #$80
  4142 28D2 8D C9 2A			sta PUTCHAR_0072.C
  4143 28D5 AD 98 2A			lda PLAYER1.HEAD
  4144 28D8 8D C8 2A			sta PUTCHAR_0072.V
  4145 28DB AD 97 2A			lda PLAYER1.Y
  4146 28DE 8D C7 2A			sta PUTCHAR_0072.Y
  4147 28E1 AD 96 2A			lda PLAYER1.X
  4148 28E4 8D C6 2A			sta PUTCHAR_0072.X
  4149 28E7 20 78 11			jsr PUTCHAR_0072
  4150
  4151 				; --- RepeatUntilProlog
  4152 28EA			l_0EBF
  4153
  4154 				; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 72
  4155
  4156 28EA 20 11 14			jsr CHECKJOYSTATUS
  4157 28ED A5 63			lda JOYSTATUS
  4158 28EF C9 40			cmp #$40
  4159 28F1 D0 F7			jne l_0EBF
  4160
  4161 				; optimize OK (main.pas), line = 73
  4162
  4163 28F3 AD 99 2A			lda PLAYER1.COLOUR
  4164 28F6 8D C9 2A			sta PUTCHAR_0072.C
  4165 28F9 AD 98 2A			lda PLAYER1.HEAD
  4166 28FC 8D C8 2A			sta PUTCHAR_0072.V
  4167 28FF AD 97 2A			lda PLAYER1.Y
  4168 2902 8D C7 2A			sta PUTCHAR_0072.Y
  4169 2905 AD 96 2A			lda PLAYER1.X
  4170 2908 8D C6 2A			sta PUTCHAR_0072.X
  4171 290B 20 78 11			jsr PUTCHAR_0072
  4172 290E			@exit
  4173 					.ifdef @new
  4174 					lda <@VarData
  4175 					sta :ztmp
  4176 					lda >@VarData
  4177 					ldy #@VarDataSize-1
  4178 					jmp @FreeMem
  4179 					els
  4180 290E 60				rts						; ret
  4181 					eif
  4182 				.endl
  4183
  4184 290F			.local	MAINLOOP					; PROCEDURE
  4185
  4186 				; optimize OK (main.pas), line = 80
  4187
  4188 290F A9 FF			lda #$FF
  4189 2911 85 5A			sta ALIVE
  4190
  4191 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 82
  4192
  4193 2913 20 87 14			jsr INITPLAYFIELD
  4194
  4195 				; optimize OK (main.pas), line = 84
  4196
  4197 2916 AD 94 2A			lda LEVEL
  4198 2919 8D E6 2A			sta @CASETMP_0009
  4199 291C C9 00			cmp #$00
  4200 291E D0 06			jne l_0EEE
  4201 2920			@
  4202
  4203 				; optimize FAIL ('SETLEVEL00', main.pas), line = 85
  4204
  4205 2920 20 3C 19			jsr SETLEVEL00
  4206 2923 4C 73 29			jmp a_0009
  4207 2926			l_0EEE
  4208 2926 C9 01			cmp #$01
  4209 2928 D0 06			jne l_0EF8
  4210 292A			@
  4211
  4212 				; optimize FAIL ('SETLEVEL01', main.pas), line = 86
  4213
  4214 292A 20 6D 1A			jsr SETLEVEL01
  4215 292D 4C 73 29			jmp a_0009
  4216 2930			l_0EF8
  4217 2930 C9 02			cmp #$02
  4218 2932 D0 06			jne l_0F02
  4219 2934			@
  4220
  4221 				; optimize FAIL ('SETLEVEL02', main.pas), line = 87
  4222
  4223 2934 20 9E 1B			jsr SETLEVEL02
  4224 2937 4C 73 29			jmp a_0009
  4225 293A			l_0F02
  4226 293A C9 03			cmp #$03
  4227 293C D0 06			jne l_0F0C
  4228 293E			@
  4229
  4230 				; optimize FAIL ('SETLEVEL03', main.pas), line = 88
  4231
  4232 293E 20 CF 1C			jsr SETLEVEL03
  4233 2941 4C 73 29			jmp a_0009
  4234 2944			l_0F0C
  4235 2944 C9 04			cmp #$04
  4236 2946 D0 06			jne l_0F16
  4237 2948			@
  4238
  4239 				; optimize FAIL ('SETLEVEL04', main.pas), line = 89
  4240
  4241 2948 20 22 1E			jsr SETLEVEL04
  4242 294B 4C 73 29			jmp a_0009
  4243 294E			l_0F16
  4244 294E C9 05			cmp #$05
  4245 2950 D0 06			jne l_0F20
  4246 2952			@
  4247
  4248 				; optimize FAIL ('SETLEVEL05', main.pas), line = 90
  4249
  4250 2952 20 97 1F			jsr SETLEVEL05
  4251 2955 4C 73 29			jmp a_0009
  4252 2958			l_0F20
  4253 2958 C9 06			cmp #$06
  4254 295A D0 06			jne l_0F2A
  4255 295C			@
  4256
  4257 				; optimize FAIL ('SETLEVEL06', main.pas), line = 91
  4258
  4259 295C 20 4C 21			jsr SETLEVEL06
  4260 295F 4C 73 29			jmp a_0009
  4261 2962			l_0F2A
  4262 2962 C9 07			cmp #$07
  4263 2964 D0 06			jne l_0F34
  4264 2966			@
  4265
  4266 				; optimize FAIL ('SETLEVEL07', main.pas), line = 92
  4267
  4268 2966 20 21 23			jsr SETLEVEL07
  4269 2969 4C 73 29			jmp a_0009
  4270 296C			l_0F34
  4271 296C C9 08			cmp #$08
  4272 296E D0 03			jne l_0F3E
  4273 2970			@
  4274
  4275 				; optimize FAIL ('SETLEVEL08', main.pas), line = 93
  4276
  4277 2970 20 FA 24			jsr SETLEVEL08
  4278 2973			l_0F3E
  4279 2973			a_0009
  4280
  4281 				; optimize FAIL ('SAVEOBSTACLES', main.pas), line = 96
  4282
  4283 2973 20 16 13			jsr SAVEOBSTACLES
  4284 2976 20 BE 12			jsr ANIMATEOBSTACLES
  4285 2979 20 C4 11			jsr SHOWSCORE
  4286 297C 20 CC 28			jsr STARTSCREEN
  4287
  4288 				; --- RepeatUntilProlog
  4289 297F			l_0F51
  4290
  4291 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 99
  4292
  4293 297F 20 23 11			jsr SYSTEM.PAUSE_006B
  4294
  4295 				; optimize OK (main.pas), line = 100
  4296
  4297 2982 AD 77 2A			lda PLAYER1
  4298 2985 8D 73 2A			sta PLY
  4299 2988 AD 78 2A			lda PLAYER1+1
  4300 298B 8D 74 2A			sta PLY+1
  4301 298E 20 77 27			jsr PLAYERMOVE
  4302
  4303 				; optimize OK (main.pas), line = 102
  4304
  4305 2991 A9 02			lda #$02
  4306 2993 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4307 2996 A9 00			lda #$00
  4308 2998 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4309 299B 20 2A 11			jsr SYSTEM.PAUSE_006C
  4310
  4311 				; optimize OK (main.pas), line = 103
  4312
  4313 299E AD 79 2A			lda PLAYER2
  4314 29A1 8D 73 2A			sta PLY
  4315 29A4 AD 7A 2A			lda PLAYER2+1
  4316 29A7 8D 74 2A			sta PLY+1
  4317 29AA 20 77 27			jsr PLAYERMOVE
  4318
  4319 				; optimize OK (main.pas), line = 104
  4320
  4321 29AD AD 7B 2A			lda PLAYER3
  4322 29B0 8D 73 2A			sta PLY
  4323 29B3 AD 7C 2A			lda PLAYER3+1
  4324 29B6 8D 74 2A			sta PLY+1
  4325 29B9 20 77 27			jsr PLAYERMOVE
  4326
  4327 				; optimize OK (main.pas), line = 105
  4328
  4329 29BC AD 7D 2A			lda PLAYER4
  4330 29BF 8D 73 2A			sta PLY
  4331 29C2 AD 7E 2A			lda PLAYER4+1
  4332 29C5 8D 74 2A			sta PLY+1
  4333 29C8 20 77 27			jsr PLAYERMOVE
  4334
  4335 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 106
  4336
  4337 29CB 20 BE 12			jsr ANIMATEOBSTACLES
  4338
  4339 				; optimize OK (main.pas), line = 107
  4340
  4341 29CE A5 5A			lda ALIVE
  4342 29D0 F0 04			jeq l_0F51x
  4343 29D2 C9 FF			cmp #$FF
  4344 29D4 D0 A9			jne l_0F51
  4345 29D6			l_0F51x
  4346
  4347 				; optimize OK (main.pas), line = 109
  4348
  4349 29D6 AD 9D 2A			lda PLAYER1.ISALIVE
  4350 29D9 F0 03			jeq l_0F92
  4351 29DB EE 9C 2A			inc PLAYER1.SCORE
  4352 29DE			l_0F92
  4353
  4354 				; optimize OK (main.pas), line = 110
  4355
  4356 29DE AD A5 2A			lda PLAYER2.ISALIVE
  4357 29E1 F0 03			jeq l_0FA5
  4358 29E3 EE A4 2A			inc PLAYER2.SCORE
  4359 29E6			l_0FA5
  4360
  4361 				; optimize OK (main.pas), line = 111
  4362
  4363 29E6 AD AD 2A			lda PLAYER3.ISALIVE
  4364 29E9 F0 03			jeq l_0FB8
  4365 29EB EE AC 2A			inc PLAYER3.SCORE
  4366 29EE			l_0FB8
  4367
  4368 				; optimize OK (main.pas), line = 112
  4369
  4370 29EE AD B5 2A			lda PLAYER4.ISALIVE
  4371 29F1 F0 03			jeq l_0FCB
  4372 29F3 EE B4 2A			inc PLAYER4.SCORE
  4373 29F6			l_0FCB
  4374
  4375 				; optimize OK (main.pas), line = 114
  4376
  4377 29F6 A9 64			lda #$64
  4378 29F8 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4379 29FB A9 00			lda #$00
  4380 29FD 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4381 2A00 20 2A 11			jsr SYSTEM.PAUSE_006C
  4382
  4383 				; ------------------------------------------------------------
  4384
  4385 = 2AE6			@CASETMP_0009	= DATAORIGIN+$0062
  4386
  4387 = 2AE6			@VarData	= @CASETMP_0009
  4388 = 0001			@VarDataSize	= 1
  4389
  4390 2A03			@exit
  4391 					.ifdef @new
  4392 					lda <@VarData
  4393 					sta :ztmp
  4394 					lda >@VarData
  4395 					ldy #@VarDataSize-1
  4396 					jmp @FreeMem
  4397 					els
  4398 2A03 60				rts						; ret
  4399 					eif
  4400 				.endl
  4401 2A04			l_0007
  4402
  4403 				; --- RepeatUntilProlog
  4404 2A04			l_0FD6
  4405
  4406 				; optimize OK (main.pas), line = 121
  4407
  4408 2A04 A9 01			lda #$01
  4409 2A06 8D 94 2A			sta LEVEL
  4410 2A09 20 1D 15			jsr INITPLAYERS
  4411
  4412 				; optimize OK (main.pas), line = 123
  4413
  4414 2A0C A9 00			lda #$00
  4415 2A0E 8D 95 2A			sta GAMEOVER
  4416
  4417 				; --- RepeatUntilProlog
  4418 2A11			l_0FE0
  4419
  4420 				; optimize FAIL ('MAINLOOP', main.pas), line = 125
  4421
  4422 2A11 20 0F 29			jsr MAINLOOP
  4423
  4424 				; optimize FAIL (0, main.pas), line = 126
  4425
  4426 2A14 EE 94 2A			inc LEVEL
  4427 2A17 AD 94 2A			lda LEVEL
  4428 2A1A C9 08			cmp #$08
  4429 2A1C D0 05			jne l_0FF7
  4430 2A1E A9 05			lda #$05
  4431 2A20 8D 94 2A			sta LEVEL
  4432 2A23			l_0FF7
  4433
  4434 				; optimize OK (main.pas), line = 127
  4435
  4436 2A23 AD 9C 2A			lda PLAYER1.SCORE
  4437 2A26 C9 39			cmp #$39
  4438 2A28 D0 05			jne l_1010
  4439 2A2A A9 01			lda #$01
  4440 2A2C 8D 95 2A			sta GAMEOVER
  4441 2A2F			l_1010
  4442
  4443 				; optimize OK (main.pas), line = 128
  4444
  4445 2A2F AD A4 2A			lda PLAYER2.SCORE
  4446 2A32 C9 39			cmp #$39
  4447 2A34 D0 05			jne l_1029
  4448 2A36 A9 01			lda #$01
  4449 2A38 8D 95 2A			sta GAMEOVER
  4450 2A3B			l_1029
  4451
  4452 				; optimize OK (main.pas), line = 129
  4453
  4454 2A3B AD AC 2A			lda PLAYER3.SCORE
  4455 2A3E C9 39			cmp #$39
  4456 2A40 D0 05			jne l_1042
  4457 2A42 A9 01			lda #$01
  4458 2A44 8D 95 2A			sta GAMEOVER
  4459 2A47			l_1042
  4460
  4461 				; optimize OK (main.pas), line = 130
  4462
  4463 2A47 AD B4 2A			lda PLAYER4.SCORE
  4464 2A4A C9 39			cmp #$39
  4465 2A4C D0 05			jne l_105B
  4466 2A4E A9 01			lda #$01
  4467 2A50 8D 95 2A			sta GAMEOVER
  4468 2A53			l_105B
  4469
  4470 				; optimize OK (main.pas), line = 131
  4471
  4472 2A53 AD 95 2A			lda GAMEOVER
  4473 2A56 F0 B9			jeq l_0FE0
  4474
  4475 				; optimize FAIL ('SHOWSCORE', main.pas), line = 133
  4476
  4477 2A58 20 C4 11			jsr SHOWSCORE
  4478
  4479 				; optimize OK (main.pas), line = 135
  4480
  4481 2A5B A9 C8			lda #$C8
  4482 2A5D 8D 90 2A			sta SYSTEM.PAUSE_006C.N
  4483 2A60 A9 00			lda #$00
  4484 2A62 8D 91 2A			sta SYSTEM.PAUSE_006C.N+1
  4485 2A65 20 2A 11			jsr SYSTEM.PAUSE_006C
  4486
  4487 				; optimize OK (main.pas), line = 136
  4488
  4489 2A68 4C 04 2A			jmp l_0FD6
  4490
  4491 				; ------------------------------------------------------------
  4492
  4493 = 0800			ATTRIBUTE_ADDR	= $0800
  4494 = 0C00			SCREEN_ADDR	= $0C00
  4495 = 001F			BACKGROUND_COLOUR	= $1F
  4496 = 0000			BOREDER_COLOUR	= $00
  4497 = 0009			VICTORIES	= $09
  4498 = 0005			LOOK_AHEAD	= $05
  4499 = 007E			TRASH	= $7E
  4500 = 0020			EMPTY	= $20
  4501 = 00A0			WALL	= $A0
  4502 = 0041			WALL_COLOUR	= $41
  4503 = 0030			ZERO	= $30
  4504 = 0056			OBSTACLE_1	= $56
  4505 = 005B			OBSTACLE_2	= $5B
  4506 = 0035			OBST_COLOUR	= $35
  4507 = 0007			OBST_QUANTITY	= $07
  4508 = 0051			PLY_HEAD	= $51
  4509 = 002A			PLY_CRASH	= $2A
  4510 = 0057			PLY_BUSTED	= $57
  4511 = 0042			PLY_TAIL_UD	= $42
  4512 = 0040			PLY_TAIL_LR	= $40
  4513 = 007D			PLY_TAIL_RD	= $7D
  4514 = 006E			PLY_TAIL_RU	= $6E
  4515 = 006D			PLY_TAIL_LD	= $6D
  4516 = 0070			PLY_TAIL_LU	= $70
  4517 = 0062			PLY1_COLOUR	= $62
  4518 = 005D			PLY2_COLOUR	= $5D
  4519 = 0071			PLY3_COLOUR	= $71
  4520 = 0055			PLY4_COLOUR	= $55
  4521 = 0000			PLY_CTRL	= $00
  4522 = 0001			AI_STRAIGHT	= $01
  4523 = 0002			AI_SAPPER	= $02
  4524 = 0003			AI_BULLY	= $03
  4525 = 0004			AI_MIRROR	= $04
  4526 = 0001			JOY_UP	= $01
  4527 = 0002			JOY_DOWN	= $02
  4528 = 0004			JOY_LEFT	= $04
  4529 = 0008			JOY_RIGHT	= $08
  4530 = 0040			JOY_FIRE	= $40
  4531 = 0002			JOY_SELECT_1	= $02
  4532 = 0004			JOY_SELECT_2	= $04
  4533 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4534 2A6B			.var MUL40	= adr.MUL40 .word
  4535 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4536 2A6B			.var DIRECTION	= adr.DIRECTION .word
  4537 = FD30			KEYSCAN	= $FD30
  4538 = FF08			JOY	= $FF08
  4539 = FF15			BACKGROUND	= $FF15
  4540 = FF19			BOREDER	= $FF19
  4541 = 0058			T0B	= $58
  4542 = 0059			I0B	= $59
  4543 = 005A			ALIVE	= $5A
  4544 = 005B			NEWDIR	= $5B
  4545 = 005C			AVAILDIR	= $5C
  4546 = 005D			T0W	= $5D
  4547 = 005F			adr.PLY	= $5F
  4548 2A6B			.var PLY	= adr.PLY .word
  4549 = 2A84			PLY.X	= DATAORIGIN+$0000
  4550 = 2A85			PLY.Y	= DATAORIGIN+$0001
  4551 = 2A86			PLY.HEAD	= DATAORIGIN+$0002
  4552 = 2A87			PLY.COLOUR	= DATAORIGIN+$0003
  4553 = 2A88			PLY.DIR	= DATAORIGIN+$0004
  4554 = 2A89			PLY.BRAIN	= DATAORIGIN+$0005
  4555 = 2A8A			PLY.SCORE	= DATAORIGIN+$0006
  4556 = 2A8B			PLY.ISALIVE	= DATAORIGIN+$0007
  4557 = 0061			adr.TMPPLY	= $61
  4558 2A6B			.var TMPPLY	= adr.TMPPLY .word
  4559 = 2A84			TMPPLY.X	= DATAORIGIN+$0000
  4560 = 2A85			TMPPLY.Y	= DATAORIGIN+$0001
  4561 = 2A86			TMPPLY.HEAD	= DATAORIGIN+$0002
  4562 = 2A87			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4563 = 2A88			TMPPLY.DIR	= DATAORIGIN+$0004
  4564 = 2A89			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4565 = 2A8A			TMPPLY.SCORE	= DATAORIGIN+$0006
  4566 = 2A8B			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4567 = 0063			JOYSTATUS	= $63
  4568 = 2A94			LEVEL	= DATAORIGIN+$0010
  4569 = 2A95			GAMEOVER	= DATAORIGIN+$0011
  4570 = 2A96			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4571 2A6B			.var PLAYER1	= adr.PLAYER1 .word
  4572 = 2A96			PLAYER1.X	= DATAORIGIN+$0012
  4573 = 2A97			PLAYER1.Y	= DATAORIGIN+$0013
  4574 = 2A98			PLAYER1.HEAD	= DATAORIGIN+$0014
  4575 = 2A99			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4576 = 2A9A			PLAYER1.DIR	= DATAORIGIN+$0016
  4577 = 2A9B			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4578 = 2A9C			PLAYER1.SCORE	= DATAORIGIN+$0018
  4579 = 2A9D			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4580 = 2A9E			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4581 2A6B			.var PLAYER2	= adr.PLAYER2 .word
  4582 = 2A9E			PLAYER2.X	= DATAORIGIN+$001A
  4583 = 2A9F			PLAYER2.Y	= DATAORIGIN+$001B
  4584 = 2AA0			PLAYER2.HEAD	= DATAORIGIN+$001C
  4585 = 2AA1			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4586 = 2AA2			PLAYER2.DIR	= DATAORIGIN+$001E
  4587 = 2AA3			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4588 = 2AA4			PLAYER2.SCORE	= DATAORIGIN+$0020
  4589 = 2AA5			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4590 = 2AA6			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4591 2A6B			.var PLAYER3	= adr.PLAYER3 .word
  4592 = 2AA6			PLAYER3.X	= DATAORIGIN+$0022
  4593 = 2AA7			PLAYER3.Y	= DATAORIGIN+$0023
  4594 = 2AA8			PLAYER3.HEAD	= DATAORIGIN+$0024
  4595 = 2AA9			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4596 = 2AAA			PLAYER3.DIR	= DATAORIGIN+$0026
  4597 = 2AAB			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4598 = 2AAC			PLAYER3.SCORE	= DATAORIGIN+$0028
  4599 = 2AAD			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4600 = 2AAE			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4601 2A6B			.var PLAYER4	= adr.PLAYER4 .word
  4602 = 2AAE			PLAYER4.X	= DATAORIGIN+$002A
  4603 = 2AAF			PLAYER4.Y	= DATAORIGIN+$002B
  4604 = 2AB0			PLAYER4.HEAD	= DATAORIGIN+$002C
  4605 = 2AB1			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4606 = 2AB2			PLAYER4.DIR	= DATAORIGIN+$002E
  4607 = 2AB3			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4608 = 2AB4			PLAYER4.SCORE	= DATAORIGIN+$0030
  4609 = 2AB5			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4610 = 2AB6			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4611 2A6B			.var OBSTACLES	= adr.OBSTACLES .word
  4612 2A6B			@exit
  4613
  4614 2A6B A2 00		@halt	ldx #$00
  4615 2A6D 9A				txs
  4616
  4617 2A6E 60				rts
  4618
  4619 				; ------------------------------------------------------------
  4620
  4621 				; ------------------------------------------------------------
  4622
  4623 2A6F			.local	@DEFINES
  4624 2A6F			C4P
  4625 				.endl
  4626
  4627 2A6F			.local	@RESOURCE
  4628 				.endl
  4629
  4630 = 2A6F 0E 10		MUL40
  4630 = 2A71 40 10		DIRECTION
  4630 = 2A73 5F 00		PLY
  4630 = 2A75 61 00		TMPPLY
  4630 = 2A77 96 2A		PLAYER1
  4630 = 2A79 9E 2A		PLAYER2
  4630 = 2A7B A6 2A		PLAYER3
  4630 = 2A7D AE 2A		PLAYER4
  4630 = 2A7F B6 2A		OBSTACLES
  4630 				.endl							; MAIN
  4631
  4632 				; ------------------------------------------------------------
  4633 				; ------------------------------------------------------------
  4634
  4635 				.macro	UNITINITIALIZATION
  4636 				
  4637 					.ifdef MAIN.SYSTEM.@UnitInit
  4638 					jsr MAIN.SYSTEM.@UnitInit
  4639 					eif
  4640 				.endm
  4641
  4642 				; ------------------------------------------------------------
  4643
  4644 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4645 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4645 				SYSTEM: $10D5..$1177
  4646 					eif
  4647
  4648 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4648 				CODE: $100E..$2A6E
  4649
  4650 				; ------------------------------------------------------------
  4651
  4652 2A81				.align $04
  4653
  4654 2A84			DATAORIGIN
  4655 2A84 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4656
  4657 = 0006			VARINITSIZE	= *-DATAORIGIN
  4658 = 0063			VARDATASIZE	= 99
  4659
  4660 = 2AE7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4661
  4662 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4662 				DATA: $2A84..$2AE7
  4663
  4664 				; ------------------------------------------------------------
  4665
  4666 				.macro	STATICDATA
  4667 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4668 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4669 				.by  $C0 $03 $01 $02 $04 $08
  4670 				.endm
  4671
  4672 					end
