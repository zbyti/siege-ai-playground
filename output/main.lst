mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$10B6
   102
   103 				; ------------------------------------------------------------
   104
   105 10B7			START
   106 10B7 BA				tsx
   107 10B8 8E E8 2A			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0062			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 2B06			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10BB A2 9E			ldx #256-VLEN
   120 10BD A9 00			lda #$00
   121 10BF 9D 68 2A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10C5 A9 68 85 02 A9 2B + 	mwa #PROGRAMSTACK psptr
   127
   128 10CD A2 00			ldx #$00
   129 10CF 86 10			stx bp						; BP = 0
   130
   131 10D1 CA				dex						; X = 255
   132
   133 10D2				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10D2			.local	MAIN						; PROCEDURE
   136
   137 10D2 4C BC 2A			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10D5			.local	SYSTEM						; UNIT
   142
   143 10D5			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10D5 B5 18			lda :STACKORIGIN,x
   150 10D7 85 08			sta A
   151 10D9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10DB 85 09			sta A+1
   153 10DD CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10DE A0 00			ldy #0
   158 10E0 B1 08 8D 0B 2B		mva (edx),y Result
   159
   160 10E5			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10E5 E8				inx
   168 10E6 AD 0B 2B 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 2B0B			RESULT	= DATAORIGIN+$000B
   182
   183 = 2B0B			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10EB 60				rts						; ret
   187 				.endl
   188
   189 10EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10EC B5 18			lda :STACKORIGIN,x
   196 10EE 85 0C			sta VALUE
   197 10F0 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10F1 B5 18			lda :STACKORIGIN,x
   204 10F3 85 08			sta A
   205 10F5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10F7 85 09			sta A+1
   207 10F9 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10FA A0 00			ldy #0
   212 10FC A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 1100			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 1100 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 1101			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 1101 B5 18			lda :STACKORIGIN,x
   238 1103 85 0C			sta VALUE
   239 1105 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 1107 85 0D			sta VALUE+1
   241 1109 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 110A B5 18			lda :STACKORIGIN,x
   248 110C 85 08			sta A
   249 110E B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 1110 85 09			sta A+1
   251 1112 CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 1113 A0 00			ldy #0
   256 1115 A5 0C 91 08			mva value (edx),y
   257 1119 C8				iny
   258 111A A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 111E			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 111E 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 111F			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 111F 20 5B 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 1122			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 1122 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 1123			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 034  ---------------------
   304
   305 1123 A5 A5 C5 A5 F0 FC	 lda:cmp:req :c4p_time+2
   306
   307 1129			@exit
   308 					.ifdef @new
   309 					lda <@VarData
   310 					sta :ztmp
   311 					lda >@VarData
   312 					ldy #@VarDataSize-1
   313 					jmp @FreeMem
   314 					els
   315 1129 60				rts						; ret
   316 					eif
   317 				.endl
   318
   319 112A			.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD
   320
   321 				; ---------------------  ASM Block 035  ---------------------
   322
   323
   324 112A AD 0C 2B		loop  lda n
   325 112D 0D 0D 2B		  ora n+1
   326 1130 F0 14		  beq stop
   327
   328 1132 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   329
   330 1138 AD 0C 2B D0 03 CE +   dew n
   331
   332 1143 4C 2A 11		  jmp loop
   333 1146			stop
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 2B0C			N	= DATAORIGIN+$000C
   339
   340 = 2B0C			@VarData	= N
   341 = 0002			@VarDataSize	= 2
   342
   343 1146			@exit
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					els
   351 1146 60				rts						; ret
   352 					eif
   353 				.endl
   354
   355 1147			.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
   356 1147 8D 0E 2B			sta RANGE
   357
   358 				; ---------------------  ASM Block 039  ---------------------
   359
   360
   361 114A AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   362 114D 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   363 1150 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   364 1153 6D 1E FF		  adc ted_hcount    //Horizontal counter
   365 1156 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   366 1159 4D 1E FF		  eor ted_hcount    //Horizontal counter
   367 115C A8			  tay
   368
   369 115D AD 0E 2B		  lda range
   370 1160 F0 08		  beq stop
   371
   372 1162 85 0C		  sta ecx
   373 1164 84 04		  sty eax
   374
   375 1166 20 A3 10		  jsr imulCL
   376 1169 A8			  tay
   377
   378 116A 8C 0F 2B		stop  sty Result
   379
   380 116D			@exit
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   385 				; as Pointer
   386
   387 116D E8				inx
   388 116E AD 0F 2B 95 18		mva RESULT :STACKORIGIN,x
   389
   390 					.ifdef @new
   391 					lda <@VarData
   392 					sta :ztmp
   393 					lda >@VarData
   394 					ldy #@VarDataSize-1
   395 					jmp @FreeMem
   396 					eif
   397
   398 				; ------------------------------------------------------------
   399
   400 = 2B0E			RANGE	= DATAORIGIN+$000E
   401 = 2B0F			RESULT	= DATAORIGIN+$000F
   402
   403 = 2B0E			@VarData	= RANGE
   404 = 0002			@VarDataSize	= 2
   405
   406 1173 60				rts						; ret
   407 				.endl
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0101			__PORTB_BANKS	= $0101
   412 = 0648			M_PI_2	= $0648
   413 = 0192			D_PI_2	= $0192
   414 = 0004			D_PI_180	= $04
   415 = 0000			MGTIA	= $00
   416 = 0080			MVBXE	= $80
   417 = 0000			VBXE_XDLADR	= $00
   418 = 0100			VBXE_BCBADR	= $0100
   419 = 1000			VBXE_MAPADR	= $1000
   420 = 5000			VBXE_OVRADR	= $5000
   421 = B000			VBXE_WINDOW	= $B000
   422 = 0000			IDLI	= $00
   423 = 0001			IVBL	= $01
   424 = 00FE			CH_DELCHR	= $FE
   425 = 009B			CH_ENTER	= $9B
   426 = 001B			CH_ESC	= $1B
   427 = 001C			CH_CURS_UP	= $1C
   428 = 001D			CH_CURS_DOWN	= $1D
   429 = 001E			CH_CURS_LEFT	= $1E
   430 = 001F			CH_CURS_RIGHT	= $1F
   431 = 007F			CH_TAB	= $7F
   432 = 009B			CH_EOL	= $9B
   433 = 007D			CH_CLR	= $7D
   434 = 00FD			CH_BELL	= $FD
   435 = 007E			CH_DEL	= $7E
   436 = 009C			CH_DELLINE	= $9C
   437 = 009D			CH_INSLINE	= $9D
   438 = 0000			COLOR_BLACK	= $00
   439 = 000E			COLOR_WHITE	= $0E
   440 = 0032			COLOR_RED	= $32
   441 = 0096			COLOR_CYAN	= $96
   442 = 0068			COLOR_VIOLET	= $68
   443 = 00C4			COLOR_GREEN	= $C4
   444 = 0074			COLOR_BLUE	= $74
   445 = 00EE			COLOR_YELLOW	= $EE
   446 = 0028			COLOR_ORANGE	= $28
   447 = 00E4			COLOR_BROWN	= $E4
   448 = 003C			COLOR_LIGHTRED	= $3C
   449 = 0004			COLOR_GRAY1	= $04
   450 = 0006			COLOR_GRAY2	= $06
   451 = 000A			COLOR_GRAY3	= $0A
   452 = 00CC			COLOR_LIGHTGREEN	= $CC
   453 = 007C			COLOR_LIGHTBLUE	= $7C
   454 = 0004			FMOPENREAD	= $04
   455 = 0008			FMOPENWRITE	= $08
   456 = 0009			FMOPENAPPEND	= $09
   457 = 000C			FMOPENREADWRITE	= $0C
   458 = 2B00			SCREENWIDTH	= DATAORIGIN+$0000
   459 = 2B02			SCREENHEIGHT	= DATAORIGIN+$0002
   460 = 2B04			DATESEPARATOR	= DATAORIGIN+$0004
   461 = D014			TVSYSTEM	= $D014
   462 = D20A			RND	= $D20A
   463 = 02C0			adr.PALETTE	= $02C0
   464 1174			.var PALETTE	= adr.PALETTE .word
   465 = D012			adr.HPALETTE	= $D012
   466 1174			.var HPALETTE	= adr.HPALETTE .word
   467 = 2B05			FILEMODE	= DATAORIGIN+$0005
   468 = 2B06			GRAPHMODE	= DATAORIGIN+$0006
   469 = 2B07			IORESULT	= DATAORIGIN+$0007
   470 = 2B08			EOLN	= DATAORIGIN+$0008
   471 = 2B09			RNDSEED	= DATAORIGIN+$0009
   472
   473 = 1174 C0 02		PALETTE
   473 = 1176 12 D0		HPALETTE
   473 				.endl							; UNIT SYSTEM
   474
   475 1178			.local	PUTCHAR_0072					; PROCEDURE | OVERLOAD
   476
   477 				; optimize OK (tools.inc), line = 5
   478
   479 1178 AD 43 2B			lda Y
   480 117B 0A				asl @
   481 117C A8				tay
   482 117D B9 0E 10			lda adr.MUL40,y
   483 1180 18 6D 42 2B			add X
   484 1184 85 5D			sta T0W
   485 1186 B9 0F 10			lda adr.MUL40+1,y
   486 1189 69 0C			adc #$0C
   487 118B 85 5E			sta T0W+1
   488 118D A4 5E			ldy T0W+1
   489 118F 84 11			sty :bp+1
   490 1191 A4 5D			ldy T0W
   491 1193 AD 44 2B			lda V
   492 1196 91 10			sta (:bp),y
   493
   494 				; ------------------------------------------------------------
   495
   496 = 2B42			X	= DATAORIGIN+$0042
   497 = 2B43			Y	= DATAORIGIN+$0043
   498 = 2B44			V	= DATAORIGIN+$0044
   499
   500 = 2B42			@VarData	= X
   501 = 0003			@VarDataSize	= 3
   502
   503 1198			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 1198 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 1199			.local	PUTCHAR_008E					; PROCEDURE | OVERLOAD
   516
   517 				; optimize OK (tools.inc), line = 12
   518
   519 1199 AD 46 2B			lda Y
   520 119C 0A				asl @
   521 119D A8				tay
   522 119E B9 0E 10			lda adr.MUL40,y
   523 11A1 18 6D 45 2B			add X
   524 11A5 85 5D			sta T0W
   525 11A7 B9 0F 10			lda adr.MUL40+1,y
   526 11AA 69 08			adc #$08
   527 11AC 85 5E			sta T0W+1
   528
   529 				; optimize OK (tools.inc), line = 13
   530
   531 11AE 85 11			sta :bp+1
   532 11B0 A4 5D			ldy T0W
   533 11B2 AD 48 2B			lda C
   534 11B5 91 10			sta (:bp),y
   535 11B7 A5 5E			lda T0W+1
   536 11B9 18 69 04			add #$04
   537 11BC 85 11			sta :bp+1
   538 11BE AD 47 2B			lda V
   539 11C1 91 10			sta (:bp),y
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2B45			X	= DATAORIGIN+$0045
   544 = 2B46			Y	= DATAORIGIN+$0046
   545 = 2B47			V	= DATAORIGIN+$0047
   546 = 2B48			C	= DATAORIGIN+$0048
   547
   548 = 2B45			@VarData	= X
   549 = 0004			@VarDataSize	= 4
   550
   551 11C3			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 11C3 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 11C4			.local	GETCHAR						; FUNCTION
   564
   565 				; optimize OK (tools.inc), line = 20
   566
   567 11C4 AD 4A 2B			lda Y
   568 11C7 0A				asl @
   569 11C8 A8				tay
   570 11C9 B9 0E 10			lda adr.MUL40,y
   571 11CC 18 6D 49 2B			add X
   572 11D0 85 5D			sta T0W
   573 11D2 B9 0F 10			lda adr.MUL40+1,y
   574 11D5 69 0C			adc #$0C
   575 11D7 85 5E			sta T0W+1
   576
   577 				; optimize OK (tools.inc), line = 21
   578
   579 11D9 85 11			sta :bp+1
   580 11DB A4 5D			ldy T0W
   581 11DD B1 10			lda (:bp),y
   582 11DF 8D 4B 2B			sta RESULT
   583 11E2			@exit
   584
   585 				; ------------------------------------------------------------
   586
   587 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   588 				; as Pointer
   589
   590 11E2 E8				inx
   591 11E3 AD 4B 2B 95 18		mva RESULT :STACKORIGIN,x
   592
   593 					.ifdef @new
   594 					lda <@VarData
   595 					sta :ztmp
   596 					lda >@VarData
   597 					ldy #@VarDataSize-1
   598 					jmp @FreeMem
   599 					eif
   600
   601 				; ------------------------------------------------------------
   602
   603 = 2B49			X	= DATAORIGIN+$0049
   604 = 2B4A			Y	= DATAORIGIN+$004A
   605 = 2B4B			RESULT	= DATAORIGIN+$004B
   606
   607 = 2B49			@VarData	= X
   608 = 0003			@VarDataSize	= 3
   609
   610 11E8 60				rts						; ret
   611 				.endl
   612
   613 11E9			.local	SHOWSCORE					; PROCEDURE
   614
   615 				; optimize OK (tools.inc), line = 28
   616
   617 11E9 AD 19 2B			lda PLAYER1.ISALIVE
   618 11EC F0 19			jeq l_00E2
   619 11EE AD 15 2B			lda PLAYER1.COLOUR
   620 11F1 8D 48 2B			sta PUTCHAR_008E.C
   621 11F4 AD 18 2B			lda PLAYER1.SCORE
   622 11F7 8D 47 2B			sta PUTCHAR_008E.V
   623 11FA A9 00			lda #$00
   624 11FC 8D 46 2B			sta PUTCHAR_008E.Y
   625 11FF A9 1E			lda #$1E
   626 1201 8D 45 2B			sta PUTCHAR_008E.X
   627 1204 20 99 11			jsr PUTCHAR_008E
   628 1207			l_00E2
   629
   630 				; optimize OK (tools.inc), line = 29
   631
   632 1207 AD 21 2B			lda PLAYER2.ISALIVE
   633 120A F0 19			jeq l_00FA
   634 120C AD 1D 2B			lda PLAYER2.COLOUR
   635 120F 8D 48 2B			sta PUTCHAR_008E.C
   636 1212 AD 20 2B			lda PLAYER2.SCORE
   637 1215 8D 47 2B			sta PUTCHAR_008E.V
   638 1218 A9 00			lda #$00
   639 121A 8D 46 2B			sta PUTCHAR_008E.Y
   640 121D A9 20			lda #$20
   641 121F 8D 45 2B			sta PUTCHAR_008E.X
   642 1222 20 99 11			jsr PUTCHAR_008E
   643 1225			l_00FA
   644
   645 				; optimize OK (tools.inc), line = 30
   646
   647 1225 AD 29 2B			lda PLAYER3.ISALIVE
   648 1228 F0 19			jeq l_0112
   649 122A AD 25 2B			lda PLAYER3.COLOUR
   650 122D 8D 48 2B			sta PUTCHAR_008E.C
   651 1230 AD 28 2B			lda PLAYER3.SCORE
   652 1233 8D 47 2B			sta PUTCHAR_008E.V
   653 1236 A9 00			lda #$00
   654 1238 8D 46 2B			sta PUTCHAR_008E.Y
   655 123B A9 22			lda #$22
   656 123D 8D 45 2B			sta PUTCHAR_008E.X
   657 1240 20 99 11			jsr PUTCHAR_008E
   658 1243			l_0112
   659
   660 				; optimize OK (tools.inc), line = 31
   661
   662 1243 AD 31 2B			lda PLAYER4.ISALIVE
   663 1246 F0 19			jeq l_012A
   664 1248 AD 2D 2B			lda PLAYER4.COLOUR
   665 124B 8D 48 2B			sta PUTCHAR_008E.C
   666 124E AD 30 2B			lda PLAYER4.SCORE
   667 1251 8D 47 2B			sta PUTCHAR_008E.V
   668 1254 A9 00			lda #$00
   669 1256 8D 46 2B			sta PUTCHAR_008E.Y
   670 1259 A9 24			lda #$24
   671 125B 8D 45 2B			sta PUTCHAR_008E.X
   672 125E 20 99 11			jsr PUTCHAR_008E
   673 1261			l_012A
   674 1261			@exit
   675 					.ifdef @new
   676 					lda <@VarData
   677 					sta :ztmp
   678 					lda >@VarData
   679 					ldy #@VarDataSize-1
   680 					jmp @FreeMem
   681 					els
   682 1261 60				rts						; ret
   683 					eif
   684 				.endl
   685
   686 1262			.local	UPDATESCORE					; PROCEDURE
   687
   688 				; optimize OK (tools.inc), line = 38
   689
   690 1262 AD 19 2B			lda PLAYER1.ISALIVE
   691 1265 F0 03			jeq l_0146
   692 1267 EE 18 2B			inc PLAYER1.SCORE
   693 126A			l_0146
   694
   695 				; optimize OK (tools.inc), line = 39
   696
   697 126A AD 21 2B			lda PLAYER2.ISALIVE
   698 126D F0 03			jeq l_0159
   699 126F EE 20 2B			inc PLAYER2.SCORE
   700 1272			l_0159
   701
   702 				; optimize OK (tools.inc), line = 40
   703
   704 1272 AD 29 2B			lda PLAYER3.ISALIVE
   705 1275 F0 03			jeq l_016C
   706 1277 EE 28 2B			inc PLAYER3.SCORE
   707 127A			l_016C
   708
   709 				; optimize OK (tools.inc), line = 41
   710
   711 127A AD 31 2B			lda PLAYER4.ISALIVE
   712 127D F0 03			jeq l_017F
   713 127F EE 30 2B			inc PLAYER4.SCORE
   714 1282			l_017F
   715 1282			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 1282 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 1283			.local	CHECKAVAILDIR					; PROCEDURE
   728
   729 				; optimize OK (tools.inc), line = 48
   730
   731 1283 A9 00			lda #$00
   732 1285 85 5C			sta AVAILDIR
   733
   734 				; optimize OK (tools.inc), line = 49
   735
   736 1287 AC EF 2A 84 12 AC + 	mwy PLY :bp2
   737 1291 A0 01			ldy #PLY.Y-DATAORIGIN
   738 1293 B1 12			lda (:bp2),y
   739 1295 0A				asl @
   740 1296 A8				tay
   741 1297 A9 00			lda #$00
   742 1299 18 79 0E 10			add adr.MUL40,y
   743 129D 85 21			sta :STACKORIGIN+9
   744 129F A9 0C			lda #$0C
   745 12A1 79 0F 10			adc adr.MUL40+1,y
   746 12A4 85 31			sta :STACKORIGIN+STACKWIDTH+9
   747 12A6 A0 00			ldy #PLY.X-DATAORIGIN
   748 12A8 A5 21			lda :STACKORIGIN+9
   749 12AA 18 71 12			add (:bp2),y
   750 12AD 85 5D			sta T0W
   751 12AF A5 31			lda :STACKORIGIN+STACKWIDTH+9
   752 12B1 69 00			adc #$00
   753 12B3 85 5E			sta T0W+1
   754
   755 				; optimize OK (tools.inc), line = 51
   756
   757 12B5 A5 5D			lda T0W
   758 12B7 38 E9 28			sub #$28
   759 12BA 85 21			sta :STACKORIGIN+9
   760 12BC A5 5E			lda T0W+1
   761 12BE E9 00			sbc #$00
   762 12C0 85 11			sta :bp+1
   763 12C2 A4 21			ldy :STACKORIGIN+9
   764 12C4 B1 10			lda (:bp),y
   765 12C6 C9 20			cmp #$20
   766 12C8 D0 06			jne l_01B6
   767 12CA A5 5C			lda AVAILDIR
   768 12CC 09 01			ora #$01
   769 12CE 85 5C			sta AVAILDIR
   770 12D0			l_01B6
   771
   772 				; optimize OK (tools.inc), line = 52
   773
   774 12D0 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   775 12D8 A0 28			ldy #$28
   776 12DA B1 12			lda (:bp2),y
   777 12DC C9 20			cmp #$20
   778 12DE D0 06			jne l_01D9
   779 12E0 A5 5C			lda AVAILDIR
   780 12E2 09 02			ora #$02
   781 12E4 85 5C			sta AVAILDIR
   782 12E6			l_01D9
   783
   784 				; optimize OK (tools.inc), line = 53
   785
   786 12E6 A5 5D			lda T0W
   787 12E8 38 E9 01			sub #$01
   788 12EB 85 21			sta :STACKORIGIN+9
   789 12ED A5 5E			lda T0W+1
   790 12EF E9 00			sbc #$00
   791 12F1 85 11			sta :bp+1
   792 12F3 A4 21			ldy :STACKORIGIN+9
   793 12F5 B1 10			lda (:bp),y
   794 12F7 C9 20			cmp #$20
   795 12F9 D0 06			jne l_01FC
   796 12FB A5 5C			lda AVAILDIR
   797 12FD 09 04			ora #$04
   798 12FF 85 5C			sta AVAILDIR
   799 1301			l_01FC
   800
   801 				; optimize OK (tools.inc), line = 54
   802
   803 1301 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
   804 1309 A0 01			ldy #$01
   805 130B B1 12			lda (:bp2),y
   806 130D C9 20			cmp #$20
   807 130F D0 06			jne l_021F
   808 1311 A5 5C			lda AVAILDIR
   809 1313 09 08			ora #$08
   810 1315 85 5C			sta AVAILDIR
   811 1317			l_021F
   812 1317			@exit
   813 					.ifdef @new
   814 					lda <@VarData
   815 					sta :ztmp
   816 					lda >@VarData
   817 					ldy #@VarDataSize-1
   818 					jmp @FreeMem
   819 					els
   820 1317 60				rts						; ret
   821 					eif
   822 				.endl
   823
   824 1318			.local	ANIMATEOBSTACLES				; PROCEDURE
   825
   826 				; optimize FAIL (0, tools.inc), line = 63
   827
   828 1318 EE 4C 2B			inc COUNTER
   829
   830 				; optimize OK (tools.inc), line = 64
   831
   832 131B AD 4C 2B			lda COUNTER
   833 131E 29 01			and #$01
   834 1320 F0 08			jeq l_024A
   835 1322 A9 56			lda #$56
   836 1324 8D 4D 2B			sta OBST
   837 1327 4C 2F 13			jmp l_0258
   838 132A			l_024A
   839 132A A9 5B			lda #$5B
   840 132C 8D 4D 2B			sta OBST
   841 132F			l_0258
   842
   843 				; optimize OK (tools.inc), line = 65
   844
   845 132F A9 07			lda #$07
   846 1331 85 59			sta I0B
   847
   848 1333			l_0265
   849 				; --- ForToDoCondition
   850 1333 A5 59			lda I0B
   851 1335 0A				asl @
   852 1336 A8				tay
   853 1337 B9 32 2B			lda adr.OBSTACLES,y
   854 133A 85 21			sta :STACKORIGIN+9
   855 133C B9 33 2B			lda adr.OBSTACLES+1,y
   856 133F 85 11			sta :bp+1
   857 1341 A4 21			ldy :STACKORIGIN+9
   858 1343 AD 4D 2B			lda OBST
   859 1346 91 10			sta (:bp),y
   860 1348 C6 59			dec I0B
   861 134A 10 E7			jpl l_0265
   862 134C			l_0273
   863
   864 				; ------------------------------------------------------------
   865
   866 = 2B4C			COUNTER	= DATAORIGIN+$004C
   867 = 2B4D			OBST	= DATAORIGIN+$004D
   868 = 0000			@FORTMP_0262	= $00
   869
   870 = 2B4C			@VarData	= COUNTER
   871 = 0002			@VarDataSize	= 2
   872
   873 134C			@exit
   874 					.ifdef @new
   875 					lda <@VarData
   876 					sta :ztmp
   877 					lda >@VarData
   878 					ldy #@VarDataSize-1
   879 					jmp @FreeMem
   880 					els
   881 134C 60				rts						; ret
   882 					eif
   883 				.endl
   884
   885 134D			.local	CALCOBSTACLEADDR				; FUNCTION
   886
   887 				; optimize OK (tools.inc), line = 72
   888
   889 134D AD 4F 2B			lda Y
   890 1350 0A				asl @
   891 1351 A8				tay
   892 1352 AD 4E 2B			lda X
   893 1355 18 79 0E 10			add adr.MUL40,y
   894 1359 8D 50 2B			sta RESULT
   895 135C A9 0C			lda #$0C
   896 135E 79 0F 10			adc adr.MUL40+1,y
   897 1361 8D 51 2B			sta RESULT+1
   898 1364			@exit
   899
   900 				; ------------------------------------------------------------
   901
   902 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   903 				; as Pointer
   904
   905 1364 E8				inx
   906 1365 AD 50 2B 95 18		mva RESULT :STACKORIGIN,x
   907 136A AD 51 2B 95 28		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   908
   909 					.ifdef @new
   910 					lda <@VarData
   911 					sta :ztmp
   912 					lda >@VarData
   913 					ldy #@VarDataSize-1
   914 					jmp @FreeMem
   915 					eif
   916
   917 				; ------------------------------------------------------------
   918
   919 = 2B4E			X	= DATAORIGIN+$004E
   920 = 2B4F			Y	= DATAORIGIN+$004F
   921 = 2B50			RESULT	= DATAORIGIN+$0050
   922
   923 = 2B4E			@VarData	= X
   924 = 0004			@VarDataSize	= 4
   925
   926 136F 60				rts						; ret
   927 				.endl
   928
   929 1370			.local	SAVEOBSTACLES					; PROCEDURE
   930
   931 				; optimize OK (tools.inc), line = 79
   932
   933 1370 A9 07			lda #$07
   934 1372 85 59			sta I0B
   935
   936 1374			l_02A6
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (tools.inc), line = 80
   940
   941 1374 A5 59			lda I0B
   942 1376 0A				asl @
   943 1377 A8				tay
   944 1378 B9 33 2B			lda adr.OBSTACLES+1,y
   945 137B C9 00			cmp #$00
   946 137D D0 05			bne @+
   947 137F B9 32 2B			lda adr.OBSTACLES,y
   948 1382 C9 7E			cmp #$7E
   949 1384			@
   950 1384 F0 29			jeq l_02C8
   951
   952 				; optimize OK (tools.inc), line = 81
   953
   954 1386 B9 32 2B			lda adr.OBSTACLES,y
   955 1389 85 21			sta :STACKORIGIN+9
   956 138B B9 33 2B			lda adr.OBSTACLES+1,y
   957 138E 85 11			sta :bp+1
   958 1390 A4 21			ldy :STACKORIGIN+9
   959 1392 A9 56			lda #$56
   960 1394 91 10			sta (:bp),y
   961
   962 				; optimize OK (tools.inc), line = 82
   963
   964 1396 A5 59			lda I0B
   965 1398 0A				asl @
   966 1399 A8				tay
   967 139A B9 32 2B			lda adr.OBSTACLES,y
   968 139D 38 E9 00			sub #$00
   969 13A0 85 21			sta :STACKORIGIN+9
   970 13A2 B9 33 2B			lda adr.OBSTACLES+1,y
   971 13A5 E9 04			sbc #$04
   972 13A7 85 11			sta :bp+1
   973 13A9 A4 21			ldy :STACKORIGIN+9
   974 13AB A9 35			lda #$35
   975 13AD 91 10			sta (:bp),y
   976 13AF			l_02C8
   977
   978 				; --- ForToDoEpilog
   979 13AF C6 59			dec I0B
   980 13B1 10 C1			jpl l_02A6
   981 13B3			l_02B4
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0000			@FORTMP_02A3	= $00
   986 13B3			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					els
   994 13B3 60				rts						; ret
   995 					eif
   996 				.endl
   997
   998 13B4			.local	DRAWPLAYER					; PROCEDURE
   999
  1000 				; optimize OK (tools.inc), line = 91
  1001
  1002 13B4 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1003 13BE A0 04			ldy #PLY.DIR-DATAORIGIN
  1004 13C0 B1 12			lda (:bp2),y
  1005 13C2 C5 5B			cmp NEWDIR
  1006 13C4 D0 14			jne l_02FA
  1007
  1008 				; optimize OK (tools.inc), line = 92
  1009
  1010 13C6 A5 5B			lda NEWDIR
  1011 13C8 29 0C			and #$0C
  1012 13CA F0 07			jeq l_0311
  1013 13CC A9 40			lda #$40
  1014 13CE 85 58			sta T0B
  1015 13D0 4C D7 13			jmp l_031F
  1016 13D3			l_0311
  1017 13D3 A9 42			lda #$42
  1018 13D5 85 58			sta T0B
  1019 13D7			l_031F
  1020 13D7 4C 4A 14			jmp l_032C
  1021 13DA			l_02FA
  1022
  1023 				; optimize OK (tools.inc), line = 94
  1024
  1025 13DA AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1026 13E4 A0 04			ldy #PLY.DIR-DATAORIGIN
  1027 13E6 B1 12			lda (:bp2),y
  1028 13E8 29 0A			and #$0A
  1029 13EA F0 0A			jeq l_0352
  1030 13EC A5 5B			lda NEWDIR
  1031 13EE 29 05			and #$05
  1032 13F0 F0 04			jeq l_0352
  1033 13F2 A9 7D			lda #$7D
  1034 13F4 85 58			sta T0B
  1035 13F6			l_0352
  1036
  1037 				; optimize OK (tools.inc), line = 95
  1038
  1039 13F6 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1040 1400 A0 04			ldy #PLY.DIR-DATAORIGIN
  1041 1402 B1 12			lda (:bp2),y
  1042 1404 29 09			and #$09
  1043 1406 F0 0A			jeq l_037F
  1044 1408 A5 5B			lda NEWDIR
  1045 140A 29 06			and #$06
  1046 140C F0 04			jeq l_037F
  1047 140E A9 6E			lda #$6E
  1048 1410 85 58			sta T0B
  1049 1412			l_037F
  1050
  1051 				; optimize OK (tools.inc), line = 96
  1052
  1053 1412 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1054 141C A0 04			ldy #PLY.DIR-DATAORIGIN
  1055 141E B1 12			lda (:bp2),y
  1056 1420 29 06			and #$06
  1057 1422 F0 0A			jeq l_03AC
  1058 1424 A5 5B			lda NEWDIR
  1059 1426 29 09			and #$09
  1060 1428 F0 04			jeq l_03AC
  1061 142A A9 6D			lda #$6D
  1062 142C 85 58			sta T0B
  1063 142E			l_03AC
  1064
  1065 				; optimize OK (tools.inc), line = 97
  1066
  1067 142E AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1068 1438 A0 04			ldy #PLY.DIR-DATAORIGIN
  1069 143A B1 12			lda (:bp2),y
  1070 143C 29 05			and #$05
  1071 143E F0 0A			jeq l_03D9
  1072 1440 A5 5B			lda NEWDIR
  1073 1442 29 0A			and #$0A
  1074 1444 F0 04			jeq l_03D9
  1075 1446 A9 70			lda #$70
  1076 1448 85 58			sta T0B
  1077 144A			l_03D9
  1078 144A			l_032C
  1079
  1080 				; optimize OK (tools.inc), line = 99
  1081
  1082 144A AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1083 1454 A0 00			ldy #PLY.X-DATAORIGIN
  1084 1456 B1 12			lda (:bp2),y
  1085 1458 8D 49 2B			sta GETCHAR.X
  1086 145B A0 01			ldy #PLY.Y-DATAORIGIN
  1087 145D B1 12			lda (:bp2),y
  1088 145F 8D 4A 2B			sta GETCHAR.Y
  1089 1462 20 C4 11			jsr GETCHAR
  1090 1465 CA				dex
  1091 1466 B5 19			lda :STACKORIGIN+1,x
  1092 1468 C9 2A			cmp #$2A
  1093 146A F0 20			jeq l_03F6
  1094 146C			@
  1095 146C AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1096 1476 A0 00			ldy #PLY.X-DATAORIGIN
  1097 1478 B1 12			lda (:bp2),y
  1098 147A 8D 42 2B			sta PUTCHAR_0072.X
  1099 147D A0 01			ldy #PLY.Y-DATAORIGIN
  1100 147F B1 12			lda (:bp2),y
  1101 1481 8D 43 2B			sta PUTCHAR_0072.Y
  1102 1484 A5 58			lda T0B
  1103 1486 8D 44 2B			sta PUTCHAR_0072.V
  1104 1489 20 78 11			jsr PUTCHAR_0072
  1105 148C			l_03F6
  1106
  1107 				; optimize OK (tools.inc), line = 101
  1108
  1109 148C AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1110 1496 A0 04			ldy #PLY.DIR-DATAORIGIN
  1111 1498 A5 5B			lda NEWDIR
  1112 149A 91 12			sta (:bp2),y
  1113
  1114 				; optimize OK (tools.inc), line = 103
  1115
  1116 149C A5 5B			lda NEWDIR
  1117 149E 8D 52 2B			sta @CASETMP_0003
  1118 14A1 C9 01			cmp #$01
  1119 14A3 D0 16			jne l_0414
  1120 14A5			@
  1121
  1122 				; optimize OK (tools.inc), line = 104
  1123
  1124 14A5 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1125 14AF A0 01			ldy #PLY.Y-DATAORIGIN
  1126 14B1 B1 12			lda (:bp2),y
  1127 14B3 38 E9 01			sub #$01
  1128 14B6 91 12			sta (:bp2),y
  1129
  1130 14B8 4C 06 15			jmp a_0003
  1131 14BB			l_0414
  1132 14BB C9 02			cmp #$02
  1133 14BD D0 16			jne l_041E
  1134 14BF			@
  1135
  1136 				; optimize OK (tools.inc), line = 105
  1137
  1138 14BF AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1139 14C9 A0 01			ldy #PLY.Y-DATAORIGIN
  1140 14CB B1 12			lda (:bp2),y
  1141 14CD 18 69 01			add #$01
  1142 14D0 91 12			sta (:bp2),y
  1143
  1144 14D2 4C 06 15			jmp a_0003
  1145 14D5			l_041E
  1146 14D5 C9 04			cmp #$04
  1147 14D7 D0 16			jne l_0428
  1148 14D9			@
  1149
  1150 				; optimize OK (tools.inc), line = 106
  1151
  1152 14D9 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1153 14E3 A0 00			ldy #PLY.X-DATAORIGIN
  1154 14E5 B1 12			lda (:bp2),y
  1155 14E7 38 E9 01			sub #$01
  1156 14EA 91 12			sta (:bp2),y
  1157
  1158 14EC 4C 06 15			jmp a_0003
  1159 14EF			l_0428
  1160 14EF C9 08			cmp #$08
  1161 14F1 D0 13			jne l_0432
  1162 14F3			@
  1163
  1164 				; optimize OK (tools.inc), line = 107
  1165
  1166 14F3 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1167 14FD A0 00			ldy #PLY.X-DATAORIGIN
  1168 14FF B1 12			lda (:bp2),y
  1169 1501 18 69 01			add #$01
  1170 1504 91 12			sta (:bp2),y
  1171
  1172 1506			l_0432
  1173 1506			a_0003
  1174
  1175 				; optimize OK (tools.inc), line = 110
  1176
  1177 1506 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1178 1510 A0 00			ldy #PLY.X-DATAORIGIN
  1179 1512 B1 12			lda (:bp2),y
  1180 1514 8D 45 2B			sta PUTCHAR_008E.X
  1181 1517 A0 01			ldy #PLY.Y-DATAORIGIN
  1182 1519 B1 12			lda (:bp2),y
  1183 151B 8D 46 2B			sta PUTCHAR_008E.Y
  1184 151E A0 02			ldy #PLY.HEAD-DATAORIGIN
  1185 1520 B1 12			lda (:bp2),y
  1186 1522 8D 47 2B			sta PUTCHAR_008E.V
  1187 1525 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1188 1527 B1 12			lda (:bp2),y
  1189 1529 8D 48 2B			sta PUTCHAR_008E.C
  1190 152C 20 99 11			jsr PUTCHAR_008E
  1191
  1192 				; ------------------------------------------------------------
  1193
  1194 = 2B52			@CASETMP_0003	= DATAORIGIN+$0052
  1195
  1196 = 2B52			@VarData	= @CASETMP_0003
  1197 = 0001			@VarDataSize	= 1
  1198
  1199 152F			@exit
  1200 					.ifdef @new
  1201 					lda <@VarData
  1202 					sta :ztmp
  1203 					lda >@VarData
  1204 					ldy #@VarDataSize-1
  1205 					jmp @FreeMem
  1206 					els
  1207 152F 60				rts						; ret
  1208 					eif
  1209 				.endl
  1210
  1211 1530			.local	DRAWBUSTEDPLAYER				; PROCEDURE
  1212
  1213 				; optimize OK (tools.inc), line = 117
  1214
  1215 1530 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1216 153A A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1217 153C A9 00			lda #$00
  1218 153E 91 12			sta (:bp2),y
  1219 1540 C6 5A			dec ALIVE
  1220
  1221 				; optimize OK (tools.inc), line = 118
  1222
  1223 1542 A0 00			ldy #PLY.X-DATAORIGIN
  1224 1544 B1 12			lda (:bp2),y
  1225 1546 8D 45 2B			sta PUTCHAR_008E.X
  1226 1549 A0 01			ldy #PLY.Y-DATAORIGIN
  1227 154B B1 12			lda (:bp2),y
  1228 154D 8D 46 2B			sta PUTCHAR_008E.Y
  1229 1550 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1230 1552 B1 12			lda (:bp2),y
  1231 1554 18 69 80			add #$80
  1232 1557 8D 48 2B			sta PUTCHAR_008E.C
  1233 155A A9 57			lda #$57
  1234 155C 8D 47 2B			sta PUTCHAR_008E.V
  1235 155F 20 99 11			jsr PUTCHAR_008E
  1236 1562			@exit
  1237 					.ifdef @new
  1238 					lda <@VarData
  1239 					sta :ztmp
  1240 					lda >@VarData
  1241 					ldy #@VarDataSize-1
  1242 					jmp @FreeMem
  1243 					els
  1244 1562 60				rts						; ret
  1245 					eif
  1246 				.endl
  1247
  1248 1563			.local	CHECKJOYSTATUS					; PROCEDURE
  1249
  1250 				; optimize OK (tools.inc), line = 125
  1251
  1252 1563 A9 02			lda #$02
  1253 1565 8D 08 FF			sta JOY
  1254 1568 A9 FF			lda #$FF
  1255 156A 8D 30 FD			sta KEYSCAN
  1256
  1257 				; optimize OK (tools.inc), line = 126
  1258
  1259 156D AD 08 FF			lda JOY
  1260 1570 49 FF			eor #$FF
  1261 1572 85 63			sta JOYSTATUS
  1262 1574			@exit
  1263 					.ifdef @new
  1264 					lda <@VarData
  1265 					sta :ztmp
  1266 					lda >@VarData
  1267 					ldy #@VarDataSize-1
  1268 					jmp @FreeMem
  1269 					els
  1270 1574 60				rts						; ret
  1271 					eif
  1272 				.endl
  1273
  1274 1575			.local	SETPLAYER					; PROCEDURE
  1275
  1276 				; optimize OK (tools.inc), line = 133
  1277
  1278 1575 AD 53 2B			lda P
  1279 1578 8D EF 2A			sta PLY
  1280 157B 85 12			sta :bp2
  1281 157D AD 54 2B			lda P+1
  1282 1580 8D F0 2A			sta PLY+1
  1283 1583 85 13			sta :bp2+1
  1284 				; optimize OK (tools.inc), line = 134
  1285 1585 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1286 1587 AD 58 2B			lda BRAIN
  1287 158A 91 12			sta (:bp2),y
  1288 158C A0 00			ldy #PLY.X-DATAORIGIN
  1289 158E AD 55 2B			lda X
  1290 1591 91 12			sta (:bp2),y
  1291 1593 A0 01			ldy #PLY.Y-DATAORIGIN
  1292 1595 AD 56 2B			lda Y
  1293 1598 91 12			sta (:bp2),y
  1294 159A A0 04			ldy #PLY.DIR-DATAORIGIN
  1295 159C AD 57 2B			lda DIR
  1296 159F 91 12			sta (:bp2),y
  1297
  1298 				; optimize OK (tools.inc), line = 135
  1299
  1300 15A1 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1301 15A3 AD 59 2B			lda HEAD
  1302 15A6 91 12			sta (:bp2),y
  1303 15A8 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1304 15AA AD 5A 2B			lda COLOUR
  1305 15AD 91 12			sta (:bp2),y
  1306 15AF A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1307 15B1 AD 5B 2B			lda ISALIVE
  1308 15B4 91 12			sta (:bp2),y
  1309
  1310 				; optimize OK (tools.inc), line = 136
  1311
  1312 15B6 AD 5B 2B			lda ISALIVE
  1313 15B9 F0 1D			jeq l_04B8
  1314
  1315 				; optimize FAIL (0, tools.inc), line = 137
  1316
  1317 15BB E6 5A			inc ALIVE
  1318 15BD AD 5A 2B			lda COLOUR
  1319 15C0 8D 48 2B			sta PUTCHAR_008E.C
  1320 15C3 AD 59 2B			lda HEAD
  1321 15C6 8D 47 2B			sta PUTCHAR_008E.V
  1322 15C9 AD 56 2B			lda Y
  1323 15CC 8D 46 2B			sta PUTCHAR_008E.Y
  1324 15CF AD 55 2B			lda X
  1325 15D2 8D 45 2B			sta PUTCHAR_008E.X
  1326 15D5 20 99 11			jsr PUTCHAR_008E
  1327 15D8			l_04B8
  1328
  1329 				; ------------------------------------------------------------
  1330
  1331 = 2B53			P	= DATAORIGIN+$0053
  1332 = 2B55			X	= DATAORIGIN+$0055
  1333 = 2B56			Y	= DATAORIGIN+$0056
  1334 = 2B57			DIR	= DATAORIGIN+$0057
  1335 = 2B58			BRAIN	= DATAORIGIN+$0058
  1336 = 2B59			HEAD	= DATAORIGIN+$0059
  1337 = 2B5A			COLOUR	= DATAORIGIN+$005A
  1338 = 2B5B			ISALIVE	= DATAORIGIN+$005B
  1339
  1340 = 2B53			@VarData	= P
  1341 = 0009			@VarDataSize	= 9
  1342
  1343 15D8			@exit
  1344 					.ifdef @new
  1345 					lda <@VarData
  1346 					sta :ztmp
  1347 					lda >@VarData
  1348 					ldy #@VarDataSize-1
  1349 					jmp @FreeMem
  1350 					els
  1351 15D8 60				rts						; ret
  1352 					eif
  1353 				.endl
  1354
  1355 15D9			.local	NEXTLEVEL					; PROCEDURE
  1356
  1357 				; optimize FAIL (0, tools.inc), line = 145
  1358
  1359 15D9 EE 10 2B			inc LEVEL
  1360 15DC AD 10 2B			lda LEVEL
  1361 15DF C9 08			cmp #$08
  1362 15E1 D0 05			jne l_04E6
  1363 15E3 A9 05			lda #$05
  1364 15E5 8D 10 2B			sta LEVEL
  1365 15E8			l_04E6
  1366 15E8			@exit
  1367 					.ifdef @new
  1368 					lda <@VarData
  1369 					sta :ztmp
  1370 					lda >@VarData
  1371 					ldy #@VarDataSize-1
  1372 					jmp @FreeMem
  1373 					els
  1374 15E8 60				rts						; ret
  1375 					eif
  1376 				.endl
  1377
  1378 15E9			.local	STARTSCREEN					; PROCEDURE
  1379
  1380 				; optimize OK (tools.inc), line = 152
  1381
  1382 15E9 AD 15 2B			lda PLAYER1.COLOUR
  1383 15EC 18 69 80			add #$80
  1384 15EF 8D 48 2B			sta PUTCHAR_008E.C
  1385 15F2 AD 14 2B			lda PLAYER1.HEAD
  1386 15F5 8D 47 2B			sta PUTCHAR_008E.V
  1387 15F8 AD 13 2B			lda PLAYER1.Y
  1388 15FB 8D 46 2B			sta PUTCHAR_008E.Y
  1389 15FE AD 12 2B			lda PLAYER1.X
  1390 1601 8D 45 2B			sta PUTCHAR_008E.X
  1391 1604 20 99 11			jsr PUTCHAR_008E
  1392
  1393 				; --- RepeatUntilProlog
  1394 1607			l_0503
  1395
  1396 				; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 153
  1397
  1398 1607 20 63 15			jsr CHECKJOYSTATUS
  1399 160A A5 63			lda JOYSTATUS
  1400 160C C9 40			cmp #$40
  1401 160E D0 F7			jne l_0503
  1402
  1403 				; optimize OK (tools.inc), line = 154
  1404
  1405 1610 AD 15 2B			lda PLAYER1.COLOUR
  1406 1613 8D 48 2B			sta PUTCHAR_008E.C
  1407 1616 AD 14 2B			lda PLAYER1.HEAD
  1408 1619 8D 47 2B			sta PUTCHAR_008E.V
  1409 161C AD 13 2B			lda PLAYER1.Y
  1410 161F 8D 46 2B			sta PUTCHAR_008E.Y
  1411 1622 AD 12 2B			lda PLAYER1.X
  1412 1625 8D 45 2B			sta PUTCHAR_008E.X
  1413 1628 20 99 11			jsr PUTCHAR_008E
  1414 162B			@exit
  1415 					.ifdef @new
  1416 					lda <@VarData
  1417 					sta :ztmp
  1418 					lda >@VarData
  1419 					ldy #@VarDataSize-1
  1420 					jmp @FreeMem
  1421 					els
  1422 162B 60				rts						; ret
  1423 					eif
  1424 				.endl
  1425
  1426 162C			.local	ISGAMEOVER					; FUNCTION
  1427
  1428 				; optimize OK (tools.inc), line = 161
  1429
  1430 162C AD 18 2B			lda PLAYER1.SCORE
  1431 162F C9 39			cmp #$39
  1432 1631 D0 05			jne l_0534
  1433 1633 A9 01			lda #$01
  1434 1635 8D 11 2B			sta GAMEOVER
  1435 1638			l_0534
  1436
  1437 				; optimize OK (tools.inc), line = 162
  1438
  1439 1638 AD 20 2B			lda PLAYER2.SCORE
  1440 163B C9 39			cmp #$39
  1441 163D D0 05			jne l_054D
  1442 163F A9 01			lda #$01
  1443 1641 8D 11 2B			sta GAMEOVER
  1444 1644			l_054D
  1445
  1446 				; optimize OK (tools.inc), line = 163
  1447
  1448 1644 AD 28 2B			lda PLAYER3.SCORE
  1449 1647 C9 39			cmp #$39
  1450 1649 D0 05			jne l_0566
  1451 164B A9 01			lda #$01
  1452 164D 8D 11 2B			sta GAMEOVER
  1453 1650			l_0566
  1454
  1455 				; optimize OK (tools.inc), line = 164
  1456
  1457 1650 AD 30 2B			lda PLAYER4.SCORE
  1458 1653 C9 39			cmp #$39
  1459 1655 D0 05			jne l_057F
  1460 1657 A9 01			lda #$01
  1461 1659 8D 11 2B			sta GAMEOVER
  1462 165C			l_057F
  1463
  1464 				; optimize OK (tools.inc), line = 165
  1465
  1466 165C AD 11 2B			lda GAMEOVER
  1467 165F 8D 5C 2B			sta RESULT
  1468 1662			@exit
  1469
  1470 				; ------------------------------------------------------------
  1471
  1472 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1473 				; as Pointer
  1474
  1475 1662 E8				inx
  1476 1663 AD 5C 2B 95 18		mva RESULT :STACKORIGIN,x
  1477
  1478 					.ifdef @new
  1479 					lda <@VarData
  1480 					sta :ztmp
  1481 					lda >@VarData
  1482 					ldy #@VarDataSize-1
  1483 					jmp @FreeMem
  1484 					eif
  1485
  1486 				; ------------------------------------------------------------
  1487
  1488 = 2B5C			RESULT	= DATAORIGIN+$005C
  1489
  1490 = 2B5C			@VarData	= RESULT
  1491 = 0001			@VarDataSize	= 1
  1492
  1493 1668 60				rts						; ret
  1494 				.endl
  1495
  1496 1669			.local	ISONELEFT					; FUNCTION
  1497
  1498 				; optimize OK (tools.inc), line = 172
  1499
  1500 1669 A0 01			ldy #1
  1501 166B A5 5A			lda ALIVE
  1502 166D F0 01			beq @+
  1503 166F 88				dey
  1504 1670			@
  1505 1670 84 21			sty :STACKORIGIN+9
  1506 1672 A0 01			ldy #1
  1507 1674 A5 5A			lda ALIVE
  1508 1676 C9 FF			cmp #$FF
  1509 1678 F0 01			beq @+
  1510 167A 88				dey
  1511 167B			@
  1512 167B 98				tya
  1513 167C 05 21			ora :STACKORIGIN+9
  1514 167E 8D 5D 2B			sta RESULT
  1515 1681			@exit
  1516
  1517 				; ------------------------------------------------------------
  1518
  1519 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1520 				; as Pointer
  1521
  1522 1681 E8				inx
  1523 1682 AD 5D 2B 95 18		mva RESULT :STACKORIGIN,x
  1524
  1525 					.ifdef @new
  1526 					lda <@VarData
  1527 					sta :ztmp
  1528 					lda >@VarData
  1529 					ldy #@VarDataSize-1
  1530 					jmp @FreeMem
  1531 					eif
  1532
  1533 				; ------------------------------------------------------------
  1534
  1535 = 2B5D			RESULT	= DATAORIGIN+$005D
  1536
  1537 = 2B5D			@VarData	= RESULT
  1538 = 0001			@VarDataSize	= 1
  1539
  1540 1687 60				rts						; ret
  1541 				.endl
  1542
  1543 1688			.local	HUMAN						; PROCEDURE
  1544
  1545 				; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5
  1546
  1547 1688 20 63 15			jsr CHECKJOYSTATUS
  1548 168B AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1549 1695 A0 04			ldy #PLY.DIR-DATAORIGIN
  1550 1697 B1 12			lda (:bp2),y
  1551 1699 85 5B			sta NEWDIR
  1552
  1553 				; optimize OK (ai.inc), line = 6
  1554
  1555 169B A5 63			lda JOYSTATUS
  1556 169D 8D 5E 2B			sta @CASETMP_0004
  1557 16A0 C9 01			cmp #$01
  1558 16A2 D0 19			jne l_05C4
  1559 16A4			@
  1560
  1561 				; optimize OK (ai.inc), line = 7
  1562
  1563 16A4 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1564 16AE A0 04			ldy #PLY.DIR-DATAORIGIN
  1565 16B0 B1 12			lda (:bp2),y
  1566 16B2 C9 02			cmp #$02
  1567 16B4 F0 04			jeq l_05D6
  1568 16B6 A9 01			lda #$01
  1569 16B8 85 5B			sta NEWDIR
  1570 16BA			l_05D6
  1571
  1572 16BA 4C 11 17			jmp a_0004
  1573 16BD			l_05C4
  1574 16BD C9 02			cmp #$02
  1575 16BF D0 19			jne l_05E6
  1576 16C1			@
  1577
  1578 				; optimize OK (ai.inc), line = 8
  1579
  1580 16C1 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1581 16CB A0 04			ldy #PLY.DIR-DATAORIGIN
  1582 16CD B1 12			lda (:bp2),y
  1583 16CF C9 01			cmp #$01
  1584 16D1 F0 04			jeq l_05F8
  1585 16D3 A9 02			lda #$02
  1586 16D5 85 5B			sta NEWDIR
  1587 16D7			l_05F8
  1588
  1589 16D7 4C 11 17			jmp a_0004
  1590 16DA			l_05E6
  1591 16DA C9 04			cmp #$04
  1592 16DC D0 19			jne l_0608
  1593 16DE			@
  1594
  1595 				; optimize OK (ai.inc), line = 9
  1596
  1597 16DE AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1598 16E8 A0 04			ldy #PLY.DIR-DATAORIGIN
  1599 16EA B1 12			lda (:bp2),y
  1600 16EC C9 08			cmp #$08
  1601 16EE F0 04			jeq l_061A
  1602 16F0 A9 04			lda #$04
  1603 16F2 85 5B			sta NEWDIR
  1604 16F4			l_061A
  1605
  1606 16F4 4C 11 17			jmp a_0004
  1607 16F7			l_0608
  1608 16F7 C9 08			cmp #$08
  1609 16F9 D0 16			jne l_062A
  1610 16FB			@
  1611
  1612 				; optimize OK (ai.inc), line = 10
  1613
  1614 16FB AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1615 1705 A0 04			ldy #PLY.DIR-DATAORIGIN
  1616 1707 B1 12			lda (:bp2),y
  1617 1709 C9 04			cmp #$04
  1618 170B F0 04			jeq l_063C
  1619 170D A9 08			lda #$08
  1620 170F 85 5B			sta NEWDIR
  1621 1711			l_063C
  1622
  1623 1711			l_062A
  1624 1711			a_0004
  1625
  1626 				; optimize OK (ai.inc), line = 13
  1627
  1628 1711 A5 5B			lda NEWDIR
  1629 1713 25 5C			and AVAILDIR
  1630 1715 D0 18			jne l_0663
  1631
  1632 				; optimize OK (ai.inc), line = 14
  1633
  1634 1717 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1635 1721 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  1636 1723 A9 00			lda #$00
  1637 1725 91 12			sta (:bp2),y
  1638 1727 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1639 1729 A9 2A			lda #$2A
  1640 172B 91 12			sta (:bp2),y
  1641 172D C6 5A			dec ALIVE
  1642 172F			l_0663
  1643
  1644 				; ------------------------------------------------------------
  1645
  1646 = 2B5E			@CASETMP_0004	= DATAORIGIN+$005E
  1647
  1648 = 2B5E			@VarData	= @CASETMP_0004
  1649 = 0001			@VarDataSize	= 1
  1650
  1651 172F			@exit
  1652 					.ifdef @new
  1653 					lda <@VarData
  1654 					sta :ztmp
  1655 					lda >@VarData
  1656 					ldy #@VarDataSize-1
  1657 					jmp @FreeMem
  1658 					els
  1659 172F 60				rts						; ret
  1660 					eif
  1661 				.endl
  1662
  1663 1730			.local	AISTRAIGHT					; PROCEDURE
  1664
  1665 				; optimize OK (ai.inc), line = 22
  1666
  1667 1730 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1668 173A A0 04			ldy #PLY.DIR-DATAORIGIN
  1669 173C B1 12			lda (:bp2),y
  1670 173E 25 5C			and AVAILDIR
  1671 1740 F0 07			jeq l_068E
  1672 1742 B1 12			lda (:bp2),y
  1673 1744 85 5B			sta NEWDIR
  1674 1746 4C B4 17			jmp l_069E
  1675 1749			l_068E
  1676
  1677 				; optimize OK (ai.inc), line = 24
  1678
  1679 1749 A5 5C			lda AVAILDIR
  1680 174B C9 03			cmp #$03
  1681 174D D0 10			jne l_06B0
  1682 174F A9 02			lda #$02
  1683 1751 20 47 11			jsr SYSTEM.RANDOM_006D
  1684 1754 B4 18			ldy :STACKORIGIN,x
  1685 1756 B9 40 10			lda adr.DIRECTION,y
  1686 1759 85 5B			sta NEWDIR
  1687 175B CA				dex
  1688 175C 4C 77 17			jmp l_06C2
  1689 175F			l_06B0
  1690
  1691 				; optimize OK (ai.inc), line = 26
  1692
  1693 175F A5 5C			lda AVAILDIR
  1694 1761 8D 5F 2B			sta @CASETMP_0005
  1695 1764 C9 01			cmp #$01
  1696 1766 D0 07			jne l_06CD
  1697 1768			@
  1698
  1699 				; optimize OK (ai.inc), line = 27
  1700
  1701 1768 A9 01			lda #$01
  1702 176A 85 5B			sta NEWDIR
  1703
  1704 176C 4C 77 17			jmp a_0005
  1705 176F			l_06CD
  1706 176F C9 02			cmp #$02
  1707 1771 D0 04			jne l_06DA
  1708 1773			@
  1709
  1710 				; optimize OK (ai.inc), line = 28
  1711
  1712 1773 A9 02			lda #$02
  1713 1775 85 5B			sta NEWDIR
  1714
  1715 1777			l_06DA
  1716 1777			a_0005
  1717 1777			l_06C2
  1718
  1719 				; optimize OK (ai.inc), line = 31
  1720
  1721 1777 A5 5C			lda AVAILDIR
  1722 1779 C9 0C			cmp #$0C
  1723 177B D0 1F			jne l_06F6
  1724 177D A9 02			lda #$02
  1725 177F 20 47 11			jsr SYSTEM.RANDOM_006D
  1726 1782 E8				inx
  1727 1783 A9 02 95 18			mva #$02 :STACKORIGIN,x
  1728 1787 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1729 178B 95 27			sta :STACKORIGIN-1+STACKWIDTH,x
  1730 178D 20 44 10			jsr addAX_CX
  1731 1790 CA				dex
  1732 1791 B4 18			ldy :STACKORIGIN,x
  1733 1793 B9 40 10			lda adr.DIRECTION,y
  1734 1796 85 5B			sta NEWDIR
  1735 1798 CA				dex
  1736 1799 4C B4 17			jmp l_070C
  1737 179C			l_06F6
  1738
  1739 				; optimize OK (ai.inc), line = 33
  1740
  1741 179C A5 5C			lda AVAILDIR
  1742 179E 8D 60 2B			sta @CASETMP_0006
  1743 17A1 C9 04			cmp #$04
  1744 17A3 D0 07			jne l_0717
  1745 17A5			@
  1746
  1747 				; optimize OK (ai.inc), line = 34
  1748
  1749 17A5 A9 04			lda #$04
  1750 17A7 85 5B			sta NEWDIR
  1751
  1752 17A9 4C B4 17			jmp a_0006
  1753 17AC			l_0717
  1754 17AC C9 08			cmp #$08
  1755 17AE D0 04			jne l_0724
  1756 17B0			@
  1757
  1758 				; optimize OK (ai.inc), line = 35
  1759
  1760 17B0 A9 08			lda #$08
  1761 17B2 85 5B			sta NEWDIR
  1762
  1763 17B4			l_0724
  1764 17B4			a_0006
  1765 17B4			l_070C
  1766 17B4			l_069E
  1767
  1768 				; ------------------------------------------------------------
  1769
  1770 = 2B5F			@CASETMP_0005	= DATAORIGIN+$005F
  1771 = 2B60			@CASETMP_0006	= DATAORIGIN+$0060
  1772
  1773 = 2B5F			@VarData	= @CASETMP_0005
  1774 = 0002			@VarDataSize	= 2
  1775
  1776 17B4			@exit
  1777 					.ifdef @new
  1778 					lda <@VarData
  1779 					sta :ztmp
  1780 					lda >@VarData
  1781 					ldy #@VarDataSize-1
  1782 					jmp @FreeMem
  1783 					els
  1784 17B4 60				rts						; ret
  1785 					eif
  1786 				.endl
  1787
  1788 17B5			.local	AISAPPER					; PROCEDURE
  1789
  1790 				; optimize OK (ai.inc), line = 48
  1791
  1792 17B5 A9 00			lda #$00
  1793 17B7 8D 61 2B			sta L
  1794 17BA 8D 62 2B			sta R
  1795 17BD 8D 63 2B			sta U
  1796 17C0 8D 64 2B			sta D
  1797
  1798 				; optimize OK (ai.inc), line = 49
  1799
  1800 17C3 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  1801 17CD A0 01			ldy #PLY.Y-DATAORIGIN
  1802 17CF B1 12			lda (:bp2),y
  1803 17D1 0A				asl @
  1804 17D2 A8				tay
  1805 17D3 A9 00			lda #$00
  1806 17D5 18 79 0E 10			add adr.MUL40,y
  1807 17D9 85 21			sta :STACKORIGIN+9
  1808 17DB A9 0C			lda #$0C
  1809 17DD 79 0F 10			adc adr.MUL40+1,y
  1810 17E0 85 31			sta :STACKORIGIN+STACKWIDTH+9
  1811 17E2 A0 00			ldy #PLY.X-DATAORIGIN
  1812 17E4 A5 21			lda :STACKORIGIN+9
  1813 17E6 18 71 12			add (:bp2),y
  1814 17E9 85 5D			sta T0W
  1815 17EB A5 31			lda :STACKORIGIN+STACKWIDTH+9
  1816 17ED 69 00			adc #$00
  1817 17EF 85 5E			sta T0W+1
  1818
  1819 				; optimize OK (ai.inc), line = 51
  1820
  1821 17F1 A5 5C			lda AVAILDIR
  1822 17F3 29 01			and #$01
  1823 17F5 F0 73			jeq l_076A
  1824
  1825 				; optimize OK (ai.inc), line = 52
  1826
  1827 17F7 A9 05			lda #$05
  1828 17F9 85 59			sta I0B
  1829
  1830 17FB			l_0774
  1831 				; --- ForToDoCondition
  1832 17FB A5 59			lda I0B
  1833 17FD C9 01			cmp #$01
  1834 17FF 90 69			jcc l_0782
  1835
  1836 				; optimize OK (ai.inc), line = 53
  1837
  1838 1801 0A				asl @
  1839 1802 A8				tay
  1840 1803 A5 5D			lda T0W
  1841 1805 38 F9 0E 10			sub adr.MUL40,y
  1842 1809 85 21			sta :STACKORIGIN+9
  1843 180B A5 5E			lda T0W+1
  1844 180D F9 0F 10			sbc adr.MUL40+1,y
  1845 1810 85 11			sta :bp+1
  1846 1812 A4 21			ldy :STACKORIGIN+9
  1847 1814 B1 10			lda (:bp),y
  1848 1816 C9 20			cmp #$20
  1849 1818 D0 03			jne l_079C
  1850 181A EE 63 2B			inc U
  1851 181D			l_079C
  1852
  1853 				; optimize OK (ai.inc), line = 54
  1854
  1855 181D A5 59			lda I0B
  1856 181F 0A				asl @
  1857 1820 A8				tay
  1858 1821 A5 5D			lda T0W
  1859 1823 38 F9 0E 10			sub adr.MUL40,y
  1860 1827 85 21			sta :STACKORIGIN+9
  1861 1829 A5 5E			lda T0W+1
  1862 182B F9 0F 10			sbc adr.MUL40+1,y
  1863 182E 85 11			sta :bp+1
  1864 1830 A5 21			lda :STACKORIGIN+9
  1865 1832 18 69 01			add #$01
  1866 1835 A8				tay
  1867 1836 90 02			scc
  1868 1838 E6 11			inc :bp+1
  1869 183A B1 10			lda (:bp),y
  1870 183C C9 20			cmp #$20
  1871 183E D0 03			jne l_07C1
  1872 1840 EE 63 2B			inc U
  1873 1843			l_07C1
  1874
  1875 				; optimize OK (ai.inc), line = 55
  1876
  1877 1843 A5 59			lda I0B
  1878 1845 0A				asl @
  1879 1846 A8				tay
  1880 1847 A5 5D			lda T0W
  1881 1849 38 F9 0E 10			sub adr.MUL40,y
  1882 184D 85 21			sta :STACKORIGIN+9
  1883 184F A5 5E			lda T0W+1
  1884 1851 F9 0F 10			sbc adr.MUL40+1,y
  1885 1854 85 11			sta :bp+1
  1886 1856 A4 21			ldy :STACKORIGIN+9
  1887 1858 88				dey
  1888 1859 B0 02			scs
  1889 185B C6 11			dec :bp+1
  1890 185D B1 10			lda (:bp),y
  1891 185F C9 20			cmp #$20
  1892 1861 D0 03			jne l_07E6
  1893 1863 EE 63 2B			inc U
  1894 1866			l_07E6
  1895
  1896 				; --- ForToDoEpilog
  1897 1866 C6 59			dec I0B
  1898 1868 10 91			jpl l_0774
  1899 186A			l_0782
  1900 186A			l_076A
  1901
  1902 				; optimize OK (ai.inc), line = 59
  1903
  1904 186A A5 5C			lda AVAILDIR
  1905 186C 29 02			and #$02
  1906 186E F0 73			jeq l_080A
  1907
  1908 				; optimize OK (ai.inc), line = 60
  1909
  1910 1870 A9 05			lda #$05
  1911 1872 85 59			sta I0B
  1912
  1913 1874			l_0814
  1914 				; --- ForToDoCondition
  1915 1874 A5 59			lda I0B
  1916 1876 C9 01			cmp #$01
  1917 1878 90 69			jcc l_0822
  1918
  1919 				; optimize OK (ai.inc), line = 61
  1920
  1921 187A 0A				asl @
  1922 187B A8				tay
  1923 187C A5 5D			lda T0W
  1924 187E 18 79 0E 10			add adr.MUL40,y
  1925 1882 85 21			sta :STACKORIGIN+9
  1926 1884 A5 5E			lda T0W+1
  1927 1886 79 0F 10			adc adr.MUL40+1,y
  1928 1889 85 11			sta :bp+1
  1929 188B A4 21			ldy :STACKORIGIN+9
  1930 188D B1 10			lda (:bp),y
  1931 188F C9 20			cmp #$20
  1932 1891 D0 03			jne l_083C
  1933 1893 EE 64 2B			inc D
  1934 1896			l_083C
  1935
  1936 				; optimize OK (ai.inc), line = 62
  1937
  1938 1896 A5 59			lda I0B
  1939 1898 0A				asl @
  1940 1899 A8				tay
  1941 189A A5 5D			lda T0W
  1942 189C 18 79 0E 10			add adr.MUL40,y
  1943 18A0 85 21			sta :STACKORIGIN+9
  1944 18A2 A5 5E			lda T0W+1
  1945 18A4 79 0F 10			adc adr.MUL40+1,y
  1946 18A7 85 11			sta :bp+1
  1947 18A9 A5 21			lda :STACKORIGIN+9
  1948 18AB 18 69 01			add #$01
  1949 18AE A8				tay
  1950 18AF 90 02			scc
  1951 18B1 E6 11			inc :bp+1
  1952 18B3 B1 10			lda (:bp),y
  1953 18B5 C9 20			cmp #$20
  1954 18B7 D0 03			jne l_0861
  1955 18B9 EE 64 2B			inc D
  1956 18BC			l_0861
  1957
  1958 				; optimize OK (ai.inc), line = 63
  1959
  1960 18BC A5 59			lda I0B
  1961 18BE 0A				asl @
  1962 18BF A8				tay
  1963 18C0 A5 5D			lda T0W
  1964 18C2 18 79 0E 10			add adr.MUL40,y
  1965 18C6 85 21			sta :STACKORIGIN+9
  1966 18C8 A5 5E			lda T0W+1
  1967 18CA 79 0F 10			adc adr.MUL40+1,y
  1968 18CD 85 11			sta :bp+1
  1969 18CF A4 21			ldy :STACKORIGIN+9
  1970 18D1 88				dey
  1971 18D2 B0 02			scs
  1972 18D4 C6 11			dec :bp+1
  1973 18D6 B1 10			lda (:bp),y
  1974 18D8 C9 20			cmp #$20
  1975 18DA D0 03			jne l_0886
  1976 18DC EE 64 2B			inc D
  1977 18DF			l_0886
  1978
  1979 				; --- ForToDoEpilog
  1980 18DF C6 59			dec I0B
  1981 18E1 10 91			jpl l_0814
  1982 18E3			l_0822
  1983 18E3			l_080A
  1984
  1985 				; optimize OK (ai.inc), line = 67
  1986
  1987 18E3 A5 5C			lda AVAILDIR
  1988 18E5 29 04			and #$04
  1989 18E7 F0 5F			jeq l_08AA
  1990
  1991 				; optimize OK (ai.inc), line = 68
  1992
  1993 18E9 A9 05			lda #$05
  1994 18EB 85 59			sta I0B
  1995
  1996 18ED			l_08B4
  1997 				; --- ForToDoCondition
  1998 18ED A5 59			lda I0B
  1999 18EF C9 01			cmp #$01
  2000 18F1 90 55			jcc l_08C2
  2001
  2002 				; optimize OK (ai.inc), line = 69
  2003
  2004 18F3 A5 5D			lda T0W
  2005 18F5 38 E5 59			sub I0B
  2006 18F8 A8				tay
  2007 18F9 A5 5E			lda T0W+1
  2008 18FB E9 00			sbc #$00
  2009 18FD 85 11			sta :bp+1
  2010 18FF B1 10			lda (:bp),y
  2011 1901 C9 20			cmp #$20
  2012 1903 D0 03			jne l_08DA
  2013 1905 EE 61 2B			inc L
  2014 1908			l_08DA
  2015
  2016 				; optimize OK (ai.inc), line = 70
  2017
  2018 1908 A5 5D			lda T0W
  2019 190A 38 E5 59			sub I0B
  2020 190D A8				tay
  2021 190E A5 5E			lda T0W+1
  2022 1910 E9 00			sbc #$00
  2023 1912 85 11			sta :bp+1
  2024 1914 98				tya
  2025 1915 18 69 28			add #$28
  2026 1918 A8				tay
  2027 1919 90 02			scc
  2028 191B E6 11			inc :bp+1
  2029 191D B1 10			lda (:bp),y
  2030 191F C9 20			cmp #$20
  2031 1921 D0 03			jne l_08FD
  2032 1923 EE 61 2B			inc L
  2033 1926			l_08FD
  2034
  2035 				; optimize OK (ai.inc), line = 71
  2036
  2037 1926 A5 5D			lda T0W
  2038 1928 38 E5 59			sub I0B
  2039 192B A8				tay
  2040 192C A5 5E			lda T0W+1
  2041 192E E9 00			sbc #$00
  2042 1930 85 11			sta :bp+1
  2043 1932 98				tya
  2044 1933 38 E9 28			sub #$28
  2045 1936 A8				tay
  2046 1937 B0 02			scs
  2047 1939 C6 11			dec :bp+1
  2048 193B B1 10			lda (:bp),y
  2049 193D C9 20			cmp #$20
  2050 193F D0 03			jne l_0920
  2051 1941 EE 61 2B			inc L
  2052 1944			l_0920
  2053
  2054 				; --- ForToDoEpilog
  2055 1944 C6 59			dec I0B
  2056 1946 10 A5			jpl l_08B4
  2057 1948			l_08C2
  2058 1948			l_08AA
  2059
  2060 				; optimize OK (ai.inc), line = 75
  2061
  2062 1948 A5 5C			lda AVAILDIR
  2063 194A 29 08			and #$08
  2064 194C F0 5D			jeq l_0944
  2065
  2066 				; optimize OK (ai.inc), line = 76
  2067
  2068 194E A9 05			lda #$05
  2069 1950 85 59			sta I0B
  2070
  2071 1952			l_094E
  2072 				; --- ForToDoCondition
  2073 1952 A5 59			lda I0B
  2074 1954 C9 01			cmp #$01
  2075 1956 90 53			jcc l_095C
  2076
  2077 				; optimize OK (ai.inc), line = 77
  2078
  2079 1958 A4 5D 84 12 A4 5E + 	mwy T0W :bp2
  2080 1960 A4 59			ldy I0B
  2081 1962 B1 12			lda (:bp2),y
  2082 1964 C9 20			cmp #$20
  2083 1966 D0 03			jne l_0974
  2084 1968 EE 62 2B			inc R
  2085 196B			l_0974
  2086
  2087 				; optimize OK (ai.inc), line = 78
  2088
  2089 196B A5 5D			lda T0W
  2090 196D 18 65 59			add I0B
  2091 1970 A8				tay
  2092 1971 A5 5E			lda T0W+1
  2093 1973 69 00			adc #$00
  2094 1975 85 11			sta :bp+1
  2095 1977 98				tya
  2096 1978 18 69 28			add #$28
  2097 197B A8				tay
  2098 197C 90 02			scc
  2099 197E E6 11			inc :bp+1
  2100 1980 B1 10			lda (:bp),y
  2101 1982 C9 20			cmp #$20
  2102 1984 D0 03			jne l_0997
  2103 1986 EE 62 2B			inc R
  2104 1989			l_0997
  2105
  2106 				; optimize OK (ai.inc), line = 79
  2107
  2108 1989 A5 5D			lda T0W
  2109 198B 18 65 59			add I0B
  2110 198E A8				tay
  2111 198F A5 5E			lda T0W+1
  2112 1991 69 00			adc #$00
  2113 1993 85 11			sta :bp+1
  2114 1995 98				tya
  2115 1996 38 E9 28			sub #$28
  2116 1999 A8				tay
  2117 199A B0 02			scs
  2118 199C C6 11			dec :bp+1
  2119 199E B1 10			lda (:bp),y
  2120 19A0 C9 20			cmp #$20
  2121 19A2 D0 03			jne l_09BA
  2122 19A4 EE 62 2B			inc R
  2123 19A7			l_09BA
  2124
  2125 				; --- ForToDoEpilog
  2126 19A7 C6 59			dec I0B
  2127 19A9 10 A7			jpl l_094E
  2128 19AB			l_095C
  2129 19AB			l_0944
  2130
  2131 				; optimize OK (ai.inc), line = 83
  2132
  2133 19AB AD 64 2B			lda D
  2134 19AE 85 58			sta T0B
  2135
  2136 				; optimize OK (ai.inc), line = 84
  2137
  2138 19B0 CD 63 2B			cmp U
  2139 19B3 B0 05			jcs l_09E2
  2140 19B5 AD 63 2B			lda U
  2141 19B8 85 58			sta T0B
  2142 19BA			l_09E2
  2143
  2144 				; optimize OK (ai.inc), line = 85
  2145
  2146 19BA A5 58			lda T0B
  2147 19BC CD 61 2B			cmp L
  2148 19BF B0 05			jcs l_09FF
  2149 19C1 AD 61 2B			lda L
  2150 19C4 85 58			sta T0B
  2151 19C6			l_09FF
  2152
  2153 				; optimize OK (ai.inc), line = 86
  2154
  2155 19C6 A5 58			lda T0B
  2156 19C8 CD 62 2B			cmp R
  2157 19CB B0 05			jcs l_0A1C
  2158 19CD AD 62 2B			lda R
  2159 19D0 85 58			sta T0B
  2160 19D2			l_0A1C
  2161
  2162 				; optimize OK (ai.inc), line = 88
  2163
  2164 19D2 A5 58			lda T0B
  2165 19D4 CD 64 2B			cmp D
  2166 19D7 D0 04			jne l_0A39
  2167 19D9 A9 02			lda #$02
  2168 19DB 85 58			sta T0B
  2169 19DD			l_0A39
  2170
  2171 				; optimize OK (ai.inc), line = 89
  2172
  2173 19DD A5 58			lda T0B
  2174 19DF CD 63 2B			cmp U
  2175 19E2 D0 04			jne l_0A54
  2176 19E4 A9 01			lda #$01
  2177 19E6 85 58			sta T0B
  2178 19E8			l_0A54
  2179
  2180 				; optimize OK (ai.inc), line = 90
  2181
  2182 19E8 A5 58			lda T0B
  2183 19EA CD 61 2B			cmp L
  2184 19ED D0 04			jne l_0A6F
  2185 19EF A9 04			lda #$04
  2186 19F1 85 58			sta T0B
  2187 19F3			l_0A6F
  2188
  2189 				; optimize OK (ai.inc), line = 91
  2190
  2191 19F3 A5 58			lda T0B
  2192 19F5 CD 62 2B			cmp R
  2193 19F8 D0 04			jne l_0A8A
  2194 19FA A9 08			lda #$08
  2195 19FC 85 58			sta T0B
  2196 19FE			l_0A8A
  2197
  2198 				; optimize OK (ai.inc), line = 93
  2199
  2200 19FE A5 5C			lda AVAILDIR
  2201 1A00 25 58			and T0B
  2202 1A02 F0 07			jeq l_0AA9
  2203 1A04 A5 58			lda T0B
  2204 1A06 85 5B			sta NEWDIR
  2205 1A08 4C 0E 1A			jmp l_0AB9
  2206 1A0B			l_0AA9
  2207
  2208 				; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94
  2209
  2210 1A0B 20 30 17			jsr AISTRAIGHT
  2211 1A0E			l_0AB9
  2212
  2213 				; ------------------------------------------------------------
  2214
  2215 = 2B61			L	= DATAORIGIN+$0061
  2216 = 2B62			R	= DATAORIGIN+$0062
  2217 = 2B63			U	= DATAORIGIN+$0063
  2218 = 2B64			D	= DATAORIGIN+$0064
  2219 = 0001			@FORTMP_0771	= $01
  2220 = 0001			@FORTMP_0811	= $01
  2221 = 0001			@FORTMP_08B1	= $01
  2222 = 0001			@FORTMP_094B	= $01
  2223
  2224 = 2B61			@VarData	= L
  2225 = 0004			@VarDataSize	= 4
  2226
  2227 1A0E			@exit
  2228 					.ifdef @new
  2229 					lda <@VarData
  2230 					sta :ztmp
  2231 					lda >@VarData
  2232 					ldy #@VarDataSize-1
  2233 					jmp @FreeMem
  2234 					els
  2235 1A0E 60				rts						; ret
  2236 					eif
  2237 				.endl
  2238
  2239 1A0F			.local	AIBULLY						; PROCEDURE
  2240
  2241 				; optimize OK (ai.inc), line = 101
  2242
  2243 1A0F AC EF 2A 84 12 AC + 	mwy PLY :bp2
  2244 1A19 A0 04			ldy #PLY.DIR-DATAORIGIN
  2245 1A1B B1 12			lda (:bp2),y
  2246 1A1D 85 58			sta T0B
  2247
  2248 				; optimize OK (ai.inc), line = 103
  2249
  2250 1A1F AD 19 2B			lda PLAYER1.ISALIVE
  2251 1A22 0D 21 2B			ora PLAYER2.ISALIVE
  2252 1A25 D0 03 4C CC 1A		jeq l_0AD6
  2253
  2254 				; optimize OK (ai.inc), line = 105
  2255
  2256 1A2A AD 19 2B			lda PLAYER1.ISALIVE
  2257 1A2D F0 0F			jeq l_0AE3
  2258 1A2F AD F3 2A			lda PLAYER1
  2259 1A32 8D F1 2A			sta TMPPLY
  2260 1A35 AD F4 2A			lda PLAYER1+1
  2261 1A38 8D F2 2A			sta TMPPLY+1
  2262 1A3B 4C 4A 1A			jmp l_0AF2
  2263 1A3E			l_0AE3
  2264 1A3E AD F5 2A			lda PLAYER2
  2265 1A41 8D F1 2A			sta TMPPLY
  2266 1A44 AD F6 2A			lda PLAYER2+1
  2267 1A47 8D F2 2A			sta TMPPLY+1
  2268 1A4A			l_0AF2
  2269
  2270 				; optimize OK (ai.inc), line = 107
  2271
  2272 1A4A AC EF 2A 84 12 AC + 	mwy PLY :bp2
  2273 1A54 A0 01			ldy #PLY.Y-DATAORIGIN
  2274 1A56 B1 12			lda (:bp2),y
  2275 1A58 85 21			sta :STACKORIGIN+9
  2276 1A5A AC F1 2A 84 12 AC + 	mwy TMPPLY :bp2
  2277 1A64 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2278 1A66 B1 12			lda (:bp2),y
  2279 1A68 C5 21			cmp :STACKORIGIN+9
  2280 1A6A B0 07			jcs l_0B0B
  2281 1A6C A9 01			lda #$01
  2282 1A6E 85 58			sta T0B
  2283 1A70 4C 77 1A			jmp l_0B19
  2284 1A73			l_0B0B
  2285 1A73 A9 02			lda #$02
  2286 1A75 85 58			sta T0B
  2287 1A77			l_0B19
  2288
  2289 				; optimize OK (ai.inc), line = 108
  2290
  2291 1A77 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  2292 1A81 A0 01			ldy #PLY.Y-DATAORIGIN
  2293 1A83 B1 12			lda (:bp2),y
  2294 1A85 85 21			sta :STACKORIGIN+9
  2295 1A87 AC F1 2A 84 12 AC + 	mwy TMPPLY :bp2
  2296 1A91 A0 01			ldy #TMPPLY.Y-DATAORIGIN
  2297 1A93 B1 12			lda (:bp2),y
  2298 1A95 C5 21			cmp :STACKORIGIN+9
  2299 1A97 F0 06			jeq l_0B43x
  2300 1A99 A5 5C			lda AVAILDIR
  2301 1A9B 25 58			and T0B
  2302 1A9D D0 2D			jne l_0B43
  2303 1A9F			l_0B43x
  2304
  2305 				; optimize OK (ai.inc), line = 109
  2306
  2307 1A9F AC EF 2A 84 12 AC + 	mwy PLY :bp2
  2308 1AA9 A0 00			ldy #PLY.X-DATAORIGIN
  2309 1AAB B1 12			lda (:bp2),y
  2310 1AAD 85 21			sta :STACKORIGIN+9
  2311 1AAF AC F1 2A 84 12 AC + 	mwy TMPPLY :bp2
  2312 1AB9 A0 00			ldy #TMPPLY.X-DATAORIGIN
  2313 1ABB B1 12			lda (:bp2),y
  2314 1ABD C5 21			cmp :STACKORIGIN+9
  2315 1ABF B0 07			jcs l_0B58
  2316 1AC1 A9 04			lda #$04
  2317 1AC3 85 58			sta T0B
  2318 1AC5 4C CC 1A			jmp l_0B66
  2319 1AC8			l_0B58
  2320 1AC8 A9 08			lda #$08
  2321 1ACA 85 58			sta T0B
  2322 1ACC			l_0B66
  2323 1ACC			l_0B43
  2324 1ACC			l_0AD6
  2325
  2326 				; optimize OK (ai.inc), line = 113
  2327
  2328 1ACC A5 5C			lda AVAILDIR
  2329 1ACE 25 58			and T0B
  2330 1AD0 F0 07			jeq l_0B86
  2331 1AD2 A5 58			lda T0B
  2332 1AD4 85 5B			sta NEWDIR
  2333 1AD6 4C DC 1A			jmp l_0B96
  2334 1AD9			l_0B86
  2335
  2336 				; optimize FAIL ('AISAPPER', ai.inc), line = 114
  2337
  2338 1AD9 20 B5 17			jsr AISAPPER
  2339 1ADC			l_0B96
  2340 1ADC			@exit
  2341 					.ifdef @new
  2342 					lda <@VarData
  2343 					sta :ztmp
  2344 					lda >@VarData
  2345 					ldy #@VarDataSize-1
  2346 					jmp @FreeMem
  2347 					els
  2348 1ADC 60				rts						; ret
  2349 					eif
  2350 				.endl
  2351
  2352 1ADD			.local	AIMIRROR					; PROCEDURE
  2353
  2354 				; optimize OK (ai.inc), line = 122
  2355
  2356 1ADD AC EF 2A 84 12 AC + 	mwy PLY :bp2
  2357 1AE7 A0 04			ldy #PLY.DIR-DATAORIGIN
  2358 1AE9 B1 12			lda (:bp2),y
  2359 1AEB 85 58			sta T0B
  2360
  2361 				; optimize OK (ai.inc), line = 124
  2362
  2363 1AED AD 19 2B			lda PLAYER1.ISALIVE
  2364 1AF0 F0 2F			jeq l_0BAD
  2365
  2366 				; optimize OK (ai.inc), line = 125
  2367
  2368 1AF2 AD 16 2B			lda PLAYER1.DIR
  2369 1AF5 8D 65 2B			sta @CASETMP_0007
  2370 1AF8 C9 01			cmp #$01
  2371 1AFA D0 07			jne l_0BB9
  2372 1AFC			@
  2373
  2374 				; optimize OK (ai.inc), line = 126
  2375
  2376 1AFC A9 02			lda #$02
  2377 1AFE 85 58			sta T0B
  2378
  2379 1B00 4C 21 1B			jmp a_0007
  2380 1B03			l_0BB9
  2381 1B03 C9 02			cmp #$02
  2382 1B05 D0 07			jne l_0BC6
  2383 1B07			@
  2384
  2385 				; optimize OK (ai.inc), line = 127
  2386
  2387 1B07 A9 01			lda #$01
  2388 1B09 85 58			sta T0B
  2389
  2390 1B0B 4C 21 1B			jmp a_0007
  2391 1B0E			l_0BC6
  2392 1B0E C9 04			cmp #$04
  2393 1B10 D0 07			jne l_0BD3
  2394 1B12			@
  2395
  2396 				; optimize OK (ai.inc), line = 128
  2397
  2398 1B12 A9 08			lda #$08
  2399 1B14 85 58			sta T0B
  2400
  2401 1B16 4C 21 1B			jmp a_0007
  2402 1B19			l_0BD3
  2403 1B19 C9 08			cmp #$08
  2404 1B1B D0 04			jne l_0BE0
  2405 1B1D			@
  2406
  2407 				; optimize OK (ai.inc), line = 129
  2408
  2409 1B1D A9 04			lda #$04
  2410 1B1F 85 58			sta T0B
  2411
  2412 1B21			l_0BE0
  2413 1B21			a_0007
  2414 1B21			l_0BAD
  2415
  2416 				; optimize OK (ai.inc), line = 133
  2417
  2418 1B21 A5 5C			lda AVAILDIR
  2419 1B23 25 58			and T0B
  2420 1B25 F0 07			jeq l_0C06
  2421 1B27 A5 58			lda T0B
  2422 1B29 85 5B			sta NEWDIR
  2423 1B2B 4C 31 1B			jmp l_0C16
  2424 1B2E			l_0C06
  2425
  2426 				; optimize FAIL ('AISAPPER', ai.inc), line = 134
  2427
  2428 1B2E 20 B5 17			jsr AISAPPER
  2429 1B31			l_0C16
  2430
  2431 				; ------------------------------------------------------------
  2432
  2433 = 2B65			@CASETMP_0007	= DATAORIGIN+$0065
  2434
  2435 = 2B65			@VarData	= @CASETMP_0007
  2436 = 0001			@VarDataSize	= 1
  2437
  2438 1B31			@exit
  2439 					.ifdef @new
  2440 					lda <@VarData
  2441 					sta :ztmp
  2442 					lda >@VarData
  2443 					ldy #@VarDataSize-1
  2444 					jmp @FreeMem
  2445 					els
  2446 1B31 60				rts						; ret
  2447 					eif
  2448 				.endl
  2449
  2450 1B32			.local	SETLEVEL00					; PROCEDURE
  2451
  2452 				; optimize OK (levels.inc), line = 5
  2453
  2454 1B32 A9 01			lda #$01
  2455 1B34 8D 5B 2B			sta SETPLAYER.ISALIVE
  2456 1B37 A9 62			lda #$62
  2457 1B39 8D 5A 2B			sta SETPLAYER.COLOUR
  2458 1B3C A9 51			lda #$51
  2459 1B3E 8D 59 2B			sta SETPLAYER.HEAD
  2460 1B41 A9 00			lda #$00
  2461 1B43 8D 58 2B			sta SETPLAYER.BRAIN
  2462 1B46 A9 08			lda #$08
  2463 1B48 8D 57 2B			sta SETPLAYER.DIR
  2464 1B4B A9 0C			lda #$0C
  2465 1B4D 8D 56 2B			sta SETPLAYER.Y
  2466 1B50 A9 0A			lda #$0A
  2467 1B52 8D 55 2B			sta SETPLAYER.X
  2468 1B55 AD F3 2A			lda PLAYER1
  2469 1B58 8D 53 2B			sta SETPLAYER.P
  2470 1B5B AD F4 2A			lda PLAYER1+1
  2471 1B5E 8D 54 2B			sta SETPLAYER.P+1
  2472 1B61 20 75 15			jsr SETPLAYER
  2473
  2474 				; optimize OK (levels.inc), line = 6
  2475
  2476 1B64 A9 01			lda #$01
  2477 1B66 8D 5B 2B			sta SETPLAYER.ISALIVE
  2478 1B69 A9 5D			lda #$5D
  2479 1B6B 8D 5A 2B			sta SETPLAYER.COLOUR
  2480 1B6E A9 51			lda #$51
  2481 1B70 8D 59 2B			sta SETPLAYER.HEAD
  2482 1B73 A9 01			lda #$01
  2483 1B75 8D 58 2B			sta SETPLAYER.BRAIN
  2484 1B78 A9 04			lda #$04
  2485 1B7A 8D 57 2B			sta SETPLAYER.DIR
  2486 1B7D A9 0C			lda #$0C
  2487 1B7F 8D 56 2B			sta SETPLAYER.Y
  2488 1B82 A9 1E			lda #$1E
  2489 1B84 8D 55 2B			sta SETPLAYER.X
  2490 1B87 AD F5 2A			lda PLAYER2
  2491 1B8A 8D 53 2B			sta SETPLAYER.P
  2492 1B8D AD F6 2A			lda PLAYER2+1
  2493 1B90 8D 54 2B			sta SETPLAYER.P+1
  2494 1B93 20 75 15			jsr SETPLAYER
  2495
  2496 				; optimize FAIL (1, levels.inc), line = 8
  2497
  2498 1B96 E8				inx
  2499 1B97 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2500 1B9B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2501 1B9D A9 06			lda #$06
  2502 1B9F 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2503 1BA2 A9 0A			lda #$0A
  2504 1BA4 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2505 1BA7 20 4D 13			jsr CALCOBSTACLEADDR
  2506 1BAA B4 17			ldy :STACKORIGIN-1,x
  2507 1BAC B5 18			lda :STACKORIGIN,x
  2508 1BAE 99 32 2B			sta adr.OBSTACLES,y
  2509 1BB1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2510 1BB3 99 33 2B			sta adr.OBSTACLES+1,y
  2511 1BB6 CA				dex
  2512 1BB7 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2513 1BBB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2514 1BBF A9 06			lda #$06
  2515 1BC1 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2516 1BC4 A9 1E			lda #$1E
  2517 1BC6 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2518 1BC9 20 4D 13			jsr CALCOBSTACLEADDR
  2519 1BCC B4 17			ldy :STACKORIGIN-1,x
  2520 1BCE B5 18			lda :STACKORIGIN,x
  2521 1BD0 99 32 2B			sta adr.OBSTACLES,y
  2522 1BD3 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2523 1BD5 99 33 2B			sta adr.OBSTACLES+1,y
  2524 1BD8 CA				dex
  2525
  2526 				; optimize FAIL (1, levels.inc), line = 9
  2527
  2528 1BD9 A9 04 95 18			mva #$04 :STACKORIGIN,x
  2529 1BDD A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2530 1BE1 A9 12			lda #$12
  2531 1BE3 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2532 1BE6 A9 0A			lda #$0A
  2533 1BE8 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2534 1BEB 20 4D 13			jsr CALCOBSTACLEADDR
  2535 1BEE B4 17			ldy :STACKORIGIN-1,x
  2536 1BF0 B5 18			lda :STACKORIGIN,x
  2537 1BF2 99 32 2B			sta adr.OBSTACLES,y
  2538 1BF5 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2539 1BF7 99 33 2B			sta adr.OBSTACLES+1,y
  2540 1BFA CA				dex
  2541 1BFB A9 06 95 18			mva #$06 :STACKORIGIN,x
  2542 1BFF A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2543 1C03 A9 12			lda #$12
  2544 1C05 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2545 1C08 A9 1E			lda #$1E
  2546 1C0A 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2547 1C0D 20 4D 13			jsr CALCOBSTACLEADDR
  2548 1C10 B4 17			ldy :STACKORIGIN-1,x
  2549 1C12 B5 18			lda :STACKORIGIN,x
  2550 1C14 99 32 2B			sta adr.OBSTACLES,y
  2551 1C17 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2552 1C19 99 33 2B			sta adr.OBSTACLES+1,y
  2553 1C1C CA				dex
  2554
  2555 				; optimize FAIL (1, levels.inc), line = 10
  2556
  2557 1C1D A9 08 95 18			mva #$08 :STACKORIGIN,x
  2558 1C21 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2559 1C25 A9 02			lda #$02
  2560 1C27 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2561 1C2A A9 14			lda #$14
  2562 1C2C 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2563 1C2F 20 4D 13			jsr CALCOBSTACLEADDR
  2564 1C32 B4 17			ldy :STACKORIGIN-1,x
  2565 1C34 B5 18			lda :STACKORIGIN,x
  2566 1C36 99 32 2B			sta adr.OBSTACLES,y
  2567 1C39 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2568 1C3B 99 33 2B			sta adr.OBSTACLES+1,y
  2569 1C3E CA				dex
  2570 1C3F A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2571 1C43 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2572 1C47 A9 16			lda #$16
  2573 1C49 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2574 1C4C A9 14			lda #$14
  2575 1C4E 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2576 1C51 20 4D 13			jsr CALCOBSTACLEADDR
  2577 1C54 B4 17			ldy :STACKORIGIN-1,x
  2578 1C56 B5 18			lda :STACKORIGIN,x
  2579 1C58 99 32 2B			sta adr.OBSTACLES,y
  2580 1C5B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2581 1C5D 99 33 2B			sta adr.OBSTACLES+1,y
  2582 1C60 CA				dex
  2583 1C61 CA				dex
  2584 1C62			@exit
  2585 					.ifdef @new
  2586 					lda <@VarData
  2587 					sta :ztmp
  2588 					lda >@VarData
  2589 					ldy #@VarDataSize-1
  2590 					jmp @FreeMem
  2591 					els
  2592 1C62 60				rts						; ret
  2593 					eif
  2594 				.endl
  2595
  2596 1C63			.local	SETLEVEL01					; PROCEDURE
  2597
  2598 				; optimize OK (levels.inc), line = 17
  2599
  2600 1C63 A9 01			lda #$01
  2601 1C65 8D 5B 2B			sta SETPLAYER.ISALIVE
  2602 1C68 A9 62			lda #$62
  2603 1C6A 8D 5A 2B			sta SETPLAYER.COLOUR
  2604 1C6D A9 51			lda #$51
  2605 1C6F 8D 59 2B			sta SETPLAYER.HEAD
  2606 1C72 A9 00			lda #$00
  2607 1C74 8D 58 2B			sta SETPLAYER.BRAIN
  2608 1C77 A9 08			lda #$08
  2609 1C79 8D 57 2B			sta SETPLAYER.DIR
  2610 1C7C A9 0C			lda #$0C
  2611 1C7E 8D 56 2B			sta SETPLAYER.Y
  2612 1C81 A9 0A			lda #$0A
  2613 1C83 8D 55 2B			sta SETPLAYER.X
  2614 1C86 AD F3 2A			lda PLAYER1
  2615 1C89 8D 53 2B			sta SETPLAYER.P
  2616 1C8C AD F4 2A			lda PLAYER1+1
  2617 1C8F 8D 54 2B			sta SETPLAYER.P+1
  2618 1C92 20 75 15			jsr SETPLAYER
  2619
  2620 				; optimize OK (levels.inc), line = 18
  2621
  2622 1C95 A9 01			lda #$01
  2623 1C97 8D 5B 2B			sta SETPLAYER.ISALIVE
  2624 1C9A A9 5D			lda #$5D
  2625 1C9C 8D 5A 2B			sta SETPLAYER.COLOUR
  2626 1C9F A9 51			lda #$51
  2627 1CA1 8D 59 2B			sta SETPLAYER.HEAD
  2628 1CA4 A9 01			lda #$01
  2629 1CA6 8D 58 2B			sta SETPLAYER.BRAIN
  2630 1CA9 A9 04			lda #$04
  2631 1CAB 8D 57 2B			sta SETPLAYER.DIR
  2632 1CAE A9 0C			lda #$0C
  2633 1CB0 8D 56 2B			sta SETPLAYER.Y
  2634 1CB3 A9 1E			lda #$1E
  2635 1CB5 8D 55 2B			sta SETPLAYER.X
  2636 1CB8 AD F5 2A			lda PLAYER2
  2637 1CBB 8D 53 2B			sta SETPLAYER.P
  2638 1CBE AD F6 2A			lda PLAYER2+1
  2639 1CC1 8D 54 2B			sta SETPLAYER.P+1
  2640 1CC4 20 75 15			jsr SETPLAYER
  2641
  2642 				; optimize FAIL (1, levels.inc), line = 20
  2643
  2644 1CC7 E8				inx
  2645 1CC8 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2646 1CCC 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2647 1CCE A9 06			lda #$06
  2648 1CD0 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2649 1CD3 A9 0A			lda #$0A
  2650 1CD5 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2651 1CD8 20 4D 13			jsr CALCOBSTACLEADDR
  2652 1CDB B4 17			ldy :STACKORIGIN-1,x
  2653 1CDD B5 18			lda :STACKORIGIN,x
  2654 1CDF 99 32 2B			sta adr.OBSTACLES,y
  2655 1CE2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2656 1CE4 99 33 2B			sta adr.OBSTACLES+1,y
  2657 1CE7 CA				dex
  2658 1CE8 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2659 1CEC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2660 1CF0 A9 06			lda #$06
  2661 1CF2 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2662 1CF5 A9 1E			lda #$1E
  2663 1CF7 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2664 1CFA 20 4D 13			jsr CALCOBSTACLEADDR
  2665 1CFD B4 17			ldy :STACKORIGIN-1,x
  2666 1CFF B5 18			lda :STACKORIGIN,x
  2667 1D01 99 32 2B			sta adr.OBSTACLES,y
  2668 1D04 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2669 1D06 99 33 2B			sta adr.OBSTACLES+1,y
  2670 1D09 CA				dex
  2671
  2672 				; optimize FAIL (1, levels.inc), line = 21
  2673
  2674 1D0A A9 04 95 18			mva #$04 :STACKORIGIN,x
  2675 1D0E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2676 1D12 A9 12			lda #$12
  2677 1D14 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2678 1D17 A9 0A			lda #$0A
  2679 1D19 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2680 1D1C 20 4D 13			jsr CALCOBSTACLEADDR
  2681 1D1F B4 17			ldy :STACKORIGIN-1,x
  2682 1D21 B5 18			lda :STACKORIGIN,x
  2683 1D23 99 32 2B			sta adr.OBSTACLES,y
  2684 1D26 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2685 1D28 99 33 2B			sta adr.OBSTACLES+1,y
  2686 1D2B CA				dex
  2687 1D2C A9 06 95 18			mva #$06 :STACKORIGIN,x
  2688 1D30 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2689 1D34 A9 12			lda #$12
  2690 1D36 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2691 1D39 A9 1E			lda #$1E
  2692 1D3B 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2693 1D3E 20 4D 13			jsr CALCOBSTACLEADDR
  2694 1D41 B4 17			ldy :STACKORIGIN-1,x
  2695 1D43 B5 18			lda :STACKORIGIN,x
  2696 1D45 99 32 2B			sta adr.OBSTACLES,y
  2697 1D48 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2698 1D4A 99 33 2B			sta adr.OBSTACLES+1,y
  2699 1D4D CA				dex
  2700
  2701 				; optimize FAIL (1, levels.inc), line = 22
  2702
  2703 1D4E A9 08 95 18			mva #$08 :STACKORIGIN,x
  2704 1D52 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2705 1D56 A9 02			lda #$02
  2706 1D58 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2707 1D5B A9 14			lda #$14
  2708 1D5D 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2709 1D60 20 4D 13			jsr CALCOBSTACLEADDR
  2710 1D63 B4 17			ldy :STACKORIGIN-1,x
  2711 1D65 B5 18			lda :STACKORIGIN,x
  2712 1D67 99 32 2B			sta adr.OBSTACLES,y
  2713 1D6A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2714 1D6C 99 33 2B			sta adr.OBSTACLES+1,y
  2715 1D6F CA				dex
  2716 1D70 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2717 1D74 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2718 1D78 A9 16			lda #$16
  2719 1D7A 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2720 1D7D A9 14			lda #$14
  2721 1D7F 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2722 1D82 20 4D 13			jsr CALCOBSTACLEADDR
  2723 1D85 B4 17			ldy :STACKORIGIN-1,x
  2724 1D87 B5 18			lda :STACKORIGIN,x
  2725 1D89 99 32 2B			sta adr.OBSTACLES,y
  2726 1D8C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2727 1D8E 99 33 2B			sta adr.OBSTACLES+1,y
  2728 1D91 CA				dex
  2729 1D92 CA				dex
  2730 1D93			@exit
  2731 					.ifdef @new
  2732 					lda <@VarData
  2733 					sta :ztmp
  2734 					lda >@VarData
  2735 					ldy #@VarDataSize-1
  2736 					jmp @FreeMem
  2737 					els
  2738 1D93 60				rts						; ret
  2739 					eif
  2740 				.endl
  2741
  2742 1D94			.local	SETLEVEL02					; PROCEDURE
  2743
  2744 				; optimize OK (levels.inc), line = 29
  2745
  2746 1D94 A9 01			lda #$01
  2747 1D96 8D 5B 2B			sta SETPLAYER.ISALIVE
  2748 1D99 A9 62			lda #$62
  2749 1D9B 8D 5A 2B			sta SETPLAYER.COLOUR
  2750 1D9E A9 51			lda #$51
  2751 1DA0 8D 59 2B			sta SETPLAYER.HEAD
  2752 1DA3 A9 00			lda #$00
  2753 1DA5 8D 58 2B			sta SETPLAYER.BRAIN
  2754 1DA8 A9 08			lda #$08
  2755 1DAA 8D 57 2B			sta SETPLAYER.DIR
  2756 1DAD A9 0C			lda #$0C
  2757 1DAF 8D 56 2B			sta SETPLAYER.Y
  2758 1DB2 A9 0A			lda #$0A
  2759 1DB4 8D 55 2B			sta SETPLAYER.X
  2760 1DB7 AD F3 2A			lda PLAYER1
  2761 1DBA 8D 53 2B			sta SETPLAYER.P
  2762 1DBD AD F4 2A			lda PLAYER1+1
  2763 1DC0 8D 54 2B			sta SETPLAYER.P+1
  2764 1DC3 20 75 15			jsr SETPLAYER
  2765
  2766 				; optimize OK (levels.inc), line = 30
  2767
  2768 1DC6 A9 01			lda #$01
  2769 1DC8 8D 5B 2B			sta SETPLAYER.ISALIVE
  2770 1DCB A9 5D			lda #$5D
  2771 1DCD 8D 5A 2B			sta SETPLAYER.COLOUR
  2772 1DD0 A9 51			lda #$51
  2773 1DD2 8D 59 2B			sta SETPLAYER.HEAD
  2774 1DD5 A9 03			lda #$03
  2775 1DD7 8D 58 2B			sta SETPLAYER.BRAIN
  2776 1DDA A9 04			lda #$04
  2777 1DDC 8D 57 2B			sta SETPLAYER.DIR
  2778 1DDF A9 0C			lda #$0C
  2779 1DE1 8D 56 2B			sta SETPLAYER.Y
  2780 1DE4 A9 1E			lda #$1E
  2781 1DE6 8D 55 2B			sta SETPLAYER.X
  2782 1DE9 AD F5 2A			lda PLAYER2
  2783 1DEC 8D 53 2B			sta SETPLAYER.P
  2784 1DEF AD F6 2A			lda PLAYER2+1
  2785 1DF2 8D 54 2B			sta SETPLAYER.P+1
  2786 1DF5 20 75 15			jsr SETPLAYER
  2787
  2788 				; optimize FAIL (1, levels.inc), line = 32
  2789
  2790 1DF8 E8				inx
  2791 1DF9 A9 00 95 18			mva #$00 :STACKORIGIN,x
  2792 1DFD 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2793 1DFF A9 06			lda #$06
  2794 1E01 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2795 1E04 A9 0A			lda #$0A
  2796 1E06 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2797 1E09 20 4D 13			jsr CALCOBSTACLEADDR
  2798 1E0C B4 17			ldy :STACKORIGIN-1,x
  2799 1E0E B5 18			lda :STACKORIGIN,x
  2800 1E10 99 32 2B			sta adr.OBSTACLES,y
  2801 1E13 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2802 1E15 99 33 2B			sta adr.OBSTACLES+1,y
  2803 1E18 CA				dex
  2804 1E19 A9 02 95 18			mva #$02 :STACKORIGIN,x
  2805 1E1D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2806 1E21 A9 06			lda #$06
  2807 1E23 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2808 1E26 A9 1E			lda #$1E
  2809 1E28 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2810 1E2B 20 4D 13			jsr CALCOBSTACLEADDR
  2811 1E2E B4 17			ldy :STACKORIGIN-1,x
  2812 1E30 B5 18			lda :STACKORIGIN,x
  2813 1E32 99 32 2B			sta adr.OBSTACLES,y
  2814 1E35 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2815 1E37 99 33 2B			sta adr.OBSTACLES+1,y
  2816 1E3A CA				dex
  2817
  2818 				; optimize FAIL (1, levels.inc), line = 33
  2819
  2820 1E3B A9 04 95 18			mva #$04 :STACKORIGIN,x
  2821 1E3F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2822 1E43 A9 12			lda #$12
  2823 1E45 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2824 1E48 A9 0A			lda #$0A
  2825 1E4A 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2826 1E4D 20 4D 13			jsr CALCOBSTACLEADDR
  2827 1E50 B4 17			ldy :STACKORIGIN-1,x
  2828 1E52 B5 18			lda :STACKORIGIN,x
  2829 1E54 99 32 2B			sta adr.OBSTACLES,y
  2830 1E57 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2831 1E59 99 33 2B			sta adr.OBSTACLES+1,y
  2832 1E5C CA				dex
  2833 1E5D A9 06 95 18			mva #$06 :STACKORIGIN,x
  2834 1E61 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2835 1E65 A9 12			lda #$12
  2836 1E67 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2837 1E6A A9 1E			lda #$1E
  2838 1E6C 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2839 1E6F 20 4D 13			jsr CALCOBSTACLEADDR
  2840 1E72 B4 17			ldy :STACKORIGIN-1,x
  2841 1E74 B5 18			lda :STACKORIGIN,x
  2842 1E76 99 32 2B			sta adr.OBSTACLES,y
  2843 1E79 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2844 1E7B 99 33 2B			sta adr.OBSTACLES+1,y
  2845 1E7E CA				dex
  2846
  2847 				; optimize FAIL (1, levels.inc), line = 34
  2848
  2849 1E7F A9 08 95 18			mva #$08 :STACKORIGIN,x
  2850 1E83 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2851 1E87 A9 02			lda #$02
  2852 1E89 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2853 1E8C A9 14			lda #$14
  2854 1E8E 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2855 1E91 20 4D 13			jsr CALCOBSTACLEADDR
  2856 1E94 B4 17			ldy :STACKORIGIN-1,x
  2857 1E96 B5 18			lda :STACKORIGIN,x
  2858 1E98 99 32 2B			sta adr.OBSTACLES,y
  2859 1E9B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2860 1E9D 99 33 2B			sta adr.OBSTACLES+1,y
  2861 1EA0 CA				dex
  2862 1EA1 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  2863 1EA5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2864 1EA9 A9 16			lda #$16
  2865 1EAB 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2866 1EAE A9 14			lda #$14
  2867 1EB0 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2868 1EB3 20 4D 13			jsr CALCOBSTACLEADDR
  2869 1EB6 B4 17			ldy :STACKORIGIN-1,x
  2870 1EB8 B5 18			lda :STACKORIGIN,x
  2871 1EBA 99 32 2B			sta adr.OBSTACLES,y
  2872 1EBD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2873 1EBF 99 33 2B			sta adr.OBSTACLES+1,y
  2874 1EC2 CA				dex
  2875 1EC3 CA				dex
  2876 1EC4			@exit
  2877 					.ifdef @new
  2878 					lda <@VarData
  2879 					sta :ztmp
  2880 					lda >@VarData
  2881 					ldy #@VarDataSize-1
  2882 					jmp @FreeMem
  2883 					els
  2884 1EC4 60				rts						; ret
  2885 					eif
  2886 				.endl
  2887
  2888 1EC5			.local	SETLEVEL03					; PROCEDURE
  2889
  2890 				; optimize OK (levels.inc), line = 41
  2891
  2892 1EC5 A9 01			lda #$01
  2893 1EC7 8D 5B 2B			sta SETPLAYER.ISALIVE
  2894 1ECA A9 62			lda #$62
  2895 1ECC 8D 5A 2B			sta SETPLAYER.COLOUR
  2896 1ECF A9 51			lda #$51
  2897 1ED1 8D 59 2B			sta SETPLAYER.HEAD
  2898 1ED4 A9 00			lda #$00
  2899 1ED6 8D 58 2B			sta SETPLAYER.BRAIN
  2900 1ED9 A9 08			lda #$08
  2901 1EDB 8D 57 2B			sta SETPLAYER.DIR
  2902 1EDE A9 0C			lda #$0C
  2903 1EE0 8D 56 2B			sta SETPLAYER.Y
  2904 1EE3 A9 0A			lda #$0A
  2905 1EE5 8D 55 2B			sta SETPLAYER.X
  2906 1EE8 AD F3 2A			lda PLAYER1
  2907 1EEB 8D 53 2B			sta SETPLAYER.P
  2908 1EEE AD F4 2A			lda PLAYER1+1
  2909 1EF1 8D 54 2B			sta SETPLAYER.P+1
  2910 1EF4 20 75 15			jsr SETPLAYER
  2911
  2912 				; optimize OK (levels.inc), line = 42
  2913
  2914 1EF7 A9 01			lda #$01
  2915 1EF9 8D 5B 2B			sta SETPLAYER.ISALIVE
  2916 1EFC A9 5D			lda #$5D
  2917 1EFE 8D 5A 2B			sta SETPLAYER.COLOUR
  2918 1F01 A9 51			lda #$51
  2919 1F03 8D 59 2B			sta SETPLAYER.HEAD
  2920 1F06 A9 02			lda #$02
  2921 1F08 8D 58 2B			sta SETPLAYER.BRAIN
  2922 1F0B A9 04			lda #$04
  2923 1F0D 8D 57 2B			sta SETPLAYER.DIR
  2924 1F10 A9 0C			lda #$0C
  2925 1F12 8D 56 2B			sta SETPLAYER.Y
  2926 1F15 A9 1E			lda #$1E
  2927 1F17 8D 55 2B			sta SETPLAYER.X
  2928 1F1A AD F5 2A			lda PLAYER2
  2929 1F1D 8D 53 2B			sta SETPLAYER.P
  2930 1F20 AD F6 2A			lda PLAYER2+1
  2931 1F23 8D 54 2B			sta SETPLAYER.P+1
  2932 1F26 20 75 15			jsr SETPLAYER
  2933
  2934 				; optimize FAIL (1, levels.inc), line = 44
  2935
  2936 1F29 E8				inx
  2937 1F2A A9 00 95 18			mva #$00 :STACKORIGIN,x
  2938 1F2E 95 28			sta :STACKORIGIN+STACKWIDTH,x
  2939 1F30 A9 06			lda #$06
  2940 1F32 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2941 1F35 A9 0A			lda #$0A
  2942 1F37 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2943 1F3A 20 4D 13			jsr CALCOBSTACLEADDR
  2944 1F3D B4 17			ldy :STACKORIGIN-1,x
  2945 1F3F B5 18			lda :STACKORIGIN,x
  2946 1F41 99 32 2B			sta adr.OBSTACLES,y
  2947 1F44 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2948 1F46 99 33 2B			sta adr.OBSTACLES+1,y
  2949 1F49 CA				dex
  2950 1F4A A9 02 95 18			mva #$02 :STACKORIGIN,x
  2951 1F4E A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2952 1F52 A9 06			lda #$06
  2953 1F54 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2954 1F57 A9 1E			lda #$1E
  2955 1F59 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2956 1F5C 20 4D 13			jsr CALCOBSTACLEADDR
  2957 1F5F B4 17			ldy :STACKORIGIN-1,x
  2958 1F61 B5 18			lda :STACKORIGIN,x
  2959 1F63 99 32 2B			sta adr.OBSTACLES,y
  2960 1F66 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2961 1F68 99 33 2B			sta adr.OBSTACLES+1,y
  2962 1F6B CA				dex
  2963
  2964 				; optimize FAIL (1, levels.inc), line = 45
  2965
  2966 1F6C A9 04 95 18			mva #$04 :STACKORIGIN,x
  2967 1F70 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2968 1F74 A9 12			lda #$12
  2969 1F76 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2970 1F79 A9 0A			lda #$0A
  2971 1F7B 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2972 1F7E 20 4D 13			jsr CALCOBSTACLEADDR
  2973 1F81 B4 17			ldy :STACKORIGIN-1,x
  2974 1F83 B5 18			lda :STACKORIGIN,x
  2975 1F85 99 32 2B			sta adr.OBSTACLES,y
  2976 1F88 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2977 1F8A 99 33 2B			sta adr.OBSTACLES+1,y
  2978 1F8D CA				dex
  2979 1F8E A9 06 95 18			mva #$06 :STACKORIGIN,x
  2980 1F92 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2981 1F96 A9 12			lda #$12
  2982 1F98 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2983 1F9B A9 1E			lda #$1E
  2984 1F9D 8D 4E 2B			sta CALCOBSTACLEADDR.X
  2985 1FA0 20 4D 13			jsr CALCOBSTACLEADDR
  2986 1FA3 B4 17			ldy :STACKORIGIN-1,x
  2987 1FA5 B5 18			lda :STACKORIGIN,x
  2988 1FA7 99 32 2B			sta adr.OBSTACLES,y
  2989 1FAA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  2990 1FAC 99 33 2B			sta adr.OBSTACLES+1,y
  2991 1FAF CA				dex
  2992
  2993 				; optimize FAIL (1, levels.inc), line = 46
  2994
  2995 1FB0 A9 08 95 18			mva #$08 :STACKORIGIN,x
  2996 1FB4 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2997 1FB8 A9 0C			lda #$0C
  2998 1FBA 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  2999 1FBD A9 01			lda #$01
  3000 1FBF 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3001 1FC2 20 4D 13			jsr CALCOBSTACLEADDR
  3002 1FC5 B4 17			ldy :STACKORIGIN-1,x
  3003 1FC7 B5 18			lda :STACKORIGIN,x
  3004 1FC9 99 32 2B			sta adr.OBSTACLES,y
  3005 1FCC B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3006 1FCE 99 33 2B			sta adr.OBSTACLES+1,y
  3007 1FD1 CA				dex
  3008 1FD2 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3009 1FD6 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3010 1FDA A9 02			lda #$02
  3011 1FDC 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3012 1FDF A9 14			lda #$14
  3013 1FE1 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3014 1FE4 20 4D 13			jsr CALCOBSTACLEADDR
  3015 1FE7 B4 17			ldy :STACKORIGIN-1,x
  3016 1FE9 B5 18			lda :STACKORIGIN,x
  3017 1FEB 99 32 2B			sta adr.OBSTACLES,y
  3018 1FEE B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3019 1FF0 99 33 2B			sta adr.OBSTACLES+1,y
  3020 1FF3 CA				dex
  3021
  3022 				; optimize FAIL (1, levels.inc), line = 47
  3023
  3024 1FF4 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3025 1FF8 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3026 1FFC A9 16			lda #$16
  3027 1FFE 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3028 2001 A9 14			lda #$14
  3029 2003 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3030 2006 20 4D 13			jsr CALCOBSTACLEADDR
  3031 2009 B4 17			ldy :STACKORIGIN-1,x
  3032 200B B5 18			lda :STACKORIGIN,x
  3033 200D 99 32 2B			sta adr.OBSTACLES,y
  3034 2010 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3035 2012 99 33 2B			sta adr.OBSTACLES+1,y
  3036 2015 CA				dex
  3037 2016 CA				dex
  3038 2017			@exit
  3039 					.ifdef @new
  3040 					lda <@VarData
  3041 					sta :ztmp
  3042 					lda >@VarData
  3043 					ldy #@VarDataSize-1
  3044 					jmp @FreeMem
  3045 					els
  3046 2017 60				rts						; ret
  3047 					eif
  3048 				.endl
  3049
  3050 2018			.local	SETLEVEL04					; PROCEDURE
  3051
  3052 				; optimize OK (levels.inc), line = 54
  3053
  3054 2018 A9 01			lda #$01
  3055 201A 8D 5B 2B			sta SETPLAYER.ISALIVE
  3056 201D A9 62			lda #$62
  3057 201F 8D 5A 2B			sta SETPLAYER.COLOUR
  3058 2022 A9 51			lda #$51
  3059 2024 8D 59 2B			sta SETPLAYER.HEAD
  3060 2027 A9 00			lda #$00
  3061 2029 8D 58 2B			sta SETPLAYER.BRAIN
  3062 202C A9 04			lda #$04
  3063 202E 8D 57 2B			sta SETPLAYER.DIR
  3064 2031 A9 0C			lda #$0C
  3065 2033 8D 56 2B			sta SETPLAYER.Y
  3066 2036 A9 12			lda #$12
  3067 2038 8D 55 2B			sta SETPLAYER.X
  3068 203B AD F3 2A			lda PLAYER1
  3069 203E 8D 53 2B			sta SETPLAYER.P
  3070 2041 AD F4 2A			lda PLAYER1+1
  3071 2044 8D 54 2B			sta SETPLAYER.P+1
  3072 2047 20 75 15			jsr SETPLAYER
  3073
  3074 				; optimize OK (levels.inc), line = 55
  3075
  3076 204A A9 01			lda #$01
  3077 204C 8D 5B 2B			sta SETPLAYER.ISALIVE
  3078 204F A9 5D			lda #$5D
  3079 2051 8D 5A 2B			sta SETPLAYER.COLOUR
  3080 2054 A9 51			lda #$51
  3081 2056 8D 59 2B			sta SETPLAYER.HEAD
  3082 2059 A9 04			lda #$04
  3083 205B 8D 58 2B			sta SETPLAYER.BRAIN
  3084 205E A9 08			lda #$08
  3085 2060 8D 57 2B			sta SETPLAYER.DIR
  3086 2063 A9 0C			lda #$0C
  3087 2065 8D 56 2B			sta SETPLAYER.Y
  3088 2068 A9 16			lda #$16
  3089 206A 8D 55 2B			sta SETPLAYER.X
  3090 206D AD F5 2A			lda PLAYER2
  3091 2070 8D 53 2B			sta SETPLAYER.P
  3092 2073 AD F6 2A			lda PLAYER2+1
  3093 2076 8D 54 2B			sta SETPLAYER.P+1
  3094 2079 20 75 15			jsr SETPLAYER
  3095
  3096 				; optimize FAIL (1, levels.inc), line = 57
  3097
  3098 207C E8				inx
  3099 207D A9 00 95 18			mva #$00 :STACKORIGIN,x
  3100 2081 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3101 2083 A9 06			lda #$06
  3102 2085 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3103 2088 A9 0A			lda #$0A
  3104 208A 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3105 208D 20 4D 13			jsr CALCOBSTACLEADDR
  3106 2090 B4 17			ldy :STACKORIGIN-1,x
  3107 2092 B5 18			lda :STACKORIGIN,x
  3108 2094 99 32 2B			sta adr.OBSTACLES,y
  3109 2097 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3110 2099 99 33 2B			sta adr.OBSTACLES+1,y
  3111 209C CA				dex
  3112 209D A9 02 95 18			mva #$02 :STACKORIGIN,x
  3113 20A1 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3114 20A5 A9 06			lda #$06
  3115 20A7 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3116 20AA A9 1E			lda #$1E
  3117 20AC 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3118 20AF 20 4D 13			jsr CALCOBSTACLEADDR
  3119 20B2 B4 17			ldy :STACKORIGIN-1,x
  3120 20B4 B5 18			lda :STACKORIGIN,x
  3121 20B6 99 32 2B			sta adr.OBSTACLES,y
  3122 20B9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3123 20BB 99 33 2B			sta adr.OBSTACLES+1,y
  3124 20BE CA				dex
  3125
  3126 				; optimize FAIL (1, levels.inc), line = 58
  3127
  3128 20BF A9 04 95 18			mva #$04 :STACKORIGIN,x
  3129 20C3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3130 20C7 A9 12			lda #$12
  3131 20C9 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3132 20CC A9 0A			lda #$0A
  3133 20CE 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3134 20D1 20 4D 13			jsr CALCOBSTACLEADDR
  3135 20D4 B4 17			ldy :STACKORIGIN-1,x
  3136 20D6 B5 18			lda :STACKORIGIN,x
  3137 20D8 99 32 2B			sta adr.OBSTACLES,y
  3138 20DB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3139 20DD 99 33 2B			sta adr.OBSTACLES+1,y
  3140 20E0 CA				dex
  3141 20E1 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3142 20E5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3143 20E9 A9 12			lda #$12
  3144 20EB 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3145 20EE A9 1E			lda #$1E
  3146 20F0 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3147 20F3 20 4D 13			jsr CALCOBSTACLEADDR
  3148 20F6 B4 17			ldy :STACKORIGIN-1,x
  3149 20F8 B5 18			lda :STACKORIGIN,x
  3150 20FA 99 32 2B			sta adr.OBSTACLES,y
  3151 20FD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3152 20FF 99 33 2B			sta adr.OBSTACLES+1,y
  3153 2102 CA				dex
  3154
  3155 				; optimize FAIL (1, levels.inc), line = 59
  3156
  3157 2103 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3158 2107 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3159 210B A9 0C			lda #$0C
  3160 210D 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3161 2110 A9 01			lda #$01
  3162 2112 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3163 2115 20 4D 13			jsr CALCOBSTACLEADDR
  3164 2118 B4 17			ldy :STACKORIGIN-1,x
  3165 211A B5 18			lda :STACKORIGIN,x
  3166 211C 99 32 2B			sta adr.OBSTACLES,y
  3167 211F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3168 2121 99 33 2B			sta adr.OBSTACLES+1,y
  3169 2124 CA				dex
  3170 2125 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3171 2129 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3172 212D A9 02			lda #$02
  3173 212F 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3174 2132 A9 14			lda #$14
  3175 2134 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3176 2137 20 4D 13			jsr CALCOBSTACLEADDR
  3177 213A B4 17			ldy :STACKORIGIN-1,x
  3178 213C B5 18			lda :STACKORIGIN,x
  3179 213E 99 32 2B			sta adr.OBSTACLES,y
  3180 2141 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3181 2143 99 33 2B			sta adr.OBSTACLES+1,y
  3182 2146 CA				dex
  3183
  3184 				; optimize FAIL (1, levels.inc), line = 60
  3185
  3186 2147 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3187 214B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3188 214F A9 16			lda #$16
  3189 2151 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3190 2154 A9 14			lda #$14
  3191 2156 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3192 2159 20 4D 13			jsr CALCOBSTACLEADDR
  3193 215C B4 17			ldy :STACKORIGIN-1,x
  3194 215E B5 18			lda :STACKORIGIN,x
  3195 2160 99 32 2B			sta adr.OBSTACLES,y
  3196 2163 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3197 2165 99 33 2B			sta adr.OBSTACLES+1,y
  3198 2168 CA				dex
  3199 2169 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3200 216D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3201 2171 A9 0C			lda #$0C
  3202 2173 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3203 2176 A9 14			lda #$14
  3204 2178 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3205 217B 20 4D 13			jsr CALCOBSTACLEADDR
  3206 217E B4 17			ldy :STACKORIGIN-1,x
  3207 2180 B5 18			lda :STACKORIGIN,x
  3208 2182 99 32 2B			sta adr.OBSTACLES,y
  3209 2185 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3210 2187 99 33 2B			sta adr.OBSTACLES+1,y
  3211 218A CA				dex
  3212 218B CA				dex
  3213 218C			@exit
  3214 					.ifdef @new
  3215 					lda <@VarData
  3216 					sta :ztmp
  3217 					lda >@VarData
  3218 					ldy #@VarDataSize-1
  3219 					jmp @FreeMem
  3220 					els
  3221 218C 60				rts						; ret
  3222 					eif
  3223 				.endl
  3224
  3225 218D			.local	SETLEVEL05					; PROCEDURE
  3226
  3227 				; optimize OK (levels.inc), line = 67
  3228
  3229 218D A9 01			lda #$01
  3230 218F 8D 5B 2B			sta SETPLAYER.ISALIVE
  3231 2192 A9 62			lda #$62
  3232 2194 8D 5A 2B			sta SETPLAYER.COLOUR
  3233 2197 A9 51			lda #$51
  3234 2199 8D 59 2B			sta SETPLAYER.HEAD
  3235 219C A9 00			lda #$00
  3236 219E 8D 58 2B			sta SETPLAYER.BRAIN
  3237 21A1 A9 08			lda #$08
  3238 21A3 8D 57 2B			sta SETPLAYER.DIR
  3239 21A6 A9 0C			lda #$0C
  3240 21A8 8D 56 2B			sta SETPLAYER.Y
  3241 21AB A9 0A			lda #$0A
  3242 21AD 8D 55 2B			sta SETPLAYER.X
  3243 21B0 AD F3 2A			lda PLAYER1
  3244 21B3 8D 53 2B			sta SETPLAYER.P
  3245 21B6 AD F4 2A			lda PLAYER1+1
  3246 21B9 8D 54 2B			sta SETPLAYER.P+1
  3247 21BC 20 75 15			jsr SETPLAYER
  3248
  3249 				; optimize OK (levels.inc), line = 68
  3250
  3251 21BF A9 01			lda #$01
  3252 21C1 8D 5B 2B			sta SETPLAYER.ISALIVE
  3253 21C4 A9 5D			lda #$5D
  3254 21C6 8D 5A 2B			sta SETPLAYER.COLOUR
  3255 21C9 A9 51			lda #$51
  3256 21CB 8D 59 2B			sta SETPLAYER.HEAD
  3257 21CE A9 04			lda #$04
  3258 21D0 8D 58 2B			sta SETPLAYER.BRAIN
  3259 21D3 8D 57 2B			sta SETPLAYER.DIR
  3260 21D6 A9 0C			lda #$0C
  3261 21D8 8D 56 2B			sta SETPLAYER.Y
  3262 21DB A9 1E			lda #$1E
  3263 21DD 8D 55 2B			sta SETPLAYER.X
  3264 21E0 AD F5 2A			lda PLAYER2
  3265 21E3 8D 53 2B			sta SETPLAYER.P
  3266 21E6 AD F6 2A			lda PLAYER2+1
  3267 21E9 8D 54 2B			sta SETPLAYER.P+1
  3268 21EC 20 75 15			jsr SETPLAYER
  3269
  3270 				; optimize OK (levels.inc), line = 69
  3271
  3272 21EF A9 01			lda #$01
  3273 21F1 8D 5B 2B			sta SETPLAYER.ISALIVE
  3274 21F4 A9 71			lda #$71
  3275 21F6 8D 5A 2B			sta SETPLAYER.COLOUR
  3276 21F9 A9 51			lda #$51
  3277 21FB 8D 59 2B			sta SETPLAYER.HEAD
  3278 21FE A9 03			lda #$03
  3279 2200 8D 58 2B			sta SETPLAYER.BRAIN
  3280 2203 A9 02			lda #$02
  3281 2205 8D 57 2B			sta SETPLAYER.DIR
  3282 2208 A9 04			lda #$04
  3283 220A 8D 56 2B			sta SETPLAYER.Y
  3284 220D A9 14			lda #$14
  3285 220F 8D 55 2B			sta SETPLAYER.X
  3286 2212 AD F7 2A			lda PLAYER3
  3287 2215 8D 53 2B			sta SETPLAYER.P
  3288 2218 AD F8 2A			lda PLAYER3+1
  3289 221B 8D 54 2B			sta SETPLAYER.P+1
  3290 221E 20 75 15			jsr SETPLAYER
  3291
  3292 				; optimize OK (levels.inc), line = 70
  3293
  3294 2221 A9 01			lda #$01
  3295 2223 8D 5B 2B			sta SETPLAYER.ISALIVE
  3296 2226 A9 55			lda #$55
  3297 2228 8D 5A 2B			sta SETPLAYER.COLOUR
  3298 222B A9 51			lda #$51
  3299 222D 8D 59 2B			sta SETPLAYER.HEAD
  3300 2230 A9 02			lda #$02
  3301 2232 8D 58 2B			sta SETPLAYER.BRAIN
  3302 2235 A9 01			lda #$01
  3303 2237 8D 57 2B			sta SETPLAYER.DIR
  3304 223A A9 12			lda #$12
  3305 223C 8D 56 2B			sta SETPLAYER.Y
  3306 223F A9 14			lda #$14
  3307 2241 8D 55 2B			sta SETPLAYER.X
  3308 2244 AD F9 2A			lda PLAYER4
  3309 2247 8D 53 2B			sta SETPLAYER.P
  3310 224A AD FA 2A			lda PLAYER4+1
  3311 224D 8D 54 2B			sta SETPLAYER.P+1
  3312 2250 20 75 15			jsr SETPLAYER
  3313
  3314 				; optimize FAIL (1, levels.inc), line = 72
  3315
  3316 2253 E8				inx
  3317 2254 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3318 2258 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3319 225A A9 06			lda #$06
  3320 225C 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3321 225F A9 0A			lda #$0A
  3322 2261 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3323 2264 20 4D 13			jsr CALCOBSTACLEADDR
  3324 2267 B4 17			ldy :STACKORIGIN-1,x
  3325 2269 B5 18			lda :STACKORIGIN,x
  3326 226B 99 32 2B			sta adr.OBSTACLES,y
  3327 226E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3328 2270 99 33 2B			sta adr.OBSTACLES+1,y
  3329 2273 CA				dex
  3330 2274 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3331 2278 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3332 227C A9 06			lda #$06
  3333 227E 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3334 2281 A9 1E			lda #$1E
  3335 2283 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3336 2286 20 4D 13			jsr CALCOBSTACLEADDR
  3337 2289 B4 17			ldy :STACKORIGIN-1,x
  3338 228B B5 18			lda :STACKORIGIN,x
  3339 228D 99 32 2B			sta adr.OBSTACLES,y
  3340 2290 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3341 2292 99 33 2B			sta adr.OBSTACLES+1,y
  3342 2295 CA				dex
  3343
  3344 				; optimize FAIL (1, levels.inc), line = 73
  3345
  3346 2296 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3347 229A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3348 229E A9 12			lda #$12
  3349 22A0 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3350 22A3 A9 0A			lda #$0A
  3351 22A5 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3352 22A8 20 4D 13			jsr CALCOBSTACLEADDR
  3353 22AB B4 17			ldy :STACKORIGIN-1,x
  3354 22AD B5 18			lda :STACKORIGIN,x
  3355 22AF 99 32 2B			sta adr.OBSTACLES,y
  3356 22B2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3357 22B4 99 33 2B			sta adr.OBSTACLES+1,y
  3358 22B7 CA				dex
  3359 22B8 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3360 22BC A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3361 22C0 A9 12			lda #$12
  3362 22C2 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3363 22C5 A9 1E			lda #$1E
  3364 22C7 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3365 22CA 20 4D 13			jsr CALCOBSTACLEADDR
  3366 22CD B4 17			ldy :STACKORIGIN-1,x
  3367 22CF B5 18			lda :STACKORIGIN,x
  3368 22D1 99 32 2B			sta adr.OBSTACLES,y
  3369 22D4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3370 22D6 99 33 2B			sta adr.OBSTACLES+1,y
  3371 22D9 CA				dex
  3372
  3373 				; optimize FAIL (1, levels.inc), line = 74
  3374
  3375 22DA A9 08 95 18			mva #$08 :STACKORIGIN,x
  3376 22DE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3377 22E2 A9 0C			lda #$0C
  3378 22E4 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3379 22E7 A9 01			lda #$01
  3380 22E9 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3381 22EC 20 4D 13			jsr CALCOBSTACLEADDR
  3382 22EF B4 17			ldy :STACKORIGIN-1,x
  3383 22F1 B5 18			lda :STACKORIGIN,x
  3384 22F3 99 32 2B			sta adr.OBSTACLES,y
  3385 22F6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3386 22F8 99 33 2B			sta adr.OBSTACLES+1,y
  3387 22FB CA				dex
  3388 22FC A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3389 2300 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3390 2304 A9 02			lda #$02
  3391 2306 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3392 2309 A9 14			lda #$14
  3393 230B 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3394 230E 20 4D 13			jsr CALCOBSTACLEADDR
  3395 2311 B4 17			ldy :STACKORIGIN-1,x
  3396 2313 B5 18			lda :STACKORIGIN,x
  3397 2315 99 32 2B			sta adr.OBSTACLES,y
  3398 2318 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3399 231A 99 33 2B			sta adr.OBSTACLES+1,y
  3400 231D CA				dex
  3401
  3402 				; optimize FAIL (1, levels.inc), line = 75
  3403
  3404 231E A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3405 2322 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3406 2326 A9 16			lda #$16
  3407 2328 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3408 232B A9 14			lda #$14
  3409 232D 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3410 2330 20 4D 13			jsr CALCOBSTACLEADDR
  3411 2333 B4 17			ldy :STACKORIGIN-1,x
  3412 2335 B5 18			lda :STACKORIGIN,x
  3413 2337 99 32 2B			sta adr.OBSTACLES,y
  3414 233A B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3415 233C 99 33 2B			sta adr.OBSTACLES+1,y
  3416 233F CA				dex
  3417 2340 CA				dex
  3418 2341			@exit
  3419 					.ifdef @new
  3420 					lda <@VarData
  3421 					sta :ztmp
  3422 					lda >@VarData
  3423 					ldy #@VarDataSize-1
  3424 					jmp @FreeMem
  3425 					els
  3426 2341 60				rts						; ret
  3427 					eif
  3428 				.endl
  3429
  3430 2342			.local	SETLEVEL06					; PROCEDURE
  3431
  3432 				; optimize OK (levels.inc), line = 82
  3433
  3434 2342 A9 01			lda #$01
  3435 2344 8D 5B 2B			sta SETPLAYER.ISALIVE
  3436 2347 A9 62			lda #$62
  3437 2349 8D 5A 2B			sta SETPLAYER.COLOUR
  3438 234C A9 51			lda #$51
  3439 234E 8D 59 2B			sta SETPLAYER.HEAD
  3440 2351 A9 00			lda #$00
  3441 2353 8D 58 2B			sta SETPLAYER.BRAIN
  3442 2356 A9 04			lda #$04
  3443 2358 8D 57 2B			sta SETPLAYER.DIR
  3444 235B A9 0C			lda #$0C
  3445 235D 8D 56 2B			sta SETPLAYER.Y
  3446 2360 A9 12			lda #$12
  3447 2362 8D 55 2B			sta SETPLAYER.X
  3448 2365 AD F3 2A			lda PLAYER1
  3449 2368 8D 53 2B			sta SETPLAYER.P
  3450 236B AD F4 2A			lda PLAYER1+1
  3451 236E 8D 54 2B			sta SETPLAYER.P+1
  3452 2371 20 75 15			jsr SETPLAYER
  3453
  3454 				; optimize OK (levels.inc), line = 83
  3455
  3456 2374 A9 01			lda #$01
  3457 2376 8D 5B 2B			sta SETPLAYER.ISALIVE
  3458 2379 A9 5D			lda #$5D
  3459 237B 8D 5A 2B			sta SETPLAYER.COLOUR
  3460 237E A9 51			lda #$51
  3461 2380 8D 59 2B			sta SETPLAYER.HEAD
  3462 2383 A9 02			lda #$02
  3463 2385 8D 58 2B			sta SETPLAYER.BRAIN
  3464 2388 A9 08			lda #$08
  3465 238A 8D 57 2B			sta SETPLAYER.DIR
  3466 238D A9 0C			lda #$0C
  3467 238F 8D 56 2B			sta SETPLAYER.Y
  3468 2392 A9 16			lda #$16
  3469 2394 8D 55 2B			sta SETPLAYER.X
  3470 2397 AD F5 2A			lda PLAYER2
  3471 239A 8D 53 2B			sta SETPLAYER.P
  3472 239D AD F6 2A			lda PLAYER2+1
  3473 23A0 8D 54 2B			sta SETPLAYER.P+1
  3474 23A3 20 75 15			jsr SETPLAYER
  3475
  3476 				; optimize OK (levels.inc), line = 84
  3477
  3478 23A6 A9 01			lda #$01
  3479 23A8 8D 5B 2B			sta SETPLAYER.ISALIVE
  3480 23AB A9 71			lda #$71
  3481 23AD 8D 5A 2B			sta SETPLAYER.COLOUR
  3482 23B0 A9 51			lda #$51
  3483 23B2 8D 59 2B			sta SETPLAYER.HEAD
  3484 23B5 A9 02			lda #$02
  3485 23B7 8D 58 2B			sta SETPLAYER.BRAIN
  3486 23BA 8D 57 2B			sta SETPLAYER.DIR
  3487 23BD A9 06			lda #$06
  3488 23BF 8D 56 2B			sta SETPLAYER.Y
  3489 23C2 8D 55 2B			sta SETPLAYER.X
  3490 23C5 AD F7 2A			lda PLAYER3
  3491 23C8 8D 53 2B			sta SETPLAYER.P
  3492 23CB AD F8 2A			lda PLAYER3+1
  3493 23CE 8D 54 2B			sta SETPLAYER.P+1
  3494 23D1 20 75 15			jsr SETPLAYER
  3495
  3496 				; optimize OK (levels.inc), line = 85
  3497
  3498 23D4 A9 01			lda #$01
  3499 23D6 8D 5B 2B			sta SETPLAYER.ISALIVE
  3500 23D9 A9 55			lda #$55
  3501 23DB 8D 5A 2B			sta SETPLAYER.COLOUR
  3502 23DE A9 51			lda #$51
  3503 23E0 8D 59 2B			sta SETPLAYER.HEAD
  3504 23E3 A9 03			lda #$03
  3505 23E5 8D 58 2B			sta SETPLAYER.BRAIN
  3506 23E8 A9 08			lda #$08
  3507 23EA 8D 57 2B			sta SETPLAYER.DIR
  3508 23ED A9 12			lda #$12
  3509 23EF 8D 56 2B			sta SETPLAYER.Y
  3510 23F2 A9 24			lda #$24
  3511 23F4 8D 55 2B			sta SETPLAYER.X
  3512 23F7 AD F9 2A			lda PLAYER4
  3513 23FA 8D 53 2B			sta SETPLAYER.P
  3514 23FD AD FA 2A			lda PLAYER4+1
  3515 2400 8D 54 2B			sta SETPLAYER.P+1
  3516 2403 20 75 15			jsr SETPLAYER
  3517
  3518 				; optimize FAIL (1, levels.inc), line = 87
  3519
  3520 2406 E8				inx
  3521 2407 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3522 240B 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3523 240D A9 06			lda #$06
  3524 240F 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3525 2412 A9 0A			lda #$0A
  3526 2414 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3527 2417 20 4D 13			jsr CALCOBSTACLEADDR
  3528 241A B4 17			ldy :STACKORIGIN-1,x
  3529 241C B5 18			lda :STACKORIGIN,x
  3530 241E 99 32 2B			sta adr.OBSTACLES,y
  3531 2421 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3532 2423 99 33 2B			sta adr.OBSTACLES+1,y
  3533 2426 CA				dex
  3534 2427 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3535 242B A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3536 242F A9 06			lda #$06
  3537 2431 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3538 2434 A9 1E			lda #$1E
  3539 2436 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3540 2439 20 4D 13			jsr CALCOBSTACLEADDR
  3541 243C B4 17			ldy :STACKORIGIN-1,x
  3542 243E B5 18			lda :STACKORIGIN,x
  3543 2440 99 32 2B			sta adr.OBSTACLES,y
  3544 2443 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3545 2445 99 33 2B			sta adr.OBSTACLES+1,y
  3546 2448 CA				dex
  3547
  3548 				; optimize FAIL (1, levels.inc), line = 88
  3549
  3550 2449 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3551 244D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3552 2451 A9 12			lda #$12
  3553 2453 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3554 2456 A9 0A			lda #$0A
  3555 2458 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3556 245B 20 4D 13			jsr CALCOBSTACLEADDR
  3557 245E B4 17			ldy :STACKORIGIN-1,x
  3558 2460 B5 18			lda :STACKORIGIN,x
  3559 2462 99 32 2B			sta adr.OBSTACLES,y
  3560 2465 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3561 2467 99 33 2B			sta adr.OBSTACLES+1,y
  3562 246A CA				dex
  3563 246B A9 06 95 18			mva #$06 :STACKORIGIN,x
  3564 246F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3565 2473 A9 12			lda #$12
  3566 2475 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3567 2478 A9 1E			lda #$1E
  3568 247A 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3569 247D 20 4D 13			jsr CALCOBSTACLEADDR
  3570 2480 B4 17			ldy :STACKORIGIN-1,x
  3571 2482 B5 18			lda :STACKORIGIN,x
  3572 2484 99 32 2B			sta adr.OBSTACLES,y
  3573 2487 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3574 2489 99 33 2B			sta adr.OBSTACLES+1,y
  3575 248C CA				dex
  3576
  3577 				; optimize FAIL (1, levels.inc), line = 89
  3578
  3579 248D A9 08 95 18			mva #$08 :STACKORIGIN,x
  3580 2491 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3581 2495 A9 0C			lda #$0C
  3582 2497 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3583 249A A9 01			lda #$01
  3584 249C 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3585 249F 20 4D 13			jsr CALCOBSTACLEADDR
  3586 24A2 B4 17			ldy :STACKORIGIN-1,x
  3587 24A4 B5 18			lda :STACKORIGIN,x
  3588 24A6 99 32 2B			sta adr.OBSTACLES,y
  3589 24A9 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3590 24AB 99 33 2B			sta adr.OBSTACLES+1,y
  3591 24AE CA				dex
  3592 24AF A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3593 24B3 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3594 24B7 A9 02			lda #$02
  3595 24B9 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3596 24BC A9 14			lda #$14
  3597 24BE 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3598 24C1 20 4D 13			jsr CALCOBSTACLEADDR
  3599 24C4 B4 17			ldy :STACKORIGIN-1,x
  3600 24C6 B5 18			lda :STACKORIGIN,x
  3601 24C8 99 32 2B			sta adr.OBSTACLES,y
  3602 24CB B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3603 24CD 99 33 2B			sta adr.OBSTACLES+1,y
  3604 24D0 CA				dex
  3605
  3606 				; optimize FAIL (1, levels.inc), line = 90
  3607
  3608 24D1 A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3609 24D5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3610 24D9 A9 16			lda #$16
  3611 24DB 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3612 24DE A9 14			lda #$14
  3613 24E0 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3614 24E3 20 4D 13			jsr CALCOBSTACLEADDR
  3615 24E6 B4 17			ldy :STACKORIGIN-1,x
  3616 24E8 B5 18			lda :STACKORIGIN,x
  3617 24EA 99 32 2B			sta adr.OBSTACLES,y
  3618 24ED B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3619 24EF 99 33 2B			sta adr.OBSTACLES+1,y
  3620 24F2 CA				dex
  3621 24F3 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3622 24F7 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3623 24FB A9 0C			lda #$0C
  3624 24FD 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3625 2500 A9 14			lda #$14
  3626 2502 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3627 2505 20 4D 13			jsr CALCOBSTACLEADDR
  3628 2508 B4 17			ldy :STACKORIGIN-1,x
  3629 250A B5 18			lda :STACKORIGIN,x
  3630 250C 99 32 2B			sta adr.OBSTACLES,y
  3631 250F B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3632 2511 99 33 2B			sta adr.OBSTACLES+1,y
  3633 2514 CA				dex
  3634 2515 CA				dex
  3635 2516			@exit
  3636 					.ifdef @new
  3637 					lda <@VarData
  3638 					sta :ztmp
  3639 					lda >@VarData
  3640 					ldy #@VarDataSize-1
  3641 					jmp @FreeMem
  3642 					els
  3643 2516 60				rts						; ret
  3644 					eif
  3645 				.endl
  3646
  3647 2517			.local	SETLEVEL07					; PROCEDURE
  3648
  3649 				; optimize OK (levels.inc), line = 97
  3650
  3651 2517 A9 01			lda #$01
  3652 2519 8D 5B 2B			sta SETPLAYER.ISALIVE
  3653 251C A9 62			lda #$62
  3654 251E 8D 5A 2B			sta SETPLAYER.COLOUR
  3655 2521 A9 51			lda #$51
  3656 2523 8D 59 2B			sta SETPLAYER.HEAD
  3657 2526 A9 00			lda #$00
  3658 2528 8D 58 2B			sta SETPLAYER.BRAIN
  3659 252B A9 04			lda #$04
  3660 252D 8D 57 2B			sta SETPLAYER.DIR
  3661 2530 A9 0C			lda #$0C
  3662 2532 8D 56 2B			sta SETPLAYER.Y
  3663 2535 A9 12			lda #$12
  3664 2537 8D 55 2B			sta SETPLAYER.X
  3665 253A AD F3 2A			lda PLAYER1
  3666 253D 8D 53 2B			sta SETPLAYER.P
  3667 2540 AD F4 2A			lda PLAYER1+1
  3668 2543 8D 54 2B			sta SETPLAYER.P+1
  3669 2546 20 75 15			jsr SETPLAYER
  3670
  3671 				; optimize OK (levels.inc), line = 98
  3672
  3673 2549 A9 01			lda #$01
  3674 254B 8D 5B 2B			sta SETPLAYER.ISALIVE
  3675 254E A9 5D			lda #$5D
  3676 2550 8D 5A 2B			sta SETPLAYER.COLOUR
  3677 2553 A9 51			lda #$51
  3678 2555 8D 59 2B			sta SETPLAYER.HEAD
  3679 2558 A9 03			lda #$03
  3680 255A 8D 58 2B			sta SETPLAYER.BRAIN
  3681 255D A9 08			lda #$08
  3682 255F 8D 57 2B			sta SETPLAYER.DIR
  3683 2562 A9 17			lda #$17
  3684 2564 8D 56 2B			sta SETPLAYER.Y
  3685 2567 A9 01			lda #$01
  3686 2569 8D 55 2B			sta SETPLAYER.X
  3687 256C AD F5 2A			lda PLAYER2
  3688 256F 8D 53 2B			sta SETPLAYER.P
  3689 2572 AD F6 2A			lda PLAYER2+1
  3690 2575 8D 54 2B			sta SETPLAYER.P+1
  3691 2578 20 75 15			jsr SETPLAYER
  3692
  3693 				; optimize OK (levels.inc), line = 99
  3694
  3695 257B A9 01			lda #$01
  3696 257D 8D 5B 2B			sta SETPLAYER.ISALIVE
  3697 2580 A9 71			lda #$71
  3698 2582 8D 5A 2B			sta SETPLAYER.COLOUR
  3699 2585 A9 51			lda #$51
  3700 2587 8D 59 2B			sta SETPLAYER.HEAD
  3701 258A A9 03			lda #$03
  3702 258C 8D 58 2B			sta SETPLAYER.BRAIN
  3703 258F A9 02			lda #$02
  3704 2591 8D 57 2B			sta SETPLAYER.DIR
  3705 2594 A9 04			lda #$04
  3706 2596 8D 56 2B			sta SETPLAYER.Y
  3707 2599 A9 1E			lda #$1E
  3708 259B 8D 55 2B			sta SETPLAYER.X
  3709 259E AD F7 2A			lda PLAYER3
  3710 25A1 8D 53 2B			sta SETPLAYER.P
  3711 25A4 AD F8 2A			lda PLAYER3+1
  3712 25A7 8D 54 2B			sta SETPLAYER.P+1
  3713 25AA 20 75 15			jsr SETPLAYER
  3714
  3715 				; optimize OK (levels.inc), line = 100
  3716
  3717 25AD A9 01			lda #$01
  3718 25AF 8D 5B 2B			sta SETPLAYER.ISALIVE
  3719 25B2 A9 55			lda #$55
  3720 25B4 8D 5A 2B			sta SETPLAYER.COLOUR
  3721 25B7 A9 51			lda #$51
  3722 25B9 8D 59 2B			sta SETPLAYER.HEAD
  3723 25BC A9 02			lda #$02
  3724 25BE 8D 58 2B			sta SETPLAYER.BRAIN
  3725 25C1 A9 01			lda #$01
  3726 25C3 8D 57 2B			sta SETPLAYER.DIR
  3727 25C6 A9 15			lda #$15
  3728 25C8 8D 56 2B			sta SETPLAYER.Y
  3729 25CB A9 24			lda #$24
  3730 25CD 8D 55 2B			sta SETPLAYER.X
  3731 25D0 AD F9 2A			lda PLAYER4
  3732 25D3 8D 53 2B			sta SETPLAYER.P
  3733 25D6 AD FA 2A			lda PLAYER4+1
  3734 25D9 8D 54 2B			sta SETPLAYER.P+1
  3735 25DC 20 75 15			jsr SETPLAYER
  3736
  3737 				; optimize FAIL (1, levels.inc), line = 102
  3738
  3739 25DF E8				inx
  3740 25E0 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3741 25E4 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3742 25E6 A9 06			lda #$06
  3743 25E8 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3744 25EB A9 0A			lda #$0A
  3745 25ED 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3746 25F0 20 4D 13			jsr CALCOBSTACLEADDR
  3747 25F3 B4 17			ldy :STACKORIGIN-1,x
  3748 25F5 B5 18			lda :STACKORIGIN,x
  3749 25F7 99 32 2B			sta adr.OBSTACLES,y
  3750 25FA B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3751 25FC 99 33 2B			sta adr.OBSTACLES+1,y
  3752 25FF CA				dex
  3753 2600 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3754 2604 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3755 2608 A9 06			lda #$06
  3756 260A 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3757 260D A9 1E			lda #$1E
  3758 260F 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3759 2612 20 4D 13			jsr CALCOBSTACLEADDR
  3760 2615 B4 17			ldy :STACKORIGIN-1,x
  3761 2617 B5 18			lda :STACKORIGIN,x
  3762 2619 99 32 2B			sta adr.OBSTACLES,y
  3763 261C B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3764 261E 99 33 2B			sta adr.OBSTACLES+1,y
  3765 2621 CA				dex
  3766
  3767 				; optimize FAIL (1, levels.inc), line = 103
  3768
  3769 2622 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3770 2626 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3771 262A A9 12			lda #$12
  3772 262C 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3773 262F A9 0A			lda #$0A
  3774 2631 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3775 2634 20 4D 13			jsr CALCOBSTACLEADDR
  3776 2637 B4 17			ldy :STACKORIGIN-1,x
  3777 2639 B5 18			lda :STACKORIGIN,x
  3778 263B 99 32 2B			sta adr.OBSTACLES,y
  3779 263E B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3780 2640 99 33 2B			sta adr.OBSTACLES+1,y
  3781 2643 CA				dex
  3782 2644 A9 06 95 18			mva #$06 :STACKORIGIN,x
  3783 2648 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3784 264C A9 12			lda #$12
  3785 264E 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3786 2651 A9 1E			lda #$1E
  3787 2653 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3788 2656 20 4D 13			jsr CALCOBSTACLEADDR
  3789 2659 B4 17			ldy :STACKORIGIN-1,x
  3790 265B B5 18			lda :STACKORIGIN,x
  3791 265D 99 32 2B			sta adr.OBSTACLES,y
  3792 2660 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3793 2662 99 33 2B			sta adr.OBSTACLES+1,y
  3794 2665 CA				dex
  3795
  3796 				; optimize FAIL (1, levels.inc), line = 104
  3797
  3798 2666 A9 08 95 18			mva #$08 :STACKORIGIN,x
  3799 266A A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3800 266E A9 0C			lda #$0C
  3801 2670 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3802 2673 A9 01			lda #$01
  3803 2675 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3804 2678 20 4D 13			jsr CALCOBSTACLEADDR
  3805 267B B4 17			ldy :STACKORIGIN-1,x
  3806 267D B5 18			lda :STACKORIGIN,x
  3807 267F 99 32 2B			sta adr.OBSTACLES,y
  3808 2682 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3809 2684 99 33 2B			sta adr.OBSTACLES+1,y
  3810 2687 CA				dex
  3811 2688 A9 0A 95 18			mva #$0A :STACKORIGIN,x
  3812 268C A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3813 2690 A9 02			lda #$02
  3814 2692 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3815 2695 A9 14			lda #$14
  3816 2697 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3817 269A 20 4D 13			jsr CALCOBSTACLEADDR
  3818 269D B4 17			ldy :STACKORIGIN-1,x
  3819 269F B5 18			lda :STACKORIGIN,x
  3820 26A1 99 32 2B			sta adr.OBSTACLES,y
  3821 26A4 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3822 26A6 99 33 2B			sta adr.OBSTACLES+1,y
  3823 26A9 CA				dex
  3824
  3825 				; optimize FAIL (1, levels.inc), line = 105
  3826
  3827 26AA A9 0C 95 18			mva #$0C :STACKORIGIN,x
  3828 26AE A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3829 26B2 A9 16			lda #$16
  3830 26B4 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3831 26B7 A9 14			lda #$14
  3832 26B9 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3833 26BC 20 4D 13			jsr CALCOBSTACLEADDR
  3834 26BF B4 17			ldy :STACKORIGIN-1,x
  3835 26C1 B5 18			lda :STACKORIGIN,x
  3836 26C3 99 32 2B			sta adr.OBSTACLES,y
  3837 26C6 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3838 26C8 99 33 2B			sta adr.OBSTACLES+1,y
  3839 26CB CA				dex
  3840 26CC A9 0E 95 18			mva #$0E :STACKORIGIN,x
  3841 26D0 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3842 26D4 A9 0C			lda #$0C
  3843 26D6 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3844 26D9 A9 14			lda #$14
  3845 26DB 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3846 26DE 20 4D 13			jsr CALCOBSTACLEADDR
  3847 26E1 B4 17			ldy :STACKORIGIN-1,x
  3848 26E3 B5 18			lda :STACKORIGIN,x
  3849 26E5 99 32 2B			sta adr.OBSTACLES,y
  3850 26E8 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3851 26EA 99 33 2B			sta adr.OBSTACLES+1,y
  3852 26ED CA				dex
  3853 26EE CA				dex
  3854 26EF			@exit
  3855 					.ifdef @new
  3856 					lda <@VarData
  3857 					sta :ztmp
  3858 					lda >@VarData
  3859 					ldy #@VarDataSize-1
  3860 					jmp @FreeMem
  3861 					els
  3862 26EF 60				rts						; ret
  3863 					eif
  3864 				.endl
  3865
  3866 26F0			.local	SETLEVEL08					; PROCEDURE
  3867
  3868 				; optimize OK (levels.inc), line = 112
  3869
  3870 26F0 A9 01			lda #$01
  3871 26F2 8D 5B 2B			sta SETPLAYER.ISALIVE
  3872 26F5 A9 62			lda #$62
  3873 26F7 8D 5A 2B			sta SETPLAYER.COLOUR
  3874 26FA A9 51			lda #$51
  3875 26FC 8D 59 2B			sta SETPLAYER.HEAD
  3876 26FF A9 00			lda #$00
  3877 2701 8D 58 2B			sta SETPLAYER.BRAIN
  3878 2704 A9 08			lda #$08
  3879 2706 8D 57 2B			sta SETPLAYER.DIR
  3880 2709 A9 17			lda #$17
  3881 270B 8D 56 2B			sta SETPLAYER.Y
  3882 270E A9 01			lda #$01
  3883 2710 8D 55 2B			sta SETPLAYER.X
  3884 2713 AD F3 2A			lda PLAYER1
  3885 2716 8D 53 2B			sta SETPLAYER.P
  3886 2719 AD F4 2A			lda PLAYER1+1
  3887 271C 8D 54 2B			sta SETPLAYER.P+1
  3888 271F 20 75 15			jsr SETPLAYER
  3889
  3890 				; optimize OK (levels.inc), line = 113
  3891
  3892 2722 A9 01			lda #$01
  3893 2724 8D 5B 2B			sta SETPLAYER.ISALIVE
  3894 2727 A9 5D			lda #$5D
  3895 2729 8D 5A 2B			sta SETPLAYER.COLOUR
  3896 272C A9 51			lda #$51
  3897 272E 8D 59 2B			sta SETPLAYER.HEAD
  3898 2731 A9 03			lda #$03
  3899 2733 8D 58 2B			sta SETPLAYER.BRAIN
  3900 2736 A9 04			lda #$04
  3901 2738 8D 57 2B			sta SETPLAYER.DIR
  3902 273B A9 17			lda #$17
  3903 273D 8D 56 2B			sta SETPLAYER.Y
  3904 2740 A9 26			lda #$26
  3905 2742 8D 55 2B			sta SETPLAYER.X
  3906 2745 AD F5 2A			lda PLAYER2
  3907 2748 8D 53 2B			sta SETPLAYER.P
  3908 274B AD F6 2A			lda PLAYER2+1
  3909 274E 8D 54 2B			sta SETPLAYER.P+1
  3910 2751 20 75 15			jsr SETPLAYER
  3911
  3912 				; optimize OK (levels.inc), line = 114
  3913
  3914 2754 A9 01			lda #$01
  3915 2756 8D 5B 2B			sta SETPLAYER.ISALIVE
  3916 2759 A9 71			lda #$71
  3917 275B 8D 5A 2B			sta SETPLAYER.COLOUR
  3918 275E A9 51			lda #$51
  3919 2760 8D 59 2B			sta SETPLAYER.HEAD
  3920 2763 A9 02			lda #$02
  3921 2765 8D 58 2B			sta SETPLAYER.BRAIN
  3922 2768 8D 57 2B			sta SETPLAYER.DIR
  3923 276B A9 01			lda #$01
  3924 276D 8D 56 2B			sta SETPLAYER.Y
  3925 2770 A9 0A			lda #$0A
  3926 2772 8D 55 2B			sta SETPLAYER.X
  3927 2775 AD F7 2A			lda PLAYER3
  3928 2778 8D 53 2B			sta SETPLAYER.P
  3929 277B AD F8 2A			lda PLAYER3+1
  3930 277E 8D 54 2B			sta SETPLAYER.P+1
  3931 2781 20 75 15			jsr SETPLAYER
  3932
  3933 				; optimize OK (levels.inc), line = 115
  3934
  3935 2784 A9 01			lda #$01
  3936 2786 8D 5B 2B			sta SETPLAYER.ISALIVE
  3937 2789 A9 55			lda #$55
  3938 278B 8D 5A 2B			sta SETPLAYER.COLOUR
  3939 278E A9 51			lda #$51
  3940 2790 8D 59 2B			sta SETPLAYER.HEAD
  3941 2793 A9 04			lda #$04
  3942 2795 8D 58 2B			sta SETPLAYER.BRAIN
  3943 2798 8D 57 2B			sta SETPLAYER.DIR
  3944 279B A9 01			lda #$01
  3945 279D 8D 56 2B			sta SETPLAYER.Y
  3946 27A0 A9 26			lda #$26
  3947 27A2 8D 55 2B			sta SETPLAYER.X
  3948 27A5 AD F9 2A			lda PLAYER4
  3949 27A8 8D 53 2B			sta SETPLAYER.P
  3950 27AB AD FA 2A			lda PLAYER4+1
  3951 27AE 8D 54 2B			sta SETPLAYER.P+1
  3952 27B1 20 75 15			jsr SETPLAYER
  3953
  3954 				; optimize FAIL (1, levels.inc), line = 117
  3955
  3956 27B4 E8				inx
  3957 27B5 A9 00 95 18			mva #$00 :STACKORIGIN,x
  3958 27B9 95 28			sta :STACKORIGIN+STACKWIDTH,x
  3959 27BB A9 06			lda #$06
  3960 27BD 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3961 27C0 A9 0A			lda #$0A
  3962 27C2 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3963 27C5 20 4D 13			jsr CALCOBSTACLEADDR
  3964 27C8 B4 17			ldy :STACKORIGIN-1,x
  3965 27CA B5 18			lda :STACKORIGIN,x
  3966 27CC 99 32 2B			sta adr.OBSTACLES,y
  3967 27CF B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3968 27D1 99 33 2B			sta adr.OBSTACLES+1,y
  3969 27D4 CA				dex
  3970 27D5 A9 02 95 18			mva #$02 :STACKORIGIN,x
  3971 27D9 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3972 27DD A9 06			lda #$06
  3973 27DF 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3974 27E2 A9 1E			lda #$1E
  3975 27E4 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3976 27E7 20 4D 13			jsr CALCOBSTACLEADDR
  3977 27EA B4 17			ldy :STACKORIGIN-1,x
  3978 27EC B5 18			lda :STACKORIGIN,x
  3979 27EE 99 32 2B			sta adr.OBSTACLES,y
  3980 27F1 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3981 27F3 99 33 2B			sta adr.OBSTACLES+1,y
  3982 27F6 CA				dex
  3983
  3984 				; optimize FAIL (1, levels.inc), line = 118
  3985
  3986 27F7 A9 04 95 18			mva #$04 :STACKORIGIN,x
  3987 27FB A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3988 27FF A9 12			lda #$12
  3989 2801 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  3990 2804 A9 0A			lda #$0A
  3991 2806 8D 4E 2B			sta CALCOBSTACLEADDR.X
  3992 2809 20 4D 13			jsr CALCOBSTACLEADDR
  3993 280C B4 17			ldy :STACKORIGIN-1,x
  3994 280E B5 18			lda :STACKORIGIN,x
  3995 2810 99 32 2B			sta adr.OBSTACLES,y
  3996 2813 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  3997 2815 99 33 2B			sta adr.OBSTACLES+1,y
  3998 2818 CA				dex
  3999 2819 A9 06 95 18			mva #$06 :STACKORIGIN,x
  4000 281D A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4001 2821 A9 12			lda #$12
  4002 2823 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  4003 2826 A9 1E			lda #$1E
  4004 2828 8D 4E 2B			sta CALCOBSTACLEADDR.X
  4005 282B 20 4D 13			jsr CALCOBSTACLEADDR
  4006 282E B4 17			ldy :STACKORIGIN-1,x
  4007 2830 B5 18			lda :STACKORIGIN,x
  4008 2832 99 32 2B			sta adr.OBSTACLES,y
  4009 2835 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4010 2837 99 33 2B			sta adr.OBSTACLES+1,y
  4011 283A CA				dex
  4012
  4013 				; optimize FAIL (1, levels.inc), line = 119
  4014
  4015 283B A9 08 95 18			mva #$08 :STACKORIGIN,x
  4016 283F A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4017 2843 A9 0C			lda #$0C
  4018 2845 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  4019 2848 A9 01			lda #$01
  4020 284A 8D 4E 2B			sta CALCOBSTACLEADDR.X
  4021 284D 20 4D 13			jsr CALCOBSTACLEADDR
  4022 2850 B4 17			ldy :STACKORIGIN-1,x
  4023 2852 B5 18			lda :STACKORIGIN,x
  4024 2854 99 32 2B			sta adr.OBSTACLES,y
  4025 2857 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4026 2859 99 33 2B			sta adr.OBSTACLES+1,y
  4027 285C CA				dex
  4028 285D A9 0A 95 18			mva #$0A :STACKORIGIN,x
  4029 2861 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4030 2865 A9 02			lda #$02
  4031 2867 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  4032 286A A9 14			lda #$14
  4033 286C 8D 4E 2B			sta CALCOBSTACLEADDR.X
  4034 286F 20 4D 13			jsr CALCOBSTACLEADDR
  4035 2872 B4 17			ldy :STACKORIGIN-1,x
  4036 2874 B5 18			lda :STACKORIGIN,x
  4037 2876 99 32 2B			sta adr.OBSTACLES,y
  4038 2879 B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4039 287B 99 33 2B			sta adr.OBSTACLES+1,y
  4040 287E CA				dex
  4041
  4042 				; optimize FAIL (1, levels.inc), line = 120
  4043
  4044 287F A9 0C 95 18			mva #$0C :STACKORIGIN,x
  4045 2883 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4046 2887 A9 16			lda #$16
  4047 2889 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  4048 288C A9 14			lda #$14
  4049 288E 8D 4E 2B			sta CALCOBSTACLEADDR.X
  4050 2891 20 4D 13			jsr CALCOBSTACLEADDR
  4051 2894 B4 17			ldy :STACKORIGIN-1,x
  4052 2896 B5 18			lda :STACKORIGIN,x
  4053 2898 99 32 2B			sta adr.OBSTACLES,y
  4054 289B B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4055 289D 99 33 2B			sta adr.OBSTACLES+1,y
  4056 28A0 CA				dex
  4057 28A1 A9 0E 95 18			mva #$0E :STACKORIGIN,x
  4058 28A5 A9 00 95 28			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4059 28A9 A9 0C			lda #$0C
  4060 28AB 8D 4F 2B			sta CALCOBSTACLEADDR.Y
  4061 28AE A9 14			lda #$14
  4062 28B0 8D 4E 2B			sta CALCOBSTACLEADDR.X
  4063 28B3 20 4D 13			jsr CALCOBSTACLEADDR
  4064 28B6 B4 17			ldy :STACKORIGIN-1,x
  4065 28B8 B5 18			lda :STACKORIGIN,x
  4066 28BA 99 32 2B			sta adr.OBSTACLES,y
  4067 28BD B5 28			lda :STACKORIGIN+STACKWIDTH,x
  4068 28BF 99 33 2B			sta adr.OBSTACLES+1,y
  4069 28C2 CA				dex
  4070 28C3 CA				dex
  4071 28C4			@exit
  4072 					.ifdef @new
  4073 					lda <@VarData
  4074 					sta :ztmp
  4075 					lda >@VarData
  4076 					ldy #@VarDataSize-1
  4077 					jmp @FreeMem
  4078 					els
  4079 28C4 60				rts						; ret
  4080 					eif
  4081 				.endl
  4082
  4083 28C5			.local	INITPLAYFIELD					; PROCEDURE
  4084
  4085 				; optimize OK (init.inc), line = 5
  4086
  4087 28C5 A9 1F			lda #$1F
  4088 28C7 8D 15 FF			sta BACKGROUND
  4089 28CA A9 00			lda #$00
  4090 28CC 8D 19 FF			sta BOREDER
  4091
  4092 				; optimize OK (init.inc), line = 6
  4093
  4094 28CF A9 20			lda #$20
  4095 28D1 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
  4096 28D3 A9 C0			lda #$C0
  4097 28D5 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
  4098 28D7 A9 03			lda #$03
  4099 28D9 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
  4100 28DB A9 00			lda #$00
  4101 28DD 85 08			sta SYSTEM.FILLCHAR_0056.A
  4102 28DF A9 0C			lda #$0C
  4103 28E1 85 09			sta SYSTEM.FILLCHAR_0056.A+1
  4104 28E3 20 1F 11			jsr SYSTEM.FILLCHAR_0056
  4105
  4106 				; optimize OK (init.inc), line = 8
  4107
  4108 28E6 A9 27			lda #$27
  4109 28E8 85 58			sta T0B
  4110
  4111 28EA			l_0F18
  4112 				; --- ForToDoCondition
  4113
  4114 				; optimize OK (init.inc), line = 9
  4115
  4116 28EA A4 58			ldy T0B
  4117 28EC A9 A0			lda #$A0
  4118 28EE 99 00 0C			sta $0C00,y
  4119
  4120 				; optimize OK (init.inc), line = 10
  4121
  4122 28F1 99 C0 0F			sta $0FC0,y
  4123
  4124 				; optimize OK (init.inc), line = 11
  4125
  4126 28F4 A9 41			lda #$41
  4127 28F6 99 00 08			sta $0800,y
  4128
  4129 				; optimize OK (init.inc), line = 12
  4130
  4131 28F9 99 C0 0B			sta $0BC0,y
  4132
  4133 				; --- ForToDoEpilog
  4134 28FC C6 58			dec T0B
  4135 28FE 10 EA			jpl l_0F18
  4136 2900			l_0F26
  4137
  4138 				; optimize OK (init.inc), line = 15
  4139
  4140 2900 A9 18			lda #$18
  4141 2902 85 58			sta T0B
  4142
  4143 2904			l_0F58
  4144 				; --- ForToDoCondition
  4145 2904 A5 58			lda T0B
  4146 2906 C9 01			cmp #$01
  4147 2908 90 3A			jcc l_0F66
  4148
  4149 				; optimize OK (init.inc), line = 16
  4150
  4151 290A 0A				asl @
  4152 290B A8				tay
  4153 290C A9 FF			lda #$FF
  4154 290E 18 79 0E 10			add adr.MUL40,y
  4155 2912 85 12			sta :bp2
  4156 2914 A9 0B			lda #$0B
  4157 2916 79 0F 10			adc adr.MUL40+1,y
  4158 2919 85 13			sta :bp2+1
  4159 291B A0 00			ldy #$00
  4160 291D A9 A0			lda #$A0
  4161 291F 91 12			sta (:bp2),y
  4162 2921 C8				iny
  4163 2922 91 12			sta (:bp2),y
  4164
  4165 				; optimize OK (init.inc), line = 17
  4166
  4167 2924 A5 58			lda T0B
  4168 2926 0A				asl @
  4169 2927 A8				tay
  4170 2928 A9 FF			lda #$FF
  4171 292A 18 79 0E 10			add adr.MUL40,y
  4172 292E 85 12			sta :bp2
  4173 2930 A9 07			lda #$07
  4174 2932 79 0F 10			adc adr.MUL40+1,y
  4175 2935 85 13			sta :bp2+1
  4176 2937 A0 00			ldy #$00
  4177 2939 A9 41			lda #$41
  4178 293B 91 12			sta (:bp2),y
  4179 293D C8				iny
  4180 293E 91 12			sta (:bp2),y
  4181
  4182 				; --- ForToDoEpilog
  4183 2940 C6 58			dec T0B
  4184 2942 10 C0			jpl l_0F58
  4185 2944			l_0F66
  4186
  4187 				; optimize OK (init.inc), line = 20
  4188
  4189 2944 A9 07			lda #$07
  4190 2946 85 59			sta I0B
  4191
  4192 2948			l_0F8A
  4193 				; --- ForToDoCondition
  4194 2948 A5 59			lda I0B
  4195 294A 0A				asl @
  4196 294B A8				tay
  4197 294C A9 7E			lda #$7E
  4198 294E 99 32 2B			sta adr.OBSTACLES,y
  4199 2951 A9 00			lda #$00
  4200 2953 99 33 2B			sta adr.OBSTACLES+1,y
  4201
  4202 				; --- ForToDoEpilog
  4203 2956 C6 59			dec I0B
  4204 2958 10 EE			jpl l_0F8A
  4205 295A			l_0F98
  4206
  4207 				; ------------------------------------------------------------
  4208
  4209 = 0000			@FORTMP_0F15	= $00
  4210 = 0001			@FORTMP_0F55	= $01
  4211 = 0000			@FORTMP_0F87	= $00
  4212 295A			@exit
  4213 					.ifdef @new
  4214 					lda <@VarData
  4215 					sta :ztmp
  4216 					lda >@VarData
  4217 					ldy #@VarDataSize-1
  4218 					jmp @FreeMem
  4219 					els
  4220 295A 60				rts						; ret
  4221 					eif
  4222 				.endl
  4223
  4224 295B			.local	INITPLAYERS					; PROCEDURE
  4225
  4226 				; optimize OK (init.inc), line = 27
  4227
  4228 295B A9 FF			lda #$FF
  4229 295D 85 5A			sta ALIVE
  4230
  4231 				; optimize OK (init.inc), line = 28
  4232
  4233 295F A9 00			lda #$00
  4234 2961 8D 19 2B			sta PLAYER1.ISALIVE
  4235 2964 8D 21 2B			sta PLAYER2.ISALIVE
  4236
  4237 				; optimize OK (init.inc), line = 29
  4238
  4239 2967 8D 29 2B			sta PLAYER3.ISALIVE
  4240 296A 8D 31 2B			sta PLAYER4.ISALIVE
  4241 296D			@exit
  4242 					.ifdef @new
  4243 					lda <@VarData
  4244 					sta :ztmp
  4245 					lda >@VarData
  4246 					ldy #@VarDataSize-1
  4247 					jmp @FreeMem
  4248 					els
  4249 296D 60				rts						; ret
  4250 					eif
  4251 				.endl
  4252
  4253 296E			.local	INITSCORE					; PROCEDURE
  4254
  4255 				; optimize OK (init.inc), line = 36
  4256
  4257 296E A9 30			lda #$30
  4258 2970 8D 18 2B			sta PLAYER1.SCORE
  4259 2973 8D 20 2B			sta PLAYER2.SCORE
  4260
  4261 				; optimize OK (init.inc), line = 37
  4262
  4263 2976 8D 28 2B			sta PLAYER3.SCORE
  4264 2979 8D 30 2B			sta PLAYER4.SCORE
  4265 297C			@exit
  4266 					.ifdef @new
  4267 					lda <@VarData
  4268 					sta :ztmp
  4269 					lda >@VarData
  4270 					ldy #@VarDataSize-1
  4271 					jmp @FreeMem
  4272 					els
  4273 297C 60				rts						; ret
  4274 					eif
  4275 				.endl
  4276
  4277 297D			.local	INITARENA					; PROCEDURE
  4278
  4279 				; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44
  4280
  4281 297D 20 C5 28			jsr INITPLAYFIELD
  4282 2980 20 5B 29			jsr INITPLAYERS
  4283
  4284 				; optimize OK (init.inc), line = 46
  4285
  4286 2983 AD 10 2B			lda LEVEL
  4287 2986 8D 66 2B			sta @CASETMP_0008
  4288 2989 C9 00			cmp #$00
  4289 298B D0 06			jne l_0FE1
  4290 298D			@
  4291
  4292 				; optimize FAIL ('SETLEVEL00', init.inc), line = 47
  4293
  4294 298D 20 32 1B			jsr SETLEVEL00
  4295 2990 4C E0 29			jmp a_0008
  4296 2993			l_0FE1
  4297 2993 C9 01			cmp #$01
  4298 2995 D0 06			jne l_0FEB
  4299 2997			@
  4300
  4301 				; optimize FAIL ('SETLEVEL01', init.inc), line = 48
  4302
  4303 2997 20 63 1C			jsr SETLEVEL01
  4304 299A 4C E0 29			jmp a_0008
  4305 299D			l_0FEB
  4306 299D C9 02			cmp #$02
  4307 299F D0 06			jne l_0FF5
  4308 29A1			@
  4309
  4310 				; optimize FAIL ('SETLEVEL02', init.inc), line = 49
  4311
  4312 29A1 20 94 1D			jsr SETLEVEL02
  4313 29A4 4C E0 29			jmp a_0008
  4314 29A7			l_0FF5
  4315 29A7 C9 03			cmp #$03
  4316 29A9 D0 06			jne l_0FFF
  4317 29AB			@
  4318
  4319 				; optimize FAIL ('SETLEVEL03', init.inc), line = 50
  4320
  4321 29AB 20 C5 1E			jsr SETLEVEL03
  4322 29AE 4C E0 29			jmp a_0008
  4323 29B1			l_0FFF
  4324 29B1 C9 04			cmp #$04
  4325 29B3 D0 06			jne l_1009
  4326 29B5			@
  4327
  4328 				; optimize FAIL ('SETLEVEL04', init.inc), line = 51
  4329
  4330 29B5 20 18 20			jsr SETLEVEL04
  4331 29B8 4C E0 29			jmp a_0008
  4332 29BB			l_1009
  4333 29BB C9 05			cmp #$05
  4334 29BD D0 06			jne l_1013
  4335 29BF			@
  4336
  4337 				; optimize FAIL ('SETLEVEL05', init.inc), line = 52
  4338
  4339 29BF 20 8D 21			jsr SETLEVEL05
  4340 29C2 4C E0 29			jmp a_0008
  4341 29C5			l_1013
  4342 29C5 C9 06			cmp #$06
  4343 29C7 D0 06			jne l_101D
  4344 29C9			@
  4345
  4346 				; optimize FAIL ('SETLEVEL06', init.inc), line = 53
  4347
  4348 29C9 20 42 23			jsr SETLEVEL06
  4349 29CC 4C E0 29			jmp a_0008
  4350 29CF			l_101D
  4351 29CF C9 07			cmp #$07
  4352 29D1 D0 06			jne l_1027
  4353 29D3			@
  4354
  4355 				; optimize FAIL ('SETLEVEL07', init.inc), line = 54
  4356
  4357 29D3 20 17 25			jsr SETLEVEL07
  4358 29D6 4C E0 29			jmp a_0008
  4359 29D9			l_1027
  4360 29D9 C9 08			cmp #$08
  4361 29DB D0 03			jne l_1031
  4362 29DD			@
  4363
  4364 				; optimize FAIL ('SETLEVEL08', init.inc), line = 55
  4365
  4366 29DD 20 F0 26			jsr SETLEVEL08
  4367 29E0			l_1031
  4368 29E0			a_0008
  4369
  4370 				; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58
  4371
  4372 29E0 20 70 13			jsr SAVEOBSTACLES
  4373 29E3 20 18 13			jsr ANIMATEOBSTACLES
  4374 29E6 20 E9 11			jsr SHOWSCORE
  4375
  4376 				; ------------------------------------------------------------
  4377
  4378 = 2B66			@CASETMP_0008	= DATAORIGIN+$0066
  4379
  4380 = 2B66			@VarData	= @CASETMP_0008
  4381 = 0001			@VarDataSize	= 1
  4382
  4383 29E9			@exit
  4384 					.ifdef @new
  4385 					lda <@VarData
  4386 					sta :ztmp
  4387 					lda >@VarData
  4388 					ldy #@VarDataSize-1
  4389 					jmp @FreeMem
  4390 					els
  4391 29E9 60				rts						; ret
  4392 					eif
  4393 				.endl
  4394
  4395 29EA			.local	PLAYERMOVE					; PROCEDURE
  4396
  4397 				; optimize OK (main.pas), line = 15
  4398
  4399 29EA AC EF 2A 84 12 AC + 	mwy PLY :bp2
  4400 29F4 A0 07			ldy #PLY.ISALIVE-DATAORIGIN
  4401 29F6 B1 12			lda (:bp2),y
  4402 29F8 F0 50			jeq l_1052
  4403
  4404 				; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17
  4405
  4406 29FA 20 83 12			jsr CHECKAVAILDIR
  4407
  4408 				; optimize OK (main.pas), line = 18
  4409
  4410 29FD A5 5C			lda AVAILDIR
  4411 29FF D0 06			jne l_1066
  4412
  4413 				; optimize FAIL ('DRAWBUSTEDPLAYER', main.pas), line = 19
  4414
  4415 2A01 20 30 15			jsr DRAWBUSTEDPLAYER
  4416 2A04 4C 4A 2A			jmp l_1071
  4417 2A07			l_1066
  4418
  4419 				; optimize OK (main.pas), line = 21
  4420
  4421 2A07 AC EF 2A 84 12 AC + 	mwy PLY :bp2
  4422 2A11 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  4423 2A13 B1 12			lda (:bp2),y
  4424 2A15 8D 67 2B			sta @CASETMP_0009
  4425 2A18 C9 00			cmp #$00
  4426 2A1A D0 06			jne l_107C
  4427 2A1C			@
  4428
  4429 				; optimize FAIL ('HUMAN', main.pas), line = 22
  4430
  4431 2A1C 20 88 16			jsr HUMAN
  4432 2A1F 4C 47 2A			jmp a_0009
  4433 2A22			l_107C
  4434 2A22 C9 01			cmp #$01
  4435 2A24 D0 06			jne l_1086
  4436 2A26			@
  4437
  4438 				; optimize FAIL ('AISTRAIGHT', main.pas), line = 23
  4439
  4440 2A26 20 30 17			jsr AISTRAIGHT
  4441 2A29 4C 47 2A			jmp a_0009
  4442 2A2C			l_1086
  4443 2A2C C9 02			cmp #$02
  4444 2A2E D0 06			jne l_1090
  4445 2A30			@
  4446
  4447 				; optimize FAIL ('AISAPPER', main.pas), line = 24
  4448
  4449 2A30 20 B5 17			jsr AISAPPER
  4450 2A33 4C 47 2A			jmp a_0009
  4451 2A36			l_1090
  4452 2A36 C9 03			cmp #$03
  4453 2A38 D0 06			jne l_109A
  4454 2A3A			@
  4455
  4456 				; optimize FAIL ('AIBULLY', main.pas), line = 25
  4457
  4458 2A3A 20 0F 1A			jsr AIBULLY
  4459 2A3D 4C 47 2A			jmp a_0009
  4460 2A40			l_109A
  4461 2A40 C9 04			cmp #$04
  4462 2A42 D0 03			jne l_10A4
  4463 2A44			@
  4464
  4465 				; optimize FAIL ('AIMIRROR', main.pas), line = 26
  4466
  4467 2A44 20 DD 1A			jsr AIMIRROR
  4468 2A47			l_10A4
  4469 2A47			a_0009
  4470
  4471 				; optimize FAIL ('DRAWPLAYER', main.pas), line = 29
  4472
  4473 2A47 20 B4 13			jsr DRAWPLAYER
  4474 2A4A			l_1071
  4475 2A4A			l_1052
  4476
  4477 				; ------------------------------------------------------------
  4478
  4479 = 2B67			@CASETMP_0009	= DATAORIGIN+$0067
  4480
  4481 = 2B67			@VarData	= @CASETMP_0009
  4482 = 0001			@VarDataSize	= 1
  4483
  4484 2A4A			@exit
  4485 					.ifdef @new
  4486 					lda <@VarData
  4487 					sta :ztmp
  4488 					lda >@VarData
  4489 					ldy #@VarDataSize-1
  4490 					jmp @FreeMem
  4491 					els
  4492 2A4A 60				rts						; ret
  4493 					eif
  4494 				.endl
  4495
  4496 2A4B			.local	MAINLOOP					; PROCEDURE
  4497
  4498 				; optimize FAIL ('INITARENA', main.pas), line = 39
  4499
  4500 2A4B 20 7D 29			jsr INITARENA
  4501 2A4E 20 E9 15			jsr STARTSCREEN
  4502
  4503 				; --- RepeatUntilProlog
  4504 2A51			l_10B8
  4505
  4506 				; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 42
  4507
  4508 2A51 20 23 11			jsr SYSTEM.PAUSE_006B
  4509 2A54 AD F3 2A			lda PLAYER1
  4510 2A57 8D EF 2A			sta PLY
  4511 2A5A AD F4 2A			lda PLAYER1+1
  4512 2A5D 8D F0 2A			sta PLY+1
  4513 2A60 20 EA 29			jsr PLAYERMOVE
  4514
  4515 				; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44
  4516
  4517 2A63 20 18 13			jsr ANIMATEOBSTACLES
  4518
  4519 				; optimize OK (main.pas), line = 46
  4520
  4521 2A66 A9 02			lda #$02
  4522 2A68 8D 0C 2B			sta SYSTEM.PAUSE_006C.N
  4523 2A6B A9 00			lda #$00
  4524 2A6D 8D 0D 2B			sta SYSTEM.PAUSE_006C.N+1
  4525 2A70 20 2A 11			jsr SYSTEM.PAUSE_006C
  4526
  4527 				; optimize OK (main.pas), line = 47
  4528
  4529 2A73 AD F5 2A			lda PLAYER2
  4530 2A76 8D EF 2A			sta PLY
  4531 2A79 AD F6 2A			lda PLAYER2+1
  4532 2A7C 8D F0 2A			sta PLY+1
  4533 2A7F 20 EA 29			jsr PLAYERMOVE
  4534
  4535 				; optimize OK (main.pas), line = 48
  4536
  4537 2A82 AD F7 2A			lda PLAYER3
  4538 2A85 8D EF 2A			sta PLY
  4539 2A88 AD F8 2A			lda PLAYER3+1
  4540 2A8B 8D F0 2A			sta PLY+1
  4541 2A8E 20 EA 29			jsr PLAYERMOVE
  4542
  4543 				; optimize OK (main.pas), line = 49
  4544
  4545 2A91 AD F9 2A			lda PLAYER4
  4546 2A94 8D EF 2A			sta PLY
  4547 2A97 AD FA 2A			lda PLAYER4+1
  4548 2A9A 8D F0 2A			sta PLY+1
  4549 2A9D 20 EA 29			jsr PLAYERMOVE
  4550
  4551 				; optimize FAIL ('ISONELEFT', main.pas), line = 50
  4552
  4553 2AA0 20 69 16			jsr ISONELEFT
  4554 2AA3 CA				dex
  4555 2AA4 B5 19			lda :STACKORIGIN+1,x
  4556 2AA6 F0 A9			jeq l_10B8
  4557
  4558 				; optimize FAIL ('UPDATESCORE', main.pas), line = 52
  4559
  4560 2AA8 20 62 12			jsr UPDATESCORE
  4561 2AAB A9 64			lda #$64
  4562 2AAD 8D 0C 2B			sta SYSTEM.PAUSE_006C.N
  4563 2AB0 A9 00			lda #$00
  4564 2AB2 8D 0D 2B			sta SYSTEM.PAUSE_006C.N+1
  4565 2AB5 20 2A 11			jsr SYSTEM.PAUSE_006C
  4566 2AB8 20 D9 15			jsr NEXTLEVEL
  4567 2ABB			@exit
  4568 					.ifdef @new
  4569 					lda <@VarData
  4570 					sta :ztmp
  4571 					lda >@VarData
  4572 					ldy #@VarDataSize-1
  4573 					jmp @FreeMem
  4574 					els
  4575 2ABB 60				rts						; ret
  4576 					eif
  4577 				.endl
  4578 2ABC			l_0007
  4579
  4580 				; --- RepeatUntilProlog
  4581 2ABC			l_10DF
  4582
  4583 				; optimize FAIL ('INITSCORE', main.pas), line = 59
  4584
  4585 2ABC 20 6E 29			jsr INITSCORE
  4586 2ABF A9 00			lda #$00
  4587 2AC1 8D 11 2B			sta GAMEOVER
  4588 2AC4 A9 01			lda #$01
  4589 2AC6 8D 10 2B			sta LEVEL
  4590
  4591 				; --- RepeatUntilProlog
  4592 2AC9			l_10E9
  4593
  4594 				; optimize FAIL ('MAINLOOP', main.pas), line = 61
  4595
  4596 2AC9 20 4B 2A			jsr MAINLOOP
  4597 2ACC 20 2C 16			jsr ISGAMEOVER
  4598 2ACF CA				dex
  4599 2AD0 B5 19			lda :STACKORIGIN+1,x
  4600 2AD2 F0 F5			jeq l_10E9
  4601
  4602 				; optimize FAIL ('SHOWSCORE', main.pas), line = 63
  4603
  4604 2AD4 20 E9 11			jsr SHOWSCORE
  4605 2AD7 A9 C8			lda #$C8
  4606 2AD9 8D 0C 2B			sta SYSTEM.PAUSE_006C.N
  4607 2ADC A9 00			lda #$00
  4608 2ADE 8D 0D 2B			sta SYSTEM.PAUSE_006C.N+1
  4609 2AE1 20 2A 11			jsr SYSTEM.PAUSE_006C
  4610
  4611 				; optimize OK (main.pas), line = 64
  4612
  4613 2AE4 4C BC 2A			jmp l_10DF
  4614
  4615 				; ------------------------------------------------------------
  4616
  4617 = 0800			ATTRIBUTE_ADDR	= $0800
  4618 = 0C00			SCREEN_ADDR	= $0C00
  4619 = 001F			BACKGROUND_COLOUR	= $1F
  4620 = 0000			BOREDER_COLOUR	= $00
  4621 = 0009			VICTORIES	= $09
  4622 = 0005			LOOK_AHEAD	= $05
  4623 = 007E			TRASH	= $7E
  4624 = 0020			EMPTY	= $20
  4625 = 00A0			WALL	= $A0
  4626 = 0041			WALL_COLOUR	= $41
  4627 = 0030			ZERO	= $30
  4628 = 0056			OBSTACLE_1	= $56
  4629 = 005B			OBSTACLE_2	= $5B
  4630 = 0035			OBST_COLOUR	= $35
  4631 = 0007			OBST_QUANTITY	= $07
  4632 = 0051			PLY_HEAD	= $51
  4633 = 002A			PLY_CRASH	= $2A
  4634 = 0057			PLY_BUSTED	= $57
  4635 = 0042			PLY_TAIL_UD	= $42
  4636 = 0040			PLY_TAIL_LR	= $40
  4637 = 007D			PLY_TAIL_RD	= $7D
  4638 = 006E			PLY_TAIL_RU	= $6E
  4639 = 006D			PLY_TAIL_LD	= $6D
  4640 = 0070			PLY_TAIL_LU	= $70
  4641 = 0062			PLY1_COLOUR	= $62
  4642 = 005D			PLY2_COLOUR	= $5D
  4643 = 0071			PLY3_COLOUR	= $71
  4644 = 0055			PLY4_COLOUR	= $55
  4645 = 0000			PLY_CTRL	= $00
  4646 = 0001			AI_STRAIGHT	= $01
  4647 = 0002			AI_SAPPER	= $02
  4648 = 0003			AI_BULLY	= $03
  4649 = 0004			AI_MIRROR	= $04
  4650 = 0001			JOY_UP	= $01
  4651 = 0002			JOY_DOWN	= $02
  4652 = 0004			JOY_LEFT	= $04
  4653 = 0008			JOY_RIGHT	= $08
  4654 = 0040			JOY_FIRE	= $40
  4655 = 0002			JOY_SELECT_1	= $02
  4656 = 0004			JOY_SELECT_2	= $04
  4657 = 100E			adr.MUL40	= CODEORIGIN+$0000
  4658 2AE7			.var MUL40	= adr.MUL40 .word
  4659 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  4660 2AE7			.var DIRECTION	= adr.DIRECTION .word
  4661 = FD30			KEYSCAN	= $FD30
  4662 = FF08			JOY	= $FF08
  4663 = FF15			BACKGROUND	= $FF15
  4664 = FF19			BOREDER	= $FF19
  4665 = 0058			T0B	= $58
  4666 = 0059			I0B	= $59
  4667 = 005A			ALIVE	= $5A
  4668 = 005B			NEWDIR	= $5B
  4669 = 005C			AVAILDIR	= $5C
  4670 = 005D			T0W	= $5D
  4671 = 005F			adr.PLY	= $5F
  4672 2AE7			.var PLY	= adr.PLY .word
  4673 = 2B00			PLY.X	= DATAORIGIN+$0000
  4674 = 2B01			PLY.Y	= DATAORIGIN+$0001
  4675 = 2B02			PLY.HEAD	= DATAORIGIN+$0002
  4676 = 2B03			PLY.COLOUR	= DATAORIGIN+$0003
  4677 = 2B04			PLY.DIR	= DATAORIGIN+$0004
  4678 = 2B05			PLY.BRAIN	= DATAORIGIN+$0005
  4679 = 2B06			PLY.SCORE	= DATAORIGIN+$0006
  4680 = 2B07			PLY.ISALIVE	= DATAORIGIN+$0007
  4681 = 0061			adr.TMPPLY	= $61
  4682 2AE7			.var TMPPLY	= adr.TMPPLY .word
  4683 = 2B00			TMPPLY.X	= DATAORIGIN+$0000
  4684 = 2B01			TMPPLY.Y	= DATAORIGIN+$0001
  4685 = 2B02			TMPPLY.HEAD	= DATAORIGIN+$0002
  4686 = 2B03			TMPPLY.COLOUR	= DATAORIGIN+$0003
  4687 = 2B04			TMPPLY.DIR	= DATAORIGIN+$0004
  4688 = 2B05			TMPPLY.BRAIN	= DATAORIGIN+$0005
  4689 = 2B06			TMPPLY.SCORE	= DATAORIGIN+$0006
  4690 = 2B07			TMPPLY.ISALIVE	= DATAORIGIN+$0007
  4691 = 0063			JOYSTATUS	= $63
  4692 = 2B10			LEVEL	= DATAORIGIN+$0010
  4693 = 2B11			GAMEOVER	= DATAORIGIN+$0011
  4694 = 2B12			adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
  4695 2AE7			.var PLAYER1	= adr.PLAYER1 .word
  4696 = 2B12			PLAYER1.X	= DATAORIGIN+$0012
  4697 = 2B13			PLAYER1.Y	= DATAORIGIN+$0013
  4698 = 2B14			PLAYER1.HEAD	= DATAORIGIN+$0014
  4699 = 2B15			PLAYER1.COLOUR	= DATAORIGIN+$0015
  4700 = 2B16			PLAYER1.DIR	= DATAORIGIN+$0016
  4701 = 2B17			PLAYER1.BRAIN	= DATAORIGIN+$0017
  4702 = 2B18			PLAYER1.SCORE	= DATAORIGIN+$0018
  4703 = 2B19			PLAYER1.ISALIVE	= DATAORIGIN+$0019
  4704 = 2B1A			adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
  4705 2AE7			.var PLAYER2	= adr.PLAYER2 .word
  4706 = 2B1A			PLAYER2.X	= DATAORIGIN+$001A
  4707 = 2B1B			PLAYER2.Y	= DATAORIGIN+$001B
  4708 = 2B1C			PLAYER2.HEAD	= DATAORIGIN+$001C
  4709 = 2B1D			PLAYER2.COLOUR	= DATAORIGIN+$001D
  4710 = 2B1E			PLAYER2.DIR	= DATAORIGIN+$001E
  4711 = 2B1F			PLAYER2.BRAIN	= DATAORIGIN+$001F
  4712 = 2B20			PLAYER2.SCORE	= DATAORIGIN+$0020
  4713 = 2B21			PLAYER2.ISALIVE	= DATAORIGIN+$0021
  4714 = 2B22			adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
  4715 2AE7			.var PLAYER3	= adr.PLAYER3 .word
  4716 = 2B22			PLAYER3.X	= DATAORIGIN+$0022
  4717 = 2B23			PLAYER3.Y	= DATAORIGIN+$0023
  4718 = 2B24			PLAYER3.HEAD	= DATAORIGIN+$0024
  4719 = 2B25			PLAYER3.COLOUR	= DATAORIGIN+$0025
  4720 = 2B26			PLAYER3.DIR	= DATAORIGIN+$0026
  4721 = 2B27			PLAYER3.BRAIN	= DATAORIGIN+$0027
  4722 = 2B28			PLAYER3.SCORE	= DATAORIGIN+$0028
  4723 = 2B29			PLAYER3.ISALIVE	= DATAORIGIN+$0029
  4724 = 2B2A			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  4725 2AE7			.var PLAYER4	= adr.PLAYER4 .word
  4726 = 2B2A			PLAYER4.X	= DATAORIGIN+$002A
  4727 = 2B2B			PLAYER4.Y	= DATAORIGIN+$002B
  4728 = 2B2C			PLAYER4.HEAD	= DATAORIGIN+$002C
  4729 = 2B2D			PLAYER4.COLOUR	= DATAORIGIN+$002D
  4730 = 2B2E			PLAYER4.DIR	= DATAORIGIN+$002E
  4731 = 2B2F			PLAYER4.BRAIN	= DATAORIGIN+$002F
  4732 = 2B30			PLAYER4.SCORE	= DATAORIGIN+$0030
  4733 = 2B31			PLAYER4.ISALIVE	= DATAORIGIN+$0031
  4734 = 2B32			adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
  4735 2AE7			.var OBSTACLES	= adr.OBSTACLES .word
  4736 2AE7			@exit
  4737
  4738 2AE7 A2 00		@halt	ldx #$00
  4739 2AE9 9A				txs
  4740
  4741 2AEA 60				rts
  4742
  4743 				; ------------------------------------------------------------
  4744
  4745 				; ------------------------------------------------------------
  4746
  4747 2AEB			.local	@DEFINES
  4748 2AEB			C4P
  4749 				.endl
  4750
  4751 2AEB			.local	@RESOURCE
  4752 				.endl
  4753
  4754 = 2AEB 0E 10		MUL40
  4754 = 2AED 40 10		DIRECTION
  4754 = 2AEF 5F 00		PLY
  4754 = 2AF1 61 00		TMPPLY
  4754 = 2AF3 12 2B		PLAYER1
  4754 = 2AF5 1A 2B		PLAYER2
  4754 = 2AF7 22 2B		PLAYER3
  4754 = 2AF9 2A 2B		PLAYER4
  4754 = 2AFB 32 2B		OBSTACLES
  4754 				.endl							; MAIN
  4755
  4756 				; ------------------------------------------------------------
  4757 				; ------------------------------------------------------------
  4758
  4759 				.macro	UNITINITIALIZATION
  4760 				
  4761 					.ifdef MAIN.SYSTEM.@UnitInit
  4762 					jsr MAIN.SYSTEM.@UnitInit
  4763 					eif
  4764 				.endm
  4765
  4766 				; ------------------------------------------------------------
  4767
  4768 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4769 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4769 				SYSTEM: $10D5..$1177
  4770 					eif
  4771
  4772 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4772 				CODE: $100E..$2AEA
  4773
  4774 				; ------------------------------------------------------------
  4775
  4776 2AFD				.align $04
  4777
  4778 2B00			DATAORIGIN
  4779 2B00 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  4780
  4781 = 0006			VARINITSIZE	= *-DATAORIGIN
  4782 = 0068			VARDATASIZE	= 104
  4783
  4784 = 2B68			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4785
  4786 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4786 				DATA: $2B00..$2B68
  4787
  4788 				; ------------------------------------------------------------
  4789
  4790 				.macro	STATICDATA
  4791 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  4792 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  4793 				.by  $C0 $03 $01 $02 $04 $08
  4794 				.endm
  4795
  4796 					end
