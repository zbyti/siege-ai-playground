mads 2.1.1
   129 					opt l+
    98
    99 				.print 'ZPAGE: ',psptr,'..',zpend-1
    99 				ZPAGE: $0002..$0057
   100
   101 				.print 'RTLIB: ',RTLIB,'..',*-1
   101 				RTLIB: $1044..$109F
   102
   103 				; ------------------------------------------------------------
   104
   105 10A0			START
   106 10A0 BA				tsx
   107 10A1 8E A1 16			stx MAIN.@halt+1
   108
   109 					.ifdef fmulinit
   110 					fmulinit
   111 					eif
   112
   113 = 0036			VLEN	= VARDATASIZE-VARINITSIZE
   114 = 16B6			VADR	= DATAORIGIN+VARINITSIZE
   115
   116 					ift VADR > $BFFF
   117 					ert 'Invalid memory address range ',VADR
   118 					eli (VLEN>0) && (VLEN<=256)
   119 10A4 A2 CA			ldx #256-VLEN
   120 10A6 A9 00			lda #$00
   121 10A8 9D EC 15 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   122 					eli VLEN>0
   123 					@fill #VADR #VLEN #$00
   124 					eif
   125
   126 10AE A9 EC 85 02 A9 16 + 	mwa #PROGRAMSTACK psptr
   127
   128 10B6 A2 00			ldx #$00
   129 10B8 86 10			stx bp						; BP = 0
   130
   131 10BA CA				dex						; X = 255
   132
   133 10BB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
Source: main.a65
   134
   135 10BB			.local	MAIN						; PROCEDURE
   136
   137 10BB 4C F2 15			jmp l_0007
   138
   139 				; ------------------------------------------------------------
   140
   141 10BE			.local	SYSTEM						; UNIT
   142
   143 10BE			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   144
   145 				; ------------------------------------------------------------
   146
   147 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   148 				; as Pointer
   149 10BE B5 18			lda :STACKORIGIN,x
   150 10C0 85 08			sta A
   151 10C2 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   152 10C4 85 09			sta A+1
   153 10C6 CA				dex
   154
   155 				; ---------------------  ASM Block 001  ---------------------
   156
   157 10C7 A0 00			ldy #0
   158 10C9 B1 08 8D BB 16		mva (edx),y Result
   159
   160 10CE			@exit
   161
   162 				; ------------------------------------------------------------
   163
   164 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   165 				; as Pointer
   166
   167 10CE E8				inx
   168 10CF AD BB 16 95 18		mva RESULT :STACKORIGIN,x
   169
   170 					.ifdef @new
   171 					lda <@VarData
   172 					sta :ztmp
   173 					lda >@VarData
   174 					ldy #@VarDataSize-1
   175 					jmp @FreeMem
   176 					eif
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0008			A	= edx
   181 = 16BB			RESULT	= DATAORIGIN+$000B
   182
   183 = 16BB			@VarData	= RESULT
   184 = 0001			@VarDataSize	= 1
   185
   186 10D4 60				rts						; ret
   187 				.endl
   188
   189 10D5			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   194 				; as Pointer
   195 10D5 B5 18			lda :STACKORIGIN,x
   196 10D7 85 0C			sta VALUE
   197 10D9 CA				dex
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   202 				; as Pointer
   203 10DA B5 18			lda :STACKORIGIN,x
   204 10DC 85 08			sta A
   205 10DE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   206 10E0 85 09			sta A+1
   207 10E2 CA				dex
   208
   209 				; ---------------------  ASM Block 016  ---------------------
   210
   211 10E3 A0 00			ldy #0
   212 10E5 A5 0C 91 08			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0008			A	= edx
   218 = 000C			VALUE	= ecx
   219 10E9			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					els
   227 10E9 60				rts						; ret
   228 					eif
   229 				.endl
   230
   231 10EA			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   232
   233 				; ------------------------------------------------------------
   234
   235 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   236 				; as Pointer
   237 10EA B5 18			lda :STACKORIGIN,x
   238 10EC 85 0C			sta VALUE
   239 10EE B5 28			lda :STACKORIGIN+STACKWIDTH,x
   240 10F0 85 0D			sta VALUE+1
   241 10F2 CA				dex
   242
   243 				; ------------------------------------------------------------
   244
   245 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   246 				; as Pointer
   247 10F3 B5 18			lda :STACKORIGIN,x
   248 10F5 85 08			sta A
   249 10F7 B5 28			lda :STACKORIGIN+STACKWIDTH,x
   250 10F9 85 09			sta A+1
   251 10FB CA				dex
   252
   253 				; ---------------------  ASM Block 017  ---------------------
   254
   255 10FC A0 00			ldy #0
   256 10FE A5 0C 91 08			mva value (edx),y
   257 1102 C8				iny
   258 1103 A5 0D 91 08			mva value+1 (edx),y
   259
   260
   261 				; ------------------------------------------------------------
   262
   263 = 0008			A	= edx
   264 = 000C			VALUE	= ecx
   265 1107			@exit
   266 					.ifdef @new
   267 					lda <@VarData
   268 					sta :ztmp
   269 					lda >@VarData
   270 					ldy #@VarDataSize-1
   271 					jmp @FreeMem
   272 					els
   273 1107 60				rts						; ret
   274 					eif
   275 				.endl
   276
   277 1108			.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   278
   279 				; ---------------------  ASM Block 019  ---------------------
   280
   281 1108 20 44 10			jsr @fill
   282
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0008			A	= edx
   287 = 000C			COUNT	= ecx
   288 = 0004			VALUE	= eax
   289 110B			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 110B 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 110C			.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD
   302
   303 				; ---------------------  ASM Block 035  ---------------------
   304
   305
   306 110C AD BC 16		loop  lda n
   307 110F 0D BD 16		  ora n+1
   308 1112 F0 14		  beq stop
   309
   310 1114 A5 A5 C5 A5 F0 FC	  lda:cmp:req :c4p_time+2
   311
   312 111A AD BC 16 D0 03 CE +   dew n
   313
   314 1125 4C 0C 11		  jmp loop
   315 1128			stop
   316
   317
   318 				; ------------------------------------------------------------
   319
   320 = 16BC			N	= DATAORIGIN+$000C
   321
   322 = 16BC			@VarData	= N
   323 = 0002			@VarDataSize	= 2
   324
   325 1128			@exit
   326 					.ifdef @new
   327 					lda <@VarData
   328 					sta :ztmp
   329 					lda >@VarData
   330 					ldy #@VarDataSize-1
   331 					jmp @FreeMem
   332 					els
   333 1128 60				rts						; ret
   334 					eif
   335 				.endl
   336
   337 1129			.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
   338 1129 8D BE 16			sta RANGE
   339
   340 				; ---------------------  ASM Block 039  ---------------------
   341
   342
   343 112C AD 00 FF		  lda ted_timer_1   //Timer A Lo byte
   344 112F 4D 01 FF		  eor ted_timer_1+1 //Timer A Hi byte
   345 1132 4D 02 FF		  eor ted_timer_2   //Timer B Lo byte
   346 1135 6D 1E FF		  adc ted_hcount    //Horizontal counter
   347 1138 4D 04 FF		  eor ted_timer_3   //Timer C Lo byte
   348 113B 4D 1E FF		  eor ted_hcount    //Horizontal counter
   349 113E A8			  tay
   350
   351 113F AD BE 16		  lda range
   352 1142 F0 08		  beq stop
   353
   354 1144 85 0C		  sta ecx
   355 1146 84 04		  sty eax
   356
   357 1148 20 8C 10		  jsr imulCL
   358 114B A8			  tay
   359
   360 114C 8C BF 16		stop  sty Result
   361
   362 114F			@exit
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368
   369 114F E8				inx
   370 1150 AD BF 16 95 18		mva RESULT :STACKORIGIN,x
   371
   372 					.ifdef @new
   373 					lda <@VarData
   374 					sta :ztmp
   375 					lda >@VarData
   376 					ldy #@VarDataSize-1
   377 					jmp @FreeMem
   378 					eif
   379
   380 				; ------------------------------------------------------------
   381
   382 = 16BE			RANGE	= DATAORIGIN+$000E
   383 = 16BF			RESULT	= DATAORIGIN+$000F
   384
   385 = 16BE			@VarData	= RANGE
   386 = 0002			@VarDataSize	= 2
   387
   388 1155 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 0101			__PORTB_BANKS	= $0101
   394 = 0648			M_PI_2	= $0648
   395 = 0192			D_PI_2	= $0192
   396 = 0004			D_PI_180	= $04
   397 = 0000			MGTIA	= $00
   398 = 0080			MVBXE	= $80
   399 = 0000			VBXE_XDLADR	= $00
   400 = 0100			VBXE_BCBADR	= $0100
   401 = 1000			VBXE_MAPADR	= $1000
   402 = 5000			VBXE_OVRADR	= $5000
   403 = B000			VBXE_WINDOW	= $B000
   404 = 0000			IDLI	= $00
   405 = 0001			IVBL	= $01
   406 = 00FE			CH_DELCHR	= $FE
   407 = 009B			CH_ENTER	= $9B
   408 = 001B			CH_ESC	= $1B
   409 = 001C			CH_CURS_UP	= $1C
   410 = 001D			CH_CURS_DOWN	= $1D
   411 = 001E			CH_CURS_LEFT	= $1E
   412 = 001F			CH_CURS_RIGHT	= $1F
   413 = 007F			CH_TAB	= $7F
   414 = 009B			CH_EOL	= $9B
   415 = 007D			CH_CLR	= $7D
   416 = 00FD			CH_BELL	= $FD
   417 = 007E			CH_DEL	= $7E
   418 = 009C			CH_DELLINE	= $9C
   419 = 009D			CH_INSLINE	= $9D
   420 = 0000			COLOR_BLACK	= $00
   421 = 000E			COLOR_WHITE	= $0E
   422 = 0032			COLOR_RED	= $32
   423 = 0096			COLOR_CYAN	= $96
   424 = 0068			COLOR_VIOLET	= $68
   425 = 00C4			COLOR_GREEN	= $C4
   426 = 0074			COLOR_BLUE	= $74
   427 = 00EE			COLOR_YELLOW	= $EE
   428 = 0028			COLOR_ORANGE	= $28
   429 = 00E4			COLOR_BROWN	= $E4
   430 = 003C			COLOR_LIGHTRED	= $3C
   431 = 0004			COLOR_GRAY1	= $04
   432 = 0006			COLOR_GRAY2	= $06
   433 = 000A			COLOR_GRAY3	= $0A
   434 = 00CC			COLOR_LIGHTGREEN	= $CC
   435 = 007C			COLOR_LIGHTBLUE	= $7C
   436 = 0004			FMOPENREAD	= $04
   437 = 0008			FMOPENWRITE	= $08
   438 = 0009			FMOPENAPPEND	= $09
   439 = 000C			FMOPENREADWRITE	= $0C
   440 = 16B0			SCREENWIDTH	= DATAORIGIN+$0000
   441 = 16B2			SCREENHEIGHT	= DATAORIGIN+$0002
   442 = 16B4			DATESEPARATOR	= DATAORIGIN+$0004
   443 = D014			TVSYSTEM	= $D014
   444 = D20A			RND	= $D20A
   445 = 02C0			adr.PALETTE	= $02C0
   446 1156			.var PALETTE	= adr.PALETTE .word
   447 = D012			adr.HPALETTE	= $D012
   448 1156			.var HPALETTE	= adr.HPALETTE .word
   449 = 16B5			FILEMODE	= DATAORIGIN+$0005
   450 = 16B6			GRAPHMODE	= DATAORIGIN+$0006
   451 = 16B7			IORESULT	= DATAORIGIN+$0007
   452 = 16B8			EOLN	= DATAORIGIN+$0008
   453 = 16B9			RNDSEED	= DATAORIGIN+$0009
   454
   455 = 1156 C0 02		PALETTE
   455 = 1158 12 D0		HPALETTE
   455 				.endl							; UNIT SYSTEM
   456
   457 115A			.local	INITPLAYFIELD					; PROCEDURE
   458
   459 				; optimize OK (main.pas), line = 65
   460
   461 115A A9 1F			lda #$1F
   462 115C 8D 15 FF			sta BORDERCOLOR
   463 115F A9 00			lda #$00
   464 1161 8D 19 FF			sta BGCOLOR
   465
   466 				; optimize OK (main.pas), line = 66
   467
   468 1164 A9 20			lda #$20
   469 1166 85 04			sta SYSTEM.FILLCHAR_0056.VALUE
   470 1168 A9 C0			lda #$C0
   471 116A 85 0C			sta SYSTEM.FILLCHAR_0056.COUNT
   472 116C A9 03			lda #$03
   473 116E 85 0D			sta SYSTEM.FILLCHAR_0056.COUNT+1
   474 1170 A9 00			lda #$00
   475 1172 85 08			sta SYSTEM.FILLCHAR_0056.A
   476 1174 A9 0C			lda #$0C
   477 1176 85 09			sta SYSTEM.FILLCHAR_0056.A+1
   478 1178 20 08 11			jsr SYSTEM.FILLCHAR_0056
   479
   480 				; optimize OK (main.pas), line = 68
   481
   482 117B A9 27			lda #$27
   483 117D 85 58			sta T0B
   484
   485 117F			l_0089
   486 				; --- ForToDoCondition
   487
   488 				; optimize OK (main.pas), line = 69
   489
   490 117F A4 58			ldy T0B
   491 1181 A9 A0			lda #$A0
   492 1183 99 00 0C			sta $0C00,y
   493
   494 				; optimize OK (main.pas), line = 70
   495
   496 1186 99 C0 0F			sta $0FC0,y
   497
   498 				; optimize OK (main.pas), line = 71
   499
   500 1189 A9 41			lda #$41
   501 118B 99 00 08			sta $0800,y
   502
   503 				; optimize OK (main.pas), line = 72
   504
   505 118E 99 C0 0B			sta $0BC0,y
   506
   507 				; --- ForToDoEpilog
   508 1191 C6 58			dec T0B
   509 1193 10 EA			jpl l_0089
   510 1195			l_0097
   511
   512 				; optimize OK (main.pas), line = 75
   513
   514 1195 A9 18			lda #$18
   515 1197 85 58			sta T0B
   516
   517 1199			l_00C9
   518 				; --- ForToDoCondition
   519 1199 A5 58			lda T0B
   520 119B C9 01			cmp #$01
   521 119D 90 3A			jcc l_00D7
   522
   523 				; optimize OK (main.pas), line = 76
   524
   525 119F 0A				asl @
   526 11A0 A8				tay
   527 11A1 A9 FF			lda #$FF
   528 11A3 18 79 0E 10			add adr.MUL40,y
   529 11A7 85 12			sta :bp2
   530 11A9 A9 0B			lda #$0B
   531 11AB 79 0F 10			adc adr.MUL40+1,y
   532 11AE 85 13			sta :bp2+1
   533 11B0 A0 00			ldy #$00
   534 11B2 A9 A0			lda #$A0
   535 11B4 91 12			sta (:bp2),y
   536 11B6 C8				iny
   537 11B7 91 12			sta (:bp2),y
   538
   539 				; optimize OK (main.pas), line = 77
   540
   541 11B9 A5 58			lda T0B
   542 11BB 0A				asl @
   543 11BC A8				tay
   544 11BD A9 FF			lda #$FF
   545 11BF 18 79 0E 10			add adr.MUL40,y
   546 11C3 85 12			sta :bp2
   547 11C5 A9 07			lda #$07
   548 11C7 79 0F 10			adc adr.MUL40+1,y
   549 11CA 85 13			sta :bp2+1
   550 11CC A0 00			ldy #$00
   551 11CE A9 41			lda #$41
   552 11D0 91 12			sta (:bp2),y
   553 11D2 C8				iny
   554 11D3 91 12			sta (:bp2),y
   555
   556 				; --- ForToDoEpilog
   557 11D5 C6 58			dec T0B
   558 11D7 10 C0			jpl l_00C9
   559 11D9			l_00D7
   560
   561 				; ------------------------------------------------------------
   562
   563 = 0000			@FORTMP_0086	= $00
   564 = 0001			@FORTMP_00C6	= $01
   565 11D9			@exit
   566 					.ifdef @new
   567 					lda <@VarData
   568 					sta :ztmp
   569 					lda >@VarData
   570 					ldy #@VarDataSize-1
   571 					jmp @FreeMem
   572 					els
   573 11D9 60				rts						; ret
   574 					eif
   575 				.endl
   576
   577 11DA			.local	INITPLAYERS					; PROCEDURE
   578
   579 				; optimize OK (main.pas), line = 83
   580
   581 11DA A9 01			lda #$01
   582 11DC 8D CA 16			sta PLAYER1.BRAIN
   583 11DF A9 0A			lda #$0A
   584 11E1 8D C5 16			sta PLAYER1.X
   585 11E4 A9 0C			lda #$0C
   586 11E6 8D C6 16			sta PLAYER1.Y
   587 11E9 A9 51			lda #$51
   588 11EB 8D C7 16			sta PLAYER1.HEAD
   589
   590 				; optimize OK (main.pas), line = 84
   591
   592 11EE A9 5F			lda #$5F
   593 11F0 8D C8 16			sta PLAYER1.COLOUR
   594 11F3 A9 00			lda #$00
   595 11F5 8D CB 16			sta PLAYER1.ISDEAD
   596 11F8 A9 08			lda #$08
   597 11FA 8D C9 16			sta PLAYER1.DIR
   598
   599 				; optimize OK (main.pas), line = 86
   600
   601 11FD A9 01			lda #$01
   602 11FF 8D D1 16			sta PLAYER2.BRAIN
   603 1202 A9 1E			lda #$1E
   604 1204 8D CC 16			sta PLAYER2.X
   605 1207 A9 0C			lda #$0C
   606 1209 8D CD 16			sta PLAYER2.Y
   607 120C A9 51			lda #$51
   608 120E 8D CE 16			sta PLAYER2.HEAD
   609
   610 				; optimize OK (main.pas), line = 87
   611
   612 1211 A9 5D			lda #$5D
   613 1213 8D CF 16			sta PLAYER2.COLOUR
   614 1216 A9 00			lda #$00
   615 1218 8D D2 16			sta PLAYER2.ISDEAD
   616 121B A9 04			lda #$04
   617 121D 8D D0 16			sta PLAYER2.DIR
   618
   619 				; optimize OK (main.pas), line = 89
   620
   621 1220 A9 01			lda #$01
   622 1222 8D D8 16			sta PLAYER3.BRAIN
   623 1225 A9 14			lda #$14
   624 1227 8D D3 16			sta PLAYER3.X
   625 122A A9 06			lda #$06
   626 122C 8D D4 16			sta PLAYER3.Y
   627 122F A9 51			lda #$51
   628 1231 8D D5 16			sta PLAYER3.HEAD
   629
   630 				; optimize OK (main.pas), line = 90
   631
   632 1234 A9 71			lda #$71
   633 1236 8D D6 16			sta PLAYER3.COLOUR
   634 1239 A9 00			lda #$00
   635 123B 8D D9 16			sta PLAYER3.ISDEAD
   636 123E A9 02			lda #$02
   637 1240 8D D7 16			sta PLAYER3.DIR
   638
   639 				; optimize OK (main.pas), line = 92
   640
   641 1243 A9 01			lda #$01
   642 1245 8D DF 16			sta PLAYER4.BRAIN
   643 1248 A9 14			lda #$14
   644 124A 8D DA 16			sta PLAYER4.X
   645 124D A9 12			lda #$12
   646 124F 8D DB 16			sta PLAYER4.Y
   647 1252 A9 51			lda #$51
   648 1254 8D DC 16			sta PLAYER4.HEAD
   649
   650 				; optimize OK (main.pas), line = 93
   651
   652 1257 A9 55			lda #$55
   653 1259 8D DD 16			sta PLAYER4.COLOUR
   654 125C A9 00			lda #$00
   655 125E 8D E0 16			sta PLAYER4.ISDEAD
   656 1261 A9 01			lda #$01
   657 1263 8D DE 16			sta PLAYER4.DIR
   658 1266			@exit
   659 					.ifdef @new
   660 					lda <@VarData
   661 					sta :ztmp
   662 					lda >@VarData
   663 					ldy #@VarDataSize-1
   664 					jmp @FreeMem
   665 					els
   666 1266 60				rts						; ret
   667 					eif
   668 				.endl
   669
   670 1267			.local	PUTCHAR						; PROCEDURE
   671
   672 				; optimize OK (main.pas), line = 100
   673
   674 1267 AD E2 16			lda Y
   675 126A 0A				asl @
   676 126B A8				tay
   677 126C B9 0E 10			lda adr.MUL40,y
   678 126F 18 6D E1 16			add X
   679 1273 85 5B			sta T0W
   680 1275 B9 0F 10			lda adr.MUL40+1,y
   681 1278 69 08			adc #$08
   682 127A 85 5C			sta T0W+1
   683
   684 				; optimize OK (main.pas), line = 101
   685
   686 127C 85 11			sta :bp+1
   687 127E A4 5B			ldy T0W
   688 1280 AD E4 16			lda C
   689 1283 91 10			sta (:bp),y
   690 1285 A5 5C			lda T0W+1
   691 1287 18 69 04			add #$04
   692 128A 85 11			sta :bp+1
   693 128C AD E3 16			lda V
   694 128F 91 10			sta (:bp),y
   695
   696 				; ------------------------------------------------------------
   697
   698 = 16E1			X	= DATAORIGIN+$0031
   699 = 16E2			Y	= DATAORIGIN+$0032
   700 = 16E3			V	= DATAORIGIN+$0033
   701 = 16E4			C	= DATAORIGIN+$0034
   702
   703 = 16E1			@VarData	= X
   704 = 0004			@VarDataSize	= 4
   705
   706 1291			@exit
   707 					.ifdef @new
   708 					lda <@VarData
   709 					sta :ztmp
   710 					lda >@VarData
   711 					ldy #@VarDataSize-1
   712 					jmp @FreeMem
   713 					els
   714 1291 60				rts						; ret
   715 					eif
   716 				.endl
   717
   718 1292			.local	CHECKAVAILDIR					; PROCEDURE
   719
   720 				; optimize OK (main.pas), line = 106
   721
   722 1292 A9 00			lda #$00
   723 1294 8D C1 16			sta AVAILDIR
   724
   725 				; optimize OK (main.pas), line = 107
   726
   727 1297 AD E6 16			lda Y
   728 129A 0A				asl @
   729 129B A8				tay
   730 129C B9 0E 10			lda adr.MUL40,y
   731 129F 18 6D E5 16			add X
   732 12A3 85 5B			sta T0W
   733 12A5 B9 0F 10			lda adr.MUL40+1,y
   734 12A8 69 0C			adc #$0C
   735 12AA 85 5C			sta T0W+1
   736
   737 				; optimize OK (main.pas), line = 109
   738
   739 12AC A5 5B			lda T0W
   740 12AE 38 E9 28			sub #$28
   741 12B1 85 21			sta :STACKORIGIN+9
   742 12B3 A5 5C			lda T0W+1
   743 12B5 E9 00			sbc #$00
   744 12B7 85 11			sta :bp+1
   745 12B9 A4 21			ldy :STACKORIGIN+9
   746 12BB B1 10			lda (:bp),y
   747 12BD C9 20			cmp #$20
   748 12BF D0 08			jne l_01BC
   749 12C1 AD C1 16			lda AVAILDIR
   750 12C4 09 01			ora #$01
   751 12C6 8D C1 16			sta AVAILDIR
   752 12C9			l_01BC
   753
   754 				; optimize OK (main.pas), line = 110
   755
   756 12C9 A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   757 12D1 A0 28			ldy #$28
   758 12D3 B1 12			lda (:bp2),y
   759 12D5 C9 20			cmp #$20
   760 12D7 D0 08			jne l_01DF
   761 12D9 AD C1 16			lda AVAILDIR
   762 12DC 09 02			ora #$02
   763 12DE 8D C1 16			sta AVAILDIR
   764 12E1			l_01DF
   765
   766 				; optimize OK (main.pas), line = 111
   767
   768 12E1 A5 5B			lda T0W
   769 12E3 38 E9 01			sub #$01
   770 12E6 85 21			sta :STACKORIGIN+9
   771 12E8 A5 5C			lda T0W+1
   772 12EA E9 00			sbc #$00
   773 12EC 85 11			sta :bp+1
   774 12EE A4 21			ldy :STACKORIGIN+9
   775 12F0 B1 10			lda (:bp),y
   776 12F2 C9 20			cmp #$20
   777 12F4 D0 08			jne l_0202
   778 12F6 AD C1 16			lda AVAILDIR
   779 12F9 09 04			ora #$04
   780 12FB 8D C1 16			sta AVAILDIR
   781 12FE			l_0202
   782
   783 				; optimize OK (main.pas), line = 112
   784
   785 12FE A4 5B 84 12 A4 5C + 	mwy T0W :bp2
   786 1306 A0 01			ldy #$01
   787 1308 B1 12			lda (:bp2),y
   788 130A C9 20			cmp #$20
   789 130C D0 08			jne l_0225
   790 130E AD C1 16			lda AVAILDIR
   791 1311 09 08			ora #$08
   792 1313 8D C1 16			sta AVAILDIR
   793 1316			l_0225
   794
   795 				; ------------------------------------------------------------
   796
   797 = 16E5			X	= DATAORIGIN+$0035
   798 = 16E6			Y	= DATAORIGIN+$0036
   799
   800 = 16E5			@VarData	= X
   801 = 0002			@VarDataSize	= 2
   802
   803 1316			@exit
   804 					.ifdef @new
   805 					lda <@VarData
   806 					sta :ztmp
   807 					lda >@VarData
   808 					ldy #@VarDataSize-1
   809 					jmp @FreeMem
   810 					els
   811 1316 60				rts						; ret
   812 					eif
   813 				.endl
   814
   815 1317			.local	HUMAN						; PROCEDURE
   816
   817 				; optimize OK (main.pas), line = 120
   818
   819 1317 AC C3 16 84 12 AC + 	mwy PLY :bp2
   820 1321 A0 04			ldy #PLY.DIR-DATAORIGIN
   821 1323 B1 12			lda (:bp2),y
   822 1325 85 59			sta NEWDIR
   823
   824 				; optimize OK (main.pas), line = 121
   825
   826 1327 A9 02			lda #$02
   827 1329 8D 08 FF			sta JOY
   828 132C A9 FF			lda #$FF
   829 132E 8D 30 FD			sta KEY_PIO
   830 1331 AD 08 FF			lda JOY
   831 1334 49 FF			eor #$FF
   832 1336 85 58			sta T0B
   833
   834 				; optimize OK (main.pas), line = 123
   835
   836 1338 8D E7 16			sta @CASETMP_0003
   837 133B C9 01			cmp #$01
   838 133D D0 19			jne l_0259
   839 133F			@
   840
   841 				; optimize OK (main.pas), line = 124
   842
   843 133F AC C3 16 84 12 AC + 	mwy PLY :bp2
   844 1349 A0 04			ldy #PLY.DIR-DATAORIGIN
   845 134B B1 12			lda (:bp2),y
   846 134D C9 02			cmp #$02
   847 134F F0 04			jeq l_026B
   848 1351 A9 01			lda #$01
   849 1353 85 59			sta NEWDIR
   850 1355			l_026B
   851
   852 1355 4C AC 13			jmp a_0003
   853 1358			l_0259
   854 1358 C9 02			cmp #$02
   855 135A D0 19			jne l_027B
   856 135C			@
   857
   858 				; optimize OK (main.pas), line = 125
   859
   860 135C AC C3 16 84 12 AC + 	mwy PLY :bp2
   861 1366 A0 04			ldy #PLY.DIR-DATAORIGIN
   862 1368 B1 12			lda (:bp2),y
   863 136A C9 01			cmp #$01
   864 136C F0 04			jeq l_028D
   865 136E A9 02			lda #$02
   866 1370 85 59			sta NEWDIR
   867 1372			l_028D
   868
   869 1372 4C AC 13			jmp a_0003
   870 1375			l_027B
   871 1375 C9 04			cmp #$04
   872 1377 D0 19			jne l_029D
   873 1379			@
   874
   875 				; optimize OK (main.pas), line = 126
   876
   877 1379 AC C3 16 84 12 AC + 	mwy PLY :bp2
   878 1383 A0 04			ldy #PLY.DIR-DATAORIGIN
   879 1385 B1 12			lda (:bp2),y
   880 1387 C9 08			cmp #$08
   881 1389 F0 04			jeq l_02AF
   882 138B A9 04			lda #$04
   883 138D 85 59			sta NEWDIR
   884 138F			l_02AF
   885
   886 138F 4C AC 13			jmp a_0003
   887 1392			l_029D
   888 1392 C9 08			cmp #$08
   889 1394 D0 16			jne l_02BF
   890 1396			@
   891
   892 				; optimize OK (main.pas), line = 127
   893
   894 1396 AC C3 16 84 12 AC + 	mwy PLY :bp2
   895 13A0 A0 04			ldy #PLY.DIR-DATAORIGIN
   896 13A2 B1 12			lda (:bp2),y
   897 13A4 C9 04			cmp #$04
   898 13A6 F0 04			jeq l_02D1
   899 13A8 A9 08			lda #$08
   900 13AA 85 59			sta NEWDIR
   901 13AC			l_02D1
   902
   903 13AC			l_02BF
   904 13AC			a_0003
   905
   906 				; optimize OK (main.pas), line = 130
   907
   908 13AC A5 59			lda NEWDIR
   909 13AE 2D C1 16			and AVAILDIR
   910 13B1 D0 1B			jne l_02F8
   911
   912 				; optimize OK (main.pas), line = 131
   913
   914 13B3 AC C3 16 84 12 AC + 	mwy PLY :bp2
   915 13BD A0 06			ldy #PLY.ISDEAD-DATAORIGIN
   916 13BF A9 01			lda #$01
   917 13C1 91 12			sta (:bp2),y
   918 13C3 A9 00			lda #$00
   919 13C5 8D C2 16			sta ALIVE
   920 13C8 A0 02			ldy #PLY.HEAD-DATAORIGIN
   921 13CA A9 57			lda #$57
   922 13CC 91 12			sta (:bp2),y
   923 13CE			l_02F8
   924
   925 				; ------------------------------------------------------------
   926
   927 = 16E7			@CASETMP_0003	= DATAORIGIN+$0037
   928
   929 = 16E7			@VarData	= @CASETMP_0003
   930 = 0001			@VarDataSize	= 1
   931
   932 13CE			@exit
   933 					.ifdef @new
   934 					lda <@VarData
   935 					sta :ztmp
   936 					lda >@VarData
   937 					ldy #@VarDataSize-1
   938 					jmp @FreeMem
   939 					els
   940 13CE 60				rts						; ret
   941 					eif
   942 				.endl
   943
   944 13CF			.local	AI_STRAIGHTFORWARD				; PROCEDURE
   945
   946 				; optimize OK (main.pas), line = 138
   947
   948 13CF AC C3 16 84 12 AC + 	mwy PLY :bp2
   949 13D9 A0 04			ldy #PLY.DIR-DATAORIGIN
   950 13DB B1 12			lda (:bp2),y
   951 13DD 2D C1 16			and AVAILDIR
   952 13E0 F0 07			jeq l_0323
   953 13E2 B1 12			lda (:bp2),y
   954 13E4 85 59			sta NEWDIR
   955 13E6 4C 09 14			jmp l_0333
   956 13E9			l_0323
   957
   958 				; optimize OK (main.pas), line = 140
   959
   960 13E9 A9 00			lda #$00
   961 13EB 85 5A			sta T0N
   962
   963 				; --- RepeatUntilProlog
   964 13ED			l_0338
   965
   966 				; optimize FAIL (0, main.pas), line = 142
   967
   968 13ED A9 04			lda #$04
   969 13EF 20 29 11			jsr SYSTEM.RANDOM_006C
   970 13F2 B4 18			ldy :STACKORIGIN,x
   971 13F4 B9 40 10			lda adr.DIRECTION,y
   972 13F7 85 59			sta NEWDIR
   973 13F9 CA				dex
   974
   975 				; optimize OK (main.pas), line = 143
   976
   977 13FA AD C1 16			lda AVAILDIR
   978 13FD 25 59			and NEWDIR
   979 13FF F0 04			jeq l_0358
   980 1401 A9 01			lda #$01
   981 1403 85 5A			sta T0N
   982 1405			l_0358
   983
   984 				; optimize OK (main.pas), line = 144
   985
   986 1405 A5 5A			lda T0N
   987 1407 F0 E4			jeq l_0338
   988 1409			l_0333
   989 1409			@exit
   990 					.ifdef @new
   991 					lda <@VarData
   992 					sta :ztmp
   993 					lda >@VarData
   994 					ldy #@VarDataSize-1
   995 					jmp @FreeMem
   996 					els
   997 1409 60				rts						; ret
   998 					eif
   999 				.endl
  1000
  1001 140A			.local	PLAYERMOVE					; PROCEDURE
  1002
  1003 				; optimize OK (main.pas), line = 152
  1004
  1005 140A AD E8 16			lda P
  1006 140D 8D C3 16			sta PLY
  1007 1410 85 12			sta :bp2
  1008 1412 AD E9 16			lda P+1
  1009 1415 8D C4 16			sta PLY+1
  1010 1418 85 13			sta :bp2+1
  1011 				; optimize OK (main.pas), line = 154
  1012 141A A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1013 141C B1 12			lda (:bp2),y
  1014 141E F0 03 4C F1 15		jne l_037E
  1015
  1016 				; optimize OK (main.pas), line = 156
  1017
  1018 1423 A0 00			ldy #PLY.X-DATAORIGIN
  1019 1425 B1 12			lda (:bp2),y
  1020 1427 8D E5 16			sta CHECKAVAILDIR.X
  1021 142A A0 01			ldy #PLY.Y-DATAORIGIN
  1022 142C B1 12			lda (:bp2),y
  1023 142E 8D E6 16			sta CHECKAVAILDIR.Y
  1024 1431 20 92 12			jsr CHECKAVAILDIR
  1025
  1026 				; optimize OK (main.pas), line = 158
  1027
  1028 1434 AD C1 16			lda AVAILDIR
  1029 1437 D0 36			jne l_0398
  1030
  1031 				; optimize OK (main.pas), line = 159
  1032
  1033 1439 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1034 1443 A0 06			ldy #PLY.ISDEAD-DATAORIGIN
  1035 1445 A9 01			lda #$01
  1036 1447 91 12			sta (:bp2),y
  1037 1449 CE C2 16			dec ALIVE
  1038
  1039 				; optimize OK (main.pas), line = 160
  1040
  1041 144C A0 00			ldy #PLY.X-DATAORIGIN
  1042 144E B1 12			lda (:bp2),y
  1043 1450 8D E1 16			sta PUTCHAR.X
  1044 1453 A0 01			ldy #PLY.Y-DATAORIGIN
  1045 1455 B1 12			lda (:bp2),y
  1046 1457 8D E2 16			sta PUTCHAR.Y
  1047 145A A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1048 145C B1 12			lda (:bp2),y
  1049 145E 18 69 80			add #$80
  1050 1461 8D E4 16			sta PUTCHAR.C
  1051 1464 A9 57			lda #$57
  1052 1466 8D E3 16			sta PUTCHAR.V
  1053 1469 20 67 12			jsr PUTCHAR
  1054 146C 4C F1 15			jmp l_03B9
  1055 146F			l_0398
  1056
  1057 				; optimize OK (main.pas), line = 163
  1058
  1059 146F AC C3 16 84 12 AC + 	mwy PLY :bp2
  1060 1479 A0 05			ldy #PLY.BRAIN-DATAORIGIN
  1061 147B B1 12			lda (:bp2),y
  1062 147D 8D EA 16			sta @CASETMP_0004
  1063 1480 C9 00			cmp #$00
  1064 1482 D0 06			jne l_03C4
  1065 1484			@
  1066
  1067 				; optimize FAIL ('HUMAN', main.pas), line = 164
  1068
  1069 1484 20 17 13			jsr HUMAN
  1070 1487 4C 91 14			jmp a_0004
  1071 148A			l_03C4
  1072 148A C9 01			cmp #$01
  1073 148C D0 03			jne l_03CE
  1074 148E			@
  1075
  1076 				; optimize FAIL ('AI_STRAIGHTFORWARD', main.pas), line = 165
  1077
  1078 148E 20 CF 13			jsr AI_STRAIGHTFORWARD
  1079 1491			l_03CE
  1080 1491			a_0004
  1081
  1082 				; optimize OK (main.pas), line = 168
  1083
  1084 1491 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1085 149B A0 04			ldy #PLY.DIR-DATAORIGIN
  1086 149D B1 12			lda (:bp2),y
  1087 149F C5 59			cmp NEWDIR
  1088 14A1 D0 14			jne l_03E9
  1089
  1090 				; optimize OK (main.pas), line = 169
  1091
  1092 14A3 A5 59			lda NEWDIR
  1093 14A5 29 0C			and #$0C
  1094 14A7 F0 07			jeq l_0400
  1095 14A9 A9 40			lda #$40
  1096 14AB 85 58			sta T0B
  1097 14AD 4C B4 14			jmp l_040E
  1098 14B0			l_0400
  1099 14B0 A9 42			lda #$42
  1100 14B2 85 58			sta T0B
  1101 14B4			l_040E
  1102 14B4 4C 27 15			jmp l_041B
  1103 14B7			l_03E9
  1104
  1105 				; optimize OK (main.pas), line = 171
  1106
  1107 14B7 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1108 14C1 A0 04			ldy #PLY.DIR-DATAORIGIN
  1109 14C3 B1 12			lda (:bp2),y
  1110 14C5 29 0A			and #$0A
  1111 14C7 F0 0A			jeq l_0441
  1112 14C9 A5 59			lda NEWDIR
  1113 14CB 29 05			and #$05
  1114 14CD F0 04			jeq l_0441
  1115 14CF A9 7D			lda #$7D
  1116 14D1 85 58			sta T0B
  1117 14D3			l_0441
  1118
  1119 				; optimize OK (main.pas), line = 172
  1120
  1121 14D3 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1122 14DD A0 04			ldy #PLY.DIR-DATAORIGIN
  1123 14DF B1 12			lda (:bp2),y
  1124 14E1 29 09			and #$09
  1125 14E3 F0 0A			jeq l_046E
  1126 14E5 A5 59			lda NEWDIR
  1127 14E7 29 06			and #$06
  1128 14E9 F0 04			jeq l_046E
  1129 14EB A9 6E			lda #$6E
  1130 14ED 85 58			sta T0B
  1131 14EF			l_046E
  1132
  1133 				; optimize OK (main.pas), line = 173
  1134
  1135 14EF AC C3 16 84 12 AC + 	mwy PLY :bp2
  1136 14F9 A0 04			ldy #PLY.DIR-DATAORIGIN
  1137 14FB B1 12			lda (:bp2),y
  1138 14FD 29 06			and #$06
  1139 14FF F0 0A			jeq l_049B
  1140 1501 A5 59			lda NEWDIR
  1141 1503 29 09			and #$09
  1142 1505 F0 04			jeq l_049B
  1143 1507 A9 6D			lda #$6D
  1144 1509 85 58			sta T0B
  1145 150B			l_049B
  1146
  1147 				; optimize OK (main.pas), line = 174
  1148
  1149 150B AC C3 16 84 12 AC + 	mwy PLY :bp2
  1150 1515 A0 04			ldy #PLY.DIR-DATAORIGIN
  1151 1517 B1 12			lda (:bp2),y
  1152 1519 29 05			and #$05
  1153 151B F0 0A			jeq l_04C8
  1154 151D A5 59			lda NEWDIR
  1155 151F 29 0A			and #$0A
  1156 1521 F0 04			jeq l_04C8
  1157 1523 A9 70			lda #$70
  1158 1525 85 58			sta T0B
  1159 1527			l_04C8
  1160 1527			l_041B
  1161
  1162 				; optimize OK (main.pas), line = 176
  1163
  1164 1527 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1165 1531 A0 00			ldy #PLY.X-DATAORIGIN
  1166 1533 B1 12			lda (:bp2),y
  1167 1535 8D E1 16			sta PUTCHAR.X
  1168 1538 A0 01			ldy #PLY.Y-DATAORIGIN
  1169 153A B1 12			lda (:bp2),y
  1170 153C 8D E2 16			sta PUTCHAR.Y
  1171 153F A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1172 1541 B1 12			lda (:bp2),y
  1173 1543 8D E4 16			sta PUTCHAR.C
  1174 1546 A5 58			lda T0B
  1175 1548 8D E3 16			sta PUTCHAR.V
  1176 154B 20 67 12			jsr PUTCHAR
  1177
  1178 				; optimize OK (main.pas), line = 178
  1179
  1180 154E AC C3 16 84 12 AC + 	mwy PLY :bp2
  1181 1558 A0 04			ldy #PLY.DIR-DATAORIGIN
  1182 155A A5 59			lda NEWDIR
  1183 155C 91 12			sta (:bp2),y
  1184
  1185 				; optimize OK (main.pas), line = 180
  1186
  1187 155E A5 59			lda NEWDIR
  1188 1560 8D EB 16			sta @CASETMP_0005
  1189 1563 C9 01			cmp #$01
  1190 1565 D0 16			jne l_04ED
  1191 1567			@
  1192
  1193 				; optimize OK (main.pas), line = 181
  1194
  1195 1567 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1196 1571 A0 01			ldy #PLY.Y-DATAORIGIN
  1197 1573 B1 12			lda (:bp2),y
  1198 1575 38 E9 01			sub #$01
  1199 1578 91 12			sta (:bp2),y
  1200
  1201 157A 4C C8 15			jmp a_0005
  1202 157D			l_04ED
  1203 157D C9 02			cmp #$02
  1204 157F D0 16			jne l_04F7
  1205 1581			@
  1206
  1207 				; optimize OK (main.pas), line = 182
  1208
  1209 1581 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1210 158B A0 01			ldy #PLY.Y-DATAORIGIN
  1211 158D B1 12			lda (:bp2),y
  1212 158F 18 69 01			add #$01
  1213 1592 91 12			sta (:bp2),y
  1214
  1215 1594 4C C8 15			jmp a_0005
  1216 1597			l_04F7
  1217 1597 C9 04			cmp #$04
  1218 1599 D0 16			jne l_0501
  1219 159B			@
  1220
  1221 				; optimize OK (main.pas), line = 183
  1222
  1223 159B AC C3 16 84 12 AC + 	mwy PLY :bp2
  1224 15A5 A0 00			ldy #PLY.X-DATAORIGIN
  1225 15A7 B1 12			lda (:bp2),y
  1226 15A9 38 E9 01			sub #$01
  1227 15AC 91 12			sta (:bp2),y
  1228
  1229 15AE 4C C8 15			jmp a_0005
  1230 15B1			l_0501
  1231 15B1 C9 08			cmp #$08
  1232 15B3 D0 13			jne l_050B
  1233 15B5			@
  1234
  1235 				; optimize OK (main.pas), line = 184
  1236
  1237 15B5 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1238 15BF A0 00			ldy #PLY.X-DATAORIGIN
  1239 15C1 B1 12			lda (:bp2),y
  1240 15C3 18 69 01			add #$01
  1241 15C6 91 12			sta (:bp2),y
  1242
  1243 15C8			l_050B
  1244 15C8			a_0005
  1245
  1246 				; optimize OK (main.pas), line = 187
  1247
  1248 15C8 AC C3 16 84 12 AC + 	mwy PLY :bp2
  1249 15D2 A0 00			ldy #PLY.X-DATAORIGIN
  1250 15D4 B1 12			lda (:bp2),y
  1251 15D6 8D E1 16			sta PUTCHAR.X
  1252 15D9 A0 01			ldy #PLY.Y-DATAORIGIN
  1253 15DB B1 12			lda (:bp2),y
  1254 15DD 8D E2 16			sta PUTCHAR.Y
  1255 15E0 A0 02			ldy #PLY.HEAD-DATAORIGIN
  1256 15E2 B1 12			lda (:bp2),y
  1257 15E4 8D E3 16			sta PUTCHAR.V
  1258 15E7 A0 03			ldy #PLY.COLOUR-DATAORIGIN
  1259 15E9 B1 12			lda (:bp2),y
  1260 15EB 8D E4 16			sta PUTCHAR.C
  1261 15EE 20 67 12			jsr PUTCHAR
  1262 15F1			l_03B9
  1263 15F1			l_037E
  1264
  1265 				; ------------------------------------------------------------
  1266
  1267 = 16E8			P	= DATAORIGIN+$0038
  1268 = 16EA			@CASETMP_0004	= DATAORIGIN+$003A
  1269 = 16EB			@CASETMP_0005	= DATAORIGIN+$003B
  1270
  1271 = 16E8			@VarData	= P
  1272 = 0004			@VarDataSize	= 4
  1273
  1274 15F1			@exit
  1275 					.ifdef @new
  1276 					lda <@VarData
  1277 					sta :ztmp
  1278 					lda >@VarData
  1279 					ldy #@VarDataSize-1
  1280 					jmp @FreeMem
  1281 					els
  1282 15F1 60				rts						; ret
  1283 					eif
  1284 				.endl
  1285 15F2			l_0007
  1286
  1287 				; optimize OK (main.pas), line = 198
  1288
  1289 15F2 A9 00			lda #$00
  1290 15F4 8D C0 16			sta GAMEOVER
  1291
  1292 				; --- RepeatUntilProlog
  1293 15F7			l_0529
  1294
  1295 				; optimize OK (main.pas), line = 201
  1296
  1297 15F7 A9 03			lda #$03
  1298 15F9 8D C2 16			sta ALIVE
  1299
  1300 				; optimize FAIL ('INITPLAYERS', main.pas), line = 202
  1301
  1302 15FC 20 DA 11			jsr INITPLAYERS
  1303
  1304 				; optimize FAIL ('INITPLAYFIELD', main.pas), line = 203
  1305
  1306 15FF 20 5A 11			jsr INITPLAYFIELD
  1307
  1308 				; optimize OK (main.pas), line = 205
  1309
  1310 1602 A9 01			lda #$01
  1311 1604 8D CA 16			sta PLAYER1.BRAIN
  1312
  1313 				; optimize OK (main.pas), line = 206
  1314
  1315 1607 8D D1 16			sta PLAYER2.BRAIN
  1316
  1317 				; optimize OK (main.pas), line = 207
  1318
  1319 160A 8D D8 16			sta PLAYER3.BRAIN
  1320
  1321 				; optimize OK (main.pas), line = 208
  1322
  1323 160D A9 00			lda #$00
  1324 160F 8D DF 16			sta PLAYER4.BRAIN
  1325
  1326 				; --- RepeatUntilProlog
  1327 1612			l_0540
  1328
  1329 				; optimize OK (main.pas), line = 211
  1330
  1331 1612 A9 01			lda #$01
  1332 1614 8D BC 16			sta SYSTEM.PAUSE_006B.N
  1333 1617 A9 00			lda #$00
  1334 1619 8D BD 16			sta SYSTEM.PAUSE_006B.N+1
  1335 161C 20 0C 11			jsr SYSTEM.PAUSE_006B
  1336 161F AD A8 16			lda PLAYER1
  1337 1622 8D E8 16			sta PLAYERMOVE.P
  1338 1625 AD A9 16			lda PLAYER1+1
  1339 1628 8D E9 16			sta PLAYERMOVE.P+1
  1340 162B 20 0A 14			jsr PLAYERMOVE
  1341
  1342 				; optimize OK (main.pas), line = 212
  1343
  1344 162E A9 01			lda #$01
  1345 1630 8D BC 16			sta SYSTEM.PAUSE_006B.N
  1346 1633 A9 00			lda #$00
  1347 1635 8D BD 16			sta SYSTEM.PAUSE_006B.N+1
  1348 1638 20 0C 11			jsr SYSTEM.PAUSE_006B
  1349 163B AD AA 16			lda PLAYER2
  1350 163E 8D E8 16			sta PLAYERMOVE.P
  1351 1641 AD AB 16			lda PLAYER2+1
  1352 1644 8D E9 16			sta PLAYERMOVE.P+1
  1353 1647 20 0A 14			jsr PLAYERMOVE
  1354
  1355 				; optimize OK (main.pas), line = 213
  1356
  1357 164A A9 01			lda #$01
  1358 164C 8D BC 16			sta SYSTEM.PAUSE_006B.N
  1359 164F A9 00			lda #$00
  1360 1651 8D BD 16			sta SYSTEM.PAUSE_006B.N+1
  1361 1654 20 0C 11			jsr SYSTEM.PAUSE_006B
  1362 1657 AD AC 16			lda PLAYER3
  1363 165A 8D E8 16			sta PLAYERMOVE.P
  1364 165D AD AD 16			lda PLAYER3+1
  1365 1660 8D E9 16			sta PLAYERMOVE.P+1
  1366 1663 20 0A 14			jsr PLAYERMOVE
  1367
  1368 				; optimize OK (main.pas), line = 214
  1369
  1370 1666 A9 01			lda #$01
  1371 1668 8D BC 16			sta SYSTEM.PAUSE_006B.N
  1372 166B A9 00			lda #$00
  1373 166D 8D BD 16			sta SYSTEM.PAUSE_006B.N+1
  1374 1670 20 0C 11			jsr SYSTEM.PAUSE_006B
  1375 1673 AD AE 16			lda PLAYER4
  1376 1676 8D E8 16			sta PLAYERMOVE.P
  1377 1679 AD AF 16			lda PLAYER4+1
  1378 167C 8D E9 16			sta PLAYERMOVE.P+1
  1379 167F 20 0A 14			jsr PLAYERMOVE
  1380
  1381 				; optimize OK (main.pas), line = 215
  1382
  1383 1682 AD C2 16			lda ALIVE
  1384 1685 F0 04			jeq l_0540x
  1385 1687 C9 FF			cmp #$FF
  1386 1689 D0 87			jne l_0540
  1387 168B			l_0540x
  1388
  1389 				; optimize OK (main.pas), line = 217
  1390
  1391 168B A9 64			lda #$64
  1392 168D 8D BC 16			sta SYSTEM.PAUSE_006B.N
  1393 1690 A9 00			lda #$00
  1394 1692 8D BD 16			sta SYSTEM.PAUSE_006B.N+1
  1395 1695 20 0C 11			jsr SYSTEM.PAUSE_006B
  1396
  1397 				; optimize OK (main.pas), line = 218
  1398
  1399 1698 AD C0 16			lda GAMEOVER
  1400 169B D0 03 4C F7 15		jeq l_0529
  1401
  1402 				; ------------------------------------------------------------
  1403
  1404 = 0800			ATTRIBUTE_ADDR	= $0800
  1405 = 0C00			SCREEN_ADDR	= $0C00
  1406 = 0020			EMPTY	= $20
  1407 = 00A0			WALL	= $A0
  1408 = 0041			WALL_COLOUR	= $41
  1409 = 0051			PLY_HEAD	= $51
  1410 = 0057			PLY_CRASH	= $57
  1411 = 0042			PLY_TAIL_UD	= $42
  1412 = 0040			PLY_TAIL_LR	= $40
  1413 = 007D			PLY_TAIL_RD	= $7D
  1414 = 006E			PLY_TAIL_RU	= $6E
  1415 = 006D			PLY_TAIL_LD	= $6D
  1416 = 0070			PLY_TAIL_LU	= $70
  1417 = 005F			PLY1_COLOUR	= $5F
  1418 = 005D			PLY2_COLOUR	= $5D
  1419 = 0071			PLY3_COLOUR	= $71
  1420 = 0055			PLY4_COLOUR	= $55
  1421 = 0001			JOY_UP	= $01
  1422 = 0002			JOY_DOWN	= $02
  1423 = 0004			JOY_LEFT	= $04
  1424 = 0008			JOY_RIGHT	= $08
  1425 = 0040			JOY_FIRE	= $40
  1426 = 0002			JOY_SELECT_1	= $02
  1427 = 0004			JOY_SELECT_2	= $04
  1428 = 100E			adr.MUL40	= CODEORIGIN+$0000
  1429 16A0			.var MUL40	= adr.MUL40 .word
  1430 = 1040			adr.DIRECTION	= CODEORIGIN+$0032
  1431 16A0			.var DIRECTION	= adr.DIRECTION .word
  1432 = FD30			KEY_PIO	= $FD30
  1433 = FF08			JOY	= $FF08
  1434 = FF15			BORDERCOLOR	= $FF15
  1435 = FF19			BGCOLOR	= $FF19
  1436 = 0058			T0B	= $58
  1437 = 0059			NEWDIR	= $59
  1438 = 005A			T0N	= $5A
  1439 = 005B			T0W	= $5B
  1440 = 16C0			GAMEOVER	= DATAORIGIN+$0010
  1441 = 16C1			AVAILDIR	= DATAORIGIN+$0011
  1442 = 16C2			ALIVE	= DATAORIGIN+$0012
  1443 = 16C3			PLY	= DATAORIGIN+$0013
  1444 = 16B0			PLY.X	= DATAORIGIN+$0000
  1445 = 16B1			PLY.Y	= DATAORIGIN+$0001
  1446 = 16B2			PLY.HEAD	= DATAORIGIN+$0002
  1447 = 16B3			PLY.COLOUR	= DATAORIGIN+$0003
  1448 = 16B4			PLY.DIR	= DATAORIGIN+$0004
  1449 = 16B5			PLY.BRAIN	= DATAORIGIN+$0005
  1450 = 16B6			PLY.ISDEAD	= DATAORIGIN+$0006
  1451 = 16C5			adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
  1452 16A0			.var PLAYER1	= adr.PLAYER1 .word
  1453 = 16C5			PLAYER1.X	= DATAORIGIN+$0015
  1454 = 16C6			PLAYER1.Y	= DATAORIGIN+$0016
  1455 = 16C7			PLAYER1.HEAD	= DATAORIGIN+$0017
  1456 = 16C8			PLAYER1.COLOUR	= DATAORIGIN+$0018
  1457 = 16C9			PLAYER1.DIR	= DATAORIGIN+$0019
  1458 = 16CA			PLAYER1.BRAIN	= DATAORIGIN+$001A
  1459 = 16CB			PLAYER1.ISDEAD	= DATAORIGIN+$001B
  1460 = 16CC			adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
  1461 16A0			.var PLAYER2	= adr.PLAYER2 .word
  1462 = 16CC			PLAYER2.X	= DATAORIGIN+$001C
  1463 = 16CD			PLAYER2.Y	= DATAORIGIN+$001D
  1464 = 16CE			PLAYER2.HEAD	= DATAORIGIN+$001E
  1465 = 16CF			PLAYER2.COLOUR	= DATAORIGIN+$001F
  1466 = 16D0			PLAYER2.DIR	= DATAORIGIN+$0020
  1467 = 16D1			PLAYER2.BRAIN	= DATAORIGIN+$0021
  1468 = 16D2			PLAYER2.ISDEAD	= DATAORIGIN+$0022
  1469 = 16D3			adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
  1470 16A0			.var PLAYER3	= adr.PLAYER3 .word
  1471 = 16D3			PLAYER3.X	= DATAORIGIN+$0023
  1472 = 16D4			PLAYER3.Y	= DATAORIGIN+$0024
  1473 = 16D5			PLAYER3.HEAD	= DATAORIGIN+$0025
  1474 = 16D6			PLAYER3.COLOUR	= DATAORIGIN+$0026
  1475 = 16D7			PLAYER3.DIR	= DATAORIGIN+$0027
  1476 = 16D8			PLAYER3.BRAIN	= DATAORIGIN+$0028
  1477 = 16D9			PLAYER3.ISDEAD	= DATAORIGIN+$0029
  1478 = 16DA			adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
  1479 16A0			.var PLAYER4	= adr.PLAYER4 .word
  1480 = 16DA			PLAYER4.X	= DATAORIGIN+$002A
  1481 = 16DB			PLAYER4.Y	= DATAORIGIN+$002B
  1482 = 16DC			PLAYER4.HEAD	= DATAORIGIN+$002C
  1483 = 16DD			PLAYER4.COLOUR	= DATAORIGIN+$002D
  1484 = 16DE			PLAYER4.DIR	= DATAORIGIN+$002E
  1485 = 16DF			PLAYER4.BRAIN	= DATAORIGIN+$002F
  1486 = 16E0			PLAYER4.ISDEAD	= DATAORIGIN+$0030
  1487 16A0			@exit
  1488
  1489 16A0 A2 00		@halt	ldx #$00
  1490 16A2 9A				txs
  1491
  1492 16A3 60				rts
  1493
  1494 				; ------------------------------------------------------------
  1495
  1496 				; ------------------------------------------------------------
  1497
  1498 16A4			.local	@DEFINES
  1499 16A4			C4P
  1500 				.endl
  1501
  1502 16A4			.local	@RESOURCE
  1503 				.endl
  1504
  1505 = 16A4 0E 10		MUL40
  1505 = 16A6 40 10		DIRECTION
  1505 = 16A8 C5 16		PLAYER1
  1505 = 16AA CC 16		PLAYER2
  1505 = 16AC D3 16		PLAYER3
  1505 = 16AE DA 16		PLAYER4
  1505 				.endl							; MAIN
  1506
  1507 				; ------------------------------------------------------------
  1508 				; ------------------------------------------------------------
  1509
  1510 				.macro	UNITINITIALIZATION
  1511 				
  1512 					.ifdef MAIN.SYSTEM.@UnitInit
  1513 					jsr MAIN.SYSTEM.@UnitInit
  1514 					eif
  1515 				.endm
  1516
  1517 				; ------------------------------------------------------------
  1518
  1519 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1520 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1520 				SYSTEM: $10BE..$1159
  1521 					eif
  1522
  1523 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1523 				CODE: $100E..$16A3
  1524
  1525 				; ------------------------------------------------------------
  1526
  1527 16B0				.align $04
  1528
  1529 16B0			DATAORIGIN
  1530 16B0 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1531
  1532 = 0006			VARINITSIZE	= *-DATAORIGIN
  1533 = 003C			VARDATASIZE	= 60
  1534
  1535 = 16EC			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1536
  1537 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1537 				DATA: $16B0..$16EC
  1538
  1539 				; ------------------------------------------------------------
  1540
  1541 				.macro	STATICDATA
  1542 				.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
  1543 				.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
  1544 				.by  $C0 $03 $01 $02 $04 $08
  1545 				.endm
  1546
  1547 					end
