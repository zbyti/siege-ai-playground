; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2021/02/14] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $02

psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------
	opt h-f+
	org $1001
	org [a($1001)],$1001				; BASIC start address

	basic_start(START)
	org $100E

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_c4p.asm'

.print 'ZPAGE: ',psptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 001  ---------------------

	ldy #0
	mva (edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 016  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 017  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 019  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 034  ---------------------

 lda:cmp:req :c4p_time+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_006C					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 035  ---------------------


loop  lda n
  ora n+1
  beq stop

  lda:cmp:req :c4p_time+2

  dew n

  jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000C

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_006D					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; ---------------------  ASM Block 039  ---------------------


  lda ted_timer_1   //Timer A Lo byte
  eor ted_timer_1+1 //Timer A Hi byte
  eor ted_timer_2   //Timer B Lo byte
  adc ted_hcount    //Horizontal counter
  eor ted_timer_3   //Timer C Lo byte
  eor ted_hcount    //Horizontal counter
  tay

  lda range
  beq stop

  sta ecx
  sty eax

  jsr imulCL
  tay

stop  sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000E
RESULT	= DATAORIGIN+$000F

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

.local	PUTCHAR						; PROCEDURE

; optimize OK (tools.inc), line = 5

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$08
	sta T0W+1

; optimize OK (tools.inc), line = 6

	sta :bp+1
	ldy T0W
	lda C
	sta (:bp),y
	lda T0W+1
	add #$04
	sta :bp+1
	lda V
	sta (:bp),y

; ------------------------------------------------------------

X	= DATAORIGIN+$0042
Y	= DATAORIGIN+$0043
V	= DATAORIGIN+$0044
C	= DATAORIGIN+$0045

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSCORE					; PROCEDURE

; optimize OK (tools.inc), line = 13

	lda PLAYER1.COLOUR
	sta PUTCHAR.C
	lda PLAYER1.SCORE
	sta PUTCHAR.V
	lda #$00
	sta PUTCHAR.Y
	lda #$1E
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (tools.inc), line = 14

	lda PLAYER2.COLOUR
	sta PUTCHAR.C
	lda PLAYER2.SCORE
	sta PUTCHAR.V
	lda #$00
	sta PUTCHAR.Y
	lda #$20
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (tools.inc), line = 15

	lda PLAYER3.COLOUR
	sta PUTCHAR.C
	lda PLAYER3.SCORE
	sta PUTCHAR.V
	lda #$00
	sta PUTCHAR.Y
	lda #$22
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (tools.inc), line = 16

	lda PLAYER4.COLOUR
	sta PUTCHAR.C
	lda PLAYER4.SCORE
	sta PUTCHAR.V
	lda #$00
	sta PUTCHAR.Y
	lda #$24
	sta PUTCHAR.X
	jsr PUTCHAR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKAVAILDIR					; PROCEDURE

; optimize OK (tools.inc), line = 23

	lda #$00
	sta AVAILDIR

; optimize OK (tools.inc), line = 24

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	asl @
	tay
	lda #$00
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda #$0C
	adc adr.MUL40+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #PLY.X-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta T0W
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta T0W+1

; optimize OK (tools.inc), line = 26

	lda T0W
	sub #$28
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_00EF
	lda AVAILDIR
	ora #$01
	sta AVAILDIR
l_00EF

; optimize OK (tools.inc), line = 27

	mwy T0W :bp2
	ldy #$28
	lda (:bp2),y
	cmp #$20
	jne l_0112
	lda AVAILDIR
	ora #$02
	sta AVAILDIR
l_0112

; optimize OK (tools.inc), line = 28

	lda T0W
	sub #$01
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_0135
	lda AVAILDIR
	ora #$04
	sta AVAILDIR
l_0135

; optimize OK (tools.inc), line = 29

	mwy T0W :bp2
	ldy #$01
	lda (:bp2),y
	cmp #$20
	jne l_0158
	lda AVAILDIR
	ora #$08
	sta AVAILDIR
l_0158
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ANIMATEOBSTACLES				; PROCEDURE

; optimize FAIL (0, tools.inc), line = 38

	inc COUNTER

; optimize OK (tools.inc), line = 39

	lda COUNTER
	and #$01
	jeq l_0183
	lda #$56
	sta OBST
	jmp l_0191
l_0183
	lda #$5B
	sta OBST
l_0191

; optimize OK (tools.inc), line = 40

	lda #$07
	sta I0B

l_019E
; --- ForToDoCondition
	lda I0B
	asl @
	tay
	lda adr.OBSTACLES,y
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda OBST
	sta (:bp),y
	dec I0B
	jpl l_019E
l_01AC

; ------------------------------------------------------------

COUNTER	= DATAORIGIN+$0046
OBST	= DATAORIGIN+$0047
@FORTMP_019B	= $00

@VarData	= COUNTER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEOBSTACLES					; PROCEDURE

; optimize OK (tools.inc), line = 47

	lda #$07
	sta I0B

l_01C7
; --- ForToDoCondition

; optimize OK (tools.inc), line = 48

	lda I0B
	asl @
	tay
	lda adr.OBSTACLES+1,y
	cmp #$00
	bne @+
	lda adr.OBSTACLES,y
	cmp #$7E
@
	jeq l_01E9

; optimize OK (tools.inc), line = 49

	lda adr.OBSTACLES,y
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda #$56
	sta (:bp),y

; optimize OK (tools.inc), line = 50

	lda I0B
	asl @
	tay
	lda adr.OBSTACLES,y
	sub #$00
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sbc #$04
	sta :bp+1
	ldy :STACKORIGIN+9
	lda #$35
	sta (:bp),y
l_01E9

; --- ForToDoEpilog
	dec I0B
	jpl l_01C7
l_01D5

; ------------------------------------------------------------

@FORTMP_01C4	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWTAIL					; PROCEDURE

; optimize OK (tools.inc), line = 59

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp NEWDIR
	jne l_021B

; optimize OK (tools.inc), line = 60

	lda NEWDIR
	and #$0C
	jeq l_0232
	lda #$40
	sta T0B
	jmp l_0240
l_0232
	lda #$42
	sta T0B
l_0240
	jmp l_024D
l_021B

; optimize OK (tools.inc), line = 62

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$0A
	jeq l_0273
	lda NEWDIR
	and #$05
	jeq l_0273
	lda #$7D
	sta T0B
l_0273

; optimize OK (tools.inc), line = 63

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$09
	jeq l_02A0
	lda NEWDIR
	and #$06
	jeq l_02A0
	lda #$6E
	sta T0B
l_02A0

; optimize OK (tools.inc), line = 64

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$06
	jeq l_02CD
	lda NEWDIR
	and #$09
	jeq l_02CD
	lda #$6D
	sta T0B
l_02CD

; optimize OK (tools.inc), line = 65

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$05
	jeq l_02FA
	lda NEWDIR
	and #$0A
	jeq l_02FA
	lda #$70
	sta T0B
l_02FA
l_024D

; optimize OK (tools.inc), line = 67

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.C
	lda T0B
	sta PUTCHAR.V
	jsr PUTCHAR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKJOYSTATUS					; PROCEDURE

; optimize OK (tools.inc), line = 74

	lda #$02
	sta JOY
	lda #$FF
	sta KEYSCAN

; optimize OK (tools.inc), line = 75

	lda JOY
	eor #$FF
	sta JOYSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYERS					; PROCEDURE

; optimize OK (init.inc), line = 5

	lda P
	sta PLY
	sta :bp2
	lda P+1
	sta PLY+1
	sta :bp2+1
; optimize OK (init.inc), line = 6
	ldy #PLY.BRAIN-DATAORIGIN
	lda BRAIN
	sta (:bp2),y
	ldy #PLY.X-DATAORIGIN
	lda X
	sta (:bp2),y
	ldy #PLY.Y-DATAORIGIN
	lda Y
	sta (:bp2),y
	ldy #PLY.DIR-DATAORIGIN
	lda DIR
	sta (:bp2),y

; optimize OK (init.inc), line = 7

	ldy #PLY.HEAD-DATAORIGIN
	lda HEAD
	sta (:bp2),y
	ldy #PLY.COLOUR-DATAORIGIN
	lda COLOUR
	sta (:bp2),y
	ldy #PLY.ISALIVE-DATAORIGIN
	lda ISALIVE
	sta (:bp2),y

; optimize OK (init.inc), line = 8

	lda ISALIVE
	jeq l_0363

; optimize FAIL (0, init.inc), line = 9

	inc ALIVE
	lda COLOUR
	sta PUTCHAR.C
	lda HEAD
	sta PUTCHAR.V
	lda Y
	sta PUTCHAR.Y
	lda X
	sta PUTCHAR.X
	jsr PUTCHAR
l_0363

; ------------------------------------------------------------

P	= DATAORIGIN+$0048
X	= DATAORIGIN+$004A
Y	= DATAORIGIN+$004B
DIR	= DATAORIGIN+$004C
BRAIN	= DATAORIGIN+$004D
HEAD	= DATAORIGIN+$004E
COLOUR	= DATAORIGIN+$004F
ISALIVE	= DATAORIGIN+$0050

@VarData	= P
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYFIELD					; PROCEDURE

; optimize OK (init.inc), line = 17

	lda #$1F
	sta BACKGROUND
	lda #$00
	sta BOREDER

; optimize OK (init.inc), line = 18

	lda #$20
	sta SYSTEM.FILLCHAR_0056.VALUE
	lda #$C0
	sta SYSTEM.FILLCHAR_0056.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_0056.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0056.A
	lda #$0C
	sta SYSTEM.FILLCHAR_0056.A+1
	jsr SYSTEM.FILLCHAR_0056

; optimize OK (init.inc), line = 20

	lda #$27
	sta T0B

l_0390
; --- ForToDoCondition

; optimize OK (init.inc), line = 21

	ldy T0B
	lda #$A0
	sta $0C00,y

; optimize OK (init.inc), line = 22

	sta $0FC0,y

; optimize OK (init.inc), line = 23

	lda #$41
	sta $0800,y

; optimize OK (init.inc), line = 24

	sta $0BC0,y

; --- ForToDoEpilog
	dec T0B
	jpl l_0390
l_039E

; optimize OK (init.inc), line = 27

	lda #$18
	sta T0B

l_03D0
; --- ForToDoCondition
	lda T0B
	cmp #$01
	jcc l_03DE

; optimize OK (init.inc), line = 28

	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$0B
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$A0
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (init.inc), line = 29

	lda T0B
	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$07
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$41
	sta (:bp2),y
	iny
	sta (:bp2),y

; --- ForToDoEpilog
	dec T0B
	jpl l_03D0
l_03DE

; ------------------------------------------------------------

@FORTMP_038D	= $00
@FORTMP_03CD	= $01
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AISTRAIGHT					; PROCEDURE

; optimize OK (ai.inc), line = 5

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and AVAILDIR
	jeq l_0415
	lda (:bp2),y
	sta NEWDIR
	jmp l_0425
l_0415

; optimize OK (ai.inc), line = 7

	lda AVAILDIR
	cmp #$03
	jne l_0437
	lda #$02
	jsr SYSTEM.RANDOM_006D
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_0449
l_0437

; optimize OK (ai.inc), line = 9

	lda AVAILDIR
	sta @CASETMP_0003
	cmp #$01
	jne l_0454
@

; optimize OK (ai.inc), line = 10

	lda #$01
	sta NEWDIR

	jmp a_0003
l_0454
	cmp #$02
	jne l_0461
@

; optimize OK (ai.inc), line = 11

	lda #$02
	sta NEWDIR

l_0461
a_0003
l_0449

; optimize OK (ai.inc), line = 14

	lda AVAILDIR
	cmp #$0C
	jne l_047D
	lda #$02
	jsr SYSTEM.RANDOM_006D
	inx
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN-1+STACKWIDTH,x
	jsr addAX_CX
	dex
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_0493
l_047D

; optimize OK (ai.inc), line = 16

	lda AVAILDIR
	sta @CASETMP_0004
	cmp #$04
	jne l_049E
@

; optimize OK (ai.inc), line = 17

	lda #$04
	sta NEWDIR

	jmp a_0004
l_049E
	cmp #$08
	jne l_04AB
@

; optimize OK (ai.inc), line = 18

	lda #$08
	sta NEWDIR

l_04AB
a_0004
l_0493
l_0425

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$0051
@CASETMP_0004	= DATAORIGIN+$0052

@VarData	= @CASETMP_0003
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AISAPPER					; PROCEDURE

; optimize OK (ai.inc), line = 31

	lda #$00
	sta L
	sta R
	sta U
	sta D

; optimize OK (ai.inc), line = 32

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	asl @
	tay
	lda #$00
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda #$0C
	adc adr.MUL40+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #PLY.X-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta T0W
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta T0W+1

; optimize OK (ai.inc), line = 34

	lda AVAILDIR
	and #$01
	jeq l_04F1

; optimize OK (ai.inc), line = 35

	lda #$05
	sta I0B

l_04FB
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_0509

; optimize OK (ai.inc), line = 36

	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_0523
	inc U
l_0523

; optimize OK (ai.inc), line = 37

	lda I0B
	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	lda :STACKORIGIN+9
	add #$01
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0548
	inc U
l_0548

; optimize OK (ai.inc), line = 38

	lda I0B
	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	dey
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_056D
	inc U
l_056D

; --- ForToDoEpilog
	dec I0B
	jpl l_04FB
l_0509
l_04F1

; optimize OK (ai.inc), line = 42

	lda AVAILDIR
	and #$02
	jeq l_0591

; optimize OK (ai.inc), line = 43

	lda #$05
	sta I0B

l_059B
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_05A9

; optimize OK (ai.inc), line = 44

	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_05C3
	inc D
l_05C3

; optimize OK (ai.inc), line = 45

	lda I0B
	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	lda :STACKORIGIN+9
	add #$01
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_05E8
	inc D
l_05E8

; optimize OK (ai.inc), line = 46

	lda I0B
	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	dey
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_060D
	inc D
l_060D

; --- ForToDoEpilog
	dec I0B
	jpl l_059B
l_05A9
l_0591

; optimize OK (ai.inc), line = 50

	lda AVAILDIR
	and #$04
	jeq l_0631

; optimize OK (ai.inc), line = 51

	lda #$05
	sta I0B

l_063B
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_0649

; optimize OK (ai.inc), line = 52

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0661
	inc L
l_0661

; optimize OK (ai.inc), line = 53

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	tya
	add #$28
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0684
	inc L
l_0684

; optimize OK (ai.inc), line = 54

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	tya
	sub #$28
	tay
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_06A7
	inc L
l_06A7

; --- ForToDoEpilog
	dec I0B
	jpl l_063B
l_0649
l_0631

; optimize OK (ai.inc), line = 58

	lda AVAILDIR
	and #$08
	jeq l_06CB

; optimize OK (ai.inc), line = 59

	lda #$05
	sta I0B

l_06D5
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_06E3

; optimize OK (ai.inc), line = 60

	mwy T0W :bp2
	ldy I0B
	lda (:bp2),y
	cmp #$20
	jne l_06FB
	inc R
l_06FB

; optimize OK (ai.inc), line = 61

	lda T0W
	add I0B
	tay
	lda T0W+1
	adc #$00
	sta :bp+1
	tya
	add #$28
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_071E
	inc R
l_071E

; optimize OK (ai.inc), line = 62

	lda T0W
	add I0B
	tay
	lda T0W+1
	adc #$00
	sta :bp+1
	tya
	sub #$28
	tay
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0741
	inc R
l_0741

; --- ForToDoEpilog
	dec I0B
	jpl l_06D5
l_06E3
l_06CB

; optimize OK (ai.inc), line = 66

	lda D
	sta T0B

; optimize OK (ai.inc), line = 67

	cmp U
	jcs l_0769
	lda U
	sta T0B
l_0769

; optimize OK (ai.inc), line = 68

	lda T0B
	cmp L
	jcs l_0786
	lda L
	sta T0B
l_0786

; optimize OK (ai.inc), line = 69

	lda T0B
	cmp R
	jcs l_07A3
	lda R
	sta T0B
l_07A3

; optimize OK (ai.inc), line = 71

	lda T0B
	cmp D
	jne l_07C0
	lda #$02
	sta T0B
l_07C0

; optimize OK (ai.inc), line = 72

	lda T0B
	cmp U
	jne l_07DB
	lda #$01
	sta T0B
l_07DB

; optimize OK (ai.inc), line = 73

	lda T0B
	cmp L
	jne l_07F6
	lda #$04
	sta T0B
l_07F6

; optimize OK (ai.inc), line = 74

	lda T0B
	cmp R
	jne l_0811
	lda #$08
	sta T0B
l_0811

; optimize OK (ai.inc), line = 76

	lda AVAILDIR
	and T0B
	jeq l_0830
	lda T0B
	sta NEWDIR
	jmp l_0840
l_0830

; optimize FAIL ('AISTRAIGHT', ai.inc), line = 77

	jsr AISTRAIGHT
l_0840

; ------------------------------------------------------------

L	= DATAORIGIN+$0053
R	= DATAORIGIN+$0054
U	= DATAORIGIN+$0055
D	= DATAORIGIN+$0056
@FORTMP_04F8	= $01
@FORTMP_0598	= $01
@FORTMP_0638	= $01
@FORTMP_06D2	= $01

@VarData	= L
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIBULLY						; PROCEDURE

; optimize OK (ai.inc), line = 84

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta T0B

; optimize OK (ai.inc), line = 86

	lda PLAYER1.ISALIVE
	ora PLAYER2.ISALIVE
	jeq l_085D

; optimize OK (ai.inc), line = 88

	lda PLAYER1.ISALIVE
	jeq l_086A
	lda PLAYER1
	sta TMPPLY
	lda PLAYER1+1
	sta TMPPLY+1
	jmp l_0879
l_086A
	lda PLAYER2
	sta TMPPLY
	lda PLAYER2+1
	sta TMPPLY+1
l_0879

; optimize OK (ai.inc), line = 90

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.Y-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jcs l_0892
	lda #$01
	sta T0B
	jmp l_08A0
l_0892
	lda #$02
	sta T0B
l_08A0

; optimize OK (ai.inc), line = 91

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.Y-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jeq l_08CAx
	lda AVAILDIR
	and T0B
	jne l_08CA
l_08CAx

; optimize OK (ai.inc), line = 92

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.X-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jcs l_08DF
	lda #$04
	sta T0B
	jmp l_08ED
l_08DF
	lda #$08
	sta T0B
l_08ED
l_08CA
l_085D

; optimize OK (ai.inc), line = 96

	lda AVAILDIR
	and T0B
	jeq l_090D
	lda T0B
	sta NEWDIR
	jmp l_091D
l_090D

; optimize FAIL ('AISAPPER', ai.inc), line = 97

	jsr AISAPPER
l_091D
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIMIRROR					; PROCEDURE

; optimize OK (ai.inc), line = 105

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta T0B

; optimize OK (ai.inc), line = 107

	lda PLAYER1.ISALIVE
	jeq l_0934

; optimize OK (ai.inc), line = 108

	lda PLAYER1.DIR
	sta @CASETMP_0005
	cmp #$01
	jne l_0940
@

; optimize OK (ai.inc), line = 109

	lda #$02
	sta T0B

	jmp a_0005
l_0940
	cmp #$02
	jne l_094D
@

; optimize OK (ai.inc), line = 110

	lda #$01
	sta T0B

	jmp a_0005
l_094D
	cmp #$04
	jne l_095A
@

; optimize OK (ai.inc), line = 111

	lda #$08
	sta T0B

	jmp a_0005
l_095A
	cmp #$08
	jne l_0967
@

; optimize OK (ai.inc), line = 112

	lda #$04
	sta T0B

l_0967
a_0005
l_0934

; optimize OK (ai.inc), line = 116

	lda AVAILDIR
	and T0B
	jeq l_098D
	lda T0B
	sta NEWDIR
	jmp l_099D
l_098D

; optimize FAIL ('AISAPPER', ai.inc), line = 117

	jsr AISAPPER
l_099D

; ------------------------------------------------------------

@CASETMP_0005	= DATAORIGIN+$0057

@VarData	= @CASETMP_0005
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL01					; PROCEDURE

; optimize OK (levels.inc), line = 13

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 14

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$01
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 15

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 16

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 18

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 19

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 20

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 21

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 22

	lda #$7E
	sta adr.OBSTACLES+$08
	lda #$00
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 23

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 24

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 25

	lda #$7E
	sta adr.OBSTACLES+$0E
	lda #$00
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 27

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL02					; PROCEDURE

; optimize OK (levels.inc), line = 34

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 35

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 36

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 37

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 39

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 40

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 41

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 42

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 43

	lda #$7E
	sta adr.OBSTACLES+$08
	lda #$00
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 44

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 45

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 46

	lda #$7E
	sta adr.OBSTACLES+$0E
	lda #$00
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 48

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL03					; PROCEDURE

; optimize OK (levels.inc), line = 55

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 56

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 57

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 58

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 60

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 61

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 62

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 63

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 64

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 65

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 66

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 67

	lda #$7E
	sta adr.OBSTACLES+$0E
	lda #$00
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 69

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL04					; PROCEDURE

; optimize OK (levels.inc), line = 76

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$12
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 77

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$04
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$16
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 78

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 79

	lda #$00
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 81

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 82

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 83

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 84

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 85

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 86

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 87

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 88

	lda #$F4
	sta adr.OBSTACLES+$0E
	lda #$0D
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 90

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL05					; PROCEDURE

; optimize OK (levels.inc), line = 97

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 98

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$04
	sta INITPLAYERS.BRAIN
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 99

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 100

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 102

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 103

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 104

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 105

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 106

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 107

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 108

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 109

	lda #$7E
	sta adr.OBSTACLES+$0E
	lda #$00
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 111

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL06					; PROCEDURE

; optimize OK (levels.inc), line = 118

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$12
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 119

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$16
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 120

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	sta INITPLAYERS.DIR
	lda #$06
	sta INITPLAYERS.Y
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 121

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$24
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 123

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 124

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 125

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 126

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 127

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 128

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 129

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 130

	lda #$F4
	sta adr.OBSTACLES+$0E
	lda #$0D
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 132

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL07					; PROCEDURE

; optimize OK (levels.inc), line = 139

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$12
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 140

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$17
	sta INITPLAYERS.Y
	lda #$01
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 141

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$04
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 142

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$15
	sta INITPLAYERS.Y
	lda #$24
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 144

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 145

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 146

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 147

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 148

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 149

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 150

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 151

	lda #$F4
	sta adr.OBSTACLES+$0E
	lda #$0D
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 153

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL08					; PROCEDURE

; optimize OK (levels.inc), line = 160

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$17
	sta INITPLAYERS.Y
	lda #$01
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 161

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$17
	sta INITPLAYERS.Y
	lda #$26
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 162

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	sta INITPLAYERS.DIR
	lda #$01
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 163

	lda #$01
	sta INITPLAYERS.ISALIVE
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$04
	sta INITPLAYERS.BRAIN
	sta INITPLAYERS.DIR
	lda #$01
	sta INITPLAYERS.Y
	lda #$26
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (levels.inc), line = 165

	lda #$FA
	sta adr.OBSTACLES+$00
	lda #$0C
	sta adr.OBSTACLES+1+$00

; optimize OK (levels.inc), line = 166

	lda #$0E
	sta adr.OBSTACLES+$02
	lda #$0D
	sta adr.OBSTACLES+1+$02

; optimize OK (levels.inc), line = 167

	lda #$DA
	sta adr.OBSTACLES+$04
	lda #$0E
	sta adr.OBSTACLES+1+$04

; optimize OK (levels.inc), line = 168

	lda #$EE
	sta adr.OBSTACLES+$06
	lda #$0E
	sta adr.OBSTACLES+1+$06

; optimize OK (levels.inc), line = 169

	lda #$E1
	sta adr.OBSTACLES+$08
	lda #$0D
	sta adr.OBSTACLES+1+$08

; optimize OK (levels.inc), line = 170

	lda #$64
	sta adr.OBSTACLES+$0A
	lda #$0C
	sta adr.OBSTACLES+1+$0A

; optimize OK (levels.inc), line = 171

	lda #$84
	sta adr.OBSTACLES+$0C
	lda #$0F
	sta adr.OBSTACLES+1+$0C

; optimize OK (levels.inc), line = 172

	lda #$F4
	sta adr.OBSTACLES+$0E
	lda #$0D
	sta adr.OBSTACLES+1+$0E

; optimize FAIL ('SAVEOBSTACLES', levels.inc), line = 174

	jsr SAVEOBSTACLES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HUMAN						; PROCEDURE

; optimize OK (main.pas), line = 15

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta NEWDIR

; optimize OK (main.pas), line = 16

	lda JOYSTATUS
	sta @CASETMP_0006
	cmp #$01
	jne l_0C5B
@

; optimize OK (main.pas), line = 17

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$02
	jeq l_0C6D
	lda #$01
	sta NEWDIR
l_0C6D

	jmp a_0006
l_0C5B
	cmp #$02
	jne l_0C7D
@

; optimize OK (main.pas), line = 18

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$01
	jeq l_0C8F
	lda #$02
	sta NEWDIR
l_0C8F

	jmp a_0006
l_0C7D
	cmp #$04
	jne l_0C9F
@

; optimize OK (main.pas), line = 19

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$08
	jeq l_0CB1
	lda #$04
	sta NEWDIR
l_0CB1

	jmp a_0006
l_0C9F
	cmp #$08
	jne l_0CC1
@

; optimize OK (main.pas), line = 20

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$04
	jeq l_0CD3
	lda #$08
	sta NEWDIR
l_0CD3

l_0CC1
a_0006

; optimize OK (main.pas), line = 23

	lda NEWDIR
	and AVAILDIR
	jne l_0CFA

; optimize OK (main.pas), line = 24

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda #$00
	sta (:bp2),y
	ldy #PLY.HEAD-DATAORIGIN
	lda #$2A
	sta (:bp2),y
	dec ALIVE
l_0CFA

; ------------------------------------------------------------

@CASETMP_0006	= DATAORIGIN+$0058

@VarData	= @CASETMP_0006
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERMOVE					; PROCEDURE

; optimize OK (main.pas), line = 32

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda (:bp2),y
	jeq l_0D19

; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 33

	jsr CHECKAVAILDIR

; optimize OK (main.pas), line = 35

	lda AVAILDIR
	jne l_0D2D

; optimize OK (main.pas), line = 36

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda #$00
	sta (:bp2),y
	dec ALIVE

; optimize OK (main.pas), line = 37

	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	add #$80
	sta PUTCHAR.C
	lda #$57
	sta PUTCHAR.V
	jsr PUTCHAR
	jmp l_0D4E
l_0D2D

; optimize OK (main.pas), line = 40

	mwy PLY :bp2
	ldy #PLY.BRAIN-DATAORIGIN
	lda (:bp2),y
	sta @CASETMP_0007
	cmp #$00
	jne l_0D59
@

; optimize FAIL ('HUMAN', main.pas), line = 41

	jsr HUMAN
	jmp a_0007
l_0D59
	cmp #$01
	jne l_0D63
@

; optimize FAIL ('AISTRAIGHT', main.pas), line = 42

	jsr AISTRAIGHT
	jmp a_0007
l_0D63
	cmp #$02
	jne l_0D6D
@

; optimize FAIL ('AISAPPER', main.pas), line = 43

	jsr AISAPPER
	jmp a_0007
l_0D6D
	cmp #$03
	jne l_0D77
@

; optimize FAIL ('AIBULLY', main.pas), line = 44

	jsr AIBULLY
	jmp a_0007
l_0D77
	cmp #$04
	jne l_0D81
@

; optimize FAIL ('AIMIRROR', main.pas), line = 45

	jsr AIMIRROR
l_0D81
a_0007

; optimize FAIL ('DRAWTAIL', main.pas), line = 48

	jsr DRAWTAIL
	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda NEWDIR
	sta (:bp2),y

; optimize OK (main.pas), line = 50

	lda NEWDIR
	sta @CASETMP_0008
	cmp #$01
	jne l_0D9D
@

; optimize OK (main.pas), line = 51

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y

	jmp a_0008
l_0D9D
	cmp #$02
	jne l_0DA7
@

; optimize OK (main.pas), line = 52

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

	jmp a_0008
l_0DA7
	cmp #$04
	jne l_0DB1
@

; optimize OK (main.pas), line = 53

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y

	jmp a_0008
l_0DB1
	cmp #$08
	jne l_0DBB
@

; optimize OK (main.pas), line = 54

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

l_0DBB
a_0008

; optimize OK (main.pas), line = 57

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.HEAD-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.V
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.C
	jsr PUTCHAR

; optimize OK (main.pas), line = 60

	lda PLAYER1.ISALIVE
	jne l_0DE0
	lda PLAYER1.COLOUR
	sta PUTCHAR.C
	lda #$2A
	sta PUTCHAR.V
	lda PLAYER1.Y
	sta PUTCHAR.Y
	lda PLAYER1.X
	sta PUTCHAR.X
	jsr PUTCHAR
l_0DE0
l_0D4E
l_0D19

; ------------------------------------------------------------

@CASETMP_0007	= DATAORIGIN+$0059
@CASETMP_0008	= DATAORIGIN+$005A

@VarData	= @CASETMP_0007
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STARTSCREEN					; PROCEDURE

; --- RepeatUntilProlog
l_0DF5

; optimize FAIL ('CHECKJOYSTATUS', main.pas), line = 71

	jsr CHECKJOYSTATUS
	lda JOYSTATUS
	cmp #$40
	jne l_0DF5
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINLOOP					; PROCEDURE

; optimize OK (main.pas), line = 78

	lda #$FF
	sta ALIVE

; optimize FAIL ('INITPLAYFIELD', main.pas), line = 80

	jsr INITPLAYFIELD

; optimize OK (main.pas), line = 82

	lda LEVEL
	sta @CASETMP_0009
	cmp #$01
	jne l_0E17
@

; optimize FAIL ('SETLEVEL01', main.pas), line = 83

	jsr SETLEVEL01
	jmp a_0009
l_0E17
	cmp #$02
	jne l_0E21
@

; optimize FAIL ('SETLEVEL02', main.pas), line = 84

	jsr SETLEVEL02
	jmp a_0009
l_0E21
	cmp #$03
	jne l_0E2B
@

; optimize FAIL ('SETLEVEL03', main.pas), line = 85

	jsr SETLEVEL03
	jmp a_0009
l_0E2B
	cmp #$04
	jne l_0E35
@

; optimize FAIL ('SETLEVEL04', main.pas), line = 86

	jsr SETLEVEL04
	jmp a_0009
l_0E35
	cmp #$05
	jne l_0E3F
@

; optimize FAIL ('SETLEVEL05', main.pas), line = 87

	jsr SETLEVEL05
	jmp a_0009
l_0E3F
	cmp #$06
	jne l_0E49
@

; optimize FAIL ('SETLEVEL06', main.pas), line = 88

	jsr SETLEVEL06
	jmp a_0009
l_0E49
	cmp #$07
	jne l_0E53
@

; optimize FAIL ('SETLEVEL07', main.pas), line = 89

	jsr SETLEVEL07
	jmp a_0009
l_0E53
	cmp #$08
	jne l_0E5D
@

; optimize FAIL ('SETLEVEL08', main.pas), line = 90

	jsr SETLEVEL08
l_0E5D
a_0009

; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 93

	jsr ANIMATEOBSTACLES
	jsr SHOWSCORE
	jsr STARTSCREEN

; --- RepeatUntilProlog
l_0E6E

; optimize FAIL ('SYSTEM.PAUSE_006B', main.pas), line = 96

	jsr SYSTEM.PAUSE_006B
	jsr CHECKJOYSTATUS

; optimize OK (main.pas), line = 97

	lda PLAYER1
	sta PLY
	lda PLAYER1+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 99

	lda #$02
	sta SYSTEM.PAUSE_006C.N
	lda #$00
	sta SYSTEM.PAUSE_006C.N+1
	jsr SYSTEM.PAUSE_006C

; optimize OK (main.pas), line = 100

	lda PLAYER2
	sta PLY
	lda PLAYER2+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 101

	lda PLAYER3
	sta PLY
	lda PLAYER3+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 102

	lda PLAYER4
	sta PLY
	lda PLAYER4+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 103

	jsr ANIMATEOBSTACLES

; optimize OK (main.pas), line = 104

	lda ALIVE
	jeq l_0E6Ex
	cmp #$FF
	jne l_0E6E
l_0E6Ex

; optimize OK (main.pas), line = 106

	lda PLAYER1.ISALIVE
	jeq l_0EB0
	inc PLAYER1.SCORE
l_0EB0

; optimize OK (main.pas), line = 107

	lda PLAYER2.ISALIVE
	jeq l_0EC3
	inc PLAYER2.SCORE
l_0EC3

; optimize OK (main.pas), line = 108

	lda PLAYER3.ISALIVE
	jeq l_0ED6
	inc PLAYER3.SCORE
l_0ED6

; optimize OK (main.pas), line = 109

	lda PLAYER4.ISALIVE
	jeq l_0EE9
	inc PLAYER4.SCORE
l_0EE9

; optimize OK (main.pas), line = 111

	lda #$64
	sta SYSTEM.PAUSE_006C.N
	lda #$00
	sta SYSTEM.PAUSE_006C.N+1
	jsr SYSTEM.PAUSE_006C

; ------------------------------------------------------------

@CASETMP_0009	= DATAORIGIN+$005B

@VarData	= @CASETMP_0009
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0007

; --- RepeatUntilProlog
l_0EF4

; optimize OK (main.pas), line = 118

	lda #$30
	sta PLAYER1.SCORE
	sta PLAYER2.SCORE

; optimize OK (main.pas), line = 119

	sta PLAYER3.SCORE
	sta PLAYER4.SCORE

; optimize OK (main.pas), line = 120

	lda #$01
	sta LEVEL

; optimize OK (main.pas), line = 122

	lda #$00
	sta GAMEOVER

; --- RepeatUntilProlog
l_0F0D

; optimize FAIL ('MAINLOOP', main.pas), line = 124

	jsr MAINLOOP

; optimize FAIL (0, main.pas), line = 125

	inc LEVEL
	lda LEVEL
	cmp #$08
	jne l_0F24
	lda #$05
	sta LEVEL
l_0F24

; optimize OK (main.pas), line = 126

	lda PLAYER1.SCORE
	cmp #$39
	jne l_0F3D
	lda #$01
	sta GAMEOVER
l_0F3D

; optimize OK (main.pas), line = 127

	lda PLAYER2.SCORE
	cmp #$39
	jne l_0F56
	lda #$01
	sta GAMEOVER
l_0F56

; optimize OK (main.pas), line = 128

	lda PLAYER3.SCORE
	cmp #$39
	jne l_0F6F
	lda #$01
	sta GAMEOVER
l_0F6F

; optimize OK (main.pas), line = 129

	lda PLAYER4.SCORE
	cmp #$39
	jne l_0F88
	lda #$01
	sta GAMEOVER
l_0F88

; optimize OK (main.pas), line = 130

	lda GAMEOVER
	jeq l_0F0D

; optimize FAIL ('SHOWSCORE', main.pas), line = 132

	jsr SHOWSCORE

; optimize OK (main.pas), line = 134

	lda #$C8
	sta SYSTEM.PAUSE_006C.N
	lda #$00
	sta SYSTEM.PAUSE_006C.N+1
	jsr SYSTEM.PAUSE_006C

; optimize OK (main.pas), line = 135

	jmp l_0EF4

; ------------------------------------------------------------

ATTRIBUTE_ADDR	= $0800
SCREEN_ADDR	= $0C00
VICTORIES	= $09
LOOK_AHEAD	= $05
TRASH	= $7E
EMPTY	= $20
WALL	= $A0
WALL_COLOUR	= $41
ZERO	= $30
OBSTACLE_1	= $56
OBSTACLE_2	= $5B
OBST_COLOUR	= $35
PLY_HEAD	= $51
PLY_CRASH	= $2A
PLY_BUSTED	= $57
PLY_TAIL_UD	= $42
PLY_TAIL_LR	= $40
PLY_TAIL_RD	= $7D
PLY_TAIL_RU	= $6E
PLY_TAIL_LD	= $6D
PLY_TAIL_LU	= $70
PLY1_COLOUR	= $5F
PLY2_COLOUR	= $5D
PLY3_COLOUR	= $71
PLY4_COLOUR	= $55
PLY_CTRL	= $00
AI_STRAIGHT	= $01
AI_SAPPER	= $02
AI_BULLY	= $03
AI_MIRROR	= $04
JOY_UP	= $01
JOY_DOWN	= $02
JOY_LEFT	= $04
JOY_RIGHT	= $08
JOY_FIRE	= $40
JOY_SELECT_1	= $02
JOY_SELECT_2	= $04
adr.MUL40	= CODEORIGIN+$0000
.var MUL40	= adr.MUL40 .word
adr.DIRECTION	= CODEORIGIN+$0032
.var DIRECTION	= adr.DIRECTION .word
KEYSCAN	= $FD30
JOY	= $FF08
BACKGROUND	= $FF15
BOREDER	= $FF19
VCOUNT	= $FF1D
T0B	= $58
I0B	= $59
ALIVE	= $5A
NEWDIR	= $5B
AVAILDIR	= $5C
T0W	= $5D
adr.PLY	= $5F
.var PLY	= adr.PLY .word
PLY.X	= DATAORIGIN+$0000
PLY.Y	= DATAORIGIN+$0001
PLY.HEAD	= DATAORIGIN+$0002
PLY.COLOUR	= DATAORIGIN+$0003
PLY.DIR	= DATAORIGIN+$0004
PLY.BRAIN	= DATAORIGIN+$0005
PLY.SCORE	= DATAORIGIN+$0006
PLY.ISALIVE	= DATAORIGIN+$0007
adr.TMPPLY	= $61
.var TMPPLY	= adr.TMPPLY .word
TMPPLY.X	= DATAORIGIN+$0000
TMPPLY.Y	= DATAORIGIN+$0001
TMPPLY.HEAD	= DATAORIGIN+$0002
TMPPLY.COLOUR	= DATAORIGIN+$0003
TMPPLY.DIR	= DATAORIGIN+$0004
TMPPLY.BRAIN	= DATAORIGIN+$0005
TMPPLY.SCORE	= DATAORIGIN+$0006
TMPPLY.ISALIVE	= DATAORIGIN+$0007
JOYSTATUS	= $63
LEVEL	= DATAORIGIN+$0010
GAMEOVER	= DATAORIGIN+$0011
adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
.var PLAYER1	= adr.PLAYER1 .word
PLAYER1.X	= DATAORIGIN+$0012
PLAYER1.Y	= DATAORIGIN+$0013
PLAYER1.HEAD	= DATAORIGIN+$0014
PLAYER1.COLOUR	= DATAORIGIN+$0015
PLAYER1.DIR	= DATAORIGIN+$0016
PLAYER1.BRAIN	= DATAORIGIN+$0017
PLAYER1.SCORE	= DATAORIGIN+$0018
PLAYER1.ISALIVE	= DATAORIGIN+$0019
adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
.var PLAYER2	= adr.PLAYER2 .word
PLAYER2.X	= DATAORIGIN+$001A
PLAYER2.Y	= DATAORIGIN+$001B
PLAYER2.HEAD	= DATAORIGIN+$001C
PLAYER2.COLOUR	= DATAORIGIN+$001D
PLAYER2.DIR	= DATAORIGIN+$001E
PLAYER2.BRAIN	= DATAORIGIN+$001F
PLAYER2.SCORE	= DATAORIGIN+$0020
PLAYER2.ISALIVE	= DATAORIGIN+$0021
adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
.var PLAYER3	= adr.PLAYER3 .word
PLAYER3.X	= DATAORIGIN+$0022
PLAYER3.Y	= DATAORIGIN+$0023
PLAYER3.HEAD	= DATAORIGIN+$0024
PLAYER3.COLOUR	= DATAORIGIN+$0025
PLAYER3.DIR	= DATAORIGIN+$0026
PLAYER3.BRAIN	= DATAORIGIN+$0027
PLAYER3.SCORE	= DATAORIGIN+$0028
PLAYER3.ISALIVE	= DATAORIGIN+$0029
adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
.var PLAYER4	= adr.PLAYER4 .word
PLAYER4.X	= DATAORIGIN+$002A
PLAYER4.Y	= DATAORIGIN+$002B
PLAYER4.HEAD	= DATAORIGIN+$002C
PLAYER4.COLOUR	= DATAORIGIN+$002D
PLAYER4.DIR	= DATAORIGIN+$002E
PLAYER4.BRAIN	= DATAORIGIN+$002F
PLAYER4.SCORE	= DATAORIGIN+$0030
PLAYER4.ISALIVE	= DATAORIGIN+$0031
adr.OBSTACLES	= [DATAORIGIN+$0032] .array [8] .word
.var OBSTACLES	= adr.OBSTACLES .word
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
C4P
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 92

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
.by  $C0 $03 $01 $02 $04 $08
.endm

	end
