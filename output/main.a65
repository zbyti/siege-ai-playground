; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2021/02/09] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $02

psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------
	opt h-f+
	org $1001
	org [a($1001)],$1001				; BASIC start address

	basic_start(START)
	org $100E

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_c4p.asm'

.print 'ZPAGE: ',psptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 001  ---------------------

	ldy #0
	mva (edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 016  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 017  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0056					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 019  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_006B					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 035  ---------------------


loop  lda n
  ora n+1
  beq stop

  lda:cmp:req :c4p_time+2

  dew n

  jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000C

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_006C					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; ---------------------  ASM Block 039  ---------------------


  lda ted_timer_1   //Timer A Lo byte
  eor ted_timer_1+1 //Timer A Hi byte
  eor ted_timer_2   //Timer B Lo byte
  adc ted_hcount    //Horizontal counter
  eor ted_timer_3   //Timer C Lo byte
  eor ted_hcount    //Horizontal counter
  tay

  lda range
  beq stop

  sta ecx
  sty eax

  jsr imulCL
  tay

stop  sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000E
RESULT	= DATAORIGIN+$000F

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

.local	PUTCHAR						; PROCEDURE

; optimize OK (tools.inc), line = 5

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$08
	sta T0W+1

; optimize OK (tools.inc), line = 6

	sta :bp+1
	ldy T0W
	lda C
	sta (:bp),y
	lda T0W+1
	add #$04
	sta :bp+1
	lda V
	sta (:bp),y

; ------------------------------------------------------------

X	= DATAORIGIN+$0031
Y	= DATAORIGIN+$0032
V	= DATAORIGIN+$0033
C	= DATAORIGIN+$0034

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKAVAILDIR					; PROCEDURE

; optimize OK (tools.inc), line = 13

	lda #$00
	sta AVAILDIR

; optimize OK (tools.inc), line = 14

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$0C
	sta T0W+1

; optimize OK (tools.inc), line = 16

	lda T0W
	sub #$28
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_00C6
	lda AVAILDIR
	ora #$01
	sta AVAILDIR
l_00C6

; optimize OK (tools.inc), line = 17

	mwy T0W :bp2
	ldy #$28
	lda (:bp2),y
	cmp #$20
	jne l_00E9
	lda AVAILDIR
	ora #$02
	sta AVAILDIR
l_00E9

; optimize OK (tools.inc), line = 18

	lda T0W
	sub #$01
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_010C
	lda AVAILDIR
	ora #$04
	sta AVAILDIR
l_010C

; optimize OK (tools.inc), line = 19

	mwy T0W :bp2
	ldy #$01
	lda (:bp2),y
	cmp #$20
	jne l_012F
	lda AVAILDIR
	ora #$08
	sta AVAILDIR
l_012F

; ------------------------------------------------------------

X	= DATAORIGIN+$0035
Y	= DATAORIGIN+$0036

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYERS					; PROCEDURE

; optimize OK (init.inc), line = 5

	lda P
	sta PLY
	sta :bp2
	lda P+1
	sta PLY+1
	sta :bp2+1
; optimize OK (init.inc), line = 6
	ldy #PLY.BRAIN-DATAORIGIN
	lda BRAIN
	sta (:bp2),y
	ldy #PLY.X-DATAORIGIN
	lda X
	sta (:bp2),y
	ldy #PLY.Y-DATAORIGIN
	lda Y
	sta (:bp2),y
	ldy #PLY.DIR-DATAORIGIN
	lda DIR
	sta (:bp2),y

; optimize OK (init.inc), line = 7

	ldy #PLY.HEAD-DATAORIGIN
	lda HEAD
	sta (:bp2),y
	ldy #PLY.COLOUR-DATAORIGIN
	lda COLOUR
	sta (:bp2),y
	ldy #PLY.ISDEAD-DATAORIGIN
	lda ISDEAD
	sta (:bp2),y

; ------------------------------------------------------------

P	= DATAORIGIN+$0037
X	= DATAORIGIN+$0039
Y	= DATAORIGIN+$003A
DIR	= DATAORIGIN+$003B
BRAIN	= DATAORIGIN+$003C
HEAD	= DATAORIGIN+$003D
COLOUR	= DATAORIGIN+$003E
ISDEAD	= DATAORIGIN+$003F

@VarData	= P
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYFIELD					; PROCEDURE

; optimize OK (init.inc), line = 15

	lda #$00
	sta INITPLAYERS.ISDEAD
	lda #$5F
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$00
	sta INITPLAYERS.BRAIN
	lda #$08
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$0A
	sta INITPLAYERS.X
	lda PLAYER1
	sta INITPLAYERS.P
	lda PLAYER1+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (init.inc), line = 16

	lda #$00
	sta INITPLAYERS.ISDEAD
	lda #$5D
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$02
	sta INITPLAYERS.BRAIN
	lda #$04
	sta INITPLAYERS.DIR
	lda #$0C
	sta INITPLAYERS.Y
	lda #$1E
	sta INITPLAYERS.X
	lda PLAYER2
	sta INITPLAYERS.P
	lda PLAYER2+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (init.inc), line = 17

	lda #$00
	sta INITPLAYERS.ISDEAD
	lda #$71
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$01
	sta INITPLAYERS.BRAIN
	lda #$02
	sta INITPLAYERS.DIR
	lda #$06
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER3
	sta INITPLAYERS.P
	lda PLAYER3+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (init.inc), line = 18

	lda #$00
	sta INITPLAYERS.ISDEAD
	lda #$55
	sta INITPLAYERS.COLOUR
	lda #$51
	sta INITPLAYERS.HEAD
	lda #$03
	sta INITPLAYERS.BRAIN
	lda #$01
	sta INITPLAYERS.DIR
	lda #$12
	sta INITPLAYERS.Y
	lda #$14
	sta INITPLAYERS.X
	lda PLAYER4
	sta INITPLAYERS.P
	lda PLAYER4+1
	sta INITPLAYERS.P+1
	jsr INITPLAYERS

; optimize OK (init.inc), line = 20

	lda #$1F
	sta BORDERCOLOR
	lda #$00
	sta BGCOLOR

; optimize OK (init.inc), line = 21

	lda #$20
	sta SYSTEM.FILLCHAR_0056.VALUE
	lda #$C0
	sta SYSTEM.FILLCHAR_0056.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_0056.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0056.A
	lda #$0C
	sta SYSTEM.FILLCHAR_0056.A+1
	jsr SYSTEM.FILLCHAR_0056

; optimize OK (init.inc), line = 23

	lda #$27
	sta T0B

l_01B0
; --- ForToDoCondition

; optimize OK (init.inc), line = 24

	ldy T0B
	lda #$A0
	sta $0C00,y

; optimize OK (init.inc), line = 25

	sta $0FC0,y

; optimize OK (init.inc), line = 26

	lda #$41
	sta $0800,y

; optimize OK (init.inc), line = 27

	sta $0BC0,y

; --- ForToDoEpilog
	dec T0B
	jpl l_01B0
l_01BE

; optimize OK (init.inc), line = 30

	lda #$18
	sta T0B

l_01F0
; --- ForToDoCondition
	lda T0B
	cmp #$01
	jcc l_01FE

; optimize OK (init.inc), line = 31

	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$0B
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$A0
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (init.inc), line = 32

	lda T0B
	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$07
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$41
	sta (:bp2),y
	iny
	sta (:bp2),y

; --- ForToDoEpilog
	dec T0B
	jpl l_01F0
l_01FE

; optimize OK (init.inc), line = 35

	lda PLAYER1.COLOUR
	sta PUTCHAR.C
	lda PLAYER1.HEAD
	sta PUTCHAR.V
	lda PLAYER1.Y
	sta PUTCHAR.Y
	lda PLAYER1.X
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (init.inc), line = 36

	lda PLAYER2.COLOUR
	sta PUTCHAR.C
	lda PLAYER2.HEAD
	sta PUTCHAR.V
	lda PLAYER2.Y
	sta PUTCHAR.Y
	lda PLAYER2.X
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (init.inc), line = 37

	lda PLAYER3.COLOUR
	sta PUTCHAR.C
	lda PLAYER3.HEAD
	sta PUTCHAR.V
	lda PLAYER3.Y
	sta PUTCHAR.Y
	lda PLAYER3.X
	sta PUTCHAR.X
	jsr PUTCHAR

; optimize OK (init.inc), line = 38

	lda PLAYER4.COLOUR
	sta PUTCHAR.C
	lda PLAYER4.HEAD
	sta PUTCHAR.V
	lda PLAYER4.Y
	sta PUTCHAR.Y
	lda PLAYER4.X
	sta PUTCHAR.X
	jsr PUTCHAR

; ------------------------------------------------------------

@FORTMP_01AD	= $00
@FORTMP_01ED	= $01
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AISTRAIGHT					; PROCEDURE

; optimize OK (ai.inc), line = 18

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and AVAILDIR
	jeq l_0269
	lda (:bp2),y
	sta NEWDIR
	jmp l_0279
l_0269

; optimize OK (ai.inc), line = 20

	lda AVAILDIR
	cmp #$03
	jne l_028B
	lda #$00
	jsr SYSTEM.RANDOM_006C
	lda :STACKORIGIN,x
	and #$01
	sta :STACKORIGIN,x
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_02A1
l_028B

; optimize OK (ai.inc), line = 22

	lda AVAILDIR
	sta @CASETMP_0003
	cmp #$01
	jne l_02AC
@

; optimize OK (ai.inc), line = 23

	lda #$01
	sta NEWDIR

	jmp a_0003
l_02AC
	cmp #$02
	jne l_02B9
@

; optimize OK (ai.inc), line = 24

	lda #$02
	sta NEWDIR

l_02B9
a_0003
l_02A1

; optimize OK (ai.inc), line = 27

	lda AVAILDIR
	cmp #$0C
	jne l_02D5
	lda #$00
	jsr SYSTEM.RANDOM_006C
	lda :STACKORIGIN,x
	and #$01
	sta :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN-1+STACKWIDTH,x
	jsr addAX_CX
	dex
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_02EF
l_02D5

; optimize OK (ai.inc), line = 29

	lda AVAILDIR
	sta @CASETMP_0004
	cmp #$04
	jne l_02FA
@

; optimize OK (ai.inc), line = 30

	lda #$04
	sta NEWDIR

	jmp a_0004
l_02FA
	cmp #$08
	jne l_0307
@

; optimize OK (ai.inc), line = 31

	lda #$08
	sta NEWDIR

l_0307
a_0004
l_02EF
l_0279

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$0040
@CASETMP_0004	= DATAORIGIN+$0041

@VarData	= @CASETMP_0003
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIMIRROR					; PROCEDURE

; optimize OK (ai.inc), line = 41

	lda PLAYER1.DIR
	sta @CASETMP_0005
	cmp #$01
	jne l_0320
@

; optimize OK (ai.inc), line = 42

	lda #$02
	sta T0B

	jmp a_0005
l_0320
	cmp #$02
	jne l_032D
@

; optimize OK (ai.inc), line = 43

	lda #$01
	sta T0B

	jmp a_0005
l_032D
	cmp #$04
	jne l_033A
@

; optimize OK (ai.inc), line = 44

	lda #$08
	sta T0B

	jmp a_0005
l_033A
	cmp #$08
	jne l_0347
@

; optimize OK (ai.inc), line = 45

	lda #$04
	sta T0B

l_0347
a_0005

; optimize OK (ai.inc), line = 48

	lda AVAILDIR
	and T0B
	jeq l_036B
	lda T0B
	sta NEWDIR
	jmp l_037B
l_036B

; optimize FAIL ('AISTRAIGHT', ai.inc), line = 49

	jsr AISTRAIGHT
l_037B

; ------------------------------------------------------------

@CASETMP_0005	= DATAORIGIN+$0042

@VarData	= @CASETMP_0005
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIRANDOM					; PROCEDURE

; optimize OK (ai.inc), line = 56

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta T0B

; optimize OK (ai.inc), line = 57

	lda #$00
	jsr SYSTEM.RANDOM_006C
	dex
	lda :STACKORIGIN+1,x
	and #$03
	jne l_039B
@
	lda #$04
	jsr SYSTEM.RANDOM_006C
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta T0B
	dex
l_039B

; optimize OK (ai.inc), line = 59

	lda AVAILDIR
	and T0B
	jeq l_03BE
	lda T0B
	sta NEWDIR
	jmp l_03CE
l_03BE

; optimize FAIL ('AISTRAIGHT', ai.inc), line = 60

	jsr AISTRAIGHT
l_03CE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HUMAN						; PROCEDURE

; optimize OK (main.pas), line = 14

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta NEWDIR

; optimize OK (main.pas), line = 15

	lda #$02
	sta JOY
	lda #$FF
	sta KEY_PIO
	lda JOY
	eor #$FF
	sta T0B

; optimize OK (main.pas), line = 17

	sta @CASETMP_0006
	cmp #$01
	jne l_03F6
@

; optimize OK (main.pas), line = 18

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$02
	jeq l_0408
	lda #$01
	sta NEWDIR
l_0408

	jmp a_0006
l_03F6
	cmp #$02
	jne l_0418
@

; optimize OK (main.pas), line = 19

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$01
	jeq l_042A
	lda #$02
	sta NEWDIR
l_042A

	jmp a_0006
l_0418
	cmp #$04
	jne l_043A
@

; optimize OK (main.pas), line = 20

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$08
	jeq l_044C
	lda #$04
	sta NEWDIR
l_044C

	jmp a_0006
l_043A
	cmp #$08
	jne l_045C
@

; optimize OK (main.pas), line = 21

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$04
	jeq l_046E
	lda #$08
	sta NEWDIR
l_046E

l_045C
a_0006

; optimize OK (main.pas), line = 24

	lda NEWDIR
	and AVAILDIR
	jne l_0495

; optimize OK (main.pas), line = 25

	mwy PLY :bp2
	ldy #PLY.ISDEAD-DATAORIGIN
	lda #$01
	sta (:bp2),y
	ldy #PLY.HEAD-DATAORIGIN
	lda #$57
	sta (:bp2),y
	dec ALIVE
l_0495

; ------------------------------------------------------------

@CASETMP_0006	= DATAORIGIN+$0043

@VarData	= @CASETMP_0006
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERMOVE					; PROCEDURE

; optimize OK (main.pas), line = 33

	lda P
	sta PLY
	sta :bp2
	lda P+1
	sta PLY+1
	sta :bp2+1
; optimize OK (main.pas), line = 35
	ldy #PLY.ISDEAD-DATAORIGIN
	lda (:bp2),y
	jne l_04BC

; optimize OK (main.pas), line = 37

	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta CHECKAVAILDIR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta CHECKAVAILDIR.Y
	jsr CHECKAVAILDIR

; optimize OK (main.pas), line = 39

	lda AVAILDIR
	jne l_04D6

; optimize OK (main.pas), line = 40

	mwy PLY :bp2
	ldy #PLY.ISDEAD-DATAORIGIN
	lda #$01
	sta (:bp2),y
	dec ALIVE

; optimize OK (main.pas), line = 41

	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	add #$80
	sta PUTCHAR.C
	lda #$57
	sta PUTCHAR.V
	jsr PUTCHAR
	jmp l_04F7
l_04D6

; optimize OK (main.pas), line = 44

	mwy PLY :bp2
	ldy #PLY.BRAIN-DATAORIGIN
	lda (:bp2),y
	sta @CASETMP_0007
	cmp #$00
	jne l_0502
@

; optimize FAIL ('HUMAN', main.pas), line = 45

	jsr HUMAN
	jmp a_0007
l_0502
	cmp #$01
	jne l_050C
@

; optimize FAIL ('AISTRAIGHT', main.pas), line = 46

	jsr AISTRAIGHT
	jmp a_0007
l_050C
	cmp #$02
	jne l_0516
@

; optimize FAIL ('AIMIRROR', main.pas), line = 47

	jsr AIMIRROR
	jmp a_0007
l_0516
	cmp #$03
	jne l_0520
@

; optimize FAIL ('AIRANDOM', main.pas), line = 48

	jsr AIRANDOM
l_0520
a_0007

; optimize OK (main.pas), line = 51

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp NEWDIR
	jne l_053D

; optimize OK (main.pas), line = 52

	lda NEWDIR
	and #$0C
	jeq l_0554
	lda #$40
	sta T0B
	jmp l_0562
l_0554
	lda #$42
	sta T0B
l_0562
	jmp l_056F
l_053D

; optimize OK (main.pas), line = 54

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$0A
	jeq l_0595
	lda NEWDIR
	and #$05
	jeq l_0595
	lda #$7D
	sta T0B
l_0595

; optimize OK (main.pas), line = 55

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$09
	jeq l_05C2
	lda NEWDIR
	and #$06
	jeq l_05C2
	lda #$6E
	sta T0B
l_05C2

; optimize OK (main.pas), line = 56

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$06
	jeq l_05EF
	lda NEWDIR
	and #$09
	jeq l_05EF
	lda #$6D
	sta T0B
l_05EF

; optimize OK (main.pas), line = 57

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$05
	jeq l_061C
	lda NEWDIR
	and #$0A
	jeq l_061C
	lda #$70
	sta T0B
l_061C
l_056F

; optimize OK (main.pas), line = 59

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.C
	lda T0B
	sta PUTCHAR.V
	jsr PUTCHAR

; optimize OK (main.pas), line = 61

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda NEWDIR
	sta (:bp2),y

; optimize OK (main.pas), line = 63

	lda NEWDIR
	sta @CASETMP_0008
	cmp #$01
	jne l_0641
@

; optimize OK (main.pas), line = 64

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y

	jmp a_0008
l_0641
	cmp #$02
	jne l_064B
@

; optimize OK (main.pas), line = 65

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

	jmp a_0008
l_064B
	cmp #$04
	jne l_0655
@

; optimize OK (main.pas), line = 66

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y

	jmp a_0008
l_0655
	cmp #$08
	jne l_065F
@

; optimize OK (main.pas), line = 67

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

l_065F
a_0008

; optimize OK (main.pas), line = 70

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.Y
	ldy #PLY.HEAD-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.V
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR.C
	jsr PUTCHAR
l_04F7
l_04BC

; ------------------------------------------------------------

P	= DATAORIGIN+$0044
@CASETMP_0007	= DATAORIGIN+$0046
@CASETMP_0008	= DATAORIGIN+$0047

@VarData	= P
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STARTSCREEN					; PROCEDURE

; --- RepeatUntilProlog
l_067C

; optimize OK (main.pas), line = 82

	lda #$02
	sta JOY
	lda #$FF
	sta KEY_PIO
	lda JOY
	eor #$FF
	sta T0B

; optimize OK (main.pas), line = 83

	cmp #$40
	jne l_067C
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINLOOP					; PROCEDURE

; optimize FAIL ('INITPLAYFIELD', main.pas), line = 90

	jsr INITPLAYFIELD

; optimize FAIL ('STARTSCREEN', main.pas), line = 91

	jsr STARTSCREEN

; optimize OK (main.pas), line = 93

	lda #$03
	sta ALIVE

; --- RepeatUntilProlog
l_06A6

; optimize OK (main.pas), line = 95

	lda #$04
	sta SYSTEM.PAUSE_006B.N
	lda #$00
	sta SYSTEM.PAUSE_006B.N+1
	jsr SYSTEM.PAUSE_006B

; optimize OK (main.pas), line = 96

	lda PLAYER1
	sta PLAYERMOVE.P
	lda PLAYER1+1
	sta PLAYERMOVE.P+1
	jsr PLAYERMOVE
	lda PLAYER2
	sta PLAYERMOVE.P
	lda PLAYER2+1
	sta PLAYERMOVE.P+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 97

	lda PLAYER3
	sta PLAYERMOVE.P
	lda PLAYER3+1
	sta PLAYERMOVE.P+1
	jsr PLAYERMOVE
	lda PLAYER4
	sta PLAYERMOVE.P
	lda PLAYER4+1
	sta PLAYERMOVE.P+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 98

	lda ALIVE
	jeq l_06A6x
	cmp #$FF
	jne l_06A6
l_06A6x

; optimize OK (main.pas), line = 100

	lda #$64
	sta SYSTEM.PAUSE_006B.N
	lda #$00
	sta SYSTEM.PAUSE_006B.N+1
	jsr SYSTEM.PAUSE_006B
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0007

; --- RepeatUntilProlog
l_06D1

; optimize FAIL ('MAINLOOP', main.pas), line = 106

	jsr MAINLOOP
	jmp l_06D1

; ------------------------------------------------------------

ATTRIBUTE_ADDR	= $0800
SCREEN_ADDR	= $0C00
EMPTY	= $20
WALL	= $A0
WALL_COLOUR	= $41
PLY_HEAD	= $51
PLY_CRASH	= $57
PLY_TAIL_UD	= $42
PLY_TAIL_LR	= $40
PLY_TAIL_RD	= $7D
PLY_TAIL_RU	= $6E
PLY_TAIL_LD	= $6D
PLY_TAIL_LU	= $70
PLY1_COLOUR	= $5F
PLY2_COLOUR	= $5D
PLY3_COLOUR	= $71
PLY4_COLOUR	= $55
PLY_CTRL	= $00
AI_STRAIGHT	= $01
AI_MIRROR	= $02
AI_RANDOM	= $03
JOY_UP	= $01
JOY_DOWN	= $02
JOY_LEFT	= $04
JOY_RIGHT	= $08
JOY_FIRE	= $40
JOY_SELECT_1	= $02
JOY_SELECT_2	= $04
adr.MUL40	= CODEORIGIN+$0000
.var MUL40	= adr.MUL40 .word
adr.DIRECTION	= CODEORIGIN+$0032
.var DIRECTION	= adr.DIRECTION .word
KEY_PIO	= $FD30
JOY	= $FF08
BORDERCOLOR	= $FF15
BGCOLOR	= $FF19
T0B	= $58
NEWDIR	= $59
T0W	= $5A
AVAILDIR	= DATAORIGIN+$0010
ALIVE	= DATAORIGIN+$0011
SPEED	= DATAORIGIN+$0012
PLY	= DATAORIGIN+$0013
PLY.X	= DATAORIGIN+$0000
PLY.Y	= DATAORIGIN+$0001
PLY.HEAD	= DATAORIGIN+$0002
PLY.COLOUR	= DATAORIGIN+$0003
PLY.DIR	= DATAORIGIN+$0004
PLY.BRAIN	= DATAORIGIN+$0005
PLY.ISDEAD	= DATAORIGIN+$0006
adr.PLAYER1	= [DATAORIGIN+$0015] .array [6]
.var PLAYER1	= adr.PLAYER1 .word
PLAYER1.X	= DATAORIGIN+$0015
PLAYER1.Y	= DATAORIGIN+$0016
PLAYER1.HEAD	= DATAORIGIN+$0017
PLAYER1.COLOUR	= DATAORIGIN+$0018
PLAYER1.DIR	= DATAORIGIN+$0019
PLAYER1.BRAIN	= DATAORIGIN+$001A
PLAYER1.ISDEAD	= DATAORIGIN+$001B
adr.PLAYER2	= [DATAORIGIN+$001C] .array [6]
.var PLAYER2	= adr.PLAYER2 .word
PLAYER2.X	= DATAORIGIN+$001C
PLAYER2.Y	= DATAORIGIN+$001D
PLAYER2.HEAD	= DATAORIGIN+$001E
PLAYER2.COLOUR	= DATAORIGIN+$001F
PLAYER2.DIR	= DATAORIGIN+$0020
PLAYER2.BRAIN	= DATAORIGIN+$0021
PLAYER2.ISDEAD	= DATAORIGIN+$0022
adr.PLAYER3	= [DATAORIGIN+$0023] .array [6]
.var PLAYER3	= adr.PLAYER3 .word
PLAYER3.X	= DATAORIGIN+$0023
PLAYER3.Y	= DATAORIGIN+$0024
PLAYER3.HEAD	= DATAORIGIN+$0025
PLAYER3.COLOUR	= DATAORIGIN+$0026
PLAYER3.DIR	= DATAORIGIN+$0027
PLAYER3.BRAIN	= DATAORIGIN+$0028
PLAYER3.ISDEAD	= DATAORIGIN+$0029
adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
.var PLAYER4	= adr.PLAYER4 .word
PLAYER4.X	= DATAORIGIN+$002A
PLAYER4.Y	= DATAORIGIN+$002B
PLAYER4.HEAD	= DATAORIGIN+$002C
PLAYER4.COLOUR	= DATAORIGIN+$002D
PLAYER4.DIR	= DATAORIGIN+$002E
PLAYER4.BRAIN	= DATAORIGIN+$002F
PLAYER4.ISDEAD	= DATAORIGIN+$0030
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
C4P
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 72

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
.by  $C0 $03 $01 $02 $04 $08
.endm

	end
