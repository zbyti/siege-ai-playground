; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.5 [2021/02/18] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $02

psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------
	opt h-f+
	org $1001
	org [a($1001)],$1001				; BASIC start address

	basic_start(START)
	org $100E

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_c4p.asm'

.print 'ZPAGE: ',psptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_001F

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 001  ---------------------

	ldy #0
	mva (edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 016  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 017  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_006E					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 019  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_006F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 026  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_0070					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ---------------------  ASM Block 028  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_0085					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 034  ---------------------

 lda:cmp:req :c4p_time+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_0086					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 035  ---------------------


loop  lda n
  ora n+1
  beq stop

  lda:cmp:req :c4p_time+2

  dew n

  jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000C

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_0087					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; ---------------------  ASM Block 039  ---------------------


  lda ted_timer_1   //Timer A Lo byte
  eor ted_timer_1+1 //Timer A Hi byte
  eor ted_timer_2   //Timer B Lo byte
  adc ted_hcount    //Horizontal counter
  eor ted_timer_3   //Timer C Lo byte
  eor ted_hcount    //Horizontal counter
  tay

  lda range
  beq stop

  sta ecx
  sty eax

  jsr imulCL
  tay

stop  sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000E
RESULT	= DATAORIGIN+$000F

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

.local	PUTCHAR_008C					; PROCEDURE | OVERLOAD

; optimize OK (tools.inc), line = 5

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$0C
	sta T0W+1
	ldy T0W+1
	sty :bp+1
	ldy T0W
	lda V
	sta (:bp),y

; ------------------------------------------------------------

X	= DATAORIGIN+$0032
Y	= DATAORIGIN+$0033
V	= DATAORIGIN+$0034

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRINTXY						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta C
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta Y
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta X
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex

; optimize OK (tools.inc), line = 12

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$0C
	sta T0W+1

; optimize OK (tools.inc), line = 14

	lda <adr.S+$01
	sta SYSTEM.MOVE_0070.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_0070.SOURCE+1
	lda adr.S
	sta SYSTEM.MOVE_0070.COUNT
	lda #$00
	sta SYSTEM.MOVE_0070.COUNT+1
	lda T0W
	sta SYSTEM.MOVE_0070.DEST
	lda T0W+1
	sta SYSTEM.MOVE_0070.DEST+1
	jsr SYSTEM.MOVE_0070

; optimize OK (tools.inc), line = 15

	lda T0W
	sta SYSTEM.FILLCHAR_006E.A
	lda T0W+1
	sub #$04
	sta SYSTEM.FILLCHAR_006E.A+1
	lda adr.S
	sta SYSTEM.FILLCHAR_006E.COUNT
	lda C
	sta SYSTEM.FILLCHAR_006E.VALUE
	lda #$00
	sta SYSTEM.FILLCHAR_006E.COUNT+1
	jsr SYSTEM.FILLCHAR_006E

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0035] .array [256]
.var S	= adr.S .word
X	= DATAORIGIN+$0135
Y	= DATAORIGIN+$0136
C	= DATAORIGIN+$0137

@VarData	= S
@VarDataSize	= 259

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTCHAR_00D8					; PROCEDURE | OVERLOAD

; optimize OK (tools.inc), line = 23

	lda Y
	asl @
	tay
	lda adr.MUL40,y
	add X
	sta T0W
	lda adr.MUL40+1,y
	adc #$08
	sta T0W+1

; optimize OK (tools.inc), line = 24

	sta :bp+1
	ldy T0W
	lda C
	sta (:bp),y
	lda T0W+1
	add #$04
	sta :bp+1
	lda V
	sta (:bp),y

; ------------------------------------------------------------

X	= DATAORIGIN+$0138
Y	= DATAORIGIN+$0139
V	= DATAORIGIN+$013A
C	= DATAORIGIN+$013B

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSCORE					; PROCEDURE

; optimize OK (tools.inc), line = 39

	lda PLAYER1.ISALIVE
	jeq l_010D
	lda PLAYER1.COLOUR
	sta PUTCHAR_00D8.C
	lda PLAYER1.SCORE
	sta PUTCHAR_00D8.V
	lda #$00
	sta PUTCHAR_00D8.Y
	lda #$1E
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8
l_010D

; optimize OK (tools.inc), line = 40

	lda PLAYER2.ISALIVE
	jeq l_0125
	lda PLAYER2.COLOUR
	sta PUTCHAR_00D8.C
	lda PLAYER2.SCORE
	sta PUTCHAR_00D8.V
	lda #$00
	sta PUTCHAR_00D8.Y
	lda #$20
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8
l_0125

; optimize OK (tools.inc), line = 41

	lda PLAYER3.ISALIVE
	jeq l_013D
	lda PLAYER3.COLOUR
	sta PUTCHAR_00D8.C
	lda PLAYER3.SCORE
	sta PUTCHAR_00D8.V
	lda #$00
	sta PUTCHAR_00D8.Y
	lda #$22
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8
l_013D

; optimize OK (tools.inc), line = 42

	lda PLAYER4.ISALIVE
	jeq l_0155
	lda PLAYER4.COLOUR
	sta PUTCHAR_00D8.C
	lda PLAYER4.SCORE
	sta PUTCHAR_00D8.V
	lda #$00
	sta PUTCHAR_00D8.Y
	lda #$24
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8
l_0155
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATESCORE					; PROCEDURE

; optimize OK (tools.inc), line = 49

	lda PLAYER1.ISALIVE
	jeq l_0171
	inc PLAYER1.SCORE
l_0171

; optimize OK (tools.inc), line = 50

	lda PLAYER2.ISALIVE
	jeq l_0184
	inc PLAYER2.SCORE
l_0184

; optimize OK (tools.inc), line = 51

	lda PLAYER3.ISALIVE
	jeq l_0197
	inc PLAYER3.SCORE
l_0197

; optimize OK (tools.inc), line = 52

	lda PLAYER4.ISALIVE
	jeq l_01AA
	inc PLAYER4.SCORE
l_01AA
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKAVAILDIR					; PROCEDURE

; optimize OK (tools.inc), line = 59

	lda #$00
	sta AVAILDIR

; optimize OK (tools.inc), line = 60

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	asl @
	tay
	lda #$00
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda #$0C
	adc adr.MUL40+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #PLY.X-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta T0W
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta T0W+1

; optimize OK (tools.inc), line = 62

	lda T0W
	sub #$28
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_01E1
	lda AVAILDIR
	ora #$01
	sta AVAILDIR
l_01E1

; optimize OK (tools.inc), line = 63

	mwy T0W :bp2
	ldy #$28
	lda (:bp2),y
	cmp #$20
	jne l_0204
	lda AVAILDIR
	ora #$02
	sta AVAILDIR
l_0204

; optimize OK (tools.inc), line = 64

	lda T0W
	sub #$01
	sta :STACKORIGIN+9
	lda T0W+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_0227
	lda AVAILDIR
	ora #$04
	sta AVAILDIR
l_0227

; optimize OK (tools.inc), line = 65

	mwy T0W :bp2
	ldy #$01
	lda (:bp2),y
	cmp #$20
	jne l_024A
	lda AVAILDIR
	ora #$08
	sta AVAILDIR
l_024A
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ANIMATEOBSTACLES				; PROCEDURE

; optimize FAIL (0, tools.inc), line = 74

	inc COUNTER

; optimize OK (tools.inc), line = 75

	lda COUNTER
	and #$01
	jeq l_0275
	lda #$54
	sta OBST
	jmp l_0283
l_0275
	lda #$55
	sta OBST
l_0283

; optimize OK (tools.inc), line = 76

	lda #$07
	sta I0B

l_0290
; --- ForToDoCondition
	lda I0B
	asl @
	tay
	lda adr.OBSTACLES,y
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda OBST
	sta (:bp),y
	dec I0B
	jpl l_0290
l_029E

; ------------------------------------------------------------

COUNTER	= DATAORIGIN+$013C
OBST	= DATAORIGIN+$013D
@FORTMP_028D	= $00

@VarData	= COUNTER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CALCOBSTACLEADDR				; FUNCTION

; optimize OK (tools.inc), line = 83

	lda Y
	asl @
	tay
	lda X
	add adr.MUL40,y
	sta RESULT
	lda #$0C
	adc adr.MUL40+1,y
	sta RESULT+1
@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

X	= DATAORIGIN+$013E
Y	= DATAORIGIN+$013F
RESULT	= DATAORIGIN+$0140

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	SAVEOBSTACLES					; PROCEDURE

; optimize OK (tools.inc), line = 90

	lda #$07
	sta I0B

l_02D1
; --- ForToDoCondition

; optimize OK (tools.inc), line = 91

	lda I0B
	asl @
	tay
	lda adr.OBSTACLES+1,y
	cmp #$00
	bne @+
	lda adr.OBSTACLES,y
	cmp #$5E
@
	jeq l_02F3

; optimize OK (tools.inc), line = 92

	lda adr.OBSTACLES,y
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda #$54
	sta (:bp),y

; optimize OK (tools.inc), line = 93

	lda I0B
	asl @
	tay
	lda adr.OBSTACLES,y
	sub #$00
	sta :STACKORIGIN+9
	lda adr.OBSTACLES+1,y
	sbc #$04
	sta :bp+1
	ldy :STACKORIGIN+9
	lda #$65
	sta (:bp),y
l_02F3

; --- ForToDoEpilog
	dec I0B
	jpl l_02D1
l_02DF

; ------------------------------------------------------------

@FORTMP_02CE	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWPLAYER					; PROCEDURE

; optimize OK (tools.inc), line = 102

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp NEWDIR
	jne l_0325

; optimize OK (tools.inc), line = 103

	lda NEWDIR
	and #$0C
	jeq l_033C
	lda #$40
	sta T0B
	jmp l_034A
l_033C
	lda #$42
	sta T0B
l_034A
	jmp l_0357
l_0325

; optimize OK (tools.inc), line = 105

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$0A
	jeq l_037D
	lda NEWDIR
	and #$05
	jeq l_037D
	lda #$7D
	sta T0B
l_037D

; optimize OK (tools.inc), line = 106

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$09
	jeq l_03AA
	lda NEWDIR
	and #$06
	jeq l_03AA
	lda #$6E
	sta T0B
l_03AA

; optimize OK (tools.inc), line = 107

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$06
	jeq l_03D7
	lda NEWDIR
	and #$09
	jeq l_03D7
	lda #$6D
	sta T0B
l_03D7

; optimize OK (tools.inc), line = 108

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and #$05
	jeq l_0404
	lda NEWDIR
	and #$0A
	jeq l_0404
	lda #$70
	sta T0B
l_0404
l_0357

; optimize OK (tools.inc), line = 110

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_008C.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_008C.Y
	lda T0B
	sta PUTCHAR_008C.V
	jsr PUTCHAR_008C

; optimize OK (tools.inc), line = 112

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda NEWDIR
	sta (:bp2),y

; optimize OK (tools.inc), line = 114

	lda NEWDIR
	sta @CASETMP_0003
	cmp #$01
	jne l_0426
@

; optimize OK (tools.inc), line = 115

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y
	lda #$50
	sta T0B

	jmp a_0003
l_0426
	cmp #$02
	jne l_0434
@

; optimize OK (tools.inc), line = 116

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	lda #$53
	sta T0B

	jmp a_0003
l_0434
	cmp #$04
	jne l_0442
@

; optimize OK (tools.inc), line = 117

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sub #$01
	sta (:bp2),y
	lda #$51
	sta T0B

	jmp a_0003
l_0442
	cmp #$08
	jne l_0450
@

; optimize OK (tools.inc), line = 118

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	lda #$52
	sta T0B

l_0450
a_0003

; optimize OK (tools.inc), line = 121

	mwy PLY :bp2
	ldy #PLY.HEAD-DATAORIGIN
	lda T0B
	sta (:bp2),y

; optimize OK (tools.inc), line = 123

	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.Y
	ldy #PLY.HEAD-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.V
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.C
	jsr PUTCHAR_00D8

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$0142

@VarData	= @CASETMP_0003
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERBUSTED					; PROCEDURE

; optimize OK (tools.inc), line = 130

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda #$00
	sta (:bp2),y
	dec ALIVE

; optimize OK (tools.inc), line = 131

	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.X
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.Y
	ldy #PLY.HEAD-DATAORIGIN
	lda (:bp2),y
	sta PUTCHAR_00D8.V
	ldy #PLY.COLOUR-DATAORIGIN
	lda (:bp2),y
	add #$80
	sta PUTCHAR_00D8.C
	jsr PUTCHAR_00D8
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKJOYSTATUS					; PROCEDURE

; optimize OK (tools.inc), line = 138

	lda #$02
	sta JOY
	lda #$FF
	sta KEYSCAN

; optimize OK (tools.inc), line = 139

	lda JOY
	eor #$FF
	sta JOYSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPLAYER					; PROCEDURE

; optimize OK (tools.inc), line = 146

	lda P
	sta PLY
	lda P+1
	sta PLY+1

; optimize OK (tools.inc), line = 148

	lda DIR
	sta @CASETMP_0004
	cmp #$01
	jne l_04B7
@

; optimize OK (tools.inc), line = 149

	lda #$50
	sta T0B

	jmp a_0004
l_04B7
	cmp #$02
	jne l_04C4
@

; optimize OK (tools.inc), line = 150

	lda #$53
	sta T0B

	jmp a_0004
l_04C4
	cmp #$04
	jne l_04D1
@

; optimize OK (tools.inc), line = 151

	lda #$51
	sta T0B

	jmp a_0004
l_04D1
	cmp #$08
	jne l_04DE
@

; optimize OK (tools.inc), line = 152

	lda #$52
	sta T0B

l_04DE
a_0004

; optimize OK (tools.inc), line = 155

	mwy PLY :bp2
	ldy #PLY.BRAIN-DATAORIGIN
	lda BRAIN
	sta (:bp2),y
	ldy #PLY.X-DATAORIGIN
	lda X
	sta (:bp2),y
	ldy #PLY.Y-DATAORIGIN
	lda Y
	sta (:bp2),y
	ldy #PLY.DIR-DATAORIGIN
	lda DIR
	sta (:bp2),y

; optimize OK (tools.inc), line = 156

	ldy #PLY.HEAD-DATAORIGIN
	lda T0B
	sta (:bp2),y
	ldy #PLY.COLOUR-DATAORIGIN
	lda COLOUR
	sta (:bp2),y
	ldy #PLY.ISALIVE-DATAORIGIN
	lda ISALIVE
	sta (:bp2),y

; optimize OK (tools.inc), line = 157

	lda ISALIVE
	jeq l_0520

; optimize FAIL (0, tools.inc), line = 158

	inc ALIVE
	lda COLOUR
	sta PUTCHAR_00D8.C
	lda T0B
	sta PUTCHAR_00D8.V
	lda Y
	sta PUTCHAR_00D8.Y
	lda X
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8
l_0520

; ------------------------------------------------------------

P	= DATAORIGIN+$0143
X	= DATAORIGIN+$0145
Y	= DATAORIGIN+$0146
DIR	= DATAORIGIN+$0147
BRAIN	= DATAORIGIN+$0148
COLOUR	= DATAORIGIN+$0149
ISALIVE	= DATAORIGIN+$014A
@CASETMP_0004	= DATAORIGIN+$014B

@VarData	= P
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTLEVEL					; PROCEDURE

; optimize FAIL (0, tools.inc), line = 166

	inc LEVEL
	lda LEVEL
	cmp #$08
	jne l_054E
	lda #$05
	sta LEVEL
l_054E
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STARTSCREEN					; PROCEDURE

; optimize FAIL ('PRINTXY', tools.inc), line = 175

	inx
	mva INFO :STACKORIGIN,x
	mva INFO+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	jsr PRINTXY

; optimize OK (tools.inc), line = 176

	lda PLAYER1.COLOUR
	add #$80
	sta PUTCHAR_00D8.C
	lda PLAYER1.HEAD
	sta PUTCHAR_00D8.V
	lda PLAYER1.Y
	sta PUTCHAR_00D8.Y
	lda PLAYER1.X
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8

; --- RepeatUntilProlog
l_0571

; optimize FAIL ('CHECKJOYSTATUS', tools.inc), line = 178

	jsr CHECKJOYSTATUS
	lda JOYSTATUS
	cmp #$40
	jne l_0571

; optimize OK (tools.inc), line = 180

	lda adr.INFO
	sta SYSTEM.FILLCHAR_006E.COUNT
	lda #$A0
	sta SYSTEM.FILLCHAR_006E.VALUE
	lda #$00
	sta SYSTEM.FILLCHAR_006E.COUNT+1
	lda #$02
	sta SYSTEM.FILLCHAR_006E.A
	lda #$0C
	sta SYSTEM.FILLCHAR_006E.A+1
	jsr SYSTEM.FILLCHAR_006E

; optimize OK (tools.inc), line = 181

	lda adr.INFO
	sta SYSTEM.FILLCHAR_006E.COUNT
	lda #$41
	sta SYSTEM.FILLCHAR_006E.VALUE
	lda #$00
	sta SYSTEM.FILLCHAR_006E.COUNT+1
	lda #$02
	sta SYSTEM.FILLCHAR_006E.A
	lda #$08
	sta SYSTEM.FILLCHAR_006E.A+1
	jsr SYSTEM.FILLCHAR_006E

; optimize OK (tools.inc), line = 182

	lda PLAYER1.COLOUR
	sta PUTCHAR_00D8.C
	lda PLAYER1.HEAD
	sta PUTCHAR_00D8.V
	lda PLAYER1.Y
	sta PUTCHAR_00D8.Y
	lda PLAYER1.X
	sta PUTCHAR_00D8.X
	jsr PUTCHAR_00D8

; ------------------------------------------------------------

adr.INFO	= [DATAORIGIN+$014C] .array [256]
.var INFO	= adr.INFO .word

@VarData	= INFO
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENDSCREEN					; PROCEDURE

; optimize OK (tools.inc), line = 192

	lda PLAYER1.SCORE
	cmp #$39
	jne l_05A8
	inx
	mva WINNER :STACKORIGIN,x
	mva WINNER+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	jsr PRINTXY
	jmp l_05B8
l_05A8

; optimize FAIL ('PRINTXY', tools.inc), line = 193

	inx
	mva LOSER :STACKORIGIN,x
	mva LOSER+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	jsr PRINTXY
l_05B8

; ------------------------------------------------------------

adr.WINNER	= [DATAORIGIN+$024C] .array [256]
.var WINNER	= adr.WINNER .word
adr.LOSER	= [DATAORIGIN+$034C] .array [256]
.var LOSER	= adr.LOSER .word

@VarData	= WINNER
@VarDataSize	= 512

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ISGAMEOVER					; FUNCTION

; optimize OK (tools.inc), line = 200

	lda PLAYER1.SCORE
	cmp #$39
	jne l_05D4
	lda #$01
	sta GAMEOVER
l_05D4

; optimize OK (tools.inc), line = 201

	lda PLAYER2.SCORE
	cmp #$39
	jne l_05ED
	lda #$01
	sta GAMEOVER
l_05ED

; optimize OK (tools.inc), line = 202

	lda PLAYER3.SCORE
	cmp #$39
	jne l_0606
	lda #$01
	sta GAMEOVER
l_0606

; optimize OK (tools.inc), line = 203

	lda PLAYER4.SCORE
	cmp #$39
	jne l_061F
	lda #$01
	sta GAMEOVER
l_061F

; optimize OK (tools.inc), line = 204

	lda GAMEOVER
	sta RESULT
@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$044C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	ISONELEFT					; FUNCTION

; optimize OK (tools.inc), line = 211

	ldy #1
	lda ALIVE
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda ALIVE
	cmp #$FF
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta RESULT
@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$044D

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	SETFONTS					; PROCEDURE

; optimize OK (tools.inc), line = 226

	lda #$00
	sta SYSTEM.MOVE_006F.COUNT
	lda #$04
	sta SYSTEM.MOVE_006F.COUNT+1
	lda #$00
	sta SYSTEM.MOVE_006F.DEST
	lda #$60
	sta SYSTEM.MOVE_006F.DEST+1
	lda #$00
	sta SYSTEM.MOVE_006F.SOURCE
	lda #$D0
	sta SYSTEM.MOVE_006F.SOURCE+1
	jsr SYSTEM.MOVE_006F

; optimize OK (tools.inc), line = 227

	lda FONTS
	sta :bp2
	lda FONTS+1
	sta :bp2+1
	ldy #$2F
	mva:rpl (:bp2),y $6280,y-

; optimize OK (tools.inc), line = 230

	lda RAMROMSEL
	and #$FB
	sta RAMROMSEL

; optimize OK (tools.inc), line = 233

	lda CHBAS
	and #$03
	sta :STACKORIGIN+9
	lda #$18
	asl @
	asl @
	ora :STACKORIGIN+9
	sta CHBAS

; ------------------------------------------------------------

adr.FONTS	= [DATAORIGIN+$044E] .array [48]
.var FONTS	= adr.FONTS .word

@VarData	= FONTS
@VarDataSize	= 48

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HUMAN						; PROCEDURE

; optimize FAIL ('CHECKJOYSTATUS', ai.inc), line = 5

	jsr CHECKJOYSTATUS
	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta NEWDIR

; optimize OK (ai.inc), line = 6

	lda JOYSTATUS
	sta @CASETMP_0005
	cmp #$01
	jne l_068D
@

; optimize OK (ai.inc), line = 7

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$02
	jeq l_069F
	lda #$01
	sta NEWDIR
l_069F

	jmp a_0005
l_068D
	cmp #$02
	jne l_06AF
@

; optimize OK (ai.inc), line = 8

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$01
	jeq l_06C1
	lda #$02
	sta NEWDIR
l_06C1

	jmp a_0005
l_06AF
	cmp #$04
	jne l_06D1
@

; optimize OK (ai.inc), line = 9

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$08
	jeq l_06E3
	lda #$04
	sta NEWDIR
l_06E3

	jmp a_0005
l_06D1
	cmp #$08
	jne l_06F3
@

; optimize OK (ai.inc), line = 10

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	cmp #$04
	jeq l_0705
	lda #$08
	sta NEWDIR
l_0705

l_06F3
a_0005

; optimize OK (ai.inc), line = 13

	lda NEWDIR
	and AVAILDIR
	jne l_072C

; optimize OK (ai.inc), line = 14

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda #$00
	sta (:bp2),y
	dec ALIVE
l_072C

; ------------------------------------------------------------

@CASETMP_0005	= DATAORIGIN+$047E

@VarData	= @CASETMP_0005
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AISTRAIGHT					; PROCEDURE

; optimize OK (ai.inc), line = 22

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	and AVAILDIR
	jeq l_0753
	lda (:bp2),y
	sta NEWDIR
	jmp l_0763
l_0753

; optimize OK (ai.inc), line = 24

	lda AVAILDIR
	cmp #$03
	jne l_0775
	lda #$02
	jsr SYSTEM.RANDOM_0087
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_0787
l_0775

; optimize OK (ai.inc), line = 26

	lda AVAILDIR
	sta @CASETMP_0006
	cmp #$01
	jne l_0792
@

; optimize OK (ai.inc), line = 27

	lda #$01
	sta NEWDIR

	jmp a_0006
l_0792
	cmp #$02
	jne l_079F
@

; optimize OK (ai.inc), line = 28

	lda #$02
	sta NEWDIR

l_079F
a_0006
l_0787

; optimize OK (ai.inc), line = 31

	lda AVAILDIR
	cmp #$0C
	jne l_07BB
	lda #$02
	jsr SYSTEM.RANDOM_0087
	lda :STACKORIGIN,x
	add #$02
	sta :STACKORIGIN,x
	ldy :STACKORIGIN,x
	lda adr.DIRECTION,y
	sta NEWDIR
	dex
	jmp l_07D1
l_07BB

; optimize OK (ai.inc), line = 33

	lda AVAILDIR
	sta @CASETMP_0007
	cmp #$04
	jne l_07DC
@

; optimize OK (ai.inc), line = 34

	lda #$04
	sta NEWDIR

	jmp a_0007
l_07DC
	cmp #$08
	jne l_07E9
@

; optimize OK (ai.inc), line = 35

	lda #$08
	sta NEWDIR

l_07E9
a_0007
l_07D1
l_0763

; ------------------------------------------------------------

@CASETMP_0006	= DATAORIGIN+$047F
@CASETMP_0007	= DATAORIGIN+$0480

@VarData	= @CASETMP_0006
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AISAPPER					; PROCEDURE

; optimize OK (ai.inc), line = 48

	lda #$00
	sta L
	sta R
	sta U
	sta D

; optimize OK (ai.inc), line = 49

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	asl @
	tay
	lda #$00
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda #$0C
	adc adr.MUL40+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #PLY.X-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta T0W
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta T0W+1

; optimize OK (ai.inc), line = 51

	lda AVAILDIR
	and #$01
	jeq l_082F

; optimize OK (ai.inc), line = 52

	lda #$05
	sta I0B

l_0839
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_0847

; optimize OK (ai.inc), line = 53

	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_0861
	inc U
l_0861

; optimize OK (ai.inc), line = 54

	lda I0B
	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	lda :STACKORIGIN+9
	add #$01
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0886
	inc U
l_0886

; optimize OK (ai.inc), line = 55

	lda I0B
	asl @
	tay
	lda T0W
	sub adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	sbc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	dey
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_08AB
	inc U
l_08AB

; --- ForToDoEpilog
	dec I0B
	jpl l_0839
l_0847
l_082F

; optimize OK (ai.inc), line = 59

	lda AVAILDIR
	and #$02
	jeq l_08CF

; optimize OK (ai.inc), line = 60

	lda #$05
	sta I0B

l_08D9
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_08E7

; optimize OK (ai.inc), line = 61

	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	cmp #$20
	jne l_0901
	inc D
l_0901

; optimize OK (ai.inc), line = 62

	lda I0B
	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	lda :STACKORIGIN+9
	add #$01
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0926
	inc D
l_0926

; optimize OK (ai.inc), line = 63

	lda I0B
	asl @
	tay
	lda T0W
	add adr.MUL40,y
	sta :STACKORIGIN+9
	lda T0W+1
	adc adr.MUL40+1,y
	sta :bp+1
	ldy :STACKORIGIN+9
	dey
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_094B
	inc D
l_094B

; --- ForToDoEpilog
	dec I0B
	jpl l_08D9
l_08E7
l_08CF

; optimize OK (ai.inc), line = 67

	lda AVAILDIR
	and #$04
	jeq l_096F

; optimize OK (ai.inc), line = 68

	lda #$05
	sta I0B

l_0979
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_0987

; optimize OK (ai.inc), line = 69

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	lda (:bp),y
	cmp #$20
	jne l_099F
	inc L
l_099F

; optimize OK (ai.inc), line = 70

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	tya
	add #$28
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_09C2
	inc L
l_09C2

; optimize OK (ai.inc), line = 71

	lda T0W
	sub I0B
	tay
	lda T0W+1
	sbc #$00
	sta :bp+1
	tya
	sub #$28
	tay
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_09E5
	inc L
l_09E5

; --- ForToDoEpilog
	dec I0B
	jpl l_0979
l_0987
l_096F

; optimize OK (ai.inc), line = 75

	lda AVAILDIR
	and #$08
	jeq l_0A09

; optimize OK (ai.inc), line = 76

	lda #$05
	sta I0B

l_0A13
; --- ForToDoCondition
	lda I0B
	cmp #$01
	jcc l_0A21

; optimize OK (ai.inc), line = 77

	mwy T0W :bp2
	ldy I0B
	lda (:bp2),y
	cmp #$20
	jne l_0A39
	inc R
l_0A39

; optimize OK (ai.inc), line = 78

	lda T0W
	add I0B
	tay
	lda T0W+1
	adc #$00
	sta :bp+1
	tya
	add #$28
	tay
	scc
	inc :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0A5C
	inc R
l_0A5C

; optimize OK (ai.inc), line = 79

	lda T0W
	add I0B
	tay
	lda T0W+1
	adc #$00
	sta :bp+1
	tya
	sub #$28
	tay
	scs
	dec :bp+1
	lda (:bp),y
	cmp #$20
	jne l_0A7F
	inc R
l_0A7F

; --- ForToDoEpilog
	dec I0B
	jpl l_0A13
l_0A21
l_0A09

; optimize OK (ai.inc), line = 83

	lda D
	sta T0B

; optimize OK (ai.inc), line = 84

	cmp U
	jcs l_0AA7
	lda U
	sta T0B
l_0AA7

; optimize OK (ai.inc), line = 85

	lda T0B
	cmp L
	jcs l_0AC4
	lda L
	sta T0B
l_0AC4

; optimize OK (ai.inc), line = 86

	lda T0B
	cmp R
	jcs l_0AE1
	lda R
	sta T0B
l_0AE1

; optimize OK (ai.inc), line = 88

	lda T0B
	cmp D
	jne l_0AFE
	lda #$02
	sta T0B
l_0AFE

; optimize OK (ai.inc), line = 89

	lda T0B
	cmp U
	jne l_0B19
	lda #$01
	sta T0B
l_0B19

; optimize OK (ai.inc), line = 90

	lda T0B
	cmp L
	jne l_0B34
	lda #$04
	sta T0B
l_0B34

; optimize OK (ai.inc), line = 91

	lda T0B
	cmp R
	jne l_0B4F
	lda #$08
	sta T0B
l_0B4F

; optimize OK (ai.inc), line = 93

	lda AVAILDIR
	and T0B
	jeq l_0B6E
	lda T0B
	sta NEWDIR
	jmp l_0B7E
l_0B6E

; optimize FAIL ('AISTRAIGHT', ai.inc), line = 94

	jsr AISTRAIGHT
l_0B7E

; ------------------------------------------------------------

L	= DATAORIGIN+$0481
R	= DATAORIGIN+$0482
U	= DATAORIGIN+$0483
D	= DATAORIGIN+$0484
@FORTMP_0836	= $01
@FORTMP_08D6	= $01
@FORTMP_0976	= $01
@FORTMP_0A10	= $01

@VarData	= L
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIBULLY						; PROCEDURE

; optimize OK (ai.inc), line = 101

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta T0B

; optimize OK (ai.inc), line = 103

	lda PLAYER1.ISALIVE
	ora PLAYER2.ISALIVE
	jeq l_0B9B

; optimize OK (ai.inc), line = 105

	lda PLAYER1.ISALIVE
	jeq l_0BA8
	lda PLAYER1
	sta TMPPLY
	lda PLAYER1+1
	sta TMPPLY+1
	jmp l_0BB7
l_0BA8
	lda PLAYER2
	sta TMPPLY
	lda PLAYER2+1
	sta TMPPLY+1
l_0BB7

; optimize OK (ai.inc), line = 107

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.Y-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jcs l_0BD0
	lda #$01
	sta T0B
	jmp l_0BDE
l_0BD0
	lda #$02
	sta T0B
l_0BDE

; optimize OK (ai.inc), line = 108

	mwy PLY :bp2
	ldy #PLY.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.Y-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jeq l_0C08x
	lda AVAILDIR
	and T0B
	jne l_0C08
l_0C08x

; optimize OK (ai.inc), line = 109

	mwy PLY :bp2
	ldy #PLY.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	mwy TMPPLY :bp2
	ldy #TMPPLY.X-DATAORIGIN
	lda (:bp2),y
	cmp :STACKORIGIN+9
	jcs l_0C1D
	lda #$04
	sta T0B
	jmp l_0C2B
l_0C1D
	lda #$08
	sta T0B
l_0C2B
l_0C08
l_0B9B

; optimize OK (ai.inc), line = 113

	lda AVAILDIR
	and T0B
	jeq l_0C4B
	lda T0B
	sta NEWDIR
	jmp l_0C5B
l_0C4B

; optimize FAIL ('AISAPPER', ai.inc), line = 114

	jsr AISAPPER
l_0C5B
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	AIMIRROR					; PROCEDURE

; optimize OK (ai.inc), line = 122

	mwy PLY :bp2
	ldy #PLY.DIR-DATAORIGIN
	lda (:bp2),y
	sta T0B

; optimize OK (ai.inc), line = 124

	lda PLAYER1.ISALIVE
	jeq l_0C72

; optimize OK (ai.inc), line = 125

	lda PLAYER1.DIR
	sta @CASETMP_0008
	cmp #$01
	jne l_0C7E
@

; optimize OK (ai.inc), line = 126

	lda #$02
	sta T0B

	jmp a_0008
l_0C7E
	cmp #$02
	jne l_0C8B
@

; optimize OK (ai.inc), line = 127

	lda #$01
	sta T0B

	jmp a_0008
l_0C8B
	cmp #$04
	jne l_0C98
@

; optimize OK (ai.inc), line = 128

	lda #$08
	sta T0B

	jmp a_0008
l_0C98
	cmp #$08
	jne l_0CA5
@

; optimize OK (ai.inc), line = 129

	lda #$04
	sta T0B

l_0CA5
a_0008
l_0C72

; optimize OK (ai.inc), line = 133

	lda AVAILDIR
	and T0B
	jeq l_0CCB
	lda T0B
	sta NEWDIR
	jmp l_0CDB
l_0CCB

; optimize FAIL ('AISAPPER', ai.inc), line = 134

	jsr AISAPPER
l_0CDB

; ------------------------------------------------------------

@CASETMP_0008	= DATAORIGIN+$0485

@VarData	= @CASETMP_0008
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL00					; PROCEDURE

; optimize OK (levels.inc), line = 5

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 6

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$01
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 8

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 9

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 10

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL01					; PROCEDURE

; optimize OK (levels.inc), line = 17

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 18

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$01
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 20

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 21

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 22

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL02					; PROCEDURE

; optimize OK (levels.inc), line = 29

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 30

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 32

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 33

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 34

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL03					; PROCEDURE

; optimize OK (levels.inc), line = 41

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 42

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 44

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 45

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 46

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 47

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL04					; PROCEDURE

; optimize OK (levels.inc), line = 54

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$12
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 55

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$04
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$16
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 57

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 58

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 59

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 60

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL05					; PROCEDURE

; optimize OK (levels.inc), line = 67

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 68

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$04
	sta SETPLAYER.BRAIN
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 69

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$71
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$02
	sta SETPLAYER.DIR
	lda #$04
	sta SETPLAYER.Y
	lda #$14
	sta SETPLAYER.X
	lda PLAYER3
	sta SETPLAYER.P
	lda PLAYER3+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 70

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$55
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	lda #$01
	sta SETPLAYER.DIR
	lda #$12
	sta SETPLAYER.Y
	lda #$14
	sta SETPLAYER.X
	lda PLAYER4
	sta SETPLAYER.P
	lda PLAYER4+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 72

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 73

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 74

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 75

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL06					; PROCEDURE

; optimize OK (levels.inc), line = 82

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$12
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 83

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$16
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 84

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$71
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	sta SETPLAYER.DIR
	lda #$06
	sta SETPLAYER.Y
	sta SETPLAYER.X
	lda PLAYER3
	sta SETPLAYER.P
	lda PLAYER3+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 85

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$55
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$12
	sta SETPLAYER.Y
	lda #$24
	sta SETPLAYER.X
	lda PLAYER4
	sta SETPLAYER.P
	lda PLAYER4+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 87

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 88

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 89

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 90

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL07					; PROCEDURE

; optimize OK (levels.inc), line = 97

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$0C
	sta SETPLAYER.Y
	lda #$12
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 98

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$17
	sta SETPLAYER.Y
	lda #$01
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 99

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$71
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$02
	sta SETPLAYER.DIR
	lda #$04
	sta SETPLAYER.Y
	lda #$1E
	sta SETPLAYER.X
	lda PLAYER3
	sta SETPLAYER.P
	lda PLAYER3+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 100

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$55
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	lda #$01
	sta SETPLAYER.DIR
	lda #$15
	sta SETPLAYER.Y
	lda #$24
	sta SETPLAYER.X
	lda PLAYER4
	sta SETPLAYER.P
	lda PLAYER4+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 102

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 103

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 104

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 105

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETLEVEL08					; PROCEDURE

; optimize OK (levels.inc), line = 112

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$62
	sta SETPLAYER.COLOUR
	lda #$00
	sta SETPLAYER.BRAIN
	lda #$08
	sta SETPLAYER.DIR
	lda #$17
	sta SETPLAYER.Y
	lda #$01
	sta SETPLAYER.X
	lda PLAYER1
	sta SETPLAYER.P
	lda PLAYER1+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 113

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$5D
	sta SETPLAYER.COLOUR
	lda #$03
	sta SETPLAYER.BRAIN
	lda #$04
	sta SETPLAYER.DIR
	lda #$17
	sta SETPLAYER.Y
	lda #$26
	sta SETPLAYER.X
	lda PLAYER2
	sta SETPLAYER.P
	lda PLAYER2+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 114

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$71
	sta SETPLAYER.COLOUR
	lda #$02
	sta SETPLAYER.BRAIN
	sta SETPLAYER.DIR
	lda #$01
	sta SETPLAYER.Y
	lda #$0A
	sta SETPLAYER.X
	lda PLAYER3
	sta SETPLAYER.P
	lda PLAYER3+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize OK (levels.inc), line = 115

	lda #$01
	sta SETPLAYER.ISALIVE
	lda #$55
	sta SETPLAYER.COLOUR
	lda #$04
	sta SETPLAYER.BRAIN
	sta SETPLAYER.DIR
	lda #$01
	sta SETPLAYER.Y
	lda #$26
	sta SETPLAYER.X
	lda PLAYER4
	sta SETPLAYER.P
	lda PLAYER4+1
	sta SETPLAYER.P+1
	jsr SETPLAYER

; optimize FAIL (1, levels.inc), line = 117

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$06
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 118

	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$0A
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$12
	sta CALCOBSTACLEADDR.Y
	lda #$1E
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 119

	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$01
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex

; optimize FAIL (1, levels.inc), line = 120

	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$16
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	mva #$0E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0C
	sta CALCOBSTACLEADDR.Y
	lda #$14
	sta CALCOBSTACLEADDR.X
	jsr CALCOBSTACLEADDR
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.OBSTACLES,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.OBSTACLES+1,y
	dex
	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYFIELD					; PROCEDURE

; optimize OK (init.inc), line = 5

	lda #$1F
	sta BACKGROUND
	lda #$00
	sta BOREDER

; optimize OK (init.inc), line = 6

	lda #$20
	sta SYSTEM.FILLCHAR_006E.VALUE
	lda #$C0
	sta SYSTEM.FILLCHAR_006E.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_006E.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_006E.A
	lda #$0C
	sta SYSTEM.FILLCHAR_006E.A+1
	jsr SYSTEM.FILLCHAR_006E

; optimize OK (init.inc), line = 8

	lda #$27
	sta T0B

l_0FC3
; --- ForToDoCondition

; optimize OK (init.inc), line = 9

	ldy T0B
	lda #$A0
	sta $0C00,y

; optimize OK (init.inc), line = 10

	sta $0FC0,y

; optimize OK (init.inc), line = 11

	lda #$41
	sta $0800,y

; optimize OK (init.inc), line = 12

	sta $0BC0,y

; --- ForToDoEpilog
	dec T0B
	jpl l_0FC3
l_0FD1

; optimize OK (init.inc), line = 15

	lda #$18
	sta T0B

l_1003
; --- ForToDoCondition
	lda T0B
	cmp #$01
	jcc l_1011

; optimize OK (init.inc), line = 16

	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$0B
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$A0
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (init.inc), line = 17

	lda T0B
	asl @
	tay
	lda #$FF
	add adr.MUL40,y
	sta :bp2
	lda #$07
	adc adr.MUL40+1,y
	sta :bp2+1
	ldy #$00
	lda #$41
	sta (:bp2),y
	iny
	sta (:bp2),y

; --- ForToDoEpilog
	dec T0B
	jpl l_1003
l_1011

; optimize OK (init.inc), line = 20

	lda #$07
	sta I0B

l_1035
; --- ForToDoCondition
	lda I0B
	asl @
	tay
	lda #$5E
	sta adr.OBSTACLES,y
	lda #$00
	sta adr.OBSTACLES+1,y

; --- ForToDoEpilog
	dec I0B
	jpl l_1035
l_1043

; ------------------------------------------------------------

@FORTMP_0FC0	= $00
@FORTMP_1000	= $01
@FORTMP_1032	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYERS					; PROCEDURE

; optimize OK (init.inc), line = 27

	lda #$FF
	sta ALIVE

; optimize OK (init.inc), line = 28

	lda #$00
	sta PLAYER1.ISALIVE
	sta PLAYER2.ISALIVE

; optimize OK (init.inc), line = 29

	sta PLAYER3.ISALIVE
	sta PLAYER4.ISALIVE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSCORE					; PROCEDURE

; optimize OK (init.inc), line = 36

	lda #$30
	sta PLAYER1.SCORE
	sta PLAYER2.SCORE

; optimize OK (init.inc), line = 37

	sta PLAYER3.SCORE
	sta PLAYER4.SCORE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITARENA					; PROCEDURE

; optimize FAIL ('INITPLAYFIELD', init.inc), line = 44

	jsr INITPLAYFIELD
	jsr INITPLAYERS

; optimize OK (init.inc), line = 46

	lda LEVEL
	sta @CASETMP_0009
	cmp #$00
	jne l_108C
@

; optimize FAIL ('SETLEVEL00', init.inc), line = 47

	jsr SETLEVEL00
	jmp a_0009
l_108C
	cmp #$01
	jne l_1096
@

; optimize FAIL ('SETLEVEL01', init.inc), line = 48

	jsr SETLEVEL01
	jmp a_0009
l_1096
	cmp #$02
	jne l_10A0
@

; optimize FAIL ('SETLEVEL02', init.inc), line = 49

	jsr SETLEVEL02
	jmp a_0009
l_10A0
	cmp #$03
	jne l_10AA
@

; optimize FAIL ('SETLEVEL03', init.inc), line = 50

	jsr SETLEVEL03
	jmp a_0009
l_10AA
	cmp #$04
	jne l_10B4
@

; optimize FAIL ('SETLEVEL04', init.inc), line = 51

	jsr SETLEVEL04
	jmp a_0009
l_10B4
	cmp #$05
	jne l_10BE
@

; optimize FAIL ('SETLEVEL05', init.inc), line = 52

	jsr SETLEVEL05
	jmp a_0009
l_10BE
	cmp #$06
	jne l_10C8
@

; optimize FAIL ('SETLEVEL06', init.inc), line = 53

	jsr SETLEVEL06
	jmp a_0009
l_10C8
	cmp #$07
	jne l_10D2
@

; optimize FAIL ('SETLEVEL07', init.inc), line = 54

	jsr SETLEVEL07
	jmp a_0009
l_10D2
	cmp #$08
	jne l_10DC
@

; optimize FAIL ('SETLEVEL08', init.inc), line = 55

	jsr SETLEVEL08
l_10DC
a_0009

; optimize FAIL ('SAVEOBSTACLES', init.inc), line = 58

	jsr SAVEOBSTACLES
	jsr ANIMATEOBSTACLES
	jsr SHOWSCORE

; ------------------------------------------------------------

@CASETMP_0009	= DATAORIGIN+$0486

@VarData	= @CASETMP_0009
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERMOVE					; PROCEDURE

; optimize OK (main.pas), line = 15

	mwy PLY :bp2
	ldy #PLY.ISALIVE-DATAORIGIN
	lda (:bp2),y
	jeq l_10FD

; optimize FAIL ('CHECKAVAILDIR', main.pas), line = 17

	jsr CHECKAVAILDIR

; optimize OK (main.pas), line = 18

	lda AVAILDIR
	jne l_1111

; optimize FAIL ('PLAYERBUSTED', main.pas), line = 19

	jsr PLAYERBUSTED
	jmp l_111C
l_1111

; optimize OK (main.pas), line = 21

	mwy PLY :bp2
	ldy #PLY.BRAIN-DATAORIGIN
	lda (:bp2),y
	sta @CASETMP_000A
	cmp #$00
	jne l_1127
@

; optimize FAIL ('HUMAN', main.pas), line = 22

	jsr HUMAN
	jmp a_000A
l_1127
	cmp #$01
	jne l_1131
@

; optimize FAIL ('AISTRAIGHT', main.pas), line = 23

	jsr AISTRAIGHT
	jmp a_000A
l_1131
	cmp #$02
	jne l_113B
@

; optimize FAIL ('AISAPPER', main.pas), line = 24

	jsr AISAPPER
	jmp a_000A
l_113B
	cmp #$03
	jne l_1145
@

; optimize FAIL ('AIBULLY', main.pas), line = 25

	jsr AIBULLY
	jmp a_000A
l_1145
	cmp #$04
	jne l_114F
@

; optimize FAIL ('AIMIRROR', main.pas), line = 26

	jsr AIMIRROR
l_114F
a_000A

; optimize FAIL ('DRAWPLAYER', main.pas), line = 29

	jsr DRAWPLAYER
l_111C
l_10FD

; ------------------------------------------------------------

@CASETMP_000A	= DATAORIGIN+$0487

@VarData	= @CASETMP_000A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINLOOP					; PROCEDURE

; optimize FAIL ('INITARENA', main.pas), line = 39

	jsr INITARENA
	jsr STARTSCREEN

; --- RepeatUntilProlog
l_1163

; optimize FAIL ('SYSTEM.PAUSE_0085', main.pas), line = 42

	jsr SYSTEM.PAUSE_0085
	lda PLAYER1
	sta PLY
	lda PLAYER1+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize FAIL ('ANIMATEOBSTACLES', main.pas), line = 44

	jsr ANIMATEOBSTACLES

; optimize OK (main.pas), line = 46

	lda #$02
	sta SYSTEM.PAUSE_0086.N
	lda #$00
	sta SYSTEM.PAUSE_0086.N+1
	jsr SYSTEM.PAUSE_0086

; optimize OK (main.pas), line = 47

	lda PLAYER2
	sta PLY
	lda PLAYER2+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 48

	lda PLAYER3
	sta PLY
	lda PLAYER3+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize OK (main.pas), line = 49

	lda PLAYER4
	sta PLY
	lda PLAYER4+1
	sta PLY+1
	jsr PLAYERMOVE

; optimize FAIL ('ISONELEFT', main.pas), line = 50

	jsr ISONELEFT
	dex
	lda :STACKORIGIN+1,x
	jeq l_1163

; optimize FAIL ('UPDATESCORE', main.pas), line = 52

	jsr UPDATESCORE
	lda #$64
	sta SYSTEM.PAUSE_0086.N
	lda #$00
	sta SYSTEM.PAUSE_0086.N+1
	jsr SYSTEM.PAUSE_0086
	jsr NEXTLEVEL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_001F

; optimize FAIL ('SETFONTS', main.pas), line = 58

	jsr SETFONTS

; --- RepeatUntilProlog
l_118B

; optimize FAIL ('INITSCORE', main.pas), line = 61

	jsr INITSCORE
	lda #$00
	sta GAMEOVER
	lda #$01
	sta LEVEL

; --- RepeatUntilProlog
l_1195

; optimize FAIL ('MAINLOOP', main.pas), line = 63

	jsr MAINLOOP
	jsr ISGAMEOVER
	dex
	lda :STACKORIGIN+1,x
	jeq l_1195

; optimize FAIL ('SHOWSCORE', main.pas), line = 65

	jsr SHOWSCORE
	jsr ENDSCREEN
	lda #$C8
	sta SYSTEM.PAUSE_0086.N
	lda #$00
	sta SYSTEM.PAUSE_0086.N+1
	jsr SYSTEM.PAUSE_0086

; optimize OK (main.pas), line = 66

	jmp l_118B

; ------------------------------------------------------------

ATTRIBUTE_ADDR	= $0800
SCREEN_ADDR	= $0C00
BACKGROUND_COLOUR	= $1F
BOREDER_COLOUR	= $00
OBST_QUANTITY	= $07
VICTORIES	= $09
TRASH	= $5E
LOOK_AHEAD	= $05
EMPTY	= $20
WALL	= $A0
WALL_COLOUR	= $41
ZERO	= $30
OBSTACLE_1	= $54
OBSTACLE_2	= $55
OBST_COLOUR	= $65
PLY_HEAD_UP	= $50
PLY_HEAD_LEFT	= $51
PLY_HEAD_RIGHT	= $52
PLY_HEAD_DOWN	= $53
PLY_CRASH	= $2A
PLY_BUSTED	= $57
PLY_TAIL_UD	= $42
PLY_TAIL_LR	= $40
PLY_TAIL_RD	= $7D
PLY_TAIL_RU	= $6E
PLY_TAIL_LD	= $6D
PLY_TAIL_LU	= $70
PLY1_COLOUR	= $62
PLY2_COLOUR	= $5D
PLY3_COLOUR	= $71
PLY4_COLOUR	= $55
PLY_CTRL	= $00
AI_STRAIGHT	= $01
AI_SAPPER	= $02
AI_BULLY	= $03
AI_MIRROR	= $04
JOY_UP	= $01
JOY_DOWN	= $02
JOY_LEFT	= $04
JOY_RIGHT	= $08
JOY_FIRE	= $40
JOY_SELECT_1	= $02
JOY_SELECT_2	= $04
adr.MUL40	= CODEORIGIN+$0018
.var MUL40	= adr.MUL40 .word
adr.DIRECTION	= CODEORIGIN+$004A
.var DIRECTION	= adr.DIRECTION .word
KEYSCAN	= $FD30
JOY	= $FF08
RAMROMSEL	= $FF12
CHBAS	= $FF13
BACKGROUND	= $FF15
BOREDER	= $FF19
T0B	= $58
I0B	= $59
ALIVE	= $5A
NEWDIR	= $5B
AVAILDIR	= $5C
JOYSTATUS	= $5D
T0W	= $5E
adr.PLY	= $70
.var PLY	= adr.PLY .word
PLY.X	= DATAORIGIN+$0000
PLY.Y	= DATAORIGIN+$0001
PLY.HEAD	= DATAORIGIN+$0002
PLY.COLOUR	= DATAORIGIN+$0003
PLY.DIR	= DATAORIGIN+$0004
PLY.BRAIN	= DATAORIGIN+$0005
PLY.SCORE	= DATAORIGIN+$0006
PLY.ISALIVE	= DATAORIGIN+$0007
adr.TMPPLY	= $72
.var TMPPLY	= adr.TMPPLY .word
TMPPLY.X	= DATAORIGIN+$0000
TMPPLY.Y	= DATAORIGIN+$0001
TMPPLY.HEAD	= DATAORIGIN+$0002
TMPPLY.COLOUR	= DATAORIGIN+$0003
TMPPLY.DIR	= DATAORIGIN+$0004
TMPPLY.BRAIN	= DATAORIGIN+$0005
TMPPLY.SCORE	= DATAORIGIN+$0006
TMPPLY.ISALIVE	= DATAORIGIN+$0007
adr.OBSTACLES	= $60
.var OBSTACLES	= adr.OBSTACLES .word
LEVEL	= DATAORIGIN+$0010
GAMEOVER	= DATAORIGIN+$0011
adr.PLAYER1	= [DATAORIGIN+$0012] .array [6]
.var PLAYER1	= adr.PLAYER1 .word
PLAYER1.X	= DATAORIGIN+$0012
PLAYER1.Y	= DATAORIGIN+$0013
PLAYER1.HEAD	= DATAORIGIN+$0014
PLAYER1.COLOUR	= DATAORIGIN+$0015
PLAYER1.DIR	= DATAORIGIN+$0016
PLAYER1.BRAIN	= DATAORIGIN+$0017
PLAYER1.SCORE	= DATAORIGIN+$0018
PLAYER1.ISALIVE	= DATAORIGIN+$0019
adr.PLAYER2	= [DATAORIGIN+$001A] .array [6]
.var PLAYER2	= adr.PLAYER2 .word
PLAYER2.X	= DATAORIGIN+$001A
PLAYER2.Y	= DATAORIGIN+$001B
PLAYER2.HEAD	= DATAORIGIN+$001C
PLAYER2.COLOUR	= DATAORIGIN+$001D
PLAYER2.DIR	= DATAORIGIN+$001E
PLAYER2.BRAIN	= DATAORIGIN+$001F
PLAYER2.SCORE	= DATAORIGIN+$0020
PLAYER2.ISALIVE	= DATAORIGIN+$0021
adr.PLAYER3	= [DATAORIGIN+$0022] .array [6]
.var PLAYER3	= adr.PLAYER3 .word
PLAYER3.X	= DATAORIGIN+$0022
PLAYER3.Y	= DATAORIGIN+$0023
PLAYER3.HEAD	= DATAORIGIN+$0024
PLAYER3.COLOUR	= DATAORIGIN+$0025
PLAYER3.DIR	= DATAORIGIN+$0026
PLAYER3.BRAIN	= DATAORIGIN+$0027
PLAYER3.SCORE	= DATAORIGIN+$0028
PLAYER3.ISALIVE	= DATAORIGIN+$0029
adr.PLAYER4	= [DATAORIGIN+$002A] .array [6]
.var PLAYER4	= adr.PLAYER4 .word
PLAYER4.X	= DATAORIGIN+$002A
PLAYER4.Y	= DATAORIGIN+$002B
PLAYER4.HEAD	= DATAORIGIN+$002C
PLAYER4.COLOUR	= DATAORIGIN+$002D
PLAYER4.DIR	= DATAORIGIN+$002E
PLAYER4.BRAIN	= DATAORIGIN+$002F
PLAYER4.SCORE	= DATAORIGIN+$0030
PLAYER4.ISALIVE	= DATAORIGIN+$0031
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
C4P
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $04

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $05 $06 $09 $12
.by  $05 $21 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $07 $17 $09 $0E  $0E $05 $12 $21 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $06 $0C $0F $13  $05 $12 $21 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $18 $18
.by  $24 $24 $24 $3C $66 $5A $00 $03  $3E $C5 $C5 $3E $03 $00 $00 $C0  $7C $A3 $A3 $7C $C0 $00 $5A $66
.by  $3C $24 $24 $24 $18 $18 $00 $3C  $6E $62 $46 $76 $3C $00 $00 $3C  $76 $46 $62 $6E $3C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1160

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $05 $06 $09 $12 $05 $21 $00 $07  $17 $09 $0E $0E $05 $12 $21 $00  $06 $0C $0F $13 $05 $12 $21 $00
.by  $00 $00 $28 $00 $50 $00 $78 $00  $A0 $00 $C8 $00 $F0 $00 $18 $01  $40 $01 $68 $01 $90 $01 $B8 $01
.by  $E0 $01 $08 $02 $30 $02 $58 $02  $80 $02 $A8 $02 $D0 $02 $F8 $02  $20 $03 $48 $03 $70 $03 $98 $03
.by  $C0 $03 $01 $02 $04 $08
.endm

	end
